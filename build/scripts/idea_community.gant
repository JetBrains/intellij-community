// Copyright 2000-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

import com.intellij.util.SystemProperties
import org.jetbrains.intellij.build.BuildOptions
import org.jetbrains.intellij.build.IdeaCommunityBuilder
import org.jetbrains.jps.idea.IdeaProjectLoader

String home = IdeaProjectLoader.guessHome(this)

target(compile: "Compile project") {
  new IdeaCommunityBuilder(home).compileModules()
}

target('updater-full': 'Build updater-full.jar which includes IDE updater with its dependencies') {
  new IdeaCommunityBuilder(home).buildFullUpdater()
}

target('default': 'The default target') {
  def options = new BuildOptions()
  options.buildNumber = null //we cannot provide consistent build number for IDEA Community if it's built separately so use *.SNAPSHOT number to avoid confusion
  new IdeaCommunityBuilder(home, options).buildDistributions()
}

target('build-intellij-core' : 'Build intellij-core.zip') {
  def options = new BuildOptions()
  new IdeaCommunityBuilder(home, options).buildIntelliJCore()
}

target('update-from-sources': 'Update locally installed distribution from compiled classes') {
  def options = new BuildOptions()
  options.useCompiledClassesFromProjectOutput = true
  options.buildStepsToSkip << BuildOptions.SVGICONS_PREBUILD_STEP
  options.buildStepsToSkip << BuildOptions.SEARCHABLE_OPTIONS_INDEX_STEP
  options.buildStepsToSkip << BuildOptions.SOURCES_ARCHIVE_STEP
  if (!SystemProperties.getBooleanProperty('intellij.build.local.plugins.repository', false)) {
    options.buildStepsToSkip << BuildOptions.PROVIDED_MODULES_LIST_STEP
    options.buildStepsToSkip << BuildOptions.NON_BUNDLED_PLUGINS_STEP
  }
  //when IDEA CE is updated from IDEA UE sources project should be loaded from IDEA UE directory
  String projectHome = isDefined("devIdeaHome") ? devIdeaHome : home
  new IdeaCommunityBuilder(home, options, projectHome).buildUnpackedDistribution("$options.outputRootPath/$distOutputRelativePath")
}

private boolean isDefined(String key) {
  try {
    this[key]
    return true
  }
  catch (MissingPropertyException ignored) {
    return false
  }
}
