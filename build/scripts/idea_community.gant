/*
 * Copyright 2000-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.jetbrains.intellij.build.BuildOptions
import org.jetbrains.intellij.build.IdeaCommunityBuilder
import org.jetbrains.jps.idea.IdeaProjectLoader

String home = IdeaProjectLoader.guessHome(this)

target(compile: "Compile project") {
  new IdeaCommunityBuilder(home).compileModules()
}

target('default': 'The default target') {
  def options = new BuildOptions()
  options.buildNumber = null //we cannot provide consistent build number for IDEA Community if it's built separately so use *.SNAPSHOT number to avoid confusion
  new IdeaCommunityBuilder(home, options).buildDistributions()
}

target('build-intellij-core' : 'Build intellij-core.zip') {
  def options = new BuildOptions()
  new IdeaCommunityBuilder(home, options).buildIntelliJCore()
}

target('update-from-sources': 'Update locally installed distribution from compiled classes') {
  def options = new BuildOptions()
  options.useCompiledClassesFromProjectOutput = true
  options.buildStepsToSkip << BuildOptions.SEARCHABLE_OPTIONS_INDEX_STEP
  options.buildStepsToSkip << BuildOptions.PROVIDED_MODULES_LIST_STEP
  options.buildStepsToSkip << BuildOptions.SOURCES_ARCHIVE_STEP
  //when IDEA CE is updated from IDEA UE sources project should be loaded from IDEA UE directory
  String projectHome = isDefined("devIdeaHome") ? devIdeaHome : home
  new IdeaCommunityBuilder(home, options, projectHome).buildUnpackedDistribution(deploy)
}

private boolean isDefined(String key) {
  try {
    this[key]
    return true
  }
  catch (MissingPropertyException ignored) {
    return false
  }
}
