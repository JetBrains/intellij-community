/*
 * Copyright 2000-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.intellij.openapi.util.SystemInfo

import java.util.regex.Pattern

target('default': 'Downloads custom JRE build from Teamcity server') {
  def platform = SystemInfo.isMac ? "mac" : SystemInfo.isWindows ? "win" : SystemInfo.isLinux ? "linux" : ""
  if (platform == "") {
    echo "Unsupported platform, JRE download skipped"
    return
  }
  if (!(jreArchitecture == "64" || jreArchitecture == "32" && platform == "win")) {
    echo "Acceptable architecture (32 or 64 bit) is not defined, JRE download skipped"
    return
  }

  String buildId, buildNumber
  try {
    buildId = new URL("$jreTeamcityUrl/buildTypes/id:$jreBuildTypeId/builds/tags:$jreBuildTag/id").text
    buildNumber = new URL("$jreTeamcityUrl/builds/id:$buildId/number").text
  }
  catch (IOException e) {
    echo "Build server connection failed: ${e.message}, JRE download skipped"
    return
  }

  java(jvm: SystemInfo.isMac ? "$workIdeaHome/jre/jdk/Contents/Home/jre/bin/java" : "$workIdeaHome/jre/jre/bin/java",
       fork: "true", classname: "dummy", outputproperty: "jvmVersionOutput") {
    jvmarg(value: "-version")
  }
  try {
    if (jvmVersionOutput =~ /\(build .*release-b${Pattern.quote(buildNumber)}\)/ &&
        jvmVersionOutput =~ (jreArchitecture == "64" ? /OpenJDK 64-Bit Server VM/ : /OpenJDK Server VM/)) {
      echo "Latest version of custom JRE is installed, no update is required"
      return
    }
  }
  catch (MissingPropertyException ignored) {
    echo "Could'nt determine existing JRE version"
  }
  def files = new XmlSlurper().parse("$jreTeamcityUrl/builds/id:$buildId/artifacts/children/$platform")
  def artifact = files.children().collect { it.@name.text() }.find {
    it.startsWith(jreArtifactPrefix) && it.endsWith(jreArchitecture == "64" ? "_x64.tar.gz" : "_x86.tar.gz") && !it.contains("debug")
  }
  get src: "$jreTeamcityUrl/builds/id:$buildId/artifacts/content/$platform/$artifact", dest: deployDir
  mkdir dir: "$deployDir/jre"
  if (SystemInfo.isWindows) {
    untar src: "$deployDir/$artifact", dest: "$deployDir/jre", compression: "gzip"
  }
  else {
    // untar task doesn't support symlinks, so we need to use native tar executable
    exec(executable: "tar", dir: "$deployDir") {
      arg(value: "-xf")
      arg(value: "$artifact")
      arg(value: "--directory")
      arg(value: "jre")
    }
  }
  delete file: "$deployDir/$artifact"
}