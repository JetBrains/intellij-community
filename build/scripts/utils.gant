/*
 * Copyright 2000-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import com.intellij.openapi.util.SystemInfo
import com.intellij.openapi.util.io.FileUtil
import org.jetbrains.jps.gant.JpsGantTool
import org.jetbrains.jps.gant.TeamCityBuildInfoPrinter
import org.jetbrains.jps.model.java.JdkVersionDetector
import org.jetbrains.jps.model.java.JpsJavaExtensionService
import org.jetbrains.jps.model.java.JpsJavaSdkType
import org.jetbrains.jps.model.library.JpsOrderRootType
import org.jetbrains.jps.model.serialization.JpsModelSerializationDataService

includeTool << JpsGantTool

binding.setVariable("p", {String key, String defaultValue = null ->
  try {
    return getProperty(key) as String
  }
  catch (MissingPropertyException e) {
    if (defaultValue != null) {
      return defaultValue
    }
    throw e;
  }
})

binding.setVariable("versionSelector", {
  def fullVersion = p("component.version.major") + "." + p("component.version.minor")
  def versionParts = fullVersion.split("\\.")

  def minor = versionParts[1]
  versionParts[0] + (minor == "0" ? "": "." + minor)
})

binding.setVariable("guessJdk", {
  String javaHome = p("java.home")

  if (new File(javaHome).getName() == "jre") {
    javaHome = new File(javaHome).getParent()
  }

  return javaHome
})

binding.setVariable("includeFile", {String filePath ->
  Script s = groovyShell.parse(new File(filePath))
  s.setBinding(binding)
  s
})

binding.setVariable("yjpOptions", { String sessionName, String platformSuffix = "" ->
  "-agentlib:yjpagent$platformSuffix=probe_disable=*,disablealloc,disabletracing,onlylocal,disableexceptiontelemetry,delay=10000,sessionname=$sessionName".trim()
})

binding.setVariable("isDefined", {String key ->
  try {
    this[key]
    return true
  }
  catch (MissingPropertyException ignored) {
    return false
  }
})

private String require(String key) {
  try {
    this[key]
  }
  catch (MissingPropertyException ignored) {
    projectBuilder.error("Property '$key' is required")
  }
}

private String require(String key, String defaultValue) {
  try {
    this[key]
  }
  catch (MissingPropertyException ignored) {
    projectBuilder.info("'$key' is not defined. Defaulting to '$defaultValue'")
    this[key] = defaultValue
  }
}

binding.setVariable("requireProperty", {String key, String defaultValue = null ->
  if (defaultValue == null) {
    require(key)
  }
  else {
    require(key, defaultValue)
  }
})

binding.setVariable("guessHome", {
  // current file is supposed to be at build/scripts/*.gant path
  String uri = requireProperty("gant.file")
  new File(new URI(uri).getSchemeSpecificPart()).getParentFile().getParentFile().getParent()
})

binding.setVariable("loadProject", {
  defineJdk("IDEA jdk", setupJdkPath("jdkHome", "$home/build/jdk/1.6", "JDK_16_x64"))
  defineJdk("1.8", setupJdkPath("jdk8Home", "$home/build/jdk/1.8", "JDK_18_x64"))
  def bundledKotlinPath = "$home/build/kotlinc"
  if (!new File(bundledKotlinPath, "lib/kotlin-runtime.jar").exists()) {
    bundledKotlinPath = "$home/community/build/kotlinc"
  }
  if (!new File(bundledKotlinPath, "lib/kotlin-runtime.jar").exists()) {
    projectBuilder.error("Could not find Kotlin runtime at $bundledKotlinPath/lib/kotlin-runtime.jar: run download_kotlin.gant script to download Kotlin JARs")
    return
  }
  setPathVariable("KOTLIN_BUNDLED", bundledKotlinPath)
  projectBuilder.buildIncrementally = Boolean.parseBoolean(p("jps.build.incrementally", "false"))
  def dataDirName = projectBuilder.buildIncrementally ? ".jps-incremental-build" : ".jps-build-data"
  projectBuilder.dataStorageRoot = new File("$home/$dataDirName")
  projectBuilder.setupAdditionalLogging(new File("${p("teamcity.build.tempDir", p("java.io.tmpdir"))}/system/build-log/build.log"),
                                        p("jps.build.debug.logging.categories", ""))
  loadProjectFromPath(home)

  def compilerOptions = JpsJavaExtensionService.instance.getOrCreateCompilerConfiguration(project).currentCompilerOptions
  compilerOptions.GENERATE_NO_WARNINGS = true
  compilerOptions.DEPRECATION = false
  compilerOptions.ADDITIONAL_OPTIONS_STRING = compilerOptions.ADDITIONAL_OPTIONS_STRING.replace("-Xlint:unchecked", "")
})

binding.setVariable("removeJdkJarFiles", { Collection<String> classpath ->
  def jdkHomePaths = project.model.global.libraryCollection.getLibraries(JpsJavaSdkType.INSTANCE).collect {
    def homeDir = new File(it.properties.homePath)
    return SystemInfo.isMac && homeDir.name == "Home" ? homeDir.parent : homeDir.absolutePath
  }
  return classpath.findAll { jarPath -> jdkHomePaths.every { !FileUtil.isAncestor(it, jarPath, false) } }
})

private String setupJdkPath(String propertyName, String defaultDir, String envVarName) {
  try {
    this[propertyName]
  }
  catch (MissingPropertyException ignored) {
    def jdk = SystemInfo.isMac ? "$defaultDir/Home" : defaultDir
    if (new File(jdk).exists()) {
      projectBuilder.info("$propertyName set to $jdk")
    }
    else {
      jdk = System.getenv(envVarName)
      if (jdk != null) {
        projectBuilder.info("'$defaultDir' doesn't exist, $propertyName set to '$envVarName' environment variable: $jdk")
      }
      else {
        jdk = guessJdk()
        def version = JdkVersionDetector.instance.detectJdkVersion(jdk)
        if (propertyName.contains("8") && !version.contains("1.8.")) {
          projectBuilder.error("JDK 1.8 is required to compile the project, but '$propertyName' property and '$envVarName' environment variable aren't defined and default JDK $jdk ($version) cannot be used as JDK 1.8")
          return null
        }
        projectBuilder.info("'$envVarName' isn't defined and '$defaultDir' doesn't exist, $propertyName set to $jdk")
      }
    }
    this[propertyName] = jdk
    return jdk
  }
}

private void defineJdk(String jdkName, jdkHomePath) {
  jdk(jdkName, jdkHomePath) {
    def toolsJar = "$jdkHomePath/lib/tools.jar"
    if (new File(toolsJar).exists()) {
      classpath toolsJar
    }
  }

  if (SystemInfo.isMac) {
    //temporary workaround for Mac: resolve symlinks manually. Previously ZipFileCache used FileUtil.toCanonicalPath method which doesn't resolve symlinks.
    def jdk = global.libraryCollection.findLibrary(jdkName, JpsJavaSdkType.INSTANCE)
    def jdkClasspath = jdk.getFiles(JpsOrderRootType.COMPILED)
    def urls = jdk.getRootUrls(JpsOrderRootType.COMPILED)
    urls.each { jdk.removeUrl(it, JpsOrderRootType.COMPILED) }
    jdkClasspath.each {
      try {
        jdk.addRoot(it.getCanonicalFile(), JpsOrderRootType.COMPILED)
      }
      catch (IOException ignored) {
      }
    }
    projectBuilder.info("JDK '$jdkName' classpath: ${jdk.getFiles(JpsOrderRootType.COMPILED)}")
  }
}

private void setPathVariable(String name, String value) {
  def pathVars = JpsModelSerializationDataService.getOrCreatePathVariablesConfiguration(global)
  pathVars.addPathVariable(name, value)
}

binding.setVariable("prepareOutputFolder", {
  def targetFolder = projectBuilder.buildIncrementally ? "$home/out/incremental-build" : out
  projectBuilder.targetFolder = targetFolder
  if (projectBuilder.buildIncrementally && Boolean.parseBoolean(p("jps.build.clear.incremental.caches", "false"))) {
    FileUtil.delete(new File(targetFolder))
    FileUtil.delete(projectBuilder.dataStorageRoot)
  }
})

binding.setVariable("clearBuildCaches", {
  //todo[nik] this is temporary solution until we update bootstrap jps-builders jars to the new version where cleaning is performed in JpsGantProjectBuilder#cleanOutput
  def storageRoot = projectBuilder.dataStorageRoot
  if (storageRoot != null) {
    FileUtil.delete(storageRoot)
  }
})

binding.setVariable("findModule", {String name ->
  project.modules.find { it.name == name }
})

binding.setVariable("allModules", {
  return project.modules
})

requireProperty("home", guessHome())

String readSnapshotBuild() {
  def file = new File("$home/community/build.txt")
  if (!file.exists()) {
    file = new File("$home/build.txt")
  }

  return file.readLines().get(0)
}

binding.setVariable("snapshot", readSnapshotBuild())

projectBuilder.buildInfoPrinter = new TeamCityBuildInfoPrinter()
projectBuilder.compressJars = false

binding.setVariable("notifyArtifactBuilt", { String artifactPath ->
  if (!FileUtil.startsWith(FileUtil.toSystemIndependentName(artifactPath), FileUtil.toSystemIndependentName(home))) {
    projectBuilder.error("Artifact path $artifactPath should start with $home")
  }
  def relativePath = artifactPath.substring(home.length())
  if (relativePath.startsWith("/")) {
    relativePath = relativePath.substring(1)
  }
  def file = new File(artifactPath)
  if (file.isDirectory()) {
    relativePath += "=>" + file.name
  }
  projectBuilder.info("##teamcity[publishArtifacts '$relativePath']")
})

def debugPort = System.getProperty("debug.port")
def debugSuspend = System.getProperty("debug.suspend") ?: "n"
if (debugSuspend == 'y') {
  println """

------------->------------- The process suspended until remote debugger connects to debug port -------------<-------------
---------------------------------------^------^------^------^------^------^------^----------------------------------------

"""
}

binding.setVariable("commonJvmArgsForTests", {
  def jdwp = "-Xrunjdwp:transport=dt_socket,server=y,suspend=$debugSuspend"
  if (debugPort != null) jdwp += ",address=$debugPort"

  return [
    "-ea",
    "-Dfile.encoding=UTF-8",
    "-Dio.netty.leakDetectionLevel=PARANOID",
//    yjpOptions("junit", "64"), // uncomment to start tests with a profiling agent (e.g. in a personal build)
    "-server",
    "-Xbootclasspath/p:${projectBuilder.moduleOutput(findModule("boot"))}",
    "-XX:+HeapDumpOnOutOfMemoryError",
    "-Didea.home.path=$home",
    "-Didea.config.path=${p("teamcity.build.tempDir")}/config",
    "-Didea.system.path=${p("teamcity.build.tempDir")}/system",
    "-Xdebug",
    "-XX:ReservedCodeCacheSize=300m",
    "-XX:SoftRefLRUPolicyMSPerMB=50",
    "-XX:+UseConcMarkSweepGC",
    "-XX:-OmitStackTraceInFastThrow",
    jdwp
  ]
})

binding.setVariable("forceDelete", { String dirPath ->
  // if wasn't deleted - retry several times
  attempt = 1
  while (attempt < 21 && (new File(dirPath).exists())) {
    if (attempt > 1) {
      ant.echo "Deleting $dirPath ... (attempt=$attempt)"

      // let's wait a bit and try again - may be help
      // in some cases on our windows 7 agents
      sleep(2000)
    }

    ant.delete(failonerror: false, dir: dirPath)

    attempt++
  }

  if (new File(dirPath).exists()) {
    ant.project.log ("Cannot delete directory: $dirPath" )
    System.exit (1)
  }
})

binding.setVariable("collectUsedJars", { List modules, List approvedJars, List forbiddenJars, List modulesToBuild ->
  def usedJars = new HashSet();

  modules.each {
    def module = findModule(it)
    if (module != null) {
      projectBuilder.moduleRuntimeClasspath(module, false).each {
        File file = new File(it)
        if (file.exists()) {
          String path = file.canonicalPath.replace('\\', '/')
          if (path.endsWith(".jar") && approvedJars.any { path.startsWith(it) } && !forbiddenJars.any { path.contains(it) }) {
            if (usedJars.add(path)) {
              projectBuilder.info("\tADDED: $path for ${module.getName()}")
            }
          }
        }
      }
      if (modulesToBuild != null) {
        modulesToBuild << module
      }
    }
    else {
      projectBuilder.warning("$it is not a module")
    }
  }

  return usedJars
})

final def javaRT = "java-runtime" // that is used by build system in "buildSearchableOptions"

binding.setVariable("buildModulesAndCollectUsedJars", { List modules, List approvedJars, List forbiddenJars ->
  def modulesToBuild = []
  def modulesNames = modules.contains(javaRT) ? modules : [*modules, javaRT]
  def usedJars = collectUsedJars(modulesNames, approvedJars, forbiddenJars, modulesToBuild)
  clearBuildCaches()
  projectBuilder.cleanOutput()
  projectBuilder.buildModules(modulesToBuild)

  return usedJars
})

// modules used in Upsource and in Kotlin as an API to IDEA
binding.setVariable("analysisApiModules", [
    "analysis-api",
    "boot",
    "core-api",
    "duplicates-analysis",
    "editor-ui-api",
    "editor-ui-ex",
    "extensions",
    "indexing-api",
    "java-analysis-api",
    "java-indexing-api",
    "java-psi-api",
    "java-structure-view",
    "jps-model-api",
    "jps-model-serialization",
    "projectModel-api",
    "util",
    "util-rt",
    "xml-analysis-api",
    "xml-psi-api",
    "xml-structure-view-api",
])
binding.setVariable("analysisImplModules", [
    "analysis-impl",
    "core-impl",
    "indexing-impl",
    "java-analysis-impl",
    "java-indexing-impl",
    "java-psi-impl",
    "projectModel-impl",
    "structure-view-impl",
    "xml-analysis-impl",
    "xml-psi-impl",
    "xml-structure-view-impl",
])
