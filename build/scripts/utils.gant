/*
 * Copyright 2000-2017 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 */


import com.intellij.openapi.util.SystemInfo
import com.intellij.openapi.util.io.FileUtil
import org.jetbrains.intellij.build.impl.BuildUtils
import org.jetbrains.jps.gant.JpsGantTool
import org.jetbrains.jps.gant.TeamCityBuildInfoPrinter
import org.jetbrains.jps.model.java.JdkVersionDetector
import org.jetbrains.jps.model.java.JpsJavaExtensionService
import org.jetbrains.jps.model.java.JpsJavaSdkType
import org.jetbrains.jps.model.library.JpsOrderRootType
import org.jetbrains.jps.model.serialization.JpsModelSerializationDataService

includeTool << JpsGantTool

binding.setVariable("p", {String key, String defaultValue = null ->
  try {
    return getProperty(key) as String
  }
  catch (MissingPropertyException e) {
    if (defaultValue != null) {
      return defaultValue
    }
    throw e
  }
})

binding.setVariable("guessJdk", {
  String javaHome = p("java.home")

  if (new File(javaHome).getName() == "jre") {
    javaHome = new File(javaHome).getParent()
  }

  return javaHome
})

binding.setVariable("includeFile", {String filePath ->
  Script s = groovyShell.parse(new File(filePath))
  s.setBinding(binding)
  s
})

binding.setVariable("isDefined", {String key ->
  try {
    this[key]
    return true
  }
  catch (MissingPropertyException ignored) {
    return false
  }
})

private String require(String key) {
  try {
    this[key]
  }
  catch (MissingPropertyException ignored) {
    projectBuilder.error("Property '$key' is required")
  }
}

private String require(String key, String defaultValue) {
  try {
    this[key]
  }
  catch (MissingPropertyException ignored) {
    projectBuilder.info("'$key' is not defined. Defaulting to '$defaultValue'")
    this[key] = defaultValue
  }
}

binding.setVariable("requireProperty", {String key, String defaultValue = null ->
  if (defaultValue == null) {
    require(key)
  }
  else {
    require(key, defaultValue)
  }
})

binding.setVariable("guessHome", {
  // current file is supposed to be at build/scripts/*.gant path
  String uri = requireProperty("gant.file")
  new File(new URI(uri).getSchemeSpecificPart()).getParentFile().getParentFile().getParent()
})

binding.setVariable("loadProject", {
  defineJdk("IDEA jdk", setupJdkPath("jdkHome", "$home/build/jdk/1.6", "JDK_16_x64"))
  defineJdk("1.8", setupJdkPath("jdk8Home", "$home/build/jdk/1.8", "JDK_18_x64"))

  setupKotlin()
  def bundledKotlinPath = "$home/build/dependencies/build/kotlin/Kotlin/kotlinc"
  if (!new File(bundledKotlinPath, "lib/kotlin-runtime.jar").exists()) {
    bundledKotlinPath = "$home/community/build/dependencies/build/kotlin/Kotlin/kotlinc"
  }
  if (!new File(bundledKotlinPath, "lib/kotlin-runtime.jar").exists()) {
    projectBuilder.error("Could not find Kotlin runtime at $bundledKotlinPath/lib/kotlin-runtime.jar: run `./gradlew setupKotlinPlugin` in dependencies module to download Kotlin JARs")
    return
  }
  setPathVariable("KOTLIN_BUNDLED", bundledKotlinPath)
  if (!ensureKotlinCompilerAddedToClassPath()) {
    return
  }
  projectBuilder.buildIncrementally = Boolean.parseBoolean(p("jps.build.incrementally", "false"))
  def dataDirName = projectBuilder.buildIncrementally ? ".jps-incremental-build" : ".jps-build-data"
  projectBuilder.dataStorageRoot = new File("$home/$dataDirName")
  projectBuilder.setupAdditionalLogging(new File("${p("teamcity.build.tempDir", p("java.io.tmpdir"))}/system/build-log/build.log"),
                                        p("jps.build.debug.logging.categories", ""))
  loadProjectFromPath(home)

  def compilerOptions = JpsJavaExtensionService.instance.getOrCreateCompilerConfiguration(project).currentCompilerOptions
  compilerOptions.GENERATE_NO_WARNINGS = true
  compilerOptions.DEPRECATION = false
  compilerOptions.ADDITIONAL_OPTIONS_STRING = compilerOptions.ADDITIONAL_OPTIONS_STRING.replace("-Xlint:unchecked", "")
})

binding.setVariable("removeJdkJarFiles", { Collection<String> classpath ->
  def jdkHomePaths = project.model.global.libraryCollection.getLibraries(JpsJavaSdkType.INSTANCE).collect {
    def homeDir = new File(it.properties.homePath)
    return SystemInfo.isMac && homeDir.name == "Home" ? homeDir.parent : homeDir.absolutePath
  }
  return classpath.findAll { jarPath -> jdkHomePaths.every { !FileUtil.isAncestor(it, jarPath, false) } }
})

private void setupKotlin() {
  def workingDirectory = getDependenciesProjectDir()
  def gradleScript = System.getProperty('os.name').toLowerCase().contains('windows') ? "gradlew.bat" : "gradlew"
  def process = new ProcessBuilder("${workingDirectory.absolutePath}/$gradleScript", 'setupKotlinPlugin', '--stacktrace', '--info')
    .directory(workingDirectory)
    .start()
  process.consumeProcessOutputStream((OutputStream)System.out)
  process.consumeProcessErrorStream((OutputStream)System.err)
  process.waitFor()
}

private boolean ensureKotlinCompilerAddedToClassPath() {
  if (getClass().getResource("/org/jetbrains/kotlin/jps/build/KotlinBuilder.class") != null) {
    return true
  }

  def kotlinHomePath = "$home/build/dependencies/build/kotlin/Kotlin"
  if (!new File(kotlinHomePath).exists()) {
    kotlinHomePath = "$home/community/build/dependencies/build/kotlin/Kotlin"
  }
  def kotlinPluginLibPath = "$kotlinHomePath/lib"
  def kotlincLibPath = "$kotlinHomePath/kotlinc/lib"
  if (new File(kotlinPluginLibPath).exists() && new File(kotlincLibPath).exists()) {
    ["jps/kotlin-jps-plugin.jar", "kotlin-plugin.jar", "kotlin-reflect.jar"].each {
      BuildUtils.addToJpsClassPath("$kotlinPluginLibPath/$it", ant)
    }
    ["kotlin-runtime.jar"].each {
      BuildUtils.addToJpsClassPath("$kotlincLibPath/$it", ant)
    }
  }
  else {
    projectBuilder.error(
      "Could not find Kotlin JARs at $kotlinPluginLibPath and $kotlincLibPath: run `./gradlew setupKotlinPlugin` in dependencies module to download Kotlin JARs")
  }
  return true
}

private File getDependenciesProjectDir() {
  return new File(home, new File(home).name == "community" ? "build/dependencies" : "community/build/dependencies")
}

private String setupJdkPath(String propertyName, String defaultDir, String envVarName) {
  try {
    this[propertyName]
  }
  catch (MissingPropertyException ignored) {
    def jdk = SystemInfo.isMac ? "$defaultDir/Home" : defaultDir
    if (new File(jdk).exists()) {
      projectBuilder.info("$propertyName set to $jdk")
    }
    else {
      jdk = System.getenv(envVarName)
      if (jdk != null) {
        projectBuilder.info("'$defaultDir' doesn't exist, $propertyName set to '$envVarName' environment variable: $jdk")
      }
      else {
        jdk = guessJdk()
        def jdkInfo = JdkVersionDetector.instance.detectJdkVersionInfo(jdk)
        if (propertyName.contains("8") && jdkInfo.version.contains("1.8.")) {
          projectBuilder.error("JDK 1.8 is required to compile the project, but '$propertyName' property and '$envVarName' environment variable" +
                               " aren't defined and default JDK $jdk ($jdkInfo) cannot be used as JDK 1.8")
          return null
        }
        projectBuilder.info("'$envVarName' isn't defined and '$defaultDir' doesn't exist, $propertyName set to $jdk")
      }
    }
    this[propertyName] = jdk
    return jdk
  }
}

private void defineJdk(String jdkName, jdkHomePath) {
  jdk(jdkName, jdkHomePath) {
    def toolsJar = "$jdkHomePath/lib/tools.jar"
    if (new File(toolsJar).exists()) {
      classpath toolsJar
    }
  }

  if (SystemInfo.isMac) {
    //temporary workaround for Mac: resolve symlinks manually. Previously ZipFileCache used FileUtil.toCanonicalPath method which doesn't resolve symlinks.
    def jdk = global.libraryCollection.findLibrary(jdkName, JpsJavaSdkType.INSTANCE)
    def jdkClasspath = jdk.getFiles(JpsOrderRootType.COMPILED)
    def urls = jdk.getRootUrls(JpsOrderRootType.COMPILED)
    urls.each { jdk.removeUrl(it, JpsOrderRootType.COMPILED) }
    jdkClasspath.each {
      try {
        jdk.addRoot(it.getCanonicalFile(), JpsOrderRootType.COMPILED)
      }
      catch (IOException ignored) {
      }
    }
    projectBuilder.info("JDK '$jdkName' classpath: ${jdk.getFiles(JpsOrderRootType.COMPILED)}")
  }
}

private void setPathVariable(String name, String value) {
  def pathVars = JpsModelSerializationDataService.getOrCreatePathVariablesConfiguration(global)
  pathVars.addPathVariable(name, value)
}

binding.setVariable("findModule", {String name ->
  project.modules.find { it.name == name }
})

binding.setVariable("allModules", {
  return project.modules
})

requireProperty("home", guessHome())


projectBuilder.buildInfoPrinter = new TeamCityBuildInfoPrinter()
projectBuilder.compressJars = false


