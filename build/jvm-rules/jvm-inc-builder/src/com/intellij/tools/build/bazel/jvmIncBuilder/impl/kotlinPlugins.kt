// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.tools.build.bazel.jvmIncBuilder.impl

import androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor
import androidx.compose.compiler.plugins.kotlin.ComposePluginRegistrar
import com.intellij.tools.build.bazel.jvmIncBuilder.StorageManager
import com.intellij.tools.build.bazel.jvmIncBuilder.runner.OutputSink
import org.jetbrains.kotlin.backend.common.output.OutputFileCollection
import org.jetbrains.kotlin.cli.jvm.plugins.PluginCliParser.RegisteredPluginInfo
import org.jetbrains.kotlin.compiler.plugin.*
import org.jetbrains.kotlin.config.CompilerConfiguration
import org.jetbrains.kotlin.jvm.abi.JvmAbiCommandLineProcessor
import org.jetbrains.kotlin.jvm.abi.JvmAbiComponentRegistrar
import org.jetbrains.kotlin.util.ServiceLoaderLite
import org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationComponentRegistrar
import org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationPluginOptions
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import java.net.URLClassLoader
import java.nio.file.Path


@OptIn(ExperimentalCompilerApi::class)
fun configurePlugins(
  pluginIdToPluginClasspath: Map<String, String>,
  internalPluginIdToPluginOptions: Map<String, List<CliOptionValue>>,
  workingDir: Path,
  abiConsumer: ((OutputFileCollection) -> Unit)?,
  out: OutputSink,
  storageManager: StorageManager,
  consumer: (RegisteredPluginInfo) -> Unit,
) {
  for ((id, paths) in pluginIdToPluginClasspath) {
    val classpath = if (paths.isBlank()) {
      emptyList()
    }
    else {
      paths.splitToSequence(':').map { workingDir.resolve(it).toAbsolutePath().normalize() }.toList()
    }
    if (classpath.isNotEmpty()) {
      consumer(loadRegisteredPluginsInfo(classpath, internalPluginIdToPluginOptions))
      continue
    }

    when (id) {
      "org.jetbrains.kotlin.kotlin-serialization-compiler-plugin" -> {
        val processor = SerializationPluginOptions()
        consumer(RegisteredPluginInfo(
          componentRegistrar = null,
          compilerPluginRegistrar = SerializationComponentRegistrar(),
          commandLineProcessor = processor,
          pluginOptions = internalPluginIdToPluginOptions[processor.pluginId] ?: emptyList(),
        ))
      }

      "org.jetbrains.kotlin.kotlin-compose-compiler-plugin" -> {
        val processor = ComposeCommandLineProcessor()
        consumer(RegisteredPluginInfo(
          componentRegistrar = null,
          compilerPluginRegistrar = ComposePluginRegistrar(),
          commandLineProcessor = processor,
          pluginOptions = internalPluginIdToPluginOptions[processor.pluginId] ?: emptyList(),
        ))
      }

      else -> {
        consumer(CompilerPluginProvider.provide(id, internalPluginIdToPluginOptions))
      }
    }
  }

  if (abiConsumer != null) {
    val jvmAbiCommandLineProcessor = JvmAbiCommandLineProcessor()
    val pluginId = jvmAbiCommandLineProcessor.pluginId
    consumer(RegisteredPluginInfo(
      componentRegistrar = null,
      compilerPluginRegistrar = JvmAbiComponentRegistrar(abiConsumer),
      commandLineProcessor = jvmAbiCommandLineProcessor,
      pluginOptions = listOf(
        CliOptionValue(pluginId, JvmAbiCommandLineProcessor.OUTPUT_PATH_OPTION.optionName, ""), // Placeholder to satisfy the "required option" condition. The output is collected into memory
        CliOptionValue(pluginId, JvmAbiCommandLineProcessor.REMOVE_DATA_CLASS_COPY_IF_CONSTRUCTOR_IS_PRIVATE_OPTION.optionName, "true"),
        CliOptionValue(pluginId, JvmAbiCommandLineProcessor.REMOVE_PRIVATE_CLASSES_OPTION.optionName, "true"),
        CliOptionValue(pluginId, JvmAbiCommandLineProcessor.REMOVE_DEBUG_INFO_OPTION.optionName, "false"), // retain debug info, so that debug info in targets that depend on this one can be properly generated

        // Important: sorting members may cause generated bytecode built against ABI content
        // to be binary-different from the generated bytecode built against artifact's bytecode
        // For now, sorting is disabled to minimize bytecode differences
        CliOptionValue(pluginId, JvmAbiCommandLineProcessor.PRESERVE_DECLARATION_ORDER_OPTION.optionName, "true"),
      )
    ))
  }

}

@OptIn(ExperimentalCompilerApi::class)
@Suppress("DEPRECATION")
private fun loadRegisteredPluginsInfo(classpath: List<Path>, internalPluginIdToPluginOptions: Map<String, List<CliOptionValue>>): RegisteredPluginInfo {
  val classLoader = URLClassLoader(
    classpath.map { it.toUri().toURL() }.toTypedArray(),
    CompilerConfiguration::class.java.classLoader
  )

  val files = classpath.map { it.toFile() }
  val compilerPluginRegistrars = ServiceLoaderLite.loadImplementations(CompilerPluginRegistrar::class.java, files, classLoader)
  fun multiplePluginsErrorMessage(pluginObjects: List<Any>): String {
    return buildString {
      append("Multiple plugins found in given classpath: ")
      appendLine(pluginObjects.mapNotNull { it::class.qualifiedName }.joinToString(", "))
      append("  Plugin configuration is: $classpath")
    }
  }

  when (compilerPluginRegistrars.size) {
    0 -> throw PluginProcessingException("No plugins found in given classpath: $classpath")
    1 -> {}
    else -> throw PluginProcessingException(multiplePluginsErrorMessage(compilerPluginRegistrars))
  }

  val commandLineProcessor = ServiceLoaderLite.loadImplementations(CommandLineProcessor::class.java, files, classLoader)
  if (commandLineProcessor.size > 1) {
    throw PluginProcessingException(multiplePluginsErrorMessage(commandLineProcessor))
  }

  val processor = commandLineProcessor.firstOrNull()
  return RegisteredPluginInfo(
    componentRegistrar = null,
    compilerPluginRegistrar = compilerPluginRegistrars.firstOrNull(),
    commandLineProcessor = processor,
    pluginOptions = if (processor == null) emptyList() else internalPluginIdToPluginOptions[processor.pluginId] ?: emptyList(),
  )
}

private class CompilerPluginProvider {
  companion object {
    private val expects by getConstructor("fleet.multiplatform.expects.ExpectsPluginRegistrar", null)
    private val rpc by getConstructor(
      registrar = "com.jetbrains.fleet.rpc.plugin.RpcComponentRegistrar",
      commandLineProcessor = "com.jetbrains.fleet.rpc.plugin.RpcCommandLineProcessor",
    )
    private val noria by getConstructor(
      registrar = "noria.plugin.NoriaComponentRegistrar",
      commandLineProcessor = "noria.plugin.NoriaCommandLineProcessor",
    )

    fun provide(id: String, internalPluginIdToPluginOptions: Map<String, List<CliOptionValue>>): RegisteredPluginInfo {
      return when (id) {
        "jetbrains.fleet.expects-compiler-plugin" -> RegisteredPluginInfoCreator.createPluginInfo(expects, internalPluginIdToPluginOptions)
        "com.jetbrains.fleet.rpc-compiler-plugin" -> RegisteredPluginInfoCreator.createPluginInfo(rpc, internalPluginIdToPluginOptions)
        "jetbrains.fleet.noria-compiler-plugin" -> RegisteredPluginInfoCreator.createPluginInfo(noria, internalPluginIdToPluginOptions)
        else -> throw IllegalArgumentException("plugin requires classpath: $id")
      }
    }
  }
}

private fun getConstructor(registrar: String, commandLineProcessor: String?): Lazy<Pair<MethodHandle, MethodHandle?>> {
  return lazy {
    findConstructor(registrar) to commandLineProcessor?.let { findConstructor(it) }
  }
}

private fun findConstructor(name: String): MethodHandle {
  val aClass = KotlinCompilerRunner::class.java.classLoader.loadClass(name)
  return MethodHandles.lookup().findConstructor(aClass, MethodType.methodType(Void.TYPE))
}
