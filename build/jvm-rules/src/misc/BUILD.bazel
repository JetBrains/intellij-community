load("@rules_java//java:defs.bzl", "java_binary")
load("@rules_kotlin//kotlin:jvm.bzl", "kt_jvm_library")
# load("@rules_graalvm//graalvm:defs.bzl", "native_image")

kt_jvm_library(
    name = "worker-lib",
    kotlinc_opts = "//:rules_jvm_bootstrap_kotlinc_options",
    srcs = glob(["*.kt"]),
    deps = [
        "//src/worker-framework",
        "//zip",
        "//:opentelemetry-api",
    ],
    visibility = ["//visibility:public"],
)

java_binary(
    name = "worker-jvm",
    runtime_deps = [":worker-lib"],
    main_class = "org.jetbrains.bazel.jvm.JvmWorker",
    jvm_flags = [
        "-Djava.awt.headless=true",
        "-Dapple.awt.UIElement=true",
        "-Dio.netty.allocator.useCachedMagazinesForNonEventLoopThreads=true",
        # https://github.com/netty/netty/issues/11532
        "-Dio.netty.tryReflectionSetAccessible=true",
        # Set UTF-8 by default as per https://openjdk.org/jeps/400
        "-Dfile.encoding=UTF-8",
    ],
    visibility = ["//visibility:public"],
)

# native_image(
#     name = "worker-native",
#     deps = [":worker-lib"],
#     extra_args = [
#         "-H:+UnlockExperimentalVMOptions",
#         "-H:+CompactingOldGen",
#         "-Djava.awt.headless=true",
#         "-Dapple.awt.UIElement=true",
#         "-march=native",
#         "-O3",
#     ],
#     reflection_configuration = ":reflection-config.json",
#     main_class = "org.jetbrains.bazel.jvm.JvmWorker",
#     native_image_tool = "@graalvm//:native-image",
#     visibility = ["//visibility:public"],
# )
