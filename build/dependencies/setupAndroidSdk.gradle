/*
 * Copyright 2000-2019 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.util.GFileUtils
import javax.inject.Inject

repositories {
  maven { url 'https://cache-redirector.jetbrains.com/repo.maven.apache.org/maven2/' }
  maven { url 'https://cache-redirector.jetbrains.com/kotlin.bintray.com/kotlin-plugin/' }
  maven { url 'https://cache-redirector.jetbrains.com/dl.bintray.com/kotlin/kotlin-eap' }
  maven { url 'https://cache-redirector.jetbrains.com/dl.bintray.com/kotlin/kotlin-bootstrap' }
  maven { url 'https://cache-redirector.jetbrains.com/jetbrains.bintray.com/intellij-third-party-dependencies/' }
}

configurations {
  androidToolsBaseTemplates
  androidOfflineRepo
  androidSdk
  kotlinDeps
}

def osFamily = 'linux'
if (Os.isFamily(Os.FAMILY_WINDOWS)){
  osFamily = 'windows'
} else if (Os.isFamily(Os.FAMILY_MAC)){
  osFamily = 'darwin'
}

// infer kotlin_version from kotlin-plugin (e.g. "1.3.60-eap-143" in "1.3.60-eap-143-IJ2019.3-1:EAP")
def kotlinVersionLen = kotlinPluginBuild.indexOf("-release")
if (kotlinVersionLen == -1) {
  kotlinVersionLen = kotlinPluginBuild.indexOf("-IJ20")
}

ext.kotlin_version = kotlinPluginBuild.substring(0, kotlinVersionLen)
ext.android_m2_version = "26.6.0.2"
ext.android_sdk_version = "${osFamily}.3.6.0.0"

dependencies {
  androidToolsBaseTemplates "org.jetbrains.intellij.deps.android.tools.base:templates:${android_m2_version}"
  androidOfflineRepo "org.jetbrains.intellij.deps.android.tools.base:android-sdk-offline-repo:${android_m2_version}@zip"
  androidSdk "org.jetbrains.intellij.deps.android:android-sdk:${android_sdk_version}:@tar.gz"
  kotlinDeps "org.jetbrains.kotlin:kotlin-android-extensions:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-android-extensions-runtime:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-annotation-processing-gradle:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-build-common:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-compiler-runner:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-gradle-plugin-api:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-gradle-plugin-model:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-scripting-common:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-scripting-compiler-impl-embeddable:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-scripting-jvm:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-test-common:${kotlin_version}"
}

task syncAndroidSdk(dependsOn: [configurations.androidSdk, configurations.androidOfflineRepo], type: SyncAndroidSdkTask) {
  CopyUnitOfWork.project = project
  work = [
    new CopyData().with {
      it.from = configurations.androidOfflineRepo.name
      it.into = "${project.buildDir}/android-sdk"
      it.versionFile = android_m2_version
      it
    }, new CopyData().with {
    it.from = configurations.androidSdk.name
    it.into = "$buildDir/android-sdk/prebuilts/studio/sdk"
    it.versionFile = android_sdk_version
    it
  },
  ]
  onlyIf {
    work.any {
      !it.versionFile.exists()
    }
  }
  doFirst {
    work.each {
      it.into.deleteDir()
    }
  }
}

task syncToolsBaseTemplates(dependsOn: [configurations.androidToolsBaseTemplates, syncAndroidSdk], type: VersionedLazyCopyTask) {
  from { zipTree(configurations.androidToolsBaseTemplates.singleFile) }
  into "${project.buildDir}/android-sdk/tools-base/templates"
  versionFile = android_m2_version
}

task syncToolsBaseTemplatesOnly(dependsOn: [configurations.androidToolsBaseTemplates], type: VersionedLazyCopyTask) {
  from { zipTree(configurations.androidToolsBaseTemplates.singleFile) }
  into "${project.buildDir}/android-sdk/tools-base/templates"
  versionFile = android_m2_version
}

task setupAndroidPluginRuntimeForIdea(dependsOn: [syncToolsBaseTemplatesOnly, setupKotlinPlugin]){

}

task syncKotlinPluginForAndroid(dependsOn: [setupKotlinPlugin, syncAndroidSdk], type: Sync) {
  from "$buildDir/kotlin"
  into "$buildDir/android-sdk/prebuilts/tools/common/kotlin-plugin"
}

task updateKotlinLibs(dependsOn: [configurations.kotlinDeps, syncAndroidSdk], type: OfflineMavenRepository) {
  def verFile = "${project.buildDir}/android-sdk/prebuilts/tools/common/m2/repository/org/jetbrains/kotlin/${kotlin_version}"
  onlyIf {
    !file(verFile).isFile()
  }
  configurationName = "kotlinDeps"
  repoDir = file("$buildDir/android-sdk/prebuilts/tools/common/m2/repository")
  doLast {
    file(verFile).write(kotlin_version)
  }
}

/**
 * This is entry point: invoke this task to setup android sdk and all the artifacts required to run android-plugin unit tests
 */
task setupAndroidSdk(dependsOn: [syncAndroidSdk, syncKotlinPluginForAndroid, updateKotlinLibs, syncToolsBaseTemplates])

class CopyData implements Serializable {
  String from
  File into
  File versionFile
  void setInto(String into) {
    this.into = new File(into)
  }

  void setVersionFile(String versionStr) {
    this.versionFile = new File(into, "${versionStr}.version")
  }
}

/**
 * Worker API is an incubating feature and it has already been changed in newer Gradle versions. Have to be rewritten on upgrade
 */
class CopyUnitOfWork implements Runnable {
  static Project project
  CopyData parameters

  @Inject
  CopyUnitOfWork(CopyData parameters) {
    this.parameters = parameters
  }

  @Override
  void run() {
    extract(project.configurations."$parameters.from".singleFile as File)
    parameters.versionFile.createNewFile()
  }

  private enum FileType { ZIP, TAR }

  private FileType fileType(File archive) {
    if (archive.name.endsWith("tar.gz")) {
      FileType.TAR
    }
    else if (archive.name.endsWith("zip") || archive.name.endsWith("jar")) {
      FileType.ZIP
    }
    else {
      throw new Exception(archive.name)
    }
  }

  def extract(File archive) {
    def destination = parameters.into
    def fileType = fileType(archive)
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      project.copy {
        into destination
        from {
          if (fileType == FileType.TAR) {
            project.tarTree(project.resources.gzip(archive))
          }
          else {
            project.zipTree(archive)
          }
        }
      }
    }
    else if (fileType == FileType.TAR) {
      untar(archive, destination)
    }
    else {
      unzip(archive, destination)
    }
  }

  static def unzip(File zip, File destination) {
    println 'Using native unzip'
    project.exec { commandLine 'mkdir', '-p', destination.absolutePath }
    project.exec { commandLine 'unzip', '-qq', zip.absolutePath, '-d', destination.absolutePath }
  }

  static def untar(File tar, File destination) {
    println 'Using native tar'
    project.exec { commandLine 'mkdir', '-p', destination.absolutePath }
    project.exec { commandLine 'tar', '-xpf', "${tar.absolutePath}", '--directory', destination.absolutePath }
  }
}

/**
 * Default Copy task implementation is not as lazy as we need: dependencies from androidOfflineRepo and androidSdk configurations will be
 * downloaded even if no executable task will use them later.
 * See discussions here: https://discuss.gradle.org/t/lazy-configuration-resolution-with-artifact-repack/12747/5
 * and here: https://discuss.gradle.org/t/lazy-dependency-resolution-completely-conditional-configuration-dependency/5032
 */
class VersionedLazyCopyTask extends DefaultTask {
  Closure from
  File into
  File versionFile
  void setInto(String into) {
    this.into = new File(into)
  }

  void setVersionFile(String versionStr) {
    this.versionFile = new File(into, "${versionStr}.version")
    onlyIf {
      !versionFile.exists()
    }

    doFirst {
      into.deleteDir()
    }

    doLast {
      println ">> copying files into ${into}. Please be patient."
      getProject().copy {
        from this.from
        into this.into
      }
      versionFile.createNewFile()
    }
  }
}

class SyncAndroidSdkTask extends DefaultTask {
  Collection<CopyData> work
  WorkerExecutor workerExecutor

  @Inject
  SyncAndroidSdkTask(WorkerExecutor workerExecutor) {
    this.workerExecutor = workerExecutor
  }

  @TaskAction
  void copyAll() {
    work.each { CopyData data ->
      workerExecutor.submit(CopyUnitOfWork.class) { WorkerConfiguration config ->
        config.isolationMode = IsolationMode.NONE
        config.params data
      }
    }
  }
}

class OfflineMavenRepository extends DefaultTask {
  @Input
  String configurationName = 'compile'

  File repoDir

  @TaskAction
  void build() {
    Configuration configuration = project.configurations.getByName(configurationName)
    copyJars(configuration)
    copyPoms(configuration)
  }

  private void copyJars(Configuration configuration) {
    configuration.resolvedConfiguration.resolvedArtifacts.each { artifact ->
      def moduleVersionId = artifact.moduleVersion.id
      File moduleDir = new File(repoDir, "${moduleVersionId.group.replace('.', '/')}/${moduleVersionId.name}/${moduleVersionId.version}")
      GFileUtils.mkdirs(moduleDir)

      File target = new File(moduleDir, artifact.file.name)
      println "Copy: $artifact.file -> $target"
      GFileUtils.copyFile(artifact.file, target)
    }
  }

  private void copyPoms(Configuration configuration) {
    def componentIds = configuration.incoming.resolutionResult.allDependencies.collect { it.selected.id }

    def result = project.dependencies.createArtifactResolutionQuery()
      .forComponents(componentIds)
      .withArtifacts(MavenModule, MavenPomArtifact)
      .execute()

    for (component in result.resolvedComponents) {
      def componentId = component.id

      if (componentId instanceof ModuleComponentIdentifier) {
        File moduleDir = new File(repoDir, "${componentId.group.replace('.', '/')}/${componentId.module}/${componentId.version}")
        GFileUtils.mkdirs(moduleDir)
        File pomFile = component.getArtifacts(MavenPomArtifact)[0].file
        GFileUtils.copyFile(pomFile, new File(moduleDir, pomFile.name))
      }
    }
  }
}
