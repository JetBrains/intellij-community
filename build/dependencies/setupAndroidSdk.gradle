/*
 * Copyright 2000-2019 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.util.GFileUtils

repositories {
  maven { url 'https://cache-redirector.jetbrains.com/repo.maven.apache.org/maven2/' }
  maven { url 'https://cache-redirector.jetbrains.com/jetbrains.bintray.com/intellij-third-party-dependencies/' }
  ivy {
    // TODO: re-publish android-sdk:android-sdk using maven layout and remove Ivy repository
    url 'https://cache-redirector.jetbrains.com/jetbrains.bintray.com/intellij-third-party-dependencies/'
    patternLayout {
      artifact "[module]/[revision]/[artifact].[ext]"
    }
  }
}

configurations {
  androidOfflineRepo
  androidSdk
  kotlinDeps
}

def currentOs = org.gradle.internal.os.OperatingSystem.current()
def osFamily = currentOs.familyName

ext.kotlin_version = "1.3.50"
ext.android_m2_version = "26.5.0.1"
ext.android_sdk_version = "${osFamily}.3.3.3"

dependencies {
  androidOfflineRepo "org.jetbrains.intellij.deps.android.tools:android-sdk-offline-repo:${android_m2_version}@zip"
  androidSdk "android-sdk:android-sdk:${android_sdk_version}:@tar.gz"
  kotlinDeps "org.jetbrains.kotlin:kotlin-android-extensions:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-android-extensions-runtime:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-annotation-processing-gradle:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-build-common:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-compiler-runner:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-gradle-plugin-api:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-gradle-plugin-model:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-scripting-common:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-scripting-compiler-impl-embeddable:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-scripting-jvm:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
  kotlinDeps "org.jetbrains.kotlin:kotlin-test-common:${kotlin_version}"
}

/* First we setup an offline-repo. This will remove all the alien files from .../android-sdk.
   Later we will create an overlay with Android SDK and KotlinPlugin artifacts */
task syncOfflineRepo(dependsOn: configurations.androidOfflineRepo, type: VersionedCopyTask) {
  versionStr android_m2_version
  from { zipTree(configurations.androidOfflineRepo.singleFile) }
  into "${project.buildDir}/android-sdk"
}

task syncKotlinPluginForAndroid(dependsOn: [setupKotlinPlugin, syncOfflineRepo], type: VersionedCopyTask) {
  versionStr kotlin_version
  from "$buildDir/kotlin"
  into "$buildDir/android-sdk/prebuilts/tools/common/kotlin-plugin"
}

task syncAndroidSdk(dependsOn: [configurations.androidSdk, syncOfflineRepo], type: VersionedCopyTask) {
  versionStr android_sdk_version
  from { tarTree(resources.gzip(configurations.androidSdk.singleFile)) }
  into "$buildDir/android-sdk/prebuilts/studio/sdk"
}

task updateKotlinLibs(dependsOn: [configurations.kotlinDeps, syncOfflineRepo], type: OfflineMavenRepository) {
  onlyIf {
    !(file("${project.buildDir}/android-sdk/prebuilts/tools/common/m2/repository/org/jetbrains/kotlin/kotlin-test-common/${kotlin_version}").isDirectory())
  }
  configurationName = "kotlinDeps"
  repoDir = file("$buildDir/android-sdk/prebuilts/tools/common/m2/repository")
}

task setupAndroidSdk(dependsOn: [syncOfflineRepo, syncKotlinPluginForAndroid, syncAndroidSdk, updateKotlinLibs]) {
  // This is entry point: invoke this task to setup android sdk and all the artifacts required to run android-plugin unit tests
}

class VersionedCopyTask extends Copy {
  void setVersionStr(String versionStr) {
    def versionFile = { return new File("${getDestinationDir()}/${versionStr}.version") }
    onlyIf {
      !(versionFile.call().exists())
    }

    doFirst {
      getDestinationDir().deleteDir()
    }

    doLast {
      versionFile.call().write(versionStr)
    }
  }

  @Override
  AbstractCopyTask into(Object destDir) {
    return super.into(destDir)
  }
}

class OfflineMavenRepository extends DefaultTask {
  @Input
  String configurationName = 'compile'

  @OutputDirectory
  File repoDir = new File(project.buildDir, 'offline-repo')

  @TaskAction
  void build() {
    Configuration configuration = project.configurations.getByName(configurationName)
    copyJars(configuration)
    copyPoms(configuration)
  }

  private void copyJars(Configuration configuration) {
    configuration.resolvedConfiguration.resolvedArtifacts.each { artifact ->
      def moduleVersionId = artifact.moduleVersion.id
      File moduleDir = new File(repoDir, "${moduleVersionId.group.replace('.', '/')}/${moduleVersionId.name}/${moduleVersionId.version}")
      GFileUtils.mkdirs(moduleDir)

      File target = new File(moduleDir, artifact.file.name)
      println "Copy: $artifact.file -> $target"
      GFileUtils.copyFile(artifact.file, target)
    }
  }

  private void copyPoms(Configuration configuration) {
    def componentIds = configuration.incoming.resolutionResult.allDependencies.collect { it.selected.id }

    def result = project.dependencies.createArtifactResolutionQuery()
      .forComponents(componentIds)
      .withArtifacts(MavenModule, MavenPomArtifact)
      .execute()

    for (component in result.resolvedComponents) {
      def componentId = component.id

      if (componentId instanceof ModuleComponentIdentifier) {
        File moduleDir = new File(repoDir, "${componentId.group.replace('.', '/')}/${componentId.module}/${componentId.version}")
        GFileUtils.mkdirs(moduleDir)
        File pomFile = component.getArtifacts(MavenPomArtifact)[0].file
        GFileUtils.copyFile(pomFile, new File(moduleDir, pomFile.name))
      }
    }
  }
}
