/*
 * Copyright 2000-2019 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os
import javax.inject.Inject

repositories {
  maven { url 'https://cache-redirector.jetbrains.com/repo.maven.apache.org/maven2/' }
}

configurations {
  androidLayoutlib
  androidSdk
}

def osFamily = 'linux'
if (Os.isFamily(Os.FAMILY_WINDOWS)){
  osFamily = 'windows'
} else if (Os.isFamily(Os.FAMILY_MAC)){
  osFamily = 'darwin'
}

ext.android_sdk_version = "${osFamily}.4.2.0.0"
ext.android_layoutlib_version = "27.2.0.1"

dependencies {
  androidLayoutlib "org.jetbrains.intellij.deps.android.tools.base:layoutlib-resources:${android_layoutlib_version}"
  androidSdk "org.jetbrains.intellij.deps.android:android-sdk:${android_sdk_version}:@tar.gz"
}

task syncAndroidSdk(dependsOn: [configurations.androidSdk, configurations.androidLayoutlib], type: SyncAndroidSdkTask) {
  CopyUnitOfWork.project = project
  work = [
    new CopyData().with {
      it.from = configurations.androidLayoutlib.name
      it.into = "${project.buildDir}/android-sdk/layoutlib"
      it.versionFile = android_layoutlib_version
      it
    }, new CopyData().with {
      it.from = configurations.androidSdk.name
      it.into = "$buildDir/android-sdk/prebuilts/studio/sdk"
      it.versionFile = android_sdk_version
      it
    },
  ]
  onlyIf {
    work.any {
      !it.versionFile.exists()
    }
  }
  doFirst {
    work.each {
      it.into.deleteDir()
    }
  }
}

task setupAndroidPluginRuntimeForIdea {
  // nothing to do
}

/**
 * This is entry point: invoke this task to setup android sdk and all the artifacts required to run android-plugin unit tests
 */
task setupAndroidSdk(dependsOn: [syncAndroidSdk])

class CopyData implements Serializable {
  String from
  File into
  File versionFile
  void setInto(String into) {
    this.into = new File(into)
  }

  void setVersionFile(String versionStr) {
    this.versionFile = new File(into, "${versionStr}.version")
  }
}

/**
 * Worker API is an incubating feature and it has already been changed in newer Gradle versions. Have to be rewritten on upgrade
 */
class CopyUnitOfWork implements Runnable {
  static Project project
  CopyData parameters

  @Inject
  CopyUnitOfWork(CopyData parameters) {
    this.parameters = parameters
  }

  @Override
  void run() {
    extract(project.configurations."$parameters.from".singleFile as File)
    parameters.versionFile.createNewFile()
  }

  private enum FileType { ZIP, TAR }

  private FileType fileType(File archive) {
    if (archive.name.endsWith("tar.gz")) {
      FileType.TAR
    }
    else if (archive.name.endsWith("zip") || archive.name.endsWith("jar")) {
      FileType.ZIP
    }
    else {
      throw new Exception(archive.name)
    }
  }

  def extract(File archive) {
    def destination = parameters.into
    def fileType = fileType(archive)
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      project.copy {
        into destination
        from {
          if (fileType == FileType.TAR) {
            project.tarTree(project.resources.gzip(archive))
          }
          else {
            project.zipTree(archive)
          }
        }
      }
    }
    else if (fileType == FileType.TAR) {
      untar(archive, destination)
    }
    else {
      unzip(archive, destination)
    }
  }

  static def unzip(File zip, File destination) {
    println 'Using native unzip'
    project.exec { commandLine 'mkdir', '-p', destination.absolutePath }
    project.exec { commandLine 'unzip', '-qq', zip.absolutePath, '-d', destination.absolutePath }
  }

  static def untar(File tar, File destination) {
    println 'Using native tar'
    project.exec { commandLine 'mkdir', '-p', destination.absolutePath }
    project.exec { commandLine 'tar', '-xpf', "${tar.absolutePath}", '--directory', destination.absolutePath }
  }
}

class SyncAndroidSdkTask extends DefaultTask {
  Collection<CopyData> work
  WorkerExecutor workerExecutor

  @Inject
  SyncAndroidSdkTask(WorkerExecutor workerExecutor) {
    this.workerExecutor = workerExecutor
  }

  @TaskAction
  void copyAll() {
    work.each { CopyData data ->
      workerExecutor.submit(CopyUnitOfWork.class) { WorkerConfiguration config ->
        config.isolationMode = IsolationMode.NONE
        config.params data
      }
    }
  }
}
