import org.gradle.tooling.GradleConnector

import java.nio.file.Files

plugins {
  id "base"
  id "maven-publish"
}

def intelliJDepsGroupId = 'org.jetbrains.intellij.deps'
def gradleApiArtifactId = 'gradle-api'
def gradleApiVersion = readGradleApiVersion(project)
def patchedVersionName = gradleApiVersion + (findProperty('versionNameSuffix') ?: '')
def gradleApiDepsDir = new File(buildDir, "tmp/gradleApiExpanded/$gradleApiVersion/build/apiDeps")

private static String readGradleApiVersion(Project project) {
  def propertiesPath = project.projectDir.toPath().resolve("../dependencies.properties")
  def properties = new Properties()
  Files.newInputStream(propertiesPath).withCloseable {
    properties.load(it)
  }
  return properties.getProperty("gradleApiVersion")
}

task expandGradleApiJar() {
  doLast {
    def projectDir = new File(buildDir, "tmp/gradleApiExpanded/$gradleApiVersion")
    projectDir.mkdirs()

    // ensure generated jars are created from specified Gradle distribution
    // ATTENTION! This might not work on some environments, e.g. on windows agents of teamcity
    project.delete(new File(project.gradle.gradleUserHomeDir, "caches/$gradleApiVersion/generated-gradle-jars"))

    // prevent discovering of the settings.gradle file from the parent dir
    new File(projectDir, 'settings.gradle').createNewFile()
    new File(projectDir, 'build.gradle').withWriter { writer ->
      writer << """
import org.gradle.util.GradleVersion
defaultTasks 'setupGradleApiDeps'

def currentGradleVersion = GradleVersion.current().getVersion()
println 'currentGradleVersion: ' + currentGradleVersion

configurations {
  gradleApiDeps
}

dependencies {
  gradleApiDeps gradleApi()
}

task setupGradleApiDeps(dependsOn: configurations.gradleApiDeps, type: Sync) {
  println 'configurations.gradleApiDeps.files: ' + configurations.gradleApiDeps.files
  from zipTree(configurations.gradleApiDeps.files.find {it.name == "gradle-api-" + currentGradleVersion + ".jar"})
  into '${gradleApiDepsDir.path.replace("\\","\\\\")}'

  include 'org/gradle/**'
  include 'net/rubygrapefruit/**'
  include 'META-INF/native/**'
  include 'META-INF/gradle-plugins/**'
  include 'META-INF/services/org.gradle.*'
  include 'META-INF/*.kotlin_module'
  
  exclude 'org/gradle/internal/impldep/META-INF/versions/**'
}
"""
    }

    def connector = GradleConnector.newConnector()
    def gradleDistribution = findProperty('gradleDistribution') ?: null
    if (gradleDistribution) {
      println 'Using Gradle distribution from: ' + gradleDistribution
      connector.useDistribution(new URI(gradleDistribution))
    } else {
      connector.useGradleVersion(gradleApiVersion)
    }
    def connection = connector
      .forProjectDirectory(projectDir)
      .connect()
    try {
      def buildLauncher = connection.newBuild()
      buildLauncher.withArguments("--stacktrace")
      if (logging.level == LogLevel.INFO) {
        buildLauncher.withArguments("--info")
      }
      if (logging.level == LogLevel.DEBUG) {
        buildLauncher.withArguments("--debug")
      }
      buildLauncher.setStandardOutput(System.out);
      buildLauncher.setStandardError(System.err);
      buildLauncher.run()

      assert new File(gradleApiDepsDir, "org/gradle").isDirectory()
      assert new File(gradleApiDepsDir, "org/gradle/wrapper").isDirectory()
      assert new File(gradleApiDepsDir, "org/gradle/launcher").isDirectory()
      assert new File(gradleApiDepsDir, "org/gradle/internal/impldep").isDirectory()
    }
    finally {
      connection.close()
    }
  }
}

task gradleApiJar(type: Zip, dependsOn: expandGradleApiJar) {
  extension 'jar'
  baseName gradleApiArtifactId
  version patchedVersionName

  from gradleApiDepsDir
}

publishing {
  publications {
    gradleApi(MavenPublication) {
      groupId intelliJDepsGroupId
      artifactId gradleApiArtifactId
      version patchedVersionName

      artifact gradleApiJar
    }
  }
  repositories {
    maven {
      url "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies"
      credentials {
        username = System.getenv('INTELLIJ_DEPENDENCIES_BOT')
        password = System.getenv('INTELLIJ_DEPENDENCIES_TOKEN')
      }
    }
  }
}

task publishGradleApiToMavenLocal
publishGradleApiToMavenLocal.dependsOn tasks.withType(PublishToMavenLocal).matching { it.name.startsWith('publishGradle') }
task publishGradleApiToMavenRepository
publishGradleApiToMavenRepository.dependsOn tasks.withType(PublishToMavenRepository).matching { it.name.startsWith('publishGradle') }