import java.util.concurrent.TimeUnit

project.ext.retry = { Closure operation ->
  new Retry().call(operation)
}

// Copied from `org.jetbrains.intellij.build.impl.retry.Retry`
class Retry {
  private final int retries
  private final long delayMs

  Retry(int retries = 10, long delayMs = 1000) {
    this.delayMs = delayMs
    this.retries = retries
  }

  def <T> T call(Closure<T> operation) {
    def delayMs = delayMs
    for (i in 1..retries) {
      try {
        return operation(i)
      }
      catch (Exception e) {
        if (i == retries) {
          throw new RuntimeException("Failed all $retries attempts, see nested exception for details", e)
        }
        delayMs = backOff(delayMs, i, e)
      }
    }
    throw new RuntimeException("Should not be reached")
  }

  private static long backOffLimitMs = TimeUnit.MINUTES.toMillis(15)
  private static int backOffFactor = 2
  private static double backOffJitter = 0.1
  private Random random = new Random()

  private long backOff(long delayMs, int attempt, Exception e) {
    def rawDelay = Math.min(delayMs, backOffLimitMs)
    def jitter = (random.nextGaussian() * rawDelay * backOffJitter).toLong()

    def effectiveDelay = rawDelay + jitter
    if (effectiveDelay > 0) {
      println("Attempt $attempt of $retries failed with '$e.message'. Retrying in ${effectiveDelay}ms")
      Thread.sleep(effectiveDelay)
    }
    return effectiveDelay * backOffFactor
  }
}