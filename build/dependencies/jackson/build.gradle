/**
 * What is it?
 * This build script repackages vanilla jackson-core library without JEP 238 Multi-Release JAR classes.
 * The produced artifact is used in the Gradle Tooling Extension (Gradle runtime module).
 *
 * The re-packaging is required to avoid the bug on the Gradle side (https://github.com/gradle/gradle/issues/25434). Otherwise, there are
 * no way to use Jackson (and 3rd party libraries that uses Jackson) on the daemon side.
 *
 * How to run:
 * - `gradle tasks` - to show all the available publishing configurations and tasks
 * - `gradle publishRepackagedJarPublicationToMavenLocal` - to publish the repackaged Jar to the Maven Local repository
 * - `gradle publishRepackagedJarPublicationToJetBrainsRepository` - to publish the repackaged Jar to the internal repository
 */
import java.nio.file.Files

plugins {
  id "base"
  id "maven-publish"
  id "java"
}

// ----------------------------------------- CONFIGURATION ----------------------------------------- //

def libraryGroup = "com.fasterxml.jackson.core"
def libraryArtifactId = "jackson-core"
def libraryVersion = readProperty("gradleTAPI.jacksonCoreVersion")

def repackagedGroup = "org.jetbrains.intellij.deps"
def repackagedVersionSuffix = "-gradle-rt"

def repackagerDirTarget = new File(project.buildDir, "/exp")

def binaryRootDir = new File(repackagerDirTarget, "bin")
def srcRootDir = new File(repackagerDirTarget, "src")

repositories {
  mavenCentral()
}

// ----------------------------------------- HELPERS ----------------------------------------- //

String readProperty(String property) {
  def propertiesPath = project.projectDir
    .toPath()
    .resolve("../dependencies.properties")
  def properties = new Properties()
  try {
    Files.newInputStream(propertiesPath).withCloseable { stream ->
      properties.load(stream)
    }
  }
  catch (Exception e) {
    throw new IllegalStateException("Unable to read properties from $propertiesPath", e)
  }
  return Objects.requireNonNull(properties.getProperty(property), "Unable to find the value for the property: $property")
}

FileTree resolveLibraryFiles(String group, String artifact, String version, String classifier) {
  def configurationName = "repackage-$classifier"
  def dependencyNotation
  if (classifier != null) {
    dependencyNotation = "$group:$artifact:$version:$classifier"
  }
  else {
    dependencyNotation = "$group:$artifact:$version"
  }
  def configuration = project.configurations.create(configurationName)
  project.dependencies.add(configurationName, dependencyNotation)
  configuration.resolve()

  return zipTree(configuration.files.find {
    if (classifier == null) {
      it.name == "$artifact-$version" + '.jar'
    }
    else {
      it.name == "$artifact-$version-$classifier" + '.jar'
    }
  })
}

static void appendNoticeFile(File root) {
  def noticeFile = new File(root, "META-INF/JB-NOTICE")
  noticeFile.createNewFile()
  noticeFile.withWriter { writer ->
    writer << "Modifications to the original distribution:\n"
    writer << "The library files are untouched and left as is.\n"
    writer << "The only change to the original library is that the files for JEP 238: " +
    "Multi-Release JAR Support\n have been removed from the distribution.\n"
    writer << "The class org.jetbrains.intellij.deps.jackson.jackson.core.TapiMarkerClass\n has been added to the " +
    "library to be able to quickly distinguish the repackaged library\n from other versions of Jackson at " +
    "runtime. \nYou can read the relevant documentation inside the class file."
  }
}

// ----------------------------------------- TASKS ----------------------------------------- //

tasks.register('copyMarkerBinary', Copy) {
  group "build"
  dependsOn 'build'

  from sourceSets.main.java.classesDirectory into binaryRootDir
}

tasks.register('copyMarkerSources', Copy) {
  group "build"

  from sourceSets.main.java into srcRootDir
}

tasks.register('disassembleJar', Copy) {
  group "build"

  from resolveLibraryFiles(libraryGroup, libraryArtifactId, libraryVersion, null)
  exclude 'META-INF/versions/**'
  into binaryRootDir

  doLast {
    appendNoticeFile(binaryRootDir)
  }
}

tasks.register('disassembleSourcesJar', Copy) {
  group "build"

  from resolveLibraryFiles(libraryGroup, libraryArtifactId, libraryVersion, "sources")
  exclude 'META-INF/versions/**'
  into srcRootDir

  doLast {
    appendNoticeFile(srcRootDir)
  }
}

tasks.register('buildJar', Zip) {
  group "build"

  dependsOn 'disassembleJar', 'copyMarkerBinary'
  extension 'jar'
  baseName libraryArtifactId
  version "$libraryVersion$repackagedVersionSuffix"

  from binaryRootDir
}

tasks.register('buildSourcesJar', Zip) {
  group "build"

  dependsOn 'disassembleSourcesJar', 'copyMarkerSources'
  extension 'jar'
  classifier 'sources'
  baseName libraryArtifactId
  version "$libraryVersion$repackagedVersionSuffix"

  from srcRootDir
}

// ----------------------------------------- PUBLISHING ----------------------------------------- //

publishing {
  publications {
    repackagedJar(MavenPublication) {
      groupId repackagedGroup
      artifactId libraryArtifactId
      version "$libraryVersion$repackagedVersionSuffix"

      artifact buildJar
      artifact buildSourcesJar
    }
  }
  repositories {
    mavenLocal()
    maven {
      name "JetBrains"
      url = System.getenv('INTELLIJ_DEPENDENCIES_TARGET_REPO_URL')
      credentials {
        username = System.getenv('INTELLIJ_DEPENDENCIES_BOT')
        password = System.getenv('INTELLIJ_DEPENDENCIES_TOKEN')
      }
    }
  }
}
