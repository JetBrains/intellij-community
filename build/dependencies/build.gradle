import de.undercouch.gradle.tasks.download.DownloadAction

/*
 * Copyright 2000-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
  repositories {
    maven { url "http://repo.labs.intellij.net/plugins-gradle-org/" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "de.undercouch:gradle-download-task:3.2.0"
  }
}

allprojects {
  apply plugin: 'idea'
  idea {
    module {
      inheritOutputDirs true
    }
  }
}

apply plugin: "de.undercouch.download"
apply plugin: 'base'

group 'intellij.tools'
version '1.0'

try {
  project.ext.inJetBrainsNetwork = InetAddress.getByName("repo.labs.intellij.net").isReachable(1000)
  if (!project.ext.inJetBrainsNetwork && org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    project.ext.inJetBrainsNetwork = Runtime.getRuntime().exec("ping -n 1 repo.labs.intellij.net").waitFor() == 0
  }
  if (!project.ext.inJetBrainsNetwork) {
    logger.info('repo.labs.intellij.net is not reachable')
  }
}
catch (UnknownHostException e) {
  logger.info('repo.labs.intellij.net is not reachable', e)
  project.ext.inJetBrainsNetwork = false
}

class DownloadActionWrapper extends DownloadAction {
  DownloadActionWrapper(Project project) {
    super(project)
  }

  @Override
  void execute() throws IOException {
    def destFile = getDest()
    if (destFile == null || !destFile.exists()) {
      def tempFile = new File(destFile.absolutePath + ".part")
      dest(tempFile)
      overwrite(true)
      onlyIfNewer(false)
      super.execute()
      dest(destFile)
      tempFile.renameTo(destFile)
    }
  }
}

class DownloadWrapperExtension implements Configurable<DownloadWrapperExtension> {
  Project project

  DownloadWrapperExtension(Project project) {
    this.project = project
  }

  @Override
  DownloadWrapperExtension configure(Closure cl) {
    DownloadActionWrapper da = ConfigureUtil.configure(cl, new DownloadActionWrapper(project))
    try {
      da.execute()
    }
    catch (IOException e) {
      throw new IllegalStateException("Could not download file", e)
    }
    return this
  }
}
project.extensions.create('downloadWrapper', DownloadWrapperExtension.class, project)

apply from: 'setupJdk.gradle'
apply from: 'setupJbre.gradle'
apply from: 'setupKotlin.gradle'
apply from: 'setupJetSign.gradle'
apply from: 'setupAndroidSdk.gradle'
apply from: 'setupBuildScriptsDeps.gradle'

task setupDependencies(dependsOn: ['setupJdks', 'setupJbre', 'setupKotlinPlugin', 'setupJetSign'], group: 'dependencies')
clean.dependsOn('cleanSetupJdks', 'cleanSetupJbre', 'cleanSetupKotlinPlugin', 'cleanSetupJetSign')

task dependenciesFile() {
  description = 'Creates file with all dependencies version, even those that were overloaded by system or env properties'
  def outputFile = "$project.buildDir/dependencies.properties"
  outputs.upToDateWhen { false }
  outputs.file(outputFile)
  doFirst {
    def properties = new Properties()
    file('gradle.properties').withInputStream { properties.load(it) }
    file(outputFile).text = properties.stringPropertyNames().collect { "$it=${project.ext[it]}" }.join('\n')
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.3.1'
  distributionUrl = "https://cache-redirector.shared.aws.intellij.net/services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}