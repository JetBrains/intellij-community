/*
 * Copyright 2000-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
repositories {
  mavenCentral()
  if (project.ext.inJetBrainsNetwork) {
    maven { url "http://repo.labs.intellij.net/intellij-third-party-dependencies/" }
  }
  maven { url "https://jetbrains.bintray.com/intellij-third-party-dependencies" }
}

configurations {
  buildScriptsDeps
}

dependencies {
  buildScriptsDeps loadLibraryMavenId("Groovy")
  buildScriptsDeps loadLibraryMavenId("cli-parser")
  buildScriptsDeps loadLibraryMavenId("protobuf")
  buildScriptsDeps loadLibraryMavenId("OroMatcher")
  buildScriptsDeps loadLibraryMavenId("commons-codec")
  buildScriptsDeps loadLibraryMavenId("commons-logging")
  buildScriptsDeps loadLibraryMavenId("Trove4j")
  buildScriptsDeps loadLibraryMavenId("NanoXML")
  buildScriptsDeps loadLibraryMavenId("Guava")
  buildScriptsDeps loadLibraryMavenId("JUnit4")
  buildScriptsDeps(loadLibraryMavenId("gant-groovy"), { transitive = false })
}

/**
 * Resolve libraries used from build scripts sources
 */
task setupBuildScriptsDeps(dependsOn: configurations.buildScriptsDeps, type: Sync) {
  from configurations.buildScriptsDeps.files
  into "${project.buildDir}/build-scripts-deps"
}

private String loadLibraryMavenId(String libraryName) {
  File file = new File(project.rootDir, "../../.idea/libraries/${libraryName.replace('-', '_')}.xml")
  if (!file.exists()) {
    throw new GradleException("Cannot find $libraryName project library: $file doesn't exist")
  }
  def root = new XmlParser().parse(file)
  NodeList propertiesTags = root.library.first().properties
  if (propertiesTags.isEmpty()) {
    throw new GradleException("$libraryName project library is not a repository library")
  }
  //noinspection GrUnresolvedAccess
  propertiesTags.first().'@maven-id'
}