// Copyright 2000-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
import java.nio.file.Files
import java.nio.file.Paths

repositories {
  maven { url "https://cache-redirector.jetbrains.com/intellij-third-party-dependencies" }
  maven { url "https://cache-redirector.jetbrains.com/jetbrains.bintray.com/test-discovery" }
  maven { url "https://cache-redirector.jetbrains.com/jcenter.bintray.com" }
  maven { url 'https://www.jetbrains.com/intellij-repository/releases' }
}

configurations {
  buildScriptsDeps
  testDiscoveryDeps
}

dependencies {
  def jpsLibraryCoordinates = loadProjectLibraryProperties("jps-build-script-dependencies-bootstrap").first
  def jpsLibraryVersion = jpsLibraryCoordinates.substring(jpsLibraryCoordinates.lastIndexOf(':')+1)
  buildScriptsDeps(jpsLibraryCoordinates)
  buildScriptsDeps('commons-cli:commons-cli:1.2')
  buildScriptsDeps('com.jetbrains.intellij.platform:test-framework-core:' + jpsLibraryVersion)
}

/**
 * Resolve libraries used from build scripts sources
 */
task setupBuildScriptsDeps(dependsOn: configurations.buildScriptsDeps, type: Sync) {
  from configurations.buildScriptsDeps.files
  into "${project.buildDir}/build-scripts-deps"
}

task setupTestDiscoveryDeps {
  doFirst {
    def dir = "${project.buildDir}/test-discovery-deps"
    def testDiscoveryDeps = file(dir)
    testDiscoveryDeps.deleteDir()
    testDiscoveryDeps.mkdirs()
    configurations.detachedConfiguration(
      dependencies.create(loadProjectLibraryProperties('test-discovery-plugin-base', '../../..').first)
    ).files.each { from ->
      def into = Paths.get("$dir/$from.name")
      Files.copy(from.toPath(), into)
    }
  }
}

private Tuple2<String, Boolean> loadProjectLibraryProperties(String libraryName, String idea = '../..') {
  File file = new File(project.rootDir, "$idea/.idea/libraries/${libraryName.replace('-', '_')}.xml")
  if (!file.exists()) {
    throw new GradleException("Cannot find $libraryName project library: $file doesn't exist")
  }
  def root = new XmlParser().parse(file)
  NodeList propertiesTags = root.library.first().properties
  if (propertiesTags.isEmpty()) {
    throw new GradleException("$libraryName project library is not a repository library")
  }
  //noinspection GroovyAssignabilityCheck
  loadLibraryProperties(propertiesTags.first())
}

private static Tuple2<String, Boolean> loadLibraryProperties(Node propertiesTag) {
  new Tuple2(propertiesTag.'@maven-id', propertiesTag.'@include-transitive-deps' != "false")
}