import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.attribute.PosixFilePermission
import java.util.stream.Collectors
import java.util.stream.Stream

// Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
repositories {
  maven { url 'https://cache-redirector.jetbrains.com/plugins.jetbrains.com/maven' }
}

configurations {
  kotlinCompiler
}

def pluginChannelSeparator = kotlinCompilerBuild.indexOf(":")
def groupId = pluginChannelSeparator == -1 ? "com.jetbrains.plugins"
                                           : "${kotlinCompilerBuild.substring(pluginChannelSeparator + 1)}.com.jetbrains.plugins"
def pluginArtifactVersion = pluginChannelSeparator == -1 ? kotlinCompilerBuild : kotlinCompilerBuild.substring(0, pluginChannelSeparator)
def outputDir = "${project.buildDir}/kotlin-compiler"
dependencies {
  kotlinCompiler "$groupId:org.jetbrains.kotlin:$pluginArtifactVersion@zip"
}

task unzipKotlinCompiler(dependsOn: configurations.kotlinCompiler, type: Sync) {
  from zipTree(configurations.kotlinCompiler.singleFile)
  into outputDir
}

task setKotlincExecutablePermissions(dependsOn: unzipKotlinCompiler) {
  doLast {
    if (FileSystems.getDefault().supportedFileAttributeViews().contains("posix")) {
      file("$outputDir/Kotlin/kotlinc/bin").eachFileMatch(
        { it.startsWith('kotlin') && !it.endsWith(".bat") },
        {
          Files.setPosixFilePermissions(it.toPath(), Stream.of(PosixFilePermission.values()).collect(Collectors.toSet()))
        }
      )
    }
  }
}

task setupKotlinCompiler(dependsOn: setKotlincExecutablePermissions) {
  outputs.dir(outputDir)
}