// Copyright 2000-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

apply plugin: "de.undercouch.download"
apply plugin: "org.jetbrains.gradle.plugin.idea-ext"

configurations {
  mavenServer3CommonLibs
  mavenServer3CommonLibs.transitive = false

  maven3Distribution
  maven3Distribution.transitive = false
}



dependencies {
  mavenServer3CommonLibs 'org.apache.maven.archetype:archetype-common:2.2'
  mavenServer3CommonLibs 'org.apache.maven.archetype:archetype-catalog:2.2'
  mavenServer3CommonLibs 'org.apache.maven.shared:maven-dependency-tree:1.2'
  mavenServer3CommonLibs 'org.sonatype.nexus:nexus-indexer:3.0.4'
  mavenServer3CommonLibs 'org.sonatype.nexus:nexus-indexer-artifact:1.0.1'

  maven3Distribution "org.apache.maven:apache-maven:$bundledMavenVersion:bin@zip"
}

def communityPluginsDir = project.file("../../plugins")
def mavenServerLibDir = "$communityPluginsDir/maven/maven36-server-impl/lib/"
def mavenDistName = "apache-maven-$bundledMavenVersion"

task unpackMavenDistribution(type: Copy) {
  from zipTree(project.configurations.maven3Distribution.singleFile)
  into "$mavenServerLibDir/maven3"

  onlyIf { (!destinationDir.exists()) || destinationDir.list() == null || destinationDir.list().length == 0 }
}

task setupCommonLibs(type: Copy) {
  from configurations.mavenServer3CommonLibs
  into "$communityPluginsDir/maven/maven3-server-common/lib"
}

task deletePreviousMinorVersionIfRequired(type: Delete) {
  delete mavenServerLibDir
  onlyIf {
    new File("$mavenServerLibDir/maven3/lib").exists() && !new File("$mavenServerLibDir/maven3/lib/maven-core-${bundledMavenVersion}.jar").
      exists()
  }
}
//there is no friendly way to unpack gradle zip without parent dir
task setupBundledMaven(dependsOn: [deletePreviousMinorVersionIfRequired, unpackMavenDistribution, setupCommonLibs], type: Copy) {
  def unzippedDir = new File("$mavenServerLibDir/maven3/$mavenDistName")
  from fileTree(unzippedDir)
  into "$mavenServerLibDir/maven3/"
  onlyIf { unzippedDir.exists() && !new File("$mavenServerLibDir/maven3/bin").exists() }
  doLast() {
    unzippedDir.deleteDir()
  }
}