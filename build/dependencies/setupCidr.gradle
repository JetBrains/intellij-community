import org.gradle.internal.os.OperatingSystem

import java.util.concurrent.TimeUnit

apply from: 'retries.gradle'
final def IJ_DIR = project.file("../../..").canonicalFile
final def REPOSITORY = "https://repo.labs.intellij.net/clion"
final def SETUP_ALL_PLATFORMS = Boolean.getBoolean("intellij.cidr.setup.all.platforms")

final def CURRENT_PLATFORM = {
  def os = OperatingSystem.current()

  if (os.isWindows()) "win"
  else if (os.isMacOsX()) "mac"
  else "linux"
}()

final def PACKAGE_EXTENSIONS = [
  win: "zip",
  mac: "tar.gz",
  linux: "tar.gz"
]

task setupCidr

[
  clang: [
    version: "10.0.0.143e87",
    platforms: [
      win: [archs: ["x64"]],
      linux: [archs: ["x64"]],
      mac: [archs: ["x64"]]
    ],
    path: "CIDR/clion/bin/clang"
  ],
  lldb: [
    platforms: [
      win: [
        version: "8ffd204e9a7f82c62835b3706fb8e3f0b475bbbf",
        archs: ["x64", "x86"]
      ],
      linux: [
        version: "f9f6ec73b9475d2681a8b6bd11dd8605778a144f",
        archs: ["x64"]
      ],
      mac: [
        version: "f9f6ec73b9475d2681a8b6bd11dd8605778a144f",
        archs: ["x64"]
      ]
    ],
    path: "CIDR/cidr-debugger/bin/lldb"
  ],
  lldbfrontend: [
    version: "9a2042e226b54cca37f2c41f06d629e52c67a74e",
    platforms: [
      win: [archs: ["x64", "x86"]],
      linux: [archs: ["x64"]],
      mac: [archs: ["x64"]]
    ],
    path: "CIDR/cidr-debugger/bin/lldb"
  ],
  bridge: [
    version: "ed6c9b1",
    platforms: [
      mac: [archs: ["x64"]]
    ],
    path: "CIDR-appcode/appcode/bin",
    no_platform_subdir: true
  ],
  jbdevice: [
    version: "b19d276",
    platforms: [
      "mac": [archs: ["x64"]]
    ],
    path: "CIDR-appcode/appcode/bin",
    no_platform_subdir: true
  ],
  objchelper: [
    version: "f0d856",
    platforms: [
      "mac": [archs: ["x64"]],
      "linux": [archs: ["x64"]]
    ],
    path: "CIDR-appcode/appcode/bin",
    no_platform_subdir: true
  ]
].each { name, settings ->
  settings.platforms.findAll {
    SETUP_ALL_PLATFORMS || it.key == CURRENT_PLATFORM
  }.each { platform, platformSettings ->
    def version = platformSettings.containsKey("version") ?
      platformSettings.version : settings.version

    platformSettings.archs.each { arch ->
      def taskSuffix = "${name.capitalize()}${platform.capitalize()}${arch.capitalize()}"
      def packageExtension = PACKAGE_EXTENSIONS[platform]


      def packageName = "${name}-${version}-${platform}-${arch}.${packageExtension}"
      def downloadUrl = "${REPOSITORY}/${name}/${version}/${packageName}"

      def unpackDir = "${IJ_DIR}/${settings.path}" +
                      "${settings.no_platform_subdir ? '' : "/${platform}"}" +
                      "${platformSettings.archs.size > 1 ? "/${arch}" : ''}"

      def downloadTool = task("downloadCidr${taskSuffix}") {
        def packageArchive = "${buildDir}/cidr/${packageName}"
        outputs.file(packageArchive)

        doLast {
          project.ext.retry {
            download {
              src downloadUrl
              dest packageArchive
              tempAndMove true
              connectTimeout TimeUnit.SECONDS.toMillis(30).toInteger()
              readTimeout TimeUnit.MINUTES.toMillis(5).toInteger()
            }
          }
        }
      }

      setupCidr.dependsOn(
        tasks.create(
          name: "setupCidr${taskSuffix}",
          dependsOn: [downloadTool], type: Copy
        ) {
          def packageArchive = downloadTool.outputs.files.singleFile

          inputs.files(packageArchive)
          outputs.dir(unpackDir)

          outputs.upToDateWhen {
            !fileTree(unpackDir).isEmpty()
          }

          from {
            if (packageExtension == "zip")
              zipTree(packageArchive)
            else if(packageExtension == "tar.gz")
              tarTree(resources.gzip(packageArchive))
          }
          into unpackDir
        }
      )
    }
  }
}

task cleanSetupCidr() {
  doLast {
    setupCidr.dependsOn.each { setupToolTask ->
      def downloadToolTask = setupToolTask.dependsOn.first()
      delete setupToolTask.outputs.files.singleFile
      delete downloadToolTask.outputs.files.singleFile
    }
  }
}
