import org.gradle.internal.os.OperatingSystem

static String getAndroidStudioOs() {
  def os = OperatingSystem.current()

  if (os.isWindows()) {
    return "windows"
  } else if (os.isMacOsX()) {
    return "mac"
  } else if (os.isLinux()) {
    return "linux"
  } else {
    throw new GradleException("Unsupported operating system: $os")
  }
}

def androidStudioVersion = (String) rootProject.findProperty("kombo.android.studio.version")
def androidStudioBuild = (String) rootProject.findProperty("kombo.android.studio.platform.version")
def targetPath = (String) rootProject.findProperty("kombo.android.studio.target")

if (androidStudioVersion != null) {
  repositories {
    ivy {
      url = new URI("https://dl.google.com/dl/android/studio/ide-zips/$androidStudioVersion")

      patternLayout {
        artifact("[artifact]-[revision]-${getAndroidStudioOs()}.[ext]")
      }

      metadataSources {
        artifact()
      }
    }
  }
}

configurations {
  androidStudio
}

dependencies {
  def distributionExtension = (androidStudioOs == "linux") ? "tar.gz" : "zip"
  androidStudio "google:android-studio-ide:$androidStudioBuild@$distributionExtension"
}

static String skipTopLevelDirectory(String path) {
  def index = path.indexOf('/')
  return (index >= 0) ? path.substring(index + 1) : path
}

static String skipContentsDirectory(String path) {
  def contentsPrefix = "/Contents/"
  def index = path.indexOf(contentsPrefix)
  return (index >= 0) ? path.substring(index + contentsPrefix.length()) : path
}

task downloadAndroidStudio(dependsOn: configurations.androidStudio) {
  doFirst {
    def artifacts = configurations.androidStudio.resolvedConfiguration.resolvedArtifacts
    if (artifacts.size() != 1) {
      throw new GradleException("Expected single artifact for Android Studio, got ${artifacts.size()}")
    }

    def archive = artifacts.first().file
    System.out.println("Android Studio downloaded: ${archive}")

    if (targetPath == null) {
      throw new GradleException("Target path should be set")
    }

    def targetDir = new File(targetPath)
    targetDir.mkdirs()

    copy {
      FileTree fileTree = (androidStudioOs == "linux") ? tarTree(archive) : zipTree(archive)
      from(fileTree.matching {
        exclude("**/plugins/Kotlin/**")
      })

      into targetDir

      includeEmptyDirs = false

      eachFile(new Action<FileCopyDetails>() {
        @Override
        void execute(FileCopyDetails file) {
          file.path((androidStudioOs == "mac") ? skipContentsDirectory(file.path) : skipTopLevelDirectory(file.path))
        }
      })
    }
  }
}