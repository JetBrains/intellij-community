import java.util.concurrent.TimeUnit

def setupJbre = task setupJbre {}

def jdkRepo = 'https://cache-redirector.jetbrains.com/intellij-jdk'
def targetOs = System.getProperty("intellij.build.target.os", "all")
def bundledJreVersion = System.getProperty("intellij.build.bundled.jre.version", "8").toInteger()
def isBundledJreModular = bundledJreVersion >= 9
def jreArtifactBuild = System.getProperty("intellij.build.bundled.jre.build", jdkBuild)
def jreArtifactPrefix
if (bundledJreVersion == 8) {
  jreArtifactPrefix = 'jbrex8'
}
else if (bundledJreVersion == 9) {
  jreArtifactPrefix = 'jbsdk9'
}
else if (bundledJreVersion == 11) {
  jreArtifactPrefix = 'jbsdk11'
}  
else {
  throw new IllegalArgumentException("Unable to determine bundled JRE artifact prefix by JRE version $bundledJreVersion")
}

jrePlatformsToDownload(targetOs).each { platform ->
  archToDownload(platform, !isBundledJreModular).each { arch ->
    def jreBuild = project.ext.has("jreBuild_$platform") ? project.ext["jreBuild_$platform"] : jreArtifactBuild
    def jbsdkArtifactName = "${jreArtifactPrefix}${jreBuild}_${platform}_$arch"
    def jbreArtifactName = "jbre${bundledJreVersion}${jreBuild}_${platform}_$arch"

    task("downloadJbre_${platform}_$arch") {
      def outputDir = "$project.buildDir/jbre"
      def outputFile = "$outputDir/${jbsdkArtifactName}_origin.tar.gz"

      inputs.property('build', jreArtifactBuild)
      outputs.file(outputFile)
      doLast {
        logger.info("Downloading $jbsdkArtifactName to $outputFile")
        download {
          src "$jdkRepo/${jbsdkArtifactName}.tar.gz"
          dest outputFile
          tempAndMove true
          timeout TimeUnit.MINUTES.toMillis(30).toInteger()
        }
      }
    }
    cleanSetupJbre.dependsOn("cleanDownloadJbre_${platform}_$arch")

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      // note: tarTree extracts symlinks as 0 length files which breaks osx distributions 
      task("untarJbre_${platform}_$arch", type: Copy, dependsOn: "downloadJbre_${platform}_$arch") {
        def downloadOutputs = tasks["downloadJbre_${platform}_$arch"].outputs.files
        if (isBundledJreModular) {
          from tarTree(downloadOutputs.singleFile), {
            exclude modularJdkSpecificFiles(platform)
          }
        }
        else {
          from tarTree(downloadOutputs.singleFile), {
            exclude 'lib/tools.jar'
          }
          from tarTree(downloadOutputs.singleFile), {
            include 'lib/tools.jar'
            into 'jre'
          }
        }
        into { "${downloadOutputs.singleFile.parent}/${downloadOutputs.singleFile.name - '.tar.gz'}/" }
        includeEmptyDirs = false
      }
    }
    else {
      task("untarJbre_${platform}_$arch", type: Exec, dependsOn: "downloadJbre_${platform}_$arch") {
        def downloadOutputs = tasks["downloadJbre_${platform}_$arch"].outputs.files
        def outputDir = "${downloadOutputs.singleFile.absolutePath - '.tar.gz'}"
        inputs.file(downloadOutputs.singleFile)
        outputs.dir(outputDir)
        doFirst { exec { commandLine 'mkdir', '-p', outputDir } }
        commandLine 'tar', '-xpf', "${downloadOutputs.singleFile.absolutePath}", '--directory', outputDir
        if (isBundledJreModular) {
          doLast {
            delete fileTree(outputDir) {
              include modularJdkSpecificFiles(platform)
            }
          }
        }
        else if (platform != 'osx') {
          doLast {
            if (file("$outputDir/lib/tools.jar").exists()) {
              exec {
                commandLine 'mv', "$outputDir/lib/tools.jar", "$outputDir/jre/lib/"
                ignoreExitValue = true
              }
            }
          }
        }
      }
    }
    cleanSetupJbre.dependsOn("cleanUntarJbre_${platform}_$arch")

    createTarJbreTask("tarJbre_${platform}_$arch", "untarJbre_${platform}_$arch", platform, jbreArtifactName, false, isBundledJreModular)
    if (!isBundledJreModular) {
      createTarJbreTask("tarJbrex_${platform}_$arch", "untarJbre_${platform}_$arch", platform, jbsdkArtifactName, true, isBundledJreModular)

      setupJbre.dependsOn("tarJbrex_${platform}_$arch")
      cleanSetupJbre.dependsOn("cleanTarJbrex_${platform}_$arch")
    }

    setupJbre.dependsOn("tarJbre_${platform}_$arch")
    cleanSetupJbre.dependsOn("cleanTarJbre_${platform}_$arch")
  }
}

def createTarJbreTask(String taskName,
                      String untarTaskName,
                      String platform,
                      String archiveName,
                      boolean includeToolsJar,
                      boolean isBundledJreModular) {
  def dirToTar = isBundledJreModular ? '.' : (platform == 'osx' ? 'jdk' : 'jre')

  if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    task(taskName, type: Tar) {
      def untarOutputs = tasks[untarTaskName].outputs.files
      inputs.file(untarOutputs)
      if (isBundledJreModular) {
        from untarOutputs.singleFile
      }
      else {
        from "$untarOutputs.singleFile/$dirToTar"
        if (!includeToolsJar) {
          exclude "**/tools.jar"
        }
      }
      into dirToTar
      compression = Compression.GZIP
      setArchiveName("${archiveName}.tar.gz")
      destinationDir = untarOutputs.singleFile.parentFile
    }
  }
  else {
    task(taskName, type: Exec) {
      def untarOutputs = tasks[untarTaskName].outputs.files
      def outputFile = "${untarOutputs.singleFile.parentFile}/${archiveName}.tar.gz"
      inputs.files(untarOutputs)
      outputs.file(outputFile)
      def arguments = ['tar', '-czf', outputFile, '-C', untarOutputs.singleFile.absolutePath]
      if (!isBundledJreModular && !includeToolsJar) {
        arguments += ['--exclude', '**/tools.jar']
        // exclude entire lib directory (IDEA-176641)
        if (platform == 'osx') {
          arguments += ['--exclude', './jdk/Contents/Home/lib']
        }
      }
      arguments += [dirToTar]
      commandLine = arguments
    }
  }
}

// see org.jetbrains.intellij.build.BuildOptions.targetOS
static def jrePlatformsToDownload(targetOs) {
  def jrePlatformToDownload = new HashSet<String>()
  if (targetOs == 'all' || targetOs == 'linux') jrePlatformToDownload.add('linux')
  if (targetOs == 'all' || targetOs == 'windows') jrePlatformToDownload.add('windows')
  if (targetOs == 'all' || targetOs == 'mac') jrePlatformToDownload.add('osx')
  jrePlatformToDownload
}

static def archToDownload(platform, is32BitArchSupported) {
  is32BitArchSupported && platform == 'windows' ? ['x86', 'x64'] : ['x64']
}

/**
 * @link https://docs.oracle.com/javase/9/install/installed-directory-structure-jdk-and-jre.htm
 */
static def modularJdkSpecificFiles(platform) {
  def prefix = platform == 'osx' ? 'jdk/Contents/Home/' : ''
  ["${prefix}jmods/**", "${prefix}include/**", '**/src.zip', "${prefix}lib/src.zip"]
}