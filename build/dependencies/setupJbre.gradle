// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
import java.util.concurrent.TimeUnit

apply from: 'archivesCleanup.gradle'

ext.jbreOutputDir = "$project.buildDir/jbre"
def deleteObsoleteJbreArchives = ext.deleteObsoleteArchivesTask('Jbre', jbreOutputDir)
task setupJbre() {
  finalizedBy deleteObsoleteJbreArchives
}

def targetOs = System.getProperty("intellij.build.target.os", "all")
def jreVersion = System.getProperty("intellij.build.bundled.jre.version", "11").toInteger()
def jreBuild = System.getProperty("intellij.build.bundled.jre.build", jdkBuild)
def forcedPrefix = System.getProperty("intellij.build.bundled.jre.prefix")
jbrTasks(jreBuild, jreVersion, targetOs, forcedPrefix)

/**
 * Update this method together with:
 *  `setupJdk.gradle`
 *  `org/jetbrains/intellij/build/impl/BundledJreManager.groovy`
 */
static def splitJbrBuild(String jreBuild, String version) {
  def split = jreBuild.split('b')
  if (split.length > 2) {
    throw new IllegalArgumentException(
      "$jreBuild is expected in format <update>b<build_number>. Examples: u202b1483.24, 11_0_2b140, b96"
    )
  }
  if (split.length == 2) {
    def update = split[0]
    if (update.startsWith(version)) update -= version
    // [11_0_2, b140] or [8u202, b1483.24]
    ["$version$update", "b${split[1]}"]
  }
  else {
    // [11, b96]
    [version, jreBuild]
  }
}

def jbrTasks(String defaultBuild, int version, String targetOs, String forcedPrefix) {
  platformsToDownload(targetOs).each { platform ->
    archToDownload(platform).each { arch ->
      prefixes(arch, forcedPrefix).each { prefix ->
        def jbrBuild = project.ext.has("jreBuild_$platform") ? project.ext["jreBuild_$platform"] : defaultBuild
        def (update, buildNumber) = splitJbrBuild(jbrBuild.toString(), version.toString())
        def jbrArtifactName = "$prefix$update-$platform-$arch-$buildNumber"
        downloadJbrTask(jbrArtifactName, jbrBuild.toString())
      }
    }
  }
}

@SuppressWarnings("GrMethodMayBeStatic")
def jreUrl() {
  // base url of TeamCity build to download JRE from
  System.getProperty('intellij.jre.teamcity.build.url') ?: 'https://cache-redirector.jetbrains.com/intellij-jbr'
}

def downloadJbrTask(String artifactName, String build) {
  def outputFile = "${jbreOutputDir}/${artifactName}.tar.gz"
  task("download${artifactName.capitalize()}") {
    inputs.property('build', build)
    outputs.file(outputFile)
    doLast {
      logger.info("Downloading $artifactName to $outputFile")
      download {
        src "${jreUrl()}/${artifactName}.tar.gz"
        dest outputFile
        tempAndMove true
        timeout TimeUnit.MINUTES.toMillis(30).toInteger()
      }
    }
    setupJbre.dependsOn(it)
    cleanSetupJbre.dependsOn("clean${it.name.capitalize()}")
  }
  file(outputFile)
}

// see org.jetbrains.intellij.build.BuildOptions.targetOS
static def platformsToDownload(targetOs) {
  Set<String> jrePlatformToDownload = []
  if (targetOs == 'all' || targetOs == 'linux') jrePlatformToDownload += 'linux'
  if (targetOs == 'all' || targetOs == 'windows') jrePlatformToDownload += 'windows'
  if (targetOs == 'all' || targetOs == 'mac') jrePlatformToDownload += 'osx'
  jrePlatformToDownload
}

enum Arch {
  x86, x64
}

static def archToDownload(platform) {
  platform != 'osx' ? [Arch.x86, Arch.x64] : [Arch.x64]
}

/**
 * Update this method together with:
 *  `org/jetbrains/intellij/build/impl/BundledJreManager.groovy`
 */
static def prefixes(Arch arch, String forcedPrefix) {
  if (forcedPrefix != null) {
    [forcedPrefix]
  }
  else if (arch == Arch.x86) {
    ['jbr-']
  }
  else {
    ['jbr-', 'jbr_jcef-', 'jbr_jfx-']
  }
}