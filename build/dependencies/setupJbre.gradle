// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.util.concurrent.TimeUnit

task setupJbre()

def targetOs = System.getProperty("intellij.build.target.os", "all")
def jreVersion = System.getProperty("intellij.build.bundled.jre.version", "11").toInteger()
def jreBuild = System.getProperty("intellij.build.bundled.jre.build", jdkBuild)
def jrePrefix = System.getProperty("intellij.build.bundled.jre.prefix")
jbrTasks(jreBuild, jreVersion, targetOs, jrePrefix)

/**
 * Update this method together with:
 *  `setupJdk.gradle`
 *  `org/jetbrains/intellij/build/impl/BundledJreManager.groovy`
 */
static def splitJbrBuild(String jreBuild, String version) {
  def split = jreBuild.split('b')
  if (split.length > 2) {
    throw new IllegalArgumentException(
      "$jreBuild is expected in format <update>b<build_number>. Examples: u202b1483.24, 11_0_2b140, b96"
    )
  }
  if (split.length == 2) {
    def update = split[0]
    if (update.startsWith(version)) update -= version
    // [11_0_2, b140] or [8u202, b1483.24]
    ["$version$update", "b${split[1]}"]
  }
  else {
    // [11, b96]
    [version, jreBuild]
  }
}

def jbrTasks(String defaultBuild, int version, String targetOs, String prefix = null) {
  if (prefix == null) prefix = 'jbr-'
  platformsToDownload(targetOs).each { platform ->
    archToDownload(platform).each { arch ->
      def jbrBuild = project.ext.has("jreBuild_$platform") ? project.ext["jreBuild_$platform"] : defaultBuild
      def (update, buildNumber) = splitJbrBuild(jbrBuild.toString(), version.toString())
      def jbrArtifactName = "$prefix$update-$platform-$arch-$buildNumber"
      downloadJbrTask(jbrArtifactName, jbrBuild.toString())
    }
  }
}

@SuppressWarnings("GrMethodMayBeStatic")
def jreUrl() {
  // base url of TeamCity build to download JRE from
  System.getProperty('intellij.jre.teamcity.build.url') ?: 'https://cache-redirector.jetbrains.com/intellij-jbr'
}

def downloadJbrTask(String artifactName, String build) {
  def outputDir = "$project.buildDir/jbre"
  def outputFile = "$outputDir/${artifactName}.tar.gz"
  task("download${artifactName.capitalize()}") {
    inputs.property('build', build)
    outputs.file(outputFile)
    doLast {
      logger.info("Downloading $artifactName to $outputFile")
      download {
        src "${jreUrl()}/${artifactName}.tar.gz"
        dest outputFile
        tempAndMove true
        timeout TimeUnit.MINUTES.toMillis(30).toInteger()
      }
    }
    setupJbre.dependsOn(it)
    cleanSetupJbre.dependsOn("clean${it.name.capitalize()}")
  }
  file(outputFile)
}

def untarJbrTask(File downloadOutputs, String taskName) {
  Task untar
  if (OperatingSystem.current().isWindows()) {
    // note: tarTree extracts symlinks as 0 length files which breaks osx distributions
    untar = task("untar$taskName", type: Copy, dependsOn: "download$taskName") {
      from tarTree(downloadOutputs)
      into { "${downloadOutputs.parent}/${downloadOutputs.name - '.tar.gz'}/" }
      includeEmptyDirs = false
    }
  }
  else {
    untar = task("untar$taskName", type: Exec, dependsOn: "download$taskName") {
      def outputDir = "${downloadOutputs.absolutePath - '.tar.gz'}"
      inputs.file(downloadOutputs)
      outputs.dir(outputDir)
      doFirst { exec { commandLine 'mkdir', '-p', outputDir } }
      commandLine 'tar', '-xpf', "${downloadOutputs.absolutePath}", '--directory', outputDir
    }
  }
  cleanSetupJbre.dependsOn("cleanUntar$taskName")
  untar
}

def tarJbrTask(String taskName, Task untarTask, String archive) {
  def dirToTar = 'jbr'
  def untarOutputs = untarTask.outputs.files
  if (OperatingSystem.current().isWindows()) {
    task(taskName, type: Tar) {
      inputs.files(untarOutputs)
      from "$untarOutputs.singleFile/$dirToTar"
      into dirToTar
      compression = Compression.GZIP
      archiveFileName = "${archive}.tar.gz"
      destinationDirectory = untarOutputs.singleFile.parentFile
    }
  }
  else {
    task(taskName, type: Exec) {
      def outputFile = "${untarOutputs.singleFile.parentFile}/${archive}.tar.gz"
      inputs.files(untarOutputs)
      outputs.file(outputFile)
      commandLine = ['tar', '-czf', outputFile, '-C', untarOutputs.singleFile.absolutePath, dirToTar]
    }
  }
}

// see org.jetbrains.intellij.build.BuildOptions.targetOS
static def platformsToDownload(targetOs) {
  Set<String> jrePlatformToDownload = []
  if (targetOs == 'all' || targetOs == 'linux') jrePlatformToDownload += 'linux'
  if (targetOs == 'all' || targetOs == 'windows') jrePlatformToDownload += 'windows'
  if (targetOs == 'all' || targetOs == 'mac') jrePlatformToDownload += 'osx'
  jrePlatformToDownload
}

static def archToDownload(platform) {
  platform != 'osx' ? ['x86', 'x64'] : ['x64']
}