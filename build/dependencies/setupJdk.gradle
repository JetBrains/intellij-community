// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.nio.file.Paths
import java.util.concurrent.TimeUnit

apply from: 'archivesCleanup.gradle'

def jbrVersionToUnpack = System.getProperty('intellij.build.jdk.version', '8').toInteger()
task setupJdks(dependsOn: ["setupJbr$jbrVersionToUnpack"])
cleanSetupJdks.dependsOn('cleanSetupJbr8', 'cleanSetupJbr11', 'cleanDownloadJbr8', 'cleanDownloadJbr11', 'cleanSetupJdk16')
project.ext.jbrRepo = 'https://cache-redirector.jetbrains.com/intellij-jbr'
def jdkDir = System.getProperty('intellij.build.jdks.target.dir')?.with {
  new File(it).mkdirs()
  it
} ?: "${intellijProjectDir()}/build/jdk"

ext.jbsdkDir = "$project.buildDir/jbsdk"
def deleteObsoleteJdkArchives = ext.deleteObsoleteArchivesTask('Jdk', jbsdkDir)

/**
 * Update this method together with:
 *  `setupJbre.gradle`
 *  `org/jetbrains/intellij/build/impl/BundledJreManager.groovy`
 */
static def splitJbrBuild(String jreBuild, String version) {
  def split = jreBuild.split('b')
  if (split.length > 2) {
    throw new IllegalArgumentException(
      "$jreBuild is expected in format <update>b<build_number>. Examples: u202b1483.24, 11_0_2b140, b96"
    )
  }
  if (split.length == 2) {
    def update = split[0]
    if (update.startsWith(version)) update -= version
    // [11_0_2, b140] or [8u202, b1483.24]
    ["$version$update", "b${split[1]}"]
  }
  else {
    // [11, b96]
    [version, jreBuild]
  }
}

[8, 11].each { jbrVersion ->
  def isModular = jbrVersion > 8
  def jbrBuild = isModular ? jdkBuild : secondJreBuild
  def setupJbrSdk = System.getProperty('intellij.build.jbr.setupSdk', 'false').toBoolean()
  def jbrArtifactPrefix = isModular && !setupJbrSdk ? 'jbr-' : 'jbrsdk-'

  def jbrOutputDir = System.getProperty("intellij.jdk.output.dir", "$jdkDir/${!isModular ? "1.$jbrVersion" : jbrVersion}")

  def downloadJbr = task("downloadJbr$jbrVersion") {
    def arch = jbrArch()
    def platform = currentPlatformName()
    def jbrUrl = jbrUrl(jbrVersion.toString(), jbrBuild.toString(), jbrArtifactPrefix)
    def (update, buildNumber) = splitJbrBuild(jbrBuild.toString(), jbrVersion.toString())
    def artifactName = "$jbrArtifactPrefix${update}-${platform}-${arch}-${buildNumber}.tar.gz"
    def outputFile = "$jbsdkDir/${artifactName}"

    inputs.property('version', jbrVersion)
    inputs.property('build', jbrBuild)
    inputs.property('url', jbrUrl)
    outputs.file(outputFile)
    doLast {
      logger.info("Downloading JBR $jbrVersion to compile (using $jbrUrl)")
      download {
        src jbrUrl
        dest outputFile
        tempAndMove true
        timeout TimeUnit.MINUTES.toMillis(30).toInteger()
      }
    }
  }

  def setupJbr = tasks.create(name: "setupJbr$jbrVersion", dependsOn: [downloadJbr, 'setupJdk16']) {
    def outputDir = jbrOutputDir
    def downloadOutputs = downloadJbr.outputs.files
    inputs.files(downloadOutputs)
    inputs.property("jdkOutputDir", outputDir)
    outputs.dir(outputDir)
    outputs.upToDateWhen {
      !fileTree(outputDir).isEmpty()
    }
    doLast {
      logger.info("Setting up JBR $jbrVersion to compile")
      unpackJdk(downloadOutputs.singleFile, outputDir)
    }
  }
  setupJbr.finalizedBy(checkJbr(jbrVersion, jbrOutputDir))
  setupJbr.finalizedBy(deleteObsoleteJdkArchives)
}

def unpackJdk(jbrArchive, outputDir) {
  logger.info("Unpacking $jbrArchive to ${outputDir}")
  if (file(outputDir).exists()) {
    delete(outputDir)
  }
  def currentOs = OperatingSystem.current()
  if (currentOs.isWindows()) {
    copy {
      from tarTree(jbrArchive)
      into outputDir
    }
  }
  else {
    exec { commandLine 'mkdir', '-p', outputDir }
    exec { commandLine 'tar', 'xpf', "$jbrArchive.absolutePath", '--directory', outputDir }
  }
  def rootDirs = ['jbrsdk', 'jbr', 'jdk']
  if (file(outputDir).list()?.any { rootDirs.contains(it) }) {
    // unpack top level jbrsdk/jbr/jdk directory
    file(outputDir).listFiles().findAll { rootDirs.contains(it.name) }.each { rootDir ->
      rootDir.listFiles().each { File file ->
        if (currentOs.isWindows()) {
          Files.move(Paths.get(file.absolutePath), Paths.get(outputDir).resolve(file.name))
        }
        else {
          exec { commandLine 'mv', file, outputDir }
        }
      }
      if (currentOs.isWindows()) {
        rootDir.deleteDir()
      }
      else {
        exec { commandLine 'rm', '-rf', rootDir }
      }
    }
  }
}

static def jbrArch() {
  def arch = System.getProperty("intellij.jdk.arch", "")
  if (arch == '32') return 'i586'
  if (arch == '64') return 'x64'
  def os = OperatingSystem.current()
  return !os.isWindows() || System.getenv("ProgramFiles(x86)") != null ? 'x64' : 'i586'
}

@SuppressWarnings("GrMethodMayBeStatic")
def jbrUrl(String jbrVersion, String jbrBuild, String jbrArtifactPrefix) {
  def arch = jbrArch()
  def platform = currentPlatformName()
  def (update, buildNumber) = splitJbrBuild(jbrBuild, jbrVersion)
  // base url of TeamCity build to download JBR from
  def teamCityBuild = System.getProperty('intellij.jdk.teamcity.build.url')
  "${teamCityBuild ?: jbrRepo}/${jbrArtifactPrefix}${update}-${platform}-${arch}-${buildNumber}.tar.gz"
}

static def currentPlatformName() {
  def os = OperatingSystem.current()
  if (os.isWindows()) {
    "windows"
  }
  else if (os.isMacOsX()) {
    "osx"
  }
  else {
    "linux"
  }
}

// JDK 1.6
repositories {
  maven {
    url 'https://repo.labs.intellij.net/java'
  }
}

configurations {
  jdk16
}

dependencies {
  jdk16 "jetbrains:jre:${jdk16Version()}@tar.gz"
}

task setupJdk16(dependsOn: configurations.jdk16) {
  if (!inJetBrainsNetwork) {
    return
  }

  def jdkArchive = { configurations.jdk16.singleFile }
  def outputDir = "$jdkDir/1.6"
  inputs.file(jdkArchive)
  outputs.dir(outputDir)

  doLast {
    logger.info("Setting up JDK 1.6 to compile")
    unpackJdk(jdkArchive.call(), outputDir)
    deleteBrokenSymlink(outputDir)
    createMissingLauncher(outputDir)
  }
}

// Gradle dies on trying to process broken links: https://issues.gradle.org/browse/GRADLE-1843
private void deleteBrokenSymlink(String outputDir) {
  if (OperatingSystem.current().isMacOsX()) {
    def pluginJar = file("$outputDir/Contents/Home/lib/plugin.jar")
    if (!pluginJar.exists()) {
      if (!pluginJar.delete()) {
        logger.info("Couldn't remove plugin.jar from JDK 1.6")
      }
    }
  }
}

// some JPS builders rely on a launcher presence in <JDK>/bin directory
private void createMissingLauncher(String outputDir) {
  if (!new File(outputDir, "bin").exists() && new File(outputDir, "jre/bin").exists()) {
    copy {
      from file(new File(outputDir, "jre/bin"))
      into file(new File(outputDir, "bin"))
      include 'java*'
    }
  }
}

setupJdk16.onlyIf { inJetBrainsNetwork }

def intellijProjectDir() {
  def projectDir = project.file("../..")
  if (projectDir.name == 'community') {
    while (new File(projectDir.parentFile, ".idea").exists() && !new File(projectDir.parentFile, '.idea/.notIdeaProject').exists()) {
      projectDir = projectDir.parentFile
    }
    return projectDir
  }
  return projectDir
}

static def jdk16Version() {
  def os = OperatingSystem.current()
  if (os.isWindows()) {
    def suffix = System.getenv("ProgramFiles(x86)") != null ? "x64" : "i586"
    return "6.45:windows_$suffix"
  }
  else if (os.isMacOsX()) {
    return '6.65:macosx_x64'
  }
  return '6.45:linux_x64'
}

def checkJbr(int jbrVersion, String outputDir) {
  tasks.create(name: "checkJbr$jbrVersion") {
    doLast {
      def path = OperatingSystem.current().isMacOsX() ? "$outputDir/Contents/Home/bin" : "$outputDir/bin"
      def project = project
      new ByteArrayOutputStream().withStream { output ->
        project.exec {
          standardOutput = output
          errorOutput = output
          commandLine file("$path/java"), '-XshowSettings:properties', '-version'
        }
        String vendor = null
        String version = null
        output.toString().readLines().each {
          if (it.contains('java.vendor =')) {
            vendor = it
          }
          else if (it.contains('java.runtime.version =')) {
            version = it
          }
        }
        println(vendor)
        println(version)
        if (!vendor?.contains('JetBrains')) throw new IllegalStateException('java.vendor is not JetBrains')
        if (!version?.contains("$jbrVersion")) throw new IllegalStateException("java.runtime.version is not $jbrVersion")
      }
    }
  }
}