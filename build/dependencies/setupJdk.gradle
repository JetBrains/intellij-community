// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.nio.file.Paths
import java.util.concurrent.TimeUnit

apply from: 'archivesCleanup.gradle'
apply from: 'retries.gradle'

def sdkVersion = System.getProperty('intellij.build.jdk.version', '11').toInteger()
def runtimeVersion = System.getProperty("intellij.build.bundled.jre.version", "11").toInteger()
def jbrs = [(sdkVersion): jdkBuild, (runtimeVersion): runtimeBuild]
def setupJdkTasks = jbrs.keySet().collect { "setupJbr$it" }
task setupJdks(dependsOn: setupJdkTasks)
cleanSetupJdks.dependsOn(jbrs.keySet().collectMany { ["cleanSetupJbr$it", "cleanDownloadJbr$it"] })
project.ext.jbrRepo = 'https://cache-redirector.jetbrains.com/intellij-jbr'
def jdkDir = System.getProperty('intellij.build.jdks.target.dir')?.with {
  new File(it).mkdirs()
  it
} ?: "${intellijProjectDir()}/build/jdk"

ext.jbsdkDir = "$project.buildDir/jbsdk"
def deleteObsoleteJdkArchives = ext.deleteObsoleteArchivesTask('Jdk', jbsdkDir)

/**
 * Update this method together with:
 *  `org/jetbrains/intellij/build/impl/BundledJreManager.groovy`
 *  `com.jetbrains.gateway.downloader.CodeWithMeClientDownloader#downloadClientAndJdk(java.lang.String, java.lang.String, com.intellij.openapi.progress.ProgressIndicator)`
 */
static def splitJbrBuild(String jreBuild, String version) {
  def split = jreBuild.split('b')
  if (split.length > 2) {
    throw new IllegalArgumentException(
      "$jreBuild is expected in format <update>b<build_number>. Examples: u202b1483.24, 11_0_2b140, b96"
    )
  }
  if (split.length == 2) {
    def update = split[0]
    if (update.startsWith(version)) update -= version
    // [11_0_2, b140] or [8u202, b1483.24]
    ["$version$update", "b${split[1]}"]
  }
  else {
    // [11, b96]
    [version, jreBuild]
  }
}

jbrs.each { jbrVersion, jbrBuild ->
  def setupJbrSdk = System.getProperty('intellij.build.jbr.setupSdk', 'false').toBoolean()
  def jbrArtifactPrefix = jbrArtifactPrefix(setupJbrSdk)

  def jbrOutputDir = System.getProperty("intellij.jdk.output.dir", "$jdkDir/$jbrVersion")

  def downloadJbr = task("downloadJbr$jbrVersion") {
    def arch = jbrArch()
    def platform = currentPlatformName()
    def jbrUrl = jbrUrl(jbrVersion.toString(), jbrBuild.toString(), jbrArtifactPrefix)
    def (update, buildNumber) = splitJbrBuild(jbrBuild.toString(), jbrVersion.toString())
    def artifactName = "$jbrArtifactPrefix${update}-${platform}-${arch}-${buildNumber}.tar.gz"
    def outputFile = "$jbsdkDir/${artifactName}"

    inputs.property('version', jbrVersion)
    inputs.property('build', jbrBuild)
    inputs.property('url', jbrUrl)
    outputs.file(outputFile)
    doLast {
      logger.info("Downloading JBR $jbrVersion to compile (using $jbrUrl)")
      project.ext.retry {
        download {
          src jbrUrl
          dest outputFile
          tempAndMove true
          connectTimeout TimeUnit.SECONDS.toMillis(30).toInteger()
          readTimeout TimeUnit.MINUTES.toMillis(5).toInteger()
        }
      }
    }
  }

  def setupJbr = tasks.create(name: "setupJbr$jbrVersion", dependsOn: [downloadJbr]) {
    def outputDir = jbrOutputDir
    def downloadOutputs = downloadJbr.outputs.files
    inputs.files(downloadOutputs)
    inputs.property("jdkOutputDir", outputDir)
    outputs.dir(outputDir)
    outputs.upToDateWhen {
      !fileTree(outputDir).isEmpty()
    }
    doLast {
      logger.info("Setting up JBR $jbrVersion to compile")
      unpackJdk(downloadOutputs.singleFile, outputDir)
    }
  }
  setupJbr.finalizedBy(checkJbr(jbrVersion, jbrOutputDir))
  setupJbr.finalizedBy(deleteObsoleteJdkArchives)
}

def untar(File archive, String directory) {
  copy {
    from tarTree(archive)
    into directory
  }
}

def unpackJdk(File jbrArchive, String outputDir) {
  logger.info("Unpacking $jbrArchive to ${outputDir}")
  if (file(outputDir).exists()) {
    delete(outputDir)
  }
  def currentOs = OperatingSystem.current()
  if (currentOs.isWindows()) {
    untar(jbrArchive, outputDir)
  }
  else {
    try {
      exec { commandLine 'mkdir', '-p', outputDir }
      exec { commandLine 'tar', 'xpf', "$jbrArchive.absolutePath", '--directory', outputDir }
    }
    catch (Throwable e) {
      logger.log(LogLevel.WARN, 'Failed to unpack via native executables', e)
      untar(jbrArchive, outputDir)
    }
  }
  def rootDirs = ['jbrsdk', 'jbr', 'jdk']
  if (file(outputDir).list()?.any { rootDirs.contains(it) }) {
    // unpack top level jbrsdk/jbr/jdk directory
    file(outputDir).listFiles().findAll { rootDirs.contains(it.name) }.each { rootDir ->
      rootDir.listFiles().each { File file ->
        if (currentOs.isWindows()) {
          Files.move(Paths.get(file.absolutePath), Paths.get(outputDir).resolve(file.name))
        }
        else {
          exec { commandLine 'mv', file, outputDir }
        }
      }
      if (currentOs.isWindows()) {
        rootDir.deleteDir()
      }
      else {
        exec { commandLine 'rm', '-rf', rootDir }
      }
    }
  }
}

/**
 * Inspired with com.intellij.util.system.CpuArch
 */
static def currentArch() {
  String arch = System.getProperty("os.arch")
  if ("x86_64" == arch || "amd64" == arch) {
    return 'x64'
  }
  else if ("i386" == arch || "x86" == arch) {
    // x86 JVMs are sometimes used as JAVA_HOME to reduce memory consumption on TeamCity, shouldn't affect SDK choice
    return 'x64'
  }
  else if ("aarch64" == arch || "arm64" == arch) {
    return 'aarch64'
  }
  else {
    throw new IllegalStateException("Unknown arch '$arch'")
  }
}

static def jbrArch() {
  def arch = System.getProperty("intellij.jdk.arch", "")
  if (arch == '32') return 'x86'
  if (arch == '64') return 'x64'
  return currentArch()
}

static String jbrArtifactPrefix(Boolean setupJbrSdk) {
  def arch = jbrArch()
  def platform = currentPlatformName()

  if (setupJbrSdk) return 'jbrsdk-'

  // for now there's no linux-aarch64 with DCEVM flavour available
  if (arch == 'aarch64' && platform == 'linux') {
    return 'jbr-'
  }

  return 'jbr_dcevm-'
}

@SuppressWarnings("GrMethodMayBeStatic")
def jbrUrl(String jbrVersion, String jbrBuild, String jbrArtifactPrefix) {
  def arch = jbrArch()
  def platform = currentPlatformName()
  def (update, buildNumber) = splitJbrBuild(jbrBuild, jbrVersion)
  // base url of TeamCity build to download JBR from
  def teamCityBuild = System.getProperty('intellij.jdk.teamcity.build.url')
  if (teamCityBuild != null) {
    "${teamCityBuild}/${jbrArtifactPrefix}${update}-${platform}-${arch}-${buildNumber}.tar.gz?guest=1"
  }
  else {
    "${jbrRepo}/${jbrArtifactPrefix}${update}-${platform}-${arch}-${buildNumber}.tar.gz"
  }
}

static def currentPlatformName() {
  def os = OperatingSystem.current()
  if (os.isWindows()) {
    "windows"
  }
  else if (os.isMacOsX()) {
    "osx"
  }
  else {
    "linux"
  }
}

def intellijProjectDir() {
  def projectDir = project.file("../..")
  if (projectDir.name == 'community') {
    while (new File(projectDir.parentFile, ".idea").exists() && !new File(projectDir.parentFile, '.idea/.notIdeaProject').exists()) {
      projectDir = projectDir.parentFile
    }
    return projectDir
  }
  return projectDir
}

def checkJbr(int jbrVersion, String outputDir) {
  tasks.create(name: "checkJbr$jbrVersion") {
    doLast {
      def path = OperatingSystem.current().isMacOsX() ? "$outputDir/Contents/Home/bin" : "$outputDir/bin"
      def project = project
      new ByteArrayOutputStream().withStream { output ->
        project.exec {
          standardOutput = output
          errorOutput = output
          commandLine file("$path/java"), '-XshowSettings:properties', '-version'
        }
        String vendor = null
        String version = null
        output.toString().readLines().each {
          if (it.contains('java.vendor =')) {
            vendor = it
          }
          else if (it.contains('java.runtime.version =')) {
            version = it
          }
        }
        println(vendor)
        println(version)
        if (!vendor?.contains('JetBrains')) throw new IllegalStateException('java.vendor is not JetBrains')
        if (!version?.contains("$jbrVersion")) throw new IllegalStateException("java.runtime.version is not $jbrVersion")
      }
    }
  }
}