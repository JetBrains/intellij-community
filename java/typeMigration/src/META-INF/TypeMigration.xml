<idea-plugin>
  <extensions defaultExtensionNs="com.intellij">
    <codeInsight.changeVariableTypeQuickFixProvider
        implementation="com.intellij.refactoring.typeMigration.TypeMigrationVariableTypeFixProvider"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.ListArrayConversionRule"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.AtomicConversionRule"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.BoxingTypeConversionRule"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.ElementToArrayConversionRule"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.ThreadLocalConversionRule"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.LongAdderConversionRule"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.VoidConversionRule"/>

    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.guava.GuavaOptionalConversionRule"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.guava.GuavaFluentIterableConversionRule"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.guava.GuavaLambdaConversionRule$Function"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.guava.GuavaLambdaConversionRule$Supplier"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.guava.GuavaPredicateConversionRule"/>
    <conversion.rule implementation="com.intellij.refactoring.typeMigration.rules.guava.IterableStreamConversionRule"/>
    <intentionAction>
      <className>com.intellij.refactoring.typeMigration.intentions.ConvertFieldToAtomicIntention</className>
       <category>Java/Concurrency</category>
    </intentionAction>
    <intentionAction>
      <className>com.intellij.refactoring.typeMigration.intentions.ConvertFieldToThreadLocalIntention</className>
      <category>Java/Concurrency</category>
    </intentionAction>
    <intentionAction>
      <className>com.intellij.refactoring.typeMigration.intentions.ChangeClassParametersIntention</className>
      <category>Java/Declaration</category>
    </intentionAction>
    <intentionAction>
      <className>com.intellij.refactoring.typeMigration.intentions.ConvertAtomicToLongAdderIntention</className>
      <category>Java/Concurrency</category>
    </intentionAction>

    <localInspection groupPath="Java,Java language level migration aids" language="JAVA" shortName="Guava"
                     groupBundle="messages.InspectionsBundle"
                     groupName="Java 8" enabledByDefault="true" level="WARNING"
                     implementationClass="com.intellij.refactoring.typeMigration.inspections.GuavaInspection"
                     displayName="Guava's functional primitives can be replaced by Java"/>

    <localInspection groupPath="Java" language="JAVA" shortName="MigrateAssertToMatcherAssert"
                     groupBundle="messages.InspectionsBundle" groupKey="group.names.junit.issues" enabledByDefault="false" level="WARNING"
                     implementationClass="com.intellij.refactoring.typeMigration.inspections.MigrateAssertToMatcherAssertInspection"
                     displayName="Assertion expression can be replaced with 'assertThat' method call"/>

    <java.error.fix errorCode="lambda.variable.must.be.final" implementationClass="com.intellij.refactoring.typeMigration.intentions.ConvertFieldToAtomicIntention$ConvertNonFinalLocalToAtomicFix"/>
  </extensions>
</idea-plugin>
