Types:
PsiField:l : java.util.concurrent.atomic.LongAdder
PsiMethodCallExpression:l.addAndGet(-3) : long
PsiMethodCallExpression:l.addAndGet(2) : long
PsiMethodCallExpression:l.floatValue() : float
PsiMethodCallExpression:l.get() : long
PsiMethodCallExpression:l.get() : long
PsiMethodCallExpression:l.set(0) : void
PsiMethodCallExpression:l.set(7) : void
PsiReferenceExpression:l : java.util.concurrent.atomic.LongAdder
PsiReferenceExpression:l : java.util.concurrent.atomic.LongAdder
PsiReferenceExpression:l : java.util.concurrent.atomic.LongAdder
PsiReferenceExpression:l : java.util.concurrent.atomic.LongAdder
PsiReferenceExpression:l : java.util.concurrent.atomic.LongAdder
PsiReferenceExpression:l : java.util.concurrent.atomic.LongAdder
PsiReferenceExpression:l : java.util.concurrent.atomic.LongAdder

Conversions:
l.addAndGet(-3) -> $v$.add($toAdd$) $v$.$method$($toAdd$)
l.addAndGet(2) -> $v$.add($toAdd$) $v$.$method$($toAdd$)
l.floatValue() -> $
l.get() -> $l$.sum() $l$.get()
l.get() -> $l$.sum() $l$.get()
l.set(0) -> $l$.reset() $l$.$setMethodName$($v$)
l.set(7) -> $l$.add($v$ - $l$.sum()) $l$.$setMethodName$($v$)
new AtomicLong(0) -> new java.util.concurrent.atomic.LongAdder() new $className$($p$)

New expression type changes:
Fails:
