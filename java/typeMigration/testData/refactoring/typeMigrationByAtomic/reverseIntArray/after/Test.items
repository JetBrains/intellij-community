Types:
PsiField:a : int[]
PsiMethodCallExpression:a.addAndGet(0, 7) : int
PsiMethodCallExpression:a.decrementAndGet(0) : int
PsiMethodCallExpression:a.get(0) : int
PsiMethodCallExpression:a.get(0) : int
PsiMethodCallExpression:a.getAndAdd(0, ((2))) : int
PsiMethodCallExpression:a.getAndDecrement(0) : int
PsiMethodCallExpression:a.getAndIncrement(0) : int
PsiMethodCallExpression:a.incrementAndGet(0) : int
PsiMethodCallExpression:a.set(0, a.get(0) * 2) : void
PsiReferenceExpression:a : int[]
PsiReferenceExpression:a : int[]
PsiReferenceExpression:a : int[]
PsiReferenceExpression:a : int[]
PsiReferenceExpression:a : int[]
PsiReferenceExpression:a : int[]
PsiReferenceExpression:a : int[]
PsiReferenceExpression:a : int[]
PsiReferenceExpression:a : int[]

Conversions:
a.addAndGet(0, 7) -> $qualifier$[$idx$] + $delta$ $qualifier$.addAndGet($idx$, $delta$)
a.decrementAndGet(0) -> --$qualifier$[$idx$] $qualifier$.decrementAndGet($idx$)
a.get(0) -> $qualifier$[$idx$] $qualifier$.get($idx$)
a.get(0) -> $qualifier$[$idx$] $qualifier$.get($idx$)
a.getAndAdd(0, ((2))) -> $qualifier$[$idx$] += $val$ $qualifier$.getAndAdd($idx$, $val$)
a.getAndDecrement(0) -> $qualifier$[$idx$]-- $qualifier$.getAndDecrement($idx$)
a.getAndIncrement(0) -> $qualifier$[$idx$]++ $qualifier$.getAndIncrement($idx$)
a.incrementAndGet(0) -> ++$qualifier$[$idx$] $qualifier$.incrementAndGet($idx$)
a.set(0, a.get(0) * 2) -> $qualifier$[$idx$] = $val$ $qualifier$.set($idx$, $val$)
new AtomicIntegerArray(new int[1]) -> $qualifier$ new $type$($qualifier$)

New expression type changes:
Fails:
