// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.java.syntax.parser

import com.intellij.openapi.util.NlsSafe

/**
 * Constants defined in this interface represent all keywords and literals of the Java language.
 */
object JavaKeywords {
  const val ABSTRACT: @NlsSafe String = "abstract"
  const val ASSERT: @NlsSafe String = "assert"
  const val BOOLEAN: @NlsSafe String = "boolean"
  const val BREAK: @NlsSafe String = "break"
  const val BYTE: @NlsSafe String = "byte"
  const val CASE: @NlsSafe String = "case"
  const val CATCH: @NlsSafe String = "catch"
  const val CHAR: @NlsSafe String = "char"
  const val CLASS: @NlsSafe String = "class"
  const val CONST: @NlsSafe String = "const"
  const val CONTINUE: @NlsSafe String = "continue"
  const val DEFAULT: @NlsSafe String = "default"
  const val DO: @NlsSafe String = "do"
  const val DOUBLE: @NlsSafe String = "double"
  const val ELSE: @NlsSafe String = "else"
  const val ENUM: @NlsSafe String = "enum"
  const val EXTENDS: @NlsSafe String = "extends"
  const val FINAL: @NlsSafe String = "final"
  const val FINALLY: @NlsSafe String = "finally"
  const val FLOAT: @NlsSafe String = "float"
  const val FOR: @NlsSafe String = "for"
  const val GOTO: @NlsSafe String = "goto"
  const val IF: @NlsSafe String = "if"
  const val IMPLEMENTS: @NlsSafe String = "implements"
  const val IMPORT: @NlsSafe String = "import"
  const val INSTANCEOF: @NlsSafe String = "instanceof"
  const val INT: @NlsSafe String = "int"
  const val INTERFACE: @NlsSafe String = "interface"
  const val LONG: @NlsSafe String = "long"
  const val NATIVE: @NlsSafe String = "native"
  const val NEW: @NlsSafe String = "new"
  const val PACKAGE: @NlsSafe String = "package"
  const val PRIVATE: @NlsSafe String = "private"
  const val PROTECTED: @NlsSafe String = "protected"
  const val PUBLIC: @NlsSafe String = "public"
  const val RETURN: @NlsSafe String = "return"
  const val SHORT: @NlsSafe String = "short"
  const val STATIC: @NlsSafe String = "static"
  const val STRICTFP: @NlsSafe String = "strictfp"
  const val SUPER: @NlsSafe String = "super"
  const val SWITCH: @NlsSafe String = "switch"
  const val SYNCHRONIZED: @NlsSafe String = "synchronized"
  const val THIS: @NlsSafe String = "this"
  const val THROW: @NlsSafe String = "throw"
  const val THROWS: @NlsSafe String = "throws"
  const val TRANSIENT: @NlsSafe String = "transient"
  const val TRY: @NlsSafe String = "try"
  const val VOID: @NlsSafe String = "void"
  const val VOLATILE: @NlsSafe String = "volatile"
  const val WHILE: @NlsSafe String = "while"

  const val TRUE: @NlsSafe String = "true"
  const val FALSE: @NlsSafe String = "false"
  const val NULL: @NlsSafe String = "null"

  const val NON_SEALED: @NlsSafe String = "non-sealed"

  // soft keywords:
  const val EXPORTS: @NlsSafe String = "exports"
  const val MODULE: @NlsSafe String = "module"
  const val OPEN: @NlsSafe String = "open"
  const val OPENS: @NlsSafe String = "opens"
  const val PERMITS: @NlsSafe String = "permits"
  const val PROVIDES: @NlsSafe String = "provides"
  const val RECORD: @NlsSafe String = "record"
  const val REQUIRES: @NlsSafe String = "requires"
  const val SEALED: @NlsSafe String = "sealed"
  const val TO: @NlsSafe String = "to"
  const val TRANSITIVE: @NlsSafe String = "transitive"
  const val USES: @NlsSafe String = "uses"
  const val VALUE: @NlsSafe String = "value"
  const val VAR: @NlsSafe String = "var"
  const val WHEN: @NlsSafe String = "when"
  const val WITH: @NlsSafe String = "with"
  const val YIELD: @NlsSafe String = "yield"
}