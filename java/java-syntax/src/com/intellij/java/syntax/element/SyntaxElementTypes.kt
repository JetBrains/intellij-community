// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.java.syntax.element

import com.intellij.platform.syntax.SyntaxElementTypeSet
import com.intellij.platform.syntax.element.SyntaxTokenTypes.WHITE_SPACE
import com.intellij.platform.syntax.syntaxElementTypeSetOf
import com.intellij.java.syntax.element.JavaSyntaxElementType as JElement
import com.intellij.java.syntax.element.JavaSyntaxTokenType as JToken

object SyntaxElementTypes {
  val JAVA_PLAIN_COMMENT_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(JToken.END_OF_LINE_COMMENT, JToken.C_STYLE_COMMENT)
  val JAVA_COMMENT_BIT_SET: SyntaxElementTypeSet = JAVA_PLAIN_COMMENT_BIT_SET + JavaDocSyntaxElementType.DOC_COMMENT
  val JAVA_COMMENT_OR_WHITESPACE_BIT_SET: SyntaxElementTypeSet = JAVA_COMMENT_BIT_SET + WHITE_SPACE

  val KEYWORD_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JToken.ABSTRACT_KEYWORD, JToken.ASSERT_KEYWORD, JToken.BOOLEAN_KEYWORD, JToken.BREAK_KEYWORD, JToken.BYTE_KEYWORD, JToken.CASE_KEYWORD,
    JToken.CATCH_KEYWORD, JToken.CHAR_KEYWORD, JToken.CLASS_KEYWORD, JToken.CONST_KEYWORD, JToken.CONTINUE_KEYWORD, JToken.DEFAULT_KEYWORD,
    JToken.DO_KEYWORD, JToken.DOUBLE_KEYWORD, JToken.ELSE_KEYWORD, JToken.ENUM_KEYWORD, JToken.EXTENDS_KEYWORD, JToken.FINAL_KEYWORD,
    JToken.FINALLY_KEYWORD, JToken.FLOAT_KEYWORD, JToken.FOR_KEYWORD, JToken.GOTO_KEYWORD, JToken.IF_KEYWORD, JToken.IMPLEMENTS_KEYWORD,
    JToken.IMPORT_KEYWORD, JToken.INSTANCEOF_KEYWORD, JToken.INT_KEYWORD, JToken.INTERFACE_KEYWORD, JToken.LONG_KEYWORD, JToken.NATIVE_KEYWORD,
    JToken.NEW_KEYWORD, JToken.PACKAGE_KEYWORD, JToken.PRIVATE_KEYWORD, JToken.PROTECTED_KEYWORD, JToken.PUBLIC_KEYWORD, JToken.RETURN_KEYWORD,
    JToken.SHORT_KEYWORD, JToken.SUPER_KEYWORD, JToken.STATIC_KEYWORD, JToken.STRICTFP_KEYWORD, JToken.SWITCH_KEYWORD, JToken.SYNCHRONIZED_KEYWORD,
    JToken.THIS_KEYWORD, JToken.THROW_KEYWORD, JToken.THROWS_KEYWORD, JToken.TRANSIENT_KEYWORD, JToken.TRY_KEYWORD, JToken.VOID_KEYWORD,
    JToken.VOLATILE_KEYWORD, JToken.WHILE_KEYWORD, JToken.OPEN_KEYWORD, JToken.MODULE_KEYWORD, JToken.REQUIRES_KEYWORD, JToken.EXPORTS_KEYWORD,
    JToken.OPENS_KEYWORD, JToken.USES_KEYWORD, JToken.PROVIDES_KEYWORD, JToken.TRANSITIVE_KEYWORD, JToken.TO_KEYWORD, JToken.WITH_KEYWORD,
    JToken.VAR_KEYWORD, JToken.YIELD_KEYWORD, JToken.RECORD_KEYWORD, JToken.SEALED_KEYWORD, JToken.PERMITS_KEYWORD, JToken.NON_SEALED_KEYWORD,
    JToken.WHEN_KEYWORD, JToken.VALUE_KEYWORD
  )

  val LITERAL_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(JToken.TRUE_KEYWORD, JToken.FALSE_KEYWORD, JToken.NULL_KEYWORD)

  val OPERATION_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JToken.EQ, JToken.GT, JToken.LT, JToken.EXCL, JToken.TILDE, JToken.QUEST, JToken.COLON, JToken.PLUS, JToken.MINUS, JToken.ASTERISK,
    JToken.DIV, JToken.AND, JToken.OR, JToken.XOR, JToken.PERC, JToken.EQEQ, JToken.LE, JToken.GE, JToken.NE, JToken.ANDAND, JToken.OROR,
    JToken.PLUSPLUS, JToken.MINUSMINUS, JToken.LTLT, JToken.GTGT, JToken.GTGTGT, JToken.PLUSEQ, JToken.MINUSEQ, JToken.ASTERISKEQ,
    JToken.DIVEQ, JToken.ANDEQ, JToken.OREQ, JToken.XOREQ, JToken.PERCEQ, JToken.LTLTEQ, JToken.GTGTEQ, JToken.GTGTGTEQ
  )

  val MODIFIER_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JToken.PUBLIC_KEYWORD, JToken.PROTECTED_KEYWORD, JToken.PRIVATE_KEYWORD, JToken.STATIC_KEYWORD, JToken.ABSTRACT_KEYWORD,
    JToken.FINAL_KEYWORD, JToken.NATIVE_KEYWORD, JToken.SYNCHRONIZED_KEYWORD, JToken.STRICTFP_KEYWORD, JToken.TRANSIENT_KEYWORD,
    JToken.VOLATILE_KEYWORD, JToken.DEFAULT_KEYWORD, JToken.SEALED_KEYWORD, JToken.NON_SEALED_KEYWORD, JToken.VALUE_KEYWORD
  )

  val PRIMITIVE_TYPE_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JToken.BOOLEAN_KEYWORD, JToken.BYTE_KEYWORD, JToken.SHORT_KEYWORD, JToken.INT_KEYWORD, JToken.LONG_KEYWORD, JToken.CHAR_KEYWORD,
    JToken.FLOAT_KEYWORD, JToken.DOUBLE_KEYWORD, JToken.VOID_KEYWORD
  )

  val EXPRESSION_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JElement.REFERENCE_EXPRESSION, JElement.LITERAL_EXPRESSION, JElement.THIS_EXPRESSION, JElement.SUPER_EXPRESSION,
    JElement.PARENTH_EXPRESSION, JElement.METHOD_CALL_EXPRESSION, JElement.TYPE_CAST_EXPRESSION, JElement.PREFIX_EXPRESSION,
    JElement.POSTFIX_EXPRESSION, JElement.BINARY_EXPRESSION, JElement.POLYADIC_EXPRESSION, JElement.CONDITIONAL_EXPRESSION,
    JElement.ASSIGNMENT_EXPRESSION, JElement.NEW_EXPRESSION, JElement.ARRAY_ACCESS_EXPRESSION, JElement.ARRAY_INITIALIZER_EXPRESSION,
    JElement.INSTANCE_OF_EXPRESSION, JElement.CLASS_OBJECT_ACCESS_EXPRESSION, JElement.METHOD_REF_EXPRESSION, JElement.LAMBDA_EXPRESSION,
    JElement.SWITCH_EXPRESSION, JElement.EMPTY_EXPRESSION, JElement.TEMPLATE_EXPRESSION
  )

  val ANNOTATION_MEMBER_VALUE_BIT_SET: SyntaxElementTypeSet = EXPRESSION_BIT_SET + JElement.ANNOTATION + JElement.ANNOTATION_ARRAY_INITIALIZER

  val ARRAY_DIMENSION_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JElement.REFERENCE_EXPRESSION, JElement.LITERAL_EXPRESSION, JElement.THIS_EXPRESSION, JElement.SUPER_EXPRESSION,
    JElement.PARENTH_EXPRESSION, JElement.METHOD_CALL_EXPRESSION, JElement.TYPE_CAST_EXPRESSION, JElement.PREFIX_EXPRESSION,
    JElement.POSTFIX_EXPRESSION, JElement.BINARY_EXPRESSION, JElement.POLYADIC_EXPRESSION, JElement.CONDITIONAL_EXPRESSION,
    JElement.ASSIGNMENT_EXPRESSION, JElement.NEW_EXPRESSION, JElement.ARRAY_ACCESS_EXPRESSION, JElement.INSTANCE_OF_EXPRESSION,
    JElement.CLASS_OBJECT_ACCESS_EXPRESSION, JElement.EMPTY_EXPRESSION
  )

  val JAVA_STATEMENT_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JElement.EMPTY_STATEMENT, JElement.BLOCK_STATEMENT, JElement.EXPRESSION_STATEMENT, JElement.EXPRESSION_LIST_STATEMENT,
    JElement.DECLARATION_STATEMENT, JElement.IF_STATEMENT, JElement.WHILE_STATEMENT, JElement.FOR_STATEMENT, JElement.FOREACH_STATEMENT,
    JElement.DO_WHILE_STATEMENT, JElement.SWITCH_STATEMENT, JElement.SWITCH_LABEL_STATEMENT, JElement.BREAK_STATEMENT,
    JElement.CONTINUE_STATEMENT, JElement.RETURN_STATEMENT, JElement.THROW_STATEMENT, JElement.SYNCHRONIZED_STATEMENT,
    JElement.TRY_STATEMENT, JElement.LABELED_STATEMENT, JElement.ASSERT_STATEMENT, JElement.YIELD_STATEMENT
  )

  val JAVA_PATTERN_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(JElement.TYPE_TEST_PATTERN, JElement.DECONSTRUCTION_PATTERN, JElement.UNNAMED_PATTERN)

  val JAVA_CASE_LABEL_ELEMENT_BIT_SET: SyntaxElementTypeSet = JAVA_PATTERN_BIT_SET + EXPRESSION_BIT_SET + JElement.DEFAULT_CASE_LABEL_ELEMENT

  val JAVA_MODULE_STATEMENT_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JElement.REQUIRES_STATEMENT, JElement.EXPORTS_STATEMENT, JElement.OPENS_STATEMENT, JElement.USES_STATEMENT, JElement.PROVIDES_STATEMENT
  )

  val IMPORT_STATEMENT_BASE_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JElement.IMPORT_STATEMENT, JElement.IMPORT_STATIC_STATEMENT, JElement.IMPORT_MODULE_STATEMENT
  )

  val CLASS_KEYWORD_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(JToken.CLASS_KEYWORD, JToken.INTERFACE_KEYWORD, JToken.ENUM_KEYWORD, JToken.RECORD_KEYWORD)
  val MEMBER_BIT_SET: SyntaxElementTypeSet = syntaxElementTypeSetOf(JElement.CLASS, JElement.FIELD, JElement.ENUM_CONSTANT, JElement.METHOD, JElement.ANNOTATION_METHOD)
  val FULL_MEMBER_BIT_SET: SyntaxElementTypeSet = MEMBER_BIT_SET + JElement.CLASS_INITIALIZER

  val INTEGER_LITERALS: SyntaxElementTypeSet = syntaxElementTypeSetOf(JToken.INTEGER_LITERAL, JToken.LONG_LITERAL)
  val REAL_LITERALS: SyntaxElementTypeSet = syntaxElementTypeSetOf(JToken.FLOAT_LITERAL, JToken.DOUBLE_LITERAL)
  val STRING_LITERALS: SyntaxElementTypeSet = syntaxElementTypeSetOf(JToken.STRING_LITERAL, JToken.TEXT_BLOCK_LITERAL)
  val TEXT_LITERALS: SyntaxElementTypeSet = syntaxElementTypeSetOf(JToken.STRING_LITERAL, JToken.TEXT_BLOCK_LITERAL, JToken.CHARACTER_LITERAL)

  val STRING_TEMPLATE_FRAGMENTS: SyntaxElementTypeSet = syntaxElementTypeSetOf(
    JToken.STRING_TEMPLATE_BEGIN, JToken.STRING_TEMPLATE_MID, JToken.STRING_TEMPLATE_END, JToken.TEXT_BLOCK_TEMPLATE_BEGIN,
    JToken.TEXT_BLOCK_TEMPLATE_MID, JToken.TEXT_BLOCK_TEMPLATE_END
  )

  val ALL_LITERALS: SyntaxElementTypeSet = INTEGER_LITERALS + REAL_LITERALS + TEXT_LITERALS + LITERAL_BIT_SET
}
