// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.10.14 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _JavaDocLexer.flex

package com.intellij.java.syntax.lexer

import com.intellij.java.syntax.element.JavaDocSyntaxTokenType
import com.intellij.platform.syntax.SyntaxElementType
import com.intellij.platform.syntax.util.lexer.FlexLexer
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic

@Suppress("ALL")

class _JavaDocLexer : FlexLexer {
companion object {
  /** This character denotes the end of file */
  private const val YYEOF = -1 

  /** initial size of the lookahead buffer */
  private const val ZZ_BUFFERSIZE: Int = 16384

  /** lexical states */
  public const val YYINITIAL: Int = 0
  public const val COMMENT_DATA_START: Int = 2
  public const val COMMENT_DATA: Int = 4
  public const val TAG_DOC_SPACE: Int = 6
  public const val PARAM_TAG_SPACE: Int = 8
  public const val DOC_TAG_VALUE: Int = 10
  public const val DOC_TAG_VALUE_IN_PAREN: Int = 12
  public const val DOC_TAG_VALUE_IN_LTGT: Int = 14
  public const val INLINE_TAG_NAME: Int = 16
  public const val CODE_TAG: Int = 18
  public const val CODE_TAG_SPACE: Int = 20
  public const val SNIPPET_TAG_COMMENT_DATA_UNTIL_COLON: Int = 22
  public const val SNIPPET_TAG_BODY_DATA: Int = 24
  public const val SNIPPET_ATTRIBUTE_VALUE_DOUBLE_QUOTES: Int = 26
  public const val SNIPPET_ATTRIBUTE_VALUE_SINGLE_QUOTES: Int = 28

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  @JvmStatic
  private val ZZ_LEXSTATE: IntArray = intArrayOf(
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  )

  /**
   * Top-level table for translating characters to character classes
   */
  private const val ZZ_CMAP_TOP_PACKED_0: String  =
    "\u0001\u0000\u0001\u0100\u0001\u0200\u0001\u0300\u0001\u0400\u0001\u0500\u0001\u0600\u0001\u0700"+
    "\u0001\u0800\u0001\u0900\u0001\u0a00\u0001\u0b00\u0001\u0c00\u0001\u0d00\u0001\u0e00\u0001\u0f00"+
    "\u0001\u1000\u0001\u0100\u0001\u1100\u0001\u1200\u0001\u1300\u0001\u0100\u0001\u1400\u0001\u1500"+
    "\u0001\u1600\u0001\u1700\u0001\u1800\u0001\u1900\u0001\u1a00\u0001\u1b00\u0001\u0100\u0001\u1c00"+
    "\u0001\u1d00\u0001\u1e00\u000a\u1f00\u0001\u2000\u0001\u2100\u0001\u2200\u0001\u1f00\u0001\u2300"+
    "\u0001\u2400\u0002\u1f00\u0019\u0100\u0001\u1b00\u0051\u0100\u0001\u2500\u0004\u0100\u0001\u2600"+
    "\u0001\u0100\u0001\u2700\u0001\u2800\u0001\u2900\u0001\u2a00\u0001\u2b00\u0001\u2c00\u002b\u0100"+
    "\u0001\u2d00\u0008\u2e00\u0019\u1f00\u0001\u0100\u0001\u2f00\u0001\u3000\u0001\u0100\u0001\u3100"+
    "\u0001\u3200\u0001\u3300\u0001\u3400\u0001\u3500\u0001\u3600\u0001\u3700\u0001\u3800\u0001\u3900"+
    "\u0001\u0100\u0001\u3a00\u0001\u3b00\u0001\u3c00\u0001\u3d00\u0001\u3e00\u0001\u3f00\u0001\u4000"+
    "\u0001\u4100\u0001\u4200\u0001\u4300\u0001\u4400\u0001\u4500\u0001\u4600\u0001\u4700\u0001\u4800"+
    "\u0001\u4900\u0001\u4a00\u0001\u4b00\u0001\u4c00\u0001\u4d00\u0001\u1f00\u0001\u4e00\u0001\u4f00"+
    "\u0001\u5000\u0001\u5100\u0003\u0100\u0001\u5200\u0001\u5300\u0001\u5400\u000a\u1f00\u0004\u0100"+
    "\u0001\u5500\u000f\u1f00\u0002\u0100\u0001\u5600\u0021\u1f00\u0002\u0100\u0001\u5700\u0001\u5800"+
    "\u0002\u1f00\u0001\u5900\u0001\u5a00\u0017\u0100\u0001\u5b00\u0004\u0100\u0001\u5c00\u0001\u5d00"+
    "\u0022\u1f00\u0001\u0100\u0001\u5e00\u0001\u5f00\u0009\u1f00\u0001\u6000\u0017\u1f00\u0001\u6100"+
    "\u0001\u6200\u0001\u6300\u0001\u6400\u0009\u1f00\u0001\u6500\u0001\u6600\u0005\u1f00\u0001\u6700"+
    "\u0001\u6800\u0002\u1f00\u0001\u6900\u0001\u1f00\u0001\u6a00\u0011\u1f00\u00a6\u0100\u0001\u6b00"+
    "\u0010\u0100\u0001\u6c00\u0001\u6d00\u0015\u0100\u0001\u6e00\u001c\u0100\u0001\u6f00\u000c\u1f00"+
    "\u0002\u0100\u0001\u7000\u0005\u1f00\u0013\u0100\u0001\u7100\u0dec\u1f00"

  @JvmStatic
  private fun zzUnpackcmap_top(): IntArray {
    val result: IntArray = IntArray(4352)
    var offset: Int = 0
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackcmap_top(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_CMAP_TOP: IntArray = zzUnpackcmap_top()


  /**
   * Second-level tables for translating characters to character classes
   */
  private const val ZZ_CMAP_BLOCKS_PACKED_0: String  =
    "\u0009\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005\u0012\u0000\u0001\u0001"+
    "\u0001\u0000\u0001\u0006\u0001\u0007\u0001\u0008\u0002\u0000\u0001\u0009\u0001\u000a\u0001\u000b"+
    "\u0001\u000c\u0001\u0000\u0001\u000d\u0001\u000e\u0001\u000f\u0001\u0010\u000a\u0011\u0001\u0012"+
    "\u0001\u0000\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0000\u0001\u0016\u000d\u0008\u0001\u0017"+
    "\u0003\u0008\u0001\u0018\u0008\u0008\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u0000\u0001\u0008"+
    "\u0001\u001c\u0001\u001d\u0001\u0008\u0001\u001e\u0001\u001f\u0001\u0020\u0002\u0008\u0001\u0021"+
    "\u0001\u0022\u0002\u0008\u0001\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001\u0008"+
    "\u0001\u0028\u0001\u0029\u0001\u002a\u0001\u002b\u0002\u0008\u0001\u002c\u0001\u002d\u0001\u0008"+
    "\u0001\u002e\u0001\u0000\u0001\u002f\u0001\u0030\u0006\u0000\u0001\u0003\u001c\u0000\u0004\u0008"+
    "\u0004\u0000\u0001\u0008\u000a\u0000\u0001\u0008\u0004\u0000\u0001\u0008\u0005\u0000\u0017\u0008"+
    "\u0001\u0000\u001f\u0008\u0001\u0000\u01ca\u0008\u0004\u0000\u000c\u0008\u000e\u0000\u0005\u0008"+
    "\u0007\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0081\u0000\u0005\u0008\u0001\u0000\u0002\u0008"+
    "\u0002\u0000\u0004\u0008\u0001\u0000\u0001\u0008\u0006\u0000\u0001\u0008\u0001\u0000\u0003\u0008"+
    "\u0001\u0000\u0001\u0008\u0001\u0000\u0014\u0008\u0001\u0000\u0053\u0008\u0001\u0000\u008b\u0008"+
    "\u0008\u0000\u00a6\u0008\u0001\u0000\u0026\u0008\u0002\u0000\u0001\u0008\u0006\u0000\u0029\u0008"+
    "\u0006\u0000\u0001\u0008\u0040\u0000\u001b\u0008\u0004\u0000\u0004\u0008\u0018\u0000\u0001\u0008"+
    "\u0014\u0000\u002b\u0008\u0023\u0000\u0002\u0008\u0001\u0000\u0063\u0008\u0001\u0000\u0001\u0008"+
    "\u000f\u0000\u0002\u0008\u0007\u0000\u0002\u0008\u000a\u0000\u0003\u0008\u0002\u0000\u0001\u0008"+
    "\u0010\u0000\u0001\u0008\u0001\u0000\u001e\u0008\u001d\u0000\u0059\u0008\u000b\u0000\u0001\u0008"+
    "\u0018\u0000\u0021\u0008\u0009\u0000\u0002\u0008\u0004\u0000\u0001\u0008\u0003\u0000\u0018\u0008"+
    "\u0004\u0000\u0001\u0008\u0009\u0000\u0001\u0008\u0003\u0000\u0001\u0008\u0017\u0000\u0019\u0008"+
    "\u0007\u0000\u000b\u0008\u0035\u0000\u0015\u0008\u0001\u0000\u0012\u0008\u003c\u0000\u0036\u0008"+
    "\u0003\u0000\u0001\u0008\u0012\u0000\u0001\u0008\u0007\u0000\u000a\u0008\u000f\u0000\u0010\u0008"+
    "\u0004\u0000\u0008\u0008\u0002\u0000\u0002\u0008\u0002\u0000\u0016\u0008\u0001\u0000\u0007\u0008"+
    "\u0001\u0000\u0001\u0008\u0003\u0000\u0004\u0008\u0003\u0000\u0001\u0008\u0010\u0000\u0001\u0008"+
    "\u000d\u0000\u0002\u0008\u0001\u0000\u0003\u0008\u000e\u0000\u0004\u0008\u0007\u0000\u0002\u0008"+
    "\u0008\u0000\u0006\u0008\u0004\u0000\u0002\u0008\u0002\u0000\u0016\u0008\u0001\u0000\u0007\u0008"+
    "\u0001\u0000\u0002\u0008\u0001\u0000\u0002\u0008\u0001\u0000\u0002\u0008\u001f\u0000\u0004\u0008"+
    "\u0001\u0000\u0001\u0008\u0013\u0000\u0003\u0008\u0010\u0000\u0009\u0008\u0001\u0000\u0003\u0008"+
    "\u0001\u0000\u0016\u0008\u0001\u0000\u0007\u0008\u0001\u0000\u0002\u0008\u0001\u0000\u0005\u0008"+
    "\u0003\u0000\u0001\u0008\u0012\u0000\u0001\u0008\u000f\u0000\u0002\u0008\u000f\u0000\u0001\u0008"+
    "\u0007\u0000\u0001\u0008\u000b\u0000\u0008\u0008\u0002\u0000\u0002\u0008\u0002\u0000\u0016\u0008"+
    "\u0001\u0000\u0007\u0008\u0001\u0000\u0002\u0008\u0001\u0000\u0005\u0008\u0003\u0000\u0001\u0008"+
    "\u001e\u0000\u0002\u0008\u0001\u0000\u0003\u0008\u000f\u0000\u0001\u0008\u0011\u0000\u0001\u0008"+
    "\u0001\u0000\u0006\u0008\u0003\u0000\u0003\u0008\u0001\u0000\u0004\u0008\u0003\u0000\u0002\u0008"+
    "\u0001\u0000\u0001\u0008\u0001\u0000\u0002\u0008\u0003\u0000\u0002\u0008\u0003\u0000\u0003\u0008"+
    "\u0003\u0000\u000c\u0008\u0016\u0000\u0001\u0008\u0028\u0000\u0001\u0008\u000b\u0000\u0008\u0008"+
    "\u0001\u0000\u0003\u0008\u0001\u0000\u0017\u0008\u0001\u0000\u0010\u0008\u0003\u0000\u0001\u0008"+
    "\u001a\u0000\u0003\u0008\u0005\u0000\u0002\u0008\u001e\u0000\u0001\u0008\u0004\u0000\u0008\u0008"+
    "\u0001\u0000\u0003\u0008\u0001\u0000\u0017\u0008\u0001\u0000\u000a\u0008\u0001\u0000\u0005\u0008"+
    "\u0003\u0000\u0001\u0008\u0020\u0000\u0001\u0008\u0001\u0000\u0002\u0008\u000f\u0000\u0002\u0008"+
    "\u0011\u0000\u0009\u0008\u0001\u0000\u0003\u0008\u0001\u0000\u0029\u0008\u0002\u0000\u0001\u0008"+
    "\u0010\u0000\u0001\u0008\u0005\u0000\u0003\u0008\u0008\u0000\u0003\u0008\u0018\u0000\u0006\u0008"+
    "\u0005\u0000\u0012\u0008\u0003\u0000\u0018\u0008\u0001\u0000\u0009\u0008\u0001\u0000\u0001\u0008"+
    "\u0002\u0000\u0007\u0008\u003a\u0000\u0030\u0008\u0001\u0000\u0002\u0008\u000b\u0000\u0008\u0008"+
    "\u003a\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0001\u0000\u0005\u0008\u0001\u0000\u0018\u0008"+
    "\u0001\u0000\u0001\u0008\u0001\u0000\u000a\u0008\u0001\u0000\u0002\u0008\u0009\u0000\u0001\u0008"+
    "\u0002\u0000\u0005\u0008\u0001\u0000\u0001\u0008\u0015\u0000\u0004\u0008\u0020\u0000\u0001\u0008"+
    "\u003f\u0000\u0008\u0008\u0001\u0000\u0024\u0008\u001b\u0000\u0005\u0008\u0073\u0000\u002b\u0008"+
    "\u0014\u0000\u0001\u0008\u0010\u0000\u0006\u0008\u0004\u0000\u0004\u0008\u0003\u0000\u0001\u0008"+
    "\u0003\u0000\u0002\u0008\u0007\u0000\u0003\u0008\u0004\u0000\u000d\u0008\u000c\u0000\u0001\u0008"+
    "\u0011\u0000\u0026\u0008\u0001\u0000\u0001\u0008\u0005\u0000\u0001\u0008\u0002\u0000\u002b\u0008"+
    "\u0001\u0000\u004d\u0008\u0001\u0000\u0004\u0008\u0002\u0000\u0007\u0008\u0001\u0000\u0001\u0008"+
    "\u0001\u0000\u0004\u0008\u0002\u0000\u0029\u0008\u0001\u0000\u0004\u0008\u0002\u0000\u0021\u0008"+
    "\u0001\u0000\u0004\u0008\u0002\u0000\u0007\u0008\u0001\u0000\u0001\u0008\u0001\u0000\u0004\u0008"+
    "\u0002\u0000\u000f\u0008\u0001\u0000\u0039\u0008\u0001\u0000\u0004\u0008\u0002\u0000\u0043\u0008"+
    "\u0025\u0000\u0010\u0008\u0010\u0000\u0056\u0008\u0002\u0000\u0006\u0008\u0003\u0000\u016c\u0008"+
    "\u0002\u0000\u0011\u0008\u0001\u0000\u001a\u0008\u0005\u0000\u004b\u0008\u0003\u0000\u000b\u0008"+
    "\u0007\u0000\u000d\u0008\u0001\u0000\u0004\u0008\u000e\u0000\u0012\u0008\u000e\u0000\u0012\u0008"+
    "\u000e\u0000\u000d\u0008\u0001\u0000\u0003\u0008\u000f\u0000\u0034\u0008\u0023\u0000\u0001\u0008"+
    "\u0003\u0000\u0002\u0008\u0043\u0000\u0059\u0008\u0007\u0000\u0005\u0008\u0002\u0000\u0022\u0008"+
    "\u0001\u0000\u0001\u0008\u0005\u0000\u0046\u0008\u000a\u0000\u001f\u0008\u0031\u0000\u001e\u0008"+
    "\u0002\u0000\u0005\u0008\u000b\u0000\u002c\u0008\u0004\u0000\u001a\u0008\u0036\u0000\u0017\u0008"+
    "\u0009\u0000\u0035\u0008\u0052\u0000\u0001\u0008\u005d\u0000\u002f\u0008\u0011\u0000\u0007\u0008"+
    "\u0037\u0000\u001e\u0008\u000d\u0000\u0002\u0008\u000a\u0000\u002c\u0008\u001a\u0000\u0024\u0008"+
    "\u0029\u0000\u0003\u0008\u000a\u0000\u0024\u0008\u0002\u0000\u0009\u0008\u0007\u0000\u002b\u0008"+
    "\u0002\u0000\u0003\u0008\u0029\u0000\u0004\u0008\u0001\u0000\u0006\u0008\u0001\u0000\u0002\u0008"+
    "\u0003\u0000\u0001\u0008\u0005\u0000\u00c0\u0008\u0040\u0000\u0016\u0008\u0002\u0000\u0006\u0008"+
    "\u0002\u0000\u0026\u0008\u0002\u0000\u0006\u0008\u0002\u0000\u0008\u0008\u0001\u0000\u0001\u0008"+
    "\u0001\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0001\u0000\u001f\u0008\u0002\u0000\u0035\u0008"+
    "\u0001\u0000\u0007\u0008\u0001\u0000\u0001\u0008\u0003\u0000\u0003\u0008\u0001\u0000\u0007\u0008"+
    "\u0003\u0000\u0004\u0008\u0002\u0000\u0006\u0008\u0004\u0000\u000d\u0008\u0005\u0000\u0003\u0008"+
    "\u0001\u0000\u0007\u0008\u002b\u0000\u0002\u0003\u0015\u0000\u0002\u0008\u0013\u0000\u0001\u0008"+
    "\u001c\u0000\u0001\u0008\u000d\u0000\u0001\u0008\u0010\u0000\u000d\u0008\u0003\u0000\u0020\u0008"+
    "\u0042\u0000\u0001\u0008\u0004\u0000\u0001\u0008\u0002\u0000\u000a\u0008\u0001\u0000\u0001\u0008"+
    "\u0003\u0000\u0005\u0008\u0006\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0001\u0000\u0001\u0008"+
    "\u0001\u0000\u0004\u0008\u0001\u0000\u000b\u0008\u0002\u0000\u0004\u0008\u0005\u0000\u0005\u0008"+
    "\u0004\u0000\u0001\u0008\u0011\u0000\u0029\u0008\u0177\u0000\u002f\u0008\u0001\u0000\u002f\u0008"+
    "\u0001\u0000\u0085\u0008\u0006\u0000\u0004\u0008\u0003\u0000\u0002\u0008\u000c\u0000\u0026\u0008"+
    "\u0001\u0000\u0001\u0008\u0005\u0000\u0001\u0008\u0002\u0000\u0038\u0008\u0007\u0000\u0001\u0008"+
    "\u0010\u0000\u0017\u0008\u0009\u0000\u0007\u0008\u0001\u0000\u0007\u0008\u0001\u0000\u0007\u0008"+
    "\u0001\u0000\u0007\u0008\u0001\u0000\u0007\u0008\u0001\u0000\u0007\u0008\u0001\u0000\u0007\u0008"+
    "\u0001\u0000\u0007\u0008\u0050\u0000\u0001\u0008\u00d5\u0000\u0003\u0008\u0019\u0000\u0009\u0008"+
    "\u0007\u0000\u0005\u0008\u0002\u0000\u0005\u0008\u0004\u0000\u0056\u0008\u0006\u0000\u0003\u0008"+
    "\u0001\u0000\u005a\u0008\u0001\u0000\u0004\u0008\u0005\u0000\u002b\u0008\u0001\u0000\u005e\u0008"+
    "\u0011\u0000\u0020\u0008\u0030\u0000\u010d\u0008\u0003\u0000\u008d\u0008\u0043\u0000\u002e\u0008"+
    "\u0002\u0000\u000d\u0008\u0003\u0000\u0010\u0008\u000a\u0000\u0002\u0008\u0014\u0000\u002f\u0008"+
    "\u0010\u0000\u001f\u0008\u0002\u0000\u0050\u0008\u0027\u0000\u0009\u0008\u0002\u0000\u0067\u0008"+
    "\u0002\u0000\u0035\u0008\u0002\u0000\u0009\u0008\u002a\u0000\u000d\u0008\u0001\u0000\u0003\u0008"+
    "\u0001\u0000\u0004\u0008\u0001\u0000\u0017\u0008\u0015\u0000\u0001\u0008\u0007\u0000\u0034\u0008"+
    "\u000e\u0000\u0032\u0008\u003e\u0000\u0006\u0008\u0003\u0000\u0001\u0008\u0001\u0000\u0002\u0008"+
    "\u000b\u0000\u001c\u0008\u000a\u0000\u0017\u0008\u0019\u0000\u001d\u0008\u0007\u0000\u002f\u0008"+
    "\u001c\u0000\u0001\u0008\u0010\u0000\u0005\u0008\u0001\u0000\u000a\u0008\u000a\u0000\u0005\u0008"+
    "\u0001\u0000\u0029\u0008\u0017\u0000\u0003\u0008\u0001\u0000\u0008\u0008\u0014\u0000\u0017\u0008"+
    "\u0003\u0000\u0001\u0008\u0003\u0000\u0032\u0008\u0001\u0000\u0001\u0008\u0003\u0000\u0002\u0008"+
    "\u0002\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0018\u0000\u0003\u0008"+
    "\u0002\u0000\u000b\u0008\u0007\u0000\u0003\u0008\u000c\u0000\u0006\u0008\u0002\u0000\u0006\u0008"+
    "\u0002\u0000\u0006\u0008\u0009\u0000\u0007\u0008\u0001\u0000\u0007\u0008\u0001\u0000\u002b\u0008"+
    "\u0001\u0000\u000e\u0008\u0006\u0000\u0073\u0008\u001d\u0000\u00a4\u0008\u000c\u0000\u0017\u0008"+
    "\u0004\u0000\u0031\u0008\u0004\u0000\u0100\u0003\u006e\u0008\u0002\u0000\u006a\u0008\u0026\u0000"+
    "\u0007\u0008\u000c\u0000\u0005\u0008\u0005\u0000\u0001\u0008\u0001\u0000\u000a\u0008\u0001\u0000"+
    "\u000d\u0008\u0001\u0000\u0005\u0008\u0001\u0000\u0001\u0008\u0001\u0000\u0002\u0008\u0001\u0000"+
    "\u0002\u0008\u0001\u0000\u006c\u0008\u0021\u0000\u006b\u0008\u0012\u0000\u0040\u0008\u0002\u0000"+
    "\u0036\u0008\u0028\u0000\u000d\u0008\u0036\u0000\u0002\u0008\u0018\u0000\u0003\u0008\u0019\u0000"+
    "\u0001\u0008\u0006\u0000\u0005\u0008\u0001\u0000\u0087\u0008\u0007\u0000\u0001\u0008\u001c\u0000"+
    "\u001a\u0008\u0004\u0000\u0001\u0008\u0001\u0000\u001a\u0008\u000b\u0000\u0059\u0008\u0003\u0000"+
    "\u0006\u0008\u0002\u0000\u0006\u0008\u0002\u0000\u0006\u0008\u0002\u0000\u0003\u0008\u0003\u0000"+
    "\u0002\u0008\u0003\u0000\u0002\u0008\u0019\u0000\u000c\u0008\u0001\u0000\u001a\u0008\u0001\u0000"+
    "\u0013\u0008\u0001\u0000\u0002\u0008\u0001\u0000\u000f\u0008\u0002\u0000\u000e\u0008\u0022\u0000"+
    "\u007b\u0008\u0045\u0000\u0035\u0008\u010b\u0000\u001d\u0008\u0003\u0000\u0031\u0008\u002f\u0000"+
    "\u0020\u0008\u000d\u0000\u001e\u0008\u0005\u0000\u0026\u0008\u000a\u0000\u001e\u0008\u0002\u0000"+
    "\u0024\u0008\u0004\u0000\u0008\u0008\u0001\u0000\u0005\u0008\u002a\u0000\u009e\u0008\u0012\u0000"+
    "\u0024\u0008\u0004\u0000\u0024\u0008\u0004\u0000\u0028\u0008\u0008\u0000\u0034\u0008\u009c\u0000"+
    "\u0037\u0008\u0009\u0000\u0016\u0008\u000a\u0000\u0008\u0008\u0098\u0000\u0006\u0008\u0002\u0000"+
    "\u0001\u0008\u0001\u0000\u002c\u0008\u0001\u0000\u0002\u0008\u0003\u0000\u0001\u0008\u0002\u0000"+
    "\u0017\u0008\u000a\u0000\u0017\u0008\u0009\u0000\u001f\u0008\u0041\u0000\u0013\u0008\u0001\u0000"+
    "\u0002\u0008\u000a\u0000\u0016\u0008\u000a\u0000\u001a\u0008\u0046\u0000\u0038\u0008\u0006\u0000"+
    "\u0002\u0008\u0040\u0000\u0001\u0008\u000f\u0000\u0004\u0008\u0001\u0000\u0003\u0008\u0001\u0000"+
    "\u001d\u0008\u002a\u0000\u001d\u0008\u0003\u0000\u001d\u0008\u0023\u0000\u0008\u0008\u0001\u0000"+
    "\u001c\u0008\u001b\u0000\u0036\u0008\u000a\u0000\u0016\u0008\u000a\u0000\u0013\u0008\u000d\u0000"+
    "\u0012\u0008\u006e\u0000\u0049\u0008\u0037\u0000\u0033\u0008\u000d\u0000\u0033\u0008\u000d\u0000"+
    "\u0024\u0008\u015c\u0000\u002a\u0008\u0006\u0000\u0002\u0008\u004e\u0000\u001d\u0008\u000a\u0000"+
    "\u0001\u0008\u0008\u0000\u0016\u0008\u006a\u0000\u0015\u0008\u001b\u0000\u0017\u0008\u000c\u0000"+
    "\u0035\u0008\u004b\u0000\u002d\u0008\u0020\u0000\u0019\u0008\u001a\u0000\u0024\u0008\u001d\u0000"+
    "\u0001\u0008\u0002\u0000\u0001\u0008\u0008\u0000\u0023\u0008\u0003\u0000\u0001\u0008\u000c\u0000"+
    "\u0030\u0008\u000e\u0000\u0004\u0008\u0015\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0023\u0000"+
    "\u0012\u0008\u0001\u0000\u0019\u0008\u0054\u0000\u0007\u0008\u0001\u0000\u0001\u0008\u0001\u0000"+
    "\u0004\u0008\u0001\u0000\u000f\u0008\u0001\u0000\u000a\u0008\u0007\u0000\u002f\u0008\u0026\u0000"+
    "\u0008\u0008\u0002\u0000\u0002\u0008\u0002\u0000\u0016\u0008\u0001\u0000\u0007\u0008\u0001\u0000"+
    "\u0002\u0008\u0001\u0000\u0005\u0008\u0003\u0000\u0001\u0008\u0012\u0000\u0001\u0008\u000c\u0000"+
    "\u0005\u0008\u009e\u0000\u0035\u0008\u0012\u0000\u0004\u0008\u0014\u0000\u0003\u0008\u001e\u0000"+
    "\u0030\u0008\u0014\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u00b8\u0000\u002f\u0008\u0029\u0000"+
    "\u0004\u0008\u0024\u0000\u0030\u0008\u0014\u0000\u0001\u0008\u003b\u0000\u002b\u0008\u000d\u0000"+
    "\u0001\u0008\u0047\u0000\u001b\u0008\u00e5\u0000\u002c\u0008\u0074\u0000\u0040\u0008\u001f\u0000"+
    "\u0008\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0008\u0008\u0001\u0000\u0002\u0008\u0001\u0000"+
    "\u0018\u0008\u000f\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u005e\u0000\u0008\u0008\u0002\u0000"+
    "\u0027\u0008\u0010\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u001c\u0000\u0001\u0008\u000a\u0000"+
    "\u0028\u0008\u0007\u0000\u0001\u0008\u0015\u0000\u0001\u0008\u000b\u0000\u002e\u0008\u0013\u0000"+
    "\u0001\u0008\u0022\u0000\u0039\u0008\u0007\u0000\u0009\u0008\u0001\u0000\u0025\u0008\u0011\u0000"+
    "\u0001\u0008\u0031\u0000\u001e\u0008\u0070\u0000\u0007\u0008\u0001\u0000\u0002\u0008\u0001\u0000"+
    "\u0026\u0008\u0015\u0000\u0001\u0008\u0019\u0000\u0006\u0008\u0001\u0000\u0002\u0008\u0001\u0000"+
    "\u0020\u0008\u000e\u0000\u0001\u0008\u0147\u0000\u0013\u0008\u00bd\u0000\u0001\u0008\u002c\u0000"+
    "\u0004\u0008\u001f\u0000\u009a\u0008\u0066\u0000\u006f\u0008\u0011\u0000\u00c4\u0008\u00bc\u0000"+
    "\u002f\u0008\u00d1\u0000\u0047\u0008\u00b9\u0000\u0039\u0008\u0007\u0000\u001f\u0008\u0071\u0000"+
    "\u001e\u0008\u0012\u0000\u0030\u0008\u0010\u0000\u0004\u0008\u001f\u0000\u0015\u0008\u0005\u0000"+
    "\u0013\u0008\u00b0\u0000\u0040\u0008\u0080\u0000\u004b\u0008\u0005\u0000\u0001\u0008\u0042\u0000"+
    "\u000d\u0008\u0040\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u001c\u0000\u00f8\u0008\u0008\u0000"+
    "\u00d6\u0008\u002a\u0000\u0009\u0008\u00f7\u0000\u001f\u0008\u0031\u0000\u0003\u0008\u0011\u0000"+
    "\u0004\u0008\u0008\u0000\u018c\u0008\u0004\u0000\u006b\u0008\u0005\u0000\u000d\u0008\u0003\u0000"+
    "\u0009\u0008\u0007\u0000\u000a\u0008\u0066\u0000\u0055\u0008\u0001\u0000\u0047\u0008\u0001\u0000"+
    "\u0002\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0002\u0008\u0002\u0000\u0004\u0008\u0001\u0000"+
    "\u000c\u0008\u0001\u0000\u0001\u0008\u0001\u0000\u0007\u0008\u0001\u0000\u0041\u0008\u0001\u0000"+
    "\u0004\u0008\u0002\u0000\u0008\u0008\u0001\u0000\u0007\u0008\u0001\u0000\u001c\u0008\u0001\u0000"+
    "\u0004\u0008\u0001\u0000\u0005\u0008\u0001\u0000\u0001\u0008\u0003\u0000\u0007\u0008\u0001\u0000"+
    "\u0154\u0008\u0002\u0000\u0019\u0008\u0001\u0000\u0019\u0008\u0001\u0000\u001f\u0008\u0001\u0000"+
    "\u0019\u0008\u0001\u0000\u001f\u0008\u0001\u0000\u0019\u0008\u0001\u0000\u001f\u0008\u0001\u0000"+
    "\u0019\u0008\u0001\u0000\u001f\u0008\u0001\u0000\u0019\u0008\u0001\u0000\u0008\u0008\u0034\u0000"+
    "\u002d\u0008\u000a\u0000\u0007\u0008\u0010\u0000\u0001\u0008\u0171\u0000\u002c\u0008\u0013\u0000"+
    "\u00c6\u0008\u003b\u0000\u0044\u0008\u0007\u0000\u0001\u0008\u0164\u0000\u0001\u0008\u004f\u0000"+
    "\u0004\u0008\u0001\u0000\u001b\u0008\u0001\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0002\u0000"+
    "\u0001\u0008\u0001\u0000\u000a\u0008\u0001\u0000\u0004\u0008\u0001\u0000\u0001\u0008\u0001\u0000"+
    "\u0001\u0008\u0006\u0000\u0001\u0008\u0004\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0001\u0000"+
    "\u0001\u0008\u0001\u0000\u0003\u0008\u0001\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0002\u0000"+
    "\u0001\u0008\u0001\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0001\u0000"+
    "\u0001\u0008\u0001\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0002\u0000\u0004\u0008\u0001\u0000"+
    "\u0007\u0008\u0001\u0000\u0004\u0008\u0001\u0000\u0004\u0008\u0001\u0000\u0001\u0008\u0001\u0000"+
    "\u000a\u0008\u0001\u0000\u0011\u0008\u0005\u0000\u0003\u0008\u0001\u0000\u0005\u0008\u0001\u0000"+
    "\u0011\u0008\u0044\u0000\u00de\u0008\u0022\u0000\u0035\u0008\u000b\u0000\u00de\u0008\u0002\u0000"+
    "\u0182\u0008\u000e\u0000\u0131\u0008\u001f\u0000\u001e\u0008\u00e2\u0000\u004b\u0008\u00b5\u0000"

  @JvmStatic
  private fun zzUnpackcmap_blocks(): IntArray {
    val result: IntArray = IntArray(29184)
    var offset: Int = 0
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackcmap_blocks(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_CMAP_BLOCKS: IntArray = zzUnpackcmap_blocks()

  /**
   * Translates DFA states to action switch labels.
   */
  private const val ZZ_ACTION_PACKED_0: String  =
    "\u000f\u0000\u0003\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0002"+
    "\u0001\u0007\u0001\u0008\u0001\u0002\u0001\u0009\u0001\u0002\u0001\u000a\u0001\u000b\u0001\u000c"+
    "\u0001\u000d\u0001\u0002\u0001\u000e\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013"+
    "\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0013\u0001\u0019\u0001\u0001"+
    "\u0002\u001a\u0001\u001b\u0001\u001a\u0001\u001c\u0001\u001d\u0001\u0013\u0001\u001e\u0001\u001f"+
    "\u0001\u001c\u0001\u0020\u0001\u0013\u0001\u000e\u0001\u0003\u0001\u0021\u0001\u0022\u0001\u0013"+
    "\u0001\u0003\u0001\u0023\u0001\u000d\u0001\u0013\u0001\u0003\u0001\u000d\u0001\u0000\u0001\u0024"+
    "\u0002\u0000\u000a\u0025\u0002\u0000\u0005\u0025\u0001\u0000\u0001\u0026\u0001\u0027\u000c\u0025"+
    "\u0002\u0028\u0004\u0025\u0001\u0029\u000c\u0025\u0002\u0028\u0005\u0025\u0001\u002a\u000a\u0025"+
    "\u0002\u0028\u0001\u002b\u0008\u0025\u0001\u002c\u0002\u0025\u0002\u0028\u0001\u0025\u0001\u002c"+
    "\u0005\u0025\u0002\u0028\u0003\u0025\u0002\u0028\u0001\u002d\u0001\u0025\u0002\u0028\u0001\u0025"+
    "\u0015\u0028"

  @JvmStatic
  private fun zzUnpackAction(): IntArray {
    val result: IntArray = IntArray(200)
    var offset: Int = 0
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackAction(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_ACTION: IntArray = zzUnpackAction()


  /**
   * Translates a state to a row index in the transition table
   */
  private const val ZZ_ROWMAP_PACKED_0: String  =
    "\u0000\u0000\u0000\u0031\u0000\u0062\u0000\u0093\u0000\u00c4\u0000\u00f5\u0000\u0126\u0000\u0157"+
    "\u0000\u0188\u0000\u01b9\u0000\u01ea\u0000\u021b\u0000\u024c\u0000\u027d\u0000\u02ae\u0000\u02df"+
    "\u0000\u0310\u0000\u0341\u0000\u02df\u0000\u0372\u0000\u02df\u0000\u02df\u0000\u02df\u0000\u0310"+
    "\u0000\u02df\u0000\u02df\u0000\u03a3\u0000\u02df\u0000\u03d4\u0000\u02df\u0000\u0405\u0000\u02df"+
    "\u0000\u02df\u0000\u0436\u0000\u0467\u0000\u0498\u0000\u04c9\u0000\u04fa\u0000\u02df\u0000\u052b"+
    "\u0000\u02df\u0000\u02df\u0000\u02df\u0000\u02df\u0000\u02df\u0000\u055c\u0000\u02df\u0000\u058d"+
    "\u0000\u02df\u0000\u05be\u0000\u05be\u0000\u0310\u0000\u02df\u0000\u02df\u0000\u05ef\u0000\u02df"+
    "\u0000\u0310\u0000\u0620\u0000\u02df\u0000\u02df\u0000\u0651\u0000\u0682\u0000\u02df\u0000\u02df"+
    "\u0000\u06b3\u0000\u06e4\u0000\u02df\u0000\u06b3\u0000\u0715\u0000\u0746\u0000\u0715\u0000\u0310"+
    "\u0000\u02df\u0000\u0777\u0000\u07a8\u0000\u07d9\u0000\u080a\u0000\u083b\u0000\u086c\u0000\u089d"+
    "\u0000\u08ce\u0000\u08ff\u0000\u0930\u0000\u0961\u0000\u0992\u0000\u09c3\u0000\u09f4\u0000\u0a25"+
    "\u0000\u0a56\u0000\u0a87\u0000\u0ab8\u0000\u0ae9\u0000\u0b1a\u0000\u02df\u0000\u02df\u0000\u0b4b"+
    "\u0000\u0b7c\u0000\u0bad\u0000\u0bde\u0000\u0c0f\u0000\u0c40\u0000\u0c71\u0000\u0ca2\u0000\u0cd3"+
    "\u0000\u0d04\u0000\u0d35\u0000\u0d66\u0000\u0d97\u0000\u0dc8\u0000\u0df9\u0000\u0e2a\u0000\u0e5b"+
    "\u0000\u0e8c\u0000\u02df\u0000\u0ebd\u0000\u0eee\u0000\u0f1f\u0000\u0f50\u0000\u0f81\u0000\u0fb2"+
    "\u0000\u0fe3\u0000\u1014\u0000\u1045\u0000\u1076\u0000\u10a7\u0000\u10d8\u0000\u1109\u0000\u113a"+
    "\u0000\u116b\u0000\u119c\u0000\u11cd\u0000\u11fe\u0000\u122f\u0000\u07d9\u0000\u1260\u0000\u1291"+
    "\u0000\u12c2\u0000\u12f3\u0000\u1324\u0000\u1355\u0000\u1386\u0000\u13b7\u0000\u13e8\u0000\u1419"+
    "\u0000\u144a\u0000\u147b\u0000\u0a25\u0000\u14ac\u0000\u14dd\u0000\u150e\u0000\u153f\u0000\u1570"+
    "\u0000\u15a1\u0000\u15d2\u0000\u1603\u0000\u07d9\u0000\u1634\u0000\u1665\u0000\u1696\u0000\u16c7"+
    "\u0000\u16f8\u0000\u0a25\u0000\u1729\u0000\u175a\u0000\u178b\u0000\u17bc\u0000\u17ed\u0000\u181e"+
    "\u0000\u184f\u0000\u1880\u0000\u18b1\u0000\u18e2\u0000\u1913\u0000\u1944\u0000\u0a25\u0000\u1975"+
    "\u0000\u19a6\u0000\u19d7\u0000\u1a08\u0000\u1a39\u0000\u1a6a\u0000\u1a9b\u0000\u1acc\u0000\u1afd"+
    "\u0000\u1b2e\u0000\u1b5f\u0000\u1b90\u0000\u1bc1\u0000\u1bf2\u0000\u1c23\u0000\u1c54\u0000\u1c85"+
    "\u0000\u1cb6\u0000\u1ce7\u0000\u1d18\u0000\u1d49\u0000\u1d7a\u0000\u1dab\u0000\u1ddc\u0000\u02df"

  @JvmStatic
  private fun zzUnpackRowMap(): IntArray {
    val result: IntArray = IntArray(200)
    var offset: Int = 0
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackRowMap(packed: String, offset: Int, result: IntArray): Int {
    var i: Int = 0  /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length - 1
    while (i < l) {
      val high: Int = packed[i++].code shl 16
      result[j++] = high or packed[i++].code
    }
    return j
  }

  @JvmStatic
  private val ZZ_ROWMAP: IntArray = zzUnpackRowMap()

  /**
   * The transition table of the DFA
   */
  private const val ZZ_TRANS_PACKED_0: String  =
    "\u000c\u0010\u0001\u0011\u0003\u0010\u0001\u0012\u0020\u0010\u0001\u0013\u0002\u0014\u0001\u0010"+
    "\u0002\u0014\u0001\u0013\u0001\u0015\u0002\u0013\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019"+
    "\u0002\u0013\u0001\u001a\u0005\u0013\u0001\u001b\u0002\u0013\u0001\u001c\u0001\u001d\u0001\u001e"+
    "\u0001\u001f\u0011\u0013\u0001\u0020\u0001\u0021\u0001\u0022\u0001\u0013\u0001\u0023\u0001\u0014"+
    "\u0001\u0010\u0001\u0023\u0001\u0014\u0001\u0013\u0001\u0015\u0002\u0013\u0001\u0016\u0001\u0017"+
    "\u0001\u0018\u0001\u0019\u0002\u0013\u0001\u001a\u0008\u0013\u0001\u001c\u0001\u001d\u0001\u001e"+
    "\u0001\u001f\u0011\u0013\u0001\u0020\u0001\u0021\u0001\u0022\u0001\u0010\u0002\u0024\u0001\u0010"+
    "\u0002\u0024\u0006\u0010\u0001\u0011\u0022\u0010\u0001\u0021\u0002\u0010\u0002\u0025\u0001\u0010"+
    "\u0002\u0025\u0006\u0010\u0001\u0011\u0024\u0010\u0001\u0013\u0002\u0026\u0001\u0010\u0002\u0026"+
    "\u0001\u0013\u0001\u0027\u0001\u0028\u0001\u0013\u0001\u0029\u0001\u0013\u0001\u0018\u0001\u002a"+
    "\u0001\u0013\u0001\u0028\u0001\u002b\u0001\u0028\u0001\u0013\u0001\u002c\u0003\u0013\u0003\u0028"+
    "\u0001\u0013\u0001\u0028\u0001\u0013\u0011\u0028\u0001\u0013\u0001\u0021\u0001\u0013\u0001\u0010"+
    "\u0002\u0014\u0001\u0010\u0002\u0014\u0002\u0010\u0001\u0028\u0002\u0010\u0001\u002d\u0001\u0011"+
    "\u0001\u002a\u0001\u0010\u0001\u0028\u0001\u0010\u0001\u0028\u0005\u0010\u0003\u0028\u0001\u0010"+
    "\u0001\u0028\u0001\u0010\u0011\u0028\u000b\u0010\u0001\u002e\u0003\u0010\u0001\u0011\u0008\u0010"+
    "\u0001\u002f\u0001\u0010\u0002\u002e\u0004\u0010\u0011\u002e\u000f\u0010\u0001\u0011\u0009\u0010"+
    "\u0001\u0030\u001a\u0010\u0001\u0031\u0001\u0032\u0001\u0033\u0001\u0010\u0002\u0033\u0006\u0031"+
    "\u0001\u0034\u0021\u0031\u0001\u0020\u0001\u0021\u0002\u0031\u0001\u0032\u0001\u0033\u0001\u0010"+
    "\u0002\u0033\u0006\u0031\u0001\u0034\u0022\u0031\u0001\u0021\u0001\u0031\u0001\u0035\u0002\u0014"+
    "\u0001\u0035\u0002\u0014\u0001\u0036\u0001\u0035\u0001\u0037\u0001\u0038\u0002\u0035\u0001\u0039"+
    "\u0003\u0035\u0001\u003a\u0001\u0035\u0001\u003b\u0001\u0035\u0001\u003c\u0002\u0035\u0002\u0037"+
    "\u0004\u0035\u0011\u0037\u0001\u0035\u0001\u0021\u0001\u0035\u0001\u003d\u0001\u003e\u0001\u0014"+
    "\u0001\u003d\u0002\u003e\u0028\u003d\u0001\u003f\u0001\u0040\u0001\u003d\u0001\u0041\u0001\u0042"+
    "\u0001\u0014\u0001\u0041\u0002\u0042\u0001\u0043\u0028\u0041\u0001\u0044\u0001\u0041\u0001\u0045"+
    "\u0001\u0046\u0001\u0014\u0001\u0045\u0002\u0046\u0003\u0045\u0001\u0043\u0025\u0045\u0001\u0047"+
    "\u0001\u0045\u003d\u0000\u0001\u0048\u0003\u0000\u0001\u0049\u002c\u0000\u0001\u004a\u0003\u0000"+
    "\u0001\u004b\u0021\u0000\u0002\u0014\u0001\u0000\u0002\u0014\u002b\u0000\u0001\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u0017\u004c\u0001\u004d\u0001\u004e\u0001\u004f\u0001\u004c\u0001\u0050"+
    "\u0001\u0051\u0001\u0052\u0003\u004c\u0001\u0053\u0001\u0054\u0001\u0055\u0007\u004c\u000a\u0000"+
    "\u0002\u0013\u000d\u0000\u0001\u0013\u0001\u0000\u0001\u0013\u0031\u0000\u0001\u0056\u0044\u0000"+
    "\u0001\u0057\u0001\u0000\u0001\u0023\u0002\u0000\u0001\u0023\u002d\u0000\u0002\u0024\u0001\u0000"+
    "\u0002\u0024\u002c\u0000\u0002\u0025\u0001\u0000\u0002\u0025\u002c\u0000\u0002\u0026\u0001\u0000"+
    "\u0002\u0026\u0033\u0000\u0001\u0028\u0006\u0000\u0001\u0028\u0001\u0000\u0001\u0028\u0005\u0000"+
    "\u0003\u0028\u0001\u0000\u0001\u0028\u0001\u0000\u0011\u0028\u000b\u0000\u0001\u002e\u0005\u0000"+
    "\u0002\u002e\u0001\u0000\u0002\u002e\u0004\u0000\u0002\u002e\u0004\u0000\u0011\u002e\u0003\u0000"+
    "\u0001\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u0018\u0058\u0001\u0059\u0004\u0058\u0001\u005a"+
    "\u0003\u0058\u0001\u005b\u0001\u0058\u0001\u005c\u0005\u0058\u0001\u0000\u0001\u0058\u0001\u0000"+
    "\u0002\u0033\u0001\u0000\u0002\u0033\u0033\u0000\u0001\u0037\u0008\u0000\u0001\u0037\u0005\u0000"+
    "\u0002\u0037\u0004\u0000\u0011\u0037\u0013\u0000\u0001\u005d\u0020\u0000\u0002\u003d\u0001\u0000"+
    "\u002b\u003d\u0002\u0000\u0002\u003d\u0001\u003e\u0001\u0014\u0001\u003d\u0002\u003e\u0028\u003d"+
    "\u0002\u0000\u0001\u003d\u0002\u0041\u0001\u0000\u0003\u0041\u0001\u0000\u002b\u0041\u0001\u0042"+
    "\u0001\u0014\u0001\u0041\u0002\u0042\u0001\u0000\u002a\u0041\u0002\u0045\u0001\u0000\u0006\u0045"+
    "\u0001\u0000\u0028\u0045\u0001\u0046\u0001\u0014\u0001\u0045\u0002\u0046\u0003\u0045\u0001\u0000"+
    "\u0027\u0045\u000c\u0000\u0001\u005e\u0034\u0000\u0001\u005f\u0020\u0000\u0001\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u002c\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0025\u004c\u0001\u0060"+
    "\u0006\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0020\u004c\u0001\u0061\u000b\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u001a\u004c\u0001\u0062\u0005\u004c\u0001\u0063\u000b\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u001c\u004c\u0001\u0064\u000f\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u001e\u004c\u0001\u0065\u0001\u0066\u000c\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u001c\u004c"+
    "\u0001\u0067\u000f\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0017\u004c\u0001\u0068\u0014\u004c"+
    "\u0002\u0000\u0001\u004c\u0002\u0000\u001a\u004c\u0001\u0069\u0011\u004c\u0002\u0000\u0001\u004c"+
    "\u0002\u0000\u001a\u004c\u0001\u006a\u000a\u004c\u0001\u006b\u0005\u004c\u001c\u0000\u0001\u006c"+
    "\u0044\u0000\u0001\u006d\u0001\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u0029\u0058\u0001\u0000"+
    "\u0002\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u0020\u0058\u0001\u006e\u0008\u0058\u0001\u0000"+
    "\u0002\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u001c\u0058\u0001\u006f\u000c\u0058\u0001\u0000"+
    "\u0002\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u0017\u0058\u0001\u0070\u0011\u0058\u0001\u0000"+
    "\u0002\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u001f\u0058\u0001\u0071\u0009\u0058\u0001\u0000"+
    "\u0001\u0058\u0010\u0000\u0001\u0072\u0020\u0000\u0001\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0024\u004c\u0001\u0073\u0007\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0019\u004c\u0001\u0074"+
    "\u0012\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0021\u004c\u0001\u0075\u000a\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u0018\u004c\u0001\u0076\u0013\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0019\u004c\u0001\u0077\u0012\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0021\u004c\u0001\u0078"+
    "\u000a\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0019\u004c\u0001\u0079\u0012\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u0024\u004c\u0001\u007a\u0007\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0022\u004c\u0001\u007b\u0009\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0024\u004c\u0001\u007c"+
    "\u0007\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0022\u004c\u0001\u007d\u0009\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u001e\u004c\u0001\u007e\u000c\u004c\u001c\u0000\u0001\u007f\u0044\u0000"+
    "\u0001\u0080\u0001\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u0019\u0058\u0001\u0081\u000f\u0058"+
    "\u0001\u0000\u0002\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u0024\u0058\u0001\u0082\u0004\u0058"+
    "\u0001\u0000\u0002\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u0022\u0058\u0001\u0083\u0006\u0058"+
    "\u0001\u0000\u0002\u0058\u0002\u0000\u0001\u0058\u0002\u0000\u001c\u0058\u0001\u0084\u000c\u0058"+
    "\u0001\u0000\u0001\u0058\u0001\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u001b\u004c\u0001\u0085"+
    "\u0010\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u001a\u004c\u0001\u0086\u0011\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u0022\u004c\u0001\u0087\u0009\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0012\u004c\u0001\u0088\u0019\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0019\u004c\u0001\u0089"+
    "\u0012\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u001d\u004c\u0001\u008a\u000e\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u001a\u004c\u0001\u008b\u0011\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u001a\u004c\u0001\u008c\u0011\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0017\u004c\u0001\u008d"+
    "\u0014\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0025\u004c\u0001\u008e\u0006\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u001c\u004c\u0001\u008f\u000f\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u001e\u004c\u0001\u0090\u000c\u004c\u001c\u0000\u0001\u0091\u0044\u0000\u0001\u0092\u0001\u0058"+
    "\u0002\u0000\u0001\u0058\u0002\u0000\u001a\u0058\u0001\u0093\u000e\u0058\u0001\u0000\u0002\u0058"+
    "\u0002\u0000\u0001\u0058\u0002\u0000\u001a\u0058\u0001\u0094\u000e\u0058\u0001\u0000\u0002\u0058"+
    "\u0002\u0000\u0001\u0058\u0002\u0000\u0017\u0058\u0001\u0095\u0011\u0058\u0001\u0000\u0002\u0058"+
    "\u0002\u0000\u0001\u0058\u0002\u0000\u0021\u0058\u0001\u0096\u0007\u0058\u0001\u0000\u0001\u0058"+
    "\u0001\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0020\u004c\u0001\u0097\u000b\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u001a\u004c\u0001\u0098\u0011\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0020\u004c\u0001\u0099\u000b\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u001a\u004c\u0001\u009a"+
    "\u0011\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0011\u004c\u0001\u009b\u001a\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u0026\u004c\u0001\u0086\u0005\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0022\u004c\u0001\u008f\u0009\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u001e\u004c\u0001\u009c"+
    "\u000d\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0022\u004c\u0001\u009a\u0009\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u0017\u004c\u0001\u009d\u0014\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0017\u004c\u0001\u009e\u0013\u004c\u001c\u0000\u0001\u009f\u0044\u0000\u0001\u00a0\u0001\u0058"+
    "\u0002\u0000\u0001\u0058\u0002\u0000\u0022\u0058\u0001\u00a1\u0006\u0058\u0001\u0000\u0002\u0058"+
    "\u0002\u0000\u0001\u0058\u0002\u0000\u001e\u0058\u0001\u00a2\u000a\u0058\u0001\u0000\u0002\u0058"+
    "\u0002\u0000\u0001\u0058\u0002\u0000\u0021\u0058\u0001\u00a3\u0007\u0058\u0001\u0000\u0001\u0058"+
    "\u0001\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0022\u004c\u0001\u0086\u0009\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u0018\u004c\u0001\u00a4\u0013\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0020\u004c\u0001\u00a5\u000b\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u001f\u004c\u0001\u0086"+
    "\u000c\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0020\u004c\u0001\u00a6\u000b\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u001d\u004c\u0001\u0086\u000e\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0022\u004c\u0001\u00a7\u0008\u004c\u001c\u0000\u0001\u00a8\u0044\u0000\u0001\u00a9\u0001\u0058"+
    "\u0002\u0000\u0001\u0058\u0002\u0000\u0017\u0058\u0001\u00aa\u0011\u0058\u0001\u0000\u0002\u0058"+
    "\u0002\u0000\u0001\u0058\u0002\u0000\u001a\u0058\u0001\u00ab\u000e\u0058\u0001\u0000\u0001\u0058"+
    "\u0001\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0017\u004c\u0001\u00ac\u0014\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u0024\u004c\u0001\u0086\u0007\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0024\u004c\u0001\u0074\u0007\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u0027\u004c\u0001\u0086"+
    "\u0003\u004c\u001c\u0000\u0001\u00ad\u0044\u0000\u0001\u00ae\u0001\u0058\u0002\u0000\u0001\u0058"+
    "\u0002\u0000\u001d\u0058\u0001\u0093\u000b\u0058\u0001\u0000\u0002\u0058\u0002\u0000\u0001\u0058"+
    "\u0002\u0000\u0024\u0058\u0001\u00af\u0004\u0058\u0001\u0000\u0001\u0058\u0001\u004c\u0002\u0000"+
    "\u0001\u004c\u0002\u0000\u0024\u004c\u0001\u00b0\u0006\u004c\u001c\u0000\u0001\u00b1\u0044\u0000"+
    "\u0001\u00b2\u0001\u004c\u0002\u0000\u0001\u004c\u0002\u0000\u001a\u004c\u0001\u00b3\u0010\u004c"+
    "\u001c\u0000\u0001\u00b4\u0044\u0000\u0001\u00b5\u0001\u004c\u0002\u0000\u0001\u004c\u0002\u0000"+
    "\u0019\u004c\u0001\u0086\u0011\u004c\u001c\u0000\u0001\u00b6\u0044\u0000\u0001\u00b7\u001c\u0000"+
    "\u0001\u00b8\u0044\u0000\u0001\u00b9\u001c\u0000\u0001\u00ba\u0044\u0000\u0001\u00bb\u001c\u0000"+
    "\u0001\u00bc\u0044\u0000\u0001\u00bd\u001c\u0000\u0001\u00be\u0044\u0000\u0001\u00bf\u001c\u0000"+
    "\u0001\u00c0\u0044\u0000\u0001\u00c1\u001c\u0000\u0001\u00c2\u0044\u0000\u0001\u00c3\u001c\u0000"+
    "\u0001\u00c4\u0044\u0000\u0001\u00c5\u001c\u0000\u0001\u00c6\u0044\u0000\u0001\u00c7\u001c\u0000"+
    "\u0001\u00c8\u0044\u0000\u0001\u00c8"

  @JvmStatic
  private fun zzUnpacktrans(): IntArray {
    val result: IntArray = IntArray(7693)
    var offset: Int = 0
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpacktrans(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      value--
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_TRANS: IntArray = zzUnpacktrans()


  /* error codes */
  private const val ZZ_UNKNOWN_ERROR = 0
  private const val ZZ_NO_MATCH = 1
  private const val ZZ_PUSHBACK_2BIG = 2

  /* error messages for the codes above */
  @JvmStatic
  val ZZ_ERROR_MSG = arrayOf(
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  )

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private const val ZZ_ATTRIBUTE_PACKED_0: String  =
    "\u000f\u0000\u0001\u0009\u0002\u0001\u0001\u0009\u0001\u0001\u0003\u0009\u0001\u0001\u0002\u0009"+
    "\u0001\u0001\u0001\u0009\u0001\u0001\u0001\u0009\u0001\u0001\u0002\u0009\u0005\u0001\u0001\u0009"+
    "\u0001\u0001\u0005\u0009\u0001\u0001\u0001\u0009\u0001\u0001\u0001\u0009\u0003\u0001\u0002\u0009"+
    "\u0001\u0001\u0001\u0009\u0002\u0001\u0002\u0009\u0002\u0001\u0002\u0009\u0002\u0001\u0001\u0009"+
    "\u0004\u0001\u0001\u0000\u0001\u0009\u0002\u0000\u000a\u0001\u0002\u0000\u0005\u0001\u0001\u0000"+
    "\u0002\u0009\u0012\u0001\u0001\u0009\u0055\u0001\u0001\u0009"

  @JvmStatic
  private fun zzUnpackAttribute(): IntArray {
    val result: IntArray = IntArray(200)
    var offset: Int = 0
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackAttribute(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_ATTRIBUTE: IntArray = zzUnpackAttribute()

}
  /** the current state of the DFA */
  private var zzState = 0

  /** the current lexical state */
  private var zzLexicalState = YYINITIAL

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private var zzBuffer: CharSequence = "" 

  /** the textposition at the last accepting state */
  private var zzMarkedPos = 0

  /** the current text position in the buffer */
  private var zzCurrentPos = 0

  /** startRead marks the beginning of the yytext() string in the buffer */
  private var zzStartRead = 0

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private var zzEndRead = 0

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private var zzAtEOF = false

  /** Number of newlines encountered up to the start of the matched text. */
  @Suppress("unused")
  private var yyline: Int = 0

  /** Number of characters from the last newline up to the start of the matched text. */
  @Suppress("unused")
  protected var yycolumn: Int = 0

  /** Number of characters up to the start of the matched text. */
  @Suppress("unused")
  private var yychar: Long = 0

  /** Whether the scanner is currently at the beginning of a line. */
  @Suppress("unused")
  private var zzAtBOL: Boolean = false

  /** Whether the user-EOF-code has already been executed. */
  @Suppress("unused")
  private var zzEOFDone: Boolean = false

  /* user code: */
  private val myJdk15Enabled: Boolean
  private var mySnippetBracesLevel = 0;
  /* Enable markdown support for java 23 */
  private var myMarkdownMode = false;

  constructor(isJdk15Enabled: Boolean) {
    myJdk15Enabled = isJdk15Enabled;
  }

  /** Should be called right after a reset */
  public fun setMarkdownMode(isEnabled: Boolean) {
    myMarkdownMode = isEnabled;
  }

  public fun checkAhead(c: Char): Boolean {
    if (zzMarkedPos >= zzBuffer.length) return false;
    return zzBuffer.get(zzMarkedPos) == c;
  }

  public fun goTo(offset: Int) {
    zzCurrentPos = offset
    zzMarkedPos = offset
    zzStartRead = offset;
    zzAtEOF = false;
  }



  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private fun zzMaxBufferLen(): Int {
    return Int.MAX_VALUE
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private fun zzCanGrow(): Boolean {
    return true
  }


  override fun getTokenStart(): Int {
    return zzStartRead
  }

  override fun getTokenEnd(): Int {
    return getTokenStart() + yylength()
  }

  override fun reset(buffer: CharSequence, start: Int, end: Int, initialState: Int) {
    zzBuffer = buffer
    zzCurrentPos = start
    zzMarkedPos = start
    zzStartRead = start
    zzAtEOF  = false
    zzAtBOL = true
    zzEndRead = end
    yybegin(initialState)
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   */
  private fun zzRefill(): Boolean {
    return true
  }


  /**
   * Returns the current lexical state.
   */
  override fun yystate(): Int {
    return zzLexicalState
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  override fun yybegin(newState: Int) {
    zzLexicalState = newState
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  fun yytext(): CharSequence {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos)
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  fun yycharat(position: Int): Char {
    return zzBuffer[zzStartRead + position] 
  }


  /**
   * Returns the length of the matched text region.
   */
  fun yylength(): Int {
    return zzMarkedPos - zzStartRead 
  }

  /**
   * Implementation of the `codePointAt` method of `java.lang.Character` for CharSequences
   *
   * @param index the index of the character for which to retrieve the code point.
   * @return the Unicode code point at the specified index.
   * @throws IndexOutOfBoundsException if the index is outside the bounds of the character sequence.
   */
  fun CharSequence.codePoint(index: Int): Int {
      val high = this[index]
      if (high.isHighSurrogate() && index + 1 < length) {
          val low = this[index + 1]
          if (low.isLowSurrogate()) {
              val codePoint: String = "$high$low"
              return codePoint.codePointAt(0)
          }
      }
      return high.code
  }

  /** Returns the character (Unicode code point) at the specified index. */
  internal fun String.codePointAt(index: Int): Int {
      val high = this[index]
      if (high.isHighSurrogate() && index + 1 < this.length) {
          val low = this[index + 1]
          if (low.isLowSurrogate()) {
              return Char.toCodePoint(high, low)
          }
      }
      return high.code
  }
  
  internal fun CharSequence.offsetByCodePoints(index: Int, codePointOffset: Int): Int {
    val length = this.length
    if (index < 0 || index > length) throw IndexOutOfBoundsException()

    var x = index
    if (codePointOffset >= 0) {
      var i: Int = 0
      
      while (x < length && i < codePointOffset) {
        if (this[x++].isHighSurrogate() && x < length && this[x].isLowSurrogate()) x++
        i++
      }
      
      if (i < codePointOffset) throw IndexOutOfBoundsException()
      
    } else {
      var i: Int = codePointOffset
      
      while (x > 0 && i < 0) {
        if (this[--x].isLowSurrogate() && x > 0 && this[x - 1].isHighSurrogate()) x--
        i++
      }
      
      if (i < 0) {
        throw IndexOutOfBoundsException()
      }
    }
    
    return x
  }

  internal fun Char.Companion.toCodePoint(high: Char, low: Char): Int =
      (((high - MIN_HIGH_SURROGATE) shl 10) or (low - MIN_LOW_SURROGATE)) + 0x10000

  private fun charCount(codePoint: Int): Int = if (codePoint < 0x10000) 1 else 2


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public fun yypushback(number: Int)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG)

    zzMarkedPos -= number
  }


  private fun zzScanError(errorCode: Int) {
    val message = try {
      ZZ_ERROR_MSG[errorCode]
    } catch (e: IndexOutOfBoundsException) {
      ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR]
    }

    throw Error(message)
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private fun zzCMap(input: Int): Int {
    val offset: Int = input and 255
    return if(offset == input) ZZ_CMAP_BLOCKS[offset] else ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input shr 8] or offset]
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   */
  override fun advance(): SyntaxElementType?
  {
    var zzInput: Int = 0 
    var zzAction: Int = 0 

    val zzTransL: IntArray = ZZ_TRANS
    val zzRowMapL: IntArray = ZZ_ROWMAP
    val zzAttrL: IntArray = ZZ_ATTRIBUTE

    while (true) {
      // cached fields:
      var zzCurrentPosL = 0
      var zzMarkedPosL: Int = zzMarkedPos 
      var zzEndReadL: Int = zzEndRead 
      var zzBufferL: CharSequence = zzBuffer 

      zzAction = -1

      zzCurrentPosL = zzMarkedPosL
      zzCurrentPos = zzMarkedPosL
      zzStartRead = zzMarkedPosL

      zzState = ZZ_LEXSTATE[zzLexicalState]

      // set up zzAction for empty match case:
      var zzAttributes: Int = zzAttrL[zzState]
      if ( (zzAttributes and 1) == 1 ) {
        zzAction = zzState
      }


      zzForAction@ while (true) {
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL.codePoint(zzCurrentPosL)
            zzCurrentPosL += charCount(zzInput)
          }
          else if (zzAtEOF) {
            zzInput = YYEOF
            break@zzForAction
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL
            zzMarkedPos   = zzMarkedPosL
            val eof: Boolean = zzRefill()
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos
            zzMarkedPosL   = zzMarkedPos
            zzBufferL      = zzBuffer
            zzEndReadL     = zzEndRead
            if (eof) {
              zzInput = YYEOF
              break@zzForAction
            }
            else {
              zzInput = zzBufferL.codePoint(zzCurrentPosL)
              zzCurrentPosL += charCount(zzInput)
            }
          }
          val zzNext: Int = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)]
          if (zzNext == -1) break@zzForAction
          zzState = zzNext

          zzAttributes = zzAttrL[zzState]
          if ( (zzAttributes and 1) == 1 ) {
            zzAction = zzState
            zzMarkedPosL = zzCurrentPosL
            if ( (zzAttributes and 8) == 8 ) break@zzForAction
          }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true
        return null
      }
      else {
        when (if (zzAction < 0) zzAction else ZZ_ACTION[zzAction]) {
          1 -> {
            return JavaDocSyntaxTokenType.DOC_COMMENT_BAD_CHARACTER;
            }
          // fall through
          46 -> break
          2 -> {
            yybegin(COMMENT_DATA); return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          47 -> break
          3 -> {
            return JavaDocSyntaxTokenType.DOC_SPACE;
            }
          // fall through
          48 -> break
          4 -> {
            yybegin(COMMENT_DATA);
        if(myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_SHARP;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          49 -> break
          5 -> {
            yybegin(COMMENT_DATA);
        if(myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_LPAREN;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          50 -> break
          6 -> {
            yybegin(COMMENT_DATA);
        if(myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_RPAREN;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          51 -> break
          7 -> {
            yybegin(COMMENT_DATA);
          if(myMarkdownMode) {
            return JavaDocSyntaxTokenType.DOC_COMMA;
          }
          return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          52 -> break
          8 -> {
            yybegin(COMMENT_DATA);
        if(myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_TAG_VALUE_SLASH;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          53 -> break
          9 -> {
            yybegin(COMMENT_DATA);
        if(myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_LBRACKET;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          54 -> break
          10 -> {
            yybegin(COMMENT_DATA);
        if(myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_RBRACKET;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          55 -> break
          11 -> {
            yybegin(COMMENT_DATA);
          if(myMarkdownMode) {
            return JavaDocSyntaxTokenType.DOC_INLINE_CODE_FENCE;
          }
          return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          56 -> break
          12 -> {
            if (checkAhead('@')) {
    yybegin(INLINE_TAG_NAME);
    return JavaDocSyntaxTokenType.DOC_INLINE_TAG_START;
  }
  else {
    yybegin(COMMENT_DATA);
    return JavaDocSyntaxTokenType.DOC_INLINE_TAG_START;
  }
            }
          // fall through
          57 -> break
          13 -> {
            yybegin(COMMENT_DATA); return JavaDocSyntaxTokenType.DOC_INLINE_TAG_END;
            }
          // fall through
          58 -> break
          14 -> {
            return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          59 -> break
          15 -> {
            if (checkAhead('<') || checkAhead('\"')) yybegin(COMMENT_DATA);
  else if (checkAhead('\u007b')) yybegin(COMMENT_DATA);  // lbrace - there's a error in JLex when typing lbrace directly
  else yybegin(DOC_TAG_VALUE);
  return JavaDocSyntaxTokenType.DOC_SPACE;
            }
          // fall through
          60 -> break
          16 -> {
            yybegin(DOC_TAG_VALUE); return JavaDocSyntaxTokenType.DOC_SPACE;
            }
          // fall through
          61 -> break
          17 -> {
            yybegin(COMMENT_DATA); return JavaDocSyntaxTokenType.DOC_SPACE;
            }
          // fall through
          62 -> break
          18 -> {
            return JavaDocSyntaxTokenType.DOC_TAG_VALUE_SHARP_TOKEN;
            }
          // fall through
          63 -> break
          19 -> {
            return JavaDocSyntaxTokenType.DOC_TAG_VALUE_TOKEN;
            }
          // fall through
          64 -> break
          20 -> {
            yybegin(DOC_TAG_VALUE_IN_PAREN); return JavaDocSyntaxTokenType.DOC_TAG_VALUE_LPAREN;
            }
          // fall through
          65 -> break
          21 -> {
            return JavaDocSyntaxTokenType.DOC_TAG_VALUE_COMMA;
            }
          // fall through
          66 -> break
          22 -> {
            return JavaDocSyntaxTokenType.DOC_TAG_VALUE_SLASH;
            }
          // fall through
          67 -> break
          23 -> {
            if (myJdk15Enabled) {
    yybegin(DOC_TAG_VALUE_IN_LTGT);
    return JavaDocSyntaxTokenType.DOC_TAG_VALUE_LT;
  }
  else {
    yybegin(COMMENT_DATA);
    return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
  }
            }
          // fall through
          68 -> break
          24 -> {
            yybegin(DOC_TAG_VALUE); return JavaDocSyntaxTokenType.DOC_TAG_VALUE_RPAREN;
            }
          // fall through
          69 -> break
          25 -> {
            yybegin(COMMENT_DATA); return JavaDocSyntaxTokenType.DOC_TAG_VALUE_GT;
            }
          // fall through
          70 -> break
          26 -> {
            yybegin(CODE_TAG); return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          71 -> break
          27 -> {
            yybegin(CODE_TAG); return JavaDocSyntaxTokenType.DOC_SPACE;
            }
          // fall through
          72 -> break
          28 -> {
            yybegin(SNIPPET_TAG_COMMENT_DATA_UNTIL_COLON); return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          73 -> break
          29 -> {
            yybegin(SNIPPET_ATTRIBUTE_VALUE_DOUBLE_QUOTES); return JavaDocSyntaxTokenType.DOC_TAG_VALUE_QUOTE;
            }
          // fall through
          74 -> break
          30 -> {
            yybegin(SNIPPET_ATTRIBUTE_VALUE_SINGLE_QUOTES); return JavaDocSyntaxTokenType.DOC_TAG_VALUE_QUOTE;
            }
          // fall through
          75 -> break
          31 -> {
            if (myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_LEADING_ASTERISKS;
            }
          // fall through
          76 -> break
          32 -> {
            yybegin(SNIPPET_TAG_BODY_DATA); return JavaDocSyntaxTokenType.DOC_TAG_VALUE_COLON;
            }
          // fall through
          77 -> break
          33 -> {
            mySnippetBracesLevel++; return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          78 -> break
          34 -> {
            if (mySnippetBracesLevel > 0) {
          mySnippetBracesLevel--;
          return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
        } else {
          yybegin(COMMENT_DATA);
          return JavaDocSyntaxTokenType.DOC_INLINE_TAG_END;
        }
            }
          // fall through
          79 -> break
          35 -> {
            yybegin(SNIPPET_TAG_COMMENT_DATA_UNTIL_COLON); return JavaDocSyntaxTokenType.DOC_TAG_VALUE_QUOTE;
            }
          // fall through
          80 -> break
          36 -> {
            if(myMarkdownMode) {
      return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
    }
    return JavaDocSyntaxTokenType.DOC_COMMENT_END;
            }
          // fall through
          81 -> break
          37 -> {
            yybegin(TAG_DOC_SPACE); return JavaDocSyntaxTokenType.DOC_TAG_NAME;
            }
          // fall through
          82 -> break
          38 -> {
            if (myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_COMMENT_BAD_CHARACTER;
        }
        yybegin(COMMENT_DATA_START);
        return JavaDocSyntaxTokenType.DOC_COMMENT_START;
            }
          // fall through
          83 -> break
          39 -> {
            if(myMarkdownMode) {
          yybegin(COMMENT_DATA_START);
          return JavaDocSyntaxTokenType.DOC_COMMENT_LEADING_ASTERISKS;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_BAD_CHARACTER;
            }
          // fall through
          84 -> break
          40 -> {
            yybegin(COMMENT_DATA);
        if(myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_CODE_FENCE;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          85 -> break
          41 -> {
            if (myMarkdownMode) {
          return JavaDocSyntaxTokenType.DOC_COMMENT_LEADING_ASTERISKS;
        }
        return JavaDocSyntaxTokenType.DOC_COMMENT_DATA;
            }
          // fall through
          86 -> break
          42 -> {
            yybegin(DOC_TAG_VALUE); return JavaDocSyntaxTokenType.DOC_TAG_NAME;
            }
          // fall through
          87 -> break
          43 -> {
            yybegin(CODE_TAG_SPACE); return JavaDocSyntaxTokenType.DOC_TAG_NAME;
            }
          // fall through
          88 -> break
          44 -> {
            yybegin(PARAM_TAG_SPACE); return JavaDocSyntaxTokenType.DOC_TAG_NAME;
            }
          // fall through
          89 -> break
          45 -> {
            yybegin(SNIPPET_TAG_COMMENT_DATA_UNTIL_COLON); return JavaDocSyntaxTokenType.DOC_TAG_NAME;
            }
          // fall through
          90 -> break
          else ->
            zzScanError(ZZ_NO_MATCH)
        }
      }
    }
    return null
  }


}
