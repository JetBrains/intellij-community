package com.intellij.java.syntax

// Generated by generateBundleMapping.kt
// To regenerate the file, please run `GenerateBundleMapping` run configuration with the following parameters: 
//   <full path to JavaSyntaxBundle.properties> <full path to DefaultJavaSyntaxResources.kt> com.intellij.java.syntax 
internal object DefaultJavaSyntaxResources {
  val mappings: Map<String, String> = mapOf(
    "annotation.name.is.missing" to "Annotation attribute of the form 'name=value' expected",
    "bound.not.expected" to "Unexpected bound",
    "catch.without.try" to "'catch' without 'try'",
    "class.literal.expected" to ".class expected",
    "else.without.if" to "'else' without 'if'",
    "error.message.wildcard.not.expected" to "Unexpected wildcard",
    "expected.array.initializer" to "Array initializer expected",
    "expected.boolean.expression" to "Boolean expression expected",
    "expected.case.label.element" to "Expression, pattern, 'default' or 'null' expected",
    "expected.catch.or.finally" to "'catch' or 'finally' expected",
    "expected.class.or.interface" to "'class' or 'interface' expected",
    "expected.class.reference" to "Class reference expected",
    "expected.colon" to "':' expected",
    "expected.colon.or.arrow" to "':' or '->' expected",
    "expected.comma" to "',' expected",
    "expected.comma.or.rparen" to "',' or ')' expected",
    "expected.comma.or.semicolon" to "',' or ';' expected",
    "expected.dot" to "'.' expected",
    "expected.eq" to "'=' expected",
    "expected.expression" to "Expression expected",
    "expected.gt" to "'>' expected.",
    "expected.gt.or.comma" to "'>' or ',' expected",
    "expected.identifier" to "Identifier expected",
    "expected.identifier.or.semicolon" to "Identifier or ';' expected",
    "expected.identifier.or.type" to "Identifier or type expected",
    "expected.lbrace" to "'{' expected",
    "expected.lbrace.or.semicolon" to "'{' or ';' expected",
    "expected.lbracket" to "'[' expected",
    "expected.lparen" to "'(' expected",
    "expected.lparen.or.lbracket" to "'(' or '[' expected",
    "expected.lt.or.lparen" to "'<' or '(' expected",
    "expected.module.declaration" to "Module declaration expected",
    "expected.module.statement" to "Module directive expected",
    "expected.package.reference" to "Package reference expected",
    "expected.parameter" to "Parameter expected",
    "expected.parameter.or.rparen" to "Annotation attribute or ')' expected",
    "expected.pattern" to "Pattern expected",
    "expected.rbrace" to "'}' expected",
    "expected.rbracket" to "']' expected",
    "expected.resource" to "Resource definition expected",
    "expected.rparen" to "')' expected",
    "expected.semicolon" to "';' expected",
    "expected.statement" to "Statement expected",
    "expected.switch.label" to "'case', 'default' or '}' expected",
    "expected.switch.rule" to "Expression, block or throw statement expected",
    "expected.template.fragment" to "Template fragment expected",
    "expected.type" to "Type expected",
    "expected.type.parameter" to "Type parameter expected",
    "expected.value" to "Value expected",
    "expected.while" to "'while' expected",
    "expected.with" to "'with' expected",
    "feature.advanced.collection.api" to "Lambda methods in collections",
    "feature.annotations" to "Annotations",
    "feature.assertions" to "Assertions",
    "feature.auto.root.modules" to "All API-exporting modules are implicitly root modules",
    "feature.binary.literals" to "Binary literals",
    "feature.classfile.api" to "ClassFile API",
    "feature.collection.factories" to "Collection factory methods",
    "feature.diamond.types" to "Diamond types",
    "feature.effectively.final" to "Effectively final variables",
    "feature.enhanced.switch" to "Enhanced 'switch' blocks",
    "feature.enum.qualified.name.in.switch" to "Qualified enum as a constant in switch",
    "feature.enums" to "Enums",
    "feature.extension.methods" to "Extension methods",
    "feature.for.each" to "For-each loops",
    "feature.foreign.functions" to "Foreign Function & Memory API",
    "feature.generics" to "Generics",
    "feature.hex.fp.literals" to "Hexadecimal floating point literals",
    "feature.implicit.classes" to "Implicitly declared classes",
    "feature.implicit.import.in.implicit.classes" to "Implicit import in implicitly declared classes",
    "feature.inherited.static.main.method" to "Inherited static main method",
    "feature.inner.statics" to "Static declarations in inner classes",
    "feature.instance.main.method" to "Instance main method",
    "feature.intersections.in.casts" to "Intersection types in casts",
    "feature.javadoc.snippets" to "@snippet in Javadoc",
    "feature.lambda.expressions" to "Lambda expressions",
    "feature.local.enums" to "Local enums",
    "feature.local.interfaces" to "Local interfaces",
    "feature.lvti" to "Local variable type inference",
    "feature.markdown.comment" to "Markdown Documentation Comments",
    "feature.method.references" to "Method references",
    "feature.module.import.declarations" to "Module Import Declarations",
    "feature.modules" to "Modules",
    "feature.multi.catch" to "Multi-catches",
    "feature.nestmates" to "Nest-based access control",
    "feature.no.this.capture" to "Inner classes don't capture 'this'",
    "feature.objects.class" to "java.util.Objects API",
    "feature.override.interface" to "@Override in interfaces",
    "feature.package.import.shadow.module.import" to "Import-on-demand over module import",
    "feature.package.transitive.dependency.on.java.base" to "Transitive dependency on java.base module",
    "feature.pattern.guard.and.record.patterns" to "Pattern guards and record patterns",
    "feature.patterns.in.switch" to "Patterns in switch",
    "feature.patterns.instanceof" to "Patterns in 'instanceof'",
    "feature.primitive.types.in.patterns" to "Primitive types in patterns, instanceof and switch",
    "feature.private.interface.methods" to "Private interface methods",
    "feature.record.patterns.in.for.each" to "Record patterns in for-each loops",
    "feature.records" to "Records",
    "feature.repeating.annotations" to "Repeating annotations",
    "feature.scoped.values" to "Scoped Values",
    "feature.sealed.classes" to "Sealed classes",
    "feature.sequenced.collections" to "Sequenced Collections",
    "feature.serial.annotation" to "@Serial annotation",
    "feature.statements.before.super" to "Statements before super()",
    "feature.static.imports" to "Static imports",
    "feature.static.interface.calls" to "Static interface method calls",
    "feature.stream.and.optional.api" to "Stream and Optional API",
    "feature.stream.gatherers" to "Stream Gatherers",
    "feature.strictfp" to "Always-strict floating point semantics",
    "feature.string.switch" to "Strings in 'switch' statements",
    "feature.string.templates" to "String templates",
    "feature.structured.concurrency" to "Structured Concurrency",
    "feature.switch.expressions" to "'switch' expressions",
    "feature.text.block.escape.sequences" to "'\\s' escape sequences",
    "feature.text.blocks" to "Text block literals",
    "feature.try.with.resources" to "Try-with-resources",
    "feature.try.with.resources.refs" to "Resource references",
    "feature.type.annotations" to "Type annotations",
    "feature.type.receivers" to "Receiver parameters",
    "feature.underscores.in.literals" to "Underscores in literals",
    "feature.unnamed.vars" to "Unnamed patterns and variables",
    "feature.utf8.property.files" to "Property files in UTF-8 encoding",
    "feature.valhalla.value.classes" to "Valhalla value classes",
    "feature.var.lambda.parameter" to "'var' in lambda parameters",
    "feature.varargs" to "Variable arity methods",
    "feature.virtual.threads" to "Virtual Threads",
    "feature.with.initial" to "ThreadLocal.withInitial()",
    "finally.without.try" to "'finally' without 'try'",
    "import.statement.identifier.or.asterisk.expected." to "Identifier or '*' expected",
    "jdk.1.3.language.level.description" to "1.3 - Plain old Java",
    "jdk.1.4.language.level.description" to "1.4 - 'assert' keyword",
    "jdk.1.5.language.level.description" to "5 - 'enum' keyword, generics, autoboxing, etc.",
    "jdk.1.6.language.level.description" to "6 - @Override in interfaces",
    "jdk.1.7.language.level.description" to "7 - Diamonds, ARM, multi-catch, etc.",
    "jdk.1.8.language.level.description" to "8 - Lambdas, type annotations, etc.",
    "jdk.1.9.language.level.description" to "9 - Modules, private methods in interfaces, etc.",
    "jdk.10.language.level.description" to "10 - Local variable type inference",
    "jdk.11.language.level.description" to "11 - Local variable syntax for lambda parameters",
    "jdk.12.language.level.description" to "12 - No new language features",
    "jdk.13.language.level.description" to "13 - No new language features",
    "jdk.14.language.level.description" to "14 - Switch expressions",
    "jdk.15.language.level.description" to "15 - Text blocks",
    "jdk.16.language.level.description" to "16 - Records, patterns, local enums and interfaces",
    "jdk.17.language.level.description" to "17 - Sealed types, always-strict floating-point semantics",
    "jdk.18.language.level.description" to "18 - JavaDoc snippets",
    "jdk.19.language.level.description" to "19 - No new language features",
    "jdk.20.language.level.description" to "20 - No new language features",
    "jdk.21.language.level.description" to "21 - Record patterns, pattern matching for switch",
    "jdk.21.preview.language.level.description" to "21 (Preview) - String templates, unnamed classes and instance main methods, etc.",
    "jdk.22.language.level.description" to "22 - Unnamed variables and patterns",
    "jdk.22.preview.language.level.description" to "22 (Preview) - Statements before super(), string templates (2nd preview), etc.",
    "jdk.23.language.level.description" to "23 - Markdown documentation comments",
    "jdk.23.preview.language.level.description" to "23 (Preview) - Primitive types in patterns, implicitly declared classes, etc.",
    "jdk.24.language.level.description" to "24 - Stream gatherers",
    "jdk.24.preview.language.level.description" to "24 (Preview) - Flexible constructor bodies, simple source files, etc.",
    "jdk.X.language.level.description" to "X - Experimental features",
    "jdk.unsupported.preview.language.level.description" to "{0} (Preview) - Unsupported",
    "unexpected.identifier" to "Unexpected identifier",
    "unexpected.token" to "Unexpected token",
    "unexpected.tokens" to "Unexpected tokens",
  )
}
