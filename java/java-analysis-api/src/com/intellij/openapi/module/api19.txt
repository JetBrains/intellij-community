com.sun.jdi.request.ThreadDeathRequest#addPlatformThreadsOnlyFilter()
com.sun.jdi.request.ThreadStartRequest#addPlatformThreadsOnlyFilter()
com.sun.jdi.ThreadReference#isVirtual()
jdk.jfr.consumer.RecordingFile#write(Path;Predicate<RecordedEvent>;)
jdk.jfr.consumer.RecordedThread#isVirtual()
sun.text.spi.JavaTimeDateTimePatternProvider#getJavaTimeDateTimePattern(String;String;Locale;)
java.io.InvalidClassException#InvalidClassException(String;Throwable;)
java.io.InvalidClassException#InvalidClassException(String;String;Throwable;)
java.io.ObjectStreamException#ObjectStreamException(String;Throwable;)
java.io.ObjectStreamException#ObjectStreamException(Throwable;)
java.io.InvalidObjectException#InvalidObjectException(String;Throwable;)
java.net.SocketException#SocketException(String;Throwable;)
java.net.SocketException#SocketException(Throwable;)
java.nio.channels.FileChannel#map(java.nio.channels.FileChannel.MapMode;long;long;MemorySession;)
java.lang.invoke.MethodHandles#memorySegmentViewVarHandle(ValueLayout;)
java.lang.invoke.MethodHandles#filterValue(VarHandle;MethodHandle;MethodHandle;)
java.lang.invoke.MethodHandles#filterCoordinates(VarHandle;int;MethodHandle[];)
java.lang.invoke.MethodHandles#insertCoordinates(VarHandle;int;Object[];)
java.lang.invoke.MethodHandles#permuteCoordinates(VarHandle;List<Class<?>>;int[];)
java.lang.invoke.MethodHandles#collectCoordinates(VarHandle;int;MethodHandle;)
java.lang.invoke.MethodHandles#dropCoordinates(VarHandle;int;Class<?>[];)
java.lang.foreign.GroupLayout
java.lang.foreign.ValueLayout.OfBoolean
java.lang.foreign.ValueLayout.OfByte
java.lang.foreign.ValueLayout.OfChar
java.lang.foreign.ValueLayout.OfShort
java.lang.foreign.ValueLayout.OfInt
java.lang.foreign.ValueLayout.OfFloat
java.lang.foreign.ValueLayout.OfLong
java.lang.foreign.ValueLayout.OfDouble
java.lang.foreign.ValueLayout.OfAddress
java.lang.foreign.SequenceLayout
java.lang.Long#compress(long;long;)
java.lang.Long#expand(long;long;)
java.lang.Math#TAU
java.lang.Float#PRECISION
java.lang.Double#PRECISION
java.lang.Thread#sleep(Duration;)
java.lang.Thread#ofPlatform()
java.lang.Thread#ofVirtual()
java.lang.Thread#startVirtualThread(Runnable;)
java.lang.Thread#isVirtual()
java.lang.Thread#join(Duration;)
java.lang.Thread#threadId()
java.lang.Integer#compress(int;int;)
java.lang.Integer#expand(int;int;)
java.lang.Character.UnicodeBlock#ARABIC_EXTENDED_B
java.lang.Character.UnicodeBlock#VITHKUQI
java.lang.Character.UnicodeBlock#LATIN_EXTENDED_F
java.lang.Character.UnicodeBlock#OLD_UYGHUR
java.lang.Character.UnicodeBlock#UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED_A
java.lang.Character.UnicodeBlock#CYPRO_MINOAN
java.lang.Character.UnicodeBlock#TANGSA
java.lang.Character.UnicodeBlock#KANA_EXTENDED_B
java.lang.Character.UnicodeBlock#ZNAMENNY_MUSICAL_NOTATION
java.lang.Character.UnicodeBlock#LATIN_EXTENDED_G
java.lang.Character.UnicodeBlock#TOTO
java.lang.Character.UnicodeBlock#ETHIOPIC_EXTENDED_B
java.lang.Character.UnicodeScript#VITHKUQI
java.lang.Character.UnicodeScript#OLD_UYGHUR
java.lang.Character.UnicodeScript#CYPRO_MINOAN
java.lang.Character.UnicodeScript#TANGSA
java.lang.Character.UnicodeScript#TOTO
java.lang.StrictMath#TAU
java.lang.MatchException
java.lang.WrongThreadException
java.math.BigDecimal#TWO
java.math.BigInteger#parallelMultiply(java.math.BigInteger;)
java.text.DecimalFormatSymbols#getLocale()
java.time.chrono.Chronology#isIsoBased()
java.time.chrono.IsoChronology#isIsoBased()
java.time.chrono.MinguoChronology#isIsoBased()
java.time.chrono.JapaneseChronology#isIsoBased()
java.time.chrono.ThaiBuddhistChronology#isIsoBased()
java.time.format.DateTimeFormatter#ofLocalizedPattern(String;)
java.time.format.DateTimeFormatterBuilder#getLocalizedDateTimePattern(String;Chronology;Locale;)
java.time.format.DateTimeFormatterBuilder#appendLocalized(String;)
java.util.spi.ToolProvider#description()
java.util.concurrent.Future#resultNow()
java.util.concurrent.Future#exceptionNow()
java.util.concurrent.Future.State
java.util.concurrent.Future#state()
java.util.concurrent.Executors#newThreadPerTaskExecutor(ThreadFactory;)
java.util.concurrent.Executors#newVirtualThreadPerTaskExecutor()
java.util.concurrent.ForkJoinPool#lazySubmit(ForkJoinTask<T>;)
java.util.concurrent.ForkJoinPool#setParallelism(int;)
java.util.concurrent.ForkJoinPool#close()
java.util.concurrent.ForkJoinTask#quietlyJoin(long;TimeUnit;)
java.util.concurrent.ForkJoinTask#quietlyJoinUninterruptibly(long;TimeUnit;)
java.util.concurrent.ForkJoinTask#adaptInterruptible(Callable<? extends T>;)
java.util.concurrent.ExecutorService#close()
java.util.concurrent.ForkJoinWorkerThread#ForkJoinWorkerThread(ThreadGroup;ForkJoinPool;boolean;)
java.util.Locale#of(String;String;String;)
java.util.Locale#of(String;String;)
java.util.Locale#of(String;)
java.util.Random#from(RandomGenerator;)
java.util.HashMap#calculateHashMapCapacity(int;)
java.util.HashMap#newHashMap(int;)
java.util.HashSet#newHashSet(int;)
java.util.Objects#toIdentityString(Object;)
java.util.WeakHashMap#newWeakHashMap(int;)
java.util.LinkedHashMap#newLinkedHashMap(int;)
java.util.LinkedHashSet#newLinkedHashSet(int;)
javax.net.ssl.SSLParameters#getSignatureSchemes()
javax.net.ssl.SSLParameters#setSignatureSchemes(String[];)
javax.net.ssl.SSLKeyException#SSLKeyException(String;Throwable;)
javax.net.ssl.SSLProtocolException#SSLProtocolException(String;Throwable;)
javax.net.ssl.SSLHandshakeException#SSLHandshakeException(String;Throwable;)
javax.net.ssl.SSLPeerUnverifiedException#SSLPeerUnverifiedException(String;Throwable;)
jdk.jshell.SourceCodeAnalysis#highlights(String;)
jdk.jshell.SourceCodeAnalysis#Highlight(int;int;Set<Attribute>;)
jdk.jshell.SourceCodeAnalysis.Attribute
com.sun.source.tree.Tree.Kind#CONSTANT_CASE_LABEL
com.sun.source.tree.Tree.Kind#PATTERN_CASE_LABEL
com.sun.source.tree.Tree.Kind#DECONSTRUCTION_PATTERN
com.sun.source.tree.TreeVisitor#visitConstantCaseLabel(ConstantCaseLabelTree;P;)
com.sun.source.tree.TreeVisitor#visitPatternCaseLabel(PatternCaseLabelTree;P;)
com.sun.source.tree.TreeVisitor#visitDeconstructionPattern(DeconstructionPatternTree;P;)
com.sun.source.tree.PatternCaseLabelTree
com.sun.source.tree.ConstantCaseLabelTree
com.sun.source.tree.DeconstructionPatternTree
com.sun.source.util.TreeScanner#visitConstantCaseLabel(ConstantCaseLabelTree;P;)
com.sun.source.util.TreeScanner#visitPatternCaseLabel(PatternCaseLabelTree;P;)
com.sun.source.util.TreeScanner#visitDeconstructionPattern(DeconstructionPatternTree;P;)
com.sun.source.util.SimpleTreeVisitor#visitConstantCaseLabel(ConstantCaseLabelTree;P;)
com.sun.source.util.SimpleTreeVisitor#visitDeconstructionPattern(DeconstructionPatternTree;P;)
com.sun.source.util.SimpleTreeVisitor#visitPatternCaseLabel(PatternCaseLabelTree;P;)
javax.lang.model.element.ElementKind#isDeclaredType()
javax.lang.model.element.ElementKind#isExecutable()
javax.lang.model.element.ElementKind#isInitializer()
javax.lang.model.element.ElementKind#isVariable()
javax.lang.model.SourceVersion#RELEASE_19
java.net.http.HttpClient.Builder#localAddress(InetAddress;)
com.sun.management.HotSpotDiagnosticMXBean#dumpThreads(String;com.sun.management.HotSpotDiagnosticMXBean.ThreadDumpFormat;)
com.sun.management.HotSpotDiagnosticMXBean.ThreadDumpFormat
jdk.incubator.vector.Vector#compress(VectorMask<E>;)
jdk.incubator.vector.Vector#expand(VectorMask<E>;)
jdk.incubator.vector.Vector#intoMemorySegment(MemorySegment;long;ByteOrder;)
jdk.incubator.vector.Vector#intoMemorySegment(MemorySegment;long;ByteOrder;VectorMask<E>;)
jdk.incubator.vector.IntVector#compress(VectorMask<Integer>;)
jdk.incubator.vector.IntVector#expand(VectorMask<Integer>;)
jdk.incubator.vector.IntVector#fromMemorySegment(VectorSpecies<Integer>;MemorySegment;long;ByteOrder;)
jdk.incubator.vector.IntVector#fromMemorySegment(VectorSpecies<Integer>;MemorySegment;long;ByteOrder;VectorMask<Integer>;)
jdk.incubator.vector.IntVector#intoMemorySegment(MemorySegment;long;ByteOrder;)
jdk.incubator.vector.IntVector#intoMemorySegment(MemorySegment;long;ByteOrder;VectorMask<Integer>;)
jdk.incubator.vector.ByteVector#compress(VectorMask<Byte>;)
jdk.incubator.vector.ByteVector#expand(VectorMask<Byte>;)
jdk.incubator.vector.ByteVector#fromMemorySegment(VectorSpecies<Byte>;MemorySegment;long;ByteOrder;)
jdk.incubator.vector.ByteVector#fromMemorySegment(VectorSpecies<Byte>;MemorySegment;long;ByteOrder;VectorMask<Byte>;)
jdk.incubator.vector.ByteVector#intoMemorySegment(MemorySegment;long;ByteOrder;)
jdk.incubator.vector.ByteVector#intoMemorySegment(MemorySegment;long;ByteOrder;VectorMask<Byte>;)
jdk.incubator.vector.LongVector#compress(VectorMask<Long>;)
jdk.incubator.vector.LongVector#expand(VectorMask<Long>;)
jdk.incubator.vector.LongVector#fromMemorySegment(VectorSpecies<Long>;MemorySegment;long;ByteOrder;)
jdk.incubator.vector.LongVector#fromMemorySegment(VectorSpecies<Long>;MemorySegment;long;ByteOrder;VectorMask<Long>;)
jdk.incubator.vector.LongVector#intoMemorySegment(MemorySegment;long;ByteOrder;)
jdk.incubator.vector.LongVector#intoMemorySegment(MemorySegment;long;ByteOrder;VectorMask<Long>;)
jdk.incubator.vector.VectorMask#indexInRange(long;long;)
jdk.incubator.vector.VectorMask#compress()
jdk.incubator.vector.FloatVector#compress(VectorMask<Float>;)
jdk.incubator.vector.FloatVector#expand(VectorMask<Float>;)
jdk.incubator.vector.FloatVector#fromMemorySegment(VectorSpecies<Float>;MemorySegment;long;ByteOrder;)
jdk.incubator.vector.FloatVector#fromMemorySegment(VectorSpecies<Float>;MemorySegment;long;ByteOrder;VectorMask<Float>;)
jdk.incubator.vector.FloatVector#intoMemorySegment(MemorySegment;long;ByteOrder;)
jdk.incubator.vector.FloatVector#intoMemorySegment(MemorySegment;long;ByteOrder;VectorMask<Float>;)
jdk.incubator.vector.ShortVector#compress(VectorMask<Short>;)
jdk.incubator.vector.ShortVector#expand(VectorMask<Short>;)
jdk.incubator.vector.ShortVector#fromMemorySegment(VectorSpecies<Short>;MemorySegment;long;ByteOrder;)
jdk.incubator.vector.ShortVector#fromMemorySegment(VectorSpecies<Short>;MemorySegment;long;ByteOrder;VectorMask<Short>;)
jdk.incubator.vector.ShortVector#intoMemorySegment(MemorySegment;long;ByteOrder;)
jdk.incubator.vector.ShortVector#intoMemorySegment(MemorySegment;long;ByteOrder;VectorMask<Short>;)
jdk.incubator.vector.DoubleVector#compress(VectorMask<Double>;)
jdk.incubator.vector.DoubleVector#expand(VectorMask<Double>;)
jdk.incubator.vector.DoubleVector#fromMemorySegment(VectorSpecies<Double>;MemorySegment;long;ByteOrder;)
jdk.incubator.vector.DoubleVector#fromMemorySegment(VectorSpecies<Double>;MemorySegment;long;ByteOrder;VectorMask<Double>;)
jdk.incubator.vector.DoubleVector#intoMemorySegment(MemorySegment;long;ByteOrder;)
jdk.incubator.vector.DoubleVector#intoMemorySegment(MemorySegment;long;ByteOrder;VectorMask<Double>;)
jdk.incubator.vector.VectorSpecies#loopBound(long;)
jdk.incubator.vector.VectorSpecies#indexInRange(long;long;)
jdk.incubator.vector.VectorSpecies#fromMemorySegment(MemorySegment;long;ByteOrder;)
jdk.incubator.vector.VectorOperators#BIT_COUNT
jdk.incubator.vector.VectorOperators#TRAILING_ZEROS_COUNT
jdk.incubator.vector.VectorOperators#LEADING_ZEROS_COUNT
jdk.incubator.vector.VectorOperators#REVERSE
jdk.incubator.vector.VectorOperators#REVERSE_BYTES
jdk.incubator.vector.VectorOperators#COMPRESS_BITS
jdk.incubator.vector.VectorOperators#EXPAND_BITS
jdk.incubator.concurrent.StructuredTaskScope.ShutdownOnSuccess
jdk.incubator.concurrent.StructuredTaskScope.ShutdownOnFailure
jdk.incubator.concurrent.StructuredTaskScope
jdk.incubator.concurrent.StructureViolationException