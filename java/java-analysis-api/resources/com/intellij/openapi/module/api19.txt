com.sun.jdi.request.ThreadDeathRequest#addPlatformThreadsOnlyFilter()
com.sun.jdi.request.ThreadStartRequest#addPlatformThreadsOnlyFilter()
com.sun.jdi.ThreadReference#isVirtual()
com.sun.jdi.OpaqueFrameException
jdk.jfr.consumer.RecordingFile#write(java.nio.file.Path;java.util.function.Predicate<jdk.jfr.consumer.RecordedEvent>;)
jdk.jfr.consumer.RecordedThread#isVirtual()
jdk.net.ExtendedSocketOptions#IP_DONTFRAGMENT
sun.text.spi.JavaTimeDateTimePatternProvider#getJavaTimeDateTimePattern(java.lang.String;java.lang.String;java.util.Locale;)
sun.util.locale.provider.JavaTimeDateTimePatternImpl#getJavaTimeDateTimePattern(java.lang.String;java.lang.String;java.util.Locale;)
java.io.InvalidClassException#InvalidClassException(java.lang.String;java.lang.Throwable;)
java.io.InvalidClassException#InvalidClassException(java.lang.String;java.lang.String;java.lang.Throwable;)
java.io.ObjectStreamException#ObjectStreamException(java.lang.String;java.lang.Throwable;)
java.io.ObjectStreamException#ObjectStreamException(java.lang.Throwable;)
java.io.InvalidObjectException#InvalidObjectException(java.lang.String;java.lang.Throwable;)
java.net.SocketException#SocketException(java.lang.String;java.lang.Throwable;)
java.net.SocketException#SocketException(java.lang.Throwable;)
java.nio.channels.FileChannel#map(java.nio.channels.FileChannel.MapMode;long;long;MemorySession;)
java.lang.invoke.MethodHandles#memorySegmentViewVarHandle(ValueLayout;)
java.lang.invoke.MethodHandles#filterValue(java.lang.invoke.VarHandle;java.lang.invoke.MethodHandle;java.lang.invoke.MethodHandle;)
java.lang.invoke.MethodHandles#filterCoordinates(java.lang.invoke.VarHandle;int;java.lang.invoke.MethodHandle[];)
java.lang.invoke.MethodHandles#insertCoordinates(java.lang.invoke.VarHandle;int;java.lang.Object[];)
java.lang.invoke.MethodHandles#permuteCoordinates(java.lang.invoke.VarHandle;java.util.List<java.lang.Class<?>>;int[];)
java.lang.invoke.MethodHandles#collectCoordinates(java.lang.invoke.VarHandle;int;java.lang.invoke.MethodHandle;)
java.lang.invoke.MethodHandles#dropCoordinates(java.lang.invoke.VarHandle;int;java.lang.Class<?>[];)
java.lang.foreign.GroupLayout
java.lang.foreign.ValueLayout.OfBoolean
java.lang.foreign.ValueLayout.OfByte
java.lang.foreign.ValueLayout.OfChar
java.lang.foreign.ValueLayout.OfShort
java.lang.foreign.ValueLayout.OfInt
java.lang.foreign.ValueLayout.OfFloat
java.lang.foreign.ValueLayout.OfLong
java.lang.foreign.ValueLayout.OfDouble
java.lang.foreign.ValueLayout.OfAddress
java.lang.foreign.SequenceLayout
java.lang.Long#compress(long;long;)
java.lang.Long#expand(long;long;)
java.lang.Math#TAU
java.lang.Float#PRECISION
java.lang.Double#PRECISION
java.lang.Thread#sleep(java.time.Duration;)
java.lang.Thread#ofPlatform()
java.lang.Thread#ofVirtual()
java.lang.Thread#startVirtualThread(Runnable;)
java.lang.Thread#isVirtual()
java.lang.Thread#join(java.time.Duration;)
java.lang.Thread#threadId()
java.lang.Integer#compress(int;int;)
java.lang.Integer#expand(int;int;)
java.lang.Character.UnicodeBlock#ARABIC_EXTENDED_B
java.lang.Character.UnicodeBlock#VITHKUQI
java.lang.Character.UnicodeBlock#LATIN_EXTENDED_F
java.lang.Character.UnicodeBlock#OLD_UYGHUR
java.lang.Character.UnicodeBlock#UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED_A
java.lang.Character.UnicodeBlock#CYPRO_MINOAN
java.lang.Character.UnicodeBlock#TANGSA
java.lang.Character.UnicodeBlock#KANA_EXTENDED_B
java.lang.Character.UnicodeBlock#ZNAMENNY_MUSICAL_NOTATION
java.lang.Character.UnicodeBlock#LATIN_EXTENDED_G
java.lang.Character.UnicodeBlock#TOTO
java.lang.Character.UnicodeBlock#ETHIOPIC_EXTENDED_B
java.lang.Character.UnicodeScript#VITHKUQI
java.lang.Character.UnicodeScript#OLD_UYGHUR
java.lang.Character.UnicodeScript#CYPRO_MINOAN
java.lang.Character.UnicodeScript#TANGSA
java.lang.Character.UnicodeScript#TOTO
java.lang.StrictMath#TAU
java.lang.MatchException
java.lang.WrongThreadException
java.math.BigDecimal#TWO
java.math.BigInteger#parallelMultiply(java.math.BigInteger;)
java.text.DecimalFormatSymbols#getLocale()
java.time.chrono.Chronology#isIsoBased()
java.time.chrono.IsoChronology#isIsoBased()
java.time.chrono.MinguoChronology#isIsoBased()
java.time.chrono.JapaneseChronology#isIsoBased()
java.time.chrono.ThaiBuddhistChronology#isIsoBased()
java.time.format.DateTimeFormatter#ofLocalizedPattern(java.lang.String;)
java.time.format.DateTimeFormatterBuilder#getLocalizedDateTimePattern(java.lang.String;java.time.chrono.Chronology;java.util.Locale;)
java.time.format.DateTimeFormatterBuilder#appendLocalized(java.lang.String;)
java.util.spi.ToolProvider#description()
java.util.concurrent.Future#resultNow()
java.util.concurrent.Future#exceptionNow()
java.util.concurrent.Future.State
java.util.concurrent.Future#state()
java.util.concurrent.FutureTask#resultNow()
java.util.concurrent.FutureTask#exceptionNow()
java.util.concurrent.FutureTask#state()
java.util.concurrent.ForkJoinPool#lazySubmit(java.util.concurrent.ForkJoinTask<T>;)
java.util.concurrent.ForkJoinPool#setParallelism(int;)
java.util.concurrent.ForkJoinPool#close()
java.util.concurrent.ForkJoinTask#state()
java.util.concurrent.ForkJoinTask#resultNow()
java.util.concurrent.ForkJoinTask#exceptionNow()
java.util.concurrent.ForkJoinTask#quietlyJoin(long;java.util.concurrent.TimeUnit;)
java.util.concurrent.ForkJoinTask#quietlyJoinUninterruptibly(long;java.util.concurrent.TimeUnit;)
java.util.concurrent.ForkJoinTask#adaptInterruptible(java.util.concurrent.Callable<? extends T>;)
java.util.concurrent.Executors#newThreadPerTaskExecutor(java.util.concurrent.ThreadFactory;)
java.util.concurrent.Executors#newVirtualThreadPerTaskExecutor()
java.util.concurrent.ExecutorService#close()
java.util.concurrent.CompletableFuture#resultNow()
java.util.concurrent.CompletableFuture#exceptionNow()
java.util.concurrent.CompletableFuture#state()
java.util.concurrent.CompletableFuture.MinimalStage#resultNow()
java.util.concurrent.CompletableFuture.MinimalStage#exceptionNow()
java.util.concurrent.CompletableFuture.MinimalStage#state()
java.util.concurrent.ForkJoinWorkerThread#ForkJoinWorkerThread(java.lang.ThreadGroup;java.util.concurrent.ForkJoinPool;boolean;)
java.util.Locale#of(java.lang.String;java.lang.String;java.lang.String;)
java.util.Locale#of(java.lang.String;java.lang.String;)
java.util.Locale#of(java.lang.String;)
java.util.Random#from(java.util.random.RandomGenerator;)
java.util.HashMap#calculateHashMapCapacity(int;)
java.util.HashMap#newHashMap(int;)
java.util.HashSet#newHashSet(int;)
java.util.Objects#toIdentityString(java.lang.Object;)
java.util.WeakHashMap#newWeakHashMap(int;)
java.util.LinkedHashMap#newLinkedHashMap(int;)
java.util.LinkedHashSet#newLinkedHashSet(int;)
javax.net.ssl.SSLParameters#getSignatureSchemes()
javax.net.ssl.SSLParameters#setSignatureSchemes(java.lang.String[];)
javax.net.ssl.SSLKeyException#SSLKeyException(java.lang.String;java.lang.Throwable;)
javax.net.ssl.SSLProtocolException#SSLProtocolException(java.lang.String;java.lang.Throwable;)
javax.net.ssl.SSLHandshakeException#SSLHandshakeException(java.lang.String;java.lang.Throwable;)
javax.net.ssl.SSLPeerUnverifiedException#SSLPeerUnverifiedException(java.lang.String;java.lang.Throwable;)
com.sun.tools.javap.Main.JavapToolProvider#description()
com.sun.tools.jdeps.Main.JDepsToolProvider#description()
jdk.tools.jmod.Main.JmodToolProvider#description()
jdk.tools.jlink.internal.Main.JlinkToolProvider#description()
jdk.jshell.SourceCodeAnalysis#Highlight(int;int;java.util.Set<Attribute>;)
jdk.jshell.SourceCodeAnalysis#highlights(java.lang.String;)
jdk.jshell.SourceCodeAnalysis.Highlight
jdk.jshell.SourceCodeAnalysis.Attribute
jdk.jshell.SourceCodeAnalysisImpl#highlights(java.lang.String;)
com.sun.source.tree.Tree.Kind#CONSTANT_CASE_LABEL
com.sun.source.tree.Tree.Kind#PATTERN_CASE_LABEL
com.sun.source.tree.Tree.Kind#DECONSTRUCTION_PATTERN
com.sun.source.tree.TreeVisitor#visitConstantCaseLabel(ConstantCaseLabelTree;P;)
com.sun.source.tree.TreeVisitor#visitPatternCaseLabel(PatternCaseLabelTree;P;)
com.sun.source.tree.TreeVisitor#visitDeconstructionPattern(DeconstructionPatternTree;P;)
com.sun.source.tree.PatternCaseLabelTree
com.sun.source.tree.ConstantCaseLabelTree
com.sun.source.tree.DeconstructionPatternTree
com.sun.source.util.TreeScanner#visitConstantCaseLabel(ConstantCaseLabelTree;P;)
com.sun.source.util.TreeScanner#visitPatternCaseLabel(PatternCaseLabelTree;P;)
com.sun.source.util.TreeScanner#visitDeconstructionPattern(DeconstructionPatternTree;P;)
com.sun.source.util.SimpleTreeVisitor#visitConstantCaseLabel(ConstantCaseLabelTree;P;)
com.sun.source.util.SimpleTreeVisitor#visitDeconstructionPattern(DeconstructionPatternTree;P;)
com.sun.source.util.SimpleTreeVisitor#visitPatternCaseLabel(PatternCaseLabelTree;P;)
sun.tools.jar.JarToolProvider#description()
jdk.javadoc.internal.tool.JavadocToolProvider#description()
com.sun.tools.javac.main.JavacToolProvider#description()
jdk.jpackage.internal.JPackageToolProvider#description()
javax.lang.model.element.ElementKind#isDeclaredType()
javax.lang.model.element.ElementKind#isExecutable()
javax.lang.model.element.ElementKind#isInitializer()
javax.lang.model.element.ElementKind#isVariable()
javax.lang.model.SourceVersion#RELEASE_19
java.net.http.HttpClient.Builder#localAddress(InetAddress;)
jdk.internal.net.http.HttpClientBuilderImpl#localAddress(java.net.InetAddress;)
com.sun.management.HotSpotDiagnosticMXBean#dumpThreads(String;com.sun.management.HotSpotDiagnosticMXBean.ThreadDumpFormat;)
com.sun.management.HotSpotDiagnosticMXBean.ThreadDumpFormat
java.net.http.HttpClient.Builder#localAddress(java.net.InetAddress;)
jdk.incubator.vector.Vector#compress(jdk.incubator.vector.VectorMask<E>;)
jdk.incubator.vector.Vector#expand(jdk.incubator.vector.VectorMask<E>;)
jdk.incubator.vector.Vector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.Vector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<E>;)
jdk.incubator.vector.IntVector#compress(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.IntVector#expand(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.IntVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Integer>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.IntVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Integer>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.IntVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.IntVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.IntVector.IntSpecies#fromMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.ByteVector#compress(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.ByteVector#expand(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.ByteVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Byte>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.ByteVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Byte>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.ByteVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.ByteVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.ByteVector.ByteSpecies#fromMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.LongVector#compress(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.LongVector#expand(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.LongVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Long>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.LongVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Long>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.LongVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.LongVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.LongVector.LongSpecies#fromMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.VectorMask#indexInRange(long;long;)
jdk.incubator.vector.VectorMask#compress()
jdk.incubator.vector.FloatVector#compress(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.FloatVector#expand(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.FloatVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Float>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.FloatVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Float>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.FloatVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.FloatVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.FloatVector.FloatSpecies#fromMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.Int64Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.Int64Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.Int64Vector.Int64Mask#compress()
jdk.incubator.vector.ShortVector#compress(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.ShortVector#expand(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.ShortVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Short>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.ShortVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Short>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.ShortVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.ShortVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.ShortVector.ShortSpecies#fromMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.AbstractMask#indexInRange(long;long;)
jdk.incubator.vector.Byte64Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.Byte64Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.Byte64Vector.Byte64Mask#compress()
jdk.incubator.vector.DoubleVector#compress(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.DoubleVector#expand(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.DoubleVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Double>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.DoubleVector#fromMemorySegment(jdk.incubator.vector.VectorSpecies<java.lang.Double>;java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.DoubleVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.DoubleVector#intoMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.DoubleVector.DoubleSpecies#fromMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.Int128Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.Int128Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.Int128Vector.Int128Mask#compress()
jdk.incubator.vector.Int256Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.Int256Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.Int256Vector.Int256Mask#compress()
jdk.incubator.vector.Int512Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.Int512Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.Int512Vector.Int512Mask#compress()
jdk.incubator.vector.IntMaxVector#compress(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.IntMaxVector#expand(jdk.incubator.vector.VectorMask<java.lang.Integer>;)
jdk.incubator.vector.IntMaxVector.IntMaxMask#compress()
jdk.incubator.vector.Long64Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.Long64Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.Long64Vector.Long64Mask#compress()
jdk.incubator.vector.Byte128Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.Byte128Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.Byte128Vector.Byte128Mask#compress()
jdk.incubator.vector.Byte256Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.Byte256Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.Byte256Vector.Byte256Mask#compress()
jdk.incubator.vector.Byte512Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.Byte512Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.Byte512Vector.Byte512Mask#compress()
jdk.incubator.vector.ByteMaxVector#compress(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.ByteMaxVector#expand(jdk.incubator.vector.VectorMask<java.lang.Byte>;)
jdk.incubator.vector.ByteMaxVector.ByteMaxMask#compress()
jdk.incubator.vector.Float64Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.Float64Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.Float64Vector.Float64Mask#compress()
jdk.incubator.vector.Long128Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.Long128Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.Long128Vector.Long128Mask#compress()
jdk.incubator.vector.Long256Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.Long256Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.Long256Vector.Long256Mask#compress()
jdk.incubator.vector.Long512Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.Long512Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.Long512Vector.Long512Mask#compress()
jdk.incubator.vector.LongMaxVector#compress(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.LongMaxVector#expand(jdk.incubator.vector.VectorMask<java.lang.Long>;)
jdk.incubator.vector.LongMaxVector.LongMaxMask#compress()
jdk.incubator.vector.Short64Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.Short64Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.Short64Vector.Short64Mask#compress()
jdk.incubator.vector.VectorSpecies#loopBound(long;)
jdk.incubator.vector.VectorSpecies#indexInRange(long;long;)
jdk.incubator.vector.VectorSpecies#fromMemorySegment(java.lang.foreign.MemorySegment;long;java.nio.ByteOrder;)
jdk.incubator.vector.Double64Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.Double64Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.Double64Vector.Double64Mask#compress()
jdk.incubator.vector.Float128Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.Float128Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.Float128Vector.Float128Mask#compress()
jdk.incubator.vector.Float256Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.Float256Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.Float256Vector.Float256Mask#compress()
jdk.incubator.vector.Float512Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.Float512Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.Float512Vector.Float512Mask#compress()
jdk.incubator.vector.FloatMaxVector#compress(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.FloatMaxVector#expand(jdk.incubator.vector.VectorMask<java.lang.Float>;)
jdk.incubator.vector.FloatMaxVector.FloatMaxMask#compress()
jdk.incubator.vector.Short128Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.Short128Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.Short128Vector.Short128Mask#compress()
jdk.incubator.vector.Short256Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.Short256Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.Short256Vector.Short256Mask#compress()
jdk.incubator.vector.Short512Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.Short512Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.Short512Vector.Short512Mask#compress()
jdk.incubator.vector.ShortMaxVector#compress(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.ShortMaxVector#expand(jdk.incubator.vector.VectorMask<java.lang.Short>;)
jdk.incubator.vector.ShortMaxVector.ShortMaxMask#compress()
jdk.incubator.vector.AbstractSpecies#loopBound(long;)
jdk.incubator.vector.AbstractSpecies#indexInRange(long;long;)
jdk.incubator.vector.Double128Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.Double128Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.Double128Vector.Double128Mask#compress()
jdk.incubator.vector.Double256Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.Double256Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.Double256Vector.Double256Mask#compress()
jdk.incubator.vector.Double512Vector#compress(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.Double512Vector#expand(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.Double512Vector.Double512Mask#compress()
jdk.incubator.vector.DoubleMaxVector#compress(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.DoubleMaxVector#expand(jdk.incubator.vector.VectorMask<java.lang.Double>;)
jdk.incubator.vector.DoubleMaxVector.DoubleMaxMask#compress()
jdk.incubator.vector.VectorOperators#BIT_COUNT
jdk.incubator.vector.VectorOperators#TRAILING_ZEROS_COUNT
jdk.incubator.vector.VectorOperators#LEADING_ZEROS_COUNT
jdk.incubator.vector.VectorOperators#REVERSE
jdk.incubator.vector.VectorOperators#REVERSE_BYTES
jdk.incubator.vector.VectorOperators#COMPRESS_BITS
jdk.incubator.vector.VectorOperators#EXPAND_BITS
jdk.incubator.concurrent.StructuredTaskScope.ShutdownOnSuccess
jdk.incubator.concurrent.StructuredTaskScope.ShutdownOnFailure
jdk.incubator.concurrent.StructuredTaskScope
jdk.incubator.concurrent.StructureViolationException