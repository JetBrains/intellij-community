<root>
    <item name='java.lang.invoke.BoundMethodHandle java.lang.Object internalProperties()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle java.lang.Object internalValues()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodType, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodType, int[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory Factory()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt; generateConcreteBMHClass(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt; generateConcreteBMHClass(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeFieldName(java.lang.String, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeFieldName(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeSignature(java.lang.String, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeSignature(java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.String typeSig(char)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.BoundMethodHandle.SpeciesData speciesDataFromConcreteBMHClass(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle linkConstructor(java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle linkConstructor(java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle makeCbmhCtor(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle makeGetter(java.lang.Class&lt;?&gt;, java.lang.String, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeCtors(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String, java.lang.invoke.MethodHandle[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeCtors(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String, java.lang.invoke.MethodHandle[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeCtors(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String, java.lang.invoke.MethodHandle[]) 2'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeGetters(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodHandle[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_,!null-&gt;!null&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData SpeciesData(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData SpeciesData(java.lang.String, java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData boolean isPlaceholder()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData int fieldCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.BoundMethodHandle.SpeciesData getForClass(java.lang.String, java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.BoundMethodHandle.SpeciesData updateCache(java.lang.String, java.lang.invoke.BoundMethodHandle.SpeciesData)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;param2&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Species_L java.lang.invoke.BoundMethodHandle.SpeciesData speciesData()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Species_L java.lang.invoke.MethodHandle reinvokerTarget()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.CallSite CallSite(java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite CallSite(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite CallSite(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite CallSite(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite java.lang.Object maybeReBox(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;null-&gt;null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.CallSite java.lang.invoke.CallSite makeSite(java.lang.invoke.MethodHandle, java.lang.String, java.lang.invoke.MethodType, java.lang.Object, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite java.lang.invoke.CallSite makeSite(java.lang.invoke.MethodHandle, java.lang.String, java.lang.invoke.MethodType, java.lang.Object, java.lang.Class&lt;?&gt;) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite java.lang.invoke.WrongMethodTypeException wrongTargetType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite java.lang.invoke.WrongMethodTypeException wrongTargetType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.CallSite java.lang.invoke.WrongMethodTypeException wrongTargetType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.CallSite void checkTargetChange(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite void checkTargetChange(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite void maybeReBoxElements(java.lang.Object[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.CallSite void maybeReBoxElements(java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.ConstantCallSite ConstantCallSite(java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.ConstantCallSite ConstantCallSite(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.ConstantCallSite ConstantCallSite(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.ConstantCallSite java.lang.invoke.MethodHandle dynamicInvoker()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.ConstantCallSite java.lang.invoke.MethodHandle getTarget()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.ConstantCallSite void setTarget(java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.ConstantCallSite void setTarget(java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle boolean checkInitialized(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle boolean shouldBeInitialized(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle int afIndex(byte, boolean, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle int ftypeKind(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object allocateInstance(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object checkBase(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;param1&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object checkBase(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object checkCast(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object checkCast(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object constructorMethod(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object constructorMethod(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object internalMemberName(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object internalMemberName(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object internalMemberNameEnsureInit(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object nullCheck(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;param1&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object nullCheck(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object staticBase(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object staticBase(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.String internalProperties()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle makeAllocator(java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle makeAllocator(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.MemberName internalMemberName()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle long fieldOffset(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle long fieldOffset(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle long staticOffset(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle long staticOffset(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle void ensureInitialized(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle.Accessor java.lang.Object checkCast(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle.EnsureInitialized INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle.Lazy Lazy()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle.StaticAccessor java.lang.Object checkCast(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.InvokeDynamic InvokeDynamic()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.InvokeGeneric boolean returnConversionNeeded(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.InvokeGeneric boolean returnConversionNeeded(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle addReturnConversion(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatch(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatch(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatchWithConversion(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatchWithConversion(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatcher(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dropDispatchArguments(java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandles.Lookup lookup()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.Invokers Invokers(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.Invokers Invokers(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers boolean checkInvoker(java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;true&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.Object checkGenericType(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.Object checkGenericType(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.Object getCallSiteTarget(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MemberName exactInvokerMethod(java.lang.invoke.MethodType, java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MemberName genericInvokerMethod(java.lang.invoke.MethodType, java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MemberName invokeBasicMethod(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MemberName linkToCallSiteMethod(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MethodHandle makeBasicInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MethodHandle prepareForGenericCall(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType, java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.Invokers void checkExactType(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers void checkExactType(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName MemberName()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName MemberName(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName MemberName(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;, byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName MemberName(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;, java.lang.Void)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName MemberName(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;, java.lang.Void) 3'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName MemberName(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName boolean equals(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName boolean hasReceiverTypeDispatch()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isBridge()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isCallerSensitive()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isConstructor()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isField()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isFieldOrMethod()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isGetter()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isInvocable()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isMethod()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isMethodHandleInvoke()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isPackage()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isResolved()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isSetter()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isSynthetic()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isType()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean isVarargs()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean referenceKindIsConsistentWith(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean testAllFlags(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean testAnyFlags(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName boolean testFlags(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName byte getReferenceKind()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName int flagsMods(int, int, byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName int getModifiers()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.Class&lt;?&gt; getDeclaringClass()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.Class&lt;?&gt; getFieldType()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.Class&lt;?&gt;[] getParameterTypes()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;new&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.ClassLoader getClassLoader()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.IllegalAccessException makeAccessException(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.IllegalAccessException makeAccessException(java.lang.String, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.IllegalAccessException makeAccessException(java.lang.String, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.Object getType()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.ReflectiveOperationException makeAccessException()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.String getName()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.String getName(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;!null&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.String getName(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.String getSignature()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.String message()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName asConstructor()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName asSetter()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName asSpecial()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName changeReferenceKind(byte, byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;this&quot;"/>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName.Factory getFactory()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MethodType getInvocationType()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MethodType getMethodOrFieldType()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MethodType getMethodType()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName void init(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName void initResolved(boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName.Factory Factory()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolve(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolveOrFail(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;, java.lang.Class&lt;NoSuchMemberException&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolveOrNull(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,null,_-&gt;null&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolveOrNull(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName[] newMemberBuffer(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getMembers(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, int, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_,_,_,_-&gt;new&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getMembers(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, int, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandle boolean asCollectorChecks(java.lang.Class&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle boolean isVarargsCollector()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.Object internalProperties()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.Object internalValues()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.Object invokeWithArguments(java.util.List&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.String debugString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.String standardString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MemberName internalMemberName()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asCollector(java.lang.Class&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asFixedArity()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;this&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asSpreader(java.lang.Class&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle rebind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle reinvokerTarget()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle setVarargs(java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle setVarargs(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodType type()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandle void asSpreaderChecks(java.lang.Class&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle void spreadArrayChecks(java.lang.Class&lt;?&gt;, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandle void spreadArrayChecks(java.lang.Class&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl MethodHandleImpl()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle fakeMethodHandleInvoke(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeArrayElementAccessor(java.lang.Class&lt;?&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, int, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithCatch(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithCatch(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeReferenceIdentity(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeSpreadArguments(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeVarargsCollector(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeVarargsCollector(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle selectAlternative(boolean, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle throwException(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl void initStatics()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor ArrayAccessor()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor GETTER_CACHE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor SETTER_CACHE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor boolean getElementZ(boolean[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor boolean getElementZ(boolean[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor boolean needCast(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor byte getElementB(byte[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor byte getElementB(byte[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor char getElementC(char[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor char getElementC(char[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor double getElementD(double[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor double getElementD(double[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor float getElementF(float[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor float getElementF(float[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor int getElementI(int[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor int getElementI(int[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Class&lt;?&gt;, java.lang.Object[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Class&lt;?&gt;, java.lang.Object[], int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object, java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object, java.lang.Object, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.String name(java.lang.Class&lt;?&gt;, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.String name(java.lang.Class&lt;?&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.invoke.MethodHandle getAccessor(java.lang.Class&lt;?&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.invoke.MethodType correctType(java.lang.Class&lt;?&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.invoke.MethodType type(java.lang.Class&lt;?&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor long getElementJ(long[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor long getElementJ(long[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor short getElementS(short[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor short getElementS(short[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementB(byte[], int, byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementB(byte[], int, byte) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementC(char[], int, char)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementC(char[], int, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementD(double[], int, double)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementD(double[], int, double) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementF(float[], int, float)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementF(float[], int, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementI(int[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementI(int[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementJ(long[], int, long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementJ(long[], int, long) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Class&lt;?&gt;, java.lang.Object[], int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Class&lt;?&gt;, java.lang.Object[], int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object, java.lang.Object, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object, java.lang.Object, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object[], int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object[], int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementS(short[], int, short)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementS(short[], int, short) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementZ(boolean[], int, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementZ(boolean[], int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector AsVarargsCollector(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector AsVarargsCollector(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector boolean isVarargsCollector()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle asFixedArity()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle reinvokerTarget()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle setVarargs(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller BindCaller()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller boolean checkCallerClass(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;true&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle makeInjectedInvoker(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle prepareForInvoker(java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle restoreToType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle restoreToType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller.T T()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller.T java.lang.Object invoke_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller.T void init()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.GuardWithCatch GuardWithCatch(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.Lazy Lazy()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives MethodHandleNatives()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean canBeCalledVirtual(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean canBeCalledVirtual(java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean isCallerSensitive(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean isCallerSensitiveMethod(java.lang.Class&lt;?&gt;, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean isCallerSensitiveMethod(java.lang.Class&lt;?&gt;, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean isCallerSensitiveMethod(java.lang.Class&lt;?&gt;, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean refKindDoesDispatch(byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean refKindHasReceiver(byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean refKindIsField(byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean refKindIsGetter(byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean refKindIsMethod(byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean refKindIsSetter(byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean refKindIsStatic(byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives boolean refKindIsValid(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.String refKindName(byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethod(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethod(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodImpl(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodImpl(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodTracing(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodTracing(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodTracing(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodTracing(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MethodHandle linkMethodHandleConstant(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MethodType findMethodHandleType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MethodType findMethodHandleType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives java.lang.invoke.MethodType fixMethodType(java.lang.Class&lt;?&gt;, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleNatives.Constants Constants()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics MethodHandleStatics()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.Error NYI()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.Error uncaughtException(java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object, java.lang.Object) 2'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalStateException(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalStateException(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalStateException(java.lang.String, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String addTypeString(java.lang.Object, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,!null-&gt;!null;null,_-&gt;!null&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String addTypeString(java.lang.Object, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String addTypeString(java.lang.Object, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;!null,_-&gt;!null;_,!null-&gt;!null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;!null,_,_-&gt;!null;_,!null,_-&gt;!null;_,_,!null-&gt;!null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object, java.lang.Object) 2'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandles MethodHandles()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.RuntimeException misMatchedTypes(java.lang.String, java.lang.invoke.MethodType, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.RuntimeException misMatchedTypes(java.lang.String, java.lang.invoke.MethodType, java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.RuntimeException misMatchedTypes(java.lang.String, java.lang.invoke.MethodType, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.RuntimeException misMatchedTypes(java.lang.String, java.lang.invoke.MethodType, java.lang.invoke.MethodType) 2'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle arrayElementGetter(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle arrayElementSetter(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle basicInvoker(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle collectArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle collectArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle constant(java.lang.Class&lt;?&gt;, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.lang.Class&lt;?&gt;...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle exactInvoker(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArgument(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArgument(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle insertArguments(java.lang.invoke.MethodHandle, int, java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle insertArguments(java.lang.invoke.MethodHandle, int, java.lang.Object...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle invoker(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle spreadInvoker(java.lang.invoke.MethodType, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle throwException(java.lang.Class&lt;?&gt;, java.lang.Class&lt;? extends java.lang.Throwable&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandles.Lookup lookup()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandles.Lookup publicLookup()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles java.util.List&lt;java.lang.Class&lt;?&gt;&gt; copyTypes(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.util.List&lt;java.lang.Class&lt;?&gt;&gt; copyTypes(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles void checkReorder(int[], java.lang.invoke.MethodType, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles void checkReorder(int[], java.lang.invoke.MethodType, java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles void checkReorder(int[], java.lang.invoke.MethodType, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles void checkReorder(int[], java.lang.invoke.MethodType, java.lang.invoke.MethodType) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup Lookup(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup Lookup(java.lang.Class&lt;?&gt;, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup boolean isFullPowerLookup()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup boolean restrictProtectedReceiver(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup int fixmods(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup int lookupModes()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.Class&lt;?&gt; findBoundCallerClass(java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.Class&lt;?&gt; findBoundCallerClass(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.Class&lt;?&gt; lookupClass()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.Class&lt;?&gt; lookupClassOrNull()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.String accessFailedMessage(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.String accessFailedMessage(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle fakeMethodHandleInvoke(java.lang.invoke.MemberName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findConstructor(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSpecial(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSpecial(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSpecial(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStatic(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStatic(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findVirtualForMH(java.lang.String, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,null-&gt;null&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findVirtualForMH(java.lang.String, java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectConstructor(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectField(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectMethod(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectMethodCommon(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName, boolean, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectMethodNoRestrict(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle maybeBindCaller(java.lang.invoke.MemberName, java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,null,_-&gt;null&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle restrictReceiver(java.lang.invoke.MemberName, java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle restrictReceiver(java.lang.invoke.MemberName, java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandles.Lookup in(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandles.Lookup in(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup void checkField(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup void checkMethod(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup void checkMethodName(byte, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup void checkUnprivilegedlookupClass(java.lang.Class&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType MethodType()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType MethodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType MethodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType boolean canConvert(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodType boolean equals(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType boolean hasPrimitives()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType boolean isCastableTo(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType boolean isCastableTo(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType boolean isConvertibleTo(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType boolean isViewableAs(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType int checkPtype(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType int checkPtype(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType int checkPtypes(java.lang.Class&lt;?&gt;[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType int checkPtypes(java.lang.Class&lt;?&gt;[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType int parameterCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType int parameterSlotCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType int parameterSlotDepth(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType int returnSlotCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.Class&lt;?&gt; lastParameterType()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.Class&lt;?&gt; parameterType(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.Class&lt;?&gt; returnType()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.Class&lt;?&gt; rtype()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.Class&lt;?&gt;[] listToArray(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.Class&lt;?&gt;[] parameterArray()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.Class&lt;?&gt;[] ptypes()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.IndexOutOfBoundsException newIndexOutOfBoundsException(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.IndexOutOfBoundsException newIndexOutOfBoundsException(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.Invokers invokers()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType appendParameterTypes(java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType appendParameterTypes(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType basicType()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType erase()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType insertParameterTypes(int, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType insertParameterTypes(int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType makeImpl(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[], boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType makeImpl(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[], boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType replaceParameterTypes(int, int, java.lang.Class&lt;?&gt;...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType unwrapWithNoPrims(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType wrapWithPrims(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodTypeForm form()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType java.util.List&lt;java.lang.Class&lt;?&gt;&gt; parameterList()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType void MethodType_init(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType void MethodType_init(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType void checkRtype(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType void checkSlotCount(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType void setForm(java.lang.invoke.MethodTypeForm)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet boolean eq(java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null,_-&gt;true&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet int hash(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet int indexFor(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet java.lang.invoke.MethodType add(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet java.lang.invoke.MethodType get(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet java.lang.invoke.MethodType get(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet java.lang.invoke.MethodType.WeakInternSet.Entry[] newTable(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet void transfer(java.lang.invoke.MethodType.WeakInternSet.Entry[], java.lang.invoke.MethodType.WeakInternSet.Entry[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm MethodTypeForm(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm boolean hasLongPrimitives()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm boolean hasNonVoidPrimitives()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm boolean hasPrimitives()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm char unpack(long, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int argSlotToParameter(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int longPrimitiveParameterCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int longPrimitiveReturnCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int parameterCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int parameterSlotCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int parameterToArgSlot(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int primitiveParameterCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int primitiveReturnCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int returnCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm int returnSlotCount()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.Class&lt;?&gt; canonicalize(java.lang.Class&lt;?&gt;, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null,_-&gt;null&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.Class&lt;?&gt;[] canonicalizes(java.lang.Class&lt;?&gt;[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.invoke.MethodType basicType()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.invoke.MethodType canonicalize(java.lang.invoke.MethodType, int, int)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.invoke.MethodType canonicalize(java.lang.invoke.MethodType, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.invoke.MethodType erasedType()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.invoke.MethodTypeForm findForm(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm long pack(int, int, int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MutableCallSite MutableCallSite(java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MutableCallSite MutableCallSite(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MutableCallSite java.lang.invoke.MethodHandle getTarget()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.MutableCallSite void syncAll(java.lang.invoke.MutableCallSite[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.SwitchPoint boolean hasBeenInvalidated()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.SwitchPoint java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,null-&gt;null&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.SwitchPoint void invalidateAll(java.lang.invoke.SwitchPoint[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.VolatileCallSite VolatileCallSite(java.lang.invoke.MethodHandle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.VolatileCallSite VolatileCallSite(java.lang.invoke.MethodType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.WrongMethodTypeException WrongMethodTypeException()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.WrongMethodTypeException WrongMethodTypeException(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.WrongMethodTypeException WrongMethodTypeException(java.lang.String, java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.lang.invoke.WrongMethodTypeException WrongMethodTypeException(java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
</root>