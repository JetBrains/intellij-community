<root>
    <item name='java.util.AbstractCollection AbstractCollection()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractCollection T[] finishToArray(T[], java.util.Iterator&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractCollection T[] finishToArray(T[], java.util.Iterator&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractCollection T[] toArray(T[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractCollection boolean add(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractCollection boolean add(E) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractCollection boolean addAll(java.util.Collection&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractCollection boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractCollection boolean containsAll(java.util.Collection&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractCollection boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractCollection java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractList AbstractList()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList E remove(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList E set(int, E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList E set(int, E) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractList boolean add(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;true&quot;"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList boolean addAll(int, java.util.Collection&lt;? extends E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractList boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractList int indexOf(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractList int lastIndexOf(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractList java.lang.String outOfBoundsMsg(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractList java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractList java.util.ListIterator&lt;E&gt; listIterator(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractList void add(int, E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList void add(int, E) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractList.Itr Itr()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList.Itr void checkForComodification()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList.ListItr ListItr(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList.ListItr boolean hasPrevious()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList.ListItr int nextIndex()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractList.ListItr int previousIndex()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap AbstractMap()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap V get(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap V get(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap V put(K, V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap V put(K, V) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap V put(K, V) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap V remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap V remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap boolean containsKey(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap boolean containsValue(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap boolean eq(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractMap.SimpleEntry K getKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleEntry SimpleEntry(K, V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleEntry SimpleEntry(java.util.Map.Entry&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractMap.SimpleEntry V getValue()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleEntry V setValue(V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleEntry boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleEntry boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap.SimpleEntry java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractMap.SimpleImmutableEntry K getKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleImmutableEntry SimpleImmutableEntry(K, V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleImmutableEntry SimpleImmutableEntry(java.util.Map.Entry&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractMap.SimpleImmutableEntry V getValue()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleImmutableEntry V setValue(V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleImmutableEntry V setValue(V) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap.SimpleImmutableEntry boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.AbstractMap.SimpleImmutableEntry boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractMap.SimpleImmutableEntry java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractQueue AbstractQueue()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractQueue boolean add(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;true&quot;"/>
        </annotation>
    </item>
    <item name='java.util.AbstractQueue boolean addAll(java.util.Collection&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractSequentialList AbstractSequentialList()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractSequentialList boolean addAll(int, java.util.Collection&lt;? extends E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.AbstractSet AbstractSet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.AbstractSet boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.AbstractSet boolean removeAll(java.util.Collection&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList ArrayList()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList ArrayList(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList ArrayList(java.util.Collection&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList E elementData(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList T[] toArray(T[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList T[] toArray(T[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList boolean add(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;true&quot;"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList boolean addAll(int, java.util.Collection&lt;? extends E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList boolean addAll(java.util.Collection&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList boolean isEmpty()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.ArrayList int indexOf(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.ArrayList int lastIndexOf(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.ArrayList int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList java.lang.Object[] toArray()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList java.lang.String outOfBoundsMsg(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList java.util.ListIterator&lt;E&gt; listIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList java.util.ListIterator&lt;E&gt; listIterator(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList void rangeCheck(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList void rangeCheckForAdd(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList void subListRangeCheck(int, int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList void trimToSize()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList.Itr E next()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.Itr Itr()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.Itr boolean hasNext()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.Itr void checkForComodification()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.ListItr ListItr(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.ListItr boolean hasPrevious()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.ListItr int nextIndex()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.ListItr int previousIndex()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.SubList SubList(java.util.AbstractList&lt;E&gt;, int, int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.SubList SubList(java.util.AbstractList&lt;E&gt;, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList.SubList boolean addAll(int, java.util.Collection&lt;? extends E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList.SubList int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.SubList java.lang.String outOfBoundsMsg(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList.SubList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList.SubList java.util.ListIterator&lt;E&gt; listIterator(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ArrayList.SubList void checkForComodification()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.SubList void rangeCheck(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ArrayList.SubList void rangeCheckForAdd(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays Arrays()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays T[] copyOf(T[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays T[] copyOf(T[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays T[] copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays T[] copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays T[] copyOfRange(T[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays T[] copyOfRange(T[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays T[] copyOfRange(U[], int, int, java.lang.Class&lt;? extends T[]&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays T[] copyOfRange(U[], int, int, java.lang.Class&lt;? extends T[]&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays boolean deepEquals(java.lang.Object[], java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean deepEquals(java.lang.Object[], java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean deepEquals0(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays boolean equals(boolean[], boolean[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays boolean equals(boolean[], boolean[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(boolean[], boolean[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(byte[], byte[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays boolean equals(byte[], byte[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(byte[], byte[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(char[], char[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays boolean equals(char[], char[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(char[], char[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(double[], double[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays boolean equals(double[], double[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(double[], double[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(float[], float[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays boolean equals(float[], float[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(float[], float[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(int[], int[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays boolean equals(int[], int[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(int[], int[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(java.lang.Object[], java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(java.lang.Object[], java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(long[], long[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays boolean equals(long[], long[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(long[], long[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(short[], short[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays boolean equals(short[], short[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean equals(short[], short[]) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays boolean[] copyOf(boolean[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays boolean[] copyOf(boolean[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays boolean[] copyOfRange(boolean[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays boolean[] copyOfRange(boolean[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays byte[] copyOf(byte[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays byte[] copyOf(byte[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays byte[] copyOfRange(byte[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays byte[] copyOfRange(byte[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays char[] copyOf(char[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays char[] copyOf(char[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays char[] copyOfRange(char[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays char[] copyOfRange(char[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays double[] copyOf(double[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays double[] copyOf(double[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays double[] copyOfRange(double[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays double[] copyOfRange(double[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays float[] copyOf(float[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays float[] copyOf(float[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays float[] copyOfRange(float[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays float[] copyOfRange(float[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(T[], T, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(T[], T, java.util.Comparator&lt;? super T&gt;) 2'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int binarySearch(T[], int, int, T, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(T[], int, int, T, java.util.Comparator&lt;? super T&gt;) 4'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int binarySearch(byte[], byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(byte[], byte) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(byte[], int, int, byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(byte[], int, int, byte) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(char[], char)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(char[], char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(char[], int, int, char)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(char[], int, int, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(double[], double)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(double[], double) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(double[], int, int, double)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(double[], int, int, double) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(float[], float)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(float[], float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(float[], int, int, float)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(float[], int, int, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(int[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(int[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(int[], int, int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(int[], int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(java.lang.Object[], int, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(java.lang.Object[], java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(long[], int, int, long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(long[], int, int, long) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(long[], long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(long[], long) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(short[], int, int, short)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(short[], int, int, short) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch(short[], short)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch(short[], short) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int binarySearch0(T[], int, int, T, java.util.Comparator&lt;? super T&gt;) 4'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int binarySearch0(byte[], int, int, byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch0(char[], int, int, char)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch0(double[], int, int, double)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch0(float[], int, int, float)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch0(int[], int, int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch0(long[], int, int, long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int binarySearch0(short[], int, int, short)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int deepHashCode(java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int hashCode(boolean[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int hashCode(boolean[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int hashCode(byte[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int hashCode(byte[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int hashCode(char[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int hashCode(char[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int hashCode(double[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int hashCode(double[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int hashCode(float[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int hashCode(float[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int hashCode(int[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int hashCode(int[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int hashCode(java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int hashCode(long[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int hashCode(long[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int hashCode(short[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays int hashCode(short[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays int[] copyOf(int[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int[] copyOf(int[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int[] copyOfRange(int[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays int[] copyOfRange(int[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String deepToString(java.lang.Object[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String deepToString(java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(boolean[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(boolean[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(byte[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(byte[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(char[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(char[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(double[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(double[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(float[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(float[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(int[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(int[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(java.lang.Object[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(long[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(long[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(short[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.lang.String toString(short[]) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays java.util.List&lt;T&gt; asList(T...)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays java.util.List&lt;T&gt; asList(T...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays long[] copyOf(long[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays long[] copyOf(long[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays long[] copyOfRange(long[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays long[] copyOfRange(long[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays short[] copyOf(short[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays short[] copyOf(short[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays short[] copyOfRange(short[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays short[] copyOfRange(short[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void deepToString(java.lang.Object[], java.lang.StringBuilder, java.util.Set&lt;java.lang.Object[]&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays void deepToString(java.lang.Object[], java.lang.StringBuilder, java.util.Set&lt;java.lang.Object[]&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(boolean[], boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(boolean[], boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(boolean[], int, int, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(boolean[], int, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(byte[], byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(byte[], byte) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(byte[], int, int, byte)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(byte[], int, int, byte) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(char[], char)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(char[], char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(char[], int, int, char)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(char[], int, int, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(double[], double)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(double[], double) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(double[], int, int, double)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(double[], int, int, double) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(float[], float)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(float[], float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(float[], int, int, float)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(float[], int, int, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(int[], int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(int[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(int[], int, int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(int[], int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(java.lang.Object[], int, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(java.lang.Object[], int, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(java.lang.Object[], java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(java.lang.Object[], java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(long[], int, int, long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(long[], int, int, long) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(long[], long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(long[], long) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(short[], int, int, short)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(short[], int, int, short) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void fill(short[], short)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void fill(short[], short) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void legacyMergeSort(T[], int, int, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void legacyMergeSort(T[], int, int, java.util.Comparator&lt;? super T&gt;) 3'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays void legacyMergeSort(T[], java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void legacyMergeSort(T[], java.util.Comparator&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays void legacyMergeSort(java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void legacyMergeSort(java.lang.Object[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void rangeCheck(int, int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void sort(byte[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void sort(char[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void sort(double[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void sort(float[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void sort(int[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void sort(long[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void sort(short[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays void swap(java.lang.Object[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Arrays void swap(java.lang.Object[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays.ArrayList ArrayList(E[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays.ArrayList ArrayList(E[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays.ArrayList E get(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays.ArrayList T[] toArray(T[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Arrays.ArrayList int indexOf(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Arrays.ArrayList int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays.ArrayList java.lang.Object[] toArray()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Arrays.LegacyMergeSort LegacyMergeSort()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean after(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean after(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Calendar boolean before(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean before(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Calendar boolean checkDisplayNameParams(int, int, int, int, java.util.Locale, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean checkDisplayNameParams(int, int, int, int, java.util.Locale, int) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar boolean isExternallySet(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean isFieldSet(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean isFullyNormalized()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean isLenient()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean isPartiallyNormalized()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean isSet(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar boolean isWeekDateSupported()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar int aggregateStamp(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar int compareTo(java.util.Calendar) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar int getFirstDayOfWeek()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar int getMinimalDaysInFirstWeek()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar int getSetStateFields()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar int getWeekYear()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar int getWeeksInWeekYear()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar int internalGet(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar int selectFields()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar java.lang.String getDisplayName(int, int, java.util.Locale)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Calendar java.lang.String getFieldName(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar java.util.Calendar getInstance()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar java.util.Calendar getInstance(java.util.Locale)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar java.util.Calendar getInstance(java.util.Locale) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar java.util.Date getTime()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar java.util.Map&lt;java.lang.String,java.lang.Integer&gt; getDisplayNames(int, int, java.util.Locale)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Calendar java.util.Map&lt;java.lang.String,java.lang.Integer&gt; getDisplayNamesImpl(int, int, java.util.Locale)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Calendar long getMillisOf(java.util.Calendar) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar void appendValue(java.lang.StringBuilder, java.lang.String, boolean, long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Calendar void appendValue(java.lang.StringBuilder, java.lang.String, boolean, long) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar void appendValue(java.lang.StringBuilder, java.lang.String, boolean, long) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Calendar void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar void setLenient(boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Calendar void setTime(java.util.Date) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar void setUnnormalized()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Calendar void setWeekDate(int, int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_,_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Calendar void setZoneShared(boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Calendar void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Calendar.CalendarAccessControlContext CalendarAccessControlContext()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collection java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections Collections()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections EMPTY_LIST'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections EMPTY_MAP'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections EMPTY_SET'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections T get(java.util.ListIterator&lt;? extends T&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections T max(java.util.Collection&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections T max(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections T max(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections T min(java.util.Collection&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections T min(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections T min(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections T[] zeroLengthArray(java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections boolean addAll(java.util.Collection&lt;? super T&gt;, T...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections boolean disjoint(java.util.Collection&lt;?&gt;, java.util.Collection&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections boolean disjoint(java.util.Collection&lt;?&gt;, java.util.Collection&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections boolean eq(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections boolean replaceAll(java.util.List&lt;T&gt;, T, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections boolean replaceAll(java.util.List&lt;T&gt;, T, T) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections int binarySearch(java.util.List&lt;? extends T&gt;, T, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int binarySearch(java.util.List&lt;? extends T&gt;, T, java.util.Comparator&lt;? super T&gt;) 2'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections int binarySearch(java.util.List&lt;? extends java.lang.Comparable&lt;? super T&gt;&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int frequency(java.util.Collection&lt;?&gt;, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int frequency(java.util.Collection&lt;?&gt;, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections int indexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int indexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int indexedBinarySearch(java.util.List&lt;? extends T&gt;, T, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int indexedBinarySearch(java.util.List&lt;? extends java.lang.Comparable&lt;? super T&gt;&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int iteratorBinarySearch(java.util.List&lt;? extends T&gt;, T, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int iteratorBinarySearch(java.util.List&lt;? extends java.lang.Comparable&lt;? super T&gt;&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int lastIndexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections int lastIndexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.ArrayList&lt;T&gt; list(java.util.Enumeration&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections java.util.ArrayList&lt;T&gt; list(java.util.Enumeration&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Collection&lt;E&gt; checkedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Collection&lt;E&gt; checkedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Collection&lt;E&gt; checkedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Collection&lt;T&gt; synchronizedCollection(java.util.Collection&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Collection&lt;T&gt; synchronizedCollection(java.util.Collection&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Collection&lt;T&gt; synchronizedCollection(java.util.Collection&lt;T&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Collection&lt;T&gt; unmodifiableCollection(java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Collection&lt;T&gt; unmodifiableCollection(java.util.Collection&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Comparator&lt;T&gt; reverseOrder()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections java.util.Comparator&lt;T&gt; reverseOrder(java.util.Comparator&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections java.util.Comparator&lt;T&gt; reverseOrder(java.util.Comparator&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections java.util.Enumeration&lt;T&gt; emptyEnumeration()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections java.util.Enumeration&lt;T&gt; enumeration(java.util.Collection&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Iterator&lt;E&gt; singletonIterator(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Iterator&lt;T&gt; emptyIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections java.util.List&lt;E&gt; checkedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.List&lt;E&gt; checkedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.List&lt;E&gt; checkedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.List&lt;T&gt; emptyList()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections java.util.List&lt;T&gt; nCopies(int, T)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.List&lt;T&gt; singletonList(T)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.List&lt;T&gt; synchronizedList(java.util.List&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.List&lt;T&gt; synchronizedList(java.util.List&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.List&lt;T&gt; synchronizedList(java.util.List&lt;T&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.List&lt;T&gt; unmodifiableList(java.util.List&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.List&lt;T&gt; unmodifiableList(java.util.List&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.ListIterator&lt;T&gt; emptyListIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; checkedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; checkedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; checkedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; checkedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; emptyMap()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; singletonMap(K, V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; synchronizedMap(java.util.Map&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; synchronizedMap(java.util.Map&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; unmodifiableMap(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Map&lt;K,V&gt; unmodifiableMap(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Queue&lt;T&gt; asLifoQueue(java.util.Deque&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;E&gt; checkedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;E&gt; checkedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;E&gt; checkedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;E&gt; newSetFromMap(java.util.Map&lt;E,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;E&gt; newSetFromMap(java.util.Map&lt;E,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;T&gt; emptySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections java.util.Set&lt;T&gt; singleton(T)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;T&gt; synchronizedSet(java.util.Set&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;T&gt; synchronizedSet(java.util.Set&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;T&gt; synchronizedSet(java.util.Set&lt;T&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;T&gt; unmodifiableSet(java.util.Set&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.Set&lt;T&gt; unmodifiableSet(java.util.Set&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; checkedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; checkedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; checkedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; checkedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; synchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; synchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; unmodifiableSortedMap(java.util.SortedMap&lt;K,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; unmodifiableSortedMap(java.util.SortedMap&lt;K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedSet&lt;E&gt; checkedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedSet&lt;E&gt; checkedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedSet&lt;E&gt; checkedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedSet&lt;T&gt; synchronizedSortedSet(java.util.SortedSet&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedSet&lt;T&gt; synchronizedSortedSet(java.util.SortedSet&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedSet&lt;T&gt; unmodifiableSortedSet(java.util.SortedSet&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections java.util.SortedSet&lt;T&gt; unmodifiableSortedSet(java.util.SortedSet&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void copy(java.util.List&lt;? super T&gt;, java.util.List&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void copy(java.util.List&lt;? super T&gt;, java.util.List&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void fill(java.util.List&lt;? super T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void reverse(java.util.List&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void rotate(java.util.List&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void rotate1(java.util.List&lt;T&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void rotate2(java.util.List&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void shuffle(java.util.List&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void shuffle(java.util.List&lt;?&gt;, java.util.Random) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void sort(java.util.List&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void sort(java.util.List&lt;T&gt;, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void swap(java.lang.Object[], int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections void swap(java.lang.Object[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections void swap(java.util.List&lt;?&gt;, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.AsLIFOQueue AsLIFOQueue(java.util.Deque&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.AsLIFOQueue boolean add(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;true&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.AsLIFOQueue java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedCollection CheckedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedCollection CheckedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedCollection CheckedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedCollection E[] zeroLengthElementArray()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedCollection java.lang.String badElementMsg(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedCollection java.lang.String badElementMsg(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedCollection java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedCollection java.util.Collection&lt;E&gt; checkedCopyOf(java.util.Collection&lt;? extends E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedCollection java.util.Collection&lt;E&gt; checkedCopyOf(java.util.Collection&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedCollection java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedCollection void typeCheck(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.CheckedList CheckedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedList CheckedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedList CheckedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedList java.util.ListIterator&lt;E&gt; listIterator(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap CheckedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedMap CheckedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap CheckedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap CheckedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap java.lang.String badKeyMsg(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap java.lang.String badKeyMsg(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap java.lang.String badValueMsg(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap java.lang.String badValueMsg(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap void typeCheck(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet CheckedEntrySet(java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt;, java.lang.Class&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet T[] toArray(T[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean add(java.util.Map.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean add(java.util.Map.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean addAll(java.util.Collection&lt;? extends java.util.Map.Entry&lt;K,V&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean addAll(java.util.Collection&lt;? extends java.util.Map.Entry&lt;K,V&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean contains(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean containsAll(java.util.Collection&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet java.util.Collections.CheckedMap.CheckedEntrySet.CheckedEntry&lt;K,V,T&gt; checkedEntry(java.util.Map.Entry&lt;K,V&gt;, java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet.CheckedEntry CheckedEntry(java.util.Map.Entry&lt;K,V&gt;, java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet.CheckedEntry boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet.CheckedEntry java.lang.String badValueMsg(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet.CheckedEntry java.lang.String badValueMsg(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedMap.CheckedEntrySet.CheckedEntry java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedRandomAccessList CheckedRandomAccessList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedRandomAccessList CheckedRandomAccessList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedRandomAccessList CheckedRandomAccessList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedRandomAccessList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSet CheckedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedSet CheckedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSet CheckedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedMap CheckedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedSortedMap CheckedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedMap CheckedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedMap CheckedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedMap java.util.SortedMap&lt;K,V&gt; headMap(K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedMap java.util.SortedMap&lt;K,V&gt; subMap(K, K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedMap java.util.SortedMap&lt;K,V&gt; tailMap(K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedSet CheckedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CheckedSortedSet CheckedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedSet CheckedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedSet java.util.SortedSet&lt;E&gt; headSet(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedSet java.util.SortedSet&lt;E&gt; subSet(E, E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CheckedSortedSet java.util.SortedSet&lt;E&gt; tailSet(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CopiesList CopiesList(int, E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CopiesList E get(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CopiesList T[] toArray(T[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CopiesList T[] toArray(T[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CopiesList boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.CopiesList int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.CopiesList java.lang.Object[] toArray()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.CopiesList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptyEnumeration E nextElement()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyEnumeration EMPTY_ENUMERATION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptyEnumeration EmptyEnumeration()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyEnumeration boolean hasMoreElements()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyIterator E next()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyIterator EMPTY_ITERATOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptyIterator EmptyIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyIterator boolean hasNext()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyIterator void remove()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList E get(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList EmptyList()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList T[] toArray(T[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;param1&quot;"/>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList T[] toArray(T[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptyList boolean contains(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;false&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptyList boolean containsAll(java.util.Collection&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptyList boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptyList boolean isEmpty()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList int hashCode()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList java.lang.Object readResolve()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList java.lang.Object[] toArray()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptyList java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyList java.util.ListIterator&lt;E&gt; listIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyListIterator E previous()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyListIterator EMPTY_ITERATOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptyListIterator EmptyListIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyListIterator boolean hasPrevious()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyListIterator int nextIndex()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyListIterator int previousIndex()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyListIterator void add(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyListIterator void add(E) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptyListIterator void set(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyListIterator void set(E) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptyMap EmptyMap()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap V get(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptyMap V get(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptyMap boolean containsKey(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;false&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap boolean containsKey(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptyMap boolean containsValue(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;false&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap boolean containsValue(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptyMap boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptyMap boolean isEmpty()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap int hashCode()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap java.lang.Object readResolve()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptyMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptySet EmptySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptySet T[] toArray(T[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;param1&quot;"/>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptySet T[] toArray(T[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptySet boolean contains(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;false&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptySet boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.EmptySet boolean containsAll(java.util.Collection&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptySet boolean isEmpty()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptySet int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptySet java.lang.Object readResolve()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.EmptySet java.lang.Object[] toArray()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.EmptySet java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.ReverseComparator REVERSE_ORDER'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.ReverseComparator ReverseComparator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.ReverseComparator int compare(java.lang.Comparable&lt;java.lang.Object&gt;, java.lang.Comparable&lt;java.lang.Object&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.ReverseComparator java.lang.Object readResolve()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.ReverseComparator2 ReverseComparator2(java.util.Comparator&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.ReverseComparator2 boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.SetFromMap SetFromMap(java.util.Map&lt;E,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SetFromMap java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SetFromMap java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SetFromMap void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SingletonList E get(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonList SingletonList(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonList boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.SingletonList int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonList java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SingletonMap SingletonMap(K, V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonMap V get(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.SingletonMap V get(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.SingletonMap boolean containsKey(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.SingletonMap boolean containsValue(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.SingletonMap boolean isEmpty()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonMap int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonSet SingletonSet(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonSet boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.SingletonSet int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SingletonSet java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedCollection SynchronizedCollection(java.util.Collection&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedCollection SynchronizedCollection(java.util.Collection&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedCollection SynchronizedCollection(java.util.Collection&lt;E&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedCollection java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedCollection java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedCollection void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedList SynchronizedList(java.util.List&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedList SynchronizedList(java.util.List&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedList SynchronizedList(java.util.List&lt;E&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedList java.lang.Object readResolve()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedMap SynchronizedMap(java.util.Map&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedMap SynchronizedMap(java.util.Map&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedMap SynchronizedMap(java.util.Map&lt;K,V&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedMap java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedMap void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedRandomAccessList SynchronizedRandomAccessList(java.util.List&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedRandomAccessList SynchronizedRandomAccessList(java.util.List&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedRandomAccessList SynchronizedRandomAccessList(java.util.List&lt;E&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedRandomAccessList java.lang.Object writeReplace()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedRandomAccessList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedSet SynchronizedSet(java.util.Set&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedSet SynchronizedSet(java.util.Set&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedSet SynchronizedSet(java.util.Set&lt;E&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedSortedMap SynchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedSortedMap SynchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedSortedMap SynchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedSortedMap java.util.SortedMap&lt;K,V&gt; headMap(K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedSortedMap java.util.SortedMap&lt;K,V&gt; subMap(K, K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedSortedMap java.util.SortedMap&lt;K,V&gt; tailMap(K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedSortedSet SynchronizedSortedSet(java.util.SortedSet&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedSortedSet SynchronizedSortedSet(java.util.SortedSet&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedSortedSet SynchronizedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.SynchronizedSortedSet java.util.SortedSet&lt;E&gt; headSet(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedSortedSet java.util.SortedSet&lt;E&gt; subSet(E, E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.SynchronizedSortedSet java.util.SortedSet&lt;E&gt; tailSet(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection UnmodifiableCollection(java.util.Collection&lt;? extends E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection UnmodifiableCollection(java.util.Collection&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean add(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean add(E) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean addAll(java.util.Collection&lt;? extends E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean addAll(java.util.Collection&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean removeAll(java.util.Collection&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean retainAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection boolean retainAll(java.util.Collection&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableCollection void clear()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableList E remove(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableList E set(int, E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableList E set(int, E) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableList UnmodifiableList(java.util.List&lt;? extends E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableList UnmodifiableList(java.util.List&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableList boolean addAll(int, java.util.Collection&lt;? extends E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableList boolean addAll(int, java.util.Collection&lt;? extends E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableList java.lang.Object readResolve()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableList java.util.ListIterator&lt;E&gt; listIterator(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableList void add(int, E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableList void add(int, E) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap UnmodifiableMap(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap UnmodifiableMap(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap V put(K, V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_,_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap V put(K, V) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap V put(K, V) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap V remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap V remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap void clear()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet T[] toArray(T[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet UnmodifiableEntrySet(java.util.Set&lt;? extends java.util.Map.Entry&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet UnmodifiableEntrySet(java.util.Set&lt;? extends java.util.Map.Entry&lt;? extends K,? extends V&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet boolean contains(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet boolean containsAll(java.util.Collection&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry UnmodifiableEntry(java.util.Map.Entry&lt;? extends K,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry V setValue(V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;fail&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry V setValue(V) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableRandomAccessList UnmodifiableRandomAccessList(java.util.List&lt;? extends E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableRandomAccessList UnmodifiableRandomAccessList(java.util.List&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableRandomAccessList java.lang.Object writeReplace()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableRandomAccessList java.util.List&lt;E&gt; subList(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableSet UnmodifiableSet(java.util.Set&lt;? extends E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableSet UnmodifiableSet(java.util.Set&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedMap UnmodifiableSortedMap(java.util.SortedMap&lt;K,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedMap UnmodifiableSortedMap(java.util.SortedMap&lt;K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedMap java.util.SortedMap&lt;K,V&gt; headMap(K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedMap java.util.SortedMap&lt;K,V&gt; subMap(K, K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedMap java.util.SortedMap&lt;K,V&gt; tailMap(K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedSet UnmodifiableSortedSet(java.util.SortedSet&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedSet UnmodifiableSortedSet(java.util.SortedSet&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedSet java.util.SortedSet&lt;E&gt; headSet(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedSet java.util.SortedSet&lt;E&gt; subSet(E, E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Collections.UnmodifiableSortedSet java.util.SortedSet&lt;E&gt; tailSet(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.ConcurrentModificationException ConcurrentModificationException()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ConcurrentModificationException ConcurrentModificationException(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ConcurrentModificationException ConcurrentModificationException(java.lang.String, java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.ConcurrentModificationException ConcurrentModificationException(java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Date Date(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date Date(long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Date boolean after(java.util.Date) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date boolean before(java.util.Date) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Date boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Date int compareTo(java.util.Date) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date java.lang.Object clone()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Date java.lang.String toGMTString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date java.lang.StringBuilder convertToAbbr(java.lang.StringBuilder, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;!null&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Date java.lang.StringBuilder convertToAbbr(java.lang.StringBuilder, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date java.lang.StringBuilder convertToAbbr(java.lang.StringBuilder, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date long getMillisOf(java.util.Date) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date long parse(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Date void setTime(long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Date void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.GregorianCalendar boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.GregorianCalendar boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.GregorianCalendar boolean isCutoverYear(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.GregorianCalendar boolean isWeekDateSupported()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.GregorianCalendar int getMinimum(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.GregorianCalendar int getRolledValue(int, int, int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.GregorianCalendar java.util.Date getGregorianChange()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.GregorianCalendar void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.GregorianCalendar void setGregorianChange(java.util.Date) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap EMPTY_TABLE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap HashMap(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap V get(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap V get(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap V getForNullKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap V put(K, V)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap V put(K, V) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap V putForNullKey(V)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap V remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap V remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap boolean containsKey(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap boolean containsNullValue()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap boolean containsValue(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap boolean isEmpty()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap float loadFactor()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap int capacity()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap int hash(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap int indexFor(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap int roundUpToPowerOf2(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.HashMap java.util.HashMap.Entry&lt;K,V&gt; getEntry(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap java.util.HashMap.Entry&lt;K,V&gt; getEntry(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap java.util.HashMap.Entry&lt;K,V&gt; removeEntryForKey(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap java.util.HashMap.Entry&lt;K,V&gt; removeEntryForKey(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap java.util.HashMap.Entry&lt;K,V&gt; removeMapping(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;null&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap java.util.HashMap.Entry&lt;K,V&gt; removeMapping(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap java.util.Iterator&lt;K&gt; newKeyIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap java.util.Iterator&lt;V&gt; newValueIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; newEntryIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.HashMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.HashMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet0()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.HashMap void init()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap void putAllForCreate(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap void transfer(java.util.HashMap.Entry[], boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap.Entry Entry(int, K, V, java.util.HashMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Entry K getKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Entry V getValue()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Entry V setValue(V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Entry boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Entry boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap.Entry java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.HashMap.Entry void recordAccess(java.util.HashMap&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Entry void recordAccess(java.util.HashMap&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap.Entry void recordRemoval(java.util.HashMap&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Entry void recordRemoval(java.util.HashMap&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap.EntryIterator EntryIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.EntrySet EntrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.EntrySet boolean contains(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.EntrySet boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap.EntrySet boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap.EntrySet int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.HashIterator HashIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.HashIterator boolean hasNext()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.HashIterator java.util.HashMap.Entry&lt;K,V&gt; nextEntry()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Holder Holder()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.KeyIterator KeyIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.KeySet KeySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.KeySet boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.HashMap.KeySet int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.ValueIterator ValueIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Values Values()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.HashMap.Values int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable Hashtable(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable V get(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Hashtable V get(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable V put(K, V)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Hashtable V put(K, V) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable V put(K, V) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable V remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Hashtable V remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable boolean containsKey(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Hashtable boolean isEmpty()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable int hash(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable java.util.Enumeration&lt;K&gt; keys()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable java.util.Enumeration&lt;T&gt; getEnumeration(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable java.util.Enumeration&lt;V&gt; elements()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable java.util.Iterator&lt;T&gt; getIterator(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable void putAll(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable void reconstitutionPut(java.util.Hashtable.Entry&lt;K,V&gt;[], K, V) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable void reconstitutionPut(java.util.Hashtable.Entry&lt;K,V&gt;[], K, V) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable void reconstitutionPut(java.util.Hashtable.Entry&lt;K,V&gt;[], K, V) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable.Entry Entry(int, K, V, java.util.Hashtable.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.Entry K getKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.Entry V getValue()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.Entry V setValue(V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.Entry V setValue(V) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable.Entry boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.Entry boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Hashtable.Entry java.lang.Object clone()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable.Entry java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Hashtable.EntrySet EntrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.EntrySet boolean contains(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.EntrySet boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Hashtable.EntrySet boolean remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.EntrySet boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Hashtable.EntrySet int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.Enumerator Enumerator(int, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.Enumerator T nextElement()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.Enumerator boolean hasMoreElements()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.Holder Holder()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.KeySet KeySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.KeySet int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.KeySet java.util.Iterator&lt;K&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.ValueCollection ValueCollection()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.ValueCollection int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Hashtable.ValueCollection java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap IdentityHashMap()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap IdentityHashMap(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap IdentityHashMap(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.IdentityHashMap V get(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap V get(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap V put(K, V)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap V put(K, V) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap V remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap V remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap boolean containsKey(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap boolean containsMapping(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap boolean containsMapping(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap boolean containsValue(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap boolean containsValue(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap boolean isEmpty()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap boolean removeMapping(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap boolean removeMapping(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap int capacity(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap int nextKeyIndex(int, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap java.lang.Object maskNull(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;!null-&gt;!null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap java.lang.Object maskNull(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap java.lang.Object unmaskNull(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;null-&gt;null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap void init(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.IdentityHashMap void putForCreate(K, V) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.IdentityHashMap void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.IdentityHashMap.EntryIterator EntryIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.EntryIterator.Entry Entry(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.EntryIterator.Entry K getKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap.EntryIterator.Entry V getValue()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.EntryIterator.Entry boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap.EntryIterator.Entry java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.IdentityHashMap.EntryIterator.Entry void checkIndexForEntryUse()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.EntrySet EntrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.EntrySet T[] toArray(T[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.IdentityHashMap.EntrySet boolean contains(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.EntrySet boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap.EntrySet boolean remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.EntrySet boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap.EntrySet int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.EntrySet java.lang.Object[] toArray()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;new&quot;"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.IdentityHashMap.IdentityHashMapIterator IdentityHashMapIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.IdentityHashMapIterator boolean hasNext()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.KeyIterator K next()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap.KeyIterator KeyIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.KeySet KeySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.KeySet int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.KeySet java.util.Iterator&lt;K&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.IdentityHashMap.ValueIterator ValueIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.Values Values()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.Values boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.IdentityHashMap.Values int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.IdentityHashMap.Values java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Iterator E next()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Iterator boolean hasNext()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.LinkedHashMap LinkedHashMap(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.LinkedHashMap V get(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.LinkedHashMap boolean containsValue(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.LinkedHashMap boolean removeEldestEntry(java.util.Map.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;false&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.LinkedHashMap boolean removeEldestEntry(java.util.Map.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.LinkedHashMap java.util.Iterator&lt;K&gt; newKeyIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.LinkedHashMap java.util.Iterator&lt;V&gt; newValueIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.LinkedHashMap java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; newEntryIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.LinkedHashMap void transfer(java.util.HashMap.Entry[], boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.LinkedHashMap.Entry Entry(int, K, V, java.util.HashMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.LinkedHashMap.Entry void addBefore(java.util.LinkedHashMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.LinkedHashMap.Entry void recordAccess(java.util.HashMap&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.LinkedHashMap.Entry void recordRemoval(java.util.HashMap&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.LinkedHashMap.EntryIterator EntryIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.LinkedHashMap.KeyIterator KeyIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.LinkedHashMap.LinkedHashIterator LinkedHashIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.LinkedHashMap.LinkedHashIterator boolean hasNext()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.LinkedHashMap.LinkedHashIterator java.util.LinkedHashMap.Entry&lt;K,V&gt; nextEntry()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.LinkedHashMap.ValueIterator ValueIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.List java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Locale Locale(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale Locale(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale Locale(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale Locale(java.lang.String, java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale Locale(java.lang.String, java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale Locale(java.lang.String, java.lang.String, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Locale java.lang.String formatList(java.lang.String[], java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_,null-&gt;!null;_,null,_-&gt;!null&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Locale java.lang.String formatList(java.lang.String[], java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.lang.String formatList(java.lang.String[], java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Locale java.lang.String formatList(java.lang.String[], java.lang.String, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Locale java.lang.String getDisplayCountry(java.util.Locale)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;!null&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Locale java.lang.String getDisplayLanguage(java.util.Locale)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;!null&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Locale java.lang.String getDisplayScript(java.util.Locale)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;!null&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Locale java.lang.String getDisplayString(java.lang.String, java.util.Locale, int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,null,_-&gt;!null&quot;"/>
        </annotation>
    </item>
    <item name='java.util.Locale java.lang.String getDisplayString(java.lang.String, java.util.Locale, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.lang.String getExtension(char)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Locale java.lang.String getISO3Code(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,null-&gt;!null&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Locale java.lang.String getISO3Code(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.lang.String getUnicodeLocaleType(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Locale java.lang.String toLanguageTag()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.lang.String[] getISO2Table(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.lang.String[] getISOCountries()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.lang.String[] getISOLanguages()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.util.Locale getDefault(java.util.Locale.Category) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.util.Locale getInstance(java.lang.String, java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.util.Locale getInstance(java.lang.String, java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale java.util.Locale getInstance(java.lang.String, java.lang.String, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale void initDefault(java.util.Locale.Category) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale void setDefault(java.util.Locale) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale void setDefault(java.util.Locale.Category, java.util.Locale) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale void setDefault(java.util.Locale.Category, java.util.Locale) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder addUnicodeLocaleAttribute(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder clear()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder clearExtensions()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder removeUnicodeLocaleAttribute(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder setExtension(char, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder setLanguage(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder setLanguageTag(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder setLocale(java.util.Locale)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder setLocale(java.util.Locale) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder setRegion(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder setScript(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder setUnicodeLocaleKeyword(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Builder java.util.Locale.Builder setVariant(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Cache java.util.Locale createObject(java.util.Locale.LocaleKey)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;_-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.Cache java.util.Locale createObject(java.util.Locale.LocaleKey) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Locale.LocaleKey boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.Locale.LocaleKey int hashCode()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Locale.LocaleNameGetter LocaleNameGetter()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.NoSuchElementException NoSuchElementException()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.NoSuchElementException NoSuchElementException(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Properties char toHex(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Properties java.lang.String getProperty(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties java.lang.String loadConvert(char[], int, int, char[])'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_,_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties java.lang.String loadConvert(char[], int, int, char[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties java.lang.String saveConvert(java.lang.String, boolean, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties java.lang.String saveConvert(java.lang.String, boolean, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void list(java.io.PrintStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void load0(java.util.Properties.LineReader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void loadFromXML(java.io.InputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void store(java.io.OutputStream, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void store(java.io.Writer, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void store0(java.io.BufferedWriter, java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void storeToXML(java.io.OutputStream, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void storeToXML(java.io.OutputStream, java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void writeComments(java.io.BufferedWriter, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties void writeComments(java.io.BufferedWriter, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Properties.LineReader LineReader(java.io.InputStream)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Properties.LineReader LineReader(java.io.Reader)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Random long initialScramble(long)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Random void nextBytes(byte[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Random void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Random void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.Set java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap K ceilingKey(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap K firstKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap K floorKey(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap K higherKey(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap K key(java.util.TreeMap.Entry&lt;K,?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap K key(java.util.TreeMap.Entry&lt;K,?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap K keyOrNull(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;null-&gt;null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap K keyOrNull(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap K lastKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap K lowerKey(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap TreeMap()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap TreeMap(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap TreeMap(java.util.SortedMap&lt;K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap V get(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap V put(K, V)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap V remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap boolean colorOf(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;null-&gt;true&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap boolean colorOf(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap boolean containsValue(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap boolean valEquals(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap int computeRedLevel(int)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap int size()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap java.util.Comparator&lt;? super K&gt; comparator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap java.util.Iterator&lt;K&gt; descendingKeyIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap java.util.Iterator&lt;K&gt; keyIterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; ceilingEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; exportEntry(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; exportEntry(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; firstEntry()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; floorEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; higherEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; lastEntry()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; lowerEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; pollFirstEntry()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.Map.Entry&lt;K,V&gt; pollLastEntry()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.NavigableMap&lt;K,V&gt; headMap(K, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap java.util.NavigableMap&lt;K,V&gt; subMap(K, boolean, K, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_,_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap java.util.NavigableMap&lt;K,V&gt; tailMap(K, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; buildFromSorted(int, int, int, int, java.util.Iterator, java.io.ObjectInputStream, V)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getCeilingEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getEntry(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getEntryUsingComparator(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getFirstEntry()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getFloorEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getHigherEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getLastEntry()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getLowerEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; leftOf(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;null-&gt;null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; leftOf(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; parentOf(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;null-&gt;null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; parentOf(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; predecessor(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;null-&gt;null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; predecessor(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; rightOf(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;null-&gt;null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; rightOf(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; successor(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;null-&gt;null&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; successor(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap void clear()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap void deleteEntry(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap void fixAfterDeletion(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap void fixAfterInsertion(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap void rotateLeft(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap void rotateRight(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap void setColor(java.util.TreeMap.Entry&lt;K,V&gt;, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;param1&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap void setColor(java.util.TreeMap.Entry&lt;K,V&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.AscendingSubMap java.util.Iterator&lt;K&gt; descendingKeyIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.AscendingSubMap java.util.Iterator&lt;K&gt; keyIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.AscendingSubMap java.util.NavigableMap&lt;K,V&gt; headMap(K, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.AscendingSubMap java.util.NavigableMap&lt;K,V&gt; subMap(K, boolean, K, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_,_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.AscendingSubMap java.util.NavigableMap&lt;K,V&gt; tailMap(K, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.AscendingSubMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.AscendingSubMap.AscendingEntrySetView AscendingEntrySetView()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.AscendingSubMap.AscendingEntrySetView java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.DescendingKeyIterator DescendingKeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.DescendingKeyIterator DescendingKeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.DescendingSubMap java.util.Comparator&lt;? super K&gt; comparator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.DescendingSubMap java.util.Iterator&lt;K&gt; descendingKeyIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.DescendingSubMap java.util.Iterator&lt;K&gt; keyIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.DescendingSubMap java.util.NavigableMap&lt;K,V&gt; headMap(K, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.DescendingSubMap java.util.NavigableMap&lt;K,V&gt; subMap(K, boolean, K, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_,_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.DescendingSubMap java.util.NavigableMap&lt;K,V&gt; tailMap(K, boolean)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.DescendingSubMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.DescendingSubMap.DescendingEntrySetView DescendingEntrySetView()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.DescendingSubMap.DescendingEntrySetView java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.Entry Entry(K, V, java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.Entry K getKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.Entry V getValue()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.Entry V setValue(V)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.Entry boolean equals(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.Entry boolean equals(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.Entry java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.EntryIterator EntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.EntryIterator EntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.EntrySet EntrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.EntrySet boolean contains(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.EntrySet boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.EntrySet boolean remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.EntrySet boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.KeyIterator KeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.KeyIterator KeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.KeySet E pollFirst()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.KeySet E pollLast()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.KeySet KeySet(java.util.NavigableMap&lt;E,java.lang.Object&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.KeySet java.util.SortedSet&lt;E&gt; headSet(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.KeySet java.util.SortedSet&lt;E&gt; subSet(E, E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.KeySet java.util.SortedSet&lt;E&gt; tailSet(E)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap K ceilingKey(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap K floorKey(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap K higherKey(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap K lowerKey(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap V get(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap V remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.Map.Entry&lt;K,V&gt; ceilingEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.Map.Entry&lt;K,V&gt; firstEntry()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.Map.Entry&lt;K,V&gt; floorEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.Map.Entry&lt;K,V&gt; higherEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.Map.Entry&lt;K,V&gt; lastEntry()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.Map.Entry&lt;K,V&gt; lowerEntry(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.Map.Entry&lt;K,V&gt; pollFirstEntry()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.Map.Entry&lt;K,V&gt; pollLastEntry()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.TreeMap.Entry&lt;K,V&gt; absCeiling(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.TreeMap.Entry&lt;K,V&gt; absFloor(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.TreeMap.Entry&lt;K,V&gt; absHighFence()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.TreeMap.Entry&lt;K,V&gt; absHigher(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.TreeMap.Entry&lt;K,V&gt; absHighest()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.TreeMap.Entry&lt;K,V&gt; absLowFence()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.TreeMap.Entry&lt;K,V&gt; absLower(K)'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap java.util.TreeMap.Entry&lt;K,V&gt; absLowest()'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.DescendingSubMapEntryIterator DescendingSubMapEntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.DescendingSubMapEntryIterator DescendingSubMapEntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator DescendingSubMapKeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator DescendingSubMapKeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.EntrySetView EntrySetView()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.EntrySetView boolean contains(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.EntrySetView boolean contains(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.EntrySetView boolean remove(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;null-&gt;false&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.EntrySetView boolean remove(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.SubMapEntryIterator SubMapEntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.SubMapEntryIterator SubMapEntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.SubMapIterator SubMapIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.SubMapIterator SubMapIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.SubMapIterator boolean hasNext()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.SubMapIterator java.util.TreeMap.Entry&lt;K,V&gt; nextEntry()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.SubMapIterator java.util.TreeMap.Entry&lt;K,V&gt; prevEntry()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.SubMapKeyIterator SubMapKeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.NavigableSubMap.SubMapKeyIterator SubMapKeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.PrivateEntryIterator PrivateEntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.PrivateEntryIterator PrivateEntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.PrivateEntryIterator boolean hasNext()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.PrivateEntryIterator java.util.TreeMap.Entry&lt;K,V&gt; nextEntry()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.PrivateEntryIterator java.util.TreeMap.Entry&lt;K,V&gt; prevEntry()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="mutates" val="&quot;this&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.SubMap K firstKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.SubMap K lastKey()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.SubMap SubMap()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.SubMap java.lang.Object readResolve()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;new&quot;"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.SubMap java.util.Comparator&lt;? super K&gt; comparator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.SubMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; headMap(K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; headMap(K) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; subMap(K, K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_,_-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; subMap(K, K) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; subMap(K, K) 1'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; tailMap(K)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val val="&quot;_-&gt;fail&quot;"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; tailMap(K) 0'>
        <annotation name='org.jetbrains.annotations.Nullable'/>
    </item>
    <item name='java.util.TreeMap.ValueIterator ValueIterator(java.util.TreeMap.Entry&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.ValueIterator ValueIterator(java.util.TreeMap.Entry&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.TreeMap.Values Values()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.TreeMap.Values java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="value" val="&quot;-&gt;new&quot;"/>
            <val name="pure" val="true"/>
        </annotation>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>