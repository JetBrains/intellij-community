interface Map<K, V> {
  @SafeVarargs
    @SuppressWarnings("varargs")
    static <K, V> Map<K, V> ofEntries(Entry<? extends K, ? extends V>... entries) {
    return null;
  }

  static <K, V> Entry<K, V> entry(K k, V v) {
        return null;
    }

  interface Entry<K, V> {}
}
class Performance {

  private static final Map<String, String> translation = Map.<String, String>ofEntries(
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg"),
    Map.entry("a","b"),
    Map.entry("c","b"),
    Map.entry("d","b"),
    Map.entry("e","f"),
    Map.entry("g","gg")
  );
}