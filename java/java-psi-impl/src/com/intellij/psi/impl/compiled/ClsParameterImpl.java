/*
 * Copyright 2000-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.intellij.psi.impl.compiled;

import com.intellij.openapi.project.DumbService;
import com.intellij.psi.*;
import com.intellij.psi.codeStyle.JavaCodeStyleManager;
import com.intellij.psi.codeStyle.VariableKind;
import com.intellij.psi.impl.ElementPresentationUtil;
import com.intellij.psi.impl.cache.TypeInfo;
import com.intellij.psi.impl.java.stubs.JavaStubElementTypes;
import com.intellij.psi.impl.java.stubs.PsiParameterStub;
import com.intellij.psi.impl.java.stubs.impl.PsiParameterStubImpl;
import com.intellij.psi.impl.source.SourceTreeToPsiMap;
import com.intellij.psi.impl.source.tree.TreeElement;
import com.intellij.psi.search.LocalSearchScope;
import com.intellij.psi.search.SearchScope;
import com.intellij.psi.stubs.StubElement;
import com.intellij.ui.RowIcon;
import com.intellij.util.IncorrectOperationException;
import com.intellij.util.PlatformIcons;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;

public class ClsParameterImpl extends ClsRepositoryPsiElement<PsiParameterStub> implements PsiParameter {
  private PsiTypeElement myType = null;
  private String myName;
  private volatile String myMirrorName = null;

  public ClsParameterImpl(@NotNull PsiParameterStub stub) {
    super(stub);
  }

  @Override
  public PsiIdentifier getNameIdentifier() {
    return null;
  }

  @Override
  public String getName() {
    if (myName == null) {
      if (DumbService.getInstance(getProject()).isDumb()) {
        return null;
      }

      ClsMethodImpl method = (ClsMethodImpl)getDeclarationScope();
      PsiMethod sourceMethod = method.getSourceMirrorMethod();
      if (sourceMethod == null) {
        final PsiParameterStubImpl parameterStub = (PsiParameterStubImpl) getStub();
        if (!parameterStub.isAutoGeneratedName()) {
          return parameterStub.getName();
        }
        return null;
      }
      assert sourceMethod != method;
      myName = sourceMethod.getParameterList().getParameters()[getIndex()].getName();
    }
    return myName;
  }

  @Override
  public PsiElement setName(@NotNull String name) throws IncorrectOperationException {
    throw new IncorrectOperationException(CAN_NOT_MODIFY_MESSAGE);
  }

  @Override
  @NotNull
  public PsiTypeElement getTypeElement() {
    synchronized (LAZY_BUILT_LOCK) {
      if (myType == null) {
        PsiParameterStub stub = getStub();
        String typeText = TypeInfo.createTypeText(stub.getType(false));
        assert typeText != null : stub;
        myType = new ClsTypeElementImpl(this, typeText, ClsTypeElementImpl.VARIANCE_NONE);
      }
      return myType;
    }
  }

  @Override
  @NotNull
  public PsiType getType() {
    return getTypeElement().getType();
  }

  @Override
  @NotNull
  public PsiModifierList getModifierList() {
    final StubElement<PsiModifierList> child = getStub().findChildStubByType(JavaStubElementTypes.MODIFIER_LIST);
    assert child != null;
    return child.getPsi();
  }

  @Override
  public boolean hasModifierProperty(@NotNull String name) {
    return getModifierList().hasModifierProperty(name);
  }

  @Override
  public PsiExpression getInitializer() {
    return null;
  }

  @Override
  public boolean hasInitializer() {
    return false;
  }

  @Override
  public Object computeConstantValue() {
    return null;
  }

  @Override
  public void normalizeDeclaration() throws IncorrectOperationException {
  }

  @Override
  public void appendMirrorText(int indentLevel, @NotNull StringBuilder buffer) {
    PsiAnnotation[] annotations = getModifierList().getAnnotations();
    for (PsiAnnotation annotation : annotations) {
      appendText(annotation, indentLevel, buffer);
      buffer.append(' ');
    }
    appendText(getTypeElement(), indentLevel, buffer, " ");
    buffer.append(getMirrorName());
  }

  private String getMirrorName() {
    String mirrorName = myMirrorName;
    if (mirrorName == null) {
      // avoid calculation of nice parameter name under lock as we might need indices for coolness
      // and latter might produce deadlock, see IDEA-99248
      mirrorName = calcNiceParameterName();
      synchronized (LAZY_BUILT_LOCK) {
        if (myMirrorName == null) {
          myMirrorName = mirrorName;
        }
      }
    }
    return mirrorName;
  }

  private String calcNiceParameterName() {
    @NonNls String name;

    final PsiParameterStubImpl stub = (PsiParameterStubImpl)getStub();
    if (!stub.isAutoGeneratedName() || DumbService.getInstance(getProject()).isDumb()) {
      name = stub.getName();
    }
    else {
      JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(getProject());
      String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, getType()).names;

      name = "p";
      if (nameSuggestions.length > 0) {
        name = nameSuggestions[0];
      }

      PsiParameter[] parameters = ((PsiParameterList) getParent()).getParameters();
      AttemptsLoop:
      while (true) {
        for (PsiParameter parameter : parameters) {
          if (parameter == this) break AttemptsLoop;
          String name1 = ((ClsParameterImpl) parameter).getMirrorName();
          if (name.equals(name1)) {
            name = nextName(name);
            continue AttemptsLoop;
          }
        }
      }
    }

    assert name != null : stub;
    return name;
  }

  private static String nextName(String name) {
    int count = 0;
    while (true) {
      if (count == name.length()) break;
      char c = name.charAt(name.length() - count - 1);
      if ('0' <= c && c <= '9') {
        count++;
      }
      else {
        break;
      }
    }

    try {
      int n = count > 0 ? Integer.parseInt(name.substring(name.length() - count)) : 0;
      n++;
      return name.substring(0, name.length() - count) + n;
    }
    catch (NumberFormatException e) {
      assert false : e.getMessage();
      return null;
    }
  }

  @Override
  public void setMirror(@NotNull TreeElement element) throws InvalidMirrorException {
    setMirrorCheckingType(element, null);

    PsiParameter mirror = SourceTreeToPsiMap.treeToPsiNotNull(element);
    setMirror(getModifierList(), mirror.getModifierList());
    setMirror(getTypeElement(), mirror.getTypeElement());
  }

  @Override
  public void accept(@NotNull PsiElementVisitor visitor) {
    if (visitor instanceof JavaElementVisitor) {
      ((JavaElementVisitor)visitor).visitParameter(this);
    }
    else {
      visitor.visitElement(this);
    }
  }

  @Override
  @NotNull
  public PsiElement getDeclarationScope() {
    // only method parameters exist in compiled code
    return getParent().getParent();
  }

  private int getIndex() {
    final PsiParameterStub stub = getStub();
    return stub.getParentStub().getChildrenStubs().indexOf(stub);
  }

  @Override
  public boolean isVarArgs() {
    final PsiParameterList paramList = (PsiParameterList)getParent();
    final PsiMethod method = (PsiMethod)paramList.getParent();
    return method.isVarArgs() && getIndex() == paramList.getParametersCount() - 1;
  }

  @Override
  protected boolean isVisibilitySupported() {
    return true;
  }

  @Override
  public Icon getElementIcon(final int flags) {
    final RowIcon baseIcon = createLayeredIcon(this, PlatformIcons.PARAMETER_ICON, 0);
    return ElementPresentationUtil.addVisibilityIcon(this, flags, baseIcon);
  }

  @Override
  @NotNull
  public SearchScope getUseScope() {
    return new LocalSearchScope(getDeclarationScope());
  }

  @Override
  public PsiType getTypeNoResolve() {
    return getType();
  }

  @Override
  public String toString() {
    return "PsiParameter";
  }
}
