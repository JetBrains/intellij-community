/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

  /* It's an automatically generated code. Do not modify it. */
package com.intellij.lang.java.lexer;

import com.intellij.lexer.DocCommentTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_JavaDocLexer.flex</tt>
 */
class _JavaDocLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT_DATA_START = 2;
  public static final int COMMENT_DATA = 4;
  public static final int TAG_DOC_SPACE = 6;
  public static final int PARAM_TAG_SPACE = 8;
  public static final int DOC_TAG_VALUE = 10;
  public static final int DOC_TAG_VALUE_IN_PAREN = 12;
  public static final int DOC_TAG_VALUE_IN_LTGT = 14;
  public static final int INLINE_TAG_NAME = 16;
  public static final int CODE_TAG = 18;
  public static final int CODE_TAG_SPACE = 20;
  public static final int SNIPPET_TAG_COMMENT_DATA_UNTIL_COLON = 22;
  public static final int SNIPPET_TAG_BODY_DATA = 24;
  public static final int SNIPPET_ATTRIBUTE_VALUE_DOUBLE_QUOTES = 26;
  public static final int SNIPPET_ATTRIBUTE_VALUE_SINGLE_QUOTES = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14624 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\6\14\1\55\3\11\1\56\u0381\11");

  /* The ZZ_CMAP_Y table has 3008 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\1\32\1\1\2\13\1\30\1\1\1\33\1"+
    "\25\5\13\1\34\1\35\1\36\1\1\1\37\1\13\1\1\1\40\5\13\1\41\1\42\1\43\1\13\1"+
    "\30\1\44\1\13\1\45\1\46\1\1\1\13\1\47\1\30\3\1\1\13\1\50\4\1\1\51\2\13\1\52"+
    "\1\1\1\53\1\16\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\16\1\62\1\63\1\55\1\56"+
    "\1\64\1\1\1\65\1\1\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\16\1\72\1\73\1\55\1"+
    "\56\1\70\1\1\1\61\1\16\1\42\1\74\1\75\1\76\1\77\1\1\1\71\1\1\1\100\1\101\1"+
    "\37\1\56\1\52\1\1\1\102\1\16\1\1\1\103\1\37\1\56\1\104\1\1\1\60\1\16\1\105"+
    "\1\101\1\37\1\13\1\106\1\60\1\107\1\16\1\43\1\110\1\111\1\13\1\112\1\113\3"+
    "\1\1\25\2\13\1\114\1\113\3\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1\71"+
    "\3\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\126\1\1\1\127\1\130\1\131"+
    "\1\132\1\1\2\13\1\133\2\13\1\134\24\13\1\135\1\136\2\13\1\135\2\13\1\137\1"+
    "\140\1\14\3\13\1\140\3\13\1\30\2\1\1\13\1\1\5\13\1\141\1\25\45\13\1\142\1"+
    "\13\1\25\1\30\4\13\1\143\1\47\1\144\1\16\1\13\1\16\1\13\1\16\1\144\1\71\3"+
    "\13\1\145\1\1\1\146\4\1\5\13\1\147\1\150\1\13\1\151\4\13\1\41\1\13\1\152\3"+
    "\1\1\13\1\153\1\154\2\13\1\155\1\13\1\77\3\1\1\13\1\113\3\13\1\154\4\1\1\156"+
    "\5\1\1\110\2\13\1\145\1\157\3\1\1\160\1\13\1\161\1\43\2\13\1\41\1\1\2\13\1"+
    "\145\1\1\1\40\1\43\1\13\1\153\1\47\5\1\1\162\1\163\14\13\4\1\21\13\1\141\2"+
    "\13\1\141\1\164\1\13\1\153\3\13\1\165\1\166\1\167\1\124\1\166\2\1\1\170\1"+
    "\126\1\71\1\171\1\1\1\172\1\1\1\124\2\13\4\1\1\173\1\174\1\175\1\176\1\177"+
    "\1\1\2\13\1\47\147\1\2\13\1\152\2\13\1\152\10\13\1\200\1\201\2\13\1\133\3"+
    "\13\1\27\1\1\1\13\1\113\4\202\4\1\1\126\35\1\1\203\1\1\1\204\1\205\1\25\4"+
    "\13\1\206\1\25\4\13\1\134\1\110\1\13\1\152\1\25\4\13\1\152\1\1\1\13\1\30\3"+
    "\1\1\13\40\1\133\13\1\41\4\1\136\13\1\30\1\1\10\13\1\124\4\1\2\13\1\153\20"+
    "\13\1\124\1\13\1\207\1\1\2\13\1\152\1\126\1\13\1\153\5\13\2\1\1\210\1\211"+
    "\5\13\1\212\1\13\1\152\1\147\3\1\1\210\1\213\1\13\1\31\1\214\3\13\1\145\1"+
    "\211\2\13\1\145\3\1\1\215\1\43\1\13\1\41\1\13\1\113\1\1\1\13\1\124\1\51\2"+
    "\13\1\31\1\126\1\1\1\216\1\217\2\13\1\47\1\1\1\220\1\1\1\13\1\221\3\13\1\222"+
    "\1\223\1\224\1\30\1\66\1\225\1\226\1\202\2\13\1\134\1\41\7\13\1\31\1\1\72"+
    "\13\1\145\1\13\1\227\2\13\1\155\20\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230"+
    "\1\56\1\231\1\232\6\13\1\16\1\1\1\160\25\13\1\153\1\1\4\13\1\211\2\13\1\147"+
    "\2\1\1\124\3\1\1\233\1\40\1\1\1\100\1\216\7\13\1\124\1\171\1\1\1\25\1\234"+
    "\1\25\1\30\1\235\4\13\1\152\1\236\1\237\1\163\1\1\1\240\1\13\1\14\1\241\2"+
    "\153\2\1\7\13\1\30\4\1\3\13\1\154\20\1\1\13\1\124\3\13\1\71\2\1\2\13\1\40"+
    "\1\13\1\30\2\13\1\41\1\13\1\153\2\13\1\242\1\243\2\1\11\13\1\153\1\1\2\13"+
    "\1\242\1\13\1\155\2\13\1\147\3\13\1\145\11\1\23\13\1\113\1\13\1\41\1\147\11"+
    "\1\1\244\2\13\1\245\1\13\1\41\1\13\1\113\1\13\1\152\4\1\1\13\1\246\1\13\1"+
    "\41\1\13\1\77\4\1\3\13\1\247\4\1\1\71\1\250\1\13\1\145\2\1\1\13\1\124\1\13"+
    "\1\124\2\1\1\123\1\13\1\154\1\1\3\13\1\41\1\13\1\41\1\13\1\31\1\13\1\16\6"+
    "\1\4\13\1\47\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\147\4\1\1\160\2\13"+
    "\2\1\1\13\1\47\1\1\1\160\1\13\1\113\2\1\2\13\1\251\1\160\2\13\1\31\1\252\1"+
    "\253\2\1\1\13\1\22\1\155\5\1\1\254\1\255\1\47\2\13\1\152\2\1\1\73\1\55\1\56"+
    "\1\70\1\1\1\256\1\16\11\1\3\13\1\154\1\257\3\1\3\13\1\1\1\260\13\1\2\13\1"+
    "\152\2\1\1\261\2\1\3\13\1\1\1\171\3\1\2\13\1\30\5\1\1\13\1\77\30\1\4\13\1"+
    "\1\1\126\20\1\1\262\2\13\1\263\1\1\1\264\2\13\1\265\3\1\3\13\1\47\20\1\1\56"+
    "\1\13\1\152\1\1\1\71\2\1\1\211\1\13\7\1\1\266\2\13\1\71\1\267\53\1\71\13\1"+
    "\77\6\1\6\13\1\152\1\1\14\13\1\145\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43"+
    "\13\1\47\1\13\1\152\7\1\1\13\1\153\1\1\3\13\1\1\1\145\1\1\1\160\1\270\1\13"+
    "\67\1\4\13\1\154\1\71\3\1\1\160\4\1\1\16\1\1\76\13\1\124\1\1\57\13\1\31\20"+
    "\1\21\13\1\152\5\1\30\13\1\155\20\1\6\13\1\30\1\124\1\47\1\77\66\1\5\13\1"+
    "\216\3\13\1\144\1\271\1\272\1\273\3\13\1\274\1\275\1\13\1\276\1\277\1\37\24"+
    "\13\1\300\1\13\1\37\1\134\1\13\1\134\1\13\1\216\1\13\1\216\1\152\1\13\1\152"+
    "\1\13\1\56\1\13\1\56\1\13\1\220\3\1\14\13\1\154\3\1\4\13\1\145\113\1\1\273"+
    "\1\13\1\301\1\302\1\303\1\304\1\305\1\306\1\307\1\155\1\310\1\155\24\1\55"+
    "\13\1\113\2\1\103\13\1\154\15\13\1\153\150\13\1\16\123\13\1\71\1\1\41\13\1"+
    "\153\36\1");

  /* The ZZ_CMAP_A table has 3216 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\40\1\41\1\42\1\1\22\0\1\2\1\0\1\43\1\15\1\4\2\0\1\44\1\13\1\14"+
    "\1\10\1\0\1\16\1\5\1\12\1\7\12\3\1\46\1\0\1\24\1\45\1\25\1\0\1\17\32\4\1\11"+
    "\1\0\1\11\1\0\1\4\1\0\1\21\1\4\1\27\1\31\1\32\3\4\1\34\2\4\1\33\1\23\1\37"+
    "\1\30\1\20\1\4\1\22\1\36\1\35\6\4\1\26\1\0\1\6\7\0\1\41\14\0\4\4\4\0\1\4\12"+
    "\0\1\4\4\0\1\4\5\0\27\4\1\0\12\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\1\0\5\4"+
    "\1\0\2\4\2\0\4\4\1\0\1\4\6\0\1\4\1\0\3\4\1\0\1\4\1\0\4\4\1\0\23\4\1\0\13\4"+
    "\10\0\6\4\1\0\26\4\2\0\1\4\6\0\10\4\7\0\14\4\5\0\3\4\30\0\1\4\22\0\6\4\1\0"+
    "\1\4\17\0\2\4\7\0\2\4\12\0\3\4\2\0\2\4\1\0\16\4\15\0\11\4\13\0\1\4\30\0\6"+
    "\4\4\0\2\4\4\0\1\4\5\0\6\4\4\0\1\4\11\0\1\4\3\0\1\4\7\0\11\4\7\0\5\4\1\0\10"+
    "\4\6\0\26\4\3\0\1\4\2\0\1\4\7\0\11\4\4\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\1\4\3\0\4\4\3\0\1\4\20\0\1\4\15\0\2\4\1\0\5\4\7\0\2\4\10\0\6\4\4\0\2\4\1"+
    "\0\2\4\1\0\2\4\1\0\2\4\17\0\4\4\1\0\1\4\3\0\3\4\20\0\11\4\1\0\2\4\1\0\2\4"+
    "\1\0\5\4\3\0\1\4\2\0\1\4\20\0\1\4\7\0\1\4\13\0\10\4\2\0\1\4\3\0\1\4\1\0\6"+
    "\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\17\0\1"+
    "\4\13\0\10\4\1\0\2\4\10\0\3\4\5\0\1\4\4\0\10\4\1\0\6\4\1\0\5\4\3\0\1\4\3\0"+
    "\2\4\15\0\13\4\2\0\1\4\6\0\3\4\10\0\1\4\5\0\22\4\3\0\10\4\1\0\11\4\1\0\1\4"+
    "\2\0\7\4\11\0\1\4\1\0\2\4\13\0\1\4\1\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4"+
    "\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\0\2\4\11\0\1\4"+
    "\2\0\5\4\1\0\1\4\25\0\14\4\1\0\24\4\13\0\5\4\22\0\7\4\4\0\4\4\3\0\1\4\3\0"+
    "\2\4\7\0\3\4\4\0\15\4\14\0\1\4\1\0\6\4\1\0\1\4\5\0\1\4\2\0\13\4\1\0\15\4\1"+
    "\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\16\4\2\0\6\4\2\0\15\4\2\0\14\4\3\0\17\4\1\0\6\4\23\0\1\4\3\0\2\4\3\0\10\4"+
    "\10\0\5\4\2\0\22\4\1\0\1\4\5\0\17\4\1\0\16\4\2\0\5\4\13\0\14\4\13\0\1\4\15"+
    "\0\7\4\7\0\16\4\15\0\2\4\11\0\4\4\1\0\4\4\3\0\2\4\11\0\10\4\1\0\1\4\1\0\1"+
    "\4\1\0\1\4\1\0\6\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\14\0\2"+
    "\41\12\0\1\4\14\0\1\4\15\0\1\4\2\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6"+
    "\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\1\0\5\4\6"+
    "\0\4\4\3\0\2\4\14\0\7\4\1\0\7\4\6\0\3\4\11\0\11\4\7\0\5\4\2\0\5\4\3\0\7\4"+
    "\6\0\3\4\12\0\2\4\13\0\11\4\2\0\27\4\2\0\7\4\1\0\3\4\1\0\4\4\1\0\4\4\10\0"+
    "\1\4\11\0\6\4\3\0\1\4\1\0\1\4\2\0\5\4\1\0\12\4\12\0\5\4\1\0\3\4\1\0\10\4\4"+
    "\0\7\4\3\0\1\4\3\0\2\4\1\0\1\4\3\0\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0\3\4\3"+
    "\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4\4\0\5\4\3\0\5\4\5\0\1\4\1\0\10\4\1\0\5\4\1"+
    "\0\1\4\1\0\2\4\1\0\2\4\1\0\12\4\3\0\2\4\13\0\13\4\4\0\1\4\6\0\12\4\2\0\6\4"+
    "\2\0\6\4\2\0\6\4\2\0\3\4\3\0\14\4\1\0\16\4\1\0\2\4\1\0\5\4\4\0\10\4\1\0\5"+
    "\4\12\0\6\4\2\0\1\4\1\0\14\4\1\0\2\4\3\0\1\4\2\0\4\4\1\0\2\4\12\0\10\4\6\0"+
    "\6\4\1\0\3\4\1\0\12\4\3\0\1\4\12\0\4\4\25\0\1\4\1\0\1\4\3\0\7\4\1\0\1\4\1"+
    "\0\4\4\1\0\17\4\1\0\2\4\14\0\3\4\7\0\4\4\11\0\2\4\1\0\1\4\20\0\4\4\4\0\1\4"+
    "\12\0\10\4\7\0\1\4\5\0\1\4\13\0\10\4\2\0\4\4\6\0\7\4\1\0\2\4\1\0\5\4\6\0\1"+
    "\4\11\0\10\4\5\0\3\4\2\0\1\4\2\0\2\4\2\0\4\4\1\0\14\4\1\0\1\4\1\0\7\4\1\0"+
    "\21\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\14\4\1\0\4\4\1\0\5\4\1\0\1\4\3\0\14\4\2"+
    "\0\10\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\12\4\1\0\4\4\1\0\1\4\1\0\1\4\6\0\1\4\4"+
    "\0\1\4\1\0\1\4\1\0\1\4\1\0\3\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\1\0\1\4\2\0\4\4\1\0\7\4\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12"+
    "\4\1\0\5\4\1\0\3\4\1\0\5\4\1\0\5\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\3\1\1\2\1\3\1\4\2\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\12\1\20\1\1\1\21\1\22\2\21\1\23"+
    "\1\12\1\24\1\25\1\26\1\12\1\27\1\6\1\3"+
    "\1\30\1\31\1\12\1\3\1\4\1\32\1\12\1\3"+
    "\1\4\1\0\1\33\1\0\7\34\1\35\14\34\1\36"+
    "\2\34\2\37\4\34\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u0249\0\u02be\0\u0249\0\u0297\0\u02e5\0\u0249"+
    "\0\u030c\0\u0333\0\u035a\0\u0381\0\u03a8\0\u0249\0\u0249\0\u0249"+
    "\0\u0249\0\u0249\0\u03cf\0\u0249\0\u03f6\0\u0249\0\u041d\0\u041d"+
    "\0\u0297\0\u0249\0\u0444\0\u0297\0\u0249\0\u0249\0\u0249\0\u0249"+
    "\0\u046b\0\u0492\0\u0249\0\u0249\0\u04b9\0\u04e0\0\u04b9\0\u0249"+
    "\0\u0507\0\u052e\0\u0507\0\u0555\0\u0249\0\u0297\0\u057c\0\u05a3"+
    "\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u0249\0\u068d\0\u06b4"+
    "\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec"+
    "\0\u0813\0\u083a\0\u05ca\0\u0861\0\u0888\0\u057c\0\u05ca\0\u08af"+
    "\0\u08d6\0\u08fd\0\u0924\0\u05ca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\20\1\21\1\22\36\20\1\23\2\24\3\23\1\25"+
    "\1\23\1\26\6\23\1\27\6\23\1\30\11\23\1\24"+
    "\1\20\1\24\5\23\1\24\1\31\3\23\1\25\1\23"+
    "\1\26\15\23\1\30\11\23\1\24\1\20\1\31\4\23"+
    "\1\20\2\32\3\20\1\25\1\20\1\22\27\20\1\32"+
    "\1\20\1\32\5\20\2\33\5\20\1\22\27\20\1\33"+
    "\1\20\1\33\4\20\1\23\2\34\2\35\1\23\1\25"+
    "\1\23\1\26\2\35\1\36\1\23\1\37\1\40\1\23"+
    "\4\35\1\41\2\23\11\35\1\34\1\20\1\34\4\23"+
    "\1\20\2\24\2\35\3\20\1\22\2\35\1\20\1\42"+
    "\1\20\1\40\1\20\4\35\3\20\11\35\1\24\1\20"+
    "\1\24\10\20\1\43\3\20\1\22\7\20\4\43\1\20"+
    "\1\44\1\20\11\43\17\20\1\22\6\20\1\45\27\20"+
    "\1\46\1\47\1\50\3\46\1\25\1\46\1\51\15\46"+
    "\1\30\11\46\1\47\1\20\1\47\5\46\1\47\1\50"+
    "\3\46\1\25\1\46\1\51\27\46\1\47\1\20\1\47"+
    "\4\46\1\52\2\24\1\52\1\53\1\52\1\25\1\52"+
    "\1\54\7\52\4\53\3\52\11\53\1\24\1\52\1\24"+
    "\1\55\1\56\1\57\1\60\1\61\2\62\3\61\1\63"+
    "\17\61\1\64\11\61\1\24\1\61\1\62\4\61\1\65"+
    "\2\66\3\65\1\67\31\65\1\24\1\65\1\66\1\70"+
    "\3\65\1\71\2\72\3\71\1\73\31\71\1\24\1\71"+
    "\1\72\1\71\1\70\2\71\57\0\1\74\45\0\1\75"+
    "\1\76\37\0\2\24\35\0\1\24\1\0\1\24\4\0"+
    "\1\77\2\0\15\77\1\100\17\77\1\0\1\77\1\0"+
    "\4\77\2\0\1\31\37\0\1\31\5\0\2\32\35\0"+
    "\1\32\1\0\1\32\5\0\2\33\35\0\1\33\1\0"+
    "\1\33\5\0\2\34\35\0\1\34\1\0\1\34\7\0"+
    "\2\35\4\0\2\35\5\0\4\35\3\0\11\35\12\0"+
    "\3\43\4\0\1\43\5\0\4\43\3\0\11\43\6\0"+
    "\1\43\1\101\2\0\3\101\1\0\11\101\1\102\6\101"+
    "\1\103\3\101\1\104\2\101\1\105\1\101\1\0\1\101"+
    "\1\0\4\101\1\0\2\47\35\0\1\47\1\0\1\47"+
    "\7\0\2\53\13\0\4\53\3\0\11\53\7\0\6\61"+
    "\1\0\17\61\1\0\11\61\1\0\7\61\2\62\3\61"+
    "\1\0\17\61\1\0\11\61\1\24\1\61\1\62\4\61"+
    "\40\65\1\0\2\65\1\0\4\65\2\66\35\65\1\24"+
    "\1\65\1\66\1\0\3\65\40\71\1\0\3\71\1\0"+
    "\3\71\2\72\35\71\1\24\1\71\1\72\1\71\1\0"+
    "\2\71\10\0\1\106\36\0\1\77\2\0\35\77\1\0"+
    "\1\77\1\0\5\77\2\0\16\77\1\107\16\77\1\0"+
    "\1\77\1\0\4\77\1\101\2\0\3\101\1\0\31\101"+
    "\1\0\1\101\1\0\5\101\2\0\3\101\1\0\12\101"+
    "\1\110\16\101\1\0\1\101\1\0\5\101\2\0\3\101"+
    "\1\0\21\101\1\111\7\101\1\0\1\101\1\0\5\101"+
    "\2\0\3\101\1\0\25\101\1\112\3\101\1\0\1\101"+
    "\1\0\5\101\2\0\3\101\1\0\30\101\1\113\1\0"+
    "\1\101\1\0\4\101\1\77\2\0\17\77\1\114\15\77"+
    "\1\0\1\77\1\0\4\77\1\101\2\0\3\101\1\0"+
    "\13\101\1\115\15\101\1\0\1\101\1\0\5\101\2\0"+
    "\3\101\1\0\22\101\1\116\6\101\1\0\1\101\1\0"+
    "\5\101\2\0\3\101\1\0\26\101\1\117\2\101\1\0"+
    "\1\101\1\0\5\101\2\0\3\101\1\0\25\101\1\120"+
    "\3\101\1\0\1\101\1\0\4\101\1\77\2\0\16\77"+
    "\1\121\16\77\1\0\1\77\1\0\4\77\1\101\2\0"+
    "\3\101\1\0\12\101\1\122\16\101\1\0\1\101\1\0"+
    "\5\101\2\0\3\101\1\0\23\101\1\123\5\101\1\0"+
    "\1\101\1\0\5\101\2\0\3\101\1\0\23\101\1\124"+
    "\5\101\1\0\1\101\1\0\5\101\2\0\3\101\1\0"+
    "\11\101\1\125\17\101\1\0\1\101\1\0\4\101\1\77"+
    "\2\0\20\77\1\126\14\77\1\0\1\77\1\0\4\77"+
    "\1\101\2\0\3\101\1\0\14\101\1\127\14\101\1\0"+
    "\1\101\1\0\5\101\2\0\3\101\1\0\13\101\1\130"+
    "\15\101\1\0\1\101\1\0\5\101\2\0\3\101\1\0"+
    "\11\101\1\131\17\101\1\0\1\101\1\0\5\101\2\0"+
    "\3\101\1\0\12\101\1\132\16\101\1\0\1\101\1\0"+
    "\5\101\2\0\3\101\1\0\23\101\1\133\5\101\1\0"+
    "\1\101\1\0\5\101\2\0\3\101\1\0\24\101\1\123"+
    "\4\101\1\0\1\101\1\0\5\101\2\0\3\101\1\0"+
    "\26\101\1\134\2\101\1\0\1\101\1\0\4\101";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2379];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\5\1\5\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\4\11\2\1\2\11\3\1\1\11\3\1\1\0"+
    "\1\11\1\0\7\1\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean myJdk15Enabled;
  private DocCommentTokenTypes myTokenTypes;
  private int mySnippetBracesLevel = 0;

  public _JavaDocLexer(boolean isJdk15Enabled, DocCommentTokenTypes tokenTypes) {
    this((java.io.Reader)null);
    myJdk15Enabled = isJdk15Enabled;
    myTokenTypes = tokenTypes;
  }

  public boolean checkAhead(char c) {
    if (zzMarkedPos >= zzBuffer.length()) return false;
    return zzBuffer.charAt(zzMarkedPos) == c;
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzAtEOF = false;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _JavaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return myTokenTypes.badCharacter();
            } 
            // fall through
          case 33: break;
          case 2: 
            { yybegin(COMMENT_DATA); return myTokenTypes.commentData();
            } 
            // fall through
          case 34: break;
          case 3: 
            { return myTokenTypes.space();
            } 
            // fall through
          case 35: break;
          case 4: 
            { yybegin(COMMENT_DATA); return myTokenTypes.inlineTagEnd();
            } 
            // fall through
          case 36: break;
          case 5: 
            { if (checkAhead('@')) {
    yybegin(INLINE_TAG_NAME);
    return myTokenTypes.inlineTagStart();
  }
  else {
    yybegin(COMMENT_DATA);
    return myTokenTypes.inlineTagStart();
  }
            } 
            // fall through
          case 37: break;
          case 6: 
            { return myTokenTypes.commentData();
            } 
            // fall through
          case 38: break;
          case 7: 
            { if (checkAhead('<') || checkAhead('\"')) yybegin(COMMENT_DATA);
  else if (checkAhead('\u007b')) yybegin(COMMENT_DATA);  // lbrace - there's a error in JLex when typing lbrace directly
  else yybegin(DOC_TAG_VALUE);
  return myTokenTypes.space();
            } 
            // fall through
          case 39: break;
          case 8: 
            { yybegin(DOC_TAG_VALUE); return myTokenTypes.space();
            } 
            // fall through
          case 40: break;
          case 9: 
            { yybegin(COMMENT_DATA); return myTokenTypes.space();
            } 
            // fall through
          case 41: break;
          case 10: 
            { return myTokenTypes.tagValueToken();
            } 
            // fall through
          case 42: break;
          case 11: 
            { yybegin(DOC_TAG_VALUE_IN_PAREN); return myTokenTypes.tagValueLParen();
            } 
            // fall through
          case 43: break;
          case 12: 
            { return myTokenTypes.tagValueSharp();
            } 
            // fall through
          case 44: break;
          case 13: 
            { return myTokenTypes.tagValueComma();
            } 
            // fall through
          case 45: break;
          case 14: 
            { if (myJdk15Enabled) {
    yybegin(DOC_TAG_VALUE_IN_LTGT);
    return myTokenTypes.tagValueLT();
  }
  else {
    yybegin(COMMENT_DATA);
    return myTokenTypes.commentData();
  }
            } 
            // fall through
          case 46: break;
          case 15: 
            { yybegin(DOC_TAG_VALUE); return myTokenTypes.tagValueRParen();
            } 
            // fall through
          case 47: break;
          case 16: 
            { yybegin(COMMENT_DATA); return myTokenTypes.tagValueGT();
            } 
            // fall through
          case 48: break;
          case 17: 
            { yybegin(CODE_TAG); return myTokenTypes.commentData();
            } 
            // fall through
          case 49: break;
          case 18: 
            { yybegin(CODE_TAG); return myTokenTypes.space();
            } 
            // fall through
          case 50: break;
          case 19: 
            { yybegin(SNIPPET_TAG_COMMENT_DATA_UNTIL_COLON); return myTokenTypes.commentData();
            } 
            // fall through
          case 51: break;
          case 20: 
            { return myTokenTypes.commentLeadingAsterisks();
            } 
            // fall through
          case 52: break;
          case 21: 
            { yybegin(SNIPPET_ATTRIBUTE_VALUE_DOUBLE_QUOTES); return myTokenTypes.tagValueQuote();
            } 
            // fall through
          case 53: break;
          case 22: 
            { yybegin(SNIPPET_ATTRIBUTE_VALUE_SINGLE_QUOTES); return myTokenTypes.tagValueQuote();
            } 
            // fall through
          case 54: break;
          case 23: 
            { yybegin(SNIPPET_TAG_BODY_DATA); return myTokenTypes.tagValueColon();
            } 
            // fall through
          case 55: break;
          case 24: 
            { if (mySnippetBracesLevel > 0) {
          mySnippetBracesLevel--;
          return myTokenTypes.commentData();
        } else {
          yybegin(COMMENT_DATA);
          return myTokenTypes.inlineTagEnd();
        }
            } 
            // fall through
          case 56: break;
          case 25: 
            { mySnippetBracesLevel++; return myTokenTypes.commentData();
            } 
            // fall through
          case 57: break;
          case 26: 
            { yybegin(SNIPPET_TAG_COMMENT_DATA_UNTIL_COLON); return myTokenTypes.tagValueQuote();
            } 
            // fall through
          case 58: break;
          case 27: 
            { return myTokenTypes.commentEnd();
            } 
            // fall through
          case 59: break;
          case 28: 
            { yybegin(TAG_DOC_SPACE); return myTokenTypes.tagName();
            } 
            // fall through
          case 60: break;
          case 29: 
            { yybegin(COMMENT_DATA_START); return myTokenTypes.commentStart();
            } 
            // fall through
          case 61: break;
          case 30: 
            { yybegin(CODE_TAG_SPACE); return myTokenTypes.tagName();
            } 
            // fall through
          case 62: break;
          case 31: 
            { yybegin(PARAM_TAG_SPACE); return myTokenTypes.tagName();
            } 
            // fall through
          case 63: break;
          case 32: 
            { yybegin(SNIPPET_TAG_COMMENT_DATA_UNTIL_COLON); return myTokenTypes.tagName();
            } 
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
