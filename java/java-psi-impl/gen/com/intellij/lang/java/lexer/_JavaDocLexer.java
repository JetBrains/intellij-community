/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

  /* It's an automatically generated code. Do not modify it. */
package com.intellij.lang.java.lexer;

import com.intellij.lexer.DocCommentTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_JavaDocLexer.flex</tt>
 */
class _JavaDocLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT_DATA_START = 2;
  public static final int COMMENT_DATA = 4;
  public static final int TAG_DOC_SPACE = 6;
  public static final int PARAM_TAG_SPACE = 8;
  public static final int DOC_TAG_VALUE = 10;
  public static final int DOC_TAG_VALUE_IN_PAREN = 12;
  public static final int DOC_TAG_VALUE_IN_LTGT = 14;
  public static final int INLINE_TAG_NAME = 16;
  public static final int CODE_TAG = 18;
  public static final int CODE_TAG_SPACE = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 12784 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\21\21\1\57\1\60\13\21\1\61\10\21\123\25\1\62\7\25\1\63\1"+
    "\64\37\21\1\25\1\64\u0702\21");

  /* The ZZ_CMAP_Y table has 3392 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\17\2\7\1\21\3\7\1\21\71\7\1\22\1\7\1\23\1\0\1\24\1\25\20\0\1"+
    "\26\1\16\1\27\1\30\2\7\1\31\11\7\1\32\21\7\1\23\1\33\23\7\1\0\1\34\3\7\1\21"+
    "\1\35\1\34\4\7\1\36\10\0\3\7\2\37\2\0\1\40\2\0\5\7\1\37\3\0\1\41\1\34\13\7"+
    "\1\42\1\0\1\43\1\41\1\0\1\44\2\0\1\45\3\7\3\0\1\46\12\7\1\47\1\0\1\35\2\0"+
    "\1\33\3\7\1\37\1\50\1\17\2\7\1\47\1\17\1\51\1\52\2\0\3\7\1\52\10\0\1\45\1"+
    "\24\12\0\1\53\6\7\1\54\2\0\1\52\1\7\1\23\1\0\2\34\1\46\1\55\1\56\2\7\1\45"+
    "\1\57\1\54\1\0\1\27\1\0\1\60\1\23\1\0\1\61\1\40\1\46\1\62\1\56\2\7\1\45\1"+
    "\63\1\23\3\0\1\64\2\0\1\65\1\0\1\46\1\32\1\31\2\7\1\45\1\66\1\54\2\0\1\52"+
    "\1\0\1\23\1\0\1\35\1\0\1\46\1\55\1\56\2\7\1\45\1\66\1\54\3\0\1\60\1\23\1\0"+
    "\1\35\1\0\1\67\1\70\1\71\1\72\1\73\1\70\1\7\1\23\2\0\1\52\4\0\1\35\1\46\1"+
    "\26\1\45\2\7\1\45\1\74\1\54\3\0\2\23\3\0\1\46\1\26\1\45\2\7\1\45\1\74\1\54"+
    "\3\0\1\27\1\23\1\0\1\75\1\0\1\46\1\26\1\45\4\7\1\76\1\0\1\27\2\0\1\23\2\0"+
    "\1\33\1\46\1\7\1\21\1\33\2\7\1\31\1\42\1\21\7\0\1\34\5\7\1\77\1\36\1\21\7"+
    "\0\1\100\1\101\1\53\1\34\1\102\1\103\1\77\1\20\1\104\2\0\1\53\4\0\1\52\7\0"+
    "\1\7\1\34\3\7\1\24\3\0\1\24\16\0\5\7\1\37\1\0\1\36\2\0\1\47\1\16\1\105\1\41"+
    "\1\106\1\7\1\23\1\27\2\0\4\7\1\32\1\20\5\7\1\107\51\7\1\71\1\21\1\71\5\7\1"+
    "\71\4\7\1\71\1\21\1\71\1\7\1\21\7\7\1\71\10\7\1\37\4\0\2\7\2\0\12\7\1\24\1"+
    "\0\1\34\114\7\1\55\2\7\1\34\2\7\1\37\11\7\1\70\1\52\1\0\1\7\1\26\1\23\1\0"+
    "\2\7\1\23\1\0\2\7\1\23\1\0\1\7\1\26\1\52\1\0\6\7\1\61\3\0\1\36\1\73\10\0\13"+
    "\7\1\0\5\7\1\110\10\7\1\47\1\0\3\7\1\24\6\0\3\7\1\47\1\24\1\0\5\7\1\61\2\0"+
    "\1\34\7\0\2\7\1\21\1\0\6\7\1\24\11\0\1\36\13\0\1\46\5\7\1\61\1\0\1\46\1\61"+
    "\6\0\1\111\3\7\1\52\1\41\1\0\1\33\4\7\1\47\3\0\4\7\1\61\4\0\1\46\1\0\1\33"+
    "\3\7\1\47\15\0\1\112\1\113\1\0\30\7\10\0\42\7\2\47\4\7\2\47\1\7\1\114\3\7"+
    "\1\47\6\7\1\26\1\104\1\115\1\24\1\116\1\61\1\7\1\24\1\115\1\24\5\0\1\117\1"+
    "\0\1\36\1\52\1\0\1\51\3\0\1\35\1\36\2\0\1\7\1\24\3\7\1\37\10\0\1\120\1\33"+
    "\1\42\1\121\1\25\1\122\1\7\1\123\1\46\1\124\2\0\5\7\1\52\116\0\5\7\1\21\5"+
    "\7\1\21\20\7\1\24\1\125\1\126\1\0\4\7\1\32\1\20\7\7\1\36\2\0\2\7\1\21\1\0"+
    "\10\21\11\0\1\36\72\0\1\46\3\0\1\34\1\23\1\121\1\24\1\34\11\7\1\21\1\46\1"+
    "\34\12\7\1\107\1\46\4\7\1\47\1\34\12\7\1\21\2\0\3\7\1\37\6\0\170\7\1\47\11"+
    "\0\71\7\1\24\6\0\21\7\1\24\10\0\5\7\1\47\41\7\1\24\2\7\1\0\1\126\2\0\5\7\1"+
    "\21\1\0\1\36\3\7\1\0\12\7\4\0\1\36\1\7\1\33\14\7\1\127\1\61\1\0\1\7\1\37\11"+
    "\0\1\7\1\130\1\107\2\7\1\37\2\0\1\52\6\7\1\61\1\0\1\33\5\7\1\61\7\0\1\33\1"+
    "\40\1\0\1\33\2\7\1\47\1\0\2\7\1\21\3\0\3\7\1\24\1\53\5\7\1\37\2\0\1\36\6\0"+
    "\5\7\1\52\2\0\1\107\1\61\2\0\2\7\1\21\1\17\6\7\1\105\1\121\1\110\2\0\1\131"+
    "\1\7\1\37\1\65\1\0\3\132\1\0\2\21\22\0\4\7\1\37\3\0\64\7\1\61\1\0\2\7\1\21"+
    "\1\111\5\7\1\61\40\0\55\7\1\47\15\7\1\23\4\0\1\21\1\0\1\111\1\133\1\7\1\45"+
    "\1\21\1\104\1\134\15\7\1\23\3\0\1\111\54\7\1\47\2\0\10\7\1\33\6\7\5\0\1\7"+
    "\1\24\6\0\1\73\2\0\1\46\3\0\1\35\1\26\20\7\1\24\1\51\3\0\1\34\2\7\1\62\1\34"+
    "\2\7\1\37\1\41\12\7\1\21\3\33\1\65\1\113\3\0\1\7\1\74\2\7\1\21\2\7\1\135\1"+
    "\7\1\47\1\7\1\47\4\0\17\7\1\37\10\0\6\7\1\24\41\0\3\7\1\24\6\7\1\52\5\0\3"+
    "\7\1\21\2\0\3\7\1\37\6\0\3\7\1\47\4\7\1\61\1\7\1\121\5\0\23\7\1\47\54\0\1"+
    "\47\1\45\4\7\1\32\1\136\2\7\1\47\25\0\2\7\1\47\1\0\3\7\1\23\10\0\7\7\1\41"+
    "\10\0\1\52\1\0\1\74\1\34\2\7\1\61\5\0\3\7\1\24\20\0\6\7\1\47\1\0\2\7\1\47"+
    "\1\0\2\7\1\37\21\0\11\7\1\52\66\0\1\111\6\7\11\0\1\111\5\7\4\0\3\7\1\52\2"+
    "\0\1\111\3\7\1\21\13\0\1\111\5\7\1\37\1\0\1\137\27\0\5\7\1\37\52\0\55\7\1"+
    "\21\22\0\14\7\1\37\63\0\5\7\1\21\72\0\7\7\1\52\130\0\10\7\1\24\1\0\1\52\7"+
    "\0\1\111\1\7\14\0\1\23\77\0\12\7\1\26\10\7\1\26\1\140\1\112\1\7\1\141\1\74"+
    "\7\7\1\32\1\142\2\26\3\7\1\143\1\104\1\33\1\45\51\7\1\47\3\7\1\45\2\7\1\107"+
    "\3\7\1\107\2\7\1\26\3\7\1\26\2\7\1\21\3\7\1\21\3\7\1\45\3\7\1\45\2\7\1\107"+
    "\1\61\6\0\1\74\3\7\1\100\1\34\1\107\1\144\1\120\1\145\1\100\1\114\1\100\2"+
    "\107\1\64\1\7\1\31\1\7\1\61\1\146\1\31\1\7\1\61\50\0\32\7\1\21\5\0\106\7\1"+
    "\24\1\0\33\7\1\47\74\0");

  /* The ZZ_CMAP_A table has 824 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\35\1\36\1\1\2\0\1\2\2\0\1\14\1\4\3\0\1\12\1\13\1\10\1\0\1"+
    "\15\1\5\1\3\1\7\12\3\1\5\1\0\1\23\1\0\1\24\1\0\1\16\22\4\1\11\1\0\1\11\1\0"+
    "\1\4\1\0\1\20\1\4\1\26\1\30\1\31\3\4\1\33\2\4\1\32\1\22\1\4\1\27\1\17\1\4"+
    "\1\21\1\4\1\34\6\4\1\25\1\0\1\6\7\0\1\35\4\0\4\4\4\0\1\4\12\0\1\4\2\0\7\4"+
    "\1\0\2\4\4\0\4\4\6\0\5\4\7\0\1\4\1\0\1\4\1\0\5\4\1\0\2\4\6\0\1\4\1\0\3\4\1"+
    "\0\1\4\1\0\4\4\1\0\13\4\1\0\1\4\2\0\6\4\1\0\7\4\1\0\1\4\15\0\4\4\10\0\1\4"+
    "\12\0\6\4\1\0\1\4\7\0\2\4\3\0\3\4\2\0\2\4\1\0\6\4\5\0\11\4\6\0\2\4\6\0\1\4"+
    "\3\0\1\4\13\0\6\4\3\0\1\4\2\0\5\4\2\0\2\4\2\0\6\4\1\0\1\4\3\0\2\4\4\0\2\4"+
    "\1\0\5\4\4\0\3\4\4\0\2\4\1\0\2\4\1\0\2\4\2\0\4\4\1\0\1\4\3\0\3\4\3\0\1\4\1"+
    "\0\2\4\1\0\3\4\3\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\0\3\4\1\0\2\4\5\0\3\4\2\0\1\4\2\0\1\4\1\0\2\4\5\0\2\4\1\0\1"+
    "\4\2\0\2\4\1\0\1\4\2\0\1\4\3\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\10\4\1\0\1"+
    "\4\2\0\1\4\3\0\2\4\1\0\1\4\4\0\6\4\1\0\5\4\1\0\1\4\10\0\5\4\1\0\4\4\1\0\4"+
    "\4\3\0\2\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\2\0\3\4\1\0\6\4\2\0\2\4\2\35\10"+
    "\0\1\4\4\0\1\4\1\0\5\4\2\0\1\4\1\0\4\4\1\0\3\4\2\0\6\4\4\0\1\4\4\0\4\4\3\0"+
    "\2\4\4\0\1\4\2\0\4\4\1\0\2\4\1\0\3\4\1\0\1\4\3\0\3\4\3\0\6\4\6\0\1\4\1\0\3"+
    "\4\1\0\2\4\1\0\5\4\1\0\2\4\1\0\2\4\3\0\1\4\2\0\1\4\1\0\4\4\5\0\1\4\2\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\6\4\2\0\5\4\1\0\4\4\2\0\1\4\1\0\1\4\5\0\1\4\1\0\1\4\1"+
    "\0\3\4\1\0\3\4\1\0\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\3\1\1\2\1\3\1\4\2\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\12\1\20\1\1\1\21\1\22\2\21\1\0"+
    "\1\23\1\0\6\24\1\25\12\24\1\26\1\24\2\27"+
    "\2\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u0155\0\u01b2"+
    "\0\u0155\0\u0193\0\u01d1\0\u0155\0\u01f0\0\u020f\0\u022e\0\u024d"+
    "\0\u026c\0\u0155\0\u0155\0\u0155\0\u0155\0\u0155\0\u028b\0\u0155"+
    "\0\u02aa\0\u0155\0\u02c9\0\u02c9\0\u0193\0\u02e8\0\u0155\0\u0193"+
    "\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383\0\u03a2\0\u0155\0\u03c1"+
    "\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b\0\u049a\0\u04b9"+
    "\0\u04d8\0\u0345\0\u04f7\0\u0307\0\u0345\0\u0516\0\u0535";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\14\1\15\1\16\26\14\1\17\2\20\3\17\1\21"+
    "\1\17\1\22\5\17\1\23\6\17\1\24\7\17\1\14"+
    "\1\20\1\17\1\20\1\25\3\17\1\21\1\17\1\22"+
    "\14\17\1\24\7\17\1\14\1\25\1\14\2\26\3\14"+
    "\1\21\1\14\1\16\25\14\1\26\1\14\2\27\5\14"+
    "\1\16\25\14\1\27\1\17\2\30\2\31\1\17\1\21"+
    "\1\17\1\22\1\31\1\32\1\17\1\33\1\34\1\17"+
    "\4\31\1\35\2\17\7\31\1\14\1\30\1\14\2\20"+
    "\2\31\3\14\1\16\1\31\1\14\1\36\1\14\1\34"+
    "\1\14\4\31\3\14\7\31\1\14\1\20\4\14\1\37"+
    "\3\14\1\16\6\14\4\37\1\14\1\40\1\14\7\37"+
    "\12\14\1\16\5\14\1\41\20\14\1\42\1\43\1\44"+
    "\3\42\1\21\1\42\1\45\14\42\1\24\7\42\1\14"+
    "\1\43\1\42\1\43\1\44\3\42\1\21\1\42\1\45"+
    "\24\42\1\14\1\43\47\0\1\46\35\0\1\47\1\50"+
    "\27\0\2\20\33\0\1\20\1\51\2\0\14\51\1\52"+
    "\16\51\3\0\1\25\33\0\1\25\1\0\2\26\33\0"+
    "\1\26\1\0\2\27\33\0\1\27\1\0\2\30\33\0"+
    "\1\30\3\0\2\31\4\0\1\31\5\0\4\31\3\0"+
    "\7\31\5\0\3\37\11\0\4\37\3\0\7\37\2\0"+
    "\1\53\2\0\3\53\1\0\10\53\1\54\6\53\1\55"+
    "\3\53\1\56\3\53\2\0\2\43\33\0\1\43\10\0"+
    "\1\57\26\0\1\51\2\0\33\51\1\0\1\51\2\0"+
    "\15\51\1\60\15\51\1\0\1\53\2\0\3\53\1\0"+
    "\27\53\1\0\1\53\2\0\3\53\1\0\11\53\1\61"+
    "\15\53\1\0\1\53\2\0\3\53\1\0\20\53\1\62"+
    "\6\53\1\0\1\53\2\0\3\53\1\0\24\53\1\63"+
    "\2\53\1\0\1\51\2\0\16\51\1\64\14\51\1\0"+
    "\1\53\2\0\3\53\1\0\12\53\1\65\14\53\1\0"+
    "\1\53\2\0\3\53\1\0\21\53\1\66\5\53\1\0"+
    "\1\53\2\0\3\53\1\0\25\53\1\67\1\53\1\0"+
    "\1\51\2\0\15\51\1\70\15\51\1\0\1\53\2\0"+
    "\3\53\1\0\11\53\1\71\15\53\1\0\1\53\2\0"+
    "\3\53\1\0\22\53\1\72\4\53\1\0\1\53\2\0"+
    "\3\53\1\0\22\53\1\73\4\53\1\0\1\51\2\0"+
    "\17\51\1\74\13\51\1\0\1\53\2\0\3\53\1\0"+
    "\13\53\1\75\13\53\1\0\1\53\2\0\3\53\1\0"+
    "\12\53\1\76\14\53\1\0\1\53\2\0\3\53\1\0"+
    "\11\53\1\77\15\53\1\0\1\53\2\0\3\53\1\0"+
    "\23\53\1\72\3\53\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\5\1\5\11\1\1\1\11\1\1\1\11\3\1\1\0"+
    "\1\11\1\0\6\1\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean myJdk15Enabled;
  private DocCommentTokenTypes myTokenTypes;

  public _JavaDocLexer(boolean isJdk15Enabled, DocCommentTokenTypes tokenTypes) {
    this((java.io.Reader)null);
    myJdk15Enabled = isJdk15Enabled;
    myTokenTypes = tokenTypes;
  }

  public boolean checkAhead(char c) {
     if (zzMarkedPos >= zzBuffer.length()) return false;
     return zzBuffer.charAt(zzMarkedPos) == c;
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzAtEOF = false;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _JavaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return myTokenTypes.badCharacter();
            }
          case 24: break;
          case 2: 
            { yybegin(COMMENT_DATA); return myTokenTypes.commentData();
            }
          case 25: break;
          case 3: 
            { return myTokenTypes.space();
            }
          case 26: break;
          case 4: 
            { yybegin(COMMENT_DATA); return myTokenTypes.inlineTagEnd();
            }
          case 27: break;
          case 5: 
            { if (checkAhead('@')) {
    yybegin(INLINE_TAG_NAME);
    return myTokenTypes.inlineTagStart();
  }
  else{
    yybegin(COMMENT_DATA);
    return myTokenTypes.inlineTagStart();
  }
            }
          case 28: break;
          case 6: 
            { return myTokenTypes.commentData();
            }
          case 29: break;
          case 7: 
            { if (checkAhead('<') || checkAhead('\"')) yybegin(COMMENT_DATA);
  else if (checkAhead('\u007b') ) yybegin(COMMENT_DATA);  // lbrace - there's a error in JLex when typing lbrace directly
  else yybegin(DOC_TAG_VALUE);
  return myTokenTypes.space();
            }
          case 30: break;
          case 8: 
            { yybegin(DOC_TAG_VALUE); return myTokenTypes.space();
            }
          case 31: break;
          case 9: 
            { yybegin(COMMENT_DATA); return myTokenTypes.space();
            }
          case 32: break;
          case 10: 
            { return myTokenTypes.tagValueToken();
            }
          case 33: break;
          case 11: 
            { yybegin(DOC_TAG_VALUE_IN_PAREN); return myTokenTypes.tagValueLParen();
            }
          case 34: break;
          case 12: 
            { return myTokenTypes.tagValueSharp();
            }
          case 35: break;
          case 13: 
            { return myTokenTypes.tagValueComma();
            }
          case 36: break;
          case 14: 
            { if (myJdk15Enabled) {
    yybegin(DOC_TAG_VALUE_IN_LTGT);
    return myTokenTypes.tagValueLT();
  }
  else {
    yybegin(COMMENT_DATA);
    return myTokenTypes.commentData();
  }
            }
          case 37: break;
          case 15: 
            { yybegin(DOC_TAG_VALUE); return myTokenTypes.tagValueRParen();
            }
          case 38: break;
          case 16: 
            { yybegin(COMMENT_DATA); return myTokenTypes.tagValueGT();
            }
          case 39: break;
          case 17: 
            { yybegin(CODE_TAG); return myTokenTypes.commentData();
            }
          case 40: break;
          case 18: 
            { yybegin(CODE_TAG);
  return myTokenTypes.space();
            }
          case 41: break;
          case 19: 
            { return myTokenTypes.commentEnd();
            }
          case 42: break;
          case 20: 
            { yybegin(TAG_DOC_SPACE); return myTokenTypes.tagName();
            }
          case 43: break;
          case 21: 
            { yybegin(COMMENT_DATA_START); return myTokenTypes.commentStart();
            }
          case 44: break;
          case 22: 
            { yybegin(CODE_TAG_SPACE); return myTokenTypes.tagName();
            }
          case 45: break;
          case 23: 
            { yybegin(PARAM_TAG_SPACE); return myTokenTypes.tagName();
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
