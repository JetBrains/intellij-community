/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
 * Copyright 2000-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.intellij.lang.java.lexer;

import com.intellij.pom.java.LanguageLevel;
import com.intellij.psi.JavaTokenType;
import com.intellij.psi.impl.source.tree.JavaDocElementType;
import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_JavaLexer.flex</tt>
 */
class _JavaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\4"+
    "\0\1\17\1\20\1\21\1\22\2\23\1\24\3\23\1\24\71\23\1\25\1\23\1\26\1\27\1\30"+
    "\1\31\2\27\16\0\1\32\1\17\1\33\1\34\2\23\1\35\11\23\1\36\21\23\1\37\1\40\23"+
    "\23\1\27\1\41\3\23\1\24\1\42\1\41\4\23\1\43\1\44\4\0\1\45\1\46\1\27\3\23\2"+
    "\47\1\27\1\50\1\51\1\0\1\52\5\23\1\53\3\0\1\54\1\55\13\23\1\56\1\45\1\57\1"+
    "\60\1\0\1\61\1\27\1\62\1\63\3\23\3\0\1\64\12\23\1\65\1\0\1\66\1\27\1\0\1\67"+
    "\3\23\1\53\1\70\1\22\2\23\1\65\1\71\1\72\1\73\2\27\3\23\1\74\10\27\1\75\1"+
    "\30\6\27\1\76\2\0\1\77\1\100\6\23\1\101\2\0\1\102\1\23\1\103\1\0\2\41\1\104"+
    "\1\105\1\106\2\23\1\75\1\107\1\110\1\111\1\112\1\62\1\113\1\103\1\0\1\114"+
    "\1\51\1\104\1\115\1\106\2\23\1\75\1\116\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\1\0\1\125\1\27\1\104\1\36\1\35\2\23\1\75\1\126\1\110\1\45\1\127\1\130\1\27"+
    "\1\103\1\0\1\42\1\27\1\104\1\105\1\106\2\23\1\75\1\126\1\110\1\111\1\121\1"+
    "\124\1\113\1\103\1\0\1\42\1\27\1\131\1\132\1\133\1\134\1\135\1\132\1\23\1"+
    "\136\1\137\1\140\1\141\1\27\1\124\1\0\1\27\1\42\1\104\1\32\1\75\2\23\1\75"+
    "\1\142\1\143\1\144\1\140\1\145\1\26\1\103\1\0\2\27\1\146\1\32\1\75\2\23\1"+
    "\75\1\142\1\110\1\144\1\140\1\145\1\33\1\103\1\0\1\147\1\27\1\146\1\32\1\75"+
    "\4\23\1\150\1\144\1\151\1\62\1\27\1\103\1\0\1\27\1\40\1\146\1\23\1\24\1\40"+
    "\2\23\1\35\1\152\1\24\1\153\1\154\1\0\2\27\1\155\1\27\1\41\5\23\1\156\1\157"+
    "\1\160\1\77\1\0\1\161\4\27\1\162\1\163\1\164\1\41\1\165\1\166\1\156\1\167"+
    "\1\170\1\171\1\0\1\172\4\27\1\130\2\27\1\161\1\0\1\161\1\173\1\174\1\23\1"+
    "\41\3\23\1\30\1\44\1\0\1\144\1\175\1\0\1\44\3\0\1\50\1\176\7\27\5\23\1\53"+
    "\1\0\1\177\1\0\1\161\1\65\1\200\1\201\1\202\1\203\1\23\1\204\1\205\1\0\1\171"+
    "\4\23\1\36\1\21\5\23\1\206\51\23\1\133\1\24\1\133\5\23\1\133\4\23\1\133\1"+
    "\24\1\133\1\23\1\24\7\23\1\133\10\23\1\207\4\27\2\23\2\27\12\23\1\30\1\27"+
    "\1\41\114\23\1\105\2\23\1\41\2\23\1\47\11\23\1\132\1\130\1\27\1\23\1\32\1"+
    "\210\1\27\2\23\1\210\1\27\2\23\1\211\1\27\1\23\1\32\1\212\1\27\6\23\1\213"+
    "\3\0\1\214\1\215\1\0\1\161\3\27\1\216\1\0\1\161\13\23\1\27\5\23\1\217\10\23"+
    "\1\220\1\27\3\23\1\30\1\0\1\2\1\0\1\2\1\124\1\0\3\23\1\220\1\30\1\27\5\23"+
    "\1\114\2\0\1\55\1\161\1\0\1\161\4\27\2\23\1\160\1\2\6\23\1\175\1\77\3\0\1"+
    "\111\1\0\1\161\1\0\1\161\1\43\13\27\1\221\5\23\1\213\1\0\1\221\1\114\1\0\1"+
    "\161\1\27\1\222\1\2\1\27\1\223\3\23\1\102\1\202\1\0\1\67\4\23\1\65\1\0\1\2"+
    "\1\27\4\23\1\213\2\0\1\27\1\0\1\224\1\0\1\67\3\23\1\220\12\27\1\225\2\0\1"+
    "\226\1\227\1\27\30\23\4\0\1\77\2\27\1\76\42\23\2\220\4\23\2\220\1\23\1\230"+
    "\3\23\1\220\6\23\1\32\1\170\1\231\1\30\1\232\1\114\1\23\1\30\1\231\1\30\1"+
    "\27\1\222\3\27\1\233\1\27\1\43\1\130\1\27\1\234\1\27\1\50\1\235\1\42\1\43"+
    "\2\27\1\23\1\30\3\23\1\47\2\27\1\0\1\50\1\236\1\0\1\237\1\27\1\240\1\40\1"+
    "\152\1\241\1\31\1\242\1\23\1\243\1\244\1\245\2\27\5\23\1\130\116\27\5\23\1"+
    "\24\5\23\1\24\20\23\1\30\1\246\1\247\1\27\4\23\1\36\1\21\7\23\1\43\1\27\1"+
    "\62\2\23\1\24\1\27\10\24\4\0\5\27\1\43\72\27\1\244\3\27\1\41\1\204\1\241\1"+
    "\30\1\41\11\23\1\24\1\250\1\41\12\23\1\206\1\244\4\23\1\220\1\41\12\23\1\24"+
    "\2\27\3\23\1\47\6\27\170\23\1\220\11\27\71\23\1\30\6\27\21\23\1\30\10\27\5"+
    "\23\1\220\41\23\1\30\2\23\1\0\1\247\2\27\5\23\1\160\1\76\1\251\3\23\1\62\12"+
    "\23\1\161\3\27\1\43\1\23\1\40\14\23\1\252\1\114\1\27\1\23\1\47\11\27\1\23"+
    "\1\253\1\254\2\23\1\53\2\27\1\130\6\23\1\114\1\27\1\67\5\23\1\213\1\0\1\50"+
    "\1\27\1\0\1\161\2\0\1\67\1\51\1\0\1\67\2\23\1\65\1\171\2\23\1\160\1\0\1\2"+
    "\1\27\3\23\1\30\1\100\5\23\1\53\1\0\1\237\1\43\1\0\1\161\4\27\5\23\1\102\1"+
    "\77\1\27\1\254\1\255\1\0\1\161\2\23\1\24\1\256\6\23\1\201\1\257\1\217\2\27"+
    "\1\260\1\23\1\53\1\261\1\27\3\262\1\27\2\24\22\27\4\23\1\53\1\263\1\0\1\161"+
    "\64\23\1\114\1\27\2\23\1\24\1\264\5\23\1\114\40\27\55\23\1\220\15\23\1\26"+
    "\4\27\1\24\1\27\1\264\1\265\1\23\1\75\1\24\1\170\1\266\15\23\1\26\3\27\1\264"+
    "\54\23\1\220\2\27\10\23\1\40\6\23\5\27\1\23\1\30\2\0\2\27\1\77\1\27\1\135"+
    "\2\27\1\244\3\27\1\42\1\32\20\23\1\267\1\234\1\27\1\0\1\161\1\41\2\23\1\115"+
    "\1\41\2\23\1\47\1\270\12\23\1\24\3\40\1\271\1\272\2\27\1\273\1\23\1\142\2"+
    "\23\1\24\2\23\1\274\1\23\1\220\1\23\1\220\4\27\17\23\1\47\10\27\6\23\1\30"+
    "\20\27\1\275\20\27\3\23\1\30\6\23\1\130\5\27\3\23\1\24\2\27\3\23\1\47\6\27"+
    "\3\23\1\220\4\23\1\114\1\23\1\241\5\27\23\23\1\220\1\0\1\161\52\27\1\220\1"+
    "\75\4\23\1\36\1\276\2\23\1\220\25\27\2\23\1\220\1\27\3\23\1\26\10\27\7\23"+
    "\1\270\10\27\1\277\1\76\1\142\1\41\2\23\1\114\1\120\4\27\3\23\1\30\20\27\6"+
    "\23\1\220\1\27\2\23\1\220\1\27\2\23\1\47\21\27\11\23\1\130\66\27\1\223\6\23"+
    "\1\0\1\77\3\27\1\124\1\0\2\27\1\223\5\23\1\0\1\300\2\27\3\23\1\130\1\0\1\161"+
    "\1\223\3\23\1\160\1\0\1\144\1\0\10\27\1\223\5\23\1\53\1\0\1\301\1\27\1\0\1"+
    "\161\24\27\5\23\1\53\1\0\1\27\1\0\1\161\46\27\55\23\1\24\22\27\14\23\1\47"+
    "\63\27\5\23\1\24\72\27\7\23\1\130\130\27\10\23\1\30\1\27\1\102\4\0\1\77\1"+
    "\27\1\62\1\223\1\23\14\27\1\26\153\27\1\302\1\303\2\0\1\304\1\2\3\27\1\305"+
    "\22\27\1\306\67\27\12\23\1\32\10\23\1\32\1\307\1\310\1\23\1\311\1\142\7\23"+
    "\1\36\1\312\2\32\3\23\1\313\1\170\1\40\1\75\51\23\1\220\3\23\1\75\2\23\1\206"+
    "\3\23\1\206\2\23\1\32\3\23\1\32\2\23\1\24\3\23\1\24\3\23\1\75\3\23\1\75\2"+
    "\23\1\206\1\314\6\0\1\142\3\23\1\162\1\41\1\206\1\315\1\240\1\316\1\162\1"+
    "\230\1\162\2\206\1\123\1\23\1\35\1\23\1\114\1\317\1\35\1\23\1\114\50\27\32"+
    "\23\1\24\5\27\106\23\1\30\1\27\33\23\1\220\74\27\1\122\3\27\14\0\20\27\36"+
    "\0\2\27");

  /* The ZZ_CMAP_A table has 1664 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\3\1\1\1\6\1\0\1\1\1\6\6\3\4\0\1\1\1\60\1\26\1\0\1\2\1\67\1\65\1\25\1\70"+
    "\1\71\1\5\1\62\1\77\1\22\1\20\1\4\1\13\11\7\1\102\1\76\1\63\1\57\1\64\1\101"+
    "\1\103\1\11\1\15\1\11\1\17\1\21\1\16\5\2\1\12\3\2\1\23\7\2\1\14\2\2\1\74\1"+
    "\24\1\75\1\66\1\10\1\0\1\34\1\40\1\41\1\47\1\32\1\33\1\52\1\45\1\46\1\2\1"+
    "\43\1\35\1\50\1\37\1\42\1\53\1\2\1\30\1\36\1\27\1\31\1\54\1\55\1\51\1\44\1"+
    "\56\1\72\1\61\1\73\1\100\1\3\2\0\4\2\4\0\1\2\2\0\1\3\7\0\1\2\4\0\1\2\5\0\17"+
    "\2\1\0\2\2\4\0\4\2\16\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\6\0\1\2\1\0\3"+
    "\2\1\0\1\2\1\0\4\2\1\0\13\2\1\0\3\2\1\0\5\3\2\0\6\2\1\0\7\2\1\0\1\2\15\0\1"+
    "\2\1\0\15\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\1\3\3\2\5\0\5\3\6\0\1\2\4\0\3\3\5"+
    "\0\3\2\7\3\4\0\2\2\1\3\13\2\1\0\1\2\7\3\2\2\2\3\1\0\4\3\2\2\2\3\3\2\2\0\1"+
    "\2\7\0\1\3\1\2\1\3\6\2\3\3\2\0\11\2\3\3\1\2\6\0\2\3\6\2\4\3\2\2\2\0\2\3\1"+
    "\2\11\3\1\2\3\3\1\2\5\3\2\0\1\2\3\3\4\0\1\2\1\0\6\2\4\0\13\3\1\0\4\3\6\2\3"+
    "\3\1\2\2\3\1\2\7\3\2\2\2\3\2\0\2\3\1\0\3\3\1\0\10\2\2\0\2\2\2\0\6\2\1\0\1"+
    "\2\3\0\4\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3\1\2\5\0\2\2\1\0\5\2\4\0\3\2\4\0"+
    "\2\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\3\1\0\5\3\4\0\2\3\2\0\3\3\3\0\1\3\7\0\4"+
    "\2\1\0\1\2\7\0\4\3\3\2\1\3\2\0\1\2\1\0\2\2\1\0\3\2\2\3\1\0\3\3\2\0\1\2\11"+
    "\0\1\3\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\2\2"+
    "\4\0\5\3\3\0\3\3\1\0\4\3\2\0\1\2\6\0\1\3\4\2\1\0\5\2\3\0\1\2\7\3\1\0\2\3\5"+
    "\0\2\3\3\0\2\3\1\0\3\2\1\0\2\2\5\0\3\2\2\0\1\2\3\3\1\0\4\3\1\2\1\0\4\2\1\0"+
    "\1\2\4\0\1\3\4\0\6\3\1\0\1\3\3\0\2\3\4\0\1\2\1\3\2\2\7\3\4\0\10\2\3\3\7\0"+
    "\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2"+
    "\2\1\0\3\2\2\3\1\0\2\3\1\2\2\0\5\2\1\0\1\2\1\0\6\3\2\0\2\3\2\0\4\2\5\0\1\3"+
    "\1\0\1\3\1\0\1\3\4\0\2\3\5\2\3\3\6\0\1\3\1\0\7\3\1\2\2\3\4\2\3\3\1\2\3\3\2"+
    "\2\7\3\3\2\4\3\5\2\14\3\1\2\1\3\3\2\1\0\7\2\2\0\3\3\2\2\3\3\3\0\2\2\2\3\4"+
    "\0\1\2\1\0\2\3\4\0\4\2\10\3\3\0\1\2\3\0\2\2\1\3\5\0\3\3\2\0\1\2\1\3\1\2\5"+
    "\0\6\2\2\0\5\3\3\2\3\0\10\3\5\2\2\3\3\0\3\2\3\3\1\0\5\3\4\2\1\3\4\2\3\3\2"+
    "\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\2\0\3\2\1\0\6\2\2\0\2\2\2\0\5\3\5\0\1\2"+
    "\5\0\6\3\1\0\1\3\3\0\4\3\11\0\1\2\4\0\1\2\1\0\5\2\2\0\1\2\1\0\4\2\1\0\3\2"+
    "\2\0\4\2\5\0\5\2\4\0\1\2\4\0\4\2\3\3\2\2\5\0\2\3\2\0\3\2\6\3\1\0\2\2\2\0\4"+
    "\2\1\0\2\2\1\3\3\2\1\3\4\2\1\3\10\2\2\3\4\0\1\2\1\3\4\0\1\3\5\2\2\3\3\0\3"+
    "\2\4\0\3\2\2\3\2\0\6\2\1\0\3\3\1\0\2\3\5\0\5\2\5\0\1\2\1\3\3\2\1\0\2\2\1\0"+
    "\7\2\2\0\1\3\6\0\2\2\2\0\3\2\3\0\2\2\3\0\2\2\2\0\3\3\4\0\3\2\1\0\2\2\1\0\1"+
    "\2\5\0\1\3\2\0\1\2\3\0\1\2\2\0\2\2\3\3\1\0\2\3\1\0\3\3\2\0\1\3\2\0\1\3\4\2"+
    "\10\0\5\3\3\0\6\3\2\0\3\3\2\0\4\3\4\0\3\3\5\0\1\2\2\0\2\2\2\0\4\2\1\0\4\2"+
    "\1\0\1\2\1\0\6\2\2\0\5\2\1\0\4\2\1\0\4\2\2\0\2\3\1\0\1\2\1\0\1\2\5\0\1\2\1"+
    "\0\1\2\1\0\3\2\1\0\3\2\1\0\3\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\20\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\3\46"+
    "\2\6\1\0\1\47\1\50\1\51\2\11\2\12\34\3"+
    "\1\52\3\3\1\53\6\3\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\41\1\71\1\46\1\6\1\0\1\72\2\3"+
    "\1\73\10\3\1\74\13\3\1\75\11\3\1\76\14\3"+
    "\1\77\1\0\2\71\1\0\1\100\2\3\1\101\1\3"+
    "\1\102\1\103\6\3\1\104\6\3\1\105\3\3\1\106"+
    "\1\3\1\107\3\3\1\110\6\3\1\111\5\3\1\112"+
    "\1\3\1\41\1\0\1\3\1\113\2\3\1\114\1\115"+
    "\1\116\4\3\1\117\1\3\1\120\2\3\1\121\1\3"+
    "\1\122\1\123\1\3\1\124\13\3\1\125\1\3\1\126"+
    "\1\127\2\3\1\130\2\3\1\131\1\3\1\132\1\133"+
    "\5\3\1\134\1\3\1\135\2\3\1\136\3\3\1\137"+
    "\1\140\3\3\1\141\4\3\1\142\1\3\1\143\1\144"+
    "\2\3\1\145\1\146\1\3\1\147\4\3\1\150\1\151"+
    "\1\3\1\152\2\3\1\153\1\3\1\154\1\155\1\3"+
    "\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\104\0\u08c4\0\u0908\0\u094c\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\u0990"+
    "\0\104\0\u09d4\0\u0a18\0\104\0\104\0\104\0\104\0\104"+
    "\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\104\0\104\0\104"+
    "\0\u0bb0\0\104\0\u0bf4\0\104\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144"+
    "\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364"+
    "\0\314\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\u1650\0\104\0\104\0\104\0\104\0\104"+
    "\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\104\0\u17e8\0\u182c"+
    "\0\314\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u1a4c\0\314\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\314\0\u1d7c\0\u1dc0"+
    "\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200"+
    "\0\u2244\0\u2288\0\u22cc\0\u2310\0\104\0\u2354\0\u2398\0\104"+
    "\0\u23dc\0\314\0\u2420\0\u2464\0\314\0\u24a8\0\314\0\314"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\314\0\u2684"+
    "\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\314\0\u281c\0\u2860"+
    "\0\u28a4\0\314\0\u28e8\0\314\0\u292c\0\u2970\0\u29b4\0\314"+
    "\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\314\0\u2b90"+
    "\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\314\0\u2ce4\0\104\0\u2d28"+
    "\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\314\0\314\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\314\0\u2fd0\0\314\0\u3014\0\u3058"+
    "\0\314\0\u309c\0\314\0\314\0\u30e0\0\314\0\u3124\0\u3168"+
    "\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388"+
    "\0\u33cc\0\314\0\u3410\0\314\0\314\0\u3454\0\u3498\0\314"+
    "\0\u34dc\0\u3520\0\314\0\u3564\0\314\0\314\0\u35a8\0\u35ec"+
    "\0\u3630\0\u3674\0\u36b8\0\314\0\u36fc\0\314\0\u3740\0\u3784"+
    "\0\314\0\u37c8\0\u380c\0\u3850\0\314\0\314\0\u3894\0\u38d8"+
    "\0\u391c\0\314\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\314\0\u3a70"+
    "\0\314\0\314\0\u3ab4\0\u3af8\0\314\0\314\0\u3b3c\0\314"+
    "\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\314\0\314\0\u3c90\0\314"+
    "\0\u3cd4\0\u3d18\0\314\0\u3d5c\0\314\0\314\0\u3da0\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\3\1\7"+
    "\3\4\1\10\4\4\1\11\1\4\1\12\1\4\1\2"+
    "\1\13\1\14\1\15\1\16\1\4\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\4\4\1\27\1\30"+
    "\2\4\1\31\1\32\1\33\1\34\1\4\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\105\0\1\3\4\0\1\3\77\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\30\4\31\0\1\62\1\63\51\0\1\64\103\0\1\65"+
    "\33\0\2\7\1\0\1\66\1\7\2\0\1\67\1\70"+
    "\1\71\1\72\10\0\1\72\1\67\1\0\1\66\11\0"+
    "\1\70\43\0\2\7\1\0\1\66\1\7\1\73\1\74"+
    "\1\67\1\70\1\71\1\72\10\0\1\72\1\67\1\0"+
    "\1\66\2\0\1\74\6\0\1\70\1\0\1\73\41\0"+
    "\1\71\3\0\1\71\4\0\1\75\105\0\1\76\34\0"+
    "\1\77\4\0\1\100\17\0\6\13\1\0\15\13\1\101"+
    "\1\102\56\13\6\14\1\0\15\14\1\103\1\14\1\104"+
    "\55\14\2\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\1\4\1\105\14\4\1\106\11\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\3\4\1\107\24\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\6\4\1\110\1\4\1\111"+
    "\11\4\1\112\5\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\113\1\114\4\4"+
    "\1\115\3\4\1\116\10\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\7\4\1\117\1\4"+
    "\1\120\16\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\13\4\1\121\14\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\1\122"+
    "\1\4\1\123\12\4\1\124\1\125\7\4\1\126\1\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\2\4\1\127\1\130\1\4\1\131\22\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\4\1\132\11\4\1\133\1\4\1\134\12\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\135\1\136\4\4\1\137\2\4\1\140\11\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\4\4\1\141\3\4\1\142\10\4\1\143\6\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\3\4\1\144\7\4\1\145\14\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\13\4"+
    "\1\146\14\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\1\4\1\147\1\150\2\4\1\151"+
    "\22\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\13\4\1\152\14\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\16\4\1\153"+
    "\11\4\104\0\1\154\103\0\1\155\103\0\1\156\1\0"+
    "\1\157\101\0\1\160\2\0\1\161\100\0\1\162\3\0"+
    "\1\163\77\0\1\164\5\0\1\165\75\0\1\166\103\0"+
    "\1\167\126\0\1\170\1\0\6\62\1\0\75\62\5\171"+
    "\1\172\76\171\7\0\2\71\2\0\1\71\2\0\1\67"+
    "\1\70\1\0\1\72\10\0\1\72\1\67\13\0\1\70"+
    "\43\0\2\173\2\0\1\173\2\0\1\67\1\70\2\0"+
    "\1\173\10\0\1\67\13\0\1\70\12\0\1\173\30\0"+
    "\3\174\1\66\1\174\1\0\3\174\1\175\1\174\10\0"+
    "\3\174\1\66\2\0\2\174\5\0\1\174\43\0\2\74"+
    "\1\0\1\66\1\74\21\0\1\66\66\0\1\176\63\0"+
    "\6\13\1\0\75\13\6\14\1\0\75\14\2\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\2\4"+
    "\1\177\2\4\1\200\7\4\1\201\12\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\1\4"+
    "\1\202\15\4\1\203\10\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\204\27\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\7\4\1\205\20\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\2\4\1\206\25\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\207\27\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\6\4\1\210\21\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\13\4"+
    "\1\211\14\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\1\4\1\212\26\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\10\4"+
    "\1\213\17\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\7\4\1\214\20\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\7\4"+
    "\1\215\20\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\10\4\1\216\17\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\1\4"+
    "\1\217\3\4\1\220\22\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\24\4\1\221\3\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\10\4\1\222\17\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\13\4\1\223\14\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\17\4\1\224\10\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\6\4\1\225\21\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\26\4\1\226\1\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\227\27\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\3\4\1\230\24\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\13\4\1\231\14\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\232\27\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\1\233\6\4\1\234\20\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\235\22\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\10\4\1\236\17\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\237\22\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\1\240\6\4\1\241\20\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\24\4\1\242\3\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\4\4\1\243\23\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\2\4\1\244\25\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\245\27\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\13\4\1\246\3\4\1\247\10\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\11\4\1\250"+
    "\16\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\12\4\1\251\15\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\6\4\1\252"+
    "\10\4\1\253\10\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\17\4\1\254\10\4\104\0"+
    "\1\255\24\0\5\171\1\256\76\171\4\257\1\260\1\172"+
    "\76\257\7\0\2\173\2\0\1\173\2\0\1\67\1\70"+
    "\13\0\1\67\13\0\1\70\43\0\3\174\1\66\1\174"+
    "\1\0\3\174\1\261\1\174\1\0\1\72\6\0\3\174"+
    "\1\66\2\0\2\174\5\0\1\174\3\0\1\72\37\0"+
    "\3\261\1\0\1\261\1\0\3\261\1\0\1\261\10\0"+
    "\3\261\3\0\2\261\5\0\1\261\36\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\3\4\1\262"+
    "\24\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\10\4\1\263\17\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\13\4\1\264"+
    "\14\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\7\4\1\265\20\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\2\4\1\266"+
    "\25\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\267\24\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\21\4\1\270"+
    "\6\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\271\24\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\7\4\1\272"+
    "\20\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\273\22\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\5\4\1\274"+
    "\22\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\275\24\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\1\276\27\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\23\4\1\277\4\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\17\4\1\300\10\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\301\27\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\302\24\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\12\4\1\303\15\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\1\4\1\304\26\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\305\27\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\6\4\1\306\21\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\17\4"+
    "\1\307\10\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\5\4\1\310\22\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\6\4"+
    "\1\311\21\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\3\4\1\312\24\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\12\4"+
    "\1\313\15\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\3\4\1\314\24\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\7\4"+
    "\1\315\20\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\1\316\6\4\1\317\20\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\4\1\320\26\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\321\24\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\322\27\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\6\4\1\323\4\4\1\324\14\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\325\22\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\11\4\1\326\16\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\13\4\1\327\14\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\330\27\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\25\4\1\331\2\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\6\4\1\332\21\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\14\4\1\333\13\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\334\22\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\20\4\1\335\7\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\6\4\1\336\21\4\25\0"+
    "\4\171\1\337\1\256\76\171\5\257\1\340\76\257\7\0"+
    "\3\261\1\0\1\261\1\0\3\261\1\0\1\261\1\0"+
    "\1\72\6\0\3\261\3\0\2\261\5\0\1\261\3\0"+
    "\1\72\32\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\7\4\1\341\20\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\26\4\1\342"+
    "\1\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\1\4\1\343\26\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\10\4\1\344"+
    "\17\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\345\24\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\1\346\27\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\6\4\1\347\21\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\4\1\350\26\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\4\1\351\26\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\12\4\1\352\15\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\17\4\1\353\10\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\4\1\354\26\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\16\4\1\355\11\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\356\27\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\12\4\1\357\15\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\25\4\1\360\2\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\14\4\1\361\13\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\362\24\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\16\4\1\363\11\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\7\4\1\364\20\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\17\4\1\365\10\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\1\366\27\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\1\4"+
    "\1\367\26\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\5\4\1\370\22\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\3\4"+
    "\1\371\24\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\1\4\1\372\26\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\2\4"+
    "\1\373\25\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\6\4\1\374\21\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\3\4"+
    "\1\375\24\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\5\4\1\376\22\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\17\4"+
    "\1\377\10\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\5\4\1\u0100\22\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\1\u0101"+
    "\27\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\u0102\24\4\25\0\4\257\1\260"+
    "\1\340\76\257\2\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\17\4\1\u0103\10\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\7\4"+
    "\1\u0104\20\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\10\4\1\u0105\17\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\20\4"+
    "\1\u0106\7\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\6\4\1\u0107\21\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\1\u0108"+
    "\27\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\u0109\22\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\1\u010a\27\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\12\4\1\u010b\15\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\4\1\u010c\26\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\16\4\1\u010d\11\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\3\4\1\u010e\24\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\u010f\22\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\10\4\1\u0110\17\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\4\4\1\u0111\23\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\10\4\1\u0112\17\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\21\4\1\u0113\6\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\u0114\27\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\6\4\1\u0115\21\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\u0116\24\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\12\4\1\u0117\15\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\1\u0118\27\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\12\4"+
    "\1\u0119\15\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\23\4\1\u011a\4\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\17\4"+
    "\1\u011b\10\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\3\4\1\u011c\24\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\7\4"+
    "\1\u011d\20\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\15\4\1\u011e\12\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\12\4"+
    "\1\u011f\15\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\4\4\1\u0120\23\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\13\4"+
    "\1\u0121\14\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\10\4\1\u0122\17\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\2\4"+
    "\1\u0123\25\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\5\4\1\u0124\22\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\12\4"+
    "\1\u0125\15\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\3\4\1\u0126\24\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\1\u0127"+
    "\27\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\1\u0128\27\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\3\4\1\u0129\24\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\3\4\1\u012a\24\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\6\4\1\u012b\21\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\10\4\1\u012c\17\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\u012d\27\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\24\4\1\u012e\3\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\10\4\1\u012f\17\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\3\4\1\u0130\24\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\12\4\1\u0131\15\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\3\4\1\u0132\24\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\10\4\1\u0133\17\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\3\4\1\u0134\24\4\27\0\2\4\3\0\11\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\u0135\24\4\27\0"+
    "\2\4\3\0\11\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\u0136\27\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\17\4\1\u0137\10\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\3\4"+
    "\1\u0138\24\4\27\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\0\1\4\3\0\13\4\1\u0139\14\4\27\0\2\4"+
    "\3\0\11\4\1\0\1\4\1\0\1\4\3\0\1\u013a"+
    "\27\4\27\0\2\4\3\0\11\4\1\0\1\4\1\0"+
    "\1\4\3\0\20\4\1\u013b\7\4\27\0\2\4\3\0"+
    "\11\4\1\0\1\4\1\0\1\4\3\0\27\4\1\u013c"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\4\4\1\u013d\23\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\7\4\1\u013e\20\4"+
    "\27\0\2\4\3\0\11\4\1\0\1\4\1\0\1\4"+
    "\3\0\3\4\1\u013f\24\4\27\0\2\4\3\0\11\4"+
    "\1\0\1\4\1\0\1\4\3\0\20\4\1\u0140\7\4"+
    "\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15844];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\1\11\3\1\12\11\1\1\1\11"+
    "\2\1\5\11\4\1\1\0\3\11\1\1\1\11\1\1"+
    "\1\11\47\1\7\11\1\1\5\11\4\1\1\0\1\11"+
    "\56\1\1\11\1\0\1\1\1\11\1\0\55\1\1\11"+
    "\1\0\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean myAssertKeyword;
  private boolean myEnumKeyword;

  public _JavaLexer(LanguageLevel level) {
    this((java.io.Reader)null);
    myAssertKeyword = level.isAtLeast(LanguageLevel.JDK_1_4);
    myEnumKeyword = level.isAtLeast(LanguageLevel.JDK_1_5);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzAtEOF = false;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return JavaTokenType.BAD_CHARACTER;
            }
          case 111: break;
          case 2: 
            { return JavaTokenType.WHITE_SPACE;
            }
          case 112: break;
          case 3: 
            { return JavaTokenType.IDENTIFIER;
            }
          case 113: break;
          case 4: 
            { return JavaTokenType.DIV;
            }
          case 114: break;
          case 5: 
            { return JavaTokenType.ASTERISK;
            }
          case 115: break;
          case 6: 
            { return JavaTokenType.INTEGER_LITERAL;
            }
          case 116: break;
          case 7: 
            { return JavaTokenType.DOT;
            }
          case 117: break;
          case 8: 
            { return JavaTokenType.MINUS;
            }
          case 118: break;
          case 9: 
            { return JavaTokenType.CHARACTER_LITERAL;
            }
          case 119: break;
          case 10: 
            { return JavaTokenType.STRING_LITERAL;
            }
          case 120: break;
          case 11: 
            { return JavaTokenType.EQ;
            }
          case 121: break;
          case 12: 
            { return JavaTokenType.EXCL;
            }
          case 122: break;
          case 13: 
            { return JavaTokenType.OR;
            }
          case 123: break;
          case 14: 
            { return JavaTokenType.PLUS;
            }
          case 124: break;
          case 15: 
            { return JavaTokenType.LT;
            }
          case 125: break;
          case 16: 
            { return JavaTokenType.GT;
            }
          case 126: break;
          case 17: 
            { return JavaTokenType.AND;
            }
          case 127: break;
          case 18: 
            { return JavaTokenType.XOR;
            }
          case 128: break;
          case 19: 
            { return JavaTokenType.PERC;
            }
          case 129: break;
          case 20: 
            { return JavaTokenType.LPARENTH;
            }
          case 130: break;
          case 21: 
            { return JavaTokenType.RPARENTH;
            }
          case 131: break;
          case 22: 
            { return JavaTokenType.LBRACE;
            }
          case 132: break;
          case 23: 
            { return JavaTokenType.RBRACE;
            }
          case 133: break;
          case 24: 
            { return JavaTokenType.LBRACKET;
            }
          case 134: break;
          case 25: 
            { return JavaTokenType.RBRACKET;
            }
          case 135: break;
          case 26: 
            { return JavaTokenType.SEMICOLON;
            }
          case 136: break;
          case 27: 
            { return JavaTokenType.COMMA;
            }
          case 137: break;
          case 28: 
            { return JavaTokenType.TILDE;
            }
          case 138: break;
          case 29: 
            { return JavaTokenType.QUEST;
            }
          case 139: break;
          case 30: 
            { return JavaTokenType.COLON;
            }
          case 140: break;
          case 31: 
            { return JavaTokenType.AT;
            }
          case 141: break;
          case 32: 
            { return JavaTokenType.END_OF_LINE_COMMENT;
            }
          case 142: break;
          case 33: 
            { return JavaTokenType.C_STYLE_COMMENT;
            }
          case 143: break;
          case 34: 
            { return JavaTokenType.DIVEQ;
            }
          case 144: break;
          case 35: 
            { return JavaTokenType.ASTERISKEQ;
            }
          case 145: break;
          case 36: 
            { return JavaTokenType.LONG_LITERAL;
            }
          case 146: break;
          case 37: 
            { return JavaTokenType.FLOAT_LITERAL;
            }
          case 147: break;
          case 38: 
            { return JavaTokenType.DOUBLE_LITERAL;
            }
          case 148: break;
          case 39: 
            { return JavaTokenType.MINUSMINUS;
            }
          case 149: break;
          case 40: 
            { return JavaTokenType.MINUSEQ;
            }
          case 150: break;
          case 41: 
            { return JavaTokenType.ARROW;
            }
          case 151: break;
          case 42: 
            { return JavaTokenType.IF_KEYWORD;
            }
          case 152: break;
          case 43: 
            { return JavaTokenType.DO_KEYWORD;
            }
          case 153: break;
          case 44: 
            { return JavaTokenType.EQEQ;
            }
          case 154: break;
          case 45: 
            { return JavaTokenType.NE;
            }
          case 155: break;
          case 46: 
            { return JavaTokenType.OREQ;
            }
          case 156: break;
          case 47: 
            { return JavaTokenType.OROR;
            }
          case 157: break;
          case 48: 
            { return JavaTokenType.PLUSEQ;
            }
          case 158: break;
          case 49: 
            { return JavaTokenType.PLUSPLUS;
            }
          case 159: break;
          case 50: 
            { return JavaTokenType.LE;
            }
          case 160: break;
          case 51: 
            { return JavaTokenType.LTLT;
            }
          case 161: break;
          case 52: 
            { return JavaTokenType.ANDEQ;
            }
          case 162: break;
          case 53: 
            { return JavaTokenType.ANDAND;
            }
          case 163: break;
          case 54: 
            { return JavaTokenType.XOREQ;
            }
          case 164: break;
          case 55: 
            { return JavaTokenType.PERCEQ;
            }
          case 165: break;
          case 56: 
            { return JavaTokenType.DOUBLE_COLON;
            }
          case 166: break;
          case 57: 
            { return JavaDocElementType.DOC_COMMENT;
            }
          case 167: break;
          case 58: 
            { return JavaTokenType.ELLIPSIS;
            }
          case 168: break;
          case 59: 
            { return JavaTokenType.TRY_KEYWORD;
            }
          case 169: break;
          case 60: 
            { return JavaTokenType.FOR_KEYWORD;
            }
          case 170: break;
          case 61: 
            { return JavaTokenType.NEW_KEYWORD;
            }
          case 171: break;
          case 62: 
            { return JavaTokenType.INT_KEYWORD;
            }
          case 172: break;
          case 63: 
            { return JavaTokenType.LTLTEQ;
            }
          case 173: break;
          case 64: 
            { return JavaTokenType.TRUE_KEYWORD;
            }
          case 174: break;
          case 65: 
            { return JavaTokenType.THIS_KEYWORD;
            }
          case 175: break;
          case 66: 
            { return JavaTokenType.ELSE_KEYWORD;
            }
          case 176: break;
          case 67: 
            { return myEnumKeyword ? JavaTokenType.ENUM_KEYWORD : JavaTokenType.IDENTIFIER;
            }
          case 177: break;
          case 68: 
            { return JavaTokenType.LONG_KEYWORD;
            }
          case 178: break;
          case 69: 
            { return JavaTokenType.NULL_KEYWORD;
            }
          case 179: break;
          case 70: 
            { return JavaTokenType.BYTE_KEYWORD;
            }
          case 180: break;
          case 71: 
            { return JavaTokenType.CASE_KEYWORD;
            }
          case 181: break;
          case 72: 
            { return JavaTokenType.CHAR_KEYWORD;
            }
          case 182: break;
          case 73: 
            { return JavaTokenType.GOTO_KEYWORD;
            }
          case 183: break;
          case 74: 
            { return JavaTokenType.VOID_KEYWORD;
            }
          case 184: break;
          case 75: 
            { return JavaTokenType.THROW_KEYWORD;
            }
          case 185: break;
          case 76: 
            { return JavaTokenType.FALSE_KEYWORD;
            }
          case 186: break;
          case 77: 
            { return JavaTokenType.FLOAT_KEYWORD;
            }
          case 187: break;
          case 78: 
            { return JavaTokenType.FINAL_KEYWORD;
            }
          case 188: break;
          case 79: 
            { return JavaTokenType.SUPER_KEYWORD;
            }
          case 189: break;
          case 80: 
            { return JavaTokenType.SHORT_KEYWORD;
            }
          case 190: break;
          case 81: 
            { return JavaTokenType.BREAK_KEYWORD;
            }
          case 191: break;
          case 82: 
            { return JavaTokenType.CATCH_KEYWORD;
            }
          case 192: break;
          case 83: 
            { return JavaTokenType.CLASS_KEYWORD;
            }
          case 193: break;
          case 84: 
            { return JavaTokenType.CONST_KEYWORD;
            }
          case 194: break;
          case 85: 
            { return JavaTokenType.WHILE_KEYWORD;
            }
          case 195: break;
          case 86: 
            { return JavaTokenType.THROWS_KEYWORD;
            }
          case 196: break;
          case 87: 
            { return JavaTokenType.RETURN_KEYWORD;
            }
          case 197: break;
          case 88: 
            { return myAssertKeyword ? JavaTokenType.ASSERT_KEYWORD : JavaTokenType.IDENTIFIER;
            }
          case 198: break;
          case 89: 
            { return JavaTokenType.STATIC_KEYWORD;
            }
          case 199: break;
          case 90: 
            { return JavaTokenType.SWITCH_KEYWORD;
            }
          case 200: break;
          case 91: 
            { return JavaTokenType.NATIVE_KEYWORD;
            }
          case 201: break;
          case 92: 
            { return JavaTokenType.IMPORT_KEYWORD;
            }
          case 202: break;
          case 93: 
            { return JavaTokenType.DOUBLE_KEYWORD;
            }
          case 203: break;
          case 94: 
            { return JavaTokenType.PUBLIC_KEYWORD;
            }
          case 204: break;
          case 95: 
            { return JavaTokenType.EXTENDS_KEYWORD;
            }
          case 205: break;
          case 96: 
            { return JavaTokenType.FINALLY_KEYWORD;
            }
          case 206: break;
          case 97: 
            { return JavaTokenType.BOOLEAN_KEYWORD;
            }
          case 207: break;
          case 98: 
            { return JavaTokenType.DEFAULT_KEYWORD;
            }
          case 208: break;
          case 99: 
            { return JavaTokenType.PRIVATE_KEYWORD;
            }
          case 209: break;
          case 100: 
            { return JavaTokenType.PACKAGE_KEYWORD;
            }
          case 210: break;
          case 101: 
            { return JavaTokenType.ABSTRACT_KEYWORD;
            }
          case 211: break;
          case 102: 
            { return JavaTokenType.STRICTFP_KEYWORD;
            }
          case 212: break;
          case 103: 
            { return JavaTokenType.CONTINUE_KEYWORD;
            }
          case 213: break;
          case 104: 
            { return JavaTokenType.VOLATILE_KEYWORD;
            }
          case 214: break;
          case 105: 
            { return JavaTokenType.TRANSIENT_KEYWORD;
            }
          case 215: break;
          case 106: 
            { return JavaTokenType.INTERFACE_KEYWORD;
            }
          case 216: break;
          case 107: 
            { return JavaTokenType.PROTECTED_KEYWORD;
            }
          case 217: break;
          case 108: 
            { return JavaTokenType.INSTANCEOF_KEYWORD;
            }
          case 218: break;
          case 109: 
            { return JavaTokenType.IMPLEMENTS_KEYWORD;
            }
          case 219: break;
          case 110: 
            { return JavaTokenType.SYNCHRONIZED_KEYWORD;
            }
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
