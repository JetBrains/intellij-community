#Need to translate in pair with action.EditorToggleCase.text key!
toggle.case.part=case

java.missed.sdk.click.setup=<ide/> cannot find JDK on your computer. The IDE needs JDK to run Java programs and provide code assistance to you. \
  To configure JDK, click the highlighted {0} link.
java.missed.sdk.show.options=Click to see available options
java.missed.sdk.read.more.tip=<strong>Tip</strong>: you can read more about JDK in <a href=''{0}''>the documentation</a>.
java.missed.sdk.configure=Configure JDK by using one of the suggested options. You can download it or specify a path to the existing JDK home directory on your computer.
java.missed.sdk.wait.installation=Please wait while the IDE installs JDK

java.onboarding.module.name=Onboarding tour
java.onboarding.module.description=A brief overview of the main features in {0}.

java.onboarding.lesson.name=Get Acquainted with IDEA
java.onboarding.change.ui.settings=For this lesson, IDEA changes some UI settings to the default state. \
  Your preferences will be restored when you complete or exit the lesson.
java.onboarding.project.view.description=The <strong>Project view</strong> is one of the main tool windows. It contains the project directory, SDK-specific external libraries, and scratch files. Click the striped button to preview the demo project content. You can also open it by pressing {0}.
java.onboarding.balloon.project.view=Click to open the <strong>Project view</strong>
java.onboarding.balloon.source.directory=Expand the {0} directory to view the project source files
java.onboarding.balloon.open.file=Double-click to open {0}
java.onboarding.balloon.open.learn.toolbar=Switch to the {0} tool window to continue this lesson
java.onboarding.indexing.description=When you open a project for the first time, <ide/> scans the JDK and the project itself \
  to collect details required for coding assistance. To continue, wait until indexing completes.
java.onboarding.wait.indexing=Please wait while the IDE indexes JDK files
java.onboarding.temporary.configuration.description=You have opened the demo sample. Now, let''s run it! In the highlighted {0}, \
  you can see popular running actions for the selected configuration. For example, you can run your code {1} or debug it {2}.
java.onboarding.run.options.community=Other actions like run with coverage {0} can be showed by clicking on {1}.
java.onboarding.run.options.ultimate=Other actions like profile {0}, and run with coverage {1} can be showed by clicking on {2}.
java.onboarding.run.sample=For now, let''s run the current file, click {0} or press {1}.
java.onboarding.run.sample.balloon=Let''s run the current file, click {0} or press {1}
java.onboarding.balloon.click.here=Click here to set a breakpoint
java.onboarding.toggle.breakpoint.1=You may notice that instead of the expected value of {0}, the {1} method returns {2}. \
  Let''s stop at the return statement to debug the problematic code.
java.onboarding.toggle.breakpoint.2=Click the gutter within the highlighted area to set a breakpoint.
java.onboarding.balloon.start.debugging=Click the icon to start debugging
java.onboarding.start.debugging=Click the {0} icon to start the debugging process.
java.onboarding.balloon.about.debug.panel=The {0} tool window provides a toolbar with various debugging actions. \
  You can take the {1} lesson later to try them.
java.onboarding.balloon.stop.debugging=Click the icon to stop debugging
java.onboarding.stop.debugging=Let''s stop debugging. Click the {0} icon.
java.onboarding.type.division=Once you have discovered the problem in the code, let''s fix it. Divide the resulting sum by the length of the values. \
  The lesson script inserts {0} already.
java.onboarding.invoke.completion=Now let''s type a period {0} to show all available completion options.
java.onboarding.choose.values.item=Now you can start typing {0} to reduce the completion list or select this item and press {1}.
java.onboarding.invoke.completion.tip=<strong>Tip</strong>: <ide/> shows completion options automatically as you type. \
  Also, you can press {0} to show completion items in any place of the code.
java.onboarding.invoke.intention.for.warning.1=You have just fixed a bug, but you can make this code look even better. \
  IDEA highlights and adds a yellow bulb to the code lines that can be improved.
java.onboarding.invoke.intention.for.warning.2=Press {0} to preview the warnings and apply a quick-fix.
java.onboarding.select.fix=Apply the first item: {0}. In this case, the <strong>for-each</strong> loop will make code easier to understand.
java.onboarding.invoke.intention.for.code=Intentions also save your time and make coding easier. Let''s use an intention to reformat string concatenation. \
  Press {0} to show possible options.
java.onboarding.apply.intention=Select {0} and press {1}.
java.onboarding.invoke.search.everywhere.1=While working in <ide/>, you might want to search for files in your project, symbols, classes, or even IDE actions. In this lesson, let''s search for the {0} action to make the {1} string low-case.
java.onboarding.invoke.search.everywhere.2=Press {0} two times to open the {1} dialog.
java.onboarding.search.everywhere.description=As you can see, the selected text, {0}, has been automatically copied into the input string. Let''s type {1} instead of {0}.
java.onboarding.apply.action=Select the {0} action and press {1}.
java.onboarding.case.changed=The case has changed.
java.onboarding.epilog=Congratulations! You have completed the onboarding tour. At this point you can:\
  \n  - <callback id="{0}">Close</callback> the learning project{1}\
  \n  - <callback id="{2}">Show</callback> more lessons

java.onboarding.finish.title=Congratulations
java.onboarding.finish.text=You have just completed the IDEA Onboarding tour.\n\
  Now you can close the Learning project{0}.\n\
  You can also continue your study and try other lessons.
java.onboarding.finish.exit=Close Demo Project
java.onboarding.finish.modules=Show More Lessons

java.onboarding.feedback.system.found.jdks=Found JDKs:
java.onboarding.feedback.system.jdk.at.start=JDK at start:
java.onboarding.feedback.system.current.jdk=Current JDK:
java.onboarding.feedback.system.lang.level=Language level:

java.basic.completion.choose.first=You can choose the first item from the Lookup menu by pressing {0}.
java.basic.completion.activate=To activate Basic Completion, press {0} and you will see the lookup menu again.
java.basic.completion.choose.item=Select {0} inside the lookup menu and press {1}.
java.basic.completion.complete=Press {0} to complete this statement.
java.basic.completion.deeper.level=Sometimes, you need to see suggestions for static constants or methods. \
  Press {0} twice to get them in the lookup.
java.basic.completion.module.promotion=You will find more about refactorings in the {0} module.

java.run.configuration.lets.run=There is more than one way to run your code. \
  Let''s run it from the gutter by clicking {0} and selecting the {1} item. \
  Alternatively, you can press {2}.

java.postfix.completion.type=Type {0} after the parenthesis to see the list of postfix completion suggestions.
java.postfix.completion.complete=Select {0} from the list or type the same value in the editor. Press {1} to complete the statement.

java.smart.type.completion.apply=Smart Type Completion filters the list of suggestions to include only the types applicable \
  within the current context. Press {0} to see the list of matching suggestions. Choose the first one by pressing {1}.
java.smart.type.completion.return=Smart Type Completion can also suggest code for a return statement. \
  Press {0} to see the Lookup menu for a return. Choose the first one by pressing {1}

java.statement.completion.lesson.name=Statement completion
java.statement.completion.complete.for=Press {0} to complete the {1} statement.
java.statement.completion.complete.if=Type {0} and press {1} to generate the statement.
java.statement.completion.complete.condition=Add a condition inside the parentheses {0} and press {1} to jump into the {2} statement.
java.statement.completion.complete.finish.body=Type a line of code: {0} and then press {1} to complete the statement and apply formatting.
# Link name to the IDE help
java.statement.completion.help.link=Statement completion

java.rename.press.rename=Press {0} to rename field {1}.
java.rename.type.new.name=Type a new name for this field (for example, {0}) and press {1}.
java.rename.confirm.accessors.rename=<ide/> is detecting the corresponding getters/setters and suggests renaming them accordingly.\
  Now just press {0} or click {1}

# Next string does not require translation
java.refactoring.menu.inline.variable.eng=Now let''s replace single usage of the {0} variable with an expression that defines it. \
  You can press {1} and filter the refactoring menu by <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable). \
  Choose this item or press {2}.
java.refactoring.menu.inline.variable=Now let''s replace single usage of the {0} variable with an expression that defines it. \
  You can press {1} and select {2} from the list or press {3} to invoke this action directly.
# Next string does not require translation
java.refactoring.menu.introduce.constant.eng=Finally, let''s extract an extension from the file name. \
  Again, you can press {0} and filter by <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant) or press {1}.
java.refactoring.menu.introduce.constant=Finally, let''s extract an extension from the file name. \
  Again, you can press {0} and select {1} or press {2}
java.refactoring.menu.confirm.constant=In this dialog, you can choose the new constant\u2019s type, name, parent class and visibility. \
  You can leave the defaults and press {0} or click {1}.

java.editor.coding.assistance.press.to.fix=Press {0} to replace the argument with an empty array.

java.extract.method.edit.method.name=Edit the name of the new method or leave the one that IDE proposed. Then press {0}.

java.inheritance.hierarchy.lesson.name=Inheritance hierarchy
java.inheritance.hierarchy.goto.implementation=Press {0} to look for implementations of {1}.
java.inheritance.hierarchy.choose.any.implementation=Choose any implementation and press {0} or click it.
java.inheritance.hierarchy.navigate.to.base=You can navigate to a super method from derived. Press {0} or click the {1} icon in the editor gutter.
java.inheritance.hierarchy.invoke.implementations.again=The declaration of the base method has its own gutter icon {0}. \
  Click it or press {1} again.
java.inheritance.hierarchy.open.in.find.tool.window=For big hierarchies, you might want to look for implementations in the {0} tool window. \
  Click {1}.
java.inheritance.hierarchy.hide.find.tool.window=Press {0} to hide the {1} tool window.
java.inheritance.hierarchy.open.method.hierarchy=You might want to explore the whole hierarchy for this method. Press {0}.
java.inheritance.hierarchy.hide.method.hierarchy=Let''s (also) hide {0} too. Press {1} again.
java.inheritance.hierarchy.open.class.hierarchy=To view the class hierarchy, press {0}.
java.inheritance.hierarchy.last.note=<strong>Note:</strong> Actions {0} and {1} can be also applied to classes. \
  Actions {2} and {3} are rarely used, but you can always find them with {4} using the {5} filter.
# Link name to the IDE help
java.inheritance.hierarchy.help.link=Source code hierarchy

java.find.occurrences.lesson.name=Next/previous occurrence
java.find.occurrences.invoke.find=In this lesson, you selected {0}. Press {1} to start a full-text search through the current file.
java.find.occurrences.find.previous=To jump to the previous occurrence, press {0}.
java.find.occurrences.search.closed.warning=Press {0} to open the search field again.
java.find.occurrences.find.next=<ide/> automatically copies the selected text into the search field. Let''s find the next occurrence. \
  Press {0} or {1}.
java.find.occurrences.close.search.tool=With the search panel closed, you can still use these shortcuts to navigate between \
  the recently found occurrences. Let''s close the search panel by pressing {0}.
java.find.occurrences.find.next.in.editor=Locate the next occurrence with {0}.
java.find.occurrences.find.previous.in.editor=And {0} to go backwards.
java.find.occurrences.note.about.cyclic=<strong>Note:</strong> The search is cyclic. When you press {0} twice at the last occurrence, \
  the first occurrence will be selected. {1} is cyclic too.
# Link name to the IDE help
java.find.help.link=Search for a target within a file

java.debug.workflow.hotswap.disabled.warning=The <strong>Hot Swap</strong> feature is disabled in the IDE settings. \
  Enable it in {0} | {1} | {2} <strong>\u2192</strong> {3} or just <callback id="{4}">click to activate</callback>.
java.debug.workflow.rebuild=We could rerun our small program after the fix, but for big programs, rerunning can take a long time. \
  If the fix only affects a pure method (as in this case), we can rebuild the project and apply <strong>Hot Swap</strong> instead of rerunning. \
  Press {0} to build the project.
java.debug.workflow.confirm.hot.swap=Confirm the <strong>Hot Swap</strong> reload.
java.debug.workflow.no.confirmation=<strong>Hot Swap</strong> is done automatically in the background. You may see a corresponding message in the lower-left corner.
java.debug.workflow.drop.frame=We''ve patched our method, but we are still executing the obsolete {0}, which will throw the \
  exception again. Let''s drop the frame and return to the state before {1} was called. Click {2} near the top call in the stack frame or press {3}.
java.debug.workflow.invalid.drop=It seems that you performed an action that was not planned by the lesson. Please, restart the lesson.
