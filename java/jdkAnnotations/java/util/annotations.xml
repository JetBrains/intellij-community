<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name='java.util.AbstractCollection T[] toArray(T[])'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.AbstractCollection T[] toArray(T[]) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.AbstractCollection java.lang.Object[] toArray()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.AbstractCollection boolean addAll(java.util.Collection&lt;? extends E&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.AbstractCollection boolean containsAll(java.util.Collection&lt;?&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.AbstractCollection boolean removeAll(java.util.Collection&lt;?&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.AbstractCollection boolean retainAll(java.util.Collection&lt;?&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.AbstractMap java.util.Collection&lt;V&gt; values()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.AbstractMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
  <item name='java.util.AbstractMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque ArrayDeque()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.ArrayDeque ArrayDeque(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.ArrayDeque ArrayDeque(java.util.Collection&lt;? extends E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.ArrayDeque E element()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque E getFirst()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque E getLast()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque E pop()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque E remove()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque E removeFirst()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque E removeLast()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque boolean add(E) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque boolean offer(E) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque boolean offerFirst(E) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque boolean offerLast(E) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque void addFirst(E) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque void addLast(E) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayDeque void push(E) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayList ArrayList()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.ArrayList ArrayList(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.ArrayList ArrayList(int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.ArrayList ArrayList(java.util.Collection&lt;? extends E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList ArrayList(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.ArrayList java.util.Iterator&lt;E&gt; iterator()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayList java.util.ListIterator&lt;E&gt; listIterator()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ArrayList java.util.ListIterator&lt;E&gt; listIterator(int)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Arrays T[] copyOf(T[], int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays T[] copyOf(T[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays T[] copyOf(T[], int) 1'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.Arrays T[] copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays T[] copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays T[] copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;) 1'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.Arrays T[] copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays T[] copyOfRange(T[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays T[] copyOfRange(T[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays T[] copyOfRange(U[], int, int, java.lang.Class&lt;? extends T[]&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays T[] copyOfRange(U[], int, int, java.lang.Class&lt;? extends T[]&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays T[] copyOfRange(U[], int, int, java.lang.Class&lt;? extends T[]&gt;) 3">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays boolean deepEquals(java.lang.Object[], java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean deepEquals(java.lang.Object[], java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(boolean[], boolean[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(boolean[], boolean[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(byte[], byte[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(byte[], byte[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(char[], char[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(char[], char[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(double[], double[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(double[], double[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(float[], float[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(float[], float[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(int[], int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(int[], int[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(java.lang.Object[], java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(java.lang.Object[], java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(long[], long[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(long[], long[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(short[], short[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean equals(short[], short[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays boolean[] copyOf(boolean[], int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays boolean[] copyOf(boolean[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
    <item name='java.util.Arrays boolean[] copyOf(boolean[], int) 1'>
        <annotation name='org.jetbrains.annotations.Range'>
            <val name="from" val="0"/>
            <val name="to" val="java.lang.Integer.MAX_VALUE"/>
        </annotation>
    </item>
    <item name="java.util.Arrays boolean[] copyOfRange(boolean[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays boolean[] copyOfRange(boolean[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays byte[] copyOf(byte[], int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays byte[] copyOf(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays byte[] copyOf(byte[], int) 1'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.Arrays byte[] copyOfRange(byte[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays byte[] copyOfRange(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays char[] copyOf(char[], int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays char[] copyOf(char[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays char[] copyOf(char[], int) 1'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.Arrays char[] copyOfRange(char[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays char[] copyOfRange(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays double[] copyOf(double[], int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays double[] copyOf(double[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays double[] copyOf(double[], int) 1'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.Arrays double[] copyOfRange(double[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays double[] copyOfRange(double[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays float[] copyOf(float[], int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays float[] copyOf(float[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays float[] copyOf(float[], int) 1'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.Arrays float[] copyOfRange(float[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays float[] copyOfRange(float[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int binarySearch(T[], T, java.util.Comparator&lt;? super T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int binarySearch(T[], T, java.util.Comparator&lt;? super T&gt;) 2">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int binarySearch(T[], int, int, T, java.util.Comparator&lt;? super T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int binarySearch(T[], int, int, T, java.util.Comparator&lt;? super T&gt;) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays int binarySearch(T[], int, int, T, java.util.Comparator&lt;? super T&gt;) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(T[], int, int, T, java.util.Comparator&lt;? super T&gt;) 4">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int binarySearch(byte[], byte) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int binarySearch(byte[], int, int, byte) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int binarySearch(byte[], int, int, byte) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays int binarySearch(byte[], int, int, byte) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(char[], char) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int binarySearch(char[], int, int, char) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int binarySearch(char[], int, int, char) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays int binarySearch(char[], int, int, char) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(double[], double) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int binarySearch(double[], int, int, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int binarySearch(double[], int, int, double) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays int binarySearch(double[], int, int, double) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(float[], float) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int binarySearch(float[], int, int, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int binarySearch(float[], int, int, float) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays int binarySearch(float[], int, int, float) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int binarySearch(int[], int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int binarySearch(int[], int, int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays int binarySearch(int[], int, int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(java.lang.Object[], int, int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int binarySearch(java.lang.Object[], int, int, java.lang.Object) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays int binarySearch(java.lang.Object[], int, int, java.lang.Object) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(java.lang.Object[], java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int binarySearch(long[], int, int, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int binarySearch(long[], int, int, long) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays int binarySearch(long[], int, int, long) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(long[], long) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int binarySearch(short[], int, int, short) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int binarySearch(short[], int, int, short) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays int binarySearch(short[], int, int, short) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(short[], short) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int deepHashCode(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int hashCode(boolean[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int hashCode(byte[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int hashCode(char[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int hashCode(double[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int hashCode(float[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int hashCode(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int hashCode(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int hashCode(long[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int hashCode(short[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays int[] copyOf(int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int[] copyOf(int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays int[] copyOf(int[], int) 1'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int[] copyOfRange(int[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays int[] copyOfRange(int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String deepToString(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String deepToString(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(boolean[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(boolean[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(byte[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(byte[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(char[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(char[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(double[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(double[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(float[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(float[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(int[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(long[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(long[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(short[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.lang.String toString(short[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Arrays java.util.List&lt;T&gt; asList(T...)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays java.util.List&lt;T&gt; asList(T...) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays java.util.Spliterator&lt;T&gt; spliterator(T[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.Spliterator&lt;T&gt; spliterator(T[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.Spliterator.OfDouble spliterator(double[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.Spliterator.OfDouble spliterator(double[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.Spliterator.OfInt spliterator(int[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.Spliterator.OfInt spliterator(int[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.Spliterator.OfLong spliterator(long[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.Spliterator.OfLong spliterator(long[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.stream.DoubleStream stream(double[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.stream.DoubleStream stream(double[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.stream.IntStream stream(int[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.stream.IntStream stream(int[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.stream.LongStream stream(long[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.stream.LongStream stream(long[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.stream.Stream&lt;T&gt; stream(T[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Arrays java.util.stream.Stream&lt;T&gt; stream(T[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays java.util.stream.Stream&lt;T&gt; stream(T[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays long[] copyOf(long[], int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays long[] copyOf(long[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays long[] copyOf(long[], int) 1'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.Arrays long[] copyOfRange(long[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays long[] copyOfRange(long[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays short[] copyOf(short[], int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays short[] copyOf(short[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays short[] copyOf(short[], int) 1'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.Arrays short[] copyOfRange(short[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Arrays short[] copyOfRange(short[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(boolean[], boolean)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(boolean[], boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(boolean[], int, int, boolean)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(boolean[], int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(boolean[], int, int, boolean) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(boolean[], int, int, boolean) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(byte[], byte)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(byte[], byte) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(byte[], int, int, byte)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(byte[], int, int, byte) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(byte[], int, int, byte) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(byte[], int, int, byte) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(char[], char)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(char[], char) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(char[], int, int, char)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(char[], int, int, char) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(char[], int, int, char) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(char[], int, int, char) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(double[], double)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(double[], double) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(double[], int, int, double)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(double[], int, int, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(double[], int, int, double) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(double[], int, int, double) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(float[], float)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(float[], float) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(float[], int, int, float)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(float[], int, int, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(float[], int, int, float) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(float[], int, int, float) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(int[], int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(int[], int, int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(int[], int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(int[], int, int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(int[], int, int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(java.lang.Object[], int, int, java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(java.lang.Object[], int, int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(java.lang.Object[], int, int, java.lang.Object) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(java.lang.Object[], int, int, java.lang.Object) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(java.lang.Object[], java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(java.lang.Object[], java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(long[], int, int, long)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(long[], int, int, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(long[], int, int, long) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(long[], int, int, long) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(long[], long)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(long[], long) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(short[], int, int, short)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(short[], int, int, short) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void fill(short[], int, int, short) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(short[], int, int, short) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void fill(short[], short)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(short[], short) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void parallelPrefix(T[], int, int, java.util.function.BinaryOperator&lt;T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(T[], int, int, java.util.function.BinaryOperator&lt;T&gt;) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(T[], int, int, java.util.function.BinaryOperator&lt;T&gt;) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(T[], java.util.function.BinaryOperator&lt;T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(double[], int, int, java.util.function.DoubleBinaryOperator)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(double[], int, int, java.util.function.DoubleBinaryOperator) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(double[], int, int, java.util.function.DoubleBinaryOperator) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(double[], java.util.function.DoubleBinaryOperator)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(int[], int, int, java.util.function.IntBinaryOperator)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(int[], int, int, java.util.function.IntBinaryOperator) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(int[], int, int, java.util.function.IntBinaryOperator) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(int[], java.util.function.IntBinaryOperator)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(long[], int, int, java.util.function.LongBinaryOperator)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(long[], int, int, java.util.function.LongBinaryOperator) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(long[], int, int, java.util.function.LongBinaryOperator) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelPrefix(long[], java.util.function.LongBinaryOperator)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSetAll(T[], java.util.function.IntFunction&lt;? extends T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSetAll(double[], java.util.function.IntToDoubleFunction)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSetAll(int[], java.util.function.IntUnaryOperator)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSetAll(long[], java.util.function.IntToLongFunction)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(T[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(T[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(T[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(T[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(T[], int, int, java.util.Comparator&lt;? super T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(T[], int, int, java.util.Comparator&lt;? super T&gt;) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(T[], int, int, java.util.Comparator&lt;? super T&gt;) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(T[], java.util.Comparator&lt;? super T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(byte[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(byte[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(byte[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(byte[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(char[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(char[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(char[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(char[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(double[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(double[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(double[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(double[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(float[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(float[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(float[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(float[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(int[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(int[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(int[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(int[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(long[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(long[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(long[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(long[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(short[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(short[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(short[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void parallelSort(short[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void setAll(T[], java.util.function.IntFunction&lt;? extends T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void setAll(double[], java.util.function.IntToDoubleFunction)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void setAll(int[], java.util.function.IntUnaryOperator)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void setAll(long[], java.util.function.IntToLongFunction)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void sort(T[], int, int, java.util.Comparator&lt;? super T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(T[], int, int, java.util.Comparator&lt;? super T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(T[], int, int, java.util.Comparator&lt;? super T&gt;) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(T[], int, int, java.util.Comparator&lt;? super T&gt;) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name="java.util.Arrays void sort(T[], int, int, java.util.Comparator&lt;? super T&gt;) 3">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name='java.util.Arrays void sort(T[], java.util.Comparator&lt;? super T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Arrays void sort(T[], java.util.Comparator&lt;? super T&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Arrays void sort(T[], java.util.Comparator&lt;? super T&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name='java.util.Arrays void sort(byte[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(byte[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(byte[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(byte[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(char[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(char[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(char[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(char[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(double[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(double[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(double[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(double[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(double[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(double[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(float[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(float[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(float[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(float[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(float[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(int[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(int[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(int[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(int[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(java.lang.Object[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(java.lang.Object[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(java.lang.Object[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(java.lang.Object[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(java.lang.Object[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(long[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(long[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(long[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(long[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(long[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(short[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(short[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(short[], int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void sort(short[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Arrays void sort(short[], int, int) 1'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.Arrays void sort(short[], int, int) 2'>
      <annotation name='org.jetbrains.annotations.Range'>
          <val name="from" val="0"/>
          <val name="to" val="java.lang.Integer.MAX_VALUE"/>
      </annotation>
  </item>
  <item name='java.util.BitSet boolean get(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet boolean intersects(java.util.BitSet)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet boolean intersects(java.util.BitSet) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet boolean isEmpty()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet byte[] toByteArray()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet int cardinality()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet int length()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet int nextClearBit(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet int nextSetBit(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet int previousClearBit(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet int previousSetBit(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet int size()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet java.util.BitSet get(int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet java.util.BitSet valueOf(byte[])'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet java.util.BitSet valueOf(byte[]) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet java.util.BitSet valueOf(java.nio.ByteBuffer)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.BitSet java.util.BitSet valueOf(java.nio.ByteBuffer) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet java.util.BitSet valueOf(java.nio.LongBuffer)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet java.util.BitSet valueOf(java.nio.LongBuffer) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet java.util.BitSet valueOf(long[])'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet java.util.BitSet valueOf(long[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.BitSet java.util.stream.IntStream stream()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
      <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
  <item name='java.util.BitSet long[] toLongArray()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet void and(java.util.BitSet)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void and(java.util.BitSet) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet void andNot(java.util.BitSet)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void andNot(java.util.BitSet) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet void clear()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void clear(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void clear(int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void flip(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void flip(int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void or(java.util.BitSet)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void or(java.util.BitSet) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.BitSet void set(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void set(int, boolean)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void set(int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void set(int, int, boolean)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void xor(java.util.BitSet)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.BitSet void xor(java.util.BitSet) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Calendar boolean isSet(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar int get(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar int getActualMaximum(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar int getActualMinimum(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar int getFirstDayOfWeek()">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.SUNDAY, java.util.Calendar.MONDAY, java.util.Calendar.TUESDAY, java.util.Calendar.WEDNESDAY, java.util.Calendar.THURSDAY, java.util.Calendar.FRIDAY, java.util.Calendar.SATURDAY}" />
    </annotation>
  </item>
  <item name="java.util.Calendar int getGreatestMinimum(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar int getLeastMaximum(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar int getMaximum(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar int getMinimum(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar java.lang.String getDisplayName(int, int, java.util.Locale) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar java.lang.String getDisplayName(int, int, java.util.Locale) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.SHORT, java.util.Calendar.LONG}" />
    </annotation>
  </item>
  <item name="java.util.Calendar java.util.Map&lt;java.lang.String,java.lang.Integer&gt; getDisplayNames(int, int, java.util.Locale) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar java.util.Map&lt;java.lang.String,java.lang.Integer&gt; getDisplayNames(int, int, java.util.Locale) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.SHORT, java.util.Calendar.LONG, java.util.Calendar.ALL_STYLES}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void add(int, int) 0" >
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void clear(int) 0" >
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void roll(int, boolean) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void roll(int, int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void set(int, int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.ERA, java.util.Calendar.YEAR, java.util.Calendar.MONTH, java.util.Calendar.WEEK_OF_YEAR, java.util.Calendar.WEEK_OF_MONTH, java.util.Calendar.DATE, java.util.Calendar.DAY_OF_MONTH, java.util.Calendar.DAY_OF_YEAR, java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.DAY_OF_WEEK_IN_MONTH, java.util.Calendar.AM_PM, java.util.Calendar.HOUR, java.util.Calendar.HOUR_OF_DAY, java.util.Calendar.MINUTE, java.util.Calendar.SECOND, java.util.Calendar.MILLISECOND, java.util.Calendar.ZONE_OFFSET, java.util.Calendar.DST_OFFSET}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void set(int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void set(int, int, int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void set(int, int, int, int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void setFirstDayOfWeek(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.SUNDAY, java.util.Calendar.MONDAY, java.util.Calendar.TUESDAY, java.util.Calendar.WEDNESDAY, java.util.Calendar.THURSDAY, java.util.Calendar.FRIDAY, java.util.Calendar.SATURDAY}" />
    </annotation>
  </item>
  <item name="java.util.Calendar void setWeekDate(int, int, int) 2">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.SUNDAY, java.util.Calendar.MONDAY, java.util.Calendar.TUESDAY, java.util.Calendar.WEDNESDAY, java.util.Calendar.THURSDAY, java.util.Calendar.FRIDAY, java.util.Calendar.SATURDAY}" />
    </annotation>
  </item>
  <item name="java.util.Collection T[] toArray(T[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collection T[] toArray(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collection boolean add(E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collection boolean addAll(java.util.Collection&lt;? extends E&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collection boolean addAll(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collection boolean contains(java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collection boolean containsAll(java.util.Collection&lt;?&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collection boolean containsAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collection boolean remove(java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collection boolean removeAll(java.util.Collection&lt;?&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collection boolean removeAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collection boolean retainAll(java.util.Collection&lt;?&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collection boolean retainAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collection int size()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collection java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
      <annotation name='org.jetbrains.annotations.Contract'>
          <val name="pure" val="true"/>
      </annotation>
  </item>
  <item name="java.util.Collection java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collection java.util.Spliterator&lt;E&gt; spliterator()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collection java.util.stream.Stream&lt;E&gt; parallelStream()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collection java.util.stream.Stream&lt;E&gt; stream()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collection void clear()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Collections EMPTY_LIST'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Unmodifiable'/>
  </item>
  <item name='java.util.Collections EMPTY_MAP'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Unmodifiable'/>
  </item>
  <item name='java.util.Collections EMPTY_SET'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Unmodifiable'/>
  </item>
  <item name='java.util.Collections T max(java.util.Collection&lt;? extends T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections T max(java.util.Collection&lt;? extends T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections T max(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections T max(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections T max(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name='java.util.Collections T min(java.util.Collection&lt;? extends T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections T min(java.util.Collection&lt;? extends T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections T min(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections T min(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections T min(java.util.Collection&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name='java.util.Collections boolean addAll(java.util.Collection&lt;? super T&gt;, T...)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections boolean addAll(java.util.Collection&lt;? super T&gt;, T...) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections boolean addAll(java.util.Collection&lt;? super T&gt;, T...) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections boolean disjoint(java.util.Collection&lt;?&gt;, java.util.Collection&lt;?&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections boolean disjoint(java.util.Collection&lt;?&gt;, java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections boolean disjoint(java.util.Collection&lt;?&gt;, java.util.Collection&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections boolean replaceAll(java.util.List&lt;T&gt;, T, T)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections boolean replaceAll(java.util.List&lt;T&gt;, T, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections boolean replaceAll(java.util.List&lt;T&gt;, T, T) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Collections boolean replaceAll(java.util.List&lt;T&gt;, T, T) 2">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name='java.util.Collections int binarySearch(java.util.List&lt;? extends T&gt;, T, java.util.Comparator&lt;? super T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections int binarySearch(java.util.List&lt;? extends T&gt;, T, java.util.Comparator&lt;? super T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections int binarySearch(java.util.List&lt;? extends T&gt;, T, java.util.Comparator&lt;? super T&gt;) 2">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name='java.util.Collections int binarySearch(java.util.List&lt;? extends java.lang.Comparable&lt;? super T&gt;&gt;, T)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections int binarySearch(java.util.List&lt;? extends java.lang.Comparable&lt;? super T&gt;&gt;, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections int frequency(java.util.Collection&lt;?&gt;, java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections int frequency(java.util.Collection&lt;?&gt;, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections int indexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="-1"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE-1"/>
    </annotation>
  </item>
  <item name="java.util.Collections int indexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections int indexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections int lastIndexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;)'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="-1"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE-1"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections int lastIndexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections int lastIndexOfSubList(java.util.List&lt;?&gt;, java.util.List&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.ArrayList&lt;T&gt; list(java.util.Enumeration&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.ArrayList&lt;T&gt; list(java.util.Enumeration&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections java.util.Collection&lt;E&gt; checkedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Collection&lt;E&gt; checkedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Collection&lt;E&gt; checkedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections java.util.Collection&lt;T&gt; synchronizedCollection(java.util.Collection&lt;T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.Collection&lt;T&gt; synchronizedCollection(java.util.Collection&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Collection&lt;T&gt; unmodifiableCollection(java.util.Collection&lt;? extends T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.UnmodifiableView" />
  </item>
  <item name="java.util.Collections java.util.Collection&lt;T&gt; unmodifiableCollection(java.util.Collection&lt;? extends T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Comparator&lt;T&gt; reverseOrder()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Comparator&lt;T&gt; reverseOrder(java.util.Comparator&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Comparator&lt;T&gt; reverseOrder(java.util.Comparator&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Collections java.util.Enumeration&lt;T&gt; emptyEnumeration()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Enumeration&lt;T&gt; enumeration(java.util.Collection&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Enumeration&lt;T&gt; enumeration(java.util.Collection&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.Iterator&lt;T&gt; emptyIterator()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.List&lt;E&gt; checkedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.List&lt;E&gt; checkedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;E&gt; checkedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; emptyList()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.Unmodifiable" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; nCopies(int, T)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.Unmodifiable" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; nCopies(int, T) 1">
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; singletonList(T)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.Unmodifiable" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; singletonList(T) 0">
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.List&lt;T&gt; synchronizedList(java.util.List&lt;T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; synchronizedList(java.util.List&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; unmodifiableList(java.util.List&lt;? extends T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.UnmodifiableView" />
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; unmodifiableList(java.util.List&lt;? extends T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.ListIterator&lt;T&gt; emptyListIterator()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.Map&lt;K,V&gt; checkedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; checkedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; checkedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; checkedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; emptyMap()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.Unmodifiable" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; singletonMap(K, V)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.Unmodifiable" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.Map&lt;K,V&gt; synchronizedMap(java.util.Map&lt;K,V&gt;)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; synchronizedMap(java.util.Map&lt;K,V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; unmodifiableMap(java.util.Map&lt;? extends K,? extends V&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.UnmodifiableView" />
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; unmodifiableMap(java.util.Map&lt;? extends K,? extends V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections java.util.NavigableMap&lt;K,V&gt; checkedNavigableMap(java.util.NavigableMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Collections java.util.NavigableMap&lt;K,V&gt; emptyNavigableMap()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Collections java.util.NavigableMap&lt;K,V&gt; synchronizedNavigableMap(java.util.NavigableMap&lt;K,V&gt;)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.NavigableSet&lt;E&gt; checkedNavigableSet(java.util.NavigableSet&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.NavigableSet&lt;E&gt; emptyNavigableSet()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.NavigableSet&lt;T&gt; synchronizedNavigableSet(java.util.NavigableSet&lt;T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Collections java.util.Queue&lt;E&gt; checkedQueue(java.util.Queue&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.Queue&lt;E&gt; checkedQueue(java.util.Queue&lt;E&gt;, java.lang.Class&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Queue&lt;E&gt; checkedQueue(java.util.Queue&lt;E&gt;, java.lang.Class&lt;E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections java.util.Queue&lt;T&gt; asLifoQueue(java.util.Deque&lt;T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.Queue&lt;T&gt; asLifoQueue(java.util.Deque&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.Set&lt;E&gt; checkedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.Set&lt;E&gt; checkedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;E&gt; checkedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections java.util.Set&lt;E&gt; newSetFromMap(java.util.Map&lt;E,java.lang.Boolean&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.Set&lt;E&gt; newSetFromMap(java.util.Map&lt;E,java.lang.Boolean&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; emptySet()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.Unmodifiable" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; singleton(T)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.Unmodifiable" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; singleton(T) 0">
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.Set&lt;T&gt; synchronizedSet(java.util.Set&lt;T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; synchronizedSet(java.util.Set&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; unmodifiableSet(java.util.Set&lt;? extends T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.UnmodifiableView" />
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; unmodifiableSet(java.util.Set&lt;? extends T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; checkedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.SortedMap&lt;K,V&gt; checkedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.SortedMap&lt;K,V&gt; checkedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.SortedMap&lt;K,V&gt; checkedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; emptySortedMap()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Collections java.util.SortedMap&lt;K,V&gt; synchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Collections java.util.SortedMap&lt;K,V&gt; synchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.SortedMap&lt;K,V&gt; unmodifiableSortedMap(java.util.SortedMap&lt;K,? extends V&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.UnmodifiableView" />
  </item>
  <item name="java.util.Collections java.util.SortedMap&lt;K,V&gt; unmodifiableSortedMap(java.util.SortedMap&lt;K,? extends V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Collections java.util.SortedSet&lt;E&gt; checkedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedSet&lt;E&gt; checkedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedSet&lt;E&gt; checkedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections java.util.SortedSet&lt;E&gt; emptySortedSet()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.Unmodifiable" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections java.util.SortedSet&lt;T&gt; synchronizedSortedSet(java.util.SortedSet&lt;T&gt;)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedSet&lt;T&gt; synchronizedSortedSet(java.util.SortedSet&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedSet&lt;T&gt; unmodifiableSortedSet(java.util.SortedSet&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name="org.jetbrains.annotations.UnmodifiableView" />
  </item>
  <item name="java.util.Collections java.util.SortedSet&lt;T&gt; unmodifiableSortedSet(java.util.SortedSet&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Collections void copy(java.util.List&lt;? super T&gt;, java.util.List&lt;? extends T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections void copy(java.util.List&lt;? super T&gt;, java.util.List&lt;? extends T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void copy(java.util.List&lt;? super T&gt;, java.util.List&lt;? extends T&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void fill(java.util.List&lt;? super T&gt;, T)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections void fill(java.util.List&lt;? super T&gt;, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void reverse(java.util.List&lt;?&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections void reverse(java.util.List&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void rotate(java.util.List&lt;?&gt;, int)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections void rotate(java.util.List&lt;?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void shuffle(java.util.List&lt;?&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections void shuffle(java.util.List&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void shuffle(java.util.List&lt;?&gt;, java.util.Random)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections void shuffle(java.util.List&lt;?&gt;, java.util.Random) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void shuffle(java.util.List&lt;?&gt;, java.util.Random) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void sort(java.util.List&lt;T&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections void sort(java.util.List&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void sort(java.util.List&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections void sort(java.util.List&lt;T&gt;, java.util.Comparator&lt;? super T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.Collections void sort(java.util.List&lt;T&gt;, java.util.Comparator&lt;? super T&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable" />
  </item>
  <item name="java.util.Collections void swap(java.util.List&lt;?&gt;, int, int)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;param1&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Collections void swap(java.util.List&lt;?&gt;, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Comparator int compare(T, T)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Date Date(int, int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Date Date(int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
  </item>
  <item name='java.util.Date Date(int, int, int, int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Date Date(int, int, int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
  </item>
  <item name='java.util.Date Date(int, int, int, int, int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Date Date(int, int, int, int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
  </item>
  <item name='java.util.Date Date(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Date boolean after(java.util.Date)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Date boolean before(java.util.Date)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Date int getDate()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="1"/>
      <val name="to" val="31"/>
    </annotation>
  </item>
  <item name='java.util.Date int getDay()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="6"/>
    </annotation>
  </item>
  <item name='java.util.Date int getHours()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="23"/>
    </annotation>
  </item>
  <item name='java.util.Date int getMinutes()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="59"/>
    </annotation>
  </item>
  <item name="java.util.Date int getMonth()">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="11"/>
    </annotation>
  </item>
  <item name='java.util.Date int getSeconds()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="61"/>
    </annotation>
  </item>
  <item name='java.util.Date int getYear()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Date java.lang.Object clone()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;-&gt; new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Date long UTC(int, int, int, int, int, int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Date long UTC(int, int, int, int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
  </item>
  <item name='java.util.Date long getTime()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Date long parse(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Date void setDate(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Date void setDate(int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="1"/>
      <val name="to" val="31"/>
    </annotation>
  </item>
  <item name='java.util.Date void setHours(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Date void setHours(int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="23"/>
    </annotation>
  </item>
  <item name='java.util.Date void setMinutes(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Date void setMinutes(int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="60"/>
    </annotation>
  </item>
  <item name='java.util.Date void setMonth(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Date void setMonth(int) 0">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="11"/>
    </annotation>
  </item>
  <item name='java.util.Date void setSeconds(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Date void setSeconds(int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="61"/>
    </annotation>
  </item>
  <item name='java.util.Date void setTime(long)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Date void setYear(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Deque java.util.Iterator&lt;E&gt; descendingIterator()">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Enumeration boolean hasMoreElements()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Formatter Formatter(java.io.File) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.File, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.File, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.File, java.lang.String, java.util.Locale) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.File, java.lang.String, java.util.Locale) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.OutputStream) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.OutputStream, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.OutputStream, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.OutputStream, java.lang.String, java.util.Locale) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.OutputStream, java.lang.String, java.util.Locale) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.io.PrintStream) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.lang.String, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.lang.String, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.lang.String, java.lang.String, java.util.Locale) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter Formatter(java.lang.String, java.lang.String, java.util.Locale) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Formatter java.lang.String toString()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.Formatter java.util.Formatter format(java.lang.String, java.lang.Object...) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.Formatter java.util.Formatter format(java.util.Locale, java.lang.String, java.lang.Object...) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.GregorianCalendar GregorianCalendar(int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="11"/>
    </annotation>
  </item>
  <item name='java.util.GregorianCalendar GregorianCalendar(int, int, int) 2'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="1"/>
      <val name="to" val="31"/>
    </annotation>
  </item>
  <item name="java.util.GregorianCalendar GregorianCalendar(int, int, int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="11"/>
    </annotation>
  </item>
  <item name='java.util.GregorianCalendar GregorianCalendar(int, int, int, int, int) 2'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="1"/>
      <val name="to" val="31"/>
    </annotation>
  </item>
  <item name='java.util.GregorianCalendar GregorianCalendar(int, int, int, int, int) 3'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="23"/>
    </annotation>
  </item>
  <item name='java.util.GregorianCalendar GregorianCalendar(int, int, int, int, int) 4'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="59"/>
    </annotation>
  </item>
  <item name="java.util.GregorianCalendar GregorianCalendar(int, int, int, int, int, int) 1">
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="intValues" val="{java.util.Calendar.JANUARY, java.util.Calendar.FEBRUARY, java.util.Calendar.MARCH, java.util.Calendar.APRIL, java.util.Calendar.MAY, java.util.Calendar.JUNE, java.util.Calendar.JULY, java.util.Calendar.AUGUST, java.util.Calendar.SEPTEMBER, java.util.Calendar.OCTOBER, java.util.Calendar.NOVEMBER, java.util.Calendar.DECEMBER}" />
    </annotation>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="11"/>
    </annotation>
  </item>
  <item name='java.util.GregorianCalendar GregorianCalendar(int, int, int, int, int, int) 2'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="1"/>
      <val name="to" val="31"/>
    </annotation>
  </item>
  <item name='java.util.GregorianCalendar GregorianCalendar(int, int, int, int, int, int) 3'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="23"/>
    </annotation>
  </item>
  <item name='java.util.GregorianCalendar GregorianCalendar(int, int, int, int, int, int) 4'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="59"/>
    </annotation>
  </item>
  <item name='java.util.GregorianCalendar GregorianCalendar(int, int, int, int, int, int) 5'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="61"/>
    </annotation>
  </item>
  <item name='java.util.HashMap HashMap()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.HashMap HashMap(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.HashMap HashMap(int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.HashMap HashMap(int, float)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.HashMap HashMap(int, float) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.HashMap HashMap(java.util.Map&lt;? extends K,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.HashSet HashSet()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.HashSet HashSet(int)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.HashSet HashSet(int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.HashSet HashSet(int, float)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.HashSet HashSet(int, float) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.HashSet HashSet(java.util.Collection&lt;? extends E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.HashSet HashSet(java.util.Collection&lt;? extends E&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Iterator boolean hasNext()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.LinkedHashSet LinkedHashSet(java.util.Collection&lt;? extends E&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.LinkedList LinkedList(java.util.Collection&lt;? extends E&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List E get(int)'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.List E get(int) 0">
    <annotation name="org.jetbrains.annotations.Range" >
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.List E remove(int)'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
    <item name='java.util.List E remove(int) 0'>
        <annotation name='org.jetbrains.annotations.Range'>
            <val name="from" val="0"/>
            <val name="to" val="java.lang.Integer.MAX_VALUE"/>
        </annotation>
    </item>
    <item name='java.util.List E set(int, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List E set(int, E) 1'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.List T[] toArray(T[])">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.List T[] toArray(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.List boolean add(E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_-&gt;true&quot;"/>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.List boolean add(E) 0'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.List boolean addAll(int, java.util.Collection&lt;? extends E&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.List boolean addAll(int, java.util.Collection&lt;? extends E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.List boolean addAll(java.util.Collection&lt;? extends E&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.List boolean addAll(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List boolean contains(java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List boolean containsAll(java.util.Collection&lt;?&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.List boolean containsAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.List boolean remove(java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.List boolean removeAll(java.util.Collection&lt;?&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.List boolean removeAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.List boolean retainAll(java.util.Collection&lt;?&gt;)">
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.List boolean retainAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.List java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.List java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; copyOf(java.util.Collection&lt;? extends E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E, E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E, E, E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E, E, E, E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E, E, E, E, E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List java.util.List&lt;E&gt; of(E...)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.List java.util.List&lt;E&gt; subList(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name="java.util.List java.util.ListIterator&lt;E&gt; listIterator()">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.List java.util.ListIterator&lt;E&gt; listIterator(int)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name='java.util.List void add(int, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.List void add(int, E) 1'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.List void replaceAll(java.util.function.UnaryOperator&lt;E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.List void sort(java.util.Comparator&lt;? super E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Map int size()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map V compute(K, java.util.function.BiFunction&lt;? super K,? super V,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Map V compute(K, java.util.function.BiFunction&lt;? super K,? super V,? extends V&gt;) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Map V computeIfAbsent(K, java.util.function.Function&lt;? super K,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Map V computeIfAbsent(K, java.util.function.Function&lt;? super K,? extends V&gt;) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Map V computeIfPresent(K, java.util.function.BiFunction&lt;? super K,? super V,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Map V computeIfPresent(K, java.util.function.BiFunction&lt;? super K,? super V,? extends V&gt;) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Map V get(java.lang.Object)'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="source" val="&quot;this.values&quot;"/>
      <val name="sourceIsContainer" val="true" />
    </annotation>
  </item>
  <item name='java.util.Map V merge(K, V, java.util.function.BiFunction&lt;? super V,? super V,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Map V merge(K, V, java.util.function.BiFunction&lt;? super V,? super V,? extends V&gt;) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Map V merge(K, V, java.util.function.BiFunction&lt;? super V,? super V,? extends V&gt;) 2'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Map V put(K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="source" val="&quot;this.values&quot;"/>
      <val name="sourceIsContainer" val="true" />
    </annotation>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.Map V put(K, V) 0'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="target" val="&quot;this.keys&quot;"/>
      <val name="targetIsContainer" val="true" />
    </annotation>
  </item>
  <item name='java.util.Map V put(K, V) 1'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="target" val="&quot;this.values&quot;"/>
      <val name="targetIsContainer" val="true" />
    </annotation>
  </item>
  <item name='java.util.Map V putIfAbsent(K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.Map V remove(java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="source" val="&quot;this.values&quot;"/>
      <val name="sourceIsContainer" val="true" />
    </annotation>
  </item>
  <item name='java.util.Map V replace(K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.Map boolean remove(java.lang.Object, java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Map boolean replace(K, V, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Map java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="source" val="&quot;this.values&quot;"/>
      <val name="sourceIsContainer" val="true" />
      <val name="targetIsContainer" val="true" />
    </annotation>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; copyOf(java.util.Map&lt;? extends K,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V, K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V, K, V, K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V, K, V, K, V, K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V, K, V, K, V, K, V, K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V, K, V, K, V, K, V, K, V, K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V, K, V, K, V, K, V, K, V, K, V, K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map&lt;K,V&gt; ofEntries(java.util.Map.Entry&lt;? extends K,? extends V&gt;...)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map java.util.Map.Entry&lt;K,V&gt; entry(K, V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Map java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="source" val="&quot;this.keys&quot;"/>
      <val name="sourceIsContainer" val="true" />
      <val name="targetIsContainer" val="true" />
    </annotation>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Map java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map void clear()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Map void putAll(java.util.Map&lt;? extends K,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.Map void putAll(java.util.Map&lt;? extends K,? extends V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name='java.util.Map void replaceAll(java.util.function.BiFunction&lt;? super K,? super V,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Map.Entry K getKey()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map.Entry V getValue()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Map.Entry V setValue(V)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.NavigableSet E ceiling(E)'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.NavigableSet E floor(E)'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.NavigableSet E higher(E)'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.NavigableSet E lower(E)'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.NavigableSet E pollFirst()'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.NavigableSet E pollLast()'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name="java.util.NavigableSet java.util.Iterator&lt;E&gt; descendingIterator()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.NavigableSet java.util.Iterator&lt;E&gt; iterator()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name="java.util.NavigableSet java.util.NavigableSet&lt;E&gt; descendingSet()">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.NavigableSet java.util.NavigableSet&lt;E&gt; headSet(E, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.NavigableSet java.util.NavigableSet&lt;E&gt; subSet(E, boolean, E, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.NavigableSet java.util.NavigableSet&lt;E&gt; tailSet(E, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.NavigableSet java.util.SortedSet&lt;E&gt; headSet(E)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.NavigableSet java.util.SortedSet&lt;E&gt; subSet(E, E)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.NavigableSet java.util.SortedSet&lt;E&gt; tailSet(E)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Objects T requireNonNull(T, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NonNls'/>
  </item>
  <item name='java.util.Objects T requireNonNullElse(T, T)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;!null, _ -&gt; param1; null, !null -&gt; param2; null, null -&gt; fail&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Objects T requireNonNullElseGet(T, java.util.function.Supplier&lt;? extends T&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;!null, _ -&gt; param1; null, _ -&gt; !null&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Objects boolean equals(java.lang.Object, java.lang.Object) 0'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.Objects boolean equals(java.lang.Object, java.lang.Object) 1'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.Objects java.lang.String toString(java.lang.Object, java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;null, _ -&gt; param2&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Optional java.util.Optional&lt;T&gt; of(T) 0'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Optional java.util.Optional&lt;T&gt; ofNullable(T) 0'>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Optional T get()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Optional T orElse(T)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;!null -&gt; !null&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Optional T orElse(T) 0'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Properties java.lang.String getProperty(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NonNls'/>
  </item>
  <item name='java.util.Properties java.lang.String getProperty(java.lang.String, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NonNls'/>
  </item>
  <item name='java.util.Properties java.lang.String getProperty(java.lang.String, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NonNls'/>
  </item>
  <item name='java.util.Properties void store(java.io.OutputStream, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='java.util.Queue E element()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Queue E peek()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Queue E poll()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Queue E remove()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Queue boolean offer(E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Random int nextInt(int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="1"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.Random java.util.stream.IntStream ints(long) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Long.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.Random java.util.stream.IntStream ints(long, int, int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Long.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.Random java.util.stream.LongStream longs(long) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Long.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.Random java.util.stream.LongStream longs(long, long, long) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Long.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.ResourceBundle boolean containsKey(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.lang.Object getObject(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.lang.Object getObject(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.lang.Object handleGetObject(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.lang.String getString(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.Nls'/>
  </item>
  <item name='java.util.ResourceBundle java.lang.String getString(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.PropertyKey'/>
  </item>
  <item name='java.util.ResourceBundle java.lang.String[] getStringArray(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.lang.String[] getStringArray(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.Enumeration&lt;java.lang.String&gt; getKeys()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader) 2'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle.Control) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle.Control) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle.Control) 2'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle.Control) 3'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.util.ResourceBundle.Control) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.util.ResourceBundle.Control) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item
      name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.util.ResourceBundle.Control) 2'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.ResourceBundle.Control) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.ResourceBundle getBundle(java.lang.String, java.util.ResourceBundle.Control) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.Set&lt;java.lang.String&gt; handleKeySet()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle java.util.Set&lt;java.lang.String&gt; keySet()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.ResourceBundle void clearCache(java.lang.ClassLoader) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.io.File) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.io.File, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.io.File, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.io.InputStream) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.io.InputStream, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.io.InputStream, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.lang.Readable) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.nio.channels.ReadableByteChannel) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.nio.channels.ReadableByteChannel, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.nio.channels.ReadableByteChannel, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.nio.file.Path) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.nio.file.Path, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner Scanner(java.nio.file.Path, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner boolean hasNext(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.NonNls'/>
  </item>
  <item name='java.util.Scanner boolean hasNext(java.util.regex.Pattern) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner java.lang.String findInLine(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.NonNls'/>
  </item>
  <item name='java.util.Scanner java.lang.String findInLine(java.util.regex.Pattern) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner java.lang.String findWithinHorizon(java.lang.String, int) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.NonNls'/>
  </item>
  <item name='java.util.Scanner java.lang.String findWithinHorizon(java.util.regex.Pattern, int) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner java.lang.String next(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.NonNls'/>
  </item>
  <item name='java.util.Scanner java.lang.String next(java.util.regex.Pattern) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner java.util.Scanner skip(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.jetbrains.annotations.NonNls'/>
  </item>
  <item name='java.util.Scanner java.util.Scanner skip(java.util.regex.Pattern) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner java.util.Scanner useDelimiter(java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner java.util.Scanner useDelimiter(java.util.regex.Pattern) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Scanner java.util.Scanner useLocale(java.util.Locale) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Set T[] toArray(T[])'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Set T[] toArray(T[]) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Set boolean add(E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="mutates" val="&quot;this&quot;"/>
    </annotation>
  </item>
  <item name='java.util.Set boolean addAll(java.util.Collection&lt;? extends E&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Set boolean contains(java.lang.Object)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
    <item name='java.util.Set boolean containsAll(java.util.Collection&lt;?&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Set boolean removeAll(java.util.Collection&lt;?&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Set boolean retainAll(java.util.Collection&lt;?&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Set java.lang.Object[] toArray()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Set java.util.Iterator&lt;E&gt; iterator()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; copyOf(java.util.Collection&lt;? extends E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of()'>
        <annotation name='org.jetbrains.annotations.Contract'>
            <val name="pure" val="true"/>
        </annotation>
    </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E, E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E, E, E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E, E, E, E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E, E, E, E, E, E, E, E, E, E)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="value" val="&quot;_,_,_,_,_,_,_,_,_,_-&gt;new&quot;"/>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Set java.util.Set&lt;E&gt; of(E...)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SortedMap java.util.SortedMap&lt;K,V&gt; headMap(K)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.SortedMap java.util.SortedMap&lt;K,V&gt; subMap(K, K)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.SortedMap java.util.SortedMap&lt;K,V&gt; tailMap(K)">
    <annotation name="org.jetbrains.annotations.NotNull" />
  </item>
  <item name="java.util.SortedSet java.util.Comparator&lt;? super E&gt; comparator()">
    <annotation name="org.jetbrains.annotations.Nullable" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SortedSet java.util.SortedSet&lt;E&gt; headSet(E)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SortedSet java.util.SortedSet&lt;E&gt; subSet(E, E)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SortedSet java.util.SortedSet&lt;E&gt; tailSet(E)">
    <annotation name="org.jetbrains.annotations.NotNull" />
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.Spliterator boolean hasCharacteristics(int) 0'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterator int characteristics()'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator&lt;T&gt; spliterator(java.util.Collection&lt;? extends T&gt;, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator&lt;T&gt; spliterator(java.util.Iterator&lt;? extends T&gt;, long, int) 2'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator&lt;T&gt; spliteratorUnknownSize(java.util.Iterator&lt;? extends T&gt;, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator.OfDouble spliterator(double[], int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator.OfDouble spliterator(double[], int, int, int) 3'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator.OfDouble spliterator(java.util.PrimitiveIterator.OfDouble, long, int) 2'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator.OfDouble spliteratorUnknownSize(java.util.PrimitiveIterator.OfDouble, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator.OfInt spliterator(java.util.PrimitiveIterator.OfInt, long, int) 2'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator.OfInt spliteratorUnknownSize(java.util.PrimitiveIterator.OfInt, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator.OfLong spliterator(java.util.PrimitiveIterator.OfLong, long, int) 2'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators java.util.Spliterator.OfLong spliteratorUnknownSize(java.util.PrimitiveIterator.OfLong, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators.AbstractDoubleSpliterator AbstractDoubleSpliterator(long, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators.AbstractIntSpliterator AbstractIntSpliterator(long, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators.AbstractLongSpliterator AbstractLongSpliterator(long, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators.AbstractSpliterator AbstractSpliterator(long, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.Spliterators.IteratorSpliterator IteratorSpliterator(java.util.Iterator&lt;? extends T&gt;, int) 1'>
    <annotation name="org.intellij.lang.annotations.MagicConstant">
      <val name="flagsFromClass" val="java.util.Spliterator.class" />
    </annotation>
  </item>
  <item name='java.util.SplittableRandom int nextInt(int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="1"/>
      <val name="to" val="java.lang.Integer.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.SplittableRandom java.util.stream.IntStream ints(long) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Long.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.SplittableRandom java.util.stream.IntStream ints(long, int, int) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Long.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.SplittableRandom java.util.stream.LongStream longs(long) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Long.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.SplittableRandom java.util.stream.LongStream longs(long, long, long) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="0"/>
      <val name="to" val="java.lang.Long.MAX_VALUE"/>
    </annotation>
  </item>
  <item name='java.util.SplittableRandom long nextLong(long) 0'>
    <annotation name='org.jetbrains.annotations.Range'>
      <val name="from" val="1"/>
      <val name="to" val="java.lang.Long.MAX_VALUE"/>
    </annotation>
  </item>
  <item name="java.util.TimeZone java.util.TimeZone getTimeZone(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NonNls" />
  </item>
  <item name='java.util.TreeMap TreeMap()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.TreeMap TreeMap(java.util.Comparator&lt;? super K&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.TreeMap TreeMap(java.util.Map&lt;? extends K,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.TreeMap TreeMap(java.util.SortedMap&lt;K,? extends V&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.TreeSet TreeSet()'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.TreeSet TreeSet(java.util.Collection&lt;? extends E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.TreeSet TreeSet(java.util.Collection&lt;? extends E&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
  <item name='java.util.TreeSet TreeSet(java.util.Comparator&lt;? super E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name='java.util.TreeSet TreeSet(java.util.SortedSet&lt;E&gt;)'>
    <annotation name='org.jetbrains.annotations.Contract'>
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID">
    <annotation name="org.jetbrains.annotations.NonNls" />
  </item>
  <item name='java.util.Vector Vector(java.util.Collection&lt;? extends E&gt;) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
    <annotation name='org.intellij.lang.annotations.Flow'>
      <val name="sourceIsContainer" val="true"/>
      <val name="targetIsContainer" val="true"/>
    </annotation>
  </item>
</root>

