public class TypePattern {
    public static fun foo(x: java.lang.Number) : int {
        var b: Box<Ball> = Box(null)
        switch (b)
            Box(RedBall _) _, Box(BlueBall _) _ -> {
                yield System.out.println("red or blue")
            }

            Box(GreenBall a) _ -> {
                yield System.out.println("green")
            }

            Box(_) _ -> {
                yield System.out.println("null")
            }


    }
}

final class Box {
    private final var content: T
    public fun content() : T = UastEmptyExpression
    fun Box(content: T) = UastEmptyExpression
}

abstract sealed class Ball {
}

final class RedBall : Ball {
}

final class BlueBall : Ball {
}

final class GreenBall : Ball {
}
