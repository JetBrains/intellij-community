<root>
  <item name='org.eclipse.jgit.lib.BaseRepositoryBuilder B setBare()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.BaseRepositoryBuilder B setGitDir(java.io.File)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.BaseRepositoryBuilder B setMustExist(boolean)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.BaseRepositoryBuilder B setWorkTree(java.io.File)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.BranchTrackingStatus org.eclipse.jgit.lib.BranchTrackingStatus of(org.eclipse.jgit.lib.Repository, java.lang.String)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.BranchTrackingStatus org.eclipse.jgit.lib.BranchTrackingStatus of(org.eclipse.jgit.lib.Repository, java.lang.String) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.BranchTrackingStatus org.eclipse.jgit.lib.BranchTrackingStatus of(org.eclipse.jgit.lib.Repository, java.lang.String) 1'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Config T get(org.eclipse.jgit.lib.Config.SectionParser&lt;T&gt;)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Config java.util.Set&lt;java.lang.String&gt; getSubsections(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Constants byte[] encode(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.IndexDiff java.util.Set&lt;java.lang.String&gt; getAdded()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.IndexDiff java.util.Set&lt;java.lang.String&gt; getChanged()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.IndexDiff java.util.Set&lt;java.lang.String&gt; getMissing()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.IndexDiff java.util.Set&lt;java.lang.String&gt; getModified()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.IndexDiff java.util.Set&lt;java.lang.String&gt; getRemoved()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.IndexDiff java.util.Set&lt;java.lang.String&gt; getUntracked()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.IndexDiff java.util.Set&lt;java.lang.String&gt; getUntrackedFolders()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.ObjectLoader byte[] getCachedBytes()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.ObjectReader org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.lib.AnyObjectId, int)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.ProgressMonitor void beginTask(java.lang.String, int) 0'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Ref java.lang.String getName()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref getLeaf()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref getTarget()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository java.io.File getWorkTree()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.dircache.DirCache lockDirCache()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.ObjectId resolve(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.ObjectInserter newObjectInserter()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.lib.AnyObjectId)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.lib.AnyObjectId, int)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.ObjectReader newObjectReader()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Ref getRef(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.Nullable'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Ref peel(org.eclipse.jgit.lib.Ref)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.RefUpdate updateRef(java.lang.String)'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.RepositoryState getRepositoryState()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.StoredConfig getConfig()'>
    <annotation name='org.jetbrains.annotations.NotNull'/>
  </item>
  <item name='org.eclipse.jgit.lib.Repository void writeMergeHeads(java.util.List&lt;org.eclipse.jgit.lib.ObjectId&gt;)'>
    <annotation name='kotlin.jvm.KotlinSignature'>
      <val name="value" val="&quot;fun writeMergeHeads(heads: List&lt;ObjectId?&gt;?): Unit&quot;"/>
    </annotation>
  </item>
</root>
