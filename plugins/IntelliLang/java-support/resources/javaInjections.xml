<?xml version="1.0" encoding="UTF-8"?>
<component name="LanguageInjectionConfiguration">
  <injection language="Groovy" injector-id="java">
    <display-name>GroovyShell (groovy.lang)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluate").withParameters("java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluate").withParameters("java.lang.String", "java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluate").withParameters("java.lang.String", "java.lang.String", "java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("parse").withParameters("java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("parse").withParameters("java.lang.String", "java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("run").withParameters("java.lang.String", "java.lang.String", "java.lang.String[]").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("run").withParameters("java.lang.String", "java.lang.String", "java.util.List").definedInClass("groovy.lang.GroovyShell"))]]></place>
  </injection>

  <injection language="XPath" injector-id="java">
    <display-name>Node.createXPath (org.dom4j)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createXPath").withParameters("java.lang.String").definedInClass("org.dom4j.Node"))]]></place>
  </injection>
  <injection language="XPath" injector-id="java">
    <display-name>Node.selectNodes (org.dom4j)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("selectNodes").withParameters("java.lang.String").definedInClass("org.dom4j.Node"))]]></place>
  </injection>
  <injection language="XPath" injector-id="java">
    <display-name>Node.selectSingleNode (org.dom4j)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("selectSingleNode").withParameters("java.lang.String").definedInClass("org.dom4j.Node"))]]></place>
  </injection>
  <injection language="RegExp" injector-id="java">
    <display-name>Pattern (java.util.regex)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("compile").withParameters("java.lang.String").definedInClass("java.util.regex.Pattern"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("compile").withParameters("java.lang.String", "int").definedInClass("java.util.regex.Pattern"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("matches").withParameters("java.lang.String", "java.lang.CharSequence").definedInClass("java.util.regex.Pattern"))]]></place>
  </injection>
  <injection language="RegExp" injector-id="java">
    <display-name>Scanner (java.util)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("useDelimiter").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("hasNext").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("next").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("findInLine").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("findWithinHorizon").withParameters("java.lang.String", "int").definedInClass("java.util.Scanner"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("skip").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
  </injection>
  <injection language="RegExp" injector-id="java">
    <display-name>Pattern.regexp (javax/jakarta.validation.constraints)</display-name>
      <place><![CDATA[psiMethod().withName("regexp").withParameters().definedInClass(psiClass().withQualifiedName(string().oneOf("javax.validation.constraints.Pattern", "jakarta.validation.constraints.Pattern")))]]></place>
  </injection>

  <injection language="RegExp" injector-id="java">
    <display-name>String (java.lang)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("replaceAll").withParameters("java.lang.String", "java.lang.String").definedInClass("java.lang.String"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("replaceFirst").withParameters("java.lang.String", "java.lang.String").definedInClass("java.lang.String"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("split").withParameters("java.lang.String").definedInClass("java.lang.String"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("split").withParameters("java.lang.String", "int").definedInClass("java.lang.String"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("matches").withParameters("java.lang.String").definedInClass("java.lang.String"))]]></place>
  </injection>
  <injection language="XPath" injector-id="java">
    <display-name>XPath (javax.xml.xpath)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("compile").withParameters("java.lang.String").definedInClass("javax.xml.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluate").withParameters("java.lang.String", "java.lang.Object").definedInClass("javax.xml.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluate").withParameters("java.lang.String", "java.lang.Object", "javax.xml.namespace.QName").definedInClass("javax.xml.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluate").withParameters("java.lang.String", "org.xml.sax.InputSource").definedInClass("javax.xml.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluate").withParameters("java.lang.String", "org.xml.sax.InputSource", "javax.xml.namespace.QName").definedInClass("javax.xml.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluateExpression").withParameters("java.lang.String", "java.lang.Object").definedInClass("javax.xml.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluateExpression").withParameters("java.lang.String", "java.lang.Object", "java.lang.Class").definedInClass("javax.xml.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluateExpression").withParameters("java.lang.String", "org.xml.sax.InputSource").definedInClass("javax.xml.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("evaluateExpression").withParameters("java.lang.String", "org.xml.sax.InputSource", "java.lang.Class").definedInClass("javax.xml.xpath.XPath"))]]></place>
  </injection>
  <injection language="XPath" injector-id="java">
    <display-name>XPath (org.jdom.xpath)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("newInstance").withParameters("java.lang.String").definedInClass("org.jdom.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("selectNodes").withParameters("java.lang.Object", "java.lang.String").definedInClass("org.jdom.xpath.XPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("selectSingleNode").withParameters("java.lang.Object", "java.lang.String").definedInClass("org.jdom.xpath.XPath"))]]></place>
  </injection>
  <injection language="encoding-reference" injector-id="java">
    <display-name>Charset Name</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("forName").withParameters("java.lang.String").definedInClass("java.nio.charset.Charset"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("isSupported").withParameters("java.lang.String").definedInClass("java.nio.charset.Charset"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("getBytes").withParameters("java.lang.String").definedInClass("java.lang.String"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(3, psiMethod().withName("String").withParameters("byte[]", "int", "int", "java.lang.String").definedInClass("java.lang.String"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("String").withParameters("byte[]", "java.lang.String").definedInClass("java.lang.String"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("InputStreamReader").withParameters("java.io.InputStream", "java.lang.String").definedInClass("java.io.InputStreamReader"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("OutputStreamWriter").withParameters("java.io.OutputStream", "java.lang.String").definedInClass("java.io.OutputStreamWriter"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("toString").withParameters("java.lang.String").definedInClass("java.io.ByteArrayOutputStream"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("PrintStream").withParameters("java.io.File", "java.lang.String").definedInClass("java.io.PrintStream"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("PrintStream").withParameters("java.io.OutputStream", "boolean", "java.lang.String").definedInClass("java.io.PrintStream"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("PrintStream").withParameters("java.lang.String", "java.lang.String").definedInClass("java.io.PrintStream"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("encode").withParameters("java.lang.String", "java.lang.String").definedInClass("java.net.URLEncoder"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("decode").withParameters("java.lang.String", "java.lang.String").definedInClass("java.net.URLDecoder"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setCharacterEncoding").withParameters("java.lang.String").definedInClass(psiClass().withQualifiedName(string().oneOf("javax.servlet.ServletResponse", "jakarta.servlet.ServletResponse"))))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("newReader").withParameters("java.nio.channels.ReadableByteChannel", "java.lang.String").definedInClass("java.nio.channels.Channels"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("newWriter").withParameters("java.nio.channels.WritableByteChannel", "java.lang.String").definedInClass("java.nio.channels.Channels"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createXMLEventReader").withParameters("java.io.InputStream", "java.lang.String").definedInClass("javax.xml.stream.XMLInputFactory"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createXMLStreamReader").withParameters("java.io.InputStream", "java.lang.String").definedInClass("javax.xml.stream.XMLInputFactory"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createXMLEventWriter").withParameters("java.io.OutputStream", "java.lang.String").definedInClass("javax.xml.stream.XMLInputFactory"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createXMLStreamWriter").withParameters("java.io.OutputStream", "java.lang.String").definedInClass("javax.xml.stream.XMLInputFactory"))]]></place>
  </injection>

  <injection language="RegExp" injector-id="java">
    <display-name>Validate (org.apache.commons.lang3)</display-name>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("matchesPattern").definedInClass("org.apache.commons.lang3.Validate"))]]></place>
  </injection>

  <injection language="RegExp" injector-id="java">
    <display-name>Matchers (org.hamcrest)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("matchesPattern").definedInClass("org.hamcrest.Matchers"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("matchesRegex").definedInClass("org.hamcrest.Matchers"))]]></place>
  </injection>

  <injection language="XPath" injector-id="java">
    <display-name>Matchers (org.hamcrest)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("hasXPath").definedInClass("org.hamcrest.Matchers"))]]></place>
  </injection>

  <injection language="RegExp" injector-id="java">
    <display-name>StringSubject (com.google.common.truth)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("matches").definedInClass("com.google.common.truth.StringSubject"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("containsMatch").definedInClass("com.google.common.truth.StringSubject"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("doesNotMatch").definedInClass("com.google.common.truth.StringSubject"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("doesNotContainMatch").definedInClass("com.google.common.truth.StringSubject"))]]></place>
  </injection>

  <injection language="JSON" injector-id="java">
    <display-name>JsonAssert (com.jayway.jsonassert)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("with").withParameters("java.lang.String").definedInClass("com.jayway.jsonassert.JsonAssert"))]]></place>
  </injection>
  <injection language="JSON" injector-id="java">
    <display-name>JsonPath (com.jayway.jsonpath)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("parse").definedInClass("com.jayway.jsonpath.JsonPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("read").definedInClass("com.jayway.jsonpath.JsonPath"))]]></place>
  </injection>
  <injection language="JSON" injector-id="java">
    <display-name>JsonProvider (com.jayway.jsonpath.spi.json)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("parse").definedInClass("com.jayway.jsonpath.spi.json.JsonProvider"))]]></place>
  </injection>
  <injection language="JSON" injector-id="java">
    <display-name>ParseContext (com.jayway.jsonpath)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("parse").definedInClass("com.jayway.jsonpath.ParseContext"))]]></place>
  </injection>

  <injection language="JSONPath" injector-id="java">
    <display-name>JsonPath (com.jayway.jsonpath)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("compile").definedInClass("com.jayway.jsonpath.JsonPath"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("read").definedInClass("com.jayway.jsonpath.JsonPath"))]]></place>
  </injection>
  <injection language="JSONPath" injector-id="java">
    <display-name>ReadContext (com.jayway.jsonpath)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("read").definedInClass("com.jayway.jsonpath.ReadContext"))]]></place>
  </injection>
  <injection language="JSONPath" injector-id="java">
    <display-name>WriteContext (com.jayway.jsonpath)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("set").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("add").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("delete").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("put").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("renameKey").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("map").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
  </injection>
  <injection language="JSONPath" injector-id="java">
    <display-name>JsonPathMatchers (com.jayway.jsonpath)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("hasJsonPath").definedInClass("com.jayway.jsonpath.matchers.JsonPathMatchers"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("hasNoJsonPath").definedInClass("com.jayway.jsonpath.matchers.JsonPathMatchers"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("withJsonPath").definedInClass("com.jayway.jsonpath.matchers.JsonPathMatchers"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("withoutJsonPath").definedInClass("com.jayway.jsonpath.matchers.JsonPathMatchers"))]]></place>
  </injection>
  <injection language="JSONPath" injector-id="java">
    <display-name>JsonAsserter (com.jayway.jsonpath)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertThat").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertEquals").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertNotDefined").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertNull").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertNotNull").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
  </injection>
</component>
