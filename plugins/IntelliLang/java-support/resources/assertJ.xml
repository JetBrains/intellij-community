<?xml version="1.0" encoding="UTF-8"?>
<!--
 content of this file is taken from
 https://github.com/joel-costigliola/assertj-core/blob/eb1a64c955e15dca75a62ad4418099026060cc06/src/ide-support/IntelliLang.xml

 Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 specific language governing permissions and limitations under the License.

 Copyright 2012-2019 the original author or authors.
-->
<component name="LanguageInjectionConfiguration">
  <injection language="RegExp" injector-id="java">
    <display-name>AssertJ (org.assertj.core.api.AbstractCharSequenceAssert)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("containsPattern").withParameters("java.lang.CharSequence").definedInClass("org.assertj.core.api.AbstractCharSequenceAssert"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("doesNotContainPattern").withParameters("java.lang.CharSequence").definedInClass("org.assertj.core.api.AbstractCharSequenceAssert"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("doesNotMatch").withParameters("java.lang.CharSequence").definedInClass("org.assertj.core.api.AbstractCharSequenceAssert"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("matches").withParameters("java.lang.CharSequence").definedInClass("org.assertj.core.api.AbstractCharSequenceAssert"))]]></place>
  </injection>
  <injection language="RegExp" injector-id="java">
    <display-name>AssertJ (org.assertj.core.api.AbstractThrowableAssert)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("hasMessageFindingMatch").withParameters("java.lang.String").definedInClass("org.assertj.core.api.AbstractThrowableAssert"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("hasMessageMatching").withParameters("java.lang.String").definedInClass("org.assertj.core.api.AbstractThrowableAssert"))]]></place>
  </injection>
  <injection language="RegExp" injector-id="java">
    <display-name>AssertJ (org.assertj.core.api.RecursiveComparisonAssert)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("ignoringCollectionOrderInFieldsMatchingRegexes").withParameters("java.lang.String...").definedInClass("org.assertj.core.api.RecursiveComparisonAssert"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("ignoringFieldsMatchingRegexes").withParameters("java.lang.String...").definedInClass("org.assertj.core.api.RecursiveComparisonAssert"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("ignoringOverriddenEqualsForFieldsMatchingRegexes").withParameters("java.lang.String...").definedInClass("org.assertj.core.api.RecursiveComparisonAssert"))]]></place>
  </injection>
  <injection language="RegExp" injector-id="java">
    <display-name>AssertJ (org.assertj.core.api.recursive.comparison.RecursiveComparisonConfiguration)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("ignoreCollectionOrderInFieldsMatchingRegexes").withParameters("java.lang.String...").definedInClass("org.assertj.core.api.recursive.comparison.RecursiveComparisonConfiguration"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("ignoreFieldsMatchingRegexes").withParameters("java.lang.String...").definedInClass("org.assertj.core.api.recursive.comparison.RecursiveComparisonConfiguration"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("ignoreOverriddenEqualsForFieldsMatchingRegexes").withParameters("java.lang.String...").definedInClass("org.assertj.core.api.recursive.comparison.RecursiveComparisonConfiguration"))]]></place>
  </injection>
  <injection language="RegExp" injector-id="java">
    <display-name>AssertJ (org.assertj.core.api.ThrowableAssertAlternative)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("withMessageMatching").withParameters("java.lang.String").definedInClass("org.assertj.core.api.ThrowableAssertAlternative"))]]></place>
  </injection>
  <injection language="XML" injector-id="java">
    <display-name>AssertJ (org.assertj.core.api.AbstractCharSequenceAssert)</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("isXmlEqualTo").withParameters("java.lang.CharSequence").definedInClass("org.assertj.core.api.AbstractCharSequenceAssert"))]]></place>
  </injection>
</component>