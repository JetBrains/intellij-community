c:org.intellij.plugins.intelliLang.Configuration
- com.intellij.openapi.util.SimpleModificationTracker
- com.intellij.openapi.components.PersistentStateComponent
- com.intellij.openapi.util.ModificationTracker
- sf:COMPONENT_NAME:java.lang.String
- <init>():V
- p:configurationModified():V
- findExistingInjection(org.intellij.plugins.intelliLang.inject.config.BaseInjection):org.intellij.plugins.intelliLang.inject.config.BaseInjection
- getAdvancedConfiguration():org.intellij.plugins.intelliLang.Configuration$AdvancedConfiguration
- p:getAllInjections():java.util.Collection
- getDefaultInjections():java.util.List
- getInjections(java.lang.String):java.util.List
- getInjectionsByLanguageId(java.lang.String):java.util.Collection
- s:getInstance():org.intellij.plugins.intelliLang.Configuration
- s:getProjectInstance(com.intellij.openapi.project.Project):org.intellij.plugins.intelliLang.Configuration
- getState():org.jdom.Element
- p:getState(org.jdom.Element):org.jdom.Element
- p:invokeAfterReload(java.lang.Runnable):V
- s:load(java.io.InputStream):org.intellij.plugins.intelliLang.Configuration
- loadState(org.jdom.Element):V
- p:reloadInjections():V
- replaceInjections(java.util.List,java.util.List,Z):Z
- s:replaceInjectionsWithUndo(com.intellij.openapi.project.Project,com.intellij.psi.PsiFile,java.lang.Object,java.lang.Object,Z,java.util.List,com.intellij.util.PairProcessor):V
- replaceInjectionsWithUndo(com.intellij.openapi.project.Project,com.intellij.psi.PsiFile,java.util.List,java.util.List,java.util.List):V
- p:replaceInjectionsWithUndoInner(java.util.List,java.util.List):V
- setHostInjectionEnabled(com.intellij.psi.PsiLanguageInjectionHost,java.util.Collection,Z):Z
- p:setInjections(java.util.Collection):V
- withInjections(java.util.List,java.lang.Runnable):V
c:org.intellij.plugins.intelliLang.Configuration$AdvancedConfiguration
- <init>():V
- getDfaOption():org.intellij.plugins.intelliLang.Configuration$DfaOption
- getInstrumentation():org.intellij.plugins.intelliLang.Configuration$InstrumentationType
- getLanguageAnnotationClass():java.lang.String
- getLanguageAnnotationPair():com.intellij.openapi.util.Pair
- getPatternAnnotationClass():java.lang.String
- getPatternAnnotationPair():com.intellij.openapi.util.Pair
- getSubstAnnotationClass():java.lang.String
- getSubstAnnotationPair():com.intellij.openapi.util.Pair
- isIncludeUncomputablesAsLiterals():Z
- isSourceModificationAllowed():Z
- setDfaOption(org.intellij.plugins.intelliLang.Configuration$DfaOption):V
- setIncludeUncomputablesAsLiterals(Z):V
- setInstrumentationType(java.lang.String):V
- setInstrumentationType(org.intellij.plugins.intelliLang.Configuration$InstrumentationType):V
- setLanguageAnnotation(java.lang.String):V
- setPatternAnnotation(java.lang.String):V
- setSourceModificationAllowed(Z):V
- setSubstAnnotation(java.lang.String):V
f:org.intellij.plugins.intelliLang.Configuration$App
- org.intellij.plugins.intelliLang.Configuration
- com.intellij.openapi.Disposable
- dispose():V
- getAdvancedConfiguration():org.intellij.plugins.intelliLang.Configuration$AdvancedConfiguration
- getDefaultInjections():java.util.List
- getState():org.jdom.Element
- loadState(org.jdom.Element):V
e:org.intellij.plugins.intelliLang.Configuration$DfaOption
- java.lang.Enum
- sf:ASSIGNMENTS:org.intellij.plugins.intelliLang.Configuration$DfaOption
- sf:DFA:org.intellij.plugins.intelliLang.Configuration$DfaOption
- sf:OFF:org.intellij.plugins.intelliLang.Configuration$DfaOption
- sf:RESOLVE:org.intellij.plugins.intelliLang.Configuration$DfaOption
- s:valueOf(java.lang.String):org.intellij.plugins.intelliLang.Configuration$DfaOption
- s:values():org.intellij.plugins.intelliLang.Configuration$DfaOption[]
e:org.intellij.plugins.intelliLang.Configuration$InstrumentationType
- java.lang.Enum
- sf:ASSERT:org.intellij.plugins.intelliLang.Configuration$InstrumentationType
- sf:EXCEPTION:org.intellij.plugins.intelliLang.Configuration$InstrumentationType
- sf:NONE:org.intellij.plugins.intelliLang.Configuration$InstrumentationType
- s:valueOf(java.lang.String):org.intellij.plugins.intelliLang.Configuration$InstrumentationType
- s:values():org.intellij.plugins.intelliLang.Configuration$InstrumentationType[]
c:org.intellij.plugins.intelliLang.Configuration$Prj
- org.intellij.plugins.intelliLang.Configuration
- getAdvancedConfiguration():org.intellij.plugins.intelliLang.Configuration$AdvancedConfiguration
- p:getAllInjections():java.util.Collection
- getDefaultInjections():java.util.List
- getInjections(java.lang.String):java.util.List
- getModificationCount():J
- getOwnInjections(java.lang.String):java.util.List
- getParentConfiguration():org.intellij.plugins.intelliLang.Configuration
- p:invokeAfterReload(java.lang.Runnable):V
- replaceInjections(java.util.List,java.util.List,Z):Z
f:org.intellij.plugins.intelliLang.IntelliLangBundle
- s:message(java.lang.String,java.lang.Object[]):java.lang.String
- s:messagePointer(java.lang.String,java.lang.Object[]):java.util.function.Supplier
a:org.intellij.plugins.intelliLang.inject.AbstractLanguageInjectionSupport
- org.intellij.plugins.intelliLang.inject.LanguageInjectionSupport
- <init>():V
- addInjectionInPlace(com.intellij.lang.Language,com.intellij.psi.PsiLanguageInjectionHost):Z
- createAddActions(com.intellij.openapi.project.Project,com.intellij.util.Consumer):com.intellij.openapi.actionSystem.AnAction[]
- s:createDefaultAddAction(com.intellij.openapi.project.Project,com.intellij.util.Consumer,org.intellij.plugins.intelliLang.inject.AbstractLanguageInjectionSupport):com.intellij.openapi.actionSystem.AnAction
- s:createDefaultEditAction(com.intellij.openapi.project.Project,com.intellij.openapi.util.Factory):com.intellij.openapi.actionSystem.AnAction
- createEditAction(com.intellij.openapi.project.Project,com.intellij.openapi.util.Factory):com.intellij.openapi.actionSystem.AnAction
- createInjection(org.jdom.Element):org.intellij.plugins.intelliLang.inject.config.BaseInjection
- createSettings(com.intellij.openapi.project.Project,org.intellij.plugins.intelliLang.Configuration):com.intellij.openapi.options.Configurable[]
- editInjectionInPlace(com.intellij.psi.PsiLanguageInjectionHost):Z
- equals(java.lang.Object):Z
- findCommentInjection(com.intellij.psi.PsiElement,com.intellij.openapi.util.Ref):org.intellij.plugins.intelliLang.inject.config.BaseInjection
- getHelpId():java.lang.String
- hashCode():I
- isApplicableTo(com.intellij.psi.PsiLanguageInjectionHost):Z
- ps:perform(com.intellij.openapi.project.Project,com.intellij.openapi.util.Factory):V
- removeInjectionInPlace(com.intellij.psi.PsiLanguageInjectionHost):Z
- setupPresentation(org.intellij.plugins.intelliLang.inject.config.BaseInjection,com.intellij.ui.SimpleColoredText,Z):V
- ps:showDefaultInjectionUI(com.intellij.openapi.project.Project,org.intellij.plugins.intelliLang.inject.config.BaseInjection):org.intellij.plugins.intelliLang.inject.config.BaseInjection
- ps:showEditInjectionDialog(com.intellij.openapi.project.Project,org.intellij.plugins.intelliLang.inject.config.ui.AbstractInjectionPanel,java.lang.String,java.lang.String):Z
- useDefaultCommentInjector():Z
- useDefaultInjector(com.intellij.psi.PsiLanguageInjectionHost):Z
f:org.intellij.plugins.intelliLang.inject.InjectLanguageAction
- com.intellij.codeInsight.intention.IntentionAction
- com.intellij.codeInsight.intention.LowPriorityAction
- sf:FIX_KEY:com.intellij.openapi.util.Key
- sf:LAST_INJECTED_LANGUAGE:java.lang.String
- <init>():V
- s:addFixer(com.intellij.psi.PsiLanguageInjectionHost,com.intellij.util.Processor,java.lang.String):V
- s:doChooseLanguageToInject(com.intellij.openapi.editor.Editor,com.intellij.util.Processor):Z
- generatePreview(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiFile):com.intellij.codeInsight.intention.preview.IntentionPreviewInfo
- s:getAllInjectables():java.util.List
- getFamilyName():java.lang.String
- getText():java.lang.String
- invoke(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiFile):V
- s:invokeImpl(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiFile,com.intellij.psi.injection.Injectable):V
- s:invokeImpl(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiFile,com.intellij.psi.injection.Injectable,org.intellij.plugins.intelliLang.inject.InjectLanguageAction$FixPresenter):V
- isAvailable(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiFile):Z
- startInWriteAction():Z
- s:withFixName(com.intellij.util.Processor,java.lang.String):com.intellij.util.Processor
org.intellij.plugins.intelliLang.inject.InjectLanguageAction$FixPresenter
- a:showFix(com.intellij.openapi.editor.Editor,com.intellij.openapi.util.TextRange,com.intellij.psi.SmartPsiElementPointer,java.lang.String,com.intellij.util.Processor):V
f:org.intellij.plugins.intelliLang.inject.InjectedLanguage
- s:create(java.lang.String):org.intellij.plugins.intelliLang.inject.InjectedLanguage
- s:create(java.lang.String,java.lang.String,java.lang.String,Z):org.intellij.plugins.intelliLang.inject.InjectedLanguage
- equals(java.lang.Object):Z
- s:findLanguageById(java.lang.String):com.intellij.lang.Language
- s:getAvailableLanguages():com.intellij.lang.Language[]
- getID():java.lang.String
- getLanguage():com.intellij.lang.Language
- getPrefix():java.lang.String
- getSuffix():java.lang.String
- hashCode():I
- isDynamic():Z
f:org.intellij.plugins.intelliLang.inject.InjectorUtils
- sf:RANGE_COMPARATOR:java.util.Comparator
- s:appendStringPattern(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.String):java.lang.StringBuilder
- s:canBeRemoved(org.intellij.plugins.intelliLang.inject.config.BaseInjection):Z
- s:findClosestCommentInjectionData(com.intellij.psi.PsiElement):com.intellij.openapi.util.Pair$NonNull
- s:findCommentInjection(com.intellij.psi.PsiElement,java.lang.String,com.intellij.openapi.util.Ref):org.intellij.plugins.intelliLang.inject.config.BaseInjection
- s:findCommentInjectionData(com.intellij.psi.PsiElement,Z,com.intellij.openapi.util.Ref):org.intellij.plugins.intelliLang.inject.InjectorUtils$CommentInjectionData
- s:findInjectionSupport(java.lang.String):org.intellij.plugins.intelliLang.inject.LanguageInjectionSupport
- s:findNotNullInjectionSupport(java.lang.String):org.intellij.plugins.intelliLang.inject.LanguageInjectionSupport
- s:getActiveInjectionSupportIds():java.util.Collection
- s:getActiveInjectionSupports():java.util.Collection
- s:getEditableInstance(com.intellij.openapi.project.Project):org.intellij.plugins.intelliLang.Configuration
- s:getLanguage(org.intellij.plugins.intelliLang.inject.config.BaseInjection):com.intellij.lang.Language
- s:getLanguageByString(java.lang.String):com.intellij.lang.Language
- s:getPatternClasses(java.lang.String):java.lang.Class[]
- s:isRegexp(java.lang.String):Z
- s:putInjectedFileUserData(com.intellij.psi.PsiElement,com.intellij.lang.Language,com.intellij.openapi.util.Key,java.lang.Object):V
- s:registerInjection(com.intellij.lang.Language,com.intellij.psi.PsiFile,java.util.List,com.intellij.lang.injection.MultiHostRegistrar):V
- s:registerInjection(com.intellij.lang.Language,java.util.List,com.intellij.psi.PsiFile,com.intellij.lang.injection.MultiHostRegistrar):V
- s:registerInjectionSimple(com.intellij.psi.PsiLanguageInjectionHost,org.intellij.plugins.intelliLang.inject.config.BaseInjection,org.intellij.plugins.intelliLang.inject.LanguageInjectionSupport,com.intellij.lang.injection.MultiHostRegistrar):Z
- s:registerSupport(org.intellij.plugins.intelliLang.inject.LanguageInjectionSupport,Z,com.intellij.psi.PsiElement,com.intellij.lang.Language):V
c:org.intellij.plugins.intelliLang.inject.InjectorUtils$CommentInjectionData
- getDisplayName():java.lang.String
- getInjectedLanguageId():java.lang.String
- getPrefix():java.lang.String
- getSuffix():java.lang.String
- getValues():java.util.Map
f:org.intellij.plugins.intelliLang.inject.InjectorUtils$InjectionInfo
- java.lang.Record
- <init>(com.intellij.psi.PsiLanguageInjectionHost,org.intellij.plugins.intelliLang.inject.InjectedLanguage,com.intellij.openapi.util.TextRange):V
- f:equals(java.lang.Object):Z
- f:hashCode():I
- host():com.intellij.psi.PsiLanguageInjectionHost
- language():org.intellij.plugins.intelliLang.inject.InjectedLanguage
- range():com.intellij.openapi.util.TextRange
a:org.intellij.plugins.intelliLang.inject.LanguageInjectionSupport
- sf:INJECTOR_SUPPORT:com.intellij.openapi.util.Key
- sf:SETTINGS_EDITOR:com.intellij.openapi.util.Key
- sf:TEMPORARY_INJECTED_LANGUAGE:com.intellij.openapi.util.Key
- <init>():V
- a:addInjectionInPlace(com.intellij.lang.Language,com.intellij.psi.PsiLanguageInjectionHost):Z
- a:createAddActions(com.intellij.openapi.project.Project,com.intellij.util.Consumer):com.intellij.openapi.actionSystem.AnAction[]
- a:createEditAction(com.intellij.openapi.project.Project,com.intellij.openapi.util.Factory):com.intellij.openapi.actionSystem.AnAction
- a:createInjection(org.jdom.Element):org.intellij.plugins.intelliLang.inject.config.BaseInjection
- a:createSettings(com.intellij.openapi.project.Project,org.intellij.plugins.intelliLang.Configuration):com.intellij.openapi.options.Configurable[]
- a:editInjectionInPlace(com.intellij.psi.PsiLanguageInjectionHost):Z
- a:findCommentInjection(com.intellij.psi.PsiElement,com.intellij.openapi.util.Ref):org.intellij.plugins.intelliLang.inject.config.BaseInjection
- a:getId():java.lang.String
- a:getPatternClasses():java.lang.Class[]
- a:isApplicableTo(com.intellij.psi.PsiLanguageInjectionHost):Z
- removeInjection(com.intellij.psi.PsiElement):Z
- a:removeInjectionInPlace(com.intellij.psi.PsiLanguageInjectionHost):Z
- a:setupPresentation(org.intellij.plugins.intelliLang.inject.config.BaseInjection,com.intellij.ui.SimpleColoredText,Z):V
- a:useDefaultCommentInjector():Z
- a:useDefaultInjector(com.intellij.psi.PsiLanguageInjectionHost):Z
f:org.intellij.plugins.intelliLang.inject.TemporaryPlacesRegistry
- sf:SUPPORT_ID:java.lang.String
- <init>(com.intellij.openapi.project.Project):V
- addHost(com.intellij.psi.PsiLanguageInjectionHost,org.intellij.plugins.intelliLang.inject.InjectedLanguage):V
- addHostWithUndo(com.intellij.psi.PsiLanguageInjectionHost,org.intellij.plugins.intelliLang.inject.InjectedLanguage):V
- s:getInstance(com.intellij.openapi.project.Project):org.intellij.plugins.intelliLang.inject.TemporaryPlacesRegistry
- getLanguageFor(com.intellij.psi.PsiLanguageInjectionHost,com.intellij.psi.PsiFile):org.intellij.plugins.intelliLang.inject.InjectedLanguage
- getLanguageInjectionSupport():org.intellij.plugins.intelliLang.inject.LanguageInjectionSupport
- removeHost(com.intellij.psi.PsiLanguageInjectionHost):Z
- removeHostWithUndo(com.intellij.openapi.project.Project,com.intellij.psi.PsiLanguageInjectionHost):Z
f:org.intellij.plugins.intelliLang.inject.UnInjectLanguageAction
- com.intellij.codeInsight.intention.IntentionAction
- com.intellij.codeInsight.intention.LowPriorityAction
- <init>():V
- generatePreview(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiFile):com.intellij.codeInsight.intention.preview.IntentionPreviewInfo
- getFamilyName():java.lang.String
- getText():java.lang.String
- invoke(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiFile):V
- s:invokeImpl(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiFile):V
- isAvailable(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiFile):Z
- startInWriteAction():Z
c:org.intellij.plugins.intelliLang.inject.config.BaseInjection
- com.intellij.openapi.components.PersistentStateComponent
- org.intellij.plugins.intelliLang.inject.config.Injection
- sf:INJECTION_KEY:com.intellij.openapi.util.Key
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.intellij.plugins.intelliLang.inject.config.InjectionPlace[]):V
- acceptForReference(com.intellij.psi.PsiElement):Z
- acceptsPsiElement(com.intellij.psi.PsiElement):Z
- copy():org.intellij.plugins.intelliLang.inject.config.BaseInjection
- copyFrom(org.intellij.plugins.intelliLang.inject.config.BaseInjection):org.intellij.plugins.intelliLang.inject.config.BaseInjection
- equals(java.lang.Object):Z
- generatePlaces():V
- getCompiler():com.intellij.patterns.compiler.PatternCompiler
- getDisplayName():java.lang.String
- getIgnorePattern():java.lang.String
- getInjectedArea(com.intellij.psi.PsiElement):java.util.List
- getInjectedLanguage():com.intellij.lang.Language
- getInjectedLanguageId():java.lang.String
- getInjectionPlaces():org.intellij.plugins.intelliLang.inject.config.InjectionPlace[]
- getPrefix():java.lang.String
- f:getState():org.jdom.Element
- getSuffix():java.lang.String
- getSupportId():java.lang.String
- getValuePattern():java.lang.String
- hashCode():I
- intersectsWith(org.intellij.plugins.intelliLang.inject.config.BaseInjection):Z
- isEnabled():Z
- isSingleFile():Z
- isTerminal():Z
- loadState(org.jdom.Element):V
- mergeOriginalPlacesFrom(org.intellij.plugins.intelliLang.inject.config.BaseInjection,Z):V
- p:readExternalImpl(org.jdom.Element):V
- sameLanguageParameters(org.intellij.plugins.intelliLang.inject.config.BaseInjection):Z
- setDisplayName(java.lang.String):V
- setIgnorePattern(java.lang.String):V
- setInjectedLanguageId(java.lang.String):V
- setInjectionPlaces(org.intellij.plugins.intelliLang.inject.config.InjectionPlace[]):V
- setPlaceEnabled(java.lang.String,Z):V
- setPrefix(java.lang.String):V
- setSingleFile(Z):V
- setSuffix(java.lang.String):V
- setValuePattern(java.lang.String):V
- shouldBeIgnored(com.intellij.psi.PsiElement):Z
- shouldBeIgnored(java.util.Iterator,java.lang.String):Z
- p:writeExternalImpl(org.jdom.Element):V
org.intellij.plugins.intelliLang.inject.config.Injection
- com.intellij.lang.injection.general.Injection
- a:acceptsPsiElement(com.intellij.psi.PsiElement):Z
- a:getDisplayName():java.lang.String
- a:getInjectedArea(com.intellij.psi.PsiElement):java.util.List
f:org.intellij.plugins.intelliLang.inject.config.InjectionPlace
- sf:ARRAY_FACTORY:com.intellij.util.ArrayFactory
- sf:EMPTY_ARRAY:org.intellij.plugins.intelliLang.inject.config.InjectionPlace[]
- <init>(com.intellij.patterns.ElementPattern,Z):V
- enabled(Z):org.intellij.plugins.intelliLang.inject.config.InjectionPlace
- equals(java.lang.Object):Z
- getElementPattern():com.intellij.patterns.ElementPattern
- getText():java.lang.String
- hashCode():I
- isEnabled():Z
a:org.intellij.plugins.intelliLang.inject.config.JspSupportProxy
- <init>():V
- s:getInstance():org.intellij.plugins.intelliLang.inject.config.JspSupportProxy
- a:getPossibleTldUris(com.intellij.openapi.module.Module):java.lang.String[]
a:org.intellij.plugins.intelliLang.inject.config.ui.AbstractInjectionPanel
- org.intellij.plugins.intelliLang.inject.config.ui.InjectionPanel
- pf:myOrigInjection:org.intellij.plugins.intelliLang.inject.config.BaseInjection
- pf:myProject:com.intellij.openapi.project.Project
- p:<init>(org.intellij.plugins.intelliLang.inject.config.BaseInjection,com.intellij.openapi.project.Project):V
- addUpdater(java.lang.Runnable):V
- f:apply():V
- pa:apply(org.intellij.plugins.intelliLang.inject.config.BaseInjection):V
- f:getInjection():org.intellij.plugins.intelliLang.inject.config.BaseInjection
- f:init(org.intellij.plugins.intelliLang.inject.config.BaseInjection):V
- f:isModified():Z
- f:reset():V
- pa:resetImpl():V
- p:updateTree():V
f:org.intellij.plugins.intelliLang.inject.config.ui.AdvancedPanel
- org.intellij.plugins.intelliLang.inject.config.ui.AbstractInjectionPanel
- b:$$$getRootComponent$$$():javax.swing.JComponent
- <init>(com.intellij.openapi.project.Project,org.intellij.plugins.intelliLang.inject.config.BaseInjection):V
- getComponent():javax.swing.JPanel
f:org.intellij.plugins.intelliLang.inject.config.ui.BaseInjectionPanel
- org.intellij.plugins.intelliLang.inject.config.ui.AbstractInjectionPanel
- b:$$$getRootComponent$$$():javax.swing.JComponent
- <init>(org.intellij.plugins.intelliLang.inject.config.BaseInjection,com.intellij.openapi.project.Project):V
- getComponent():javax.swing.JPanel
org.intellij.plugins.intelliLang.inject.config.ui.InjectionPanel
- a:addUpdater(java.lang.Runnable):V
- a:apply():V
- a:getComponent():javax.swing.JPanel
- a:getInjection():org.intellij.plugins.intelliLang.inject.config.Injection
- a:init(org.intellij.plugins.intelliLang.inject.config.Injection):V
- a:isModified():Z
- a:reset():V
f:org.intellij.plugins.intelliLang.inject.config.ui.LanguagePanel
- org.intellij.plugins.intelliLang.inject.config.ui.AbstractInjectionPanel
- b:$$$getRootComponent$$$():javax.swing.JComponent
- <init>(com.intellij.openapi.project.Project,org.intellij.plugins.intelliLang.inject.config.BaseInjection):V
- getComponent():javax.swing.JPanel
- getLanguage():java.lang.String
- getPrefix():java.lang.String
- getSuffix():java.lang.String
- setLanguage(java.lang.String):V
- setPrefix(java.lang.String):V
- setSuffix(java.lang.String):V
f:org.intellij.plugins.intelliLang.inject.config.ui.ValueRegExpAnnotator
- com.intellij.lang.annotation.Annotator
- sf:KEY:com.intellij.openapi.util.Key
- <init>():V
- annotate(com.intellij.psi.PsiElement,com.intellij.lang.annotation.AnnotationHolder):V
f:org.intellij.plugins.intelliLang.references.InjectedReferencesContributor
- com.intellij.psi.PsiReferenceContributor
- <init>():V
- s:getInjectedReferences(com.intellij.psi.PsiElement):com.intellij.psi.PsiReference[]
- s:isInjected(com.intellij.psi.PsiReference):Z
- registerReferenceProviders(com.intellij.psi.PsiReferenceRegistrar):V
f:org.intellij.plugins.intelliLang.references.InjectedReferencesInspection
- com.intellij.codeInspection.LocalInspectionTool
- <init>():V
- buildVisitor(com.intellij.codeInspection.ProblemsHolder,Z):com.intellij.psi.PsiElementVisitor
a:org.intellij.plugins.intelliLang.util.StringMatcher
- sf:ANY:org.intellij.plugins.intelliLang.util.StringMatcher
- sf:ANY_PATTERN:org.intellij.plugins.intelliLang.util.StringMatcher
- sf:NONE:org.intellij.plugins.intelliLang.util.StringMatcher
- pf:myTarget:java.lang.Object
- p:<init>(java.lang.Object):V
- s:create(java.lang.String):org.intellij.plugins.intelliLang.util.StringMatcher
- equals(java.lang.Object):Z
- a:getPattern():java.lang.String
- hashCode():I
- a:matches(java.lang.String):Z
f:org.intellij.plugins.intelliLang.util.StringMatcher$MatcherSet
- org.intellij.plugins.intelliLang.util.StringMatcher
- s:create(java.util.Set):org.intellij.plugins.intelliLang.util.StringMatcher
- getPattern():java.lang.String
- matches(java.lang.String):Z
