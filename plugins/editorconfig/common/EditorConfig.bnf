// Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
  parserClass="com.intellij.editorconfig.common.syntax.parser.EditorConfigParserBase"
  parserUtilClass="com.intellij.editorconfig.common.syntax.parser.EditorConfigParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="EditorConfig"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.editorconfig.common.syntax.psi"
  psiImplPackage="com.intellij.editorconfig.common.syntax.psi.impl"

  elementTypeHolderClass="com.intellij.editorconfig.common.syntax.psi.EditorConfigElementTypes"
  elementTypeClass="com.intellij.editorconfig.common.syntax.psi.EditorConfigElementType"
  tokenTypeClass="com.intellij.editorconfig.common.syntax.lexer.EditorConfigTokenType"
  psiVisitorName="EditorConfigVisitor"
  psiImplUtilClass="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigPsiImplUtils"

  tokens=[
    LINE_COMMENT='regexp:[#;].*'
  ]

  extends(".*_pattern")=pattern
}

// ---- ---- Basic ---- ----

editorConfigFile ::= root_declaration* section_wrap*

private section_wrap ::= section <<unbindComments>>

section ::= header option* {
  pin=1
  recoverWhile=not_header
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigSectionBase"
  implements="com.intellij.psi.NavigatablePsiElement"
}

// ---- ---- Root declaration ---- ----

root_declaration ::= root_declaration_key SEPARATOR root_declaration_list (COLON root_declaration_list)? {
  pin=2
  recoverWhile=not_next_entry
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigRootDeclarationBase"
  implements="com.intellij.psi.NavigatablePsiElement"
}

private root_declaration_list ::= root_declaration_value (COMMA root_declaration_value)*

root_declaration_key ::= IDENTIFIER

root_declaration_value ::= IDENTIFIER

// ---- ---- Header ---- ----

header ::= L_BRACKET pattern_aux? R_BRACKET {
  pin=1
  recoverWhile=not_next_entry
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

fake pattern ::= {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}


private pattern_aux ::= (concatenated_pattern | elemental_pattern) {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

private elemental_pattern ::= (enumeration_pattern | flat_pattern | asterisk_pattern | double_asterisk_pattern | question_pattern | char_class_pattern)

concatenated_pattern ::= elemental_pattern (elemental_pattern)+ {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

enumeration_pattern ::= L_CURLY (pattern_aux (COMMA pattern_aux)*)? R_CURLY {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

asterisk_pattern ::= ASTERISK {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

double_asterisk_pattern ::= DOUBLE_ASTERISK {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

question_pattern ::= QUESTION {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

flat_pattern ::= (PATTERN_IDENTIFIER | PATTERN_WHITE_SPACE)+ {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

char_class_pattern ::= L_BRACKET char_class_exclamation? char_class_letter+ R_BRACKET {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

char_class_exclamation ::= EXCLAMATION {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
}

char_class_letter ::= CHARCLASS_LETTER {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigHeaderElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigHeaderElement"
  methods=[
    isEscape
    isValidEscape
  ]
}

// ---- ---- Option ---- ----

option ::= option_with_raw_value | simple_option {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigOptionBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigDescribableElement"
  methods=[
    getKeyParts
    getAnyValue
  ]
}

private simple_option ::= option_key (SEPARATOR option_value?)? {
  pin=1
  recoverWhile=not_next_entry
}

private option_with_raw_value ::= <<isOptionWithRawValueKeyAhead>> option_key SEPARATOR <<rawOptionValue>>

// This line exists to generate the class for that node.
// The node itself is parsed manually
raw_option_value ::=

// it might be worth it to get rid of flat option key
// and treat it as qualified key with only one part
private option_key ::= qualified_option_key | flat_option_key

private option_value ::= option_value_pair | option_value_standalone_list | option_value_standalone_identifier

// ---- ---- Key ---- ----

qualified_option_key ::= DOT* (qualified_key_part DOT+)+ qualified_key_part? | (DOT+ qualified_key_part) {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigQualifiedOptionKeyBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigDescribableElement"
}

qualified_key_part ::= IDENTIFIER {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigQualifiedKeyPartBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigIdentifierElement"
}

flat_option_key ::= IDENTIFIER {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigFlatOptionKeyBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigIdentifierElement"
}

// ---- ---- Value ---- ----

option_value_pair ::= (option_value_list | option_value_identifier) COLON (option_value_list | option_value_identifier) <<followedByNewLineOrEndOfFile>> {
  pin=2
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigDescribableElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigDescribableElement"
  methods=[
    getFirst
    getSecond
  ]
}

private option_value_standalone_list ::= option_value_list <<followedByNewLineOrEndOfFile>>

option_value_list ::= COMMA* option_value_identifier (COMMA option_value_identifier !(DOT | SEPARATOR) | COMMA)+ {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigDescribableElementBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigDescribableElement"
}

private option_value_standalone_identifier ::= option_value_identifier <<followedByNewLineOrEndOfFile>>

option_value_identifier ::= IDENTIFIER {
  mixin="com.intellij.editorconfig.common.syntax.psi.impl.EditorConfigOptionValueIdentifierBase"
  implements="com.intellij.editorconfig.common.syntax.psi.EditorConfigIdentifierElement"
}

// ---- ---- Recovery ---- ----

private not_header ::= !header
private not_next_entry ::= !(header | option | root_declaration)
