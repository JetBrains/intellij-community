[
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_for_built_in_types",
      "documentation": "'var' Usage in Declarations - For built-in types"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle",
      "values": [
        {
          "type": "constant",
          "value": "can_use_either"
        },
        {
          "type": "constant",
          "value": "do_not_change"
        },
        {
          "type": "constant",
          "value": "use_var",
          "documentation": "Use 'var'"
        },
        {
          "type": "constant",
          "value": "use_var_when_evident",
          "documentation": "Use 'var' when evident"
        },
        {
          "type": "constant",
          "value": "use_explicit_type",
          "documentation": "Use explicit type"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_for_built_in_types",
      "documentation": "'var' Usage in Declarations - For built-in types"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_for_other_types",
      "documentation": "'var' Usage in Declarations - Elsewhere"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_for_other_types",
      "documentation": "'var' Usage in Declarations - Elsewhere"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_for_simple_types",
      "documentation": "'var' Usage in Declarations - For simple types"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_for_simple_types",
      "documentation": "'var' Usage in Declarations - For simple types"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_prefer_explicit_discard_declaration",
      "documentation": "Use 'var' keyword for discards"
    },
    "value": {
      "type": "union",
      "type_alias": "System_Boolean",
      "values": [
        {
          "type": "constant",
          "value": "true"
        },
        {
          "type": "constant",
          "value": "false"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_prefer_explicit_discard_declaration",
      "documentation": "Use 'var' keyword for discards"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_prefer_separate_deconstructed_variables_declaration",
      "documentation": "Prefer separate declarations for deconstructed variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_prefer_separate_deconstructed_variables_declaration",
      "documentation": "Prefer separate declarations for deconstructed variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_add_imports_to_deepest_scope",
      "documentation": "Reference Qualification - Add 'using' directive to deepest scope"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_add_imports_to_deepest_scope",
      "documentation": "Reference Qualification - Add 'using' directive to deepest scope"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_allow_alias",
      "documentation": "Reference Qualification - Use using alias directive to resolve conflicts"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_allow_alias",
      "documentation": "Reference Qualification - Use using alias directive to resolve conflicts"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_can_use_global_alias",
      "documentation": "Reference Qualification - Allow 'global::' prefix use"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_can_use_global_alias",
      "documentation": "Reference Qualification - Allow 'global::' prefix use"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_prefer_qualified_reference",
      "documentation": "Reference Qualification - Prefer fully qualified references"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_prefer_qualified_reference",
      "documentation": "Reference Qualification - Prefer fully qualified references"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_qualified_using_at_nested_scope",
      "documentation": "Reference Qualification - Prefer fully qualified using name at nested scope"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_qualified_using_at_nested_scope",
      "documentation": "Reference Qualification - Prefer fully qualified using name at nested scope"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_brace_style",
      "documentation": "Braces Layout - Type and namespace declaration"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle",
      "values": [
        {
          "type": "constant",
          "value": "end_of_line",
          "documentation": "At end of line (K&R style)"
        },
        {
          "type": "constant",
          "value": "end_of_line_no_space",
          "documentation": "At end of line (no space)"
        },
        {
          "type": "constant",
          "value": "next_line",
          "documentation": "At next line (BSD style)"
        },
        {
          "type": "constant",
          "value": "next_line_shifted",
          "documentation": "At next line indented (Whitesmiths style)"
        },
        {
          "type": "constant",
          "value": "next_line_shifted_2",
          "documentation": "At next line indented 2 (GNU style)"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_brace_style",
      "documentation": "Braces Layout - Type and namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_accessor_declaration_braces",
      "documentation": "Braces Layout - Accessor declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_accessor_declaration_braces",
      "documentation": "Braces Layout - Accessor declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_accessor_owner_declaration_braces",
      "documentation": "Braces Layout - Property declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_accessor_owner_declaration_braces",
      "documentation": "Braces Layout - Property declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_alignment_tab_fill_style",
      "documentation": "Align Multiline Constructs - How to align when tabs are used for indents"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle",
      "values": [
        {
          "type": "constant",
          "value": "use_spaces",
          "documentation": "Use spaces (looks aligned on any tab size)"
        },
        {
          "type": "constant",
          "value": "use_tabs_only",
          "documentation": "Only use tabs (inaccurate)"
        },
        {
          "type": "constant",
          "value": "optimal_fill",
          "documentation": "Mix tabs and spaces for optimal fill"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_alignment_tab_fill_style",
      "documentation": "Align Multiline Constructs - How to align when tabs are used for indents"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_first_arg_by_paren",
      "documentation": "Align Multiline Constructs - First call arguments by '('"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_first_arg_by_paren",
      "documentation": "Align Multiline Constructs - First call arguments by '('"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_linq_query",
      "documentation": "Align Multiline Constructs - LINQ query"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_linq_query",
      "documentation": "Align Multiline Constructs - LINQ query"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_argument",
      "documentation": "Align Multiline Constructs - Call arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_argument",
      "documentation": "Align Multiline Constructs - Call arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_array_and_object_initializer",
      "documentation": "Align Multiline Constructs - Array, object and collection initializer"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_array_and_object_initializer",
      "documentation": "Align Multiline Constructs - Array, object and collection initializer"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_binary_expressions_chain",
      "documentation": "Align Multiline Constructs - Chained binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_binary_expressions_chain",
      "documentation": "Align Multiline Constructs - Chained binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_calls_chain",
      "documentation": "Align Multiline Constructs - Chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_calls_chain",
      "documentation": "Align Multiline Constructs - Chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_expression",
      "documentation": "Align Multiline Constructs - Other expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_expression",
      "documentation": "Align Multiline Constructs - Other expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_extends_list",
      "documentation": "Align Multiline Constructs - List of base classes and interfaces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_extends_list",
      "documentation": "Align Multiline Constructs - List of base classes and interfaces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_for_stmt",
      "documentation": "Align Multiline Constructs - \"for\" statement header"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_for_stmt",
      "documentation": "Align Multiline Constructs - \"for\" statement header"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_parameter",
      "documentation": "Align Multiline Constructs - Method parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_parameter",
      "documentation": "Align Multiline Constructs - Method parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiple_declaration",
      "documentation": "Align Multiline Constructs - Multiple declarations"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiple_declaration",
      "documentation": "Align Multiline Constructs - Multiple declarations"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multline_type_parameter_constrains",
      "documentation": "Align Multiline Constructs - Type parameter constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multline_type_parameter_constrains",
      "documentation": "Align Multiline Constructs - Type parameter constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multline_type_parameter_list",
      "documentation": "Align Multiline Constructs - Type parameters list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multline_type_parameter_list",
      "documentation": "Align Multiline Constructs - Type parameters list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_tuple_components",
      "documentation": "Align Multiline Constructs - Tuple components"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_tuple_components",
      "documentation": "Align Multiline Constructs - Tuple components"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_allow_comment_after_lbrace",
      "documentation": "Braces Layout - Allow comment after '{'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_allow_comment_after_lbrace",
      "documentation": "Braces Layout - Allow comment after '{'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_anonymous_method_declaration_braces",
      "documentation": "Braces Layout - Lambda and delegate (anonymous method declaration)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_anonymous_method_declaration_braces",
      "documentation": "Braces Layout - Lambda and delegate (anonymous method declaration)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_block_statements",
      "documentation": "Blank Lines in Code - After statements with child blocks"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_block_statements",
      "documentation": "Blank Lines in Code - After statements with child blocks"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_control_transfer_statements",
      "documentation": "Blank Lines in Code - After statements with control transfer"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_control_transfer_statements",
      "documentation": "Blank Lines in Code - After statements with control transfer"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_multiline_statements",
      "documentation": "Blank Lines in Code - After multiline statements"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_multiline_statements",
      "documentation": "Blank Lines in Code - After multiline statements"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_start_comment",
      "documentation": "Blank Lines in Declarations - After file header comment"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_start_comment",
      "documentation": "Blank Lines in Declarations - After file header comment"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_using_list",
      "documentation": "Blank Lines in Declarations - After \"using\" list"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_using_list",
      "documentation": "Blank Lines in Declarations - After \"using\" list"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_auto_property",
      "documentation": "Blank Lines in Declarations - Around auto/abstract property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_auto_property",
      "documentation": "Blank Lines in Declarations - Around auto/abstract property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_field",
      "documentation": "Blank Lines in Declarations - Around field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_field",
      "documentation": "Blank Lines in Declarations - Around field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_invocable",
      "documentation": "Blank Lines in Declarations - Around method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_invocable",
      "documentation": "Blank Lines in Declarations - Around method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_local_method",
      "documentation": "Blank Lines in Code - Around local function"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_local_method",
      "documentation": "Blank Lines in Code - Around local function"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_namespace",
      "documentation": "Blank Lines in Declarations - Around namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_namespace",
      "documentation": "Blank Lines in Declarations - Around namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_property",
      "documentation": "Blank Lines in Declarations - Around property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_property",
      "documentation": "Blank Lines in Declarations - Around property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_region",
      "documentation": "General - Around region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_region",
      "documentation": "General - Around region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_auto_property",
      "documentation": "Blank Lines in Declarations - Around single line auto/abstract property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_auto_property",
      "documentation": "Blank Lines in Declarations - Around single line auto/abstract property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_field",
      "documentation": "Blank Lines in Declarations - Around single line field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_field",
      "documentation": "Blank Lines in Declarations - Around single line field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_invocable",
      "documentation": "Blank Lines in Declarations - Around single line method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_invocable",
      "documentation": "Blank Lines in Declarations - Around single line method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_local_method",
      "documentation": "Blank Lines in Code - Around single line local function"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_local_method",
      "documentation": "Blank Lines in Code - Around single line local function"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_property",
      "documentation": "Blank Lines in Declarations - Around single line property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_property",
      "documentation": "Blank Lines in Declarations - Around single line property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_type",
      "documentation": "Blank Lines in Declarations - Around type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_type",
      "documentation": "Blank Lines in Declarations - Around type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_before_block_statements",
      "documentation": "Blank Lines in Code - Before statements with child blocks"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_before_block_statements",
      "documentation": "Blank Lines in Code - Before statements with child blocks"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_before_control_transfer_statements",
      "documentation": "Blank Lines in Code - Before statements with control transfer"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_before_control_transfer_statements",
      "documentation": "Blank Lines in Code - Before statements with control transfer"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_before_multiline_statements",
      "documentation": "Blank Lines in Code - Before multiline statements"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_before_multiline_statements",
      "documentation": "Blank Lines in Code - Before multiline statements"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_before_single_line_comment",
      "documentation": "General - Before single-line comment"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_before_single_line_comment",
      "documentation": "General - Before single-line comment"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_between_using_groups",
      "documentation": "Blank Lines in Declarations - Between different \"using\" groups"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_between_using_groups",
      "documentation": "Blank Lines in Declarations - Between different \"using\" groups"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_inside_namespace",
      "documentation": "Blank Lines in Declarations - Inside namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_inside_namespace",
      "documentation": "Blank Lines in Declarations - Inside namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_inside_region",
      "documentation": "General - Inside region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_inside_region",
      "documentation": "General - Inside region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_inside_type",
      "documentation": "Blank Lines in Declarations - Inside type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_inside_type",
      "documentation": "Blank Lines in Declarations - Inside type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_case_block_braces",
      "documentation": "Braces Layout - Block under \"case\" label"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_case_block_braces",
      "documentation": "Braces Layout - Block under \"case\" label"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_continuous_indent_multiplier",
      "documentation": "General - Continuous line indent multiplier"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_continuous_indent_multiplier",
      "documentation": "General - Continuous line indent multiplier"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_empty_block_style",
      "documentation": "Braces Layout - Empty braces formatting"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_EmptyBlockStyle",
      "values": [
        {
          "type": "constant",
          "value": "multiline",
          "documentation": "On different lines"
        },
        {
          "type": "constant",
          "value": "together",
          "documentation": "Place braces together"
        },
        {
          "type": "constant",
          "value": "together_same_line",
          "documentation": "Together on the same line"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_empty_block_style",
      "documentation": "Braces Layout - Empty braces formatting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_EmptyBlockStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_extra_spaces",
      "documentation": "Preserve Existing Formatting - Extra spaces inside"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_Format_ExtraSpaces",
      "values": [
        {
          "type": "constant",
          "value": "remove_all",
          "documentation": "Remove all extra spaces"
        },
        {
          "type": "constant",
          "value": "leave_tabs",
          "documentation": "Leave extra tabs"
        },
        {
          "type": "constant",
          "value": "leave_multiple",
          "documentation": "Leave multiple extra spaces"
        },
        {
          "type": "constant",
          "value": "leave_all",
          "documentation": "Leave all extra spaces and tabs"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_extra_spaces",
      "documentation": "Preserve Existing Formatting - Extra spaces inside"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Format_ExtraSpaces"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_force_chop_compound_do_expression",
      "documentation": "Arrangement of Binary Expressions - Force chop compound condition in \"do\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_force_chop_compound_do_expression",
      "documentation": "Arrangement of Binary Expressions - Force chop compound condition in \"do\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_force_chop_compound_if_expression",
      "documentation": "Arrangement of Binary Expressions - Force chop compound condition in \"if\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_force_chop_compound_if_expression",
      "documentation": "Arrangement of Binary Expressions - Force chop compound condition in \"if\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_force_chop_compound_while_expression",
      "documentation": "Arrangement of Binary Expressions - Force chop compound condition in \"while\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_force_chop_compound_while_expression",
      "documentation": "Arrangement of Binary Expressions - Force chop compound condition in \"while\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_anonymous_method_block",
      "documentation": "Align Multiline Constructs - Anonymous method body"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_anonymous_method_block",
      "documentation": "Align Multiline Constructs - Anonymous method body"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_inside_namespace",
      "documentation": "Braces Layout - Indent inside namespace declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_inside_namespace",
      "documentation": "Braces Layout - Indent inside namespace declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_invocation_pars",
      "documentation": "Parenthesis - Indent method calls' parenthesis"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle",
      "values": [
        {
          "type": "constant",
          "value": "inside",
          "documentation": "Inside parenthesis (BSD/K&R style)"
        },
        {
          "type": "constant",
          "value": "outside",
          "documentation": "Parenthesis and inside equally (Whitesmiths style)"
        },
        {
          "type": "constant",
          "value": "outside_and_inside",
          "documentation": "Parenthesis 1x, inside 2x (GNU style)"
        },
        {
          "type": "constant",
          "value": "none",
          "documentation": "No indent"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_invocation_pars",
      "documentation": "Parenthesis - Indent method calls' parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_method_decl_pars",
      "documentation": "Parenthesis - Indent method declarations' parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_method_decl_pars",
      "documentation": "Parenthesis - Indent method declarations' parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_fixed_stmt",
      "documentation": "Nested Statements - Indent nested \"fixed\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_fixed_stmt",
      "documentation": "Nested Statements - Indent nested \"fixed\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_foreach_stmt",
      "documentation": "Nested Statements - Indent nested \"foreach\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_foreach_stmt",
      "documentation": "Nested Statements - Indent nested \"foreach\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_for_stmt",
      "documentation": "Nested Statements - Indent nested \"for\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_for_stmt",
      "documentation": "Nested Statements - Indent nested \"for\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_lock_stmt",
      "documentation": "Nested Statements - Indent nested \"lock\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_lock_stmt",
      "documentation": "Nested Statements - Indent nested \"lock\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_usings_stmt",
      "documentation": "Nested Statements - Indent nested \"using\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_usings_stmt",
      "documentation": "Nested Statements - Indent nested \"using\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_while_stmt",
      "documentation": "Nested Statements - Indent nested \"while\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_while_stmt",
      "documentation": "Nested Statements - Indent nested \"while\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_pars",
      "documentation": "Parenthesis - Indent other parenthesis and brackets"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_pars",
      "documentation": "Parenthesis - Indent other parenthesis and brackets"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_preprocessor_if",
      "documentation": "Preprocessor Directives - Indent #if, #else, #elif, #endif"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent",
      "values": [
        {
          "type": "constant",
          "value": "no_indent",
          "documentation": "No indent"
        },
        {
          "type": "constant",
          "value": "usual_indent",
          "documentation": "Indent as usual"
        },
        {
          "type": "constant",
          "value": "outdent",
          "documentation": "Outdent"
        },
        {
          "type": "constant",
          "value": "do_not_change",
          "documentation": "Do not change"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_preprocessor_if",
      "documentation": "Preprocessor Directives - Indent #if, #else, #elif, #endif"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_preprocessor_other",
      "documentation": "Preprocessor Directives - Indent other preprocessor directives"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_preprocessor_other",
      "documentation": "Preprocessor Directives - Indent other preprocessor directives"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_preprocessor_region",
      "documentation": "Preprocessor Directives - Indent #region, #endregion"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_preprocessor_region",
      "documentation": "Preprocessor Directives - Indent #region, #endregion"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_statement_pars",
      "documentation": "Parenthesis - Indent statement (if, while, for, etc) parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_statement_pars",
      "documentation": "Parenthesis - Indent statement (if, while, for, etc) parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_typearg_angles",
      "documentation": "Parenthesis - Indent type argument's angles"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_typearg_angles",
      "documentation": "Parenthesis - Indent type argument's angles"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_typeparam_angles",
      "documentation": "Parenthesis - Indent type parameter's angles"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_typeparam_angles",
      "documentation": "Parenthesis - Indent type parameter's angles"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_type_constraints",
      "documentation": "Other Indents - Indent type constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_type_constraints",
      "documentation": "Other Indents - Indent type constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_initializer_braces",
      "documentation": "Braces Layout - Array and object initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_initializer_braces",
      "documentation": "Braces Layout - Array and object initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align",
      "documentation": "Align Similar Code in Columns - Fields and constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align",
      "documentation": "Align Similar Code in Columns - Fields and constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_assignments",
      "documentation": "Align Similar Code in Columns - Other assignments and initializers"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_assignments",
      "documentation": "Align Similar Code in Columns - Other assignments and initializers"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_binary_expressions",
      "documentation": "Align Similar Code in Columns - Binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_binary_expressions",
      "documentation": "Align Similar Code in Columns - Binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_comments",
      "documentation": "Align Similar Code in Columns - End comments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_comments",
      "documentation": "Align Similar Code in Columns - End comments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_fields",
      "documentation": "Align Similar Code in Columns - Fields and constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_fields",
      "documentation": "Align Similar Code in Columns - Fields and constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_invocations",
      "documentation": "Align Similar Code in Columns - Invocations of the same method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_invocations",
      "documentation": "Align Similar Code in Columns - Invocations of the same method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_methods",
      "documentation": "Align Similar Code in Columns - Simple methods, operators, delegates"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_methods",
      "documentation": "Align Similar Code in Columns - Simple methods, operators, delegates"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_nested_ternary",
      "documentation": "Align Similar Code in Columns - Nested ternary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_nested_ternary",
      "documentation": "Align Similar Code in Columns - Nested ternary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_parameters",
      "documentation": "Align Similar Code in Columns - Multiline method signature"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_parameters",
      "documentation": "Align Similar Code in Columns - Multiline method signature"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_properties",
      "documentation": "Align Similar Code in Columns - Properties and events"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_properties",
      "documentation": "Align Similar Code in Columns - Properties and events"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_switch_sections",
      "documentation": "Align Similar Code in Columns - Simple switch sections"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_switch_sections",
      "documentation": "Align Similar Code in Columns - Simple switch sections"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_variables",
      "documentation": "Align Similar Code in Columns - Variables and local constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_variables",
      "documentation": "Align Similar Code in Columns - Variables and local constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_invocable_declaration_braces",
      "documentation": "Braces Layout - Method declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_invocable_declaration_braces",
      "documentation": "Braces Layout - Method declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_blank_lines_in_code",
      "documentation": "Blank Lines in Code - Keep max blank lines in code"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_blank_lines_in_code",
      "documentation": "Blank Lines in Code - Keep max blank lines in code"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_blank_lines_in_declarations",
      "documentation": "Blank Lines in Declarations - Keep max blank lines in declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_blank_lines_in_declarations",
      "documentation": "Blank Lines in Declarations - Keep max blank lines in declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_arrangement",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_arrangement",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_attribute_arrangement",
      "documentation": "Arrangement of Attributes - Keep existing arrangement of attributes"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_attribute_arrangement",
      "documentation": "Arrangement of Attributes - Keep existing arrangement of attributes"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_declaration_block_arrangement",
      "documentation": "Arrangement of Declaration Blocks - Keep existing arrangement of declaration blocks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_declaration_block_arrangement",
      "documentation": "Arrangement of Declaration Blocks - Keep existing arrangement of declaration blocks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_declaration_parens_arrangement",
      "documentation": "Arrangement of Method Signatures - Keep existing arrangement of parenthesis in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_declaration_parens_arrangement",
      "documentation": "Arrangement of Method Signatures - Keep existing arrangement of parenthesis in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_embedded_arrangement",
      "documentation": "Arrangement of Embedded Statements - Keep existing arrangement of embedded statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_embedded_arrangement",
      "documentation": "Arrangement of Embedded Statements - Keep existing arrangement of embedded statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_embedded_block_arrangement",
      "documentation": "Arrangement of Embedded Blocks - Keep existing arrangement of embedded blocks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_embedded_block_arrangement",
      "documentation": "Arrangement of Embedded Blocks - Keep existing arrangement of embedded blocks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_enum_arrangement",
      "documentation": "Arrangement of Enumerations - Keep existing arrangement of enumeration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_enum_arrangement",
      "documentation": "Arrangement of Enumerations - Keep existing arrangement of enumeration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_expr_member_arrangement",
      "documentation": "Arrangement of Expression Bodied Members - Keep existing arrangement of expression bodied members"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_expr_member_arrangement",
      "documentation": "Arrangement of Expression Bodied Members - Keep existing arrangement of expression bodied members"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_initializer_arrangement",
      "documentation": "Arrangement of Initializers - Keep existing arrangement of initializers"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_initializer_arrangement",
      "documentation": "Arrangement of Initializers - Keep existing arrangement of initializers"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_invocation_parens_arrangement",
      "documentation": "Arrangement of Invocations - Keep existing arrangement of parenthesis in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_invocation_parens_arrangement",
      "documentation": "Arrangement of Invocations - Keep existing arrangement of parenthesis in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_linebreaks",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_linebreaks",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_user_linebreaks",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_user_linebreaks",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_array_initializer_elements_on_line",
      "documentation": "Arrangement of Initializers - Max array initializer elements on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_array_initializer_elements_on_line",
      "documentation": "Arrangement of Initializers - Max array initializer elements on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_attribute_length_for_same_line",
      "documentation": "Arrangement of Attributes - Place attribute section list on separate line if it is longer than"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_attribute_length_for_same_line",
      "documentation": "Arrangement of Attributes - Place attribute section list on separate line if it is longer than"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_enum_members_on_line",
      "documentation": "Arrangement of Enumerations - Max enumeration members on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_enum_members_on_line",
      "documentation": "Arrangement of Enumerations - Max enumeration members on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_formal_parameters_on_line",
      "documentation": "Arrangement of Method Signatures - Max formal parameters on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_formal_parameters_on_line",
      "documentation": "Arrangement of Method Signatures - Max formal parameters on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_initializer_elements_on_line",
      "documentation": "Arrangement of Initializers - Max object and collection initializer elements on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_initializer_elements_on_line",
      "documentation": "Arrangement of Initializers - Max object and collection initializer elements on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_invocation_arguments_on_line",
      "documentation": "Arrangement of Invocations - Max invocation arguments on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_invocation_arguments_on_line",
      "documentation": "Arrangement of Invocations - Max invocation arguments on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_nested_ternary_style",
      "documentation": "Arrangement of Ternary Expressions - Nested ternary expression style"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_NestedTernaryExpressionStyle",
      "values": [
        {
          "type": "constant",
          "value": "simple_wrap",
          "documentation": "Simple wrap/Do not change"
        },
        {
          "type": "constant",
          "value": "autodetect",
          "documentation": "Chop in existing style"
        },
        {
          "type": "constant",
          "value": "compact",
          "documentation": "Chop in compact style"
        },
        {
          "type": "constant",
          "value": "expanded",
          "documentation": "Chop in expanded style"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_nested_ternary_style",
      "documentation": "Arrangement of Ternary Expressions - Nested ternary expression style"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_NestedTernaryExpressionStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_old_engine",
      "documentation": "Other - Revert to old formatting engine"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_old_engine",
      "documentation": "Other - Revert to old formatting engine"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_other_braces",
      "documentation": "Braces Layout - Other"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_other_braces",
      "documentation": "Braces Layout - Other"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_outdent_binary_ops",
      "documentation": "Align Multiline Constructs - Outdent binary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_outdent_binary_ops",
      "documentation": "Align Multiline Constructs - Outdent binary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_outdent_commas",
      "documentation": "Align Multiline Constructs - Outdent commas"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_outdent_commas",
      "documentation": "Align Multiline Constructs - Outdent commas"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_outdent_dots",
      "documentation": "Align Multiline Constructs - Outdent dots in chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_outdent_dots",
      "documentation": "Align Multiline Constructs - Outdent dots in chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_blocks_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_blocks_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_declaration_blocks_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_declaration_blocks_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_abstract_accessorholder_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_abstract_accessorholder_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place type attribute on same line"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner",
      "values": [
        {
          "type": "constant",
          "value": "False",
          "documentation": "Never"
        },
        {
          "type": "constant",
          "value": "never",
          "documentation": "Never"
        },
        {
          "type": "constant",
          "value": "if_owner_is_single_line",
          "documentation": "If owner is singleline"
        },
        {
          "type": "constant",
          "value": "True",
          "documentation": "Always"
        },
        {
          "type": "constant",
          "value": "always",
          "documentation": "Always"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place type attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_accessorholder_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place property/indexer/event attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_accessorholder_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place property/indexer/event attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_accessor_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place accessor attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_accessor_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place accessor attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_accessor_with_attrs_holder_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place it on single line even when it has attributes on accessors"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_accessor_with_attrs_holder_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place it on single line even when it has attributes on accessors"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_constructor_initializer_on_same_line",
      "documentation": "Arrangement of Method Signatures - Allow constructor initializer on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_constructor_initializer_on_same_line",
      "documentation": "Arrangement of Method Signatures - Allow constructor initializer on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_expr_accessor_on_single_line",
      "documentation": "Arrangement of Expression Bodied Members - Place property accessor expression body on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_expr_accessor_on_single_line",
      "documentation": "Arrangement of Expression Bodied Members - Place property accessor expression body on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_expr_method_on_single_line",
      "documentation": "Arrangement of Expression Bodied Members - Place method expression body on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_expr_method_on_single_line",
      "documentation": "Arrangement of Expression Bodied Members - Place method expression body on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_expr_property_on_single_line",
      "documentation": "Arrangement of Expression Bodied Members - Place property expression body on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_expr_property_on_single_line",
      "documentation": "Arrangement of Expression Bodied Members - Place property expression body on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_field_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place field attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_field_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place field attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_linq_into_on_new_line",
      "documentation": "Arrangement of LINQ Expressions - Place \"into\" on new line in LINQ expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_linq_into_on_new_line",
      "documentation": "Arrangement of LINQ Expressions - Place \"into\" on new line in LINQ expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_method_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place method attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_method_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place method attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_accessorholder_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place simple property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_accessorholder_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place simple property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_accessor_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place simple accessor on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_accessor_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place simple accessor on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_anonymousmethod_on_single_line",
      "documentation": "Arrangement of Embedded Blocks - Place simple anonymous method on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_anonymousmethod_on_single_line",
      "documentation": "Arrangement of Embedded Blocks - Place simple anonymous method on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_case_statement_on_same_line",
      "documentation": "Arrangement of Embedded Statements - Place simple \"case\" statement on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_case_statement_on_same_line",
      "documentation": "Arrangement of Embedded Statements - Place simple \"case\" statement on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_embedded_block_on_same_line",
      "documentation": "Arrangement of Embedded Blocks - Place a block with a single simple statement on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_embedded_block_on_same_line",
      "documentation": "Arrangement of Embedded Blocks - Place a block with a single simple statement on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_embedded_statement_on_same_line",
      "documentation": "Arrangement of Embedded Statements - Place simple embedded statement on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_embedded_statement_on_same_line",
      "documentation": "Arrangement of Embedded Statements - Place simple embedded statement on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_enum_on_single_line",
      "documentation": "Arrangement of Enumerations - Place simple enumeration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_enum_on_single_line",
      "documentation": "Arrangement of Enumerations - Place simple enumeration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_initializer_on_single_line",
      "documentation": "Arrangement of Initializers - Place simple array, object and collection on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_initializer_on_single_line",
      "documentation": "Arrangement of Initializers - Place simple array, object and collection on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_method_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place simple method on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_method_on_single_line",
      "documentation": "Arrangement of Declaration Blocks - Place simple method on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_type_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place type attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_type_attribute_on_same_line",
      "documentation": "Arrangement of Attributes - Place type attribute on same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_type_constraints_on_same_line",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Allow type constraints on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_type_constraints_on_same_line",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Allow type constraints on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_new_line_before_while",
      "documentation": "Arrangement of Statements - Place \"while\" on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_new_line_before_while",
      "documentation": "Arrangement of Statements - Place \"while\" on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_remove_blank_lines_near_braces_in_code",
      "documentation": "Blank Lines in Code - Remove blank lines after \"{\" and before \"}\" in code"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_remove_blank_lines_near_braces_in_code",
      "documentation": "Blank Lines in Code - Remove blank lines after \"{\" and before \"}\" in code"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_remove_blank_lines_near_braces_in_declarations",
      "documentation": "Blank Lines in Declarations - Remove blank lines after \"{\" and before \"}\" in declarations"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_remove_blank_lines_near_braces_in_declarations",
      "documentation": "Blank Lines in Declarations - Remove blank lines after \"{\" and before \"}\" in declarations"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_unary_operator",
      "documentation": "After Unary Operators - Logical not operator (!)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_unary_operator",
      "documentation": "After Unary Operators - Logical not operator (!)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ampersand_op",
      "documentation": "After Unary Operators - Unsafe addressof operator (&)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_ampersand_op",
      "documentation": "After Unary Operators - Unsafe addressof operator (&)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_asterik_op",
      "documentation": "After Unary Operators - Unsafe asterisk operator (*)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_asterik_op",
      "documentation": "After Unary Operators - Unsafe asterisk operator (*)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_attributes",
      "documentation": "Attributes - After attributes"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_attributes",
      "documentation": "Attributes - After attributes"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_colon",
      "documentation": "Around Colon - After other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_colon",
      "documentation": "Around Colon - After other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_attribute_colon",
      "documentation": "Around Colon - After other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_attribute_colon",
      "documentation": "Around Colon - After other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_colon_in_case",
      "documentation": "Around Colon - After colon in \"case\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_colon_in_case",
      "documentation": "Around Colon - After colon in \"case\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_logical_not_op",
      "documentation": "After Unary Operators - Logical not operator (!)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_logical_not_op",
      "documentation": "After Unary Operators - Logical not operator (!)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_operator_keyword",
      "documentation": "Other - After operator keyword"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_operator_keyword",
      "documentation": "Other - After operator keyword"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_ternary_operator",
      "documentation": "In Ternary Operator - Before '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_ternary_operator",
      "documentation": "In Ternary Operator - Before '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ternary_colon",
      "documentation": "In Ternary Operator - After ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_ternary_colon",
      "documentation": "In Ternary Operator - After ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ternary_quest",
      "documentation": "In Ternary Operator - After '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_ternary_quest",
      "documentation": "In Ternary Operator - After '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_type_parameter_constraint_colon",
      "documentation": "Around Colon - After type parameter constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_type_parameter_constraint_colon",
      "documentation": "Around Colon - After type parameter constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_unary_minus_op",
      "documentation": "After Unary Operators - Unary minus operator (-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_unary_minus_op",
      "documentation": "After Unary Operators - Unary minus operator (-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_unary_plus_op",
      "documentation": "After Unary Operators - Unary plus operator (+)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_unary_plus_op",
      "documentation": "After Unary Operators - Unary plus operator (+)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_binary_operator",
      "documentation": "Around Binary Operators - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_binary_operator",
      "documentation": "Around Binary Operators - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_additive_op",
      "documentation": "Around Binary Operators - Additive operators (+,-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_additive_op",
      "documentation": "Around Binary Operators - Additive operators (+,-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_alias_eq",
      "documentation": "Other - Around '=' in namespace alias directive"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_alias_eq",
      "documentation": "Other - Around '=' in namespace alias directive"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_member_access_operator",
      "documentation": "Around Binary Operators - Unsafe arrow operator (->)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_member_access_operator",
      "documentation": "Around Binary Operators - Unsafe arrow operator (->)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_arrow_op",
      "documentation": "Around Binary Operators - Unsafe arrow operator (->)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_arrow_op",
      "documentation": "Around Binary Operators - Unsafe arrow operator (->)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_assignment_op",
      "documentation": "Around Binary Operators - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_assignment_op",
      "documentation": "Around Binary Operators - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_bitwise_op",
      "documentation": "Around Binary Operators - Bitwise operators (&,|,^)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_bitwise_op",
      "documentation": "Around Binary Operators - Bitwise operators (&,|,^)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_dot",
      "documentation": "Other - Around dot"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_dot",
      "documentation": "Other - Around dot"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_equality_op",
      "documentation": "Around Binary Operators - Equality operators (==,!=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_equality_op",
      "documentation": "Around Binary Operators - Equality operators (==,!=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_lambda_arrow",
      "documentation": "Other - Around lambda arrow"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_lambda_arrow",
      "documentation": "Other - Around lambda arrow"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_logical_op",
      "documentation": "Around Binary Operators - Logical operators (&&,||)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_logical_op",
      "documentation": "Around Binary Operators - Logical operators (&&,||)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_multiplicative_op",
      "documentation": "Around Binary Operators - Multiplicative operators (*,/,%)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_multiplicative_op",
      "documentation": "Around Binary Operators - Multiplicative operators (*,/,%)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_nullcoalescing_op",
      "documentation": "Around Binary Operators - Null coalescing operator (??)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_nullcoalescing_op",
      "documentation": "Around Binary Operators - Null coalescing operator (??)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_relational_op",
      "documentation": "Around Binary Operators - Relational operators (<,>,<=,>=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_relational_op",
      "documentation": "Around Binary Operators - Relational operators (<,>,<=,>=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_shift_op",
      "documentation": "Around Binary Operators - Shift operators (<<,>>)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_shift_op",
      "documentation": "Around Binary Operators - Shift operators (<<,>>)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_array_access_brackets",
      "documentation": "Around Array Brackets - Array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_array_access_brackets",
      "documentation": "Around Array Brackets - Array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_array_rank_brackets",
      "documentation": "Around Array Brackets - Before array rank brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_array_rank_brackets",
      "documentation": "Around Array Brackets - Before array rank brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_colon",
      "documentation": "Around Colon - Before other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_colon",
      "documentation": "Around Colon - Before other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_attribute_colon",
      "documentation": "Around Colon - Before other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_attribute_colon",
      "documentation": "Around Colon - Before other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_catch_parentheses",
      "documentation": "Before Parentheses in Statements - \"catch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_catch_parentheses",
      "documentation": "Before Parentheses in Statements - \"catch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_checked_parentheses",
      "documentation": "Before Other Parentheses - \"checked\" and \"unchecked\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_checked_parentheses",
      "documentation": "Before Other Parentheses - \"checked\" and \"unchecked\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_colon_in_case",
      "documentation": "Around Colon - Before colon in \"case\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_colon_in_case",
      "documentation": "Around Colon - Before colon in \"case\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_default_parentheses",
      "documentation": "Before Other Parentheses - \"default\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_default_parentheses",
      "documentation": "Before Other Parentheses - \"default\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_empty_method_call_parentheses",
      "documentation": "Before Other Parentheses - Method call empty parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_empty_method_call_parentheses",
      "documentation": "Before Other Parentheses - Method call empty parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_empty_method_parentheses",
      "documentation": "Before Other Parentheses - Method declaration empty parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_empty_method_parentheses",
      "documentation": "Before Other Parentheses - Method declaration empty parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_fixed_parentheses",
      "documentation": "Before Parentheses in Statements - \"fixed\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_fixed_parentheses",
      "documentation": "Before Parentheses in Statements - \"fixed\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_foreach_parentheses",
      "documentation": "Before Parentheses in Statements - \"foreach\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_foreach_parentheses",
      "documentation": "Before Parentheses in Statements - \"foreach\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_for_parentheses",
      "documentation": "Before Parentheses in Statements - \"for\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_for_parentheses",
      "documentation": "Before Parentheses in Statements - \"for\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_if_parentheses",
      "documentation": "Before Parentheses in Statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_if_parentheses",
      "documentation": "Before Parentheses in Statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_lock_parentheses",
      "documentation": "Before Parentheses in Statements - \"lock\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_lock_parentheses",
      "documentation": "Before Parentheses in Statements - \"lock\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_method_call_parentheses",
      "documentation": "Before Other Parentheses - Method call parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_method_call_parentheses",
      "documentation": "Before Other Parentheses - Method call parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_method_parentheses",
      "documentation": "Before Other Parentheses - Method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_method_parentheses",
      "documentation": "Before Other Parentheses - Method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_nameof_parentheses",
      "documentation": "Before Other Parentheses - \"nameof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_nameof_parentheses",
      "documentation": "Before Other Parentheses - \"nameof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_nullable_mark",
      "documentation": "Other - Before nullable mark"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_nullable_mark",
      "documentation": "Other - Before nullable mark"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_pointer_asterik_declaration",
      "documentation": "Other - Before unsafe pointer declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_pointer_asterik_declaration",
      "documentation": "Other - Before unsafe pointer declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_semicolon",
      "documentation": "Around Comma and Semicolon - Before semicolon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_semicolon",
      "documentation": "Around Comma and Semicolon - Before semicolon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_singleline_accessorholder",
      "documentation": "Around Braces - Before single line accessors block"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_singleline_accessorholder",
      "documentation": "Around Braces - Before single line accessors block"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_sizeof_parentheses",
      "documentation": "Before Other Parentheses - \"sizeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_sizeof_parentheses",
      "documentation": "Before Other Parentheses - \"sizeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_switch_parentheses",
      "documentation": "Before Parentheses in Statements - \"switch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_switch_parentheses",
      "documentation": "Before Parentheses in Statements - \"switch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ternary_colon",
      "documentation": "In Ternary Operator - Before ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_ternary_colon",
      "documentation": "In Ternary Operator - Before ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ternary_quest",
      "documentation": "In Ternary Operator - Before '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_ternary_quest",
      "documentation": "In Ternary Operator - Before '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_trailing_comment",
      "documentation": "Other - Before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_trailing_comment",
      "documentation": "Other - Before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_typeof_parentheses",
      "documentation": "Before Other Parentheses - \"typeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_typeof_parentheses",
      "documentation": "Before Other Parentheses - \"typeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_type_argument_angle",
      "documentation": "Around Angle Brackets - Before type argument list angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_type_argument_angle",
      "documentation": "Around Angle Brackets - Before type argument list angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_type_parameter_angle",
      "documentation": "Around Angle Brackets - Before type parameter list angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_type_parameter_angle",
      "documentation": "Around Angle Brackets - Before type parameter list angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_type_parameter_constraint_colon",
      "documentation": "Around Colon - Before type parameter constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_type_parameter_constraint_colon",
      "documentation": "Around Colon - Before type parameter constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_using_parentheses",
      "documentation": "Before Parentheses in Statements - \"using\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_using_parentheses",
      "documentation": "Before Parentheses in Statements - \"using\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_while_parentheses",
      "documentation": "Before Parentheses in Statements - \"while\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_while_parentheses",
      "documentation": "Before Parentheses in Statements - \"while\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_accessors_in_singleline_property",
      "documentation": "Around Braces - Between accessors in single line property/event"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_accessors_in_singleline_property",
      "documentation": "Around Braces - Between accessors in single line property/event"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_attribute_sections",
      "documentation": "Attributes - Between attribute sections"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_attribute_sections",
      "documentation": "Attributes - Between attribute sections"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_keyword_and_expression",
      "documentation": "Before Other Parentheses - Between keyword and expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_keyword_and_expression",
      "documentation": "Before Other Parentheses - Between keyword and expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_keyword_and_type",
      "documentation": "Before Other Parentheses - Between keyword and type"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_keyword_and_type",
      "documentation": "Before Other Parentheses - Between keyword and type"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_in_singleline_accessorholder",
      "documentation": "Around Braces - Within single line accessor"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_in_singleline_accessorholder",
      "documentation": "Around Braces - Within single line accessor"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_in_singleline_anonymous_method",
      "documentation": "Around Braces - Within single line anonymous method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_in_singleline_anonymous_method",
      "documentation": "Around Braces - Within single line anonymous method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_in_singleline_method",
      "documentation": "Around Braces - Within single line method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_in_singleline_method",
      "documentation": "Around Braces - Within single line method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_near_postfix_and_prefix_op",
      "documentation": "After Unary Operators - Before/after ++ and --"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_near_postfix_and_prefix_op",
      "documentation": "After Unary Operators - Before/after ++ and --"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_braces",
      "documentation": "Around Braces - Space between empty braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_empty_braces",
      "documentation": "Around Braces - Space between empty braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_access_brackets",
      "documentation": "Around Array Brackets - Array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_array_access_brackets",
      "documentation": "Around Array Brackets - Array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_rank_brackets",
      "documentation": "Around Array Brackets - Within array rank brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_array_rank_brackets",
      "documentation": "Around Array Brackets - Within array rank brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_rank_empty_brackets",
      "documentation": "Around Array Brackets - Within array rank empty brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_array_rank_empty_brackets",
      "documentation": "Around Array Brackets - Within array rank empty brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_attribute_brackets",
      "documentation": "Attributes - Within attribute brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_attribute_brackets",
      "documentation": "Attributes - Within attribute brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_parentheses_of_control_flow_statements",
      "documentation": "Within Parentheses in Statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_parentheses_of_control_flow_statements",
      "documentation": "Within Parentheses in Statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_catch_parentheses",
      "documentation": "Within Parentheses in Statements - \"catch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_catch_parentheses",
      "documentation": "Within Parentheses in Statements - \"catch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_checked_parentheses",
      "documentation": "Within Other Parentheses - \"checked\" and \"unchecked\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_checked_parentheses",
      "documentation": "Within Other Parentheses - \"checked\" and \"unchecked\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_default_parentheses",
      "documentation": "Within Other Parentheses - \"default\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_default_parentheses",
      "documentation": "Within Other Parentheses - \"default\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_fixed_parentheses",
      "documentation": "Within Parentheses in Statements - \"fixed\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_fixed_parentheses",
      "documentation": "Within Parentheses in Statements - \"fixed\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_foreach_parentheses",
      "documentation": "Within Parentheses in Statements - \"foreach\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_foreach_parentheses",
      "documentation": "Within Parentheses in Statements - \"foreach\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_for_parentheses",
      "documentation": "Within Parentheses in Statements - \"for\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_for_parentheses",
      "documentation": "Within Parentheses in Statements - \"for\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_if_parentheses",
      "documentation": "Within Parentheses in Statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_if_parentheses",
      "documentation": "Within Parentheses in Statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_lock_parentheses",
      "documentation": "Within Parentheses in Statements - \"lock\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_lock_parentheses",
      "documentation": "Within Parentheses in Statements - \"lock\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_nameof_parentheses",
      "documentation": "Within Other Parentheses - \"nameof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_nameof_parentheses",
      "documentation": "Within Other Parentheses - \"nameof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_parentheses",
      "documentation": "Within Other Parentheses - Parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_parentheses",
      "documentation": "Within Other Parentheses - Parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_single_line_array_initializer_braces",
      "documentation": "Around Braces - Within single-line initializer braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_single_line_array_initializer_braces",
      "documentation": "Around Braces - Within single-line initializer braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_sizeof_parentheses",
      "documentation": "Within Other Parentheses - \"sizeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_sizeof_parentheses",
      "documentation": "Within Other Parentheses - \"sizeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_switch_parentheses",
      "documentation": "Within Parentheses in Statements - \"switch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_switch_parentheses",
      "documentation": "Within Parentheses in Statements - \"switch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_typecast_parentheses",
      "documentation": "Within Other Parentheses - Type cast parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_typecast_parentheses",
      "documentation": "Within Other Parentheses - Type cast parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_typeof_parentheses",
      "documentation": "Within Other Parentheses - \"typeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_typeof_parentheses",
      "documentation": "Within Other Parentheses - \"typeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_type_argument_angles",
      "documentation": "Around Angle Brackets - Type argument angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_type_argument_angles",
      "documentation": "Around Angle Brackets - Type argument angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_type_parameter_angles",
      "documentation": "Around Angle Brackets - Type parameter angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_type_parameter_angles",
      "documentation": "Around Angle Brackets - Type parameter angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_using_parentheses",
      "documentation": "Within Parentheses in Statements - \"using\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_using_parentheses",
      "documentation": "Within Parentheses in Statements - \"using\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_while_parentheses",
      "documentation": "Within Parentheses in Statements - \"while\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_while_parentheses",
      "documentation": "Within Parentheses in Statements - \"while\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_special_else_if_treatment",
      "documentation": "General - Special \"else if\" treatment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_special_else_if_treatment",
      "documentation": "General - Special \"else if\" treatment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_stick_comment",
      "documentation": "Other Indents - Don't indent comments started at first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_stick_comment",
      "documentation": "Other Indents - Don't indent comments started at first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_type_declaration_braces",
      "documentation": "Braces Layout - Type and namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_type_declaration_braces",
      "documentation": "Braces Layout - Type and namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_continuous_indent_inside_initializer_braces",
      "documentation": "Braces Layout - Use continuous line indent inside initializer braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_use_continuous_indent_inside_initializer_braces",
      "documentation": "Braces Layout - Use continuous line indent inside initializer braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_continuous_indent_inside_parens",
      "documentation": "Parenthesis - Use continuous line indent inside parenthesis"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_use_continuous_indent_inside_parens",
      "documentation": "Parenthesis - Use continuous line indent inside parenthesis"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_after_declaration_lpar",
      "documentation": "Arrangement of Method Signatures - Prefer wrap after \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_after_declaration_lpar",
      "documentation": "Arrangement of Method Signatures - Prefer wrap after \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_after_dot_in_method_calls",
      "documentation": "Arrangement of Member Access Expressions - Prefer wrap after \".\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_after_dot_in_method_calls",
      "documentation": "Arrangement of Member Access Expressions - Prefer wrap after \".\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_after_invocation_lpar",
      "documentation": "Arrangement of Invocations - Prefer wrap after \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_after_invocation_lpar",
      "documentation": "Arrangement of Invocations - Prefer wrap after \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_arguments_style",
      "documentation": "Arrangement of Invocations - Wrap invocation arguments"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle",
      "values": [
        {
          "type": "constant",
          "value": "wrap_if_long",
          "documentation": "Simple wrap"
        },
        {
          "type": "constant",
          "value": "chop_if_long",
          "documentation": "Chop if long or multiline"
        },
        {
          "type": "constant",
          "value": "chop_always",
          "documentation": "Chop always"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_arguments_style",
      "documentation": "Arrangement of Invocations - Wrap invocation arguments"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_array_initializer_style",
      "documentation": "Arrangement of Initializers - Wrap array initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_array_initializer_style",
      "documentation": "Arrangement of Initializers - Wrap array initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_arrow_with_expressions",
      "documentation": "Arrangement of Expression Bodied Members - Prefer wrap before \"=>\" followed by expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_arrow_with_expressions",
      "documentation": "Arrangement of Expression Bodied Members - Prefer wrap before \"=>\" followed by expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_binary_opsign",
      "documentation": "Arrangement of Binary Expressions - Prefer wrap before operator in binary expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_binary_opsign",
      "documentation": "Arrangement of Binary Expressions - Prefer wrap before operator in binary expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_comma",
      "documentation": "General - Prefer wrap before \",\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_comma",
      "documentation": "General - Prefer wrap before \",\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_declaration_lpar",
      "documentation": "Arrangement of Method Signatures - Prefer wrap before \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_declaration_lpar",
      "documentation": "Arrangement of Method Signatures - Prefer wrap before \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_declaration_rpar",
      "documentation": "Arrangement of Method Signatures - Prefer wrap before \")\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_declaration_rpar",
      "documentation": "Arrangement of Method Signatures - Prefer wrap before \")\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_extends_colon",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Prefer wrap before \":\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_extends_colon",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Prefer wrap before \":\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_first_type_parameter_constraint",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Prefer wrap before first constraint"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_first_type_parameter_constraint",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Prefer wrap before first constraint"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_invocation_lpar",
      "documentation": "Arrangement of Invocations - Prefer wrap before \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_invocation_lpar",
      "documentation": "Arrangement of Invocations - Prefer wrap before \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_invocation_rpar",
      "documentation": "Arrangement of Invocations - Prefer wrap before \")\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_invocation_rpar",
      "documentation": "Arrangement of Invocations - Prefer wrap before \")\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_linq_expression",
      "documentation": "Arrangement of LINQ Expressions - Prefer wrap before multiline LINQ expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_linq_expression",
      "documentation": "Arrangement of LINQ Expressions - Prefer wrap before multiline LINQ expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_ternary_opsigns",
      "documentation": "Arrangement of Ternary Expressions - Prefer wrap before \"?\" and \":\" in ternary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_ternary_opsigns",
      "documentation": "Arrangement of Ternary Expressions - Prefer wrap before \"?\" and \":\" in ternary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_type_parameter_langle",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Prefer wrap before type parameters opening angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_type_parameter_langle",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Prefer wrap before type parameters opening angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_chained_binary_expressions",
      "documentation": "Arrangement of Binary Expressions - Wrap chained binary expressions"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleSimple",
      "values": [
        {
          "type": "constant",
          "value": "wrap_if_long",
          "documentation": "Simple wrap"
        },
        {
          "type": "constant",
          "value": "chop_if_long",
          "documentation": "Chop if long or multiline"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_chained_binary_expressions",
      "documentation": "Arrangement of Binary Expressions - Wrap chained binary expressions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleSimple"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_chained_method_calls",
      "documentation": "Arrangement of Member Access Expressions - Wrap chained method calls"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_chained_method_calls",
      "documentation": "Arrangement of Member Access Expressions - Wrap chained method calls"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_enum_declaration",
      "documentation": "Arrangement of Enumerations - Wrap enumeration declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_enum_declaration",
      "documentation": "Arrangement of Enumerations - Wrap enumeration declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_extends_list_style",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Wrap extends/implements list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_extends_list_style",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Wrap extends/implements list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_for_stmt_header_style",
      "documentation": "Arrangement of Statements - Wrap \"for\" statement header"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_for_stmt_header_style",
      "documentation": "Arrangement of Statements - Wrap \"for\" statement header"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_linq_expressions",
      "documentation": "Arrangement of LINQ Expressions - Wrap LINQ expressions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_linq_expressions",
      "documentation": "Arrangement of LINQ Expressions - Wrap LINQ expressions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_multiple_declaration_style",
      "documentation": "Arrangement of Statements - Wrap multiple declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_multiple_declaration_style",
      "documentation": "Arrangement of Statements - Wrap multiple declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_multiple_type_parameter_constraints_style",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Wrap multiple type parameter constraints"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_multiple_type_parameter_constraints_style",
      "documentation": "Arrangement of Type Parameters, Constraints and Base Types - Wrap multiple type parameter constraints"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_object_and_collection_initializer_style",
      "documentation": "Arrangement of Initializers - Wrap object and collection initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_object_and_collection_initializer_style",
      "documentation": "Arrangement of Initializers - Wrap object and collection initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_parameters_style",
      "documentation": "Arrangement of Method Signatures - Wrap formal parameters"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_parameters_style",
      "documentation": "Arrangement of Method Signatures - Wrap formal parameters"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_ternary_expr_style",
      "documentation": "Arrangement of Ternary Expressions - Wrap ternary expression"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_ternary_expr_style",
      "documentation": "Arrangement of Ternary Expressions - Wrap ternary expression"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_verbatim_interpolated_strings",
      "documentation": "Arrangement of interpolated strings - Wrap verbatim interpolated strings"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleExpanded",
      "values": [
        {
          "type": "constant",
          "value": "wrap_if_long",
          "documentation": "Simple wrap"
        },
        {
          "type": "constant",
          "value": "chop_if_long",
          "documentation": "Chop if long or multiline"
        },
        {
          "type": "constant",
          "value": "no_wrap",
          "documentation": "Do not wrap even if long"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_verbatim_interpolated_strings",
      "documentation": "Arrangement of interpolated strings - Wrap verbatim interpolated strings"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleExpanded"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_accessor_owner_body",
      "documentation": "Code Body - Properties, indexers and events"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_AccessorOwnerBodyStyle",
      "values": [
        {
          "type": "constant",
          "value": "expression_body",
          "documentation": "Expression body"
        },
        {
          "type": "constant",
          "value": "accessors_with_expression_body",
          "documentation": "Accessors with expression body"
        },
        {
          "type": "constant",
          "value": "accessors_with_block_body",
          "documentation": "Accessors with block body"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_accessor_owner_body",
      "documentation": "Code Body - Properties, indexers and events"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_AccessorOwnerBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_anonymous_function",
      "documentation": "Arguments - Anonymous methods (delegates and lambdas)"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle",
      "values": [
        {
          "type": "constant",
          "value": "positional",
          "documentation": "Positional argument"
        },
        {
          "type": "constant",
          "value": "named",
          "documentation": "Named argument"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_anonymous_function",
      "documentation": "Arguments - Anonymous methods (delegates and lambdas)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_literal",
      "documentation": "Arguments - Literal values"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_literal",
      "documentation": "Arguments - Literal values"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_named",
      "documentation": "Arguments - Named expressions (variables, properties, methods, etc.)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_named",
      "documentation": "Arguments - Named expressions (variables, properties, methods, etc.)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_other",
      "documentation": "Arguments - Other"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_other",
      "documentation": "Arguments - Other"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_skip_single",
      "documentation": "Arguments - Skip single arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_skip_single",
      "documentation": "Arguments - Skip single arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_string_literal",
      "documentation": "Arguments - String literal values"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_string_literal",
      "documentation": "Arguments - String literal values"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_dowhile",
      "documentation": "Braces - In \"do-while\" statement"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle",
      "values": [
        {
          "type": "constant",
          "value": "not_required",
          "documentation": "Do not enforce"
        },
        {
          "type": "constant",
          "value": "required",
          "documentation": "Enforce always"
        },
        {
          "type": "constant",
          "value": "required_for_multiline",
          "documentation": "Enforce if body is multi-line"
        },
        {
          "type": "constant",
          "value": "required_for_multiline_statement",
          "documentation": "Enforce if statement is multi-line"
        },
        {
          "type": "constant",
          "value": "required_for_complex",
          "documentation": "Enforce if body is complex"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_dowhile",
      "documentation": "Braces - In \"do-while\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_fixed",
      "documentation": "Braces - In \"fixed\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_fixed",
      "documentation": "Braces - In \"fixed\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_for",
      "documentation": "Braces - In \"for\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_for",
      "documentation": "Braces - In \"for\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_foreach",
      "documentation": "Braces - In \"foreach\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_foreach",
      "documentation": "Braces - In \"foreach\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_ifelse",
      "documentation": "Braces - In \"if\" statement"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_IfElseBracesCodeStyle",
      "values": [
        {
          "type": "constant",
          "value": "not_required",
          "documentation": "Do not enforce"
        },
        {
          "type": "constant",
          "value": "not_required_for_both",
          "documentation": "Enforce if any part requires braces"
        },
        {
          "type": "constant",
          "value": "required",
          "documentation": "Enforce always"
        },
        {
          "type": "constant",
          "value": "required_for_multiline",
          "documentation": "Enforce if body is multi-line"
        },
        {
          "type": "constant",
          "value": "required_for_multiline_statement",
          "documentation": "Enforce if statement is multi-line"
        },
        {
          "type": "constant",
          "value": "required_for_complex",
          "documentation": "Enforce if body is complex"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_ifelse",
      "documentation": "Braces - In \"if\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_IfElseBracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_lock",
      "documentation": "Braces - In \"lock\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_lock",
      "documentation": "Braces - In \"lock\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_using",
      "documentation": "Braces - In \"using\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_using",
      "documentation": "Braces - In \"using\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_while",
      "documentation": "Braces - In \"while\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_while",
      "documentation": "Braces - In \"while\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_redundant",
      "documentation": "Braces - Remove redundant"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_redundant",
      "documentation": "Braces - Remove redundant"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_builtin_type_reference_for_member_access_style",
      "documentation": "Built-in Types - In member access expressions, prefer"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BuiltInTypeStyle",
      "values": [
        {
          "type": "constant",
          "value": "use_keyword",
          "documentation": "Keyword"
        },
        {
          "type": "constant",
          "value": "use_clr_name",
          "documentation": "CLR type name"
        },
        {
          "type": "constant",
          "value": "dynamic"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_builtin_type_reference_for_member_access_style",
      "documentation": "Built-in Types - In member access expressions, prefer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BuiltInTypeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_builtin_type_reference_style",
      "documentation": "Built-in Types - In locals, members and parameters, prefer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BuiltInTypeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_builtin_type_reference_style",
      "documentation": "Built-in Types - In locals, members and parameters, prefer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BuiltInTypeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_constructor_or_destructor_body",
      "documentation": "Code Body - Constructors and destructors"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle",
      "values": [
        {
          "type": "constant",
          "value": "expression_body",
          "documentation": "Expression body"
        },
        {
          "type": "constant",
          "value": "block_body",
          "documentation": "Block body"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_constructor_or_destructor_body",
      "documentation": "Code Body - Constructors and destructors"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_default_internal_modifier",
      "documentation": "Modifiers - Prefer explicit/implicit internal modifier for types"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultModifierDefinition",
      "values": [
        {
          "type": "constant",
          "value": "explicit",
          "documentation": "Explicit"
        },
        {
          "type": "constant",
          "value": "implicit",
          "documentation": "Implicit"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_default_internal_modifier",
      "documentation": "Modifiers - Prefer explicit/implicit internal modifier for types"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultModifierDefinition"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_default_private_modifier",
      "documentation": "Modifiers - Prefer explicit/implicit private modifier for type members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultModifierDefinition"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_default_private_modifier",
      "documentation": "Modifiers - Prefer explicit/implicit private modifier for type members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultModifierDefinition"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_force_attribute_style",
      "documentation": "Attributes - Join or separate attributes in section"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_AttributeStyle",
      "values": [
        {
          "type": "constant",
          "value": "join",
          "documentation": "Join"
        },
        {
          "type": "constant",
          "value": "separate",
          "documentation": "Separate"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_force_attribute_style",
      "documentation": "Attributes - Join or separate attributes in section"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_AttributeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_local_function_body",
      "documentation": "Code Body - Local functions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_local_function_body",
      "documentation": "Code Body - Local functions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_method_or_operator_body",
      "documentation": "Code Body - Methods and operators"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_method_or_operator_body",
      "documentation": "Code Body - Methods and operators"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_modifiers_order",
      "documentation": "Modifiers - Modifiers order"
    },
    "value": {
      "type": "list",
      "values": [
        "public",
        "private",
        "protected",
        "internal",
        "static",
        "extern",
        "new",
        "virtual",
        "abstract",
        "sealed",
        "override",
        "readonly",
        "unsafe",
        "volatile",
        "async"
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_modifiers_order",
      "documentation": "Modifiers - Modifiers order"
    },
    "value": {
      "type": "list",
      "values": [
        "public",
        "private",
        "protected",
        "internal",
        "static",
        "extern",
        "new",
        "virtual",
        "abstract",
        "sealed",
        "override",
        "readonly",
        "unsafe",
        "volatile",
        "async"
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_parentheses_non_obvious_operations",
      "documentation": "Parentheses - Add parentheses to avoid non-obvious precedence. Select which operations has non-obvious precedence"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BinaryOperationType",
      "values": [
        {
          "type": "constant",
          "value": "multiplicative",
          "documentation": "*  /  %"
        },
        {
          "type": "constant",
          "value": "additive",
          "documentation": "+  -"
        },
        {
          "type": "constant",
          "value": "arithmetic",
          "documentation": "*  /  %  +  -"
        },
        {
          "type": "constant",
          "value": "shift",
          "documentation": "<<  >>"
        },
        {
          "type": "constant",
          "value": "relational",
          "documentation": "<  >  <=  >="
        },
        {
          "type": "constant",
          "value": "equality",
          "documentation": "==  !="
        },
        {
          "type": "constant",
          "value": "bitwise_and",
          "documentation": "&"
        },
        {
          "type": "constant",
          "value": "bitwise_exclusive_or",
          "documentation": "^"
        },
        {
          "type": "constant",
          "value": "bitwise_inclusive_or",
          "documentation": "|"
        },
        {
          "type": "constant",
          "value": "bitwise",
          "documentation": "&  ^  |"
        },
        {
          "type": "constant",
          "value": "conditional_and",
          "documentation": "&&"
        },
        {
          "type": "constant",
          "value": "conditional_or",
          "documentation": "||"
        },
        {
          "type": "constant",
          "value": "conditional",
          "documentation": "&&  ||"
        },
        {
          "type": "constant",
          "value": "null_coalescing",
          "documentation": "??"
        },
        {
          "type": "constant",
          "value": "lowest"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_parentheses_non_obvious_operations",
      "documentation": "Parentheses - Add parentheses to avoid non-obvious precedence. Select which operations has non-obvious precedence"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BinaryOperationType"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_parentheses_redundancy_style",
      "documentation": "Parentheses - Remove redundant parentheses"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ParenthesesRedundancyStyle",
      "values": [
        {
          "type": "constant",
          "value": "remove",
          "documentation": "Always"
        },
        {
          "type": "constant",
          "value": "remove_if_not_clarifies_precedence",
          "documentation": "If not clarifies precedence"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_parentheses_redundancy_style",
      "documentation": "Parentheses - Remove redundant parentheses"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ParenthesesRedundancyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_heuristics_for_body_style",
      "documentation": "Code Body - Apply style heuristics"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_use_heuristics_for_body_style",
      "documentation": "Code Body - Apply style heuristics"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_static_members_qualify_members",
      "documentation": "Static Members Qualification - Members to qualify"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_QualifiedMember",
      "values": [
        {
          "type": "constant",
          "value": "none"
        },
        {
          "type": "constant",
          "value": "field"
        },
        {
          "type": "constant",
          "value": "property"
        },
        {
          "type": "constant",
          "value": "event"
        },
        {
          "type": "constant",
          "value": "method"
        },
        {
          "type": "constant",
          "value": "all"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_static_members_qualify_members",
      "documentation": "Static Members Qualification - Members to qualify"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_QualifiedMember"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_static_members_qualify_with",
      "documentation": "Static Members Qualification - Qualify with the name of"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_StaticMemberQualifierStyle",
      "values": [
        {
          "type": "constant",
          "value": "do_not_change"
        },
        {
          "type": "constant",
          "value": "none"
        },
        {
          "type": "constant",
          "value": "current_type",
          "documentation": "Current type"
        },
        {
          "type": "constant",
          "value": "declared_type",
          "documentation": "Declared-in type"
        },
        {
          "type": "constant",
          "value": "all"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_static_members_qualify_with",
      "documentation": "Static Members Qualification - Qualify with the name of"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_StaticMemberQualifierStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_instance_members_qualify_declared_in",
      "documentation": "Instance Members Qualification - Qualify members declared in"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_MemberDeclaredIn",
      "values": [
        {
          "type": "constant",
          "value": "this_class",
          "documentation": "same class"
        },
        {
          "type": "constant",
          "value": "base_class",
          "documentation": "base class"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_instance_members_qualify_declared_in",
      "documentation": "Instance Members Qualification - Qualify members declared in"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_MemberDeclaredIn"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_instance_members_qualify_members",
      "documentation": "Instance Members Qualification - Use \"this.\" qualifier for"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_QualifiedMember"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_instance_members_qualify_members",
      "documentation": "Instance Members Qualification - Use \"this.\" qualifier for"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_QualifiedMember"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_line_after_pi",
      "documentation": "Processing Instructions - Blank line after processing instructions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_child_elements",
      "documentation": "Tag Content - Indent inside element that doesn't contain text"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlIndentingStyle",
      "values": [
        {
          "type": "constant",
          "value": "DoNotTouch",
          "documentation": "Do not change indenting"
        },
        {
          "type": "constant",
          "value": "do_not_touch",
          "documentation": "Do not change indenting"
        },
        {
          "type": "constant",
          "value": "OneIndent",
          "documentation": "One indent from parent element"
        },
        {
          "type": "constant",
          "value": "one_indent",
          "documentation": "One indent from parent element"
        },
        {
          "type": "constant",
          "value": "ZeroIndent",
          "documentation": "No indent from parent element"
        },
        {
          "type": "constant",
          "value": "zero_indent",
          "documentation": "No indent from parent element"
        },
        {
          "type": "constant",
          "value": "RemoveIndent",
          "documentation": "No indent at all"
        },
        {
          "type": "constant",
          "value": "remove_indent",
          "documentation": "No indent at all"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_text",
      "documentation": "Tag Content - Indent inside element that contain text"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlIndentingStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreaks_inside_tags_for_multiline_elements",
      "documentation": "Around Tags - Line breaks after start-tag and before end-tag in multiline elements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreaks_inside_tags_for_elements_with_child_elements",
      "documentation": "Around Tags - Line breaks after start-tag and before end-tag in elements that contain other elements and no text"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_blank_lines_between_tags",
      "documentation": "Around Tags - Maximum blank lines between tags"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreaks_inside_tags_for_elements_longer_than",
      "documentation": "Tag Content - Line breaks after start-tag and before end-tag when element is longer than"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreak_before_elements",
      "documentation": "Around Tags - Place these elements on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_spaces_around_eq_in_pi_attribute",
      "documentation": "Processing Instructions - Spaces around '=' in attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_pi_attributes_indent",
      "documentation": "Processing Instructions - Attributes indenting"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributeIndenting",
      "values": [
        {
          "type": "constant",
          "value": "single_indent",
          "documentation": "Single indent"
        },
        {
          "type": "constant",
          "value": "double_indent",
          "documentation": "Double indent"
        },
        {
          "type": "constant",
          "value": "align_by_first_attribute",
          "documentation": "Align by first attribute"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_pi_attribute_style",
      "documentation": "Processing Instructions - Attributes format"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributesFormat",
      "values": [
        {
          "type": "constant",
          "value": "on_single_line",
          "documentation": "On single line"
        },
        {
          "type": "constant",
          "value": "first_attribute_on_single_line",
          "documentation": "First attribute on single line"
        },
        {
          "type": "constant",
          "value": "on_different_lines",
          "documentation": "Each attribute on separate lines"
        },
        {
          "type": "constant",
          "value": "do_not_touch",
          "documentation": "Do not touch"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_last_pi_attribute",
      "documentation": "Processing Instructions - Space after last attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreak_before_singleline_elements",
      "documentation": "Around Tags - Place singleline elements on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_spaces_inside_tags",
      "documentation": "Tag Content - Spaces after start-tag and before end-tag otherwise"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreak_before_multiline_elements",
      "documentation": "Around Tags - Place multiline elements on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_attribute_indent",
      "documentation": "Inside of Tag Header - Attributes indenting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributeIndenting"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_attribute_style",
      "documentation": "Inside of Tag Header - Attributes format"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributesFormat"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_last_attribute",
      "documentation": "Inside of Tag Header - Space after last attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_self_closing",
      "documentation": "Inside of Tag Header - Space before '/>'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_spaces_around_eq_in_attribute",
      "documentation": "Inside of Tag Header - Spaces around '=' in attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_tags_and_pi",
      "documentation": "Line Wrapping - Wrap tags and processing instructions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_text",
      "documentation": "Tag Content - Wrap inside text"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_around_elements",
      "documentation": "Tag Content - Wrap before and after elements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_alignment_tab_fill_style",
      "documentation": "Tabs and Indents - How to align when tabs are used for indents"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_argument",
      "documentation": "Align Multiline Constructs - Invocation arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_array_initializer",
      "documentation": "Align Multiline Constructs - Array initializer"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_array_initializer",
      "documentation": "Align Multiline Constructs - Array initializer"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_expression",
      "documentation": "Align Multiline Constructs - Expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_implements_list",
      "documentation": "Align Multiline Constructs - Implements/handles list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_implements_list",
      "documentation": "Align Multiline Constructs - Implements/handles list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_parameter",
      "documentation": "Align Multiline Constructs - Method parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiple_declaration",
      "documentation": "Align Multiline Constructs - Multiple declaration list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_imports",
      "documentation": "Blank Lines - After imports section"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_after_imports",
      "documentation": "Blank Lines - After imports section"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_options",
      "documentation": "Blank Lines - After file options section"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_after_options",
      "documentation": "Blank Lines - After file options section"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_field",
      "documentation": "Blank Lines - Around multiline field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_global_attribute",
      "documentation": "Blank Lines - After global attribute"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_global_attribute",
      "documentation": "Blank Lines - After global attribute"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_invocable",
      "documentation": "Blank Lines - Around multiline method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_namespace",
      "documentation": "Blank Lines - Around namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_region",
      "documentation": "Blank Lines - Around region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_single_line_field",
      "documentation": "Blank Lines - Around single line field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_single_line_invocable",
      "documentation": "Blank Lines - Around single line method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_type",
      "documentation": "Blank Lines - Around type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_inside_region",
      "documentation": "Blank Lines - Inside region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_case_from_select",
      "documentation": "Other - Indent \"case\" from \"select\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_indent_case_from_select",
      "documentation": "Other - Indent \"case\" from \"select\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_keep_blank_lines_in_code",
      "documentation": "Preserve Existing Formatting - Keep max blank lines in code"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_keep_blank_lines_in_declarations",
      "documentation": "Preserve Existing Formatting - Keep max blank lines in declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_keep_user_linebreaks",
      "documentation": "Preserve Existing Formatting - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_event_attribute_on_same_line",
      "documentation": "Attributes - Place event attribute on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_event_attribute_on_same_line",
      "documentation": "Attributes - Place event attribute on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_field_attribute_on_same_line",
      "documentation": "Attributes - Place field attribute on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_method_attribute_on_same_line",
      "documentation": "Attributes - Place method attribute on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_property_attribute_on_same_line",
      "documentation": "Attributes - Place property attribute on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_property_attribute_on_same_line",
      "documentation": "Attributes - Place property attribute on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_type_attribute_on_same_line",
      "documentation": "Attributes - Place type attribute on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_attribute_target_colon",
      "documentation": "Attributes - After attribute target colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_after_attribute_target_colon",
      "documentation": "Attributes - After attribute target colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma",
      "documentation": "In Declarations - After comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_after_comma",
      "documentation": "Other - After ','"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_binary_operator",
      "documentation": "Around Operations - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_additive_op",
      "documentation": "Around Operations - Additive operators (+,-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_assignment_op",
      "documentation": "Around Operations - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_member_access_operator",
      "documentation": "Other - Around '.'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_dot",
      "documentation": "Other - Around '.'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_multiplicative_op",
      "documentation": "Around Operations - Multiplicative operators (*,/,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_relational_op",
      "documentation": "Around Operations - Relational operators (<,>,<=,>=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_shift_op",
      "documentation": "Around Operations - Shift operators (<<,>>)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_stmt_colon",
      "documentation": "Other - Around statement ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_stmt_colon",
      "documentation": "Other - Around statement ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_array_rank_parentheses",
      "documentation": "Arrays - Before array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_array_rank_parentheses",
      "documentation": "Arrays - Before array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_attribute_target_colon",
      "documentation": "Attributes - Before attribute target colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_attribute_target_colon",
      "documentation": "Attributes - Before attribute target colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma",
      "documentation": "In Declarations - Before comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_comma",
      "documentation": "Other - Before ','"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_empty_invocation_parentheses",
      "documentation": "Nearby Parentheses - Before empty invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_empty_invocation_parentheses",
      "documentation": "Nearby Parentheses - Before empty invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_empty_method_parentheses",
      "documentation": "Nearby Parentheses - Before empty method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_invocation_parentheses",
      "documentation": "Nearby Parentheses - Before invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_invocation_parentheses",
      "documentation": "Nearby Parentheses - Before invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_label_colon",
      "documentation": "Other - Before ':' in label"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_label_colon",
      "documentation": "Other - Before ':' in label"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_method_parentheses",
      "documentation": "Nearby Parentheses - Before method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_type_parameter_parentheses",
      "documentation": "Nearby Parentheses - Before type parameter parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_type_parameter_parentheses",
      "documentation": "Nearby Parentheses - Before type parameter parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_initialization_braces",
      "documentation": "Arrays - Within array initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_array_initialization_braces",
      "documentation": "Arrays - Within array initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_rank_empty_parentheses",
      "documentation": "Arrays - Within empty array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_array_rank_empty_parentheses",
      "documentation": "Arrays - Within empty array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_rank_parentheses",
      "documentation": "Arrays - Within array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_array_rank_parentheses",
      "documentation": "Arrays - Within array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_attribute_angles",
      "documentation": "Attributes - Within attribute angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_attribute_angles",
      "documentation": "Attributes - Within attribute angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_invocation_parentheses",
      "documentation": "Nearby Parentheses - Within empty invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_empty_invocation_parentheses",
      "documentation": "Nearby Parentheses - Within empty invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_method_parentheses",
      "documentation": "Nearby Parentheses - Within empty method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_empty_method_parentheses",
      "documentation": "Nearby Parentheses - Within empty method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_expression_parentheses",
      "documentation": "Expression - Within parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_expression_parentheses",
      "documentation": "Nearby Parentheses - Within expression parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_invocation_parentheses",
      "documentation": "Nearby Parentheses - Within invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_invocation_parentheses",
      "documentation": "Nearby Parentheses - Within invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_method_parentheses",
      "documentation": "Nearby Parentheses - Within method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_method_parentheses",
      "documentation": "Nearby Parentheses - Within method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_tuple_parentheses",
      "documentation": "Nearby Parentheses - Within tuple parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_tuple_parentheses",
      "documentation": "Nearby Parentheses - Within tuple parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_type_parameter_parentheses",
      "documentation": "Nearby Parentheses - Within type parameter parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_type_parameter_parentheses",
      "documentation": "Nearby Parentheses - Within type parameter parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_stick_comment",
      "documentation": "Other - Don't indent comments started at first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_arguments_style",
      "documentation": "Line Wrapping - Wrap invocation arguments"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_before_binary_opsign",
      "documentation": "Line Wrapping - Prefer wrap before operator in binary expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_before_declaration_lpar",
      "documentation": "Line Wrapping - Prefer wrap before \"(\" in method declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_before_invocation_lpar",
      "documentation": "Line Wrapping - Prefer wrap before \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_extends_list_style",
      "documentation": "Line Wrapping - Wrap extends/implements/handles list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_multiple_declaration_style",
      "documentation": "Line Wrapping - Wrap multiple declarations list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_parameters_style",
      "documentation": "Line Wrapping - Wrap formal parameters"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_ternary",
      "documentation": "Align Multiline Construct - ?: operator"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_TernaryOperatorAlign",
      "values": [
        {
          "type": "constant",
          "value": "align_all",
          "documentation": "Align"
        },
        {
          "type": "constant",
          "value": "align_not_nested",
          "documentation": "Align except when nested"
        },
        {
          "type": "constant",
          "value": "none",
          "documentation": "No align"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_switch_labels",
      "documentation": "Indentation - Indent \"case\" from \"switch\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_new_line_before_catch",
      "documentation": "Place on New Line - Place \"catch\" on new line after compound statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_new_line_before_else",
      "documentation": "Place on New Line - Place \"else\" on new line after compound statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_simple_embedded_statement_style",
      "documentation": "Place on New Line - Break line in single embedded statement"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle",
      "values": [
        {
          "type": "constant",
          "value": "do_not_change",
          "documentation": "Do not change"
        },
        {
          "type": "constant",
          "value": "on_single_line",
          "documentation": "Force put on single line"
        },
        {
          "type": "constant",
          "value": "line_break",
          "documentation": "Force line breaks"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_semicolon_in_for_statement",
      "documentation": "In Control Statements - After semicolon in for statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_assignment_operator",
      "documentation": "In Expressions - Around assignment operator"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_open_square_brackets",
      "documentation": "In Expressions - Before array subscript brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_call_name_and_opening_parenthesis",
      "documentation": "In Expressions - Before parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_semicolon_in_for_statement",
      "documentation": "In Control Statements - Before semicolon in for statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_declaration_name_and_open_parenthesis",
      "documentation": "In Declarations - Before parentheses in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_keywords_in_control_flow_statements",
      "documentation": "In Control Statements - Before parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_square_brackets",
      "documentation": "In Expressions - Within array subscript brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_call_empty_parameter_list_parentheses",
      "documentation": "In Expressions - Within empty parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_declaration_empty_parameter_list_parentheses",
      "documentation": "In Declarations - Within empty parentheses in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_call_parameter_list_parentheses",
      "documentation": "In Expressions - Within parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_declaration_parameter_list_parentheses",
      "documentation": "In Declarations - Within parentheses in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_alignment_tab_fill_style",
      "documentation": "Tabs and Indents - How to align when tabs are used for indents"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_blank_line_after_pi",
      "documentation": "Processing Instructions - Blank line after processing instructions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_indent_child_elements",
      "documentation": "Tag Content - Indent inside element that doesn't contain text"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlIndentingStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_indent_text",
      "documentation": "Tag Content - Indent inside element that contain text"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlIndentingStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_keep_user_linebreaks",
      "documentation": "Tag Content - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreaks_inside_tags_for_multiline_elements",
      "documentation": "Tag Content - Line breaks after start-tag and before end-tag in multiline elements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreaks_inside_tags_for_elements_with_child_elements",
      "documentation": "Tag Content - Line breaks after start-tag and before end-tag in elements that contain other elements and no text"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_max_blank_lines_between_tags",
      "documentation": "Around Tags - Maximum blank lines between tags"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreaks_inside_tags_for_elements_longer_than",
      "documentation": "Tag Content - Line breaks after start-tag and before end-tag when element is longer than"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreak_before_elements",
      "documentation": "Around Tags - Place these elements on new line regardless"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_spaces_around_eq_in_pi_attribute",
      "documentation": "Processing Instructions - Spaces around '=' in attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_pi_attributes_indent",
      "documentation": "Processing Instructions - Attributes indenting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributeIndenting"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_pi_attribute_style",
      "documentation": "Processing Instructions - Attributes format"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributesFormat"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_space_after_last_pi_attribute",
      "documentation": "Processing Instructions - Space after last attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreak_before_singleline_elements",
      "documentation": "Around Tags - Place singleline elements on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_spaces_inside_tags",
      "documentation": "Tag Content - Spaces after start-tag and before end-tag otherwise"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreak_before_multiline_elements",
      "documentation": "Around Tags - Place multiline elements on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_attribute_indent",
      "documentation": "Inside of Tag Header - Attributes indenting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributeIndenting"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_attribute_style",
      "documentation": "Inside of Tag Header - Attributes format"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributesFormat"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_space_after_last_attribute",
      "documentation": "Inside of Tag Header - Space after last attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_space_before_self_closing",
      "documentation": "Inside of Tag Header - Space before '/>'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_spaces_around_eq_in_attribute",
      "documentation": "Inside of Tag Header - Spaces around '=' in attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_wrap_tags_and_pi",
      "documentation": "Line Wrapping - Wrap tags and processing instructions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_wrap_text",
      "documentation": "Tag Content - Wrap inside text"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_wrap_around_elements",
      "documentation": "Tag Content - Wrap before and after elements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_alignment_tab_fill_style",
      "documentation": "Tabs and Indents - How to align when tabs are used for indents"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_first_arg_by_paren",
      "documentation": "Align Multiline Construct - First call argument by '('"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_argument",
      "documentation": "Align Multiline Construct - Call arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_binary_expressions_chain",
      "documentation": "Align Multiline Construct - Chained binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_calls_chain",
      "documentation": "Align Multiline Construct - Chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_ctor_init",
      "documentation": "Align Multiline Construct - Member initializers in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_ctor_init",
      "documentation": "Align Multiline Construct - Member initializers in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_extends_list",
      "documentation": "Align Multiline Construct - Base classes in class base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_parameter",
      "documentation": "Align Multiline Construct - Function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_type_argument",
      "documentation": "Align Multiline Construct - Template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_type_argument",
      "documentation": "Align Multiline Construct - Template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_type_parameter",
      "documentation": "Align Multiline Construct - Template parameters in template declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_type_parameter",
      "documentation": "Align Multiline Construct - Template parameters in template declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiple_declaration",
      "documentation": "Align Multiline Construct - Declarators in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_ternary",
      "documentation": "Align Multiline Construct - ?: operator"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_TernaryOperatorAlign"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_brace_style",
      "documentation": "Braces Layout - Namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_anonymous_method_declaration_braces",
      "documentation": "Braces Layout - Anonymous method declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_class_definition",
      "documentation": "Blank Lines - Around class/struct/enum definition"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_class_definition",
      "documentation": "Blank Lines - Around class/struct/enum definition"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_function_declaration",
      "documentation": "Blank Lines - Around function declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_function_declaration",
      "documentation": "Blank Lines - Around function declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_function_definition",
      "documentation": "Blank Lines - Around function definitions"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_function_definition",
      "documentation": "Blank Lines - Around function definitions"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_namespace",
      "documentation": "Blank Lines - Around namespaces"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_other_declaration",
      "documentation": "Blank Lines - Around other definitions and declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_other_declaration",
      "documentation": "Blank Lines - Around other definitions and declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_function_definition",
      "documentation": "Blank Lines - Around single line function definitions"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_single_line_function_definition",
      "documentation": "Blank Lines - Around single line function definitions"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_break_template_declaration",
      "documentation": "Place on New Line - Break line after the template<...> of a template declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_break_template_declaration",
      "documentation": "Place on New Line - Break line after the template<...> of a template declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_case_block_braces",
      "documentation": "Braces Layout - Block under \"case\" label"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_continuous_line_indent",
      "documentation": "Indentation - Continuous line indent"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_ContinuousLineIndent",
      "values": [
        {
          "type": "constant",
          "value": "none"
        },
        {
          "type": "constant",
          "value": "single"
        },
        {
          "type": "constant",
          "value": "double"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_continuous_line_indent",
      "documentation": "Indentation - Continuous line indent"
    },
    "value": {
      "type": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_ContinuousLineIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_disable_space_changes_before_trailing_comment",
      "documentation": "Other - Preserve spaces before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_disable_space_changes_before_trailing_comment",
      "documentation": "Other - Preserve spaces before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_empty_block_style",
      "documentation": "Braces Layout - Empty braces formatting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_EmptyBlockStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_expression_braces",
      "documentation": "Braces Layout - Other braces"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_expression_braces",
      "documentation": "Braces Layout - Other braces"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_function_declaration_return_type_style",
      "documentation": "Place on New Line - Break line after member function declaration return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_function_declaration_return_type_style",
      "documentation": "Place on New Line - Break line after member function declaration return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_function_definition_return_type_style",
      "documentation": "Place on New Line - Break line after member function definition return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_function_definition_return_type_style",
      "documentation": "Place on New Line - Break line after member function definition return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_access_specifiers_from_class",
      "documentation": "Indentation - Indent access specifier from class"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_access_specifiers_from_class",
      "documentation": "Indentation - Indent access specifier from class"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_switch_labels",
      "documentation": "Indentation - Indent \"case\" from \"switch\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_comment",
      "documentation": "Indentation - Indent comments started at the first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_comment",
      "documentation": "Indentation - Indent comments started at the first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_invocation_pars",
      "documentation": "Indentation - Indent method calls' parentheses"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_method_decl_pars",
      "documentation": "Indentation - Indent function declarations' parentheses"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_preprocessor_directives",
      "documentation": "Indentation - Preprocessor directives indenting"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_PreprocessorIndent",
      "values": [
        {
          "type": "constant",
          "value": "none",
          "documentation": "No indent"
        },
        {
          "type": "constant",
          "value": "normal",
          "documentation": "Indent"
        },
        {
          "type": "constant",
          "value": "do_not_change",
          "documentation": "Do not change"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_preprocessor_directives",
      "documentation": "Indentation - Preprocessor directives indenting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_PreprocessorIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_statement_pars",
      "documentation": "Indentation - Indent statement (if, while, for, etc) parentheses"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_type_constraints",
      "documentation": "Indentation - Indent C++/CLI generic constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_wrapped_function_names",
      "documentation": "Indentation - Indent if a function definition or declaration is wrapped after the type"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_wrapped_function_names",
      "documentation": "Indentation - Indent if a function definition or declaration is wrapped after the type"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_int_align_comments",
      "documentation": "Align Similar Code In Columns - End comments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_declaration_names",
      "documentation": "Align Similar Code In Columns - Declaration names"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_int_align_declaration_names",
      "documentation": "Align Similar Code In Columns - Declaration names"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_eq",
      "documentation": "Align Similar Code In Columns - Assignments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_int_align_eq",
      "documentation": "Align Similar Code In Columns - Assignments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_invocable_declaration_braces",
      "documentation": "Braces Layout - Function declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_keep_blank_lines_in_code",
      "documentation": "Preserve Existing Formatting - Keep max blank lines in code"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_keep_blank_lines_in_declarations",
      "documentation": "Preserve Existing Formatting - Keep max blank lines in declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_keep_user_linebreaks",
      "documentation": "Line Wrapping - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_line_break_after_colon_in_member_initializer_lists",
      "documentation": "Place on New Line - Break line after colon in member initializer lists"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_line_break_after_colon_in_member_initializer_lists",
      "documentation": "Place on New Line - Break line after colon in member initializer lists"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_line_break_after_comma_in_member_initializer_lists",
      "documentation": "Place on New Line - Break line after comma in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_line_break_after_comma_in_member_initializer_lists",
      "documentation": "Place on New Line - Break line after comma in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_line_break_before_comma_in_member_initializer_lists",
      "documentation": "Place on New Line - Break line before comma in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_line_break_before_comma_in_member_initializer_lists",
      "documentation": "Place on New Line - Break line before comma in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linkage_specification_braces",
      "documentation": "Braces Layout - Linkage specifications"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_linkage_specification_braces",
      "documentation": "Braces Layout - Linkage specifications"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linkage_specification_indentation",
      "documentation": "Indentation - Indent linkage specification block members"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_NamespaceIndentationKind",
      "values": [
        {
          "type": "constant",
          "value": "none",
          "documentation": "Do not indent"
        },
        {
          "type": "constant",
          "value": "inner",
          "documentation": "Indent only in inner namespaces"
        },
        {
          "type": "constant",
          "value": "all",
          "documentation": "Indent all"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_linkage_specification_indentation",
      "documentation": "Indentation - Indent linkage specification block members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_NamespaceIndentationKind"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_member_initializer_list_style",
      "documentation": "Place on New Line - Break line before colon in member initializer lists"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_member_initializer_list_style",
      "documentation": "Place on New Line - Break line before colon in member initializer lists"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_namespace_declaration_braces",
      "documentation": "Braces Layout - Namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_namespace_declaration_braces",
      "documentation": "Braces Layout - Namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_namespace_indentation",
      "documentation": "Indentation - Indent namespace members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_NamespaceIndentationKind"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_namespace_indentation",
      "documentation": "Indentation - Indent namespace members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_NamespaceIndentationKind"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_other_braces",
      "documentation": "Braces Layout - Other statements and blocks"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_outdent_commas",
      "documentation": "Align Multiline Construct - Outdent commas"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_outdent_dots",
      "documentation": "Align Multiline Construct - Outdent \".\" and \"->\" in chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_new_line_before_catch",
      "documentation": "Place on New Line - Place \"catch\" on new line after compound statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_new_line_before_else",
      "documentation": "Place on New Line - Place \"else\" on new line after compound statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_namespace_definitions_on_same_line",
      "documentation": "Braces Layout - Place namespace definitions on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_place_namespace_definitions_on_same_line",
      "documentation": "Braces Layout - Place namespace definitions on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_place_type_constraints_on_same_line",
      "documentation": "Place on New Line - Allow C++/CLI generic constraints on same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_new_line_before_while",
      "documentation": "Place on New Line - Place \"while\" on new line after compound statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_simple_block_style",
      "documentation": "Braces Layout - Keep simple compound statements in one line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_simple_block_style",
      "documentation": "Braces Layout - Keep simple compound statements in one line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_simple_case_statement_style",
      "documentation": "Place on New Line - Break line in simple \"case\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_simple_case_statement_style",
      "documentation": "Place on New Line - Break line in simple \"case\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_simple_embedded_statement_style",
      "documentation": "Place on New Line - Break line in single embedded statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_cast",
      "documentation": "In Expressions - After parentheses in cast expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_cast",
      "documentation": "In Expressions - After parentheses in cast expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_colon_in_case",
      "documentation": "In Control Statements - After colon in switch case or label statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma",
      "documentation": "In Declarations - After comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_base_clause",
      "documentation": "In Declarations - After comma in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_base_clause",
      "documentation": "In Declarations - After comma in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_declaration",
      "documentation": "In Declarations - After comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_declaration",
      "documentation": "In Declarations - After comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_enum",
      "documentation": "In Declarations - After comma in enum"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_enum",
      "documentation": "In Declarations - After comma in enum"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_initializer_braces",
      "documentation": "In Expressions - After comma in uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_initializer_braces",
      "documentation": "In Expressions - After comma in uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_method",
      "documentation": "In Declarations - After comma in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_method",
      "documentation": "In Declarations - After comma in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_method_call",
      "documentation": "In Expressions - After comma in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_method_call",
      "documentation": "In Expressions - After comma in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_template_args",
      "documentation": "In Declarations - After comma in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_template_args",
      "documentation": "In Declarations - After comma in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_template_params",
      "documentation": "In Declarations - After comma in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_template_params",
      "documentation": "In Declarations - After comma in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_for_colon",
      "documentation": "In Control Statements - After ':' in range-based for loop"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_for_colon",
      "documentation": "In Control Statements - After ':' in range-based for loop"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_semicolon_in_for_statement",
      "documentation": "In Control Statements - After semicolon in for statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ptr_in_data_member",
      "documentation": "In Declarations - After ptr/ref in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ptr_in_data_member",
      "documentation": "In Declarations - After ptr/ref in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ptr_in_data_members",
      "documentation": "In Declarations - After ptr/ref in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ptr_in_data_members",
      "documentation": "In Declarations - After ptr/ref in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ptr_in_method",
      "documentation": "In Declarations - After ptr/ref in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ptr_in_method",
      "documentation": "In Declarations - After ptr/ref in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ternary_colon",
      "documentation": "In Expressions - In ternary operator '? :' after ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ternary_quest",
      "documentation": "In Expressions - In ternary operator '? :' after '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_type_parameter_constraint_colon",
      "documentation": "In Declarations - After C++/CLI generic constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_assignment_operator",
      "documentation": "In Expressions - Around assignment operator"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_binary_operator",
      "documentation": "In Expressions - Around binary operator"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_deref_in_trailing_return_type",
      "documentation": "In Declarations - Around '->' in trailing return types"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_deref_in_trailing_return_type",
      "documentation": "In Declarations - Around '->' in trailing return types"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_member_access_operator",
      "documentation": "In Expressions - Around dot, '->', '.*' and '->.'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_dot",
      "documentation": "In Expressions - Around dot, '->', '.*' and '->.'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_open_square_brackets",
      "documentation": "In Expressions - Before array subscript brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_colon_in_case",
      "documentation": "In Control Statements - Before colon in switch case or label statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma",
      "documentation": "In Declarations - Before comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_base_clause",
      "documentation": "In Declarations - Before comma in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_base_clause",
      "documentation": "In Declarations - Before comma in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_declaration",
      "documentation": "In Declarations - Before comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_declaration",
      "documentation": "In Declarations - Before comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_enum",
      "documentation": "In Declarations - Before comma in enum"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_enum",
      "documentation": "In Declarations - Before comma in enum"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_initializer_braces",
      "documentation": "In Expressions - Before comma in uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_initializer_braces",
      "documentation": "In Expressions - Before comma in uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_method",
      "documentation": "In Declarations - Before comma in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_method",
      "documentation": "In Declarations - Before comma in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_method_call",
      "documentation": "In Expressions - Before comma in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_method_call",
      "documentation": "In Expressions - Before comma in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_template_args",
      "documentation": "In Declarations - Before comma in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_template_args",
      "documentation": "In Declarations - Before comma in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_template_params",
      "documentation": "In Declarations - Before comma in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_template_params",
      "documentation": "In Declarations - Before comma in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_call_name_and_opening_parenthesis",
      "documentation": "In Expressions - Before parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_empty_method_call_parentheses",
      "documentation": "In Expressions - Before empty parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_for_colon",
      "documentation": "In Control Statements - Before ':' in range-based for loop"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_for_colon",
      "documentation": "In Control Statements - Before ':' in range-based for loop"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_semicolon_in_for_statement",
      "documentation": "In Control Statements - Before semicolon in for statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_initializer_braces",
      "documentation": "In Expressions - Before uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_initializer_braces",
      "documentation": "In Expressions - Before uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_method_call_parentheses",
      "documentation": "In Expressions - Before parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_declaration_name_and_open_parenthesis",
      "documentation": "In Declarations - Before parentheses in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ptr_in_data_member",
      "documentation": "In Declarations - Before ptr/ref in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ptr_in_data_member",
      "documentation": "In Declarations - Before ptr/ref in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ptr_in_data_members",
      "documentation": "In Declarations - Before ptr/ref in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ptr_in_data_members",
      "documentation": "In Declarations - Before ptr/ref in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ptr_in_method",
      "documentation": "In Declarations - Before ptr/ref in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ptr_in_method",
      "documentation": "In Declarations - Before ptr/ref in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_keywords_in_control_flow_statements",
      "documentation": "In Control Statements - Before parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_template_args",
      "documentation": "In Declarations - Before angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_template_args",
      "documentation": "In Declarations - Before angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_template_params",
      "documentation": "In Declarations - Before angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_template_params",
      "documentation": "In Declarations - Before angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ternary_colon",
      "documentation": "In Expressions - In ternary operator '? :' before ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ternary_quest",
      "documentation": "In Expressions - In ternary operator '? :' before '?' "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_trailing_comment",
      "documentation": "Other - Before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_type_parameter_constraint_colon",
      "documentation": "In Declarations - Before C++/CLI generic constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_closing_angle_brackets_in_template_args",
      "documentation": "In Declarations - Between closing angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_closing_angle_brackets_in_template_args",
      "documentation": "In Declarations - Between closing angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_alias_eq",
      "documentation": "In Declarations - Around '=' in alias declaration and namespace alias"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_square_brackets",
      "documentation": "In Expressions - Within array subscript brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_array_access_brackets",
      "documentation": "In Expressions - Within array subscript brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_typecast_parentheses",
      "documentation": "In Expressions - Within parentheses in cast expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_initializer_braces",
      "documentation": "In Expressions - Within empty uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_empty_initializer_braces",
      "documentation": "In Expressions - Within empty uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_call_empty_parameter_list_parentheses",
      "documentation": "In Expressions - Within empty parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_declaration_empty_parameter_list_parentheses",
      "documentation": "In Declarations - Within empty parentheses in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_template_params",
      "documentation": "In Declarations - Within empty angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_empty_template_params",
      "documentation": "In Declarations - Within empty angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_initializer_braces",
      "documentation": "In Expressions - Within uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_initializer_braces",
      "documentation": "In Expressions - Within uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_call_parameter_list_parentheses",
      "documentation": "In Expressions - Within parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_declaration_parameter_list_parentheses",
      "documentation": "In Declarations - Within parentheses in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_parentheses",
      "documentation": "In Expressions - Within parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_parentheses_of_control_flow_statements",
      "documentation": "In Control Statements - Within parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_template_args",
      "documentation": "In Declarations - Within angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_template_args",
      "documentation": "In Declarations - Within angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_template_params",
      "documentation": "In Declarations - Within angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_template_params",
      "documentation": "In Declarations - Within angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_toplevel_function_declaration_return_type_style",
      "documentation": "Place on New Line - Break line after top-level function declaration return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_toplevel_function_declaration_return_type_style",
      "documentation": "Place on New Line - Break line after top-level function declaration return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_toplevel_function_definition_return_type_style",
      "documentation": "Place on New Line - Break line after top-level function definition return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_toplevel_function_definition_return_type_style",
      "documentation": "Place on New Line - Break line after top-level function definition return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_type_declaration_braces",
      "documentation": "Braces Layout - Type declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_after_declaration_lpar",
      "documentation": "Line Wrapping - Prefer wrap after \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_after_invocation_lpar",
      "documentation": "Line Wrapping - Prefer wrap after \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_arguments_style",
      "documentation": "Line Wrapping - Wrap invocation arguments"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_base_clause_style",
      "documentation": "Line Wrapping - Wrap base classes list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_base_clause_style",
      "documentation": "Line Wrapping - Wrap base classes list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_colon",
      "documentation": "Line Wrapping - Prefer wrap before \":\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_colon",
      "documentation": "Line Wrapping - Prefer wrap before \":\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_comma",
      "documentation": "Line Wrapping - Prefer wrap before \",\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_declaration_lpar",
      "documentation": "Line Wrapping - Prefer wrap before \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_first_type_parameter_constraint",
      "documentation": "Line Wrapping - Prefer wrap before first C++/CLI generic constraint"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_invocation_lpar",
      "documentation": "Line Wrapping - Prefer wrap before \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_ternary_opsigns",
      "documentation": "Line Wrapping - Prefer wrap before \"?\" and \":\" in ternary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_braced_init_list_style",
      "documentation": "Line Wrapping - Wrap braced initializer list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_braced_init_list_style",
      "documentation": "Line Wrapping - Wrap braced initializer list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_ctor_initializer_style",
      "documentation": "Line Wrapping - Wrap constructor initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_ctor_initializer_style",
      "documentation": "Line Wrapping - Wrap constructor initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_enumeration_style",
      "documentation": "Line Wrapping - Wrap enum definition"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_enumeration_style",
      "documentation": "Line Wrapping - Wrap enum definition"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_multiple_type_parameter_constraints_style",
      "documentation": "Line Wrapping - Wrap multiple C++/CLI generic constraints"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_parameters_style",
      "documentation": "Line Wrapping - Wrap formal parameters"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_ternary_expr_style",
      "documentation": "Line Wrapping - Wrap ternary expression"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  }
]