[
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_alignment_tab_fill_style",
      "documentation": "Align multiline constructs - How to align when tabs are used for indents"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle",
      "values": [
        {
          "type": "constant",
          "value": "use_spaces",
          "documentation": "Use spaces (looks aligned on any tab size)"
        },
        {
          "type": "constant",
          "value": "use_tabs_only",
          "documentation": "Only use tabs (inaccurate)"
        },
        {
          "type": "constant",
          "value": "optimal_fill",
          "documentation": "Mix tabs and spaces for optimal fill"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_allow_far_alignment",
      "documentation": "Align multiline constructs - Align even if the resulting indentation is too large"
    },
    "value": {
      "type": "union",
      "type_alias": "System_Boolean",
      "values": [
        {
          "type": "constant",
          "value": "true"
        },
        {
          "type": "constant",
          "value": "false"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_extra_spaces",
      "documentation": "Preserve existing formatting - Extra spaces inside"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_Format_ExtraSpaces",
      "values": [
        {
          "type": "constant",
          "value": "remove_all",
          "documentation": "Remove all extra spaces"
        },
        {
          "type": "constant",
          "value": "leave_tabs",
          "documentation": "Leave extra tabs"
        },
        {
          "type": "constant",
          "value": "leave_multiple",
          "documentation": "Leave multiple extra spaces"
        },
        {
          "type": "constant",
          "value": "leave_all",
          "documentation": "Leave all extra spaces and tabs"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_fix_in_adjacent",
      "documentation": "Align similar code in columns - Fix column alignment in adjacent lines"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_indent_from_previous_element",
      "documentation": "Other indents - Use previous element's indent on partial format"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_add_imports_to_deepest_scope",
      "documentation": "Reference qualification and 'using' directives - Add 'using' directive to deepest scope"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_add_imports_to_deepest_scope",
      "documentation": "Reference qualification and 'using' directives - Add 'using' directive to deepest scope"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_allow_alias",
      "documentation": "Reference qualification and 'using' directives - Use using alias directive to resolve conflicts"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_allow_alias",
      "documentation": "Reference qualification and 'using' directives - Use using alias directive to resolve conflicts"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_can_use_global_alias",
      "documentation": "Reference qualification and 'using' directives - Allow 'global::' prefix use"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_can_use_global_alias",
      "documentation": "Reference qualification and 'using' directives - Allow 'global::' prefix use"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_prefer_qualified_reference",
      "documentation": "Reference qualification and 'using' directives - Prefer fully qualified references"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_prefer_qualified_reference",
      "documentation": "Reference qualification and 'using' directives - Prefer fully qualified references"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_qualified_using_at_nested_scope",
      "documentation": "Reference qualification and 'using' directives - Prefer fully qualified using name at nested scope"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_qualified_using_at_nested_scope",
      "documentation": "Reference qualification and 'using' directives - Prefer fully qualified using name at nested scope"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_sort_usings_with_system_first",
      "documentation": "Reference qualification and 'using' directives - Place 'System.*' and 'Windows.*' namespaces first when sorting 'using' directives"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_sort_usings_with_system_first",
      "documentation": "Reference qualification and 'using' directives - Place 'System.*' and 'Windows.*' namespaces first when sorting 'using' directives"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_for_built_in_types",
      "documentation": "'var' usage in declarations - For built-in types"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle",
      "values": [
        {
          "type": "constant",
          "value": "use_var",
          "documentation": "Use 'var'"
        },
        {
          "type": "constant",
          "value": "use_var_when_evident",
          "documentation": "Use 'var' when evident"
        },
        {
          "type": "constant",
          "value": "use_explicit_type",
          "documentation": "Use explicit type"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_for_built_in_types",
      "documentation": "'var' usage in declarations - For built-in types"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_for_other_types",
      "documentation": "'var' usage in declarations - Elsewhere"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_for_other_types",
      "documentation": "'var' usage in declarations - Elsewhere"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_for_simple_types",
      "documentation": "'var' usage in declarations - For simple types"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_for_simple_types",
      "documentation": "'var' usage in declarations - For simple types"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_VariableStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_prefer_explicit_discard_declaration",
      "documentation": "'var' usage in declarations - Use 'var' keyword for discards"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_prefer_explicit_discard_declaration",
      "documentation": "'var' usage in declarations - Use 'var' keyword for discards"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_prefer_separate_deconstructed_variables_declaration",
      "documentation": "'var' usage in declarations - Prefer separate declarations for deconstructed variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_prefer_separate_deconstructed_variables_declaration",
      "documentation": "'var' usage in declarations - Prefer separate declarations for deconstructed variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_roslyn_logic_for_evident_types",
      "documentation": "'var' usage in declarations - Prefer Roslyn (Visual Studio) logic for type evidence"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_use_roslyn_logic_for_evident_types",
      "documentation": "'var' usage in declarations - Prefer Roslyn (Visual Studio) logic for type evidence"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_accessor_owner_body",
      "documentation": "Code body - Properties, indexers and events"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_AccessorOwnerBodyStyle",
      "values": [
        {
          "type": "constant",
          "value": "expression_body",
          "documentation": "Expression body"
        },
        {
          "type": "constant",
          "value": "accessors_with_expression_body",
          "documentation": "Accessors with expression body"
        },
        {
          "type": "constant",
          "value": "accessors_with_block_body",
          "documentation": "Accessors with block body"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_accessor_owner_body",
      "documentation": "Code body - Properties, indexers and events"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_AccessorOwnerBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_anonymous_function",
      "documentation": "Arguments - Anonymous methods (delegates and lambdas)"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle",
      "values": [
        {
          "type": "constant",
          "value": "positional",
          "documentation": "Positional argument"
        },
        {
          "type": "constant",
          "value": "named",
          "documentation": "Named argument"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_anonymous_function",
      "documentation": "Arguments - Anonymous methods (delegates and lambdas)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_literal",
      "documentation": "Arguments - Literal values"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_literal",
      "documentation": "Arguments - Literal values"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_named",
      "documentation": "Arguments - Named expressions (variables, properties, methods, etc.)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_named",
      "documentation": "Arguments - Named expressions (variables, properties, methods, etc.)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_other",
      "documentation": "Arguments - Other"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_other",
      "documentation": "Arguments - Other"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_skip_single",
      "documentation": "Arguments - Skip single arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_skip_single",
      "documentation": "Arguments - Skip single arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_arguments_string_literal",
      "documentation": "Arguments - String literal values"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_arguments_string_literal",
      "documentation": "Arguments - String literal values"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ArgumentsStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_dowhile",
      "documentation": "Braces - In \"do-while\" statement"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle",
      "values": [
        {
          "type": "constant",
          "value": "not_required",
          "documentation": "Do not enforce"
        },
        {
          "type": "constant",
          "value": "required",
          "documentation": "Enforce always"
        },
        {
          "type": "constant",
          "value": "required_for_multiline",
          "documentation": "Enforce if body is multi-line"
        },
        {
          "type": "constant",
          "value": "required_for_multiline_statement",
          "documentation": "Enforce if statement is multi-line"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_dowhile",
      "documentation": "Braces - In \"do-while\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_fixed",
      "documentation": "Braces - In \"fixed\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_fixed",
      "documentation": "Braces - In \"fixed\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_for",
      "documentation": "Braces - In \"for\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_for",
      "documentation": "Braces - In \"for\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_foreach",
      "documentation": "Braces - In \"foreach\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_foreach",
      "documentation": "Braces - In \"foreach\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_ifelse",
      "documentation": "Braces - In \"if\" statement"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_IfElseBracesCodeStyle",
      "values": [
        {
          "type": "constant",
          "value": "not_required",
          "documentation": "Do not enforce"
        },
        {
          "type": "constant",
          "value": "not_required_for_both",
          "documentation": "Enforce if any part requires braces"
        },
        {
          "type": "constant",
          "value": "required",
          "documentation": "Enforce always"
        },
        {
          "type": "constant",
          "value": "required_for_multiline",
          "documentation": "Enforce if body is multi-line"
        },
        {
          "type": "constant",
          "value": "required_for_multiline_statement",
          "documentation": "Enforce if statement is multi-line"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_ifelse",
      "documentation": "Braces - In \"if\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_IfElseBracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_lock",
      "documentation": "Braces - In \"lock\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_lock",
      "documentation": "Braces - In \"lock\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_using",
      "documentation": "Braces - In \"using\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_using",
      "documentation": "Braces - In \"using\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_for_while",
      "documentation": "Braces - In \"while\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_for_while",
      "documentation": "Braces - In \"while\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BracesCodeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_braces_redundant",
      "documentation": "Braces - Remove redundant"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_braces_redundant",
      "documentation": "Braces - Remove redundant"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_builtin_type_reference_for_member_access_style",
      "documentation": "Built-in types - In member access expressions, prefer"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BuiltInTypeStyle",
      "values": [
        {
          "type": "constant",
          "value": "use_keyword",
          "documentation": "Keyword"
        },
        {
          "type": "constant",
          "value": "use_clr_name",
          "documentation": "CLR type name"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_builtin_type_reference_for_member_access_style",
      "documentation": "Built-in types - In member access expressions, prefer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BuiltInTypeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_builtin_type_reference_style",
      "documentation": "Built-in types - In locals, members and parameters, prefer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BuiltInTypeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_builtin_type_reference_style",
      "documentation": "Built-in types - In locals, members and parameters, prefer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BuiltInTypeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_constructor_or_destructor_body",
      "documentation": "Code body - Constructors and destructors"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle",
      "values": [
        {
          "type": "constant",
          "value": "expression_body",
          "documentation": "Expression body"
        },
        {
          "type": "constant",
          "value": "block_body",
          "documentation": "Block body"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_constructor_or_destructor_body",
      "documentation": "Code body - Constructors and destructors"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_default_internal_modifier",
      "documentation": "Modifiers - Prefer explicit/implicit internal modifier for types"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultModifierDefinition",
      "values": [
        {
          "type": "constant",
          "value": "explicit",
          "documentation": "Explicit"
        },
        {
          "type": "constant",
          "value": "implicit",
          "documentation": "Implicit"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_default_internal_modifier",
      "documentation": "Modifiers - Prefer explicit/implicit internal modifier for types"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultModifierDefinition"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_default_private_modifier",
      "documentation": "Modifiers - Prefer explicit/implicit private modifier for type members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultModifierDefinition"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_default_private_modifier",
      "documentation": "Modifiers - Prefer explicit/implicit private modifier for type members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultModifierDefinition"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_default_value_when_type_evident",
      "documentation": "Default value - When type is evident from usage"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultValueStyle",
      "values": [
        {
          "type": "constant",
          "value": "default_literal",
          "documentation": "Omit type: 'default'"
        },
        {
          "type": "constant",
          "value": "default_expression",
          "documentation": "Specify type: 'default(T)'"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_default_value_when_type_evident",
      "documentation": "Default value - When type is evident from usage"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultValueStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_default_value_when_type_not_evident",
      "documentation": "Default value - When type is not evident from usage"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultValueStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_default_value_when_type_not_evident",
      "documentation": "Default value - When type is not evident from usage"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_DefaultValueStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_force_attribute_style",
      "documentation": "Attributes - Join or separate attributes in section"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_AttributeStyle",
      "values": [
        {
          "type": "constant",
          "value": "join",
          "documentation": "Join"
        },
        {
          "type": "constant",
          "value": "separate",
          "documentation": "Separate"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_force_attribute_style",
      "documentation": "Attributes - Join or separate attributes in section"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_AttributeStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_local_function_body",
      "documentation": "Code body - Local functions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_local_function_body",
      "documentation": "Code body - Local functions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_method_or_operator_body",
      "documentation": "Code body - Methods and operators"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_method_or_operator_body",
      "documentation": "Code body - Methods and operators"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_FunctionBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_namespace_body",
      "documentation": "Code body - Namespaces"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_NamespaceBodyStyle",
      "values": [
        {
          "type": "constant",
          "value": "file_scoped",
          "documentation": "File-scoped"
        },
        {
          "type": "constant",
          "value": "block_scoped",
          "documentation": "Block-scoped"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_namespace_body",
      "documentation": "Code body - Namespaces"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_NamespaceBodyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_object_creation_when_type_evident",
      "documentation": "Object creation - When created type is evident from usage"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ObjectCreationStyle",
      "values": [
        {
          "type": "constant",
          "value": "target_typed",
          "documentation": "Omit type: 'new()'"
        },
        {
          "type": "constant",
          "value": "explicitly_typed",
          "documentation": "Specify type: 'new T()'"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_object_creation_when_type_evident",
      "documentation": "Object creation - When created type is evident from usage"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ObjectCreationStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_object_creation_when_type_not_evident",
      "documentation": "Object creation - When created type is not evident from usage"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ObjectCreationStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_object_creation_when_type_not_evident",
      "documentation": "Object creation - When created type is not evident from usage"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ObjectCreationStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_parentheses_group_non_obvious_operations",
      "documentation": "Add parenthesis to avoid non-obvious precedence - When the operations from the following groups are nested"
    },
    "value": {
      "type": "list",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BinaryOperationGroupType",
      "values": [
        {
          "type": "constant",
          "value": "none"
        },
        {
          "type": "constant",
          "value": "arithmetic",
          "documentation": "*  /  %  +  -  <<  >>  &  ^  |"
        },
        {
          "type": "constant",
          "value": "relational",
          "documentation": "<  >  <=  >=  ==  !="
        },
        {
          "type": "constant",
          "value": "conditional",
          "documentation": "&& || ??"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_parentheses_group_non_obvious_operations",
      "documentation": "Add parenthesis to avoid non-obvious precedence - When the operations from the following groups are nested"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BinaryOperationGroupType"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_parentheses_non_obvious_operations",
      "documentation": "Add parenthesis to avoid non-obvious precedence - Around operands of the following operations"
    },
    "value": {
      "type": "list",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BinaryOperationType",
      "values": [
        {
          "type": "constant",
          "value": "none"
        },
        {
          "type": "constant",
          "value": "null_coalescing",
          "documentation": "??"
        },
        {
          "type": "constant",
          "value": "conditional",
          "documentation": "&&  ||"
        },
        {
          "type": "constant",
          "value": "conditional_or",
          "documentation": "||"
        },
        {
          "type": "constant",
          "value": "conditional_and",
          "documentation": "&&"
        },
        {
          "type": "constant",
          "value": "bitwise",
          "documentation": "&  ^  |"
        },
        {
          "type": "constant",
          "value": "bitwise_inclusive_or",
          "documentation": "|"
        },
        {
          "type": "constant",
          "value": "range",
          "documentation": ".."
        },
        {
          "type": "constant",
          "value": "bitwise_exclusive_or",
          "documentation": "^"
        },
        {
          "type": "constant",
          "value": "equality",
          "documentation": "==  !="
        },
        {
          "type": "constant",
          "value": "relational",
          "documentation": "<  >  <=  >="
        },
        {
          "type": "constant",
          "value": "shift",
          "documentation": "<<  >>"
        },
        {
          "type": "constant",
          "value": "arithmetic",
          "documentation": "*  /  %  +  -"
        },
        {
          "type": "constant",
          "value": "additive",
          "documentation": "+  -"
        },
        {
          "type": "constant",
          "value": "multiplicative",
          "documentation": "*  /  %"
        },
        {
          "type": "constant",
          "value": "bitwise_and",
          "documentation": "&"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_parentheses_non_obvious_operations",
      "documentation": "Add parenthesis to avoid non-obvious precedence - Around operands of the following operations"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_BinaryOperationType"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_parentheses_redundancy_style",
      "documentation": "Parentheses - Remove redundant parentheses"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ParenthesesRedundancyStyle",
      "values": [
        {
          "type": "constant",
          "value": "remove",
          "documentation": "Always"
        },
        {
          "type": "constant",
          "value": "remove_if_not_clarifies_precedence",
          "documentation": "If not clarifies precedence"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_parentheses_redundancy_style",
      "documentation": "Parentheses - Remove redundant parentheses"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_ParenthesesRedundancyStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_parentheses_same_type_operations",
      "documentation": "Add parenthesis to avoid non-obvious precedence - Even when operations of the same type are nested"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_parentheses_same_type_operations",
      "documentation": "Add parenthesis to avoid non-obvious precedence - Even when operations of the same type are nested"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_trailing_comma_in_multiline_lists",
      "documentation": "Trailing comma - Before a new line in multiline lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_trailing_comma_in_multiline_lists",
      "documentation": "Trailing comma - Before a new line in multiline lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_trailing_comma_in_singleline_lists",
      "documentation": "Trailing comma - When the last element is not followed by a new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_trailing_comma_in_singleline_lists",
      "documentation": "Trailing comma - When the last element is not followed by a new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_heuristics_for_body_style",
      "documentation": "Code body - Apply style heuristics"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_use_heuristics_for_body_style",
      "documentation": "Code body - Apply style heuristics"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_static_members_qualify_members",
      "documentation": "Static members qualification - Members to qualify"
    },
    "value": {
      "type": "list",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_QualifiedMember",
      "values": [
        {
          "type": "constant",
          "value": "none"
        },
        {
          "type": "constant",
          "value": "field"
        },
        {
          "type": "constant",
          "value": "property"
        },
        {
          "type": "constant",
          "value": "event"
        },
        {
          "type": "constant",
          "value": "method"
        },
        {
          "type": "constant",
          "value": "all"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_static_members_qualify_members",
      "documentation": "Static members qualification - Members to qualify"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_QualifiedMember"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_static_members_qualify_with",
      "documentation": "Static members qualification - Qualify with the name of"
    },
    "value": {
      "type": "list",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_StaticMemberQualifierStyle",
      "values": [
        {
          "type": "constant",
          "value": "current_type",
          "documentation": "Current type"
        },
        {
          "type": "constant",
          "value": "declared_type",
          "documentation": "Declared-in type"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_static_members_qualify_with",
      "documentation": "Static members qualification - Qualify with the name of"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_StaticMemberQualifierStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_instance_members_qualify_declared_in",
      "documentation": "Instance members qualification - Qualify members declared in"
    },
    "value": {
      "type": "list",
      "type_alias": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_MemberDeclaredIn",
      "values": [
        {
          "type": "constant",
          "value": "this_class",
          "documentation": "same class"
        },
        {
          "type": "constant",
          "value": "base_class",
          "documentation": "base class"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_instance_members_qualify_declared_in",
      "documentation": "Instance members qualification - Qualify members declared in"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_MemberDeclaredIn"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_instance_members_qualify_members",
      "documentation": "Instance members qualification - Use \"this.\" qualifier for"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_QualifiedMember"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_instance_members_qualify_members",
      "documentation": "Instance members qualification - Use \"this.\" qualifier for"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CSharp_CodeStyle_Settings_QualifiedMember"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_brace_style",
      "documentation": "Braces layout - Type and namespace declaration"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx",
      "values": [
        {
          "type": "constant",
          "value": "end_of_line",
          "documentation": "At end of line (K&R style)"
        },
        {
          "type": "constant",
          "value": "end_of_line_no_space",
          "documentation": "At end of line (no space)"
        },
        {
          "type": "constant",
          "value": "next_line",
          "documentation": "At next line (BSD style)"
        },
        {
          "type": "constant",
          "value": "next_line_shifted",
          "documentation": "At next line indented (Whitesmiths style)"
        },
        {
          "type": "constant",
          "value": "next_line_shifted_2",
          "documentation": "At next line indented 2 (GNU style)"
        },
        {
          "type": "constant",
          "value": "pico",
          "documentation": "Compact (Pico style)"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_brace_style",
      "documentation": "Braces layout - Type and namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_accessor_declaration_braces",
      "documentation": "Braces layout - Accessor declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_accessor_declaration_braces",
      "documentation": "Braces layout - Accessor declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_accessor_owner_declaration_braces",
      "documentation": "Braces layout - Property declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_accessor_owner_declaration_braces",
      "documentation": "Braces layout - Property declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_alignment_tab_fill_style",
      "documentation": "Align multiline constructs - How to align when tabs are used for indents"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_first_arg_by_paren",
      "documentation": "Align multiline constructs - Call arguments by '('"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_first_arg_by_paren",
      "documentation": "Align multiline constructs - Call arguments by '('"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_linq_query",
      "documentation": "Align multiline constructs - LINQ query"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_linq_query",
      "documentation": "Align multiline constructs - LINQ query"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_argument",
      "documentation": "Align multiline constructs - Call arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_argument",
      "documentation": "Align multiline constructs - Call arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_array_and_object_initializer",
      "documentation": "Align multiline constructs - Array, object and collection initializer"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_array_and_object_initializer",
      "documentation": "Align multiline constructs - Array, object and collection initializer"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_binary_expressions_chain",
      "documentation": "Align multiline constructs - Binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_binary_expressions_chain",
      "documentation": "Align multiline constructs - Binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_binary_patterns",
      "documentation": "Align multiline constructs - Binary patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_binary_patterns",
      "documentation": "Align multiline constructs - Binary patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_calls_chain",
      "documentation": "Align multiline constructs - Chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_calls_chain",
      "documentation": "Align multiline constructs - Chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_expression",
      "documentation": "Align multiline constructs - Other expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_expression",
      "documentation": "Align multiline constructs - Other expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_extends_list",
      "documentation": "Align multiline constructs - List of base classes and interfaces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_extends_list",
      "documentation": "Align multiline constructs - List of base classes and interfaces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_for_stmt",
      "documentation": "Align multiline constructs - \"for\" statement header"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_for_stmt",
      "documentation": "Align multiline constructs - \"for\" statement header"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_parameter",
      "documentation": "Align multiline constructs - Method parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_parameter",
      "documentation": "Align multiline constructs - Method parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_property_pattern",
      "documentation": "Align multiline constructs - Property patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_property_pattern",
      "documentation": "Align multiline constructs - Property patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_statement_conditions",
      "documentation": "Align multiline constructs - Statement conditions inside parenthesis"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_statement_conditions",
      "documentation": "Align multiline constructs - Statement conditions inside parenthesis"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_switch_expression",
      "documentation": "Align multiline constructs - Switch expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiline_switch_expression",
      "documentation": "Align multiline constructs - Switch expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiple_declaration",
      "documentation": "Align multiline constructs - Multiple declarations"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multiple_declaration",
      "documentation": "Align multiline constructs - Multiple declarations"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multline_type_parameter_constrains",
      "documentation": "Align multiline constructs - Type parameter constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multline_type_parameter_constrains",
      "documentation": "Align multiline constructs - Type parameter constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multline_type_parameter_list",
      "documentation": "Align multiline constructs - Type parameters list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_multline_type_parameter_list",
      "documentation": "Align multiline constructs - Type parameters list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_tuple_components",
      "documentation": "Align multiline constructs - Tuple components"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_align_tuple_components",
      "documentation": "Align multiline constructs - Tuple components"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_allow_comment_after_lbrace",
      "documentation": "Braces layout - Allow comment after '{'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_allow_comment_after_lbrace",
      "documentation": "Braces layout - Allow comment after '{'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_allow_far_alignment",
      "documentation": "Align multiline constructs - Align even if the resulting indentation is too large"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_anonymous_method_declaration_braces",
      "documentation": "Braces layout - Lambda and delegate (anonymous method declaration)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_anonymous_method_declaration_braces",
      "documentation": "Braces layout - Lambda and delegate (anonymous method declaration)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_block_statements",
      "documentation": "Blank lines in code - After statements with child blocks"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_block_statements",
      "documentation": "Blank lines in code - After statements with child blocks"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_case",
      "documentation": "Blank lines in code - After \"case\" in switch statement"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_case",
      "documentation": "Blank lines in code - After \"case\" in switch statement"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_control_transfer_statements",
      "documentation": "Blank lines in code - After statements with control transfer"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_control_transfer_statements",
      "documentation": "Blank lines in code - After statements with control transfer"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_file_scoped_namespace_directive",
      "documentation": "Blank lines in declarations - After file-scoped namespace directive"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_file_scoped_namespace_directive",
      "documentation": "Blank lines in declarations - After file-scoped namespace directive"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_multiline_statements",
      "documentation": "Blank lines in code - After multiline statements"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_multiline_statements",
      "documentation": "Blank lines in code - After multiline statements"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_start_comment",
      "documentation": "Blank lines in declarations - After file header comment"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_start_comment",
      "documentation": "Blank lines in declarations - After file header comment"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_using_list",
      "documentation": "Blank lines in declarations - After \"using\" list"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_after_using_list",
      "documentation": "Blank lines in declarations - After \"using\" list"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_accessor",
      "documentation": "Blank lines in declarations - Around property/event accessor"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_accessor",
      "documentation": "Blank lines in declarations - Around property/event accessor"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_auto_property",
      "documentation": "Blank lines in declarations - Around auto/abstract property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_auto_property",
      "documentation": "Blank lines in declarations - Around auto/abstract property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_block_case_section",
      "documentation": "Blank lines in code - Around \"case\" section with a block in switch statement"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_block_case_section",
      "documentation": "Blank lines in code - Around \"case\" section with a block in switch statement"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_field",
      "documentation": "Blank lines in declarations - Around field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_field",
      "documentation": "Blank lines in declarations - Around field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_invocable",
      "documentation": "Blank lines in declarations - Around method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_invocable",
      "documentation": "Blank lines in declarations - Around method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_local_method",
      "documentation": "Blank lines in code - Around local function"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_local_method",
      "documentation": "Blank lines in code - Around local function"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_multiline_case_section",
      "documentation": "Blank lines in code - Around multiline \"case\" section in switch statement"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_multiline_case_section",
      "documentation": "Blank lines in code - Around multiline \"case\" section in switch statement"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_namespace",
      "documentation": "Blank lines in declarations - Around namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_namespace",
      "documentation": "Blank lines in declarations - Around namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_property",
      "documentation": "Blank lines in declarations - Around property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_property",
      "documentation": "Blank lines in declarations - Around property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_region",
      "documentation": "General - Around region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_region",
      "documentation": "General - Around region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_accessor",
      "documentation": "Blank lines in declarations - Around single line property/event accessor"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_accessor",
      "documentation": "Blank lines in declarations - Around single line property/event accessor"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_auto_property",
      "documentation": "Blank lines in declarations - Around single line auto/abstract property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_auto_property",
      "documentation": "Blank lines in declarations - Around single line auto/abstract property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_field",
      "documentation": "Blank lines in declarations - Around single line field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_field",
      "documentation": "Blank lines in declarations - Around single line field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_invocable",
      "documentation": "Blank lines in declarations - Around single line method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_invocable",
      "documentation": "Blank lines in declarations - Around single line method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_local_method",
      "documentation": "Blank lines in code - Around single line local function"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_local_method",
      "documentation": "Blank lines in code - Around single line local function"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_property",
      "documentation": "Blank lines in declarations - Around single line property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_property",
      "documentation": "Blank lines in declarations - Around single line property/event"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_type",
      "documentation": "Blank lines in declarations - Around single-line type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_single_line_type",
      "documentation": "Blank lines in declarations - Around single-line type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_type",
      "documentation": "Blank lines in declarations - Around type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_around_type",
      "documentation": "Blank lines in declarations - Around type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_before_block_statements",
      "documentation": "Blank lines in code - Before statements with child blocks"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_before_block_statements",
      "documentation": "Blank lines in code - Before statements with child blocks"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_before_case",
      "documentation": "Blank lines in code - Before \"case\" in switch statement"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_before_case",
      "documentation": "Blank lines in code - Before \"case\" in switch statement"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_before_control_transfer_statements",
      "documentation": "Blank lines in code - Before statements with control transfer"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_before_control_transfer_statements",
      "documentation": "Blank lines in code - Before statements with control transfer"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_before_multiline_statements",
      "documentation": "Blank lines in code - Before multiline statements"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_before_multiline_statements",
      "documentation": "Blank lines in code - Before multiline statements"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_before_single_line_comment",
      "documentation": "General - Before single-line comment"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_before_single_line_comment",
      "documentation": "General - Before single-line comment"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_between_using_groups",
      "documentation": "Blank lines in declarations - Between different \"using\" groups"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_between_using_groups",
      "documentation": "Blank lines in declarations - Between different \"using\" groups"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_inside_namespace",
      "documentation": "Blank lines in declarations - Inside namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_inside_namespace",
      "documentation": "Blank lines in declarations - Inside namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_inside_region",
      "documentation": "General - Inside region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_inside_region",
      "documentation": "General - Inside region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_inside_type",
      "documentation": "Blank lines in declarations - Inside type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_blank_lines_inside_type",
      "documentation": "Blank lines in declarations - Inside type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_case_block_braces",
      "documentation": "Braces layout - Block under \"case\" label"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_case_block_braces",
      "documentation": "Braces layout - Block under \"case\" label"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_continuous_indent_multiplier",
      "documentation": "General - Continuous line indent multiplier"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_continuous_indent_multiplier",
      "documentation": "General - Continuous line indent multiplier"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_empty_block_style",
      "documentation": "Braces layout - Empty braces formatting"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_EmptyBlockStyle",
      "values": [
        {
          "type": "constant",
          "value": "multiline",
          "documentation": "On different lines"
        },
        {
          "type": "constant",
          "value": "together",
          "documentation": "Place braces together"
        },
        {
          "type": "constant",
          "value": "together_same_line",
          "documentation": "Together on the same line"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_empty_block_style",
      "documentation": "Braces layout - Empty braces formatting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_EmptyBlockStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_extra_spaces",
      "documentation": "Preserve existing formatting - Extra spaces inside"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Format_ExtraSpaces"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_force_chop_compound_do_expression",
      "documentation": "Arrangement of binary expressions - Force chop compound condition in \"do\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_force_chop_compound_do_expression",
      "documentation": "Arrangement of binary expressions - Force chop compound condition in \"do\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_force_chop_compound_if_expression",
      "documentation": "Arrangement of binary expressions - Force chop compound condition in \"if\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_force_chop_compound_if_expression",
      "documentation": "Arrangement of binary expressions - Force chop compound condition in \"if\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_force_chop_compound_while_expression",
      "documentation": "Arrangement of binary expressions - Force chop compound condition in \"while\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_force_chop_compound_while_expression",
      "documentation": "Arrangement of binary expressions - Force chop compound condition in \"while\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_anonymous_method_block",
      "documentation": "Align multiline constructs - Anonymous method body"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_anonymous_method_block",
      "documentation": "Align multiline constructs - Anonymous method body"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_braces_inside_statement_conditions",
      "documentation": "Other indents - Indent braces inside statement conditions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_braces_inside_statement_conditions",
      "documentation": "Other indents - Indent braces inside statement conditions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_switch_labels",
      "documentation": "Other indents - Indent \"case\" from \"switch\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_inside_namespace",
      "documentation": "Braces layout - Indent inside namespace declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_inside_namespace",
      "documentation": "Braces layout - Indent inside namespace declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_invocation_pars",
      "documentation": "Parenthesis - Indent method calls' parenthesis"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle",
      "values": [
        {
          "type": "constant",
          "value": "inside",
          "documentation": "Inside parenthesis (BSD/K&R style)"
        },
        {
          "type": "constant",
          "value": "outside",
          "documentation": "Parenthesis and inside equally (Whitesmiths style)"
        },
        {
          "type": "constant",
          "value": "outside_and_inside",
          "documentation": "Parenthesis 1x, inside 2x (GNU style)"
        },
        {
          "type": "constant",
          "value": "none",
          "documentation": "No indent"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_invocation_pars",
      "documentation": "Parenthesis - Indent method calls' parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_method_decl_pars",
      "documentation": "Parenthesis - Indent method declarations' parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_method_decl_pars",
      "documentation": "Parenthesis - Indent method declarations' parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_fixed_stmt",
      "documentation": "Nested statements - Indent nested \"fixed\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_fixed_stmt",
      "documentation": "Nested statements - Indent nested \"fixed\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_foreach_stmt",
      "documentation": "Nested statements - Indent nested \"foreach\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_foreach_stmt",
      "documentation": "Nested statements - Indent nested \"foreach\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_for_stmt",
      "documentation": "Nested statements - Indent nested \"for\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_for_stmt",
      "documentation": "Nested statements - Indent nested \"for\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_lock_stmt",
      "documentation": "Nested statements - Indent nested \"lock\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_lock_stmt",
      "documentation": "Nested statements - Indent nested \"lock\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_usings_stmt",
      "documentation": "Nested statements - Indent nested \"using\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_usings_stmt",
      "documentation": "Nested statements - Indent nested \"using\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_nested_while_stmt",
      "documentation": "Nested statements - Indent nested \"while\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_nested_while_stmt",
      "documentation": "Nested statements - Indent nested \"while\" statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_pars",
      "documentation": "Parenthesis - Indent other parenthesis and brackets"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_pars",
      "documentation": "Parenthesis - Indent other parenthesis and brackets"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_preprocessor_if",
      "documentation": "Preprocessor directives - Indent #if, #else, #elif, #endif"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent",
      "values": [
        {
          "type": "constant",
          "value": "no_indent",
          "documentation": "No indent"
        },
        {
          "type": "constant",
          "value": "usual_indent",
          "documentation": "Indent as usual"
        },
        {
          "type": "constant",
          "value": "outdent",
          "documentation": "Outdent"
        },
        {
          "type": "constant",
          "value": "do_not_change",
          "documentation": "Do not change"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_preprocessor_if",
      "documentation": "Preprocessor directives - Indent #if, #else, #elif, #endif"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_preprocessor_other",
      "documentation": "Preprocessor directives - Indent other preprocessor directives"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_preprocessor_other",
      "documentation": "Preprocessor directives - Indent other preprocessor directives"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_preprocessor_region",
      "documentation": "Preprocessor directives - Indent #region, #endregion"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_preprocessor_region",
      "documentation": "Preprocessor directives - Indent #region, #endregion"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SpecialIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_size",
      "documentation": "General - Indent size"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_statement_pars",
      "documentation": "Parenthesis - Indent statement (if, while, for, etc) parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_statement_pars",
      "documentation": "Parenthesis - Indent statement (if, while, for, etc) parenthesis"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_style",
      "documentation": "General - Indent style"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_Format_IndentStyle",
      "values": [
        {
          "type": "constant",
          "value": "tab",
          "documentation": "Tab"
        },
        {
          "type": "constant",
          "value": "space",
          "documentation": "Spaces"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_typearg_angles",
      "documentation": "Parenthesis - Indent type argument's angles"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_typearg_angles",
      "documentation": "Parenthesis - Indent type argument's angles"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_typeparam_angles",
      "documentation": "Parenthesis - Indent type parameter's angles"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_typeparam_angles",
      "documentation": "Parenthesis - Indent type parameter's angles"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_type_constraints",
      "documentation": "Other indents - Indent type constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_indent_type_constraints",
      "documentation": "Other indents - Indent type constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_initializer_braces",
      "documentation": "Braces layout - Expressions (initializers, switch expressions, patterns)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_initializer_braces",
      "documentation": "Braces layout - Expressions (initializers, switch expressions, patterns)"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align",
      "documentation": "Align similar code in columns - Fields and constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align",
      "documentation": "Align similar code in columns - Fields and constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_assignments",
      "documentation": "Align similar code in columns - Other assignments and initializers"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_assignments",
      "documentation": "Align similar code in columns - Other assignments and initializers"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_binary_expressions",
      "documentation": "Align similar code in columns - Binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_binary_expressions",
      "documentation": "Align similar code in columns - Binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_comments",
      "documentation": "Align similar code in columns - End comments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_comments",
      "documentation": "Align similar code in columns - End comments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_fields",
      "documentation": "Align similar code in columns - Fields and constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_fields",
      "documentation": "Align similar code in columns - Fields and constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_fix_in_adjacent",
      "documentation": "Align similar code in columns - Fix column alignment in adjacent lines"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_invocations",
      "documentation": "Align similar code in columns - Invocations of the same method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_invocations",
      "documentation": "Align similar code in columns - Invocations of the same method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_methods",
      "documentation": "Align similar code in columns - Simple methods, operators, delegates"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_methods",
      "documentation": "Align similar code in columns - Simple methods, operators, delegates"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_nested_ternary",
      "documentation": "Align similar code in columns - Nested ternary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_nested_ternary",
      "documentation": "Align similar code in columns - Nested ternary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_parameters",
      "documentation": "Align similar code in columns - Multiline method signature"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_parameters",
      "documentation": "Align similar code in columns - Multiline method signature"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_properties",
      "documentation": "Align similar code in columns - Properties and events"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_properties",
      "documentation": "Align similar code in columns - Properties and events"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_property_patterns",
      "documentation": "Align similar code in columns - Property patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_property_patterns",
      "documentation": "Align similar code in columns - Property patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_switch_expressions",
      "documentation": "Align similar code in columns - Switch expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_switch_expressions",
      "documentation": "Align similar code in columns - Switch expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_switch_sections",
      "documentation": "Align similar code in columns - Simple switch sections"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_switch_sections",
      "documentation": "Align similar code in columns - Simple switch sections"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_variables",
      "documentation": "Align similar code in columns - Variables and local constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_int_align_variables",
      "documentation": "Align similar code in columns - Variables and local constants"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_invocable_declaration_braces",
      "documentation": "Braces layout - Method declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_invocable_declaration_braces",
      "documentation": "Braces layout - Method declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_blank_lines_in_code",
      "documentation": "Blank lines in code - Keep max blank lines in code"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_blank_lines_in_code",
      "documentation": "Blank lines in code - Keep max blank lines in code"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_blank_lines_in_declarations",
      "documentation": "Blank lines in declarations - Keep max blank lines in declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_blank_lines_in_declarations",
      "documentation": "Blank lines in declarations - Keep max blank lines in declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_arrangement",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_arrangement",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_attribute_arrangement",
      "documentation": "Arrangement of attributes - Keep existing arrangement of attributes"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_attribute_arrangement",
      "documentation": "Arrangement of attributes - Keep existing arrangement of attributes"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_declaration_block_arrangement",
      "documentation": "Arrangement of declaration blocks - Keep existing arrangement of declaration blocks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_declaration_block_arrangement",
      "documentation": "Arrangement of declaration blocks - Keep existing arrangement of declaration blocks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_declaration_parens_arrangement",
      "documentation": "Arrangement of method signatures - Keep existing arrangement of parenthesis in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_declaration_parens_arrangement",
      "documentation": "Arrangement of method signatures - Keep existing arrangement of parenthesis in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_embedded_arrangement",
      "documentation": "Arrangement of embedded statements - Keep existing arrangement of embedded statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_embedded_arrangement",
      "documentation": "Arrangement of embedded statements - Keep existing arrangement of embedded statements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_embedded_block_arrangement",
      "documentation": "Arrangement of embedded blocks - Keep existing arrangement of embedded blocks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_embedded_block_arrangement",
      "documentation": "Arrangement of embedded blocks - Keep existing arrangement of embedded blocks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_enum_arrangement",
      "documentation": "Arrangement of enumerations - Keep existing arrangement of enumeration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_enum_arrangement",
      "documentation": "Arrangement of enumerations - Keep existing arrangement of enumeration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_expr_member_arrangement",
      "documentation": "Arrangement of expression bodied members - Keep existing arrangement of expression bodied members"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_expr_member_arrangement",
      "documentation": "Arrangement of expression bodied members - Keep existing arrangement of expression bodied members"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_initializer_arrangement",
      "documentation": "Arrangement of initializers - Keep existing arrangement of initializers"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_initializer_arrangement",
      "documentation": "Arrangement of initializers - Keep existing arrangement of initializers"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_invocation_parens_arrangement",
      "documentation": "Arrangement of invocations - Keep existing arrangement of parenthesis in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_invocation_parens_arrangement",
      "documentation": "Arrangement of invocations - Keep existing arrangement of parenthesis in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_property_patterns_arrangement",
      "documentation": "Arrangement of property patterns - Keep existing arrangement of property patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_property_patterns_arrangement",
      "documentation": "Arrangement of property patterns - Keep existing arrangement of property patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_switch_expression_arrangement",
      "documentation": "Arrangement of switch expressions - Keep existing arrangement of switch expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_switch_expression_arrangement",
      "documentation": "Arrangement of switch expressions - Keep existing arrangement of switch expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_existing_linebreaks",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_existing_linebreaks",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_keep_user_linebreaks",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_keep_user_linebreaks",
      "documentation": "General - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_insert_final_newline",
      "documentation": "General - Line feed at end of file"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_array_initializer_elements_on_line",
      "documentation": "Arrangement of initializers - Max array initializer elements on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_array_initializer_elements_on_line",
      "documentation": "Arrangement of initializers - Max array initializer elements on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_attribute_length_for_same_line",
      "documentation": "Arrangement of attributes - Place attribute section list on separate line if it is longer than"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_attribute_length_for_same_line",
      "documentation": "Arrangement of attributes - Place attribute section list on separate line if it is longer than"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_enum_members_on_line",
      "documentation": "Arrangement of enumerations - Max enumeration members on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_enum_members_on_line",
      "documentation": "Arrangement of enumerations - Max enumeration members on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_formal_parameters_on_line",
      "documentation": "Arrangement of method signatures - Max formal parameters on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_formal_parameters_on_line",
      "documentation": "Arrangement of method signatures - Max formal parameters on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_initializer_elements_on_line",
      "documentation": "Arrangement of initializers - Max object and collection initializer elements on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_initializer_elements_on_line",
      "documentation": "Arrangement of initializers - Max object and collection initializer elements on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_invocation_arguments_on_line",
      "documentation": "Arrangement of invocations - Max invocation arguments on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_invocation_arguments_on_line",
      "documentation": "Arrangement of invocations - Max invocation arguments on a single line"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_nested_ternary_style",
      "documentation": "Arrangement of ternary expressions - Nested ternary expression style"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_NestedTernaryExpressionStyle",
      "values": [
        {
          "type": "constant",
          "value": "simple_wrap",
          "documentation": "Simple wrap/Do not change"
        },
        {
          "type": "constant",
          "value": "autodetect",
          "documentation": "Chop in existing style"
        },
        {
          "type": "constant",
          "value": "compact",
          "documentation": "Chop in compact style"
        },
        {
          "type": "constant",
          "value": "expanded",
          "documentation": "Chop in expanded style"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_nested_ternary_style",
      "documentation": "Arrangement of ternary expressions - Nested ternary expression style"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_NestedTernaryExpressionStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_old_engine",
      "documentation": "Other - Revert to old formatting engine"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_old_engine",
      "documentation": "Other - Revert to old formatting engine"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_other_braces",
      "documentation": "Braces layout - Other"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_other_braces",
      "documentation": "Braces layout - Other"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_outdent_binary_ops",
      "documentation": "Align multiline constructs - Outdent binary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_outdent_binary_ops",
      "documentation": "Align multiline constructs - Outdent binary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_outdent_binary_pattern_ops",
      "documentation": "Align multiline constructs - Outdent binary patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_outdent_binary_pattern_ops",
      "documentation": "Align multiline constructs - Outdent binary patterns"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_outdent_commas",
      "documentation": "Align multiline constructs - Outdent commas"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_outdent_commas",
      "documentation": "Align multiline constructs - Outdent commas"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_outdent_dots",
      "documentation": "Align multiline constructs - Outdent dots in chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_outdent_dots",
      "documentation": "Align multiline constructs - Outdent dots in chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_outdent_statement_labels",
      "documentation": "Other indents - Outdent statement labels"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_outdent_statement_labels",
      "documentation": "Other indents - Outdent statement labels"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_blocks_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_blocks_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_declaration_blocks_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_declaration_blocks_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_abstract_accessorholder_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_abstract_accessorholder_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place abstract/auto property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place type attribute on the same line"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner",
      "values": [
        {
          "type": "constant",
          "value": "false",
          "documentation": "Never"
        },
        {
          "type": "constant",
          "value": "never",
          "documentation": "Never"
        },
        {
          "type": "constant",
          "value": "if_owner_is_single_line",
          "documentation": "If owner is singleline"
        },
        {
          "type": "constant",
          "value": "true",
          "documentation": "Always"
        },
        {
          "type": "constant",
          "value": "always",
          "documentation": "Always"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place type attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_accessorholder_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place property/indexer/event attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_accessorholder_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place property/indexer/event attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_accessor_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place accessor attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_accessor_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place accessor attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_accessor_with_attrs_holder_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place it on single line even when it has attributes on accessors"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_accessor_with_attrs_holder_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place it on single line even when it has attributes on accessors"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_new_line_before_catch",
      "documentation": "Arrangement of statements - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_comments_at_first_column",
      "documentation": "Other indents - Place comments at first column when commenting out code"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_comments_at_first_column",
      "documentation": "Other indents - Place comments at first column when commenting out code"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_constructor_initializer_on_same_line",
      "documentation": "Arrangement of method signatures - Allow constructor initializer on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_constructor_initializer_on_same_line",
      "documentation": "Arrangement of method signatures - Allow constructor initializer on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_new_line_before_else",
      "documentation": "Arrangement of statements - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_expr_accessor_on_single_line",
      "documentation": "Arrangement of expression bodied members - Place property accessor expression body on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_expr_accessor_on_single_line",
      "documentation": "Arrangement of expression bodied members - Place property accessor expression body on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_expr_method_on_single_line",
      "documentation": "Arrangement of expression bodied members - Place method expression body on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_expr_method_on_single_line",
      "documentation": "Arrangement of expression bodied members - Place method expression body on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_expr_property_on_single_line",
      "documentation": "Arrangement of expression bodied members - Place property expression body on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_expr_property_on_single_line",
      "documentation": "Arrangement of expression bodied members - Place property expression body on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_field_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place field attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_field_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place field attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_new_line_before_finally",
      "documentation": "Arrangement of statements - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_linq_into_on_new_line",
      "documentation": "Arrangement of LINQ expressions - Place \"into\" on new line in LINQ expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_linq_into_on_new_line",
      "documentation": "Arrangement of LINQ expressions - Place \"into\" on new line in LINQ expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_method_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place method attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_method_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place method attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_accessorholder_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place simple property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_accessorholder_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place simple property/indexer/event declaration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_accessor_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place simple accessor on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_accessor_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place simple accessor on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_anonymousmethod_on_single_line",
      "documentation": "Arrangement of embedded blocks - Place simple anonymous method on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_anonymousmethod_on_single_line",
      "documentation": "Arrangement of embedded blocks - Place simple anonymous method on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_case_statement_on_same_line",
      "documentation": "Arrangement of embedded statements - Place simple \"case\" statement on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_case_statement_on_same_line",
      "documentation": "Arrangement of embedded statements - Place simple \"case\" statement on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_embedded_block_on_same_line",
      "documentation": "Arrangement of embedded blocks - Place a block with a single simple statement on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_embedded_block_on_same_line",
      "documentation": "Arrangement of embedded blocks - Place a block with a single simple statement on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_embedded_statement_on_same_line",
      "documentation": "Arrangement of embedded statements - Place simple embedded statement on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_embedded_statement_on_same_line",
      "documentation": "Arrangement of embedded statements - Place simple embedded statement on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_enum_on_single_line",
      "documentation": "Arrangement of enumerations - Place simple enumeration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_enum_on_single_line",
      "documentation": "Arrangement of enumerations - Place simple enumeration on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_initializer_on_single_line",
      "documentation": "Arrangement of initializers - Place simple array, object and collection on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_initializer_on_single_line",
      "documentation": "Arrangement of initializers - Place simple array, object and collection on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_method_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place simple method on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_method_on_single_line",
      "documentation": "Arrangement of declaration blocks - Place simple method on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_property_pattern_on_single_line",
      "documentation": "Arrangement of property patterns - Place simple property pattern on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_property_pattern_on_single_line",
      "documentation": "Arrangement of property patterns - Place simple property pattern on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_simple_switch_expression_on_single_line",
      "documentation": "Arrangement of switch expressions - Place simple switch expression on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_simple_switch_expression_on_single_line",
      "documentation": "Arrangement of switch expressions - Place simple switch expression on single line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_type_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place type attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_type_attribute_on_same_line",
      "documentation": "Arrangement of attributes - Place type attribute on the same line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_PlaceOnSameLineAsOwner"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_type_constraints_on_same_line",
      "documentation": "Arrangement of type parameters, constraints and base types - Allow type constraints on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_place_type_constraints_on_same_line",
      "documentation": "Arrangement of type parameters, constraints and base types - Allow type constraints on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_new_line_before_while",
      "documentation": "Arrangement of statements - Place \"while\" on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_new_line_before_while",
      "documentation": "Arrangement of statements - Place \"while\" on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_remove_blank_lines_near_braces_in_code",
      "documentation": "Blank lines in code - Remove blank lines after \"{\" and before \"}\" in code"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_remove_blank_lines_near_braces_in_code",
      "documentation": "Blank lines in code - Remove blank lines after \"{\" and before \"}\" in code"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_remove_blank_lines_near_braces_in_declarations",
      "documentation": "Blank lines in declarations - Remove blank lines after \"{\" and before \"}\" in declarations"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_remove_blank_lines_near_braces_in_declarations",
      "documentation": "Blank lines in declarations - Remove blank lines after \"{\" and before \"}\" in declarations"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_unary_operator",
      "documentation": "After unary operators - Logical not operator (!)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_unary_operator",
      "documentation": "After unary operators - Logical not operator (!)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ampersand_op",
      "documentation": "After unary operators - Unsafe addressof operator (&)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_ampersand_op",
      "documentation": "After unary operators - Unsafe addressof operator (&)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_asterik_op",
      "documentation": "After unary operators - Unsafe asterisk operator (*)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_asterik_op",
      "documentation": "After unary operators - Unsafe asterisk operator (*)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_attributes",
      "documentation": "Attributes - After attributes"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_attributes",
      "documentation": "Attributes - After attributes"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_colon",
      "documentation": "Around colon - After other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_colon",
      "documentation": "Around colon - After other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_attribute_colon",
      "documentation": "Around colon - After other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_attribute_colon",
      "documentation": "Around colon - After other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_colon_in_case",
      "documentation": "Around colon - After colon in \"case\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_colon_in_case",
      "documentation": "Around colon - After colon in \"case\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma",
      "documentation": "Around comma and semicolon - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_colon_in_inheritance_clause",
      "documentation": "Around colon - After base types list colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_semicolon_in_for_statement",
      "documentation": "Around comma and semicolon - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_logical_not_op",
      "documentation": "After unary operators - Logical not operator (!)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_logical_not_op",
      "documentation": "After unary operators - Logical not operator (!)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_operator_keyword",
      "documentation": "Other - After operator keyword"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_operator_keyword",
      "documentation": "Other - After operator keyword"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_ternary_operator",
      "documentation": "In ternary operator - Before '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_ternary_operator",
      "documentation": "In ternary operator - Before '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ternary_colon",
      "documentation": "In ternary operator - After ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_ternary_colon",
      "documentation": "In ternary operator - After ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ternary_quest",
      "documentation": "In ternary operator - After '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_ternary_quest",
      "documentation": "In ternary operator - After '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_cast",
      "documentation": "Other - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_type_parameter_constraint_colon",
      "documentation": "Around colon - After type parameter constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_type_parameter_constraint_colon",
      "documentation": "Around colon - After type parameter constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_unary_minus_op",
      "documentation": "After unary operators - Unary minus operator (-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_unary_minus_op",
      "documentation": "After unary operators - Unary minus operator (-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_unary_plus_op",
      "documentation": "After unary operators - Unary plus operator (+)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_after_unary_plus_op",
      "documentation": "After unary operators - Unary plus operator (+)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_binary_operator",
      "documentation": "Around binary operators - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_binary_operator",
      "documentation": "Around binary operators - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_additive_op",
      "documentation": "Around binary operators - Additive operators (+,-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_additive_op",
      "documentation": "Around binary operators - Additive operators (+,-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_alias_eq",
      "documentation": "Other - Around '=' in namespace alias directive"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_alias_eq",
      "documentation": "Other - Around '=' in namespace alias directive"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_member_access_operator",
      "documentation": "Around binary operators - Unsafe arrow operator (->)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_member_access_operator",
      "documentation": "Around binary operators - Unsafe arrow operator (->)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_arrow_op",
      "documentation": "Around binary operators - Unsafe arrow operator (->)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_arrow_op",
      "documentation": "Around binary operators - Unsafe arrow operator (->)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_assignment_op",
      "documentation": "Around binary operators - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_assignment_op",
      "documentation": "Around binary operators - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_bitwise_op",
      "documentation": "Around binary operators - Bitwise operators (&,|,^)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_bitwise_op",
      "documentation": "Around binary operators - Bitwise operators (&,|,^)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_dot",
      "documentation": "Other - Around dot"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_dot",
      "documentation": "Other - Around dot"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_equality_op",
      "documentation": "Around binary operators - Equality operators (==,!=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_equality_op",
      "documentation": "Around binary operators - Equality operators (==,!=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_lambda_arrow",
      "documentation": "Other - Around lambda arrow"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_lambda_arrow",
      "documentation": "Other - Around lambda arrow"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_logical_op",
      "documentation": "Around binary operators - Logical operators (&&,||)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_logical_op",
      "documentation": "Around binary operators - Logical operators (&&,||)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_multiplicative_op",
      "documentation": "Around binary operators - Multiplicative operators (*,/,%)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_multiplicative_op",
      "documentation": "Around binary operators - Multiplicative operators (*,/,%)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_nullcoalescing_op",
      "documentation": "Around binary operators - Null coalescing operator (??)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_nullcoalescing_op",
      "documentation": "Around binary operators - Null coalescing operator (??)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_relational_op",
      "documentation": "Around binary operators - Relational operators (<,>,<=,>=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_relational_op",
      "documentation": "Around binary operators - Relational operators (<,>,<=,>=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_shift_op",
      "documentation": "Around binary operators - Shift operators (<<,>>)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_around_shift_op",
      "documentation": "Around binary operators - Shift operators (<<,>>)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_open_square_brackets",
      "documentation": "Around array brackets - Before array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_array_access_brackets",
      "documentation": "Around array brackets - Before array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_array_access_brackets",
      "documentation": "Around array brackets - Before array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_array_rank_brackets",
      "documentation": "Around array brackets - Before array rank brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_array_rank_brackets",
      "documentation": "Around array brackets - Before array rank brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_colon",
      "documentation": "Around colon - Before other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_colon",
      "documentation": "Around colon - Before other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_attribute_colon",
      "documentation": "Around colon - Before other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_attribute_colon",
      "documentation": "Around colon - Before other colons"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_keywords_in_control_flow_statements",
      "documentation": "Before parentheses in statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_catch_parentheses",
      "documentation": "Before parentheses in statements - \"catch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_catch_parentheses",
      "documentation": "Before parentheses in statements - \"catch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_checked_parentheses",
      "documentation": "Before other parentheses - \"checked\" and \"unchecked\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_checked_parentheses",
      "documentation": "Before other parentheses - \"checked\" and \"unchecked\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_colon_in_case",
      "documentation": "Around colon - Before colon in \"case\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_colon_in_case",
      "documentation": "Around colon - Before colon in \"case\" statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma",
      "documentation": "Around comma and semicolon - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_default_parentheses",
      "documentation": "Before other parentheses - \"default\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_default_parentheses",
      "documentation": "Before other parentheses - \"default\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_call_name_and_opening_parenthesis",
      "documentation": "Before other parentheses - Method call parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_empty_method_call_parentheses",
      "documentation": "Before other parentheses - Method call empty parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_empty_method_call_parentheses",
      "documentation": "Before other parentheses - Method call empty parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_declaration_name_and_open_parenthesis",
      "documentation": "Before other parentheses - Method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_empty_method_parentheses",
      "documentation": "Before other parentheses - Method declaration empty parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_empty_method_parentheses",
      "documentation": "Before other parentheses - Method declaration empty parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_colon_in_inheritance_clause",
      "documentation": "Around colon - Before base types list colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_fixed_parentheses",
      "documentation": "Before parentheses in statements - \"fixed\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_fixed_parentheses",
      "documentation": "Before parentheses in statements - \"fixed\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_foreach_parentheses",
      "documentation": "Before parentheses in statements - \"foreach\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_foreach_parentheses",
      "documentation": "Before parentheses in statements - \"foreach\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_for_parentheses",
      "documentation": "Before parentheses in statements - \"for\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_for_parentheses",
      "documentation": "Before parentheses in statements - \"for\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_semicolon_in_for_statement",
      "documentation": "Around comma and semicolon - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_if_parentheses",
      "documentation": "Before parentheses in statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_if_parentheses",
      "documentation": "Before parentheses in statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_lock_parentheses",
      "documentation": "Before parentheses in statements - \"lock\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_lock_parentheses",
      "documentation": "Before parentheses in statements - \"lock\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_method_call_parentheses",
      "documentation": "Before other parentheses - Method call parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_method_call_parentheses",
      "documentation": "Before other parentheses - Method call parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_method_parentheses",
      "documentation": "Before other parentheses - Method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_method_parentheses",
      "documentation": "Before other parentheses - Method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_nameof_parentheses",
      "documentation": "Before other parentheses - \"nameof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_nameof_parentheses",
      "documentation": "Before other parentheses - \"nameof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_new_parentheses",
      "documentation": "Before other parentheses - \"new\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_new_parentheses",
      "documentation": "Before other parentheses - \"new\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_nullable_mark",
      "documentation": "Other - Before nullable mark"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_nullable_mark",
      "documentation": "Other - Before nullable mark"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_pointer_asterik_declaration",
      "documentation": "Other - Before unsafe pointer declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_pointer_asterik_declaration",
      "documentation": "Other - Before unsafe pointer declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_semicolon",
      "documentation": "Around comma and semicolon - Before semicolon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_semicolon",
      "documentation": "Around comma and semicolon - Before semicolon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_singleline_accessorholder",
      "documentation": "Around braces - Before single line accessors block"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_singleline_accessorholder",
      "documentation": "Around braces - Before single line accessors block"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_sizeof_parentheses",
      "documentation": "Before other parentheses - \"sizeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_sizeof_parentheses",
      "documentation": "Before other parentheses - \"sizeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_switch_parentheses",
      "documentation": "Before parentheses in statements - \"switch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_switch_parentheses",
      "documentation": "Before parentheses in statements - \"switch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ternary_colon",
      "documentation": "In ternary operator - Before ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_ternary_colon",
      "documentation": "In ternary operator - Before ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ternary_quest",
      "documentation": "In ternary operator - Before '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_ternary_quest",
      "documentation": "In ternary operator - Before '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_trailing_comment",
      "documentation": "Other - Before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_trailing_comment",
      "documentation": "Other - Before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_typeof_parentheses",
      "documentation": "Before other parentheses - \"typeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_typeof_parentheses",
      "documentation": "Before other parentheses - \"typeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_type_argument_angle",
      "documentation": "Around angle brackets - Before type argument list angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_type_argument_angle",
      "documentation": "Around angle brackets - Before type argument list angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_type_parameter_angle",
      "documentation": "Around angle brackets - Before type parameter list angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_type_parameter_angle",
      "documentation": "Around angle brackets - Before type parameter list angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_type_parameter_constraint_colon",
      "documentation": "Around colon - Before type parameter constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_type_parameter_constraint_colon",
      "documentation": "Around colon - Before type parameter constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_using_parentheses",
      "documentation": "Before parentheses in statements - \"using\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_using_parentheses",
      "documentation": "Before parentheses in statements - \"using\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_while_parentheses",
      "documentation": "Before parentheses in statements - \"while\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_before_while_parentheses",
      "documentation": "Before parentheses in statements - \"while\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_accessors_in_singleline_property",
      "documentation": "Around braces - Between accessors in single line property/event"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_accessors_in_singleline_property",
      "documentation": "Around braces - Between accessors in single line property/event"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_attribute_sections",
      "documentation": "Attributes - Between attribute sections"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_attribute_sections",
      "documentation": "Attributes - Between attribute sections"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_keyword_and_expression",
      "documentation": "Before other parentheses - Between keyword and expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_keyword_and_expression",
      "documentation": "Before other parentheses - Between keyword and expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_keyword_and_type",
      "documentation": "Before other parentheses - Between keyword and type"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_keyword_and_type",
      "documentation": "Before other parentheses - Between keyword and type"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_in_singleline_accessorholder",
      "documentation": "Around braces - Within single line accessor"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_in_singleline_accessorholder",
      "documentation": "Around braces - Within single line accessor"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_in_singleline_anonymous_method",
      "documentation": "Around braces - Within single line anonymous method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_in_singleline_anonymous_method",
      "documentation": "Around braces - Within single line anonymous method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_in_singleline_method",
      "documentation": "Around braces - Within single line method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_in_singleline_method",
      "documentation": "Around braces - Within single line method"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_near_postfix_and_prefix_op",
      "documentation": "After unary operators - Before/after ++ and --"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_near_postfix_and_prefix_op",
      "documentation": "After unary operators - Before/after ++ and --"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_braces",
      "documentation": "Around braces - Space between empty braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_empty_braces",
      "documentation": "Around braces - Space between empty braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_square_brackets",
      "documentation": "Around array brackets - Within array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_access_brackets",
      "documentation": "Around array brackets - Within array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_array_access_brackets",
      "documentation": "Around array brackets - Within array access brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_rank_brackets",
      "documentation": "Around array brackets - Within array rank brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_array_rank_brackets",
      "documentation": "Around array brackets - Within array rank brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_empty_square_brackets",
      "documentation": "Around array brackets - Within array rank empty brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_rank_empty_brackets",
      "documentation": "Around array brackets - Within array rank empty brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_array_rank_empty_brackets",
      "documentation": "Around array brackets - Within array rank empty brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_attribute_brackets",
      "documentation": "Attributes - Within attribute brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_attribute_brackets",
      "documentation": "Attributes - Within attribute brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_parentheses_of_control_flow_statements",
      "documentation": "Within parentheses in statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_parentheses_of_control_flow_statements",
      "documentation": "Within parentheses in statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_catch_parentheses",
      "documentation": "Within parentheses in statements - \"catch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_catch_parentheses",
      "documentation": "Within parentheses in statements - \"catch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_checked_parentheses",
      "documentation": "Within other parentheses - \"checked\" and \"unchecked\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_checked_parentheses",
      "documentation": "Within other parentheses - \"checked\" and \"unchecked\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_default_parentheses",
      "documentation": "Within other parentheses - \"default\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_default_parentheses",
      "documentation": "Within other parentheses - \"default\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_call_empty_parameter_list_parentheses",
      "documentation": "Within other parentheses - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_declaration_empty_parameter_list_parentheses",
      "documentation": "Within other parentheses - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_fixed_parentheses",
      "documentation": "Within parentheses in statements - \"fixed\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_fixed_parentheses",
      "documentation": "Within parentheses in statements - \"fixed\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_foreach_parentheses",
      "documentation": "Within parentheses in statements - \"foreach\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_foreach_parentheses",
      "documentation": "Within parentheses in statements - \"foreach\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_for_parentheses",
      "documentation": "Within parentheses in statements - \"for\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_for_parentheses",
      "documentation": "Within parentheses in statements - \"for\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_if_parentheses",
      "documentation": "Within parentheses in statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_if_parentheses",
      "documentation": "Within parentheses in statements - \"if\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_lock_parentheses",
      "documentation": "Within parentheses in statements - \"lock\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_lock_parentheses",
      "documentation": "Within parentheses in statements - \"lock\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_call_parameter_list_parentheses",
      "documentation": "Within other parentheses - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_method_declaration_parameter_list_parentheses",
      "documentation": "Within other parentheses - "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_nameof_parentheses",
      "documentation": "Within other parentheses - \"nameof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_nameof_parentheses",
      "documentation": "Within other parentheses - \"nameof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_new_parentheses",
      "documentation": "Within other parentheses - \"new\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_new_parentheses",
      "documentation": "Within other parentheses - \"new\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_parentheses",
      "documentation": "Within other parentheses - Parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_parentheses",
      "documentation": "Within other parentheses - Parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_single_line_array_initializer_braces",
      "documentation": "Around braces - Within single-line expression braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_single_line_array_initializer_braces",
      "documentation": "Around braces - Within single-line expression braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_sizeof_parentheses",
      "documentation": "Within other parentheses - \"sizeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_sizeof_parentheses",
      "documentation": "Within other parentheses - \"sizeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_switch_parentheses",
      "documentation": "Within parentheses in statements - \"switch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_switch_parentheses",
      "documentation": "Within parentheses in statements - \"switch\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_typecast_parentheses",
      "documentation": "Within other parentheses - Type cast parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_between_typecast_parentheses",
      "documentation": "Within other parentheses - Type cast parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_typeof_parentheses",
      "documentation": "Within other parentheses - \"typeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_typeof_parentheses",
      "documentation": "Within other parentheses - \"typeof\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_type_argument_angles",
      "documentation": "Around angle brackets - Type argument angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_type_argument_angles",
      "documentation": "Around angle brackets - Type argument angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_type_parameter_angles",
      "documentation": "Around angle brackets - Type parameter angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_type_parameter_angles",
      "documentation": "Around angle brackets - Type parameter angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_using_parentheses",
      "documentation": "Within parentheses in statements - \"using\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_using_parentheses",
      "documentation": "Within parentheses in statements - \"using\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_while_parentheses",
      "documentation": "Within parentheses in statements - \"while\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_space_within_while_parentheses",
      "documentation": "Within parentheses in statements - \"while\" parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_special_else_if_treatment",
      "documentation": "General - Special \"else if\" treatment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_special_else_if_treatment",
      "documentation": "General - Special \"else if\" treatment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_stick_comment",
      "documentation": "Other indents - Don't indent comments started at first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_stick_comment",
      "documentation": "Other indents - Don't indent comments started at first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_tab_width",
      "documentation": "General - Tab width"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_type_declaration_braces",
      "documentation": "Braces layout - Type and namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_type_declaration_braces",
      "documentation": "Braces layout - Type and namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyleEx"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_continuous_indent_inside_initializer_braces",
      "documentation": "Braces layout - Use continuous line indent inside expression braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_use_continuous_indent_inside_initializer_braces",
      "documentation": "Braces layout - Use continuous line indent inside expression braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_continuous_indent_inside_parens",
      "documentation": "Parenthesis - Use continuous line indent inside parenthesis"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_use_continuous_indent_inside_parens",
      "documentation": "Parenthesis - Use continuous line indent inside parenthesis"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_use_indent_from_previous_element",
      "documentation": "Other indents - Use previous element's indent on partial format"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_after_declaration_lpar",
      "documentation": "Arrangement of method signatures - Prefer wrap after \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_after_declaration_lpar",
      "documentation": "Arrangement of method signatures - Prefer wrap after \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_after_dot_in_method_calls",
      "documentation": "Arrangement of member access expressions - Prefer wrap after \".\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_after_dot_in_method_calls",
      "documentation": "Arrangement of member access expressions - Prefer wrap after \".\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_after_invocation_lpar",
      "documentation": "Arrangement of invocations - Prefer wrap after \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_after_invocation_lpar",
      "documentation": "Arrangement of invocations - Prefer wrap after \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_arguments_style",
      "documentation": "Arrangement of invocations - Wrap invocation arguments"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle",
      "values": [
        {
          "type": "constant",
          "value": "wrap_if_long",
          "documentation": "Simple wrap"
        },
        {
          "type": "constant",
          "value": "chop_if_long",
          "documentation": "Chop if long or multiline"
        },
        {
          "type": "constant",
          "value": "chop_always",
          "documentation": "Chop always"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_arguments_style",
      "documentation": "Arrangement of invocations - Wrap invocation arguments"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_array_initializer_style",
      "documentation": "Arrangement of initializers - Wrap array initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_array_initializer_style",
      "documentation": "Arrangement of initializers - Wrap array initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_arrow_with_expressions",
      "documentation": "Arrangement of expression bodied members - Prefer wrap before \"=>\" followed by expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_arrow_with_expressions",
      "documentation": "Arrangement of expression bodied members - Prefer wrap before \"=>\" followed by expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_binary_opsign",
      "documentation": "Arrangement of binary expressions - Prefer wrap before operator in binary expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_binary_opsign",
      "documentation": "Arrangement of binary expressions - Prefer wrap before operator in binary expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_binary_pattern_op",
      "documentation": "Arrangement of binary expressions - Prefer wrap before operator in binary pattern"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_binary_pattern_op",
      "documentation": "Arrangement of binary expressions - Prefer wrap before operator in binary pattern"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_comma",
      "documentation": "General - Prefer wrap before \",\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_comma",
      "documentation": "General - Prefer wrap before \",\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_declaration_lpar",
      "documentation": "Arrangement of method signatures - Prefer wrap before \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_declaration_lpar",
      "documentation": "Arrangement of method signatures - Prefer wrap before \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_declaration_rpar",
      "documentation": "Arrangement of method signatures - Prefer wrap before \")\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_declaration_rpar",
      "documentation": "Arrangement of method signatures - Prefer wrap before \")\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_eq",
      "documentation": "General - Prefer wrap before \"=\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_eq",
      "documentation": "General - Prefer wrap before \"=\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_extends_colon",
      "documentation": "Arrangement of type parameters, constraints and base types - Prefer wrap before \":\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_extends_colon",
      "documentation": "Arrangement of type parameters, constraints and base types - Prefer wrap before \":\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_first_type_parameter_constraint",
      "documentation": "Arrangement of type parameters, constraints and base types - Prefer wrap before first constraint"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_first_type_parameter_constraint",
      "documentation": "Arrangement of type parameters, constraints and base types - Prefer wrap before first constraint"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_invocation_lpar",
      "documentation": "Arrangement of invocations - Prefer wrap before \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_invocation_lpar",
      "documentation": "Arrangement of invocations - Prefer wrap before \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_invocation_rpar",
      "documentation": "Arrangement of invocations - Prefer wrap before \")\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_invocation_rpar",
      "documentation": "Arrangement of invocations - Prefer wrap before \")\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_linq_expression",
      "documentation": "Arrangement of LINQ expressions - Prefer wrap before multiline LINQ expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_linq_expression",
      "documentation": "Arrangement of LINQ expressions - Prefer wrap before multiline LINQ expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_ternary_opsigns",
      "documentation": "Arrangement of ternary expressions - Prefer wrap before \"?\" and \":\" in ternary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_ternary_opsigns",
      "documentation": "Arrangement of ternary expressions - Prefer wrap before \"?\" and \":\" in ternary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_type_parameter_langle",
      "documentation": "Arrangement of type parameters, constraints and base types - Prefer wrap before type parameters opening angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_before_type_parameter_langle",
      "documentation": "Arrangement of type parameters, constraints and base types - Prefer wrap before type parameters opening angle"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_chained_binary_expressions",
      "documentation": "Arrangement of binary expressions - Wrap chained binary expressions"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleSimple",
      "values": [
        {
          "type": "constant",
          "value": "wrap_if_long",
          "documentation": "Simple wrap"
        },
        {
          "type": "constant",
          "value": "chop_if_long",
          "documentation": "Chop if long or multiline"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_chained_binary_expressions",
      "documentation": "Arrangement of binary expressions - Wrap chained binary expressions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleSimple"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_chained_binary_patterns",
      "documentation": "Arrangement of binary expressions - Wrap complex binary patterns"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleSimple"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_chained_binary_patterns",
      "documentation": "Arrangement of binary expressions - Wrap complex binary patterns"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleSimple"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_chained_method_calls",
      "documentation": "Arrangement of member access expressions - Wrap chained method calls"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_chained_method_calls",
      "documentation": "Arrangement of member access expressions - Wrap chained method calls"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_enum_declaration",
      "documentation": "Arrangement of enumerations - Wrap enumeration declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_enum_declaration",
      "documentation": "Arrangement of enumerations - Wrap enumeration declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_extends_list_style",
      "documentation": "Arrangement of type parameters, constraints and base types - Wrap extends/implements list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_extends_list_style",
      "documentation": "Arrangement of type parameters, constraints and base types - Wrap extends/implements list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_for_stmt_header_style",
      "documentation": "Arrangement of statements - Wrap \"for\" statement header"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_for_stmt_header_style",
      "documentation": "Arrangement of statements - Wrap \"for\" statement header"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_max_line_length",
      "documentation": "General - Hard wrap at"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_linq_expressions",
      "documentation": "Arrangement of LINQ expressions - Wrap LINQ expressions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_linq_expressions",
      "documentation": "Arrangement of LINQ expressions - Wrap LINQ expressions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_multiple_declaration_style",
      "documentation": "Arrangement of statements - Wrap multiple declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_multiple_declaration_style",
      "documentation": "Arrangement of statements - Wrap multiple declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_multiple_type_parameter_constraints_style",
      "documentation": "Arrangement of type parameters, constraints and base types - Wrap multiple type parameter constraints"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_multiple_type_parameter_constraints_style",
      "documentation": "Arrangement of type parameters, constraints and base types - Wrap multiple type parameter constraints"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_object_and_collection_initializer_style",
      "documentation": "Arrangement of initializers - Wrap object and collection initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_object_and_collection_initializer_style",
      "documentation": "Arrangement of initializers - Wrap object and collection initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_parameters_style",
      "documentation": "Arrangement of method signatures - Wrap formal parameters"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_parameters_style",
      "documentation": "Arrangement of method signatures - Wrap formal parameters"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_property_pattern",
      "documentation": "Arrangement of property patterns - Wrap property pattern"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_property_pattern",
      "documentation": "Arrangement of property patterns - Wrap property pattern"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_switch_expression",
      "documentation": "Arrangement of switch expressions - Wrap switch expression"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_switch_expression",
      "documentation": "Arrangement of switch expressions - Wrap switch expression"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_ternary_expr_style",
      "documentation": "Arrangement of ternary expressions - Wrap ternary expression"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_ternary_expr_style",
      "documentation": "Arrangement of ternary expressions - Wrap ternary expression"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_verbatim_interpolated_strings",
      "documentation": "Arrangement of interpolated strings - Wrap verbatim interpolated strings"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleExpanded",
      "values": [
        {
          "type": "constant",
          "value": "wrap_if_long",
          "documentation": "Simple wrap"
        },
        {
          "type": "constant",
          "value": "chop_if_long",
          "documentation": "Chop if long or multiline"
        },
        {
          "type": "constant",
          "value": "no_wrap",
          "documentation": "Do not wrap even if long"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_csharp_wrap_verbatim_interpolated_strings",
      "documentation": "Arrangement of interpolated strings - Wrap verbatim interpolated strings"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyleExpanded"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_line_after_pi",
      "documentation": "Processing instructions - Blank line after processing instructions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_child_elements",
      "documentation": "Tag content - Indent inside element that doesn't contain text"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlIndentingStyle",
      "values": [
        {
          "type": "constant",
          "value": "DoNotTouch",
          "documentation": "Do not change indenting"
        },
        {
          "type": "constant",
          "value": "do_not_touch",
          "documentation": "Do not change indenting"
        },
        {
          "type": "constant",
          "value": "OneIndent",
          "documentation": "One indent from parent element"
        },
        {
          "type": "constant",
          "value": "one_indent",
          "documentation": "One indent from parent element"
        },
        {
          "type": "constant",
          "value": "ZeroIndent",
          "documentation": "No indent from parent element"
        },
        {
          "type": "constant",
          "value": "zero_indent",
          "documentation": "No indent from parent element"
        },
        {
          "type": "constant",
          "value": "RemoveIndent",
          "documentation": "No indent at all"
        },
        {
          "type": "constant",
          "value": "remove_indent",
          "documentation": "No indent at all"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_text",
      "documentation": "Tag content - Indent inside element that contain text"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlIndentingStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreaks_inside_tags_for_multiline_elements",
      "documentation": "Around tags - Line breaks after start-tag and before end-tag in multiline elements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreaks_inside_tags_for_elements_with_child_elements",
      "documentation": "Around tags - Line breaks after start-tag and before end-tag in elements that contain other elements and no text"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_max_blank_lines_between_tags",
      "documentation": "Around tags - Maximum blank lines between tags"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreaks_inside_tags_for_elements_longer_than",
      "documentation": "Tag content - Line breaks after start-tag and before end-tag when element is longer than"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_spaces_around_eq_in_pi_attribute",
      "documentation": "Processing instructions - Spaces around '=' in attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_pi_attributes_indent",
      "documentation": "Processing instructions - Attributes indenting"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributeIndenting",
      "values": [
        {
          "type": "constant",
          "value": "single_indent",
          "documentation": "Single indent"
        },
        {
          "type": "constant",
          "value": "double_indent",
          "documentation": "Double indent"
        },
        {
          "type": "constant",
          "value": "align_by_first_attribute",
          "documentation": "Align by first attribute"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_pi_attribute_style",
      "documentation": "Processing instructions - Attributes format"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributesFormat",
      "values": [
        {
          "type": "constant",
          "value": "on_single_line",
          "documentation": "On single line"
        },
        {
          "type": "constant",
          "value": "first_attribute_on_single_line",
          "documentation": "First attribute on single line"
        },
        {
          "type": "constant",
          "value": "on_different_lines",
          "documentation": "Each attribute on separate lines"
        },
        {
          "type": "constant",
          "value": "do_not_touch",
          "documentation": "Do not touch"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_last_pi_attribute",
      "documentation": "Processing instructions - Space after last attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreak_before_singleline_elements",
      "documentation": "Around tags - Place singleline elements on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_spaces_inside_tags",
      "documentation": "Tag content - Spaces after start-tag and before end-tag otherwise"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linebreak_before_multiline_elements",
      "documentation": "Around tags - Place multiline elements on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_attribute_indent",
      "documentation": "Inside of tag header - Attributes indenting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributeIndenting"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_attribute_style",
      "documentation": "Inside of tag header - Attributes format"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributesFormat"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_last_attribute",
      "documentation": "Inside of tag header - Space after last attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_self_closing",
      "documentation": "Inside of tag header - Space before '/>'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_spaces_around_eq_in_attribute",
      "documentation": "Inside of tag header - Spaces around '=' in attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_tags_and_pi",
      "documentation": "Line wrapping - Wrap tags and processing instructions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_text",
      "documentation": "Tag content - Wrap inside text"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_around_elements",
      "documentation": "Tag content - Wrap before and after elements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_alignment_tab_fill_style",
      "documentation": "Tabs and indents - How to align when tabs are used for indents"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_argument",
      "documentation": "Align multiline constructs - Invocation arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_array_initializer",
      "documentation": "Align multiline constructs - Array initializer"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_array_initializer",
      "documentation": "Align multiline constructs - Array initializer"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_expression",
      "documentation": "Align multiline constructs - Expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_implements_list",
      "documentation": "Align multiline constructs - Implements/handles list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_implements_list",
      "documentation": "Align multiline constructs - Implements/handles list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiline_parameter",
      "documentation": "Align multiline constructs - Method parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_align_multiple_declaration",
      "documentation": "Align multiline constructs - Multiple declaration list"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_imports",
      "documentation": "Blank lines - After imports section"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_after_imports",
      "documentation": "Blank lines - After imports section"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_after_options",
      "documentation": "Blank lines - After file options section"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_after_options",
      "documentation": "Blank lines - After file options section"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_field",
      "documentation": "Blank lines - Around multiline field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_global_attribute",
      "documentation": "Blank lines - After global attribute"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_global_attribute",
      "documentation": "Blank lines - After global attribute"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_invocable",
      "documentation": "Blank lines - Around multiline method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_namespace",
      "documentation": "Blank lines - Around namespace"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_region",
      "documentation": "Blank lines - Around region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_single_line_field",
      "documentation": "Blank lines - Around single line field"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_single_line_invocable",
      "documentation": "Blank lines - Around single line method"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_around_type",
      "documentation": "Blank lines - Around type"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_blank_lines_inside_region",
      "documentation": "Blank lines - Inside region"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_case_from_select",
      "documentation": "Other - Indent \"case\" from \"select\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_indent_case_from_select",
      "documentation": "Other - Indent \"case\" from \"select\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_indent_size",
      "documentation": "Tabs and indents - Indent size"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_indent_style",
      "documentation": "Tabs and indents - Indent style"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Format_IndentStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_keep_blank_lines_in_code",
      "documentation": "Preserve existing formatting - Keep max blank lines in code"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_keep_blank_lines_in_declarations",
      "documentation": "Preserve existing formatting - Keep max blank lines in declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_keep_user_linebreaks",
      "documentation": "Preserve existing formatting - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_event_attribute_on_same_line",
      "documentation": "Attributes - Place event attribute on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_event_attribute_on_same_line",
      "documentation": "Attributes - Place event attribute on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_field_attribute_on_same_line",
      "documentation": "Attributes - Place field attribute on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_method_attribute_on_same_line",
      "documentation": "Attributes - Place method attribute on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_property_attribute_on_same_line",
      "documentation": "Attributes - Place property attribute on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_property_attribute_on_same_line",
      "documentation": "Attributes - Place property attribute on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_place_type_attribute_on_same_line",
      "documentation": "Attributes - Place type attribute on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_attribute_target_colon",
      "documentation": "Attributes - After attribute target colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_after_attribute_target_colon",
      "documentation": "Attributes - After attribute target colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_after_comma",
      "documentation": "Other - After ','"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_after_unary_operator",
      "documentation": "Around operations - After unary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_unary_op",
      "documentation": "Around operations - After unary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_after_unary_op",
      "documentation": "Around operations - After unary operators"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_binary_operator",
      "documentation": "Around operations - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_additive_op",
      "documentation": "Around operations - Additive operators (+,-)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_assignment_op",
      "documentation": "Around operations - Assignment operators (=,+=,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_member_access_operator",
      "documentation": "Other - Around '.'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_dot",
      "documentation": "Other - Around '.'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_multiplicative_op",
      "documentation": "Around operations - Multiplicative operators (*,/,...)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_relational_op",
      "documentation": "Around operations - Relational operators (<,>,<=,>=)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_shift_op",
      "documentation": "Around operations - Shift operators (<<,>>)"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_stmt_colon",
      "documentation": "Other - Around statement ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_around_stmt_colon",
      "documentation": "Other - Around statement ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_array_rank_parentheses",
      "documentation": "Arrays - Before array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_array_rank_parentheses",
      "documentation": "Arrays - Before array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_attribute_target_colon",
      "documentation": "Attributes - Before attribute target colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_attribute_target_colon",
      "documentation": "Attributes - Before attribute target colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_comma",
      "documentation": "Other - Before ','"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_empty_invocation_parentheses",
      "documentation": "Nearby parentheses - Before empty invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_empty_invocation_parentheses",
      "documentation": "Nearby parentheses - Before empty invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_empty_method_parentheses",
      "documentation": "Nearby parentheses - Before empty method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_invocation_parentheses",
      "documentation": "Nearby parentheses - Before invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_invocation_parentheses",
      "documentation": "Nearby parentheses - Before invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_label_colon",
      "documentation": "Other - Before ':' in label"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_label_colon",
      "documentation": "Other - Before ':' in label"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_method_parentheses",
      "documentation": "Nearby parentheses - Before method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_type_parameter_parentheses",
      "documentation": "Nearby parentheses - Before type parameter parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_before_type_parameter_parentheses",
      "documentation": "Nearby parentheses - Before type parameter parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_initialization_braces",
      "documentation": "Arrays - Within array initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_array_initialization_braces",
      "documentation": "Arrays - Within array initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_rank_empty_parentheses",
      "documentation": "Arrays - Within empty array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_array_rank_empty_parentheses",
      "documentation": "Arrays - Within empty array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_array_rank_parentheses",
      "documentation": "Arrays - Within array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_array_rank_parentheses",
      "documentation": "Arrays - Within array rank parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_attribute_angles",
      "documentation": "Attributes - Within attribute angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_attribute_angles",
      "documentation": "Attributes - Within attribute angles"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_invocation_parentheses",
      "documentation": "Nearby parentheses - Within empty invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_empty_invocation_parentheses",
      "documentation": "Nearby parentheses - Within empty invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_method_parentheses",
      "documentation": "Nearby parentheses - Within empty method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_empty_method_parentheses",
      "documentation": "Nearby parentheses - Within empty method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_expression_parentheses",
      "documentation": "Expression - Within parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_expression_parentheses",
      "documentation": "Nearby parentheses - Within expression parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_invocation_parentheses",
      "documentation": "Nearby parentheses - Within invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_invocation_parentheses",
      "documentation": "Nearby parentheses - Within invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_method_parentheses",
      "documentation": "Nearby parentheses - Within method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_method_parentheses",
      "documentation": "Nearby parentheses - Within method declaration parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_tuple_parentheses",
      "documentation": "Nearby parentheses - Within tuple parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_tuple_parentheses",
      "documentation": "Nearby parentheses - Within tuple parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_type_parameter_parentheses",
      "documentation": "Nearby parentheses - Within type parameter parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_space_within_type_parameter_parentheses",
      "documentation": "Nearby parentheses - Within type parameter parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_stick_comment",
      "documentation": "Other - Don't indent comments started at first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_tab_width",
      "documentation": "Tabs and indents - Tab width"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_arguments_style",
      "documentation": "Line wrapping - Wrap invocation arguments"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_before_binary_opsign",
      "documentation": "Line wrapping - Prefer wrap before operator in binary expression"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_before_declaration_lpar",
      "documentation": "Line wrapping - Prefer wrap before \"(\" in method declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_before_invocation_lpar",
      "documentation": "Line wrapping - Prefer wrap before \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_extends_list_style",
      "documentation": "Line wrapping - Wrap extends/implements/handles list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_max_line_length",
      "documentation": "Line wrapping - Hard wrap at"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_multiple_declaration_style",
      "documentation": "Line wrapping - Wrap multiple declarations list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_wrap_parameters_style",
      "documentation": "Line wrapping - Wrap formal parameters"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_allow_alias",
      "documentation": "Reference qualification - Allow 'Imports' alias directive"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_vb_prefer_qualified_reference",
      "documentation": "Reference qualification - Prefer fully qualified references"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_alignment_tab_fill_style",
      "documentation": "Tabs and indents - How to align when tabs are used for indents"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_allow_far_alignment",
      "documentation": "Tabs and indents - Align even if the resulting indentation is too large"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_blank_line_after_pi",
      "documentation": "Processing instructions - Blank line after processing instructions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_indent_size",
      "documentation": "Tabs and indents - Indent size"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_indent_style",
      "documentation": "Tabs and indents - Indent style"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Format_IndentStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_indent_child_elements",
      "documentation": "Tag content - Indent inside element that doesn't contain text"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlIndentingStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_indent_text",
      "documentation": "Tag content - Indent inside element that contain text"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlIndentingStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_keep_user_linebreaks",
      "documentation": "Tag content - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreaks_inside_tags_for_multiline_elements",
      "documentation": "Tag content - Line breaks after start-tag and before end-tag in multiline elements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreaks_inside_tags_for_elements_with_child_elements",
      "documentation": "Tag content - Line breaks after start-tag and before end-tag in elements that contain other elements and no text"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_max_blank_lines_between_tags",
      "documentation": "Around tags - Maximum blank lines between tags"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreaks_inside_tags_for_elements_longer_than",
      "documentation": "Tag content - Line breaks after start-tag and before end-tag when element is longer than"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_spaces_around_eq_in_pi_attribute",
      "documentation": "Processing instructions - Spaces around '=' in attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_pi_attributes_indent",
      "documentation": "Processing instructions - Attributes indenting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributeIndenting"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_pi_attribute_style",
      "documentation": "Processing instructions - Attributes format"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributesFormat"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_space_after_last_pi_attribute",
      "documentation": "Processing instructions - Space after last attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreak_before_singleline_elements",
      "documentation": "Around tags - Place singleline elements on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_spaces_inside_tags",
      "documentation": "Tag content - Spaces after start-tag and before end-tag otherwise"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_tab_width",
      "documentation": "Tabs and indents - Tab width"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_linebreak_before_multiline_elements",
      "documentation": "Around tags - Place multiline elements on new line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_attribute_indent",
      "documentation": "Inside of tag header - Attributes indenting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributeIndenting"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_attribute_style",
      "documentation": "Inside of tag header - Attributes format"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Xml_CodeStyle_XmlAttributesFormat"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_space_after_last_attribute",
      "documentation": "Inside of tag header - Space after last attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_space_before_self_closing",
      "documentation": "Inside of tag header - Space before '/>'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_spaces_around_eq_in_attribute",
      "documentation": "Inside of tag header - Spaces around '=' in attribute"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_max_line_length",
      "documentation": "Line wrapping - Hard wrap at"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_wrap_tags_and_pi",
      "documentation": "Line wrapping - Wrap tags and processing instructions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_wrap_text",
      "documentation": "Tag content - Wrap inside text"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_xmldoc_wrap_around_elements",
      "documentation": "Tag content - Wrap before and after elements"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_alignment_tab_fill_style",
      "documentation": "Tabs and indents - How to align when tabs are used for indents"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_AlignmentTabFillStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_first_arg_by_paren",
      "documentation": "Align multiline construct - First call argument by '('"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_argument",
      "documentation": "Align multiline construct - Call arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_binary_expressions_chain",
      "documentation": "Align multiline construct - Chained binary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_calls_chain",
      "documentation": "Align multiline construct - Chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_ctor_init",
      "documentation": "Align multiline construct - Member initializers in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_ctor_init",
      "documentation": "Align multiline construct - Member initializers in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_expression_braces",
      "documentation": "Align multiline construct - Initializer list arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_expression_braces",
      "documentation": "Align multiline construct - Initializer list arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_extends_list",
      "documentation": "Align multiline construct - Base classes in class base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_parameter",
      "documentation": "Align multiline construct - Function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_type_argument",
      "documentation": "Align multiline construct - Template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_type_argument",
      "documentation": "Align multiline construct - Template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_multiline_type_parameter",
      "documentation": "Align multiline construct - Template parameters in template declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiline_type_parameter",
      "documentation": "Align multiline construct - Template parameters in template declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_multiple_declaration",
      "documentation": "Align multiline construct - Declarators in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_align_ternary",
      "documentation": "Align multiline construct - ?: operator"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_TernaryOperatorAlign",
      "values": [
        {
          "type": "constant",
          "value": "align_all",
          "documentation": "Align"
        },
        {
          "type": "constant",
          "value": "align_not_nested",
          "documentation": "Align except when nested"
        },
        {
          "type": "constant",
          "value": "none",
          "documentation": "No align"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_align_ternary",
      "documentation": "Align multiline construct - ?: operator"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_TernaryOperatorAlign"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_allow_far_alignment",
      "documentation": "Tabs and indents - Align even if the resulting indentation is too large"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_brace_style",
      "documentation": "Braces layout - Namespace declaration"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle",
      "values": [
        {
          "type": "constant",
          "value": "end_of_line",
          "documentation": "At end of line (K&R style)"
        },
        {
          "type": "constant",
          "value": "end_of_line_no_space",
          "documentation": "At end of line (no space)"
        },
        {
          "type": "constant",
          "value": "next_line",
          "documentation": "At next line (BSD style)"
        },
        {
          "type": "constant",
          "value": "next_line_shifted",
          "documentation": "At next line indented (Whitesmiths style)"
        },
        {
          "type": "constant",
          "value": "next_line_shifted_2",
          "documentation": "At next line indented 2 (GNU style)"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_anonymous_method_declaration_braces",
      "documentation": "Braces layout - Anonymous method declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_class_definition",
      "documentation": "Blank lines - Around class/struct/enum definition"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_class_definition",
      "documentation": "Blank lines - Around class/struct/enum definition"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_function_declaration",
      "documentation": "Blank lines - Around function declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_function_declaration",
      "documentation": "Blank lines - Around function declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_function_definition",
      "documentation": "Blank lines - Around function definitions"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_function_definition",
      "documentation": "Blank lines - Around function definitions"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_namespace",
      "documentation": "Blank lines - Around namespaces"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_other_declaration",
      "documentation": "Blank lines - Around other definitions and declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_other_declaration",
      "documentation": "Blank lines - Around other definitions and declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_blank_lines_around_single_line_function_definition",
      "documentation": "Blank lines - Around single line function definitions"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_blank_lines_around_single_line_function_definition",
      "documentation": "Blank lines - Around single line function definitions"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_break_template_declaration",
      "documentation": "Place on new line - Break line after the template<...> of a template declaration"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle",
      "values": [
        {
          "type": "constant",
          "value": "do_not_change",
          "documentation": "Do not change"
        },
        {
          "type": "constant",
          "value": "on_single_line",
          "documentation": "Force put on single line"
        },
        {
          "type": "constant",
          "value": "line_break",
          "documentation": "Force line breaks"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_break_template_declaration",
      "documentation": "Place on new line - Break line after the template<...> of a template declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_case_block_braces",
      "documentation": "Braces layout - Block under \"case\" label"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_continuous_line_indent",
      "documentation": "Indentation - Continuous line indent"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Psi_CodeStyle_ContinuousLineIndent",
      "values": [
        {
          "type": "constant",
          "value": "none"
        },
        {
          "type": "constant",
          "value": "single"
        },
        {
          "type": "constant",
          "value": "double"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_continuous_line_indent",
      "documentation": "Indentation - Continuous line indent"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ContinuousLineIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_disable_space_changes_before_trailing_comment",
      "documentation": "Other - Preserve spaces before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_disable_space_changes_before_trailing_comment",
      "documentation": "Other - Preserve spaces before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_empty_block_style",
      "documentation": "Braces layout - Empty braces formatting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_EmptyBlockStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_expression_braces",
      "documentation": "Braces layout - Other braces"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_expression_braces",
      "documentation": "Braces layout - Other braces"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_function_declaration_return_type_style",
      "documentation": "Place on new line - Break line after member function declaration return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_function_declaration_return_type_style",
      "documentation": "Place on new line - Break line after member function declaration return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_function_definition_return_type_style",
      "documentation": "Place on new line - Break line after member function definition return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_function_definition_return_type_style",
      "documentation": "Place on new line - Break line after member function definition return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_access_specifiers_from_class",
      "documentation": "Indentation - Indent access specifier from class"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_access_specifiers_from_class",
      "documentation": "Indentation - Indent access specifier from class"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_aligned_ternary",
      "documentation": "Align multiline construct - Indent aligned ?: operator"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_aligned_ternary",
      "documentation": "Align multiline construct - Indent aligned ?: operator"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_switch_labels",
      "documentation": "Indentation - Indent \"case\" from \"switch\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_class_members_from_access_specifiers",
      "documentation": "Indentation - Indent class member from access specifier"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_class_members_from_access_specifiers",
      "documentation": "Indentation - Indent class member from access specifier"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_comment",
      "documentation": "Indentation - Indent comments started at the first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_comment",
      "documentation": "Indentation - Indent comments started at the first column"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_invocation_pars",
      "documentation": "Indentation - Indent method calls' parentheses"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_method_decl_pars",
      "documentation": "Indentation - Indent function declarations' parentheses"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_preprocessor_directives",
      "documentation": "Indentation - Preprocessor directives indenting"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_PreprocessorIndent",
      "values": [
        {
          "type": "constant",
          "value": "none",
          "documentation": "No indent"
        },
        {
          "type": "constant",
          "value": "normal",
          "documentation": "Indent"
        },
        {
          "type": "constant",
          "value": "do_not_change",
          "documentation": "Do not change"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_preprocessor_directives",
      "documentation": "Indentation - Preprocessor directives indenting"
    },
    "value": {
      "type": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_PreprocessorIndent"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_size",
      "documentation": "Tabs and indents - Indent size"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_statement_pars",
      "documentation": "Indentation - Indent statement (if, while, for, etc) parentheses"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_ParsFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_style",
      "documentation": "Tabs and indents - Indent style"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_Format_IndentStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_type_constraints",
      "documentation": "Indentation - Indent C++/CLI generic constraints"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_indent_wrapped_function_names",
      "documentation": "Indentation - Indent if a function definition or declaration is wrapped after the type"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_indent_wrapped_function_names",
      "documentation": "Indentation - Indent if a function definition or declaration is wrapped after the type"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_int_align_comments",
      "documentation": "Align similar code in columns - End comments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_declaration_names",
      "documentation": "Align similar code in columns - Declaration names"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_int_align_declaration_names",
      "documentation": "Align similar code in columns - Declaration names"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_int_align_eq",
      "documentation": "Align similar code in columns - Assignments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_int_align_eq",
      "documentation": "Align similar code in columns - Assignments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_int_align_fix_in_adjacent",
      "documentation": "Align similar code in columns - Fix column alignment in adjacent lines"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_invocable_declaration_braces",
      "documentation": "Braces layout - Function declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_keep_blank_lines_in_code",
      "documentation": "Preserve existing formatting - Keep max blank lines in code"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_keep_blank_lines_in_declarations",
      "documentation": "Preserve existing formatting - Keep max blank lines in declarations"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_keep_user_linebreaks",
      "documentation": "Line wrapping - Keep existing line breaks"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_line_break_after_colon_in_member_initializer_lists",
      "documentation": "Place on new line - Break line after colon in member initializer lists"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_line_break_after_colon_in_member_initializer_lists",
      "documentation": "Place on new line - Break line after colon in member initializer lists"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_line_break_after_comma_in_member_initializer_lists",
      "documentation": "Place on new line - Break line after comma in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_line_break_after_comma_in_member_initializer_lists",
      "documentation": "Place on new line - Break line after comma in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_line_break_before_comma_in_member_initializer_lists",
      "documentation": "Place on new line - Break line before comma in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_line_break_before_comma_in_member_initializer_lists",
      "documentation": "Place on new line - Break line before comma in member initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_line_break_before_requires_clause",
      "documentation": "Place on new line - Break line before the requires-clause"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_line_break_before_requires_clause",
      "documentation": "Place on new line - Break line before the requires-clause"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linkage_specification_braces",
      "documentation": "Braces layout - Linkage specifications"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_linkage_specification_braces",
      "documentation": "Braces layout - Linkage specifications"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_linkage_specification_indentation",
      "documentation": "Indentation - Indent linkage specification block members"
    },
    "value": {
      "type": "union",
      "type_alias": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_NamespaceIndentationKind",
      "values": [
        {
          "type": "constant",
          "value": "none",
          "documentation": "Do not indent"
        },
        {
          "type": "constant",
          "value": "inner",
          "documentation": "Indent only in inner namespaces"
        },
        {
          "type": "constant",
          "value": "all",
          "documentation": "Indent all"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_linkage_specification_indentation",
      "documentation": "Indentation - Indent linkage specification block members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_NamespaceIndentationKind"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_member_initializer_list_style",
      "documentation": "Place on new line - Break line before colon in member initializer lists"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_member_initializer_list_style",
      "documentation": "Place on new line - Break line before colon in member initializer lists"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_namespace_declaration_braces",
      "documentation": "Braces layout - Namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_namespace_declaration_braces",
      "documentation": "Braces layout - Namespace declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_namespace_indentation",
      "documentation": "Indentation - Indent namespace members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_NamespaceIndentationKind"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_namespace_indentation",
      "documentation": "Indentation - Indent namespace members"
    },
    "value": {
      "type": "JetBrains_ReSharper_Feature_Services_Cpp_CodeStyle_NamespaceIndentationKind"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_other_braces",
      "documentation": "Braces layout - Other statements and blocks"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_outdent_commas",
      "documentation": "Align multiline construct - Outdent commas"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_outdent_dots",
      "documentation": "Align multiline construct - Outdent \".\" and \"->\" in chained method calls"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_new_line_before_catch",
      "documentation": "Place on new line - Place \"catch\" on new line after compound statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_place_comments_at_first_column",
      "documentation": "Indentation - Place comments at the first column when commenting out code"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_new_line_before_else",
      "documentation": "Place on new line - Place \"else\" on new line after compound statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_place_namespace_definitions_on_same_line",
      "documentation": "Braces layout - Place namespace definitions on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_place_namespace_definitions_on_same_line",
      "documentation": "Braces layout - Place namespace definitions on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_place_type_constraints_on_same_line",
      "documentation": "Place on new line - Allow C++/CLI generic constraints on the same line"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_new_line_before_while",
      "documentation": "Place on new line - Place \"while\" on new line after compound statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_requires_expression_braces",
      "documentation": "Braces layout - Requires expressions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_requires_expression_braces",
      "documentation": "Braces layout - Requires expressions"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_simple_block_style",
      "documentation": "Braces layout - Keep simple compound statements in one line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_simple_block_style",
      "documentation": "Braces layout - Keep simple compound statements in one line"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_simple_case_statement_style",
      "documentation": "Place on new line - Break line in simple \"case\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_simple_case_statement_style",
      "documentation": "Place on new line - Break line in simple \"case\" statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_simple_embedded_statement_style",
      "documentation": "Place on new line - Break line in single embedded statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_simple_embedded_statement_style",
      "documentation": "Place on new line - Break line in single embedded statement"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_cast",
      "documentation": "In expressions - After parentheses in cast expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_colon_in_case",
      "documentation": "In control statements - After colon in switch case or label statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma",
      "documentation": "In declarations - After comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_base_clause",
      "documentation": "In declarations - After comma in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_base_clause",
      "documentation": "In declarations - After comma in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_declaration",
      "documentation": "In declarations - After comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_declaration",
      "documentation": "In declarations - After comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_enum",
      "documentation": "In declarations - After comma in enum"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_enum",
      "documentation": "In declarations - After comma in enum"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_initializer_braces",
      "documentation": "In expressions - After comma in uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_initializer_braces",
      "documentation": "In expressions - After comma in uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_method",
      "documentation": "In declarations - After comma in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_method",
      "documentation": "In declarations - After comma in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_method_call",
      "documentation": "In expressions - After comma in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_method_call",
      "documentation": "In expressions - After comma in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_template_args",
      "documentation": "In declarations - After comma in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_template_args",
      "documentation": "In declarations - After comma in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_comma_in_template_params",
      "documentation": "In declarations - After comma in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_comma_in_template_params",
      "documentation": "In declarations - After comma in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_colon_in_inheritance_clause",
      "documentation": "In declarations - After base types list colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_for_colon",
      "documentation": "In control statements - After ':' in range-based for loop"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_for_colon",
      "documentation": "In control statements - After ':' in range-based for loop"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_semicolon_in_for_statement",
      "documentation": "In control statements - After semicolon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ptr_in_data_member",
      "documentation": "In declarations - After ptr in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ptr_in_data_member",
      "documentation": "In declarations - After ptr in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ptr_in_data_members",
      "documentation": "In declarations - After ptr in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ptr_in_data_members",
      "documentation": "In declarations - After ptr in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ptr_in_method",
      "documentation": "In declarations - After ptr in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ptr_in_method",
      "documentation": "In declarations - After ptr in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ref_in_data_member",
      "documentation": "In declarations - After ref in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ref_in_data_member",
      "documentation": "In declarations - After ref in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ref_in_data_members",
      "documentation": "In declarations - After ref in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ref_in_data_members",
      "documentation": "In declarations - After ref in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_after_ref_in_method",
      "documentation": "In declarations - After ref in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ref_in_method",
      "documentation": "In declarations - After ref in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ternary_colon",
      "documentation": "In expressions - In ternary operator '? :' after ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_ternary_quest",
      "documentation": "In expressions - In ternary operator '? :' after '?'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_type_parameter_constraint_colon",
      "documentation": "In declarations - After C++/CLI generic constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_assignment_operator",
      "documentation": "In expressions - Around assignment operator"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_assignment_operator",
      "documentation": "In expressions - Around assignment operator"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_binary_operator",
      "documentation": "In expressions - Around binary operator"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_around_deref_in_trailing_return_type",
      "documentation": "In declarations - Around '->' in trailing return types"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_deref_in_trailing_return_type",
      "documentation": "In declarations - Around '->' in trailing return types"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_member_access_operator",
      "documentation": "In expressions - Around dot, '->', '.*' and '->.'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_dot",
      "documentation": "In expressions - Around dot, '->', '.*' and '->.'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_open_square_brackets",
      "documentation": "In expressions - Before array subscript brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_colon_in_case",
      "documentation": "In control statements - Before colon in switch case or label statement"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma",
      "documentation": "In declarations - Before comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_base_clause",
      "documentation": "In declarations - Before comma in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_base_clause",
      "documentation": "In declarations - Before comma in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_declaration",
      "documentation": "In declarations - Before comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_declaration",
      "documentation": "In declarations - Before comma in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_enum",
      "documentation": "In declarations - Before comma in enum"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_enum",
      "documentation": "In declarations - Before comma in enum"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_initializer_braces",
      "documentation": "In expressions - Before comma in uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_initializer_braces",
      "documentation": "In expressions - Before comma in uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_method",
      "documentation": "In declarations - Before comma in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_method",
      "documentation": "In declarations - Before comma in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_method_call",
      "documentation": "In expressions - Before comma in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_method_call",
      "documentation": "In expressions - Before comma in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_template_args",
      "documentation": "In declarations - Before comma in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_template_args",
      "documentation": "In declarations - Before comma in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_comma_in_template_params",
      "documentation": "In declarations - Before comma in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_comma_in_template_params",
      "documentation": "In declarations - Before comma in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_call_name_and_opening_parenthesis",
      "documentation": "In expressions - Before parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_empty_method_call_parentheses",
      "documentation": "In expressions - Before empty parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_colon_in_inheritance_clause",
      "documentation": "In declarations - Before base types list colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_for_colon",
      "documentation": "In control statements - Before ':' in range-based for loop"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_for_colon",
      "documentation": "In control statements - Before ':' in range-based for loop"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_semicolon_in_for_statement",
      "documentation": "In control statements - Before semicolon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_initializer_braces",
      "documentation": "In expressions - Before uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_initializer_braces",
      "documentation": "In expressions - Before uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_lambda_parentheses",
      "documentation": "In declarations - Before parentheses in lambda parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_lambda_parentheses",
      "documentation": "In declarations - Before parentheses in lambda parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_method_call_parentheses",
      "documentation": "In expressions - Before parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_declaration_name_and_open_parenthesis",
      "documentation": "In declarations - Before parentheses in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ptr_in_abstract_decl",
      "documentation": "In declarations - Before ptr in abstract declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ptr_in_abstract_decl",
      "documentation": "In declarations - Before ptr in abstract declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ptr_in_data_member",
      "documentation": "In declarations - Before ptr in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ptr_in_data_member",
      "documentation": "In declarations - Before ptr in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ptr_in_data_members",
      "documentation": "In declarations - Before ptr in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ptr_in_data_members",
      "documentation": "In declarations - Before ptr in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ptr_in_method",
      "documentation": "In declarations - Before ptr in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ptr_in_method",
      "documentation": "In declarations - Before ptr in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ref_in_abstract_decl",
      "documentation": "In declarations - Before ref in abstract declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ref_in_abstract_decl",
      "documentation": "In declarations - Before ref in abstract declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ref_in_data_member",
      "documentation": "In declarations - Before ref in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ref_in_data_member",
      "documentation": "In declarations - Before ref in declaration of variable"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ref_in_data_members",
      "documentation": "In declarations - Before ref in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ref_in_data_members",
      "documentation": "In declarations - Before ref in declaration of multiple variables"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_ref_in_method",
      "documentation": "In declarations - Before ref in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ref_in_method",
      "documentation": "In declarations - Before ref in return type of function"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_after_keywords_in_control_flow_statements",
      "documentation": "In control statements - Before parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_template_args",
      "documentation": "In declarations - Before angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_template_args",
      "documentation": "In declarations - Before angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_before_template_params",
      "documentation": "In declarations - Before angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_template_params",
      "documentation": "In declarations - Before angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ternary_colon",
      "documentation": "In expressions - In ternary operator '? :' before ':'"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_ternary_quest",
      "documentation": "In expressions - In ternary operator '? :' before '?' "
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_trailing_comment",
      "documentation": "Other - Before end of line comment"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_before_type_parameter_constraint_colon",
      "documentation": "In declarations - Before C++/CLI generic constraint colon"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_between_closing_angle_brackets_in_template_args",
      "documentation": "In declarations - Between closing angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_closing_angle_brackets_in_template_args",
      "documentation": "In declarations - Between closing angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_around_alias_eq",
      "documentation": "In declarations - Around '=' in alias declaration and namespace alias"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_square_brackets",
      "documentation": "In expressions - Within array subscript brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_array_access_brackets",
      "documentation": "In expressions - Within array subscript brackets"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_typecast_parentheses",
      "documentation": "In expressions - Within parentheses in cast expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_initializer_braces",
      "documentation": "In expressions - Within empty uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_empty_initializer_braces",
      "documentation": "In expressions - Within empty uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_call_empty_parameter_list_parentheses",
      "documentation": "In expressions - Within empty parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_declaration_empty_parameter_list_parentheses",
      "documentation": "In declarations - Within empty parentheses in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_empty_template_params",
      "documentation": "In declarations - Within empty angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_empty_template_params",
      "documentation": "In declarations - Within empty angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_initializer_braces",
      "documentation": "In expressions - Within uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_initializer_braces",
      "documentation": "In expressions - Within uniform initialization braces"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_call_parameter_list_parentheses",
      "documentation": "In expressions - Within parentheses in function call and initialization"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_method_declaration_parameter_list_parentheses",
      "documentation": "In declarations - Within parentheses in function parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_parentheses",
      "documentation": "In expressions - Within parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_between_parentheses_of_control_flow_statements",
      "documentation": "In control statements - Within parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_template_args",
      "documentation": "In declarations - Within angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_template_args",
      "documentation": "In declarations - Within angle brackets in template arguments"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_space_within_template_params",
      "documentation": "In declarations - Within angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_space_within_template_params",
      "documentation": "In declarations - Within angle brackets in template parameters"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_tab_width",
      "documentation": "Tabs and indents - Tab width"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_toplevel_function_declaration_return_type_style",
      "documentation": "Place on new line - Break line after top-level function declaration return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_toplevel_function_declaration_return_type_style",
      "documentation": "Place on new line - Break line after top-level function declaration return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_toplevel_function_definition_return_type_style",
      "documentation": "Place on new line - Break line after top-level function definition return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_toplevel_function_definition_return_type_style",
      "documentation": "Place on new line - Break line after top-level function definition return type"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_SimpleEmbeddedStatementStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_type_declaration_braces",
      "documentation": "Braces layout - Type declaration"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_BraceFormatStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_continuous_line_indent_in_expression_braces",
      "documentation": "Indentation - Use continuous line indent in initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_use_continuous_line_indent_in_expression_braces",
      "documentation": "Indentation - Use continuous line indent in initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_use_continuous_line_indent_in_method_pars",
      "documentation": "Indentation - Use continuous line indent in function declaration and invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_use_continuous_line_indent_in_method_pars",
      "documentation": "Indentation - Use continuous line indent in function declaration and invocation parentheses"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_after_declaration_lpar",
      "documentation": "Line wrapping - Prefer wrap after \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_after_expression_lbrace",
      "documentation": "Line wrapping - Prefer wrap after \"{\" in initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_after_expression_lbrace",
      "documentation": "Line wrapping - Prefer wrap after \"{\" in initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_after_invocation_lpar",
      "documentation": "Line wrapping - Prefer wrap after \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_arguments_style",
      "documentation": "Line wrapping - Wrap invocation arguments"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_base_clause_style",
      "documentation": "Line wrapping - Wrap base classes list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_base_clause_style",
      "documentation": "Line wrapping - Wrap base classes list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_colon",
      "documentation": "Line wrapping - Prefer wrap before \":\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_colon",
      "documentation": "Line wrapping - Prefer wrap before \":\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_comma",
      "documentation": "Line wrapping - Prefer wrap before \",\""
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_comma_in_base_clause",
      "documentation": "Line wrapping - Prefer wrap before \",\" in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_comma_in_base_clause",
      "documentation": "Line wrapping - Prefer wrap before \",\" in base clause"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_declaration_lpar",
      "documentation": "Line wrapping - Prefer wrap before \"(\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_declaration_rpar",
      "documentation": "Line wrapping - Prefer wrap before \")\" in declaration"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_before_expression_rbrace",
      "documentation": "Line wrapping - Prefer wrap before \"}\" in initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_expression_rbrace",
      "documentation": "Line wrapping - Prefer wrap before \"}\" in initializer lists"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_first_type_parameter_constraint",
      "documentation": "Line wrapping - Prefer wrap before first C++/CLI generic constraint"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_invocation_lpar",
      "documentation": "Line wrapping - Prefer wrap before \"(\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_invocation_rpar",
      "documentation": "Line wrapping - Prefer wrap before \")\" in invocation"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_before_ternary_opsigns",
      "documentation": "Line wrapping - Prefer wrap before \"?\" and \":\" in ternary expressions"
    },
    "value": {
      "type": "System_Boolean"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_braced_init_list_style",
      "documentation": "Line wrapping - Wrap braced initializer list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_braced_init_list_style",
      "documentation": "Line wrapping - Wrap braced initializer list"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_ctor_initializer_style",
      "documentation": "Line wrapping - Wrap constructor initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_ctor_initializer_style",
      "documentation": "Line wrapping - Wrap constructor initializer"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_wrap_enumeration_style",
      "documentation": "Line wrapping - Wrap enum definition"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_enumeration_style",
      "documentation": "Line wrapping - Wrap enum definition"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_max_line_length",
      "documentation": "Line wrapping - Hard wrap at"
    },
    "value": {
      "type": "number"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_multiple_type_parameter_constraints_style",
      "documentation": "Line wrapping - Wrap multiple C++/CLI generic constraints"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_parameters_style",
      "documentation": "Line wrapping - Wrap formal parameters"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  },
  {
    "type": "option",
    "key": {
      "type": "constant",
      "value": "resharper_cpp_wrap_ternary_expr_style",
      "documentation": "Line wrapping - Wrap ternary expression"
    },
    "value": {
      "type": "JetBrains_ReSharper_Psi_CodeStyle_WrapStyle"
    }
  }
]