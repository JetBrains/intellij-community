[
  {
    "type": "option",
    "key": "dotnet_sort_system_directives_first",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Sort System.* using directives alphabetically, and place them before other using directives."
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Do not place System.* using directives before other using directives."
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "dotnet_separate_import_directive_groups",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place a blank line between using directive groups."
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Do not place a blank line between using directive groups."
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_new_line_before_else",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place else statements on a new line."
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Place else statements on the same line."
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_new_line_before_catch",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place catch statements on a new line."
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Place catch statements on the same line."
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_new_line_before_finally",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Require finally statements to be on a new line after the closing brace."
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Require finally statements to be on the same line as the closing brace."
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_new_line_before_members_in_object_initializers",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Require members of object initializers to be on separate lines"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Require members of object initializers to be on the same line"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_new_line_before_members_in_anonymous_types",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Require members of anonymous types to be on separate lines"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Require members of anonymous types to be on the same line"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_new_line_between_query_expression_clauses",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Require elements of query expression clauses to be on separate lines"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Require elements of query expression clauses to be on the same line"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_indent_case_contents",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Indent switch case contents"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Do not indent switch case contents"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_indent_switch_labels",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Indent switch labels"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Do not indent switch labels"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_indent_labels",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "flush_left",
          "documentation": "Labels are placed at the leftmost column"
        },
        {
          "type": "constant",
          "value": "one_less_than_current",
          "documentation": "Labels are placed at one less indent to the current context"
        },
        {
          "type": "constant",
          "value": "no_change",
          "documentation": "Labels are placed at the same indent as the current context"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_indent_block_contents",
    "value": {
      "type": "union",
      "values": [
        "true"
      ,
        "false"

      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_indent_braces",
    "value": {
      "type": "union",
      "values": [
        "true"
      ,
        "false"

      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_indent_case_contents_when_block",
    "value": {
      "type": "union",
      "values": [
        "true"
      ,
        "false"

      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_after_cast",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place a space character between a cast and the value"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space between the cast and the value"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_after_keywords_in_control_flow_statements",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place a space character after a keyword in a control flow statement such as a for loop"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space after a keyword in a control flow statement such as a for loop"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_between_parentheses",
    "value": {
      "type": "list",
      "values": [
        {
          "type": "constant",
          "value": "control_flow_statements",
          "documentation": "Place space between parentheses of control flow statements"
        },
        {
          "type": "constant",
          "value": "expressions",
          "documentation": "Place space between parentheses of expressions"
        },
        {
          "type": "constant",
          "value": "type_casts",
          "documentation": "Place space between parentheses in type casts"
        },
        {
          "type": "text",
          "deprecated": "If you use a value other than control_flow_statements, expressions, or type_casts, the setting is not applied."
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_before_colon_in_inheritance_clause",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place a space character before the colon for bases or interfaces in a type declaration"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space before the colon for bases or interfaces in a type declaration"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_after_colon_in_inheritance_clause",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place a space character after the colon for bases or interfaces in a type declaration"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space after the colon for bases or interfaces in a type declaration"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_around_binary_operators",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "before_and_after",
          "documentation": "Insert space before and after the binary operator"
        },
        {
          "type": "constant",
          "value": "none",
          "documentation": "Remove spaces before and after the binary operator"
        },
        {
          "type": "constant",
          "value": "ignore",
          "documentation": "Ignore spaces around binary operators"
        },
        {
          "type": "text",
          "deprecated": "If use a value other than before_and_after, none, or ignore, the setting is not applied."
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_between_method_declaration_parameter_list_parentheses",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space characters after the opening parenthesis and before the closing parenthesis of a method declaration parameter list"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_between_method_declaration_empty_parameter_list_parentheses",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space within empty parameter list parentheses for a method declaration"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space within empty parameter list parentheses for a method declaration"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_between_method_declaration_name_and_open_parenthesis",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place a space character between the method name and opening parenthesis in the method declaration"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space characters between the method name and opening parenthesis in the method declaration"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_between_method_call_parameter_list_parentheses",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Place a space character after the opening parenthesis and before the closing parenthesis of a method call"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space characters after the opening parenthesis and before the closing parenthesis of a method call"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_between_method_call_empty_parameter_list_parentheses",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space within empty argument list parentheses"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space within empty argument list parentheses"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_between_method_call_name_and_opening_parenthesis",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space between method call name and opening parenthesis"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space between method call name and opening parenthesis"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_after_comma",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space after a comma"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space after a comma"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_before_comma",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space before a comma"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space before a comma"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_after_dot",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space after a dot"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space after a dot"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_before_dot",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space before a dot "
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space before a dot"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_after_semicolon_in_for_statement",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space after each semicolon in a for statement"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space after each semicolon in a for statement"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_before_semicolon_in_for_statement",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space before each semicolon in a for statement "
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space before each semicolon in a for statement"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_around_declaration_statements",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "ignore",
          "documentation": "Don't remove extra space characters in declaration statements"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove extra space characters in declaration statements"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_before_open_square_brackets",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space before opening square brackets [ "
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space before opening square brackets ["
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_between_empty_square_brackets",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space between empty square brackets [ ] "
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space between empty square brackets []"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_space_between_square_brackets",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Insert space characters in non-empty square brackets [ 0 ] "
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Remove space characters in non-empty square brackets [0]"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_preserve_single_line_statements",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Leave statements and member declarations on the same line"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Leave statements and member declarations on different lines"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_preserve_single_line_blocks",
    "value": {
      "type": "union",
      "values": [
        {
          "type": "constant",
          "value": "true",
          "documentation": "Leave code block on single line"
        },
        {
          "type": "constant",
          "value": "false",
          "documentation": "Leave code block on separate lines"
        }
      ]
    }
  },
  {
    "type": "option",
    "key": "csharp_new_line_before_open_brace",
    "value": {
      "type": "union",
      "values": [
        "all",
        "none",
        {
          "type": "list",
          "values": [
            "accessors",
            "anonymous_methods",
            "anonymous_types",
            "control_blocks",
            "events",
            "indexers",
            "lambdas",
            "local_functions",
            "namespace",
            {
              "type": "union",
              "values": [
                "method",
                "methods"
              ]
            },
            "object_collection",
            "properties",
            "types"
          ]
        }
      ]
    }
  }
]
