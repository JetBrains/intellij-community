plugins/editorconfigname: CI - Create CodeSee Maps
on:
  workflow_dispatch:
  schedule:
    - cron: '25 0/12 * * 1-5' # Build once every 12 hours, starting at 25 minutes past the hour (UTC)

  pull_request_target:
    paths-ignore:
      - 'docs/**'
      - '.gitignore'
    types: [opened, synchronize, reopened]

permissions: read-all

jobs:
  codesee:
    runs-on: ubuntu-22.04
    if: ${{ github.actor != 'renovate[bot]' && github.actor != 'camperbot' }}
    continue-on-error: true
    name: Analyze the repo with CodeSee
    steps:
      - uses: Codesee-io/codesee-action@4f66933f195ad209dab16bcdd12cbacfff7f8707 # v2
        with:
          codesee-token: ${{ secrets.CODESEE_ARCH_DIAG_API_TOKEN }}https://x-access-token:TOKEN@github.com/owner/repo.git".https://docs.github.com/en/actionsgithub.action_repository#
name: Demo Push

# This workflow runs when any of the following occur:
# - A push is made to a branch called `main` or `seed`
# - A tag starting with "v" is created
# - A pull request is created or updated
on:
  push:
    branches:
      - main
      - seed
    tags:
      - v*
  pull_request:
  # This creates an environment variable called `IMAGE_NAME ` with the value `ghtoken_product_demo`.
env:
  IMAGE_NAME: ghtoken_product_demo
#
jobs:
  # This pushes the image to GitHub Packages.
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      #
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
        #
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # This strips the git ref prefix from the version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # This strips the "v" prefix from the tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # This uses the Docker `latest` tag convention.
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
read:packagesgh pr checkout 68048https://github.com/DefinitelyTyped/DefinitelyTyped/pull/68048#issue-2060418811https://github.com/DefinitelyTyped/DefinitelyTyped/tree/db81a81898e9e0eaf41c95f29e07e33fedc7a2b2/types/jquerygit clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY$ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY
> Cloning into `Spoon-Knife`...
> remote: Counting objects: 10, done.
> remote: Compressing objects: 100% (8/8), done.
> remove: Total 10 (delta 1), reused 10 (delta 1)
> Unpacking objects: 100% (10/10), done.gh repo clone https://github.com/PATH-TO/REPOSITORY# Annie Streater

## Professional experience

### Senior Content Designer, GitHub
#### Since June 2022
Content discovery and design for GitHub Docs team to ensure documentation sets meet user needs, are scalable, discoverable and accessible. 

### Technical Writer, UK Government Cabinet Office
#### October 2020 to May 2022
Designing guidance for digital teams in government to help them build citizen-centered services. https://github.com/orgs/community/discussions/62531#discussion-5468914gh repo clone REPOSITORYname: Update core dependencies
on:
  workflow_dispatch: null
  schedule:
    # https://crontab.guru/#5_8_*_*_*
    - cron: "5 8 * * *"

# Conditional runs
# https://stackoverflow.com/a/61832535/2460034
jobs:
  update-webref:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "15"
          cache: npm

      # Use ncu to detect major version changes
      - run: npm i -g npm-check-updates
      - run: ncu -u
      - run: npm i
      - run: git restore package.json
      - run: npm run build && npm run baseline-accept
      - id: git-diff
        run: git diff --quiet HEAD baselines
        continue-on-error: true
      # TODO: Remove the following command after the fork is created
      - uses: lelia/forker@v0.0.1
        with:
          token: ${{ secrets.TS_GITHUB_BOT_AUTH }}
          owner: microsoft
          repo: TypeScript-DOM-lib-generator
        continue-on-error: true
      - uses: peter-evans/create-pull-request@v3
        if: ${{ steps.git-diff.outcome == 'failure' }}
        with:
          commit-message: "ðŸ¤– Update core dependencies"
          title: "Update core dependencies"
          push-to-fork: typescript-bot/TypeScript-DOM-lib-generator
          branch: update-core-deps
          token: ${{ secrets.TS_GITHUB_BOT_AUTH }}pnpm-lock.yaml{
  "name": "@freecodecamp/browser-scripts",
  "version": "1.0.0",
  "description": "The freeCodeCamp.org open-source codebase and curriculum",
  "license": "BSD-3-Clause",
  "private": true,
  "engines": {
    "node": ">=18",
    "pnpm": "8"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/freeCodeCamp/freeCodeCamp.git"
  },
  "bugs": {
    "url": "https://github.com/freeCodeCamp/freeCodeCamp/issues"
  },
  "homepage": "https://github.com/freeCodeCamp/freeCodeCamp#readme",
  "author": "freeCodeCamp <team@freecodecamp.org>",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "cross-env NODE_OPTIONS=\"--max-old-space-size=7168\" webpack -c webpack.config.js"
  },
  "keywords": [],
  "devDependencies": {
    "@babel/plugin-syntax-dynamic-import": "7.8.3",
    "@babel/plugin-transform-runtime": "7.23.3",
    "@babel/preset-env": "7.23.3",
    "@babel/preset-typescript": "7.23.3",
    "@freecodecamp/curriculum-helpers": "1.3.0",
    "@types/chai": "4.3.10",
    "@types/copy-webpack-plugin": "^8.0.1",
    "@types/enzyme": "3.10.16",
    "@types/enzyme-adapter-react-16": "1.0.9",
    "@types/jquery": "3.5.29",
    "@types/lodash-es": "4.17.11",
    "babel-loader": "8.3.0",
    "buffer": "6.0.3",
    "chai": "4.3.10",
    "copy-webpack-plugin": "9.1.0",
    "css-loader": "^6.8.1",
    "enzyme": "3.11.0",
    "enzyme-adapter-react-16": "1.15.7",
    "jquery": "3.7.1",
    "lodash-es": "4.17.21",
    "process": "0.11.10",
    "pyodide": "^0.23.3",
    "sass.js": "0.11.1",
    "style-loader": "^3.3.3",
    "util": "0.12.5",
    "webpack": "5.89.0",
    "webpack-cli": "4.10.0"
  },
  "dependencies": {
    "@babel/runtime": "^7.20.13",
    "xterm": "^5.2.1",
    "xterm-addon-fit": "^0.8.0"
  }
}# This defines the name of the workflow as it will appear in the "Actions" tab of the GitHub repository.
name: 'Link Checker: All English'

# The `on` key lets you define the events that trigger when the workflow is run. You can define multiple events here. For more information, see "[AUTOTITLE](/actions/using-workflows/triggering-a-workflow#using-events-to-trigger-workflows)."
on:
# Add the `workflow_dispatch` event if you want to be able to manually run this workflow from the UI. For more information, see [`workflow_dispatch`](/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch).
  workflow_dispatch:
  # Add the `push` event, so that the workflow runs automatically every time a commit is pushed to a branch called `main`. For more information, see [`push`](/actions/using-workflows/events-that-trigger-workflows#push).
  push:
    branches:
      - main
  # Add the `pull_request` event, so that the workflow runs automatically every time a pull request is created or updated. For more information, see [`pull_request`](/actions/using-workflows/events-that-trigger-workflows#pull_request).
  pull_request:

# This modifies the default permissions granted to `GITHUB_TOKEN`. This will vary depending on the needs of your workflow. For more information, see "[AUTOTITLE](/actions/using-jobs/assigning-permissions-to-jobs)."
#
# In this example, the `pull-requests: read` permission is needed for the `trilom/file-changes-action` action that is used later in this workflow.
permissions:
  contents: read
  pull-requests: read
# The `concurrency` key ensures that only a single workflow in the same concurrency group will run at the same time. For more information, see "[AUTOTITLE](/actions/using-jobs/using-concurrency)."
# `concurrency.group` generates a concurrency group name from the workflow name and pull request information. The `||` operator is used to define fallback values. 
# `concurrency.cancel-in-progress` cancels any currently running job or workflow in the same concurrency group.
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

# The `jobs` key groups together all the jobs that run in the workflow file.
jobs:
  # This line defines a job with the ID `check-links` that is stored within the `jobs` key.
  check-links:
    # The `runs-on` key in this example configures the job to run on a GitHub-hosted runner or a self-hosted runner, depending on the repository running the workflow. 
    # 
    # In this example, the job will run on a self-hosted runner if the repository is named `docs-internal` and is within the `github` organization. If the repository doesn't match this path, then it will run on an `ubuntu-latest` runner hosted by GitHub. For more information on these options, see "[AUTOTITLE](/actions/using-jobs/choosing-the-runner-for-a-job)."
    runs-on: ${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }}
    # The `steps` key groups together all the steps that will run as part of the `check-links` job. Each job in a workflow has its own `steps` section.
    steps:
      # The `uses` key tells the job to retrieve the action named `actions/checkout`. This is an action that checks out your repository and downloads it to the runner, allowing you to run actions against your code (such as testing tools). You must use the checkout action any time your workflow will use the repository's code or you are using an action defined in the repository.
      - name: Checkout
        uses: actions/checkout@v4

      # This step uses the `actions/setup-node` action to install the specified version of the Node.js software package on the runner, which gives you access to the `npm` command.
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.13.x
          cache: npm

      # The `run` key tells the job to execute a command on the runner. In this example, `npm ci` is used to install the npm software packages for the project.
      - name: Install
        run: npm ci

      # This step uses the `trilom/file-changes-action` action to gather all the changed files. This example is pinned to a specific version of the action, using the `a6ca26c14274c33b15e6499323aac178af06ad4b` SHA.
      # 
      # In this example, this step creates the file "${{ env.HOME }}/files.json", among others.
      - name: Gather files changed
        uses: trilom/file-changes-action@a6ca26c14274c33b15e6499323aac178af06ad4b
        with:
          fileOutput: 'json'

      # To help with verification, this step lists the contents of `files.json`. This will be visible in the workflow run's log, and can be useful for debugging.
      - name: Show files changed
        run: cat $HOME/files.json

      # This step uses the `run` command to execute a script that is stored in the repository at `script/rendered-content-link-checker.mjs` and passes all the parameters it needs to run.
      - name: Link check (warnings, changed files)
        run: |
          ./script/rendered-content-link-checker.mjs \
            --language en \
            --max 100 \
            --check-anchors \
            --check-images \
            --verbose \
            --list $HOME/files.json

      # This step also uses `run` command to execute a script that is stored in the repository at `script/rendered-content-link-checker.mjs` and passes a different set of parameters.
      - name: Link check (critical, all files)
        run: |
          ./script/rendered-content-link-checker.mjs \
            --language en \
            --exit \
            --verbose \
            --check-images \
            --level critical
tools/client-plugins/browser-scripts/package.jsonGitHub Actions workflowGitHub Docs
GitHub Actions/Examples/Use scripts to test your code on a runner
Using scripts to test your code on a runner
How to use essential GitHub Actions features for continuous integration (CI).

In this article
Example overview
Features used in this example
Example workflow
Next steps
Example overview
This article uses an example workflow to demonstrate some of the main CI features of GitHub Actions. When this workflow is triggered, it automatically runs a script that checks whether the GitHub Docs site has any broken links.

The following diagram shows a high level view of the workflow's steps and how they run within the job:



Features used in this example
The example workflow demonstrates the following capabilities of GitHub Actions.

Feature	Implementation
Triggering a workflow to run automatically	push
Triggering a workflow to run automatically	pull_request
Manually running a workflow from the UI	workflow_dispatch
Setting permissions for the token	permissions
Controlling how many workflow runs or jobs can run at the same time	concurrency
Running the job on different runners, depending on the repository	runs-on
Cloning your repository to the runner	actions/checkout
Installing node on the runner	actions/setup-node
Using a third-party action	trilom/file-changes-action
Running a script on the runner	Using ./script/rendered-content-link-checker.mjs
Example workflow
The following workflow was created by the GitHub Docs Engineering team. To review the latest version of this file in the github/docs repository, see check-broken-links-github-github.yml.

The following workflow renders the content of every page in the documentation and checks all internal links to ensure they connect correctly.

YAML
# This defines the name of the workflow as it will appear in the "Actions" tab of the GitHub repository.
name: 'Link Checker: All English'

# The `on` key lets you define the events that trigger when the workflow is run. You can define multiple events here. For more information, see "[AUTOTITLE](/actions/using-workflows/triggering-a-workflow#using-events-to-trigger-workflows)."
on:
# Add the `workflow_dispatch` event if you want to be able to manually run this workflow from the UI. For more information, see [`workflow_dispatch`](/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch).
  workflow_dispatch:
  # Add the `push` event, so that the workflow runs automatically every time a commit is pushed to a branch called `main`. For more information, see [`push`](/actions/using-workflows/events-that-trigger-workflows#push).
  push:
    branches:
      - main
  # Add the `pull_request` event, so that the workflow runs automatically every time a pull request is created or updated. For more information, see [`pull_request`](/actions/using-workflows/events-that-trigger-workflows#pull_request).
  pull_request:

# This modifies the default permissions granted to `GITHUB_TOKEN`. This will vary depending on the needs of your workflow. For more information, see "[AUTOTITLE](/actions/using-jobs/assigning-permissions-to-jobs)."
#
# In this example, the `pull-requests: read` permission is needed for the `trilom/file-changes-action` action that is used later in this workflow.
permissions:
  contents: read
  pull-requests: read
# The `concurrency` key ensures that only a single workflow in the same concurrency group will run at the same time. For more information, see "[AUTOTITLE](/actions/using-jobs/using-concurrency)."
# `concurrency.group` generates a concurrency group name from the workflow name and pull request information. The `||` operator is used to define fallback values. 
# `concurrency.cancel-in-progress` cancels any currently running job or workflow in the same concurrency group.
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

# The `jobs` key groups together all the jobs that run in the workflow file.
jobs:
  # This line defines a job with the ID `check-links` that is stored within the `jobs` key.
  check-links:
    # The `runs-on` key in this example configures the job to run on a GitHub-hosted runner or a self-hosted runner, depending on the repository running the workflow. 
    # 
    # In this example, the job will run on a self-hosted runner if the repository is named `docs-internal` and is within the `github` organization. If the repository doesn't match this path, then it will run on an `ubuntu-latest` runner hosted by GitHub. For more information on these options, see "[AUTOTITLE](/actions/using-jobs/choosing-the-runner-for-a-job)."
    runs-on: ${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }}
    # The `steps` key groups together all the steps that will run as part of the `check-links` job. Each job in a workflow has its own `steps` section.
    steps:
      # The `uses` key tells the job to retrieve the action named `actions/checkout`. This is an action that checks out your repository and downloads it to the runner, allowing you to run actions against your code (such as testing tools). You must use the checkout action any time your workflow will use the repository's code or you are using an action defined in the repository.
      - name: Checkout
        uses: actions/checkout@v4

      # This step uses the `actions/setup-node` action to install the specified version of the Node.js software package on the runner, which gives you access to the `npm` command.
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.13.x
          cache: npm

      # The `run` key tells the job to execute a command on the runner. In this example, `npm ci` is used to install the npm software packages for the project.
      - name: Install
        run: npm ci

      # This step uses the `trilom/file-changes-action` action to gather all the changed files. This example is pinned to a specific version of the action, using the `a6ca26c14274c33b15e6499323aac178af06ad4b` SHA.
      # 
      # In this example, this step creates the file "${{ env.HOME }}/files.json", among others.
      - name: Gather files changed
        uses: trilom/file-changes-action@a6ca26c14274c33b15e6499323aac178af06ad4b
        with:
          fileOutput: 'json'

      # To help with verification, this step lists the contents of `files.json`. This will be visible in the workflow run's log, and can be useful for debugging.
      - name: Show files changed
        run: cat $HOME/files.json

      # This step uses the `run` command to execute a script that is stored in the repository at `script/rendered-content-link-checker.mjs` and passes all the parameters it needs to run.
      - name: Link check (warnings, changed files)
        run: |
          ./script/rendered-content-link-checker.mjs \
            --language en \
            --max 100 \
            --check-anchors \
            --check-images \
            --verbose \
            --list $HOME/files.json

      # This step also uses `run` command to execute a script that is stored in the repository at `script/rendered-content-link-checker.mjs` and passes a different set of parameters.
      - name: Link check (critical, all files)
        run: |
          ./script/rendered-content-link-checker.mjs \
            --language en \
            --exit \
            --verbose \
            --check-images \
            --level criticalhttps://github-enterprise.s3.amazonaws.com/hotpatch/3.11/github-enterprise-3.11.2.hpkghttps://github-enterprise.s3.amazonaws.com/kvm/updates/github-enterprise-kvm-3.11.2.pkghttps://github-enterprise.s3.amazonaws.com/gce/updates/github-enterprise-gce-3.11.2.pkgvscode.devhttps://expert-broccoli-q7rxq76r7rcxxjp-8080.app.github.dev/dependabot/github_actions/actions/setup-python-5freeCodeCamp/freeCodeCamp/.github/workflows/codesee-diagram.yml@refs/heads/maincurriculum/challenges/english/15-javascript-algorithms-and-data-structures-22/learn-basic-javascript-by-building-a-role-playing-game/62a23d1c5f1c93161f3582ae.mdhttps://github.com/Development123455/.github/blob/main/LICENSE#L1
