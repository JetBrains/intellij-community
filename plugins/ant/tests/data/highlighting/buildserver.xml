<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="buildserver" default="all">


  <property file="buildserver.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!--
  <property name="skip.tests" value="true"/>
   -->

  <!-- The task requires the following libraries from IntelliJ IDEA distribution: -->
  <!--   javac2.jar; jdom.jar; asm.jar; asm-commons.jar -->
  <!--<taskdef name="javac2" classname="com.intellij.ant.Javac2"/>-->

  <!-- Compiler options -->

  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.js"/>
    <include name="**/?*.css"/>
    <include name="**/?*.jsp"/>
  </patternset>


  <!-- Project Libraries -->

  <path id="library.junit.classpath">
    <pathelement location="${basedir}/lib/junit-3.8.1.jar"/>
    <pathelement location="${basedir}/lib/jmock-SNAPSHOT.jar"/>
  </path>

  <path id="library.xmlrpc-2.0.classpath">
    <pathelement location="${basedir}/lib/commons-codec-1.3.jar"/>
    <pathelement location="${basedir}/lib/xmlrpc-2.0.1.jar"/>
  </path>

  <path id="library.commons-beanutils-core.classpath">
    <pathelement location="${basedir}/lib/commons-beanutils-core.jar"/>
    <pathelement location="${basedir}/lib/commons-logging.jar"/>
  </path>

  <path id="library.jdom.classpath">
    <pathelement location="${basedir}/lib/jdom.jar"/>
  </path>

  <path id="library.picocontainer.classpath">
    <pathelement location="${basedir}/lib/picocontainer-1.1.jar"/>
    <pathelement location="${basedir}/lib/nanocontainer-1.0-RC-1.jar"/>
  </path>

  <path id="library.xstream.classpath">
    <pathelement location="${basedir}/lib/xpp3_min-1.1.3.4.M.jar"/>
    <pathelement location="${basedir}/lib/xstream-1.1.2.jar"/>
  </path>

  <path id="library.log4j-1.2.12.classpath">
    <pathelement location="${basedir}/lib/log4j-1.2.12.jar"/>
  </path>

  <path id="library.jniwrap.classpath">
    <pathelement location="${basedir}/lib/winpack.jar"/>
    <pathelement location="${basedir}/lib/JNIWrap.jar"/>
  </path>

  <path id="library.database.classpath">
    <pathelement location="${basedir}/lib/hsqldb.jar"/>
    <pathelement location="${basedir}/lib/h2.jar"/>
    <pathelement location="${basedir}/lib/mysql-connector-java-3.1.13-bin.jar"/>
  </path>

  <path id="library.svn.classpath">
    <pathelement location="${basedir}/svn/lib/javasvn.jar"/>
  </path>

  <path id="library.idea.classpath">
    <pathelement location="${basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/idea.jar"/>
  </path>

  <path id="library.spring.classpath">
    <pathelement location="${basedir}/web/lib/spring.jar"/>
  </path>

  <path id="library.ant.classpath">
    <pathelement location="${basedir}/tools/ant/lib/ant-antlr.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-apache-bcel.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-apache-bsf.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-apache-log4j.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-apache-oro.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-apache-regexp.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-apache-resolver.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-commons-logging.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-commons-net.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-icontract.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-jai.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-javamail.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-jdepend.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-jmf.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-jsch.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-junit.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-launcher.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-netrexx.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-nodeps.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-starteam.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-stylebook.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-swing.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-trax.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-vaj.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-weblogic.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-xalan1.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant-xslp.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/ant.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/junit.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/xercesImpl.jar"/>
    <pathelement location="${basedir}/tools/ant/lib/xml-apis.jar"/>
  </path>

  <path id="library.idea-classpath.classpath">
    <pathelement location="${basedir}/tools/idea/lib/cglib-nodep-2.1_3.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/commons-collections.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/jh.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/oromatcher.jar"/>
    <pathelement location="${basedir}/tools/idea/lib/icons.jar"/>
  </path>

  <path id="library.maven-2.1.classpath">
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-project-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/jsch-0.1.24.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-reporting-api-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-plugin-parameter-documenter-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-core-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-settings-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/commons-cli-1.0.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-artifact-manager-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-tools-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/wagon-http-lightweight-1.0-alpha-6.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-repository-metadata-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-error-diagnostics-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-plugin-registry-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-monitor-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/wagon-file-1.0-alpha-7.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/plexus-interactivity-api-1.0-alpha-4.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/core/plexus-container-default-1.0-alpha-9.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-cli-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-plugin-api-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/wagon-provider-api-1.0-alpha-6.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-model-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-plugin-descriptor-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-artifact-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/wagon-ssh-1.0-alpha-7.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/core/plexus-utils-1.1.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-profile-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/maven-embedder-2.1-SNAPSHOT.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/doxia-sink-api-1.0-alpha-7.jar"/>
    <pathelement location="${basedir}/tools/maven-2.1/lib/wagon-ssh-external-1.0-alpha-6.jar"/>
  </path>

  <path id="library.commons-dbcp.classpath">
    <pathelement location="${basedir}/lib/commons-dbcp-1.2.1.jar"/>
    <pathelement location="${basedir}/lib/commons-pool-1.3.jar"/>
    <pathelement location="${basedir}/lib/commons-collections-3.2.jar"/>
  </path>

  <path id="library.tomcat-local.classpath">
    <pathelement location="${basedir}/tools/tomcat/common/lib/commons-el.jar"/>
    <pathelement location="${basedir}/tools/tomcat/common/lib/jasper-compiler-jdt.jar"/>
    <pathelement location="${basedir}/tools/tomcat/common/lib/jasper-compiler.jar"/>
    <pathelement location="${basedir}/tools/tomcat/common/lib/jasper-runtime.jar"/>
    <pathelement location="${basedir}/tools/tomcat/common/lib/jsp-api.jar"/>
    <pathelement location="${basedir}/tools/tomcat/common/lib/naming-factory-dbcp.jar"/>
    <pathelement location="${basedir}/tools/tomcat/common/lib/naming-factory.jar"/>
    <pathelement location="${basedir}/tools/tomcat/common/lib/naming-resources.jar"/>
    <pathelement location="${basedir}/tools/tomcat/common/lib/servlet-api.jar"/>
  </path>


  <!-- Application Server Libraries -->

  <path id="library.tomcat.classpath">
    <pathelement location="C:/tomcat-5.5.15/common/lib/commons-el.jar"/>
    <pathelement location="C:/tomcat-5.5.15/common/lib/jasper-compiler-jdt.jar"/>
    <pathelement location="C:/tomcat-5.5.15/common/lib/jasper-compiler.jar"/>
    <pathelement location="C:/tomcat-5.5.15/common/lib/jasper-runtime.jar"/>
    <pathelement location="C:/tomcat-5.5.15/common/lib/jsp-api.jar"/>
    <pathelement location="C:/tomcat-5.5.15/common/lib/naming-factory-dbcp.jar"/>
    <pathelement location="C:/tomcat-5.5.15/common/lib/naming-factory.jar"/>
    <pathelement location="C:/tomcat-5.5.15/common/lib/naming-resources.jar"/>
    <pathelement location="C:/tomcat-5.5.15/common/lib/servlet-api.jar"/>
  </path>

  <!-- Modules -->


  <!-- Module xml-rpc-wrapper -->

  <dirname property="module.xml-rpc-wrapper.basedir" file="${ant.file}"/>



  <property name="compiler.args.xml-rpc-wrapper" value="${compiler.args}"/>

  <property name="xml-rpc-wrapper.output.dir" value="${module.xml-rpc-wrapper.basedir}/xml-rpc-wrapper/classes"/>
  <property name="xml-rpc-wrapper.testoutput.dir" value="${module.xml-rpc-wrapper.basedir}/xml-rpc-wrapper/classes"/>

  <path id="xml-rpc-wrapper.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="xml-rpc-wrapper.module.classpath">
    <path refid="library.xmlrpc-2.0.classpath"/>
    <path refid="library.xstream.classpath"/>
    <pathelement location="${module.xml-rpc-wrapper.basedir}/agent/lib/commons-httpclient-3.0-rc4.jar"/>
  </path>


  <patternset id="excluded.from.module.xml-rpc-wrapper">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.xml-rpc-wrapper">
    <patternset refid="excluded.from.module.xml-rpc-wrapper"/>
  </patternset>

  <path id="xml-rpc-wrapper.module.sourcepath">
    <dirset dir="${module.xml-rpc-wrapper.basedir}/xml-rpc-wrapper">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.xml-rpc-wrapper" depends="compile.module.xml-rpc-wrapper.production,compile.module.xml-rpc-wrapper.tests" description="Compile module xml-rpc-wrapper"/>

  <target name="compile.module.xml-rpc-wrapper.production" description="Compile module xml-rpc-wrapper; production classes">
    <mkdir dir="${xml-rpc-wrapper.output.dir}"/>
    <javac2 destdir="${xml-rpc-wrapper.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.xml-rpc-wrapper}"/>
      <bootclasspath refid="xml-rpc-wrapper.module.bootclasspath"/>
      <classpath refid="xml-rpc-wrapper.module.classpath"/>
      <src refid="xml-rpc-wrapper.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.xml-rpc-wrapper"/>
    </javac2>

    <copy todir="${xml-rpc-wrapper.output.dir}">
      <fileset dir="${module.xml-rpc-wrapper.basedir}/xml-rpc-wrapper/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.xml-rpc-wrapper.tests" depends="compile.module.xml-rpc-wrapper.production" description="compile module xml-rpc-wrapper; test classes" unless="skip.tests"/>

  <target name="clean.module.xml-rpc-wrapper" description="cleanup module">
    <delete dir="${xml-rpc-wrapper.output.dir}"/>
    <delete dir="${xml-rpc-wrapper.testoutput.dir}"/>
  </target>


  <!-- Module runtime-util -->

  <dirname property="module.runtime-util.basedir" file="${ant.file}"/>



  <property name="compiler.args.runtime-util" value="${compiler.args}"/>

  <property name="runtime-util.output.dir" value="${module.runtime-util.basedir}/runtime-util/classes"/>
  <property name="runtime-util.testoutput.dir" value="${module.runtime-util.basedir}/runtime-util/classes"/>

  <path id="runtime-util.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="runtime-util.module.classpath"/>


  <patternset id="excluded.from.module.runtime-util">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.runtime-util">
    <patternset refid="excluded.from.module.runtime-util"/>
  </patternset>

  <path id="runtime-util.module.sourcepath">
    <dirset dir="${module.runtime-util.basedir}/runtime-util">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.runtime-util" depends="compile.module.runtime-util.production,compile.module.runtime-util.tests" description="Compile module runtime-util"/>

  <target name="compile.module.runtime-util.production" description="Compile module runtime-util; production classes">
    <mkdir dir="${runtime-util.output.dir}"/>
    <javac2 destdir="${runtime-util.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.runtime-util}"/>
      <bootclasspath refid="runtime-util.module.bootclasspath"/>
      <classpath refid="runtime-util.module.classpath"/>
      <src refid="runtime-util.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.runtime-util"/>
    </javac2>

    <copy todir="${runtime-util.output.dir}">
      <fileset dir="${module.runtime-util.basedir}/runtime-util/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.runtime-util.tests" depends="compile.module.runtime-util.production" description="compile module runtime-util; test classes" unless="skip.tests"/>

  <target name="clean.module.runtime-util" description="cleanup module">
    <delete dir="${runtime-util.output.dir}"/>
    <delete dir="${runtime-util.testoutput.dir}"/>
  </target>


  <!-- Module ant-runtime -->

  <dirname property="module.ant-runtime.basedir" file="${ant.file}"/>



  <property name="compiler.args.ant-runtime" value="${compiler.args}"/>

  <property name="ant-runtime.output.dir" value="${module.ant-runtime.basedir}/ant-runtime/classes"/>
  <property name="ant-runtime.testoutput.dir" value="${module.ant-runtime.basedir}/ant-runtime/classes"/>

  <path id="ant-runtime.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="ant-runtime.module.classpath">
    <path refid="library.junit.classpath"/>
    <path refid="library.ant.classpath"/>
    <pathelement location="${runtime-util.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.ant-runtime">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.ant-runtime">
    <patternset refid="excluded.from.module.ant-runtime"/>
  </patternset>

  <path id="ant-runtime.module.sourcepath">
    <dirset dir="${module.ant-runtime.basedir}/ant-runtime">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.ant-runtime" depends="compile.module.ant-runtime.production,compile.module.ant-runtime.tests" description="Compile module ant-runtime"/>

  <target name="compile.module.ant-runtime.production" depends="compile.module.runtime-util" description="Compile module ant-runtime; production classes">
    <mkdir dir="${ant-runtime.output.dir}"/>
    <javac2 destdir="${ant-runtime.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.ant-runtime}"/>
      <bootclasspath refid="ant-runtime.module.bootclasspath"/>
      <classpath refid="ant-runtime.module.classpath"/>
      <src refid="ant-runtime.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.ant-runtime"/>
    </javac2>

    <copy todir="${ant-runtime.output.dir}">
      <fileset dir="${module.ant-runtime.basedir}/ant-runtime/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.ant-runtime.tests" depends="compile.module.ant-runtime.production" description="compile module ant-runtime; test classes" unless="skip.tests"/>

  <target name="clean.module.ant-runtime" description="cleanup module">
    <delete dir="${ant-runtime.output.dir}"/>
    <delete dir="${ant-runtime.testoutput.dir}"/>
  </target>


  <!-- Module patches -->

  <dirname property="module.patches.basedir" file="${ant.file}"/>



  <property name="compiler.args.patches" value="${compiler.args}"/>

  <property name="patches.output.dir" value="${module.patches.basedir}/patches/classes"/>
  <property name="patches.testoutput.dir" value="${module.patches.basedir}/patches/classes"/>

  <path id="patches.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="patches.module.classpath"/>


  <patternset id="excluded.from.module.patches">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.patches">
    <patternset refid="excluded.from.module.patches"/>
  </patternset>

  <path id="patches.module.sourcepath">
    <dirset dir="${module.patches.basedir}/patches">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.patches" depends="compile.module.patches.production,compile.module.patches.tests" description="Compile module patches"/>

  <target name="compile.module.patches.production" description="Compile module patches; production classes">
    <mkdir dir="${patches.output.dir}"/>
    <javac2 destdir="${patches.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.patches}"/>
      <bootclasspath refid="patches.module.bootclasspath"/>
      <classpath refid="patches.module.classpath"/>
      <src refid="patches.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.patches"/>
    </javac2>

    <copy todir="${patches.output.dir}">
      <fileset dir="${module.patches.basedir}/patches/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.patches.tests" depends="compile.module.patches.production" description="compile module patches; test classes" unless="skip.tests"/>

  <target name="clean.module.patches" description="cleanup module">
    <delete dir="${patches.output.dir}"/>
    <delete dir="${patches.testoutput.dir}"/>
  </target>


  <!-- Module jdk-searcher -->

  <dirname property="module.jdk-searcher.basedir" file="${ant.file}"/>



  <property name="compiler.args.jdk-searcher" value="${compiler.args}"/>

  <property name="jdk-searcher.output.dir" value="${module.jdk-searcher.basedir}/jdk-searcher/classes"/>
  <property name="jdk-searcher.testoutput.dir" value="${module.jdk-searcher.basedir}/jdk-searcher/classes"/>

  <path id="jdk-searcher.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="jdk-searcher.module.classpath">
    <path refid="library.jniwrap.classpath"/>
  </path>


  <patternset id="excluded.from.module.jdk-searcher">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.jdk-searcher">
    <patternset refid="excluded.from.module.jdk-searcher"/>
  </patternset>

  <path id="jdk-searcher.module.sourcepath">
    <dirset dir="${module.jdk-searcher.basedir}/jdk-searcher">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.jdk-searcher" depends="compile.module.jdk-searcher.production,compile.module.jdk-searcher.tests" description="Compile module jdk-searcher"/>

  <target name="compile.module.jdk-searcher.production" description="Compile module jdk-searcher; production classes">
    <mkdir dir="${jdk-searcher.output.dir}"/>
    <javac2 destdir="${jdk-searcher.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.jdk-searcher}"/>
      <bootclasspath refid="jdk-searcher.module.bootclasspath"/>
      <classpath refid="jdk-searcher.module.classpath"/>
      <src refid="jdk-searcher.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jdk-searcher"/>
    </javac2>

    <copy todir="${jdk-searcher.output.dir}">
      <fileset dir="${module.jdk-searcher.basedir}/jdk-searcher/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.jdk-searcher.tests" depends="compile.module.jdk-searcher.production" description="compile module jdk-searcher; test classes" unless="skip.tests"/>

  <target name="clean.module.jdk-searcher" description="cleanup module">
    <delete dir="${jdk-searcher.output.dir}"/>
    <delete dir="${jdk-searcher.testoutput.dir}"/>
  </target>


  <!-- Module messages -->

  <dirname property="module.messages.basedir" file="${ant.file}"/>



  <property name="compiler.args.messages" value="${compiler.args}"/>

  <property name="messages.output.dir" value="${module.messages.basedir}/messages/classes"/>
  <property name="messages.testoutput.dir" value="${module.messages.basedir}/messages/classes"/>

  <path id="messages.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="messages.module.classpath">
    <path refid="library.xstream.classpath"/>
    <path refid="library.junit.classpath"/>
  </path>


  <patternset id="excluded.from.module.messages">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.messages">
    <patternset refid="excluded.from.module.messages"/>
  </patternset>

  <path id="messages.module.sourcepath">
    <dirset dir="${module.messages.basedir}/messages">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.messages" depends="compile.module.messages.production,compile.module.messages.tests" description="Compile module messages"/>

  <target name="compile.module.messages.production" description="Compile module messages; production classes">
    <mkdir dir="${messages.output.dir}"/>
    <javac2 destdir="${messages.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.messages}"/>
      <bootclasspath refid="messages.module.bootclasspath"/>
      <classpath refid="messages.module.classpath"/>
      <src refid="messages.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.messages"/>
    </javac2>

    <copy todir="${messages.output.dir}">
      <fileset dir="${module.messages.basedir}/messages/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.messages.tests" depends="compile.module.messages.production" description="compile module messages; test classes" unless="skip.tests"/>

  <target name="clean.module.messages" description="cleanup module">
    <delete dir="${messages.output.dir}"/>
    <delete dir="${messages.testoutput.dir}"/>
  </target>


  <!-- Module common-runtime -->

  <dirname property="module.common-runtime.basedir" file="${ant.file}"/>



  <property name="compiler.args.common-runtime" value="${compiler.args}"/>

  <property name="common-runtime.output.dir" value="${module.common-runtime.basedir}/common-runtime/classes"/>
  <property name="common-runtime.testoutput.dir" value="${module.common-runtime.basedir}/common-runtime/classes"/>

  <path id="common-runtime.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="common-runtime.module.classpath">
    <path refid="library.xmlrpc-2.0.classpath"/>
    <path refid="library.xstream.classpath"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.common-runtime">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.common-runtime">
    <patternset refid="excluded.from.module.common-runtime"/>
  </patternset>

  <path id="common-runtime.module.sourcepath">
    <dirset dir="${module.common-runtime.basedir}/common-runtime">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.common-runtime" depends="compile.module.common-runtime.production,compile.module.common-runtime.tests" description="Compile module common-runtime"/>

  <target name="compile.module.common-runtime.production" depends="compile.module.runtime-util,compile.module.xml-rpc-wrapper,compile.module.messages" description="Compile module common-runtime; production classes">
    <mkdir dir="${common-runtime.output.dir}"/>
    <javac2 destdir="${common-runtime.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.common-runtime}"/>
      <bootclasspath refid="common-runtime.module.bootclasspath"/>
      <classpath refid="common-runtime.module.classpath"/>
      <src refid="common-runtime.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.common-runtime"/>
    </javac2>

    <copy todir="${common-runtime.output.dir}">
      <fileset dir="${module.common-runtime.basedir}/common-runtime/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.common-runtime.tests" depends="compile.module.common-runtime.production" description="compile module common-runtime; test classes" unless="skip.tests"/>

  <target name="clean.module.common-runtime" description="cleanup module">
    <delete dir="${common-runtime.output.dir}"/>
    <delete dir="${common-runtime.testoutput.dir}"/>
  </target>


  <!-- Module launcher -->

  <dirname property="module.launcher.basedir" file="${ant.file}"/>



  <property name="compiler.args.launcher" value="${compiler.args}"/>

  <property name="launcher.output.dir" value="${module.launcher.basedir}/launcher/classes"/>
  <property name="launcher.testoutput.dir" value="${module.launcher.basedir}/launcher/classes"/>

  <path id="launcher.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="launcher.module.classpath">
    <pathelement location="${common-runtime.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.launcher">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.launcher">
    <patternset refid="excluded.from.module.launcher"/>
  </patternset>

  <path id="launcher.module.sourcepath">
    <dirset dir="${module.launcher.basedir}/launcher">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.launcher" depends="compile.module.launcher.production,compile.module.launcher.tests" description="Compile module launcher"/>

  <target name="compile.module.launcher.production" depends="compile.module.common-runtime" description="Compile module launcher; production classes">
    <mkdir dir="${launcher.output.dir}"/>
    <javac2 destdir="${launcher.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.launcher}"/>
      <bootclasspath refid="launcher.module.bootclasspath"/>
      <classpath refid="launcher.module.classpath"/>
      <src refid="launcher.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.launcher"/>
    </javac2>

    <copy todir="${launcher.output.dir}">
      <fileset dir="${module.launcher.basedir}/launcher/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.launcher.tests" depends="compile.module.launcher.production" description="compile module launcher; test classes" unless="skip.tests"/>

  <target name="clean.module.launcher" description="cleanup module">
    <delete dir="${launcher.output.dir}"/>
    <delete dir="${launcher.testoutput.dir}"/>
  </target>


  <!-- Module maven-runtime -->

  <dirname property="module.maven-runtime.basedir" file="${ant.file}"/>



  <property name="compiler.args.maven-runtime" value="${compiler.args}"/>

  <property name="maven-runtime.output.dir" value="${module.maven-runtime.basedir}/maven-runtime/classes"/>
  <property name="maven-runtime.testoutput.dir" value="${module.maven-runtime.basedir}/maven-runtime/classes"/>

  <path id="maven-runtime.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="maven-runtime.module.classpath">
    <path refid="library.maven-2.1.classpath"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <path refid="library.jdom.classpath"/>
  </path>


  <patternset id="excluded.from.module.maven-runtime">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.maven-runtime">
    <patternset refid="excluded.from.module.maven-runtime"/>
  </patternset>

  <path id="maven-runtime.module.sourcepath">
    <dirset dir="${module.maven-runtime.basedir}/maven-runtime">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.maven-runtime" depends="compile.module.maven-runtime.production,compile.module.maven-runtime.tests" description="Compile module maven-runtime"/>

  <target name="compile.module.maven-runtime.production" depends="compile.module.runtime-util,compile.module.messages,compile.module.common-runtime" description="Compile module maven-runtime; production classes">
    <mkdir dir="${maven-runtime.output.dir}"/>
    <javac2 destdir="${maven-runtime.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.maven-runtime}"/>
      <bootclasspath refid="maven-runtime.module.bootclasspath"/>
      <classpath refid="maven-runtime.module.classpath"/>
      <src refid="maven-runtime.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.maven-runtime"/>
    </javac2>

    <copy todir="${maven-runtime.output.dir}">
      <fileset dir="${module.maven-runtime.basedir}/maven-runtime/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.maven-runtime.tests" depends="compile.module.maven-runtime.production" description="compile module maven-runtime; test classes" unless="skip.tests"/>

  <target name="clean.module.maven-runtime" description="cleanup module">
    <delete dir="${maven-runtime.output.dir}"/>
    <delete dir="${maven-runtime.testoutput.dir}"/>
  </target>


  <!-- Module ant-server-logging -->

  <dirname property="module.ant-server-logging.basedir" file="${ant.file}"/>



  <property name="compiler.args.ant-server-logging" value="${compiler.args}"/>

  <property name="ant-server-logging.output.dir" value="${module.ant-server-logging.basedir}/ant-server-logging/classes"/>
  <property name="ant-server-logging.testoutput.dir" value="${module.ant-server-logging.basedir}/ant-server-logging/classes"/>

  <path id="ant-server-logging.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="ant-server-logging.module.classpath">
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${ant-runtime.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <path refid="library.ant.classpath"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.xstream.classpath"/>
  </path>


  <patternset id="excluded.from.module.ant-server-logging">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.ant-server-logging">
    <patternset refid="excluded.from.module.ant-server-logging"/>
  </patternset>

  <path id="ant-server-logging.module.sourcepath">
    <dirset dir="${module.ant-server-logging.basedir}/ant-server-logging">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.ant-server-logging" depends="compile.module.ant-server-logging.production,compile.module.ant-server-logging.tests" description="Compile module ant-server-logging"/>

  <target name="compile.module.ant-server-logging.production" depends="compile.module.runtime-util,compile.module.ant-runtime,compile.module.messages,compile.module.common-runtime" description="Compile module ant-server-logging; production classes">
    <mkdir dir="${ant-server-logging.output.dir}"/>
    <javac2 destdir="${ant-server-logging.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.ant-server-logging}"/>
      <bootclasspath refid="ant-server-logging.module.bootclasspath"/>
      <classpath refid="ant-server-logging.module.classpath"/>
      <src refid="ant-server-logging.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.ant-server-logging"/>
    </javac2>

    <copy todir="${ant-server-logging.output.dir}">
      <fileset dir="${module.ant-server-logging.basedir}/ant-server-logging/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.ant-server-logging.tests" depends="compile.module.ant-server-logging.production" description="compile module ant-server-logging; test classes" unless="skip.tests"/>

  <target name="clean.module.ant-server-logging" description="cleanup module">
    <delete dir="${ant-server-logging.output.dir}"/>
    <delete dir="${ant-server-logging.testoutput.dir}"/>
  </target>


  <!-- Module utils -->

  <dirname property="module.utils.basedir" file="${ant.file}"/>



  <property name="compiler.args.utils" value="${compiler.args}"/>

  <property name="utils.output.dir" value="${module.utils.basedir}/utils/classes"/>
  <property name="utils.testoutput.dir" value="${module.utils.basedir}/utils/classes"/>

  <path id="utils.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="utils.module.classpath">
    <path refid="library.xstream.classpath"/>
    <pathelement location="${messages.output.dir}"/>
    <path refid="library.idea.classpath"/>
  </path>


  <patternset id="excluded.from.module.utils">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.utils">
    <patternset refid="excluded.from.module.utils"/>
  </patternset>

  <path id="utils.module.sourcepath">
    <dirset dir="${module.utils.basedir}/utils">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.utils" depends="compile.module.utils.production,compile.module.utils.tests" description="Compile module utils"/>

  <target name="compile.module.utils.production" depends="compile.module.messages" description="Compile module utils; production classes">
    <mkdir dir="${utils.output.dir}"/>
    <javac2 destdir="${utils.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.utils}"/>
      <bootclasspath refid="utils.module.bootclasspath"/>
      <classpath refid="utils.module.classpath"/>
      <src refid="utils.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.utils"/>
    </javac2>

    <copy todir="${utils.output.dir}">
      <fileset dir="${module.utils.basedir}/utils/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.utils.tests" depends="compile.module.utils.production" description="compile module utils; test classes" unless="skip.tests"/>

  <target name="clean.module.utils" description="cleanup module">
    <delete dir="${utils.output.dir}"/>
    <delete dir="${utils.testoutput.dir}"/>
  </target>


  <!-- Module patches-impl -->

  <dirname property="module.patches-impl.basedir" file="${ant.file}"/>



  <property name="compiler.args.patches-impl" value="${compiler.args}"/>

  <property name="patches-impl.output.dir" value="${module.patches-impl.basedir}/patches-impl/classes"/>
  <property name="patches-impl.testoutput.dir" value="${module.patches-impl.basedir}/patches-impl/classes"/>

  <path id="patches-impl.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="patches-impl.module.classpath">
    <pathelement location="${patches.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${utils.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.patches-impl">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.patches-impl">
    <patternset refid="excluded.from.module.patches-impl"/>
  </patternset>

  <path id="patches-impl.module.sourcepath">
    <dirset dir="${module.patches-impl.basedir}/patches-impl">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.patches-impl" depends="compile.module.patches-impl.production,compile.module.patches-impl.tests" description="Compile module patches-impl"/>

  <target name="compile.module.patches-impl.production" depends="compile.module.patches,compile.module.utils" description="Compile module patches-impl; production classes">
    <mkdir dir="${patches-impl.output.dir}"/>
    <javac2 destdir="${patches-impl.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.patches-impl}"/>
      <bootclasspath refid="patches-impl.module.bootclasspath"/>
      <classpath refid="patches-impl.module.classpath"/>
      <src refid="patches-impl.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.patches-impl"/>
    </javac2>

    <copy todir="${patches-impl.output.dir}">
      <fileset dir="${module.patches-impl.basedir}/patches-impl/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.patches-impl.tests" depends="compile.module.patches-impl.production" description="compile module patches-impl; test classes" unless="skip.tests"/>

  <target name="clean.module.patches-impl" description="cleanup module">
    <delete dir="${patches-impl.output.dir}"/>
    <delete dir="${patches-impl.testoutput.dir}"/>
  </target>


  <!-- Module server-model -->

  <dirname property="module.server-model.basedir" file="${ant.file}"/>



  <property name="compiler.args.server-model" value="${compiler.args}"/>

  <property name="server-model.output.dir" value="${module.server-model.basedir}/server-model/classes"/>
  <property name="server-model.testoutput.dir" value="${module.server-model.basedir}/server-model/classes"/>

  <path id="server-model.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="server-model.module.classpath">
    <pathelement location="${messages.output.dir}"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${module.server-model.basedir}/lib/annotations.jar"/>
  </path>


  <patternset id="excluded.from.module.server-model">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.server-model">
    <patternset refid="excluded.from.module.server-model"/>
  </patternset>

  <path id="server-model.module.sourcepath">
    <dirset dir="${module.server-model.basedir}/server-model">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.server-model" depends="compile.module.server-model.production,compile.module.server-model.tests" description="Compile module server-model"/>

  <target name="compile.module.server-model.production" depends="compile.module.messages" description="Compile module server-model; production classes">
    <mkdir dir="${server-model.output.dir}"/>
    <javac2 destdir="${server-model.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.server-model}"/>
      <bootclasspath refid="server-model.module.bootclasspath"/>
      <classpath refid="server-model.module.classpath"/>
      <src refid="server-model.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.server-model"/>
    </javac2>

    <copy todir="${server-model.output.dir}">
      <fileset dir="${module.server-model.basedir}/server-model/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.server-model.tests" depends="compile.module.server-model.production" description="compile module server-model; test classes" unless="skip.tests"/>

  <target name="clean.module.server-model" description="cleanup module">
    <delete dir="${server-model.output.dir}"/>
    <delete dir="${server-model.testoutput.dir}"/>
  </target>


  <!-- Module remote-server-proxy -->

  <dirname property="module.remote-server-proxy.basedir" file="${ant.file}"/>



  <property name="compiler.args.remote-server-proxy" value="${compiler.args}"/>

  <property name="remote-server-proxy.output.dir" value="${module.remote-server-proxy.basedir}/remote-server-proxy/classes"/>
  <property name="remote-server-proxy.testoutput.dir" value="${module.remote-server-proxy.basedir}/remote-server-proxy/classes"/>

  <path id="remote-server-proxy.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="remote-server-proxy.module.classpath">
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <path refid="library.xstream.classpath"/>
    <pathelement location="${utils.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.remote-server-proxy">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.remote-server-proxy">
    <patternset refid="excluded.from.module.remote-server-proxy"/>
  </patternset>

  <path id="remote-server-proxy.module.sourcepath">
    <dirset dir="${module.remote-server-proxy.basedir}/remote-server-proxy">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.remote-server-proxy" depends="compile.module.remote-server-proxy.production,compile.module.remote-server-proxy.tests" description="Compile module remote-server-proxy"/>

  <target name="compile.module.remote-server-proxy.production" depends="compile.module.server-model,compile.module.xml-rpc-wrapper,compile.module.utils,compile.module.messages" description="Compile module remote-server-proxy; production classes">
    <mkdir dir="${remote-server-proxy.output.dir}"/>
    <javac2 destdir="${remote-server-proxy.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.remote-server-proxy}"/>
      <bootclasspath refid="remote-server-proxy.module.bootclasspath"/>
      <classpath refid="remote-server-proxy.module.classpath"/>
      <src refid="remote-server-proxy.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.remote-server-proxy"/>
    </javac2>

    <copy todir="${remote-server-proxy.output.dir}">
      <fileset dir="${module.remote-server-proxy.basedir}/remote-server-proxy/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.remote-server-proxy.tests" depends="compile.module.remote-server-proxy.production" description="compile module remote-server-proxy; test classes" unless="skip.tests"/>

  <target name="clean.module.remote-server-proxy" description="cleanup module">
    <delete dir="${remote-server-proxy.output.dir}"/>
    <delete dir="${remote-server-proxy.testoutput.dir}"/>
  </target>


  <!-- Module build-server4idea_sources -->

  <dirname property="module.build-server4idea_sources.basedir" file="${ant.file}"/>



  <property name="compiler.args.build-server4idea_sources" value="${compiler.args}"/>

  <property name="build-server4idea_sources.output.dir" value="${module.build-server4idea_sources.basedir}/build-server4idea/classes"/>
  <property name="build-server4idea_sources.testoutput.dir" value="${module.build-server4idea_sources.basedir}/build-server4idea/classes"/>

  <path id="build-server4idea_sources.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="build-server4idea_sources.module.classpath">
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${remote-server-proxy.output.dir}"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.idea-classpath.classpath"/>
    <pathelement location="${module.build-server4idea_sources.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${patches-impl.output.dir}"/>
    <pathelement location="${patches.output.dir}"/>
    <path refid="library.commons-beanutils-core.classpath"/>
    <pathelement location="${module.build-server4idea_sources.basedir}/build-server4idea/lib/commons-httpclient-3.0-rc4.jar"/>
    <path refid="library.picocontainer.classpath"/>
    <pathelement location="${module.build-server4idea_sources.basedir}/build-server4idea/lib/forms_rt.jar"/>
    <pathelement location="${utils.output.dir}"/>
    <path refid="library.xstream.classpath"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <pathelement location="${module.build-server4idea_sources.basedir}/tools/idea/lib/emma.jar"/>
  </path>


  <patternset id="excluded.from.module.build-server4idea_sources">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.build-server4idea_sources">
    <patternset refid="excluded.from.module.build-server4idea_sources"/>
  </patternset>

  <path id="build-server4idea_sources.module.sourcepath">
    <dirset dir="${module.build-server4idea_sources.basedir}/build-server4idea/resources">
      <include name="src"/>
    </dirset>
    <dirset dir="${module.build-server4idea_sources.basedir}/build-server4idea">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.build-server4idea_sources" depends="compile.module.build-server4idea_sources.production,compile.module.build-server4idea_sources.tests" description="Compile module build-server4idea_sources"/>

  <target name="compile.module.build-server4idea_sources.production" depends="compile.module.server-model,compile.module.patches,compile.module.xml-rpc-wrapper,compile.module.utils,compile.module.remote-server-proxy,compile.module.messages,compile.module.patches-impl" description="Compile module build-server4idea_sources; production classes">
    <mkdir dir="${build-server4idea_sources.output.dir}"/>
    <javac2 destdir="${build-server4idea_sources.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.build-server4idea_sources}"/>
      <bootclasspath refid="build-server4idea_sources.module.bootclasspath"/>
      <classpath refid="build-server4idea_sources.module.classpath"/>
      <src refid="build-server4idea_sources.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.build-server4idea_sources"/>
    </javac2>

    <copy todir="${build-server4idea_sources.output.dir}">
      <fileset dir="${module.build-server4idea_sources.basedir}/build-server4idea/resources/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.build-server4idea_sources.basedir}/build-server4idea/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.build-server4idea_sources.tests" depends="compile.module.build-server4idea_sources.production" description="compile module build-server4idea_sources; test classes" unless="skip.tests"/>

  <target name="clean.module.build-server4idea_sources" description="cleanup module">
    <delete dir="${build-server4idea_sources.output.dir}"/>
    <delete dir="${build-server4idea_sources.testoutput.dir}"/>
  </target>


  <!-- Module server-logging -->

  <dirname property="module.server-logging.basedir" file="${ant.file}"/>



  <property name="compiler.args.server-logging" value="${compiler.args}"/>

  <property name="server-logging.output.dir" value="${module.server-logging.basedir}/server-logging/classes"/>
  <property name="server-logging.testoutput.dir" value="${module.server-logging.basedir}/server-logging/classes"/>

  <path id="server-logging.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="server-logging.module.classpath">
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${common-runtime.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.server-logging">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.server-logging">
    <patternset refid="excluded.from.module.server-logging"/>
  </patternset>

  <path id="server-logging.module.sourcepath">
    <dirset dir="${module.server-logging.basedir}/server-logging">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.server-logging" depends="compile.module.server-logging.production,compile.module.server-logging.tests" description="Compile module server-logging"/>

  <target name="compile.module.server-logging.production" depends="compile.module.runtime-util,compile.module.messages,compile.module.common-runtime" description="Compile module server-logging; production classes">
    <mkdir dir="${server-logging.output.dir}"/>
    <javac2 destdir="${server-logging.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.server-logging}"/>
      <bootclasspath refid="server-logging.module.bootclasspath"/>
      <classpath refid="server-logging.module.classpath"/>
      <src refid="server-logging.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.server-logging"/>
    </javac2>

    <copy todir="${server-logging.output.dir}">
      <fileset dir="${module.server-logging.basedir}/server-logging/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.server-logging.tests" depends="compile.module.server-logging.production" description="compile module server-logging; test classes" unless="skip.tests"/>

  <target name="clean.module.server-logging" description="cleanup module">
    <delete dir="${server-logging.output.dir}"/>
    <delete dir="${server-logging.testoutput.dir}"/>
  </target>


  <!-- Module common -->

  <dirname property="module.common.basedir" file="${ant.file}"/>



  <property name="compiler.args.common" value="${compiler.args}"/>

  <property name="common.output.dir" value="${module.common.basedir}/common/classes"/>
  <property name="common.testoutput.dir" value="${module.common.basedir}/common/classes"/>

  <path id="common.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="common.module.classpath">
    <path refid="library.junit.classpath"/>
    <path refid="library.xstream.classpath"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <path refid="library.log4j-1.2.12.classpath"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${utils.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.common">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.common">
    <patternset refid="excluded.from.module.common"/>
  </patternset>

  <path id="common.module.sourcepath">
    <dirset dir="${module.common.basedir}/common">
      <include name="src"/>
    </dirset>
  </path>

  <path id="common.module.test.sourcepath">
    <dirset dir="${module.common.basedir}/common">
      <include name="testSource"/>
    </dirset>
  </path>


  <target name="compile.module.common" depends="compile.module.common.production,compile.module.common.tests" description="Compile module common"/>

  <target name="compile.module.common.production" depends="compile.module.runtime-util,compile.module.utils,compile.module.messages,compile.module.common-runtime" description="Compile module common; production classes">
    <mkdir dir="${common.output.dir}"/>
    <javac2 destdir="${common.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.common}"/>
      <bootclasspath refid="common.module.bootclasspath"/>
      <classpath refid="common.module.classpath"/>
      <src refid="common.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.common"/>
    </javac2>

    <copy todir="${common.output.dir}">
      <fileset dir="${module.common.basedir}/common/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.common.tests" depends="compile.module.common.production" description="compile module common; test classes" unless="skip.tests">
    <mkdir dir="${common.testoutput.dir}"/>
    <javac2 destdir="${common.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.common}"/>
      <classpath refid="common.module.classpath"/>
      <classpath location="${common.output.dir}"/>
      <src refid="common.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.common"/>
    </javac2>

    <copy todir="${common.testoutput.dir}">
      <fileset dir="${module.common.basedir}/common/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.common" description="cleanup module">
    <delete dir="${common.output.dir}"/>
    <delete dir="${common.testoutput.dir}"/>
  </target>


  <!-- Module agent -->

  <dirname property="module.agent.basedir" file="${ant.file}"/>



  <property name="compiler.args.agent" value="${compiler.args}"/>

  <property name="agent.output.dir" value="${module.agent.basedir}/agent/classes"/>
  <property name="agent.testoutput.dir" value="${module.agent.basedir}/agent/classes"/>

  <path id="agent.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="agent.module.classpath">
    <pathelement location="${module.agent.basedir}/agent/lib/commons-httpclient-3.0-rc4.jar"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <path refid="library.log4j-1.2.12.classpath"/>
    <path refid="library.xstream.classpath"/>
    <path refid="library.commons-beanutils-core.classpath"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.agent.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.agent.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.agent.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.agent.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.agent.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.agent.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.agent.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.agent.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.agent.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.jniwrap.classpath"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
    <pathelement location="${patches-impl.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${patches.output.dir}"/>
    <path refid="library.picocontainer.classpath"/>
    <pathelement location="${utils.output.dir}"/>
    <pathelement location="${server-logging.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.agent">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.agent">
    <patternset refid="excluded.from.module.agent"/>
  </patternset>

  <path id="agent.module.sourcepath">
    <dirset dir="${module.agent.basedir}/agent">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.agent" depends="compile.module.agent.production,compile.module.agent.tests" description="Compile module agent"/>

  <target name="compile.module.agent.production" depends="compile.module.common,compile.module.runtime-util,compile.module.patches,compile.module.server-logging,compile.module.xml-rpc-wrapper,compile.module.utils,compile.module.messages,compile.module.common-runtime,compile.module.patches-impl" description="Compile module agent; production classes">
    <mkdir dir="${agent.output.dir}"/>
    <javac2 destdir="${agent.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.agent}"/>
      <bootclasspath refid="agent.module.bootclasspath"/>
      <classpath refid="agent.module.classpath"/>
      <src refid="agent.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.agent"/>
    </javac2>

    <copy todir="${agent.output.dir}">
      <fileset dir="${module.agent.basedir}/agent/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.agent.tests" depends="compile.module.agent.production" description="compile module agent; test classes" unless="skip.tests"/>

  <target name="clean.module.agent" description="cleanup module">
    <delete dir="${agent.output.dir}"/>
    <delete dir="${agent.testoutput.dir}"/>
  </target>


  <!-- Module ant-runner -->

  <dirname property="module.ant-runner.basedir" file="${ant.file}"/>



  <property name="compiler.args.ant-runner" value="${compiler.args}"/>

  <property name="ant-runner.output.dir" value="${module.ant-runner.basedir}/ant-runner/classes"/>
  <property name="ant-runner.testoutput.dir" value="${module.ant-runner.basedir}/ant-runner/classes"/>

  <path id="ant-runner.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="ant-runner.module.classpath">
    <pathelement location="${agent.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.ant-runner.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.ant-runner.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.ant-runner.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.ant-runner.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.ant-runner.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.ant-runner.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.ant-runner.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.ant-runner.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.ant-runner.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${ant-runtime.output.dir}"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <path refid="library.xstream.classpath"/>
    <path refid="library.picocontainer.classpath"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${ant-server-logging.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <path refid="library.ant.classpath"/>
    <pathelement location="${utils.output.dir}"/>
    <pathelement location="${server-logging.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.ant-runner">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.ant-runner">
    <patternset refid="excluded.from.module.ant-runner"/>
  </patternset>

  <path id="ant-runner.module.sourcepath">
    <dirset dir="${module.ant-runner.basedir}/ant-runner">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.ant-runner" depends="compile.module.ant-runner.production,compile.module.ant-runner.tests" description="Compile module ant-runner"/>

  <target name="compile.module.ant-runner.production" depends="compile.module.common,compile.module.runtime-util,compile.module.server-logging,compile.module.xml-rpc-wrapper,compile.module.ant-runtime,compile.module.utils,compile.module.agent,compile.module.messages,compile.module.ant-server-logging,compile.module.common-runtime" description="Compile module ant-runner; production classes">
    <mkdir dir="${ant-runner.output.dir}"/>
    <javac2 destdir="${ant-runner.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.ant-runner}"/>
      <bootclasspath refid="ant-runner.module.bootclasspath"/>
      <classpath refid="ant-runner.module.classpath"/>
      <src refid="ant-runner.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.ant-runner"/>
    </javac2>

    <copy todir="${ant-runner.output.dir}">
      <fileset dir="${module.ant-runner.basedir}/ant-runner/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.ant-runner.tests" depends="compile.module.ant-runner.production" description="compile module ant-runner; test classes" unless="skip.tests"/>

  <target name="clean.module.ant-runner" description="cleanup module">
    <delete dir="${ant-runner.output.dir}"/>
    <delete dir="${ant-runner.testoutput.dir}"/>
  </target>


  <!-- Module idea-runner -->

  <dirname property="module.idea-runner.basedir" file="${ant.file}"/>



  <property name="compiler.args.idea-runner" value="${compiler.args}"/>

  <property name="idea-runner.output.dir" value="${module.idea-runner.basedir}/idea-runner/classes"/>
  <property name="idea-runner.testoutput.dir" value="${module.idea-runner.basedir}/idea-runner/classes"/>

  <path id="idea-runner.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="idea-runner.module.classpath">
    <path refid="library.ant.classpath"/>
    <pathelement location="${ant-runner.output.dir}"/>
    <pathelement location="${agent.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.idea-runner.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.idea-runner.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.idea-runner.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.idea-runner.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.idea-runner.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.idea-runner.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.idea-runner.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.idea-runner.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.idea-runner.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${ant-runtime.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${module.idea-runner.basedir}/idea-runner/lib/buildGenerator.jar"/>
    <pathelement location="${module.idea-runner.basedir}/idea-runner/lib/javac2.jar"/>
    <pathelement location="${module.idea-runner.basedir}/idea-runner/lib/bd-ant-extensions.jar"/>
    <pathelement location="${module.idea-runner.basedir}/idea-runner/lib/jgoodies-forms.jar"/>
    <pathelement location="${module.idea-runner.basedir}/idea-runner/lib/asm-commons-2.1.jar"/>
    <pathelement location="${module.idea-runner.basedir}/idea-runner/lib/asm-2.1.jar"/>
  </path>


  <patternset id="excluded.from.module.idea-runner">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.idea-runner">
    <patternset refid="excluded.from.module.idea-runner"/>
  </patternset>

  <path id="idea-runner.module.sourcepath">
    <dirset dir="${module.idea-runner.basedir}/idea-runner">
      <include name="antTask"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.idea-runner" depends="compile.module.idea-runner.production,compile.module.idea-runner.tests" description="Compile module idea-runner"/>

  <target name="compile.module.idea-runner.production" depends="compile.module.common,compile.module.runtime-util,compile.module.ant-runtime,compile.module.ant-runner,compile.module.agent" description="Compile module idea-runner; production classes">
    <mkdir dir="${idea-runner.output.dir}"/>
    <javac2 destdir="${idea-runner.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.idea-runner}"/>
      <bootclasspath refid="idea-runner.module.bootclasspath"/>
      <classpath refid="idea-runner.module.classpath"/>
      <src refid="idea-runner.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.idea-runner"/>
    </javac2>

    <copy todir="${idea-runner.output.dir}">
      <fileset dir="${module.idea-runner.basedir}/idea-runner/antTask">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.idea-runner.basedir}/idea-runner/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.idea-runner.tests" depends="compile.module.idea-runner.production" description="compile module idea-runner; test classes" unless="skip.tests"/>

  <target name="clean.module.idea-runner" description="cleanup module">
    <delete dir="${idea-runner.output.dir}"/>
    <delete dir="${idea-runner.testoutput.dir}"/>
  </target>


  <!-- Module DotNetCommon-runtime -->

  <dirname property="module.dotnetcommon-runtime.basedir" file="${ant.file}"/>



  <property name="compiler.args.dotnetcommon-runtime" value="${compiler.args}"/>

  <property name="dotnetcommon-runtime.output.dir" value="${module.dotnetcommon-runtime.basedir}/DotNetCommon-runtime/classes"/>
  <property name="dotnetcommon-runtime.testoutput.dir" value="${module.dotnetcommon-runtime.basedir}/DotNetCommon-runtime/classes"/>

  <path id="dotnetcommon-runtime.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="dotnetcommon-runtime.module.classpath">
    <pathelement location="${agent.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.dotnetcommon-runtime.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.dotnetcommon-runtime.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.dotnetcommon-runtime.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.dotnetcommon-runtime.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.dotnetcommon-runtime.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.dotnetcommon-runtime.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.dotnetcommon-runtime.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.dotnetcommon-runtime.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.dotnetcommon-runtime.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${runtime-util.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.dotnetcommon-runtime">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.dotnetcommon-runtime">
    <patternset refid="excluded.from.module.dotnetcommon-runtime"/>
  </patternset>

  <path id="dotnetcommon-runtime.module.sourcepath">
    <dirset dir="${module.dotnetcommon-runtime.basedir}/DotNetCommon-runtime">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.dotnetcommon-runtime" depends="compile.module.dotnetcommon-runtime.production,compile.module.dotnetcommon-runtime.tests" description="Compile module DotNetCommon-runtime"/>

  <target name="compile.module.dotnetcommon-runtime.production" depends="compile.module.common,compile.module.runtime-util,compile.module.agent" description="Compile module DotNetCommon-runtime; production classes">
    <mkdir dir="${dotnetcommon-runtime.output.dir}"/>
    <javac2 destdir="${dotnetcommon-runtime.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.dotnetcommon-runtime}"/>
      <bootclasspath refid="dotnetcommon-runtime.module.bootclasspath"/>
      <classpath refid="dotnetcommon-runtime.module.classpath"/>
      <src refid="dotnetcommon-runtime.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.dotnetcommon-runtime"/>
    </javac2>

    <copy todir="${dotnetcommon-runtime.output.dir}">
      <fileset dir="${module.dotnetcommon-runtime.basedir}/DotNetCommon-runtime/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.dotnetcommon-runtime.tests" depends="compile.module.dotnetcommon-runtime.production" description="compile module DotNetCommon-runtime; test classes" unless="skip.tests"/>

  <target name="clean.module.dotnetcommon-runtime" description="cleanup module">
    <delete dir="${dotnetcommon-runtime.output.dir}"/>
    <delete dir="${dotnetcommon-runtime.testoutput.dir}"/>
  </target>


  <!-- Module coverage-agent -->

  <dirname property="module.coverage-agent.basedir" file="${ant.file}"/>



  <property name="compiler.args.coverage-agent" value="${compiler.args}"/>

  <property name="coverage-agent.output.dir" value="${module.coverage-agent.basedir}/coverage-agent/classes"/>
  <property name="coverage-agent.testoutput.dir" value="${module.coverage-agent.basedir}/coverage-agent/classes"/>

  <path id="coverage-agent.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="coverage-agent.module.classpath">
    <pathelement location="${ant-runtime.output.dir}"/>
    <path refid="library.ant.classpath"/>
    <pathelement location="${module.coverage-agent.basedir}/coverage-agent/lib/emma.jar"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.coverage-agent.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.coverage-agent.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.coverage-agent.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.coverage-agent.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.coverage-agent.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.coverage-agent.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.coverage-agent.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.coverage-agent.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.coverage-agent.basedir}/tools/idea/lib/idea.jar"/>
  </path>


  <patternset id="excluded.from.module.coverage-agent">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.coverage-agent">
    <patternset refid="excluded.from.module.coverage-agent"/>
  </patternset>

  <path id="coverage-agent.module.sourcepath">
    <dirset dir="${module.coverage-agent.basedir}/coverage-agent">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.coverage-agent" depends="compile.module.coverage-agent.production,compile.module.coverage-agent.tests" description="Compile module coverage-agent"/>

  <target name="compile.module.coverage-agent.production" depends="compile.module.common,compile.module.runtime-util,compile.module.ant-runtime" description="Compile module coverage-agent; production classes">
    <mkdir dir="${coverage-agent.output.dir}"/>
    <javac2 destdir="${coverage-agent.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.coverage-agent}"/>
      <bootclasspath refid="coverage-agent.module.bootclasspath"/>
      <classpath refid="coverage-agent.module.classpath"/>
      <src refid="coverage-agent.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.coverage-agent"/>
    </javac2>

    <copy todir="${coverage-agent.output.dir}">
      <fileset dir="${module.coverage-agent.basedir}/coverage-agent/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.coverage-agent.tests" depends="compile.module.coverage-agent.production" description="compile module coverage-agent; test classes" unless="skip.tests"/>

  <target name="clean.module.coverage-agent" description="cleanup module">
    <delete dir="${coverage-agent.output.dir}"/>
    <delete dir="${coverage-agent.testoutput.dir}"/>
  </target>


  <!-- Module MSBuild-runner -->

  <dirname property="module.msbuild-runner.basedir" file="${ant.file}"/>



  <property name="compiler.args.msbuild-runner" value="${compiler.args}"/>

  <property name="msbuild-runner.output.dir" value="${module.msbuild-runner.basedir}/MSBuild-runner/classes"/>
  <property name="msbuild-runner.testoutput.dir" value="${module.msbuild-runner.basedir}/MSBuild-runner/classes"/>

  <path id="msbuild-runner.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="msbuild-runner.module.classpath">
    <pathelement location="${agent.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.msbuild-runner.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.msbuild-runner.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.msbuild-runner.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.msbuild-runner.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.msbuild-runner.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.msbuild-runner.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.msbuild-runner.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.msbuild-runner.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.msbuild-runner.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${dotnetcommon-runtime.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.msbuild-runner">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.msbuild-runner">
    <patternset refid="excluded.from.module.msbuild-runner"/>
  </patternset>

  <path id="msbuild-runner.module.sourcepath">
    <dirset dir="${module.msbuild-runner.basedir}/MSBuild-runner">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.msbuild-runner" depends="compile.module.msbuild-runner.production,compile.module.msbuild-runner.tests" description="Compile module MSBuild-runner"/>

  <target name="compile.module.msbuild-runner.production" depends="compile.module.common,compile.module.runtime-util,compile.module.dotnetcommon-runtime,compile.module.agent" description="Compile module MSBuild-runner; production classes">
    <mkdir dir="${msbuild-runner.output.dir}"/>
    <javac2 destdir="${msbuild-runner.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.msbuild-runner}"/>
      <bootclasspath refid="msbuild-runner.module.bootclasspath"/>
      <classpath refid="msbuild-runner.module.classpath"/>
      <src refid="msbuild-runner.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.msbuild-runner"/>
    </javac2>

    <copy todir="${msbuild-runner.output.dir}">
      <fileset dir="${module.msbuild-runner.basedir}/MSBuild-runner/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.msbuild-runner.tests" depends="compile.module.msbuild-runner.production" description="compile module MSBuild-runner; test classes" unless="skip.tests"/>

  <target name="clean.module.msbuild-runner" description="cleanup module">
    <delete dir="${msbuild-runner.output.dir}"/>
    <delete dir="${msbuild-runner.testoutput.dir}"/>
  </target>


  <!-- Module Solution2005-runner -->

  <dirname property="module.solution2005-runner.basedir" file="${ant.file}"/>



  <property name="compiler.args.solution2005-runner" value="${compiler.args}"/>

  <property name="solution2005-runner.output.dir" value="${module.solution2005-runner.basedir}/Solution2005-runner/classes"/>
  <property name="solution2005-runner.testoutput.dir" value="${module.solution2005-runner.basedir}/Solution2005-runner/classes"/>

  <path id="solution2005-runner.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="solution2005-runner.module.classpath">
    <pathelement location="${agent.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.solution2005-runner.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.solution2005-runner.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.solution2005-runner.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.solution2005-runner.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.solution2005-runner.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.solution2005-runner.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.solution2005-runner.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.solution2005-runner.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.solution2005-runner.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <path refid="library.log4j-1.2.12.classpath"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <pathelement location="${msbuild-runner.output.dir}"/>
    <pathelement location="${dotnetcommon-runtime.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.solution2005-runner">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.solution2005-runner">
    <patternset refid="excluded.from.module.solution2005-runner"/>
  </patternset>

  <path id="solution2005-runner.module.sourcepath">
    <dirset dir="${module.solution2005-runner.basedir}/Solution2005-runner">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.solution2005-runner" depends="compile.module.solution2005-runner.production,compile.module.solution2005-runner.tests" description="Compile module Solution2005-runner"/>

  <target name="compile.module.solution2005-runner.production" depends="compile.module.common,compile.module.runtime-util,compile.module.msbuild-runner,compile.module.dotnetcommon-runtime,compile.module.agent,compile.module.messages,compile.module.common-runtime" description="Compile module Solution2005-runner; production classes">
    <mkdir dir="${solution2005-runner.output.dir}"/>
    <javac2 destdir="${solution2005-runner.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.solution2005-runner}"/>
      <bootclasspath refid="solution2005-runner.module.bootclasspath"/>
      <classpath refid="solution2005-runner.module.classpath"/>
      <src refid="solution2005-runner.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.solution2005-runner"/>
    </javac2>

    <copy todir="${solution2005-runner.output.dir}">
      <fileset dir="${module.solution2005-runner.basedir}/Solution2005-runner/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.solution2005-runner.tests" depends="compile.module.solution2005-runner.production" description="compile module Solution2005-runner; test classes" unless="skip.tests"/>

  <target name="clean.module.solution2005-runner" description="cleanup module">
    <delete dir="${solution2005-runner.output.dir}"/>
    <delete dir="${solution2005-runner.testoutput.dir}"/>
  </target>


  <!-- Module server-openapi -->

  <dirname property="module.server-openapi.basedir" file="${ant.file}"/>



  <property name="compiler.args.server-openapi" value="${compiler.args}"/>

  <property name="server-openapi.output.dir" value="${module.server-openapi.basedir}/server-openapi/classes"/>
  <property name="server-openapi.testoutput.dir" value="${module.server-openapi.basedir}/server-openapi/classes"/>

  <path id="server-openapi.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="server-openapi.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.server-openapi.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.server-openapi.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.server-openapi.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.server-openapi.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.server-openapi.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.server-openapi.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.server-openapi.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.server-openapi.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.server-openapi.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${server-model.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${patches.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.server-openapi">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.server-openapi">
    <patternset refid="excluded.from.module.server-openapi"/>
  </patternset>

  <path id="server-openapi.module.sourcepath">
    <dirset dir="${module.server-openapi.basedir}/server-openapi">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.server-openapi" depends="compile.module.server-openapi.production,compile.module.server-openapi.tests" description="Compile module server-openapi"/>

  <target name="compile.module.server-openapi.production" depends="compile.module.common,compile.module.server-model,compile.module.patches,compile.module.messages,compile.module.common-runtime" description="Compile module server-openapi; production classes">
    <mkdir dir="${server-openapi.output.dir}"/>
    <javac2 destdir="${server-openapi.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.server-openapi}"/>
      <bootclasspath refid="server-openapi.module.bootclasspath"/>
      <classpath refid="server-openapi.module.classpath"/>
      <src refid="server-openapi.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.server-openapi"/>
    </javac2>

    <copy todir="${server-openapi.output.dir}">
      <fileset dir="${module.server-openapi.basedir}/server-openapi/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.server-openapi.tests" depends="compile.module.server-openapi.production" description="compile module server-openapi; test classes" unless="skip.tests"/>

  <target name="clean.module.server-openapi" description="cleanup module">
    <delete dir="${server-openapi.output.dir}"/>
    <delete dir="${server-openapi.testoutput.dir}"/>
  </target>


  <!-- Module MSBuild-runner-server -->

  <dirname property="module.msbuild-runner-server.basedir" file="${ant.file}"/>



  <property name="compiler.args.msbuild-runner-server" value="${compiler.args}"/>

  <property name="msbuild-runner-server.output.dir" value="${module.msbuild-runner-server.basedir}/MSBuild-runner-server/classes"/>
  <property name="msbuild-runner-server.testoutput.dir" value="${module.msbuild-runner-server.basedir}/MSBuild-runner-server/classes"/>

  <path id="msbuild-runner-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="msbuild-runner-server.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.msbuild-runner-server.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.msbuild-runner-server.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.msbuild-runner-server.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.msbuild-runner-server.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.msbuild-runner-server.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.msbuild-runner-server.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.msbuild-runner-server.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.msbuild-runner-server.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.msbuild-runner-server.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.msbuild-runner-server">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.msbuild-runner-server">
    <patternset refid="excluded.from.module.msbuild-runner-server"/>
  </patternset>

  <path id="msbuild-runner-server.module.sourcepath">
    <dirset dir="${module.msbuild-runner-server.basedir}/MSBuild-runner-server">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.msbuild-runner-server" depends="compile.module.msbuild-runner-server.production,compile.module.msbuild-runner-server.tests" description="Compile module MSBuild-runner-server"/>

  <target name="compile.module.msbuild-runner-server.production" depends="compile.module.common,compile.module.server-openapi" description="Compile module MSBuild-runner-server; production classes">
    <mkdir dir="${msbuild-runner-server.output.dir}"/>
    <javac2 destdir="${msbuild-runner-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.msbuild-runner-server}"/>
      <bootclasspath refid="msbuild-runner-server.module.bootclasspath"/>
      <classpath refid="msbuild-runner-server.module.classpath"/>
      <src refid="msbuild-runner-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.msbuild-runner-server"/>
    </javac2>

    <copy todir="${msbuild-runner-server.output.dir}">
      <fileset dir="${module.msbuild-runner-server.basedir}/MSBuild-runner-server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.msbuild-runner-server.basedir}/MSBuild-runner-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.msbuild-runner-server.tests" depends="compile.module.msbuild-runner-server.production" description="compile module MSBuild-runner-server; test classes" unless="skip.tests"/>

  <target name="clean.module.msbuild-runner-server" description="cleanup module">
    <delete dir="${msbuild-runner-server.output.dir}"/>
    <delete dir="${msbuild-runner-server.testoutput.dir}"/>
  </target>


  <!-- Module svn -->

  <dirname property="module.svn.basedir" file="${ant.file}"/>



  <property name="compiler.args.svn" value="${compiler.args}"/>

  <property name="svn.output.dir" value="${module.svn.basedir}/svn/classes"/>
  <property name="svn.testoutput.dir" value="${module.svn.basedir}/svn/classes"/>

  <path id="svn.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="svn.module.classpath">
    <path refid="library.jdom.classpath"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.svn.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.svn.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.svn.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.svn.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.svn.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.svn.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.svn.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.svn.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.svn.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${patches.output.dir}"/>
    <path refid="library.svn.classpath"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${module.svn.basedir}/svn/lib/ganymed.jar"/>
    <pathelement location="${utils.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.svn">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.svn">
    <patternset refid="excluded.from.module.svn"/>
  </patternset>

  <path id="svn.module.sourcepath">
    <dirset dir="${module.svn.basedir}/svn">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.svn" depends="compile.module.svn.production,compile.module.svn.tests" description="Compile module svn"/>

  <target name="compile.module.svn.production" depends="compile.module.common,compile.module.server-model,compile.module.patches,compile.module.server-openapi,compile.module.utils" description="Compile module svn; production classes">
    <mkdir dir="${svn.output.dir}"/>
    <javac2 destdir="${svn.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.svn}"/>
      <bootclasspath refid="svn.module.bootclasspath"/>
      <classpath refid="svn.module.classpath"/>
      <src refid="svn.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.svn"/>
    </javac2>

    <copy todir="${svn.output.dir}">
      <fileset dir="${module.svn.basedir}/svn/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.svn.basedir}/svn/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.svn.tests" depends="compile.module.svn.production" description="compile module svn; test classes" unless="skip.tests"/>

  <target name="clean.module.svn" description="cleanup module">
    <delete dir="${svn.output.dir}"/>
    <delete dir="${svn.testoutput.dir}"/>
  </target>


  <!-- Module ant-runner-server -->

  <dirname property="module.ant-runner-server.basedir" file="${ant.file}"/>



  <property name="compiler.args.ant-runner-server" value="${compiler.args}"/>

  <property name="ant-runner-server.output.dir" value="${module.ant-runner-server.basedir}/ant-runner-server/classes"/>
  <property name="ant-runner-server.testoutput.dir" value="${module.ant-runner-server.basedir}/ant-runner-server/classes"/>

  <path id="ant-runner-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="ant-runner-server.module.classpath">
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.ant-runner-server.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.ant-runner-server.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.ant-runner-server.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.ant-runner-server.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.ant-runner-server.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.ant-runner-server.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.ant-runner-server.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.ant-runner-server.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.ant-runner-server.basedir}/tools/idea/lib/idea.jar"/>
  </path>


  <patternset id="excluded.from.module.ant-runner-server">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.ant-runner-server">
    <patternset refid="excluded.from.module.ant-runner-server"/>
  </patternset>

  <path id="ant-runner-server.module.sourcepath">
    <dirset dir="${module.ant-runner-server.basedir}/ant-runner-server">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.ant-runner-server" depends="compile.module.ant-runner-server.production,compile.module.ant-runner-server.tests" description="Compile module ant-runner-server"/>

  <target name="compile.module.ant-runner-server.production" depends="compile.module.common,compile.module.server-openapi" description="Compile module ant-runner-server; production classes">
    <mkdir dir="${ant-runner-server.output.dir}"/>
    <javac2 destdir="${ant-runner-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.ant-runner-server}"/>
      <bootclasspath refid="ant-runner-server.module.bootclasspath"/>
      <classpath refid="ant-runner-server.module.classpath"/>
      <src refid="ant-runner-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.ant-runner-server"/>
    </javac2>

    <copy todir="${ant-runner-server.output.dir}">
      <fileset dir="${module.ant-runner-server.basedir}/ant-runner-server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.ant-runner-server.basedir}/ant-runner-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.ant-runner-server.tests" depends="compile.module.ant-runner-server.production" description="compile module ant-runner-server; test classes" unless="skip.tests"/>

  <target name="clean.module.ant-runner-server" description="cleanup module">
    <delete dir="${ant-runner-server.output.dir}"/>
    <delete dir="${ant-runner-server.testoutput.dir}"/>
  </target>


  <!-- Module ntdomain-login -->

  <dirname property="module.ntdomain-login.basedir" file="${ant.file}"/>



  <property name="compiler.args.ntdomain-login" value="${compiler.args}"/>

  <property name="ntdomain-login.output.dir" value="${module.ntdomain-login.basedir}/ntdomain-login/classes"/>
  <property name="ntdomain-login.testoutput.dir" value="${module.ntdomain-login.basedir}/ntdomain-login/classes"/>

  <path id="ntdomain-login.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="ntdomain-login.module.classpath">
    <pathelement location="${module.ntdomain-login.basedir}/lib/shaj-0.5.jar"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <path refid="library.idea.classpath"/>
  </path>


  <patternset id="excluded.from.module.ntdomain-login">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.ntdomain-login">
    <patternset refid="excluded.from.module.ntdomain-login"/>
  </patternset>

  <path id="ntdomain-login.module.sourcepath">
    <dirset dir="${module.ntdomain-login.basedir}/ntdomain-login">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.ntdomain-login" depends="compile.module.ntdomain-login.production,compile.module.ntdomain-login.tests" description="Compile module ntdomain-login"/>

  <target name="compile.module.ntdomain-login.production" depends="compile.module.server-openapi" description="Compile module ntdomain-login; production classes">
    <mkdir dir="${ntdomain-login.output.dir}"/>
    <javac2 destdir="${ntdomain-login.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.ntdomain-login}"/>
      <bootclasspath refid="ntdomain-login.module.bootclasspath"/>
      <classpath refid="ntdomain-login.module.classpath"/>
      <src refid="ntdomain-login.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.ntdomain-login"/>
    </javac2>

    <copy todir="${ntdomain-login.output.dir}">
      <fileset dir="${module.ntdomain-login.basedir}/ntdomain-login/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.ntdomain-login.tests" depends="compile.module.ntdomain-login.production" description="compile module ntdomain-login; test classes" unless="skip.tests"/>

  <target name="clean.module.ntdomain-login" description="cleanup module">
    <delete dir="${ntdomain-login.output.dir}"/>
    <delete dir="${ntdomain-login.testoutput.dir}"/>
  </target>


  <!-- Module maven-runner-server -->

  <dirname property="module.maven-runner-server.basedir" file="${ant.file}"/>



  <property name="compiler.args.maven-runner-server" value="${compiler.args}"/>

  <property name="maven-runner-server.output.dir" value="${module.maven-runner-server.basedir}/maven-runner-server/classes"/>
  <property name="maven-runner-server.testoutput.dir" value="${module.maven-runner-server.basedir}/maven-runner-server/classes"/>

  <path id="maven-runner-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="maven-runner-server.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.maven-runner-server.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.maven-runner-server.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.maven-runner-server.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.maven-runner-server.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.maven-runner-server.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.maven-runner-server.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.maven-runner-server.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.maven-runner-server.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.maven-runner-server.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.maven-runner-server">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.maven-runner-server">
    <patternset refid="excluded.from.module.maven-runner-server"/>
  </patternset>

  <path id="maven-runner-server.module.sourcepath">
    <dirset dir="${module.maven-runner-server.basedir}/maven-runner-server">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.maven-runner-server" depends="compile.module.maven-runner-server.production,compile.module.maven-runner-server.tests" description="Compile module maven-runner-server"/>

  <target name="compile.module.maven-runner-server.production" depends="compile.module.common,compile.module.server-openapi" description="Compile module maven-runner-server; production classes">
    <mkdir dir="${maven-runner-server.output.dir}"/>
    <javac2 destdir="${maven-runner-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.maven-runner-server}"/>
      <bootclasspath refid="maven-runner-server.module.bootclasspath"/>
      <classpath refid="maven-runner-server.module.classpath"/>
      <src refid="maven-runner-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.maven-runner-server"/>
    </javac2>

    <copy todir="${maven-runner-server.output.dir}">
      <fileset dir="${module.maven-runner-server.basedir}/maven-runner-server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.maven-runner-server.basedir}/maven-runner-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.maven-runner-server.tests" depends="compile.module.maven-runner-server.production" description="compile module maven-runner-server; test classes" unless="skip.tests"/>

  <target name="clean.module.maven-runner-server" description="cleanup module">
    <delete dir="${maven-runner-server.output.dir}"/>
    <delete dir="${maven-runner-server.testoutput.dir}"/>
  </target>


  <!-- Module cvs-support -->

  <dirname property="module.cvs-support.basedir" file="${ant.file}"/>



  <property name="compiler.args.cvs-support" value="${compiler.args}"/>

  <property name="cvs-support.output.dir" value="${module.cvs-support.basedir}/cvs-support/classes"/>
  <property name="cvs-support.testoutput.dir" value="${module.cvs-support.basedir}/cvs-support/classes"/>

  <path id="cvs-support.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="cvs-support.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.cvs-support.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.cvs-support.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.cvs-support.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.cvs-support.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.cvs-support.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.cvs-support.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.cvs-support.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.cvs-support.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.cvs-support.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${patches.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/javacvs.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/sshtools-scp.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/cvs_util.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/sshtools-net.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/sshtools-zlib.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/maverick-sftp.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/sshtools-cipher.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/maverick.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/sshtools-sftp.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/maverick-ssh2.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/sshtools-util.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/sshtools-publickey.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/maverick-ssh1.jar"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/sshtools-ant.jar"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${module.cvs-support.basedir}/cvs-support/lib/resources_en.jar"/>
  </path>


  <patternset id="excluded.from.module.cvs-support">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.cvs-support">
    <patternset refid="excluded.from.module.cvs-support"/>
  </patternset>

  <path id="cvs-support.module.sourcepath">
    <dirset dir="${module.cvs-support.basedir}/cvs-support">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.cvs-support" depends="compile.module.cvs-support.production,compile.module.cvs-support.tests" description="Compile module cvs-support"/>

  <target name="compile.module.cvs-support.production" depends="compile.module.common,compile.module.server-model,compile.module.patches,compile.module.server-openapi" description="Compile module cvs-support; production classes">
    <mkdir dir="${cvs-support.output.dir}"/>
    <javac2 destdir="${cvs-support.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.cvs-support}"/>
      <bootclasspath refid="cvs-support.module.bootclasspath"/>
      <classpath refid="cvs-support.module.classpath"/>
      <src refid="cvs-support.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.cvs-support"/>
    </javac2>

    <copy todir="${cvs-support.output.dir}">
      <fileset dir="${module.cvs-support.basedir}/cvs-support/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.cvs-support.basedir}/cvs-support/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.cvs-support.tests" depends="compile.module.cvs-support.production" description="compile module cvs-support; test classes" unless="skip.tests"/>

  <target name="clean.module.cvs-support" description="cleanup module">
    <delete dir="${cvs-support.output.dir}"/>
    <delete dir="${cvs-support.testoutput.dir}"/>
  </target>


  <!-- Module idea-runner-server -->

  <dirname property="module.idea-runner-server.basedir" file="${ant.file}"/>



  <property name="compiler.args.idea-runner-server" value="${compiler.args}"/>

  <property name="idea-runner-server.output.dir" value="${module.idea-runner-server.basedir}/idea-runner-server/classes"/>
  <property name="idea-runner-server.testoutput.dir" value="${module.idea-runner-server.basedir}/idea-runner-server/classes"/>

  <path id="idea-runner-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="idea-runner-server.module.classpath">
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.idea-runner-server.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.idea-runner-server.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.idea-runner-server.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.idea-runner-server.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.idea-runner-server.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.idea-runner-server.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.idea-runner-server.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.idea-runner-server.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.idea-runner-server.basedir}/tools/idea/lib/idea.jar"/>
  </path>


  <patternset id="excluded.from.module.idea-runner-server">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.idea-runner-server">
    <patternset refid="excluded.from.module.idea-runner-server"/>
  </patternset>

  <path id="idea-runner-server.module.sourcepath">
    <dirset dir="${module.idea-runner-server.basedir}/idea-runner-server">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.idea-runner-server" depends="compile.module.idea-runner-server.production,compile.module.idea-runner-server.tests" description="Compile module idea-runner-server"/>

  <target name="compile.module.idea-runner-server.production" depends="compile.module.common,compile.module.server-openapi" description="Compile module idea-runner-server; production classes">
    <mkdir dir="${idea-runner-server.output.dir}"/>
    <javac2 destdir="${idea-runner-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.idea-runner-server}"/>
      <bootclasspath refid="idea-runner-server.module.bootclasspath"/>
      <classpath refid="idea-runner-server.module.classpath"/>
      <src refid="idea-runner-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.idea-runner-server"/>
    </javac2>

    <copy todir="${idea-runner-server.output.dir}">
      <fileset dir="${module.idea-runner-server.basedir}/idea-runner-server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.idea-runner-server.basedir}/idea-runner-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.idea-runner-server.tests" depends="compile.module.idea-runner-server.production" description="compile module idea-runner-server; test classes" unless="skip.tests"/>

  <target name="clean.module.idea-runner-server" description="cleanup module">
    <delete dir="${idea-runner-server.output.dir}"/>
    <delete dir="${idea-runner-server.testoutput.dir}"/>
  </target>


  <!-- Module perforce -->

  <dirname property="module.perforce.basedir" file="${ant.file}"/>



  <property name="compiler.args.perforce" value="${compiler.args}"/>

  <property name="perforce.output.dir" value="${module.perforce.basedir}/perforce/classes"/>
  <property name="perforce.testoutput.dir" value="${module.perforce.basedir}/perforce/classes"/>

  <path id="perforce.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="perforce.module.classpath">
    <path refid="library.jdom.classpath"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.perforce.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.perforce.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.perforce.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.perforce.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.perforce.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.perforce.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.perforce.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.perforce.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.perforce.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${module.perforce.basedir}/perforce/lib/perforce_util.jar"/>
    <pathelement location="${patches.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${server-openapi.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.perforce">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.perforce">
    <patternset refid="excluded.from.module.perforce"/>
  </patternset>

  <path id="perforce.module.sourcepath">
    <dirset dir="${module.perforce.basedir}/perforce">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.perforce" depends="compile.module.perforce.production,compile.module.perforce.tests" description="Compile module perforce"/>

  <target name="compile.module.perforce.production" depends="compile.module.common,compile.module.server-model,compile.module.patches,compile.module.server-openapi" description="Compile module perforce; production classes">
    <mkdir dir="${perforce.output.dir}"/>
    <javac2 destdir="${perforce.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.perforce}"/>
      <bootclasspath refid="perforce.module.bootclasspath"/>
      <classpath refid="perforce.module.classpath"/>
      <src refid="perforce.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.perforce"/>
    </javac2>

    <copy todir="${perforce.output.dir}">
      <fileset dir="${module.perforce.basedir}/perforce/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.perforce.basedir}/perforce/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.perforce.tests" depends="compile.module.perforce.production" description="compile module perforce; test classes" unless="skip.tests"/>

  <target name="clean.module.perforce" description="cleanup module">
    <delete dir="${perforce.output.dir}"/>
    <delete dir="${perforce.testoutput.dir}"/>
  </target>


  <!-- Module web-openapi -->

  <dirname property="module.web-openapi.basedir" file="${ant.file}"/>



  <property name="compiler.args.web-openapi" value="${compiler.args}"/>

  <property name="web-openapi.output.dir" value="${module.web-openapi.basedir}/web-openapi/classes"/>
  <property name="web-openapi.testoutput.dir" value="${module.web-openapi.basedir}/web-openapi/classes"/>

  <path id="web-openapi.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="web-openapi.module.classpath">
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <path refid="library.spring.classpath"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <path refid="library.tomcat-local.classpath"/>
  </path>


  <patternset id="excluded.from.module.web-openapi">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.web-openapi">
    <patternset refid="excluded.from.module.web-openapi"/>
  </patternset>

  <path id="web-openapi.module.sourcepath">
    <dirset dir="${module.web-openapi.basedir}/web-openapi">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.web-openapi" depends="compile.module.web-openapi.production,compile.module.web-openapi.tests" description="Compile module web-openapi"/>

  <target name="compile.module.web-openapi.production" depends="compile.module.server-model,compile.module.server-openapi,compile.module.common-runtime" description="Compile module web-openapi; production classes">
    <mkdir dir="${web-openapi.output.dir}"/>
    <javac2 destdir="${web-openapi.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.web-openapi}"/>
      <bootclasspath refid="web-openapi.module.bootclasspath"/>
      <classpath refid="web-openapi.module.classpath"/>
      <src refid="web-openapi.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.web-openapi"/>
    </javac2>

    <copy todir="${web-openapi.output.dir}">
      <fileset dir="${module.web-openapi.basedir}/web-openapi/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.web-openapi.tests" depends="compile.module.web-openapi.production" description="compile module web-openapi; test classes" unless="skip.tests"/>

  <target name="clean.module.web-openapi" description="cleanup module">
    <delete dir="${web-openapi.output.dir}"/>
    <delete dir="${web-openapi.testoutput.dir}"/>
  </target>


  <!-- Module artefacts -->

  <dirname property="module.artefacts.basedir" file="${ant.file}"/>



  <property name="compiler.args.artefacts" value="${compiler.args}"/>

  <property name="artefacts.output.dir" value="${module.artefacts.basedir}/artefacts/classes"/>
  <property name="artefacts.testoutput.dir" value="${module.artefacts.basedir}/artefacts/classes"/>

  <path id="artefacts.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="artefacts.module.classpath">
    <path refid="library.idea.classpath"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.artefacts.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.artefacts.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.artefacts.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.artefacts.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.artefacts.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.artefacts.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.artefacts.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.artefacts.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.artefacts.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.spring.classpath"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${web-openapi.output.dir}"/>
    <pathelement location="${module.artefacts.basedir}/web/lib/commons-fileupload-1.0.jar"/>
    <path refid="library.tomcat-local.classpath"/>
  </path>


  <patternset id="excluded.from.module.artefacts">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.artefacts">
    <patternset refid="excluded.from.module.artefacts"/>
  </patternset>

  <path id="artefacts.module.sourcepath">
    <dirset dir="${module.artefacts.basedir}/artefacts">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.artefacts" depends="compile.module.artefacts.production,compile.module.artefacts.tests" description="Compile module artefacts"/>

  <target name="compile.module.artefacts.production" depends="compile.module.common,compile.module.server-model,compile.module.server-openapi,compile.module.web-openapi" description="Compile module artefacts; production classes">
    <mkdir dir="${artefacts.output.dir}"/>
    <javac2 destdir="${artefacts.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.artefacts}"/>
      <bootclasspath refid="artefacts.module.bootclasspath"/>
      <classpath refid="artefacts.module.classpath"/>
      <src refid="artefacts.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.artefacts"/>
    </javac2>

    <copy todir="${artefacts.output.dir}">
      <fileset dir="${module.artefacts.basedir}/artefacts/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.artefacts.basedir}/artefacts/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.artefacts.tests" depends="compile.module.artefacts.production" description="compile module artefacts; test classes" unless="skip.tests"/>

  <target name="clean.module.artefacts" description="cleanup module">
    <delete dir="${artefacts.output.dir}"/>
    <delete dir="${artefacts.testoutput.dir}"/>
  </target>


  <!-- Module win32-notificator -->

  <dirname property="module.win32-notificator.basedir" file="${ant.file}"/>



  <property name="compiler.args.win32-notificator" value="${compiler.args}"/>

  <property name="win32-notificator.output.dir" value="${module.win32-notificator.basedir}/win32-notificator/classes"/>
  <property name="win32-notificator.testoutput.dir" value="${module.win32-notificator.basedir}/win32-notificator/classes"/>

  <path id="win32-notificator.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="win32-notificator.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.win32-notificator.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.win32-notificator.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.win32-notificator.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.win32-notificator.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.win32-notificator.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.win32-notificator.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.win32-notificator.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.win32-notificator.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.win32-notificator.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${web-openapi.output.dir}"/>
    <path refid="library.xstream.classpath"/>
    <pathelement location="${utils.output.dir}"/>
    <path refid="library.spring.classpath"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <path refid="library.tomcat.classpath"/>
  </path>


  <patternset id="excluded.from.module.win32-notificator">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.win32-notificator">
    <patternset refid="excluded.from.module.win32-notificator"/>
  </patternset>

  <path id="win32-notificator.module.sourcepath">
    <dirset dir="${module.win32-notificator.basedir}/win32-notificator">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.win32-notificator" depends="compile.module.win32-notificator.production,compile.module.win32-notificator.tests" description="Compile module win32-notificator"/>

  <target name="compile.module.win32-notificator.production" depends="compile.module.common,compile.module.server-model,compile.module.server-openapi,compile.module.web-openapi,compile.module.utils,compile.module.messages" description="Compile module win32-notificator; production classes">
    <mkdir dir="${win32-notificator.output.dir}"/>
    <javac2 destdir="${win32-notificator.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.win32-notificator}"/>
      <bootclasspath refid="win32-notificator.module.bootclasspath"/>
      <classpath refid="win32-notificator.module.classpath"/>
      <src refid="win32-notificator.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.win32-notificator"/>
    </javac2>

    <copy todir="${win32-notificator.output.dir}">
      <fileset dir="${module.win32-notificator.basedir}/win32-notificator/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.win32-notificator.basedir}/win32-notificator/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.win32-notificator.tests" depends="compile.module.win32-notificator.production" description="compile module win32-notificator; test classes" unless="skip.tests"/>

  <target name="clean.module.win32-notificator" description="cleanup module">
    <delete dir="${win32-notificator.output.dir}"/>
    <delete dir="${win32-notificator.testoutput.dir}"/>
  </target>


  <!-- Module email-notificator -->

  <dirname property="module.email-notificator.basedir" file="${ant.file}"/>



  <property name="compiler.args.email-notificator" value="${compiler.args}"/>

  <property name="email-notificator.output.dir" value="${module.email-notificator.basedir}/email-notificator/classes"/>
  <property name="email-notificator.testoutput.dir" value="${module.email-notificator.basedir}/email-notificator/classes"/>

  <path id="email-notificator.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="email-notificator.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.email-notificator.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.email-notificator.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.email-notificator.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.email-notificator.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.email-notificator.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.email-notificator.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.email-notificator.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.email-notificator.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.email-notificator.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${module.email-notificator.basedir}/lib/mail.jar"/>
    <pathelement location="${module.email-notificator.basedir}/lib/activation.jar"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <path refid="library.log4j-1.2.12.classpath"/>
    <path refid="library.idea.classpath"/>
  </path>


  <patternset id="excluded.from.module.email-notificator">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.email-notificator">
    <patternset refid="excluded.from.module.email-notificator"/>
  </patternset>

  <path id="email-notificator.module.sourcepath">
    <dirset dir="${module.email-notificator.basedir}/email-notificator">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.email-notificator" depends="compile.module.email-notificator.production,compile.module.email-notificator.tests" description="Compile module email-notificator"/>

  <target name="compile.module.email-notificator.production" depends="compile.module.common,compile.module.server-model,compile.module.server-openapi,compile.module.messages" description="Compile module email-notificator; production classes">
    <mkdir dir="${email-notificator.output.dir}"/>
    <javac2 destdir="${email-notificator.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.email-notificator}"/>
      <bootclasspath refid="email-notificator.module.bootclasspath"/>
      <classpath refid="email-notificator.module.classpath"/>
      <src refid="email-notificator.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.email-notificator"/>
    </javac2>

    <copy todir="${email-notificator.output.dir}">
      <fileset dir="${module.email-notificator.basedir}/email-notificator/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.email-notificator.tests" depends="compile.module.email-notificator.production" description="compile module email-notificator; test classes" unless="skip.tests"/>

  <target name="clean.module.email-notificator" description="cleanup module">
    <delete dir="${email-notificator.output.dir}"/>
    <delete dir="${email-notificator.testoutput.dir}"/>
  </target>


  <!-- Module Solution2005-runner-server -->

  <dirname property="module.solution2005-runner-server.basedir" file="${ant.file}"/>



  <property name="compiler.args.solution2005-runner-server" value="${compiler.args}"/>

  <property name="solution2005-runner-server.output.dir" value="${module.solution2005-runner-server.basedir}/Solution2005-runner-server/classes"/>
  <property name="solution2005-runner-server.testoutput.dir" value="${module.solution2005-runner-server.basedir}/Solution2005-runner-server/classes"/>

  <path id="solution2005-runner-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="solution2005-runner-server.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.solution2005-runner-server.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.solution2005-runner-server.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.solution2005-runner-server.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.solution2005-runner-server.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.solution2005-runner-server.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.solution2005-runner-server.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.solution2005-runner-server.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.solution2005-runner-server.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.solution2005-runner-server.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${msbuild-runner-server.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.solution2005-runner-server">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.solution2005-runner-server">
    <patternset refid="excluded.from.module.solution2005-runner-server"/>
  </patternset>

  <path id="solution2005-runner-server.module.sourcepath">
    <dirset dir="${module.solution2005-runner-server.basedir}/Solution2005-runner-server">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.solution2005-runner-server" depends="compile.module.solution2005-runner-server.production,compile.module.solution2005-runner-server.tests" description="Compile module Solution2005-runner-server"/>

  <target name="compile.module.solution2005-runner-server.production" depends="compile.module.common,compile.module.server-openapi,compile.module.msbuild-runner-server" description="Compile module Solution2005-runner-server; production classes">
    <mkdir dir="${solution2005-runner-server.output.dir}"/>
    <javac2 destdir="${solution2005-runner-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.solution2005-runner-server}"/>
      <bootclasspath refid="solution2005-runner-server.module.bootclasspath"/>
      <classpath refid="solution2005-runner-server.module.classpath"/>
      <src refid="solution2005-runner-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.solution2005-runner-server"/>
    </javac2>

    <copy todir="${solution2005-runner-server.output.dir}">
      <fileset dir="${module.solution2005-runner-server.basedir}/Solution2005-runner-server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.solution2005-runner-server.basedir}/Solution2005-runner-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.solution2005-runner-server.tests" depends="compile.module.solution2005-runner-server.production" description="compile module Solution2005-runner-server; test classes" unless="skip.tests"/>

  <target name="clean.module.solution2005-runner-server" description="cleanup module">
    <delete dir="${solution2005-runner-server.output.dir}"/>
    <delete dir="${solution2005-runner-server.testoutput.dir}"/>
  </target>


  <!-- Module NAnt-runner-server -->

  <dirname property="module.nant-runner-server.basedir" file="${ant.file}"/>



  <property name="compiler.args.nant-runner-server" value="${compiler.args}"/>

  <property name="nant-runner-server.output.dir" value="${module.nant-runner-server.basedir}/NAnt-runner-server/classes"/>
  <property name="nant-runner-server.testoutput.dir" value="${module.nant-runner-server.basedir}/NAnt-runner-server/classes"/>

  <path id="nant-runner-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="nant-runner-server.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.nant-runner-server.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.nant-runner-server.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.nant-runner-server.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.nant-runner-server.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.nant-runner-server.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.nant-runner-server.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.nant-runner-server.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.nant-runner-server.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.nant-runner-server.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.nant-runner-server">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.nant-runner-server">
    <patternset refid="excluded.from.module.nant-runner-server"/>
  </patternset>

  <path id="nant-runner-server.module.sourcepath">
    <dirset dir="${module.nant-runner-server.basedir}/NAnt-runner-server">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.nant-runner-server" depends="compile.module.nant-runner-server.production,compile.module.nant-runner-server.tests" description="Compile module NAnt-runner-server"/>

  <target name="compile.module.nant-runner-server.production" depends="compile.module.common,compile.module.server-openapi" description="Compile module NAnt-runner-server; production classes">
    <mkdir dir="${nant-runner-server.output.dir}"/>
    <javac2 destdir="${nant-runner-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.nant-runner-server}"/>
      <bootclasspath refid="nant-runner-server.module.bootclasspath"/>
      <classpath refid="nant-runner-server.module.classpath"/>
      <src refid="nant-runner-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.nant-runner-server"/>
    </javac2>

    <copy todir="${nant-runner-server.output.dir}">
      <fileset dir="${module.nant-runner-server.basedir}/NAnt-runner-server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.nant-runner-server.basedir}/NAnt-runner-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.nant-runner-server.tests" depends="compile.module.nant-runner-server.production" description="compile module NAnt-runner-server; test classes" unless="skip.tests"/>

  <target name="clean.module.nant-runner-server" description="cleanup module">
    <delete dir="${nant-runner-server.output.dir}"/>
    <delete dir="${nant-runner-server.testoutput.dir}"/>
  </target>


  <!-- Module inspections-util -->

  <dirname property="module.inspections-util.basedir" file="${ant.file}"/>



  <property name="compiler.args.inspections-util" value="${compiler.args}"/>

  <property name="inspections-util.output.dir" value="${module.inspections-util.basedir}/inspections-util/classes"/>
  <property name="inspections-util.testoutput.dir" value="${module.inspections-util.basedir}/inspections-util/classes"/>

  <path id="inspections-util.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="inspections-util.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.inspections-util.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.inspections-util.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.inspections-util.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.inspections-util.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.inspections-util.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.inspections-util.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.inspections-util.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.inspections-util.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.inspections-util.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.xstream.classpath"/>
  </path>


  <patternset id="excluded.from.module.inspections-util">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.inspections-util">
    <patternset refid="excluded.from.module.inspections-util"/>
  </patternset>

  <path id="inspections-util.module.sourcepath">
    <dirset dir="${module.inspections-util.basedir}/inspections-util">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.inspections-util" depends="compile.module.inspections-util.production,compile.module.inspections-util.tests" description="Compile module inspections-util"/>

  <target name="compile.module.inspections-util.production" depends="compile.module.common" description="Compile module inspections-util; production classes">
    <mkdir dir="${inspections-util.output.dir}"/>
    <javac2 destdir="${inspections-util.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.inspections-util}"/>
      <bootclasspath refid="inspections-util.module.bootclasspath"/>
      <classpath refid="inspections-util.module.classpath"/>
      <src refid="inspections-util.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.inspections-util"/>
    </javac2>

    <copy todir="${inspections-util.output.dir}">
      <fileset dir="${module.inspections-util.basedir}/inspections-util/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.inspections-util.tests" depends="compile.module.inspections-util.production" description="compile module inspections-util; test classes" unless="skip.tests"/>

  <target name="clean.module.inspections-util" description="cleanup module">
    <delete dir="${inspections-util.output.dir}"/>
    <delete dir="${inspections-util.testoutput.dir}"/>
  </target>


  <!-- Module coverage-server -->

  <dirname property="module.coverage-server.basedir" file="${ant.file}"/>



  <property name="compiler.args.coverage-server" value="${compiler.args}"/>

  <property name="coverage-server.output.dir" value="${module.coverage-server.basedir}/coverage-server/classes"/>
  <property name="coverage-server.testoutput.dir" value="${module.coverage-server.basedir}/coverage-server/classes"/>

  <path id="coverage-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="coverage-server.module.classpath">
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${web-openapi.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <path refid="library.spring.classpath"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.coverage-server.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.coverage-server.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.coverage-server.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.coverage-server.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.coverage-server.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.coverage-server.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.coverage-server.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.coverage-server.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.coverage-server.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.tomcat-local.classpath"/>
    <pathelement location="${ant-runner-server.output.dir}"/>
    <pathelement location="${idea-runner-server.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.coverage-server">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.coverage-server">
    <patternset refid="excluded.from.module.coverage-server"/>
  </patternset>

  <path id="coverage-server.module.sourcepath">
    <dirset dir="${module.coverage-server.basedir}/coverage-server">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.coverage-server" depends="compile.module.coverage-server.production,compile.module.coverage-server.tests" description="Compile module coverage-server"/>

  <target name="compile.module.coverage-server.production" depends="compile.module.common,compile.module.runtime-util,compile.module.server-model,compile.module.server-openapi,compile.module.web-openapi,compile.module.ant-runner-server,compile.module.idea-runner-server" description="Compile module coverage-server; production classes">
    <mkdir dir="${coverage-server.output.dir}"/>
    <javac2 destdir="${coverage-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.coverage-server}"/>
      <bootclasspath refid="coverage-server.module.bootclasspath"/>
      <classpath refid="coverage-server.module.classpath"/>
      <src refid="coverage-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.coverage-server"/>
    </javac2>

    <copy todir="${coverage-server.output.dir}">
      <fileset dir="${module.coverage-server.basedir}/coverage-server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.coverage-server.basedir}/coverage-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.coverage-server.tests" depends="compile.module.coverage-server.production" description="compile module coverage-server; test classes" unless="skip.tests"/>

  <target name="clean.module.coverage-server" description="cleanup module">
    <delete dir="${coverage-server.output.dir}"/>
    <delete dir="${coverage-server.testoutput.dir}"/>
  </target>


  <!-- Module NAnt-runner -->

  <dirname property="module.nant-runner.basedir" file="${ant.file}"/>



  <property name="compiler.args.nant-runner" value="${compiler.args}"/>

  <property name="nant-runner.output.dir" value="${module.nant-runner.basedir}/NAnt-runner/classes"/>
  <property name="nant-runner.testoutput.dir" value="${module.nant-runner.basedir}/NAnt-runner/classes"/>

  <path id="nant-runner.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="nant-runner.module.classpath">
    <pathelement location="${agent.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.nant-runner.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.nant-runner.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.nant-runner.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.nant-runner.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.nant-runner.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.nant-runner.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.nant-runner.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.nant-runner.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.nant-runner.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${dotnetcommon-runtime.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.nant-runner">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.nant-runner">
    <patternset refid="excluded.from.module.nant-runner"/>
  </patternset>

  <path id="nant-runner.module.sourcepath">
    <dirset dir="${module.nant-runner.basedir}/NAnt-runner">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.nant-runner" depends="compile.module.nant-runner.production,compile.module.nant-runner.tests" description="Compile module NAnt-runner"/>

  <target name="compile.module.nant-runner.production" depends="compile.module.common,compile.module.runtime-util,compile.module.dotnetcommon-runtime,compile.module.agent" description="Compile module NAnt-runner; production classes">
    <mkdir dir="${nant-runner.output.dir}"/>
    <javac2 destdir="${nant-runner.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.nant-runner}"/>
      <bootclasspath refid="nant-runner.module.bootclasspath"/>
      <classpath refid="nant-runner.module.classpath"/>
      <src refid="nant-runner.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.nant-runner"/>
    </javac2>

    <copy todir="${nant-runner.output.dir}">
      <fileset dir="${module.nant-runner.basedir}/NAnt-runner/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.nant-runner.tests" depends="compile.module.nant-runner.production" description="compile module NAnt-runner; test classes" unless="skip.tests"/>

  <target name="clean.module.nant-runner" description="cleanup module">
    <delete dir="${nant-runner.output.dir}"/>
    <delete dir="${nant-runner.testoutput.dir}"/>
  </target>


  <!-- Module maven-runner -->

  <dirname property="module.maven-runner.basedir" file="${ant.file}"/>



  <property name="compiler.args.maven-runner" value="${compiler.args}"/>

  <property name="maven-runner.output.dir" value="${module.maven-runner.basedir}/maven-runner/classes"/>
  <property name="maven-runner.testoutput.dir" value="${module.maven-runner.basedir}/maven-runner/classes"/>

  <path id="maven-runner.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="maven-runner.module.classpath">
    <pathelement location="${agent.output.dir}"/>
    <pathelement location="${module.maven-runner.basedir}/lib/annotations.jar"/>
    <path refid="library.log4j-1.2.12.classpath"/>
    <pathelement location="${maven-runtime.output.dir}"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.maven-runner.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.maven-runner.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.maven-runner.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.maven-runner.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.maven-runner.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.maven-runner.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.maven-runner.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.maven-runner.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.maven-runner.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <path refid="library.xstream.classpath"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${server-logging.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.maven-runner">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.maven-runner">
    <patternset refid="excluded.from.module.maven-runner"/>
  </patternset>

  <path id="maven-runner.module.sourcepath">
    <dirset dir="${module.maven-runner.basedir}/maven-runner">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.maven-runner" depends="compile.module.maven-runner.production,compile.module.maven-runner.tests" description="Compile module maven-runner"/>

  <target name="compile.module.maven-runner.production" depends="compile.module.common,compile.module.runtime-util,compile.module.server-logging,compile.module.xml-rpc-wrapper,compile.module.agent,compile.module.maven-runtime" description="Compile module maven-runner; production classes">
    <mkdir dir="${maven-runner.output.dir}"/>
    <javac2 destdir="${maven-runner.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.maven-runner}"/>
      <bootclasspath refid="maven-runner.module.bootclasspath"/>
      <classpath refid="maven-runner.module.classpath"/>
      <src refid="maven-runner.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.maven-runner"/>
    </javac2>

    <copy todir="${maven-runner.output.dir}">
      <fileset dir="${module.maven-runner.basedir}/maven-runner/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.maven-runner.tests" depends="compile.module.maven-runner.production" description="compile module maven-runner; test classes" unless="skip.tests"/>

  <target name="clean.module.maven-runner" description="cleanup module">
    <delete dir="${maven-runner.output.dir}"/>
    <delete dir="${maven-runner.testoutput.dir}"/>
  </target>


  <!-- Module license-common -->

  <dirname property="module.license-common.basedir" file="${ant.file}"/>



  <property name="compiler.args.license-common" value="${compiler.args}"/>

  <property name="license-common.output.dir" value="${module.license-common.basedir}/license-common/classes"/>
  <property name="license-common.testoutput.dir" value="${module.license-common.basedir}/license-common/classes"/>

  <path id="license-common.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="license-common.module.classpath">
    <path refid="library.idea.classpath"/>
  </path>


  <patternset id="excluded.from.module.license-common">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.license-common">
    <patternset refid="excluded.from.module.license-common"/>
  </patternset>

  <path id="license-common.module.sourcepath">
    <dirset dir="${module.license-common.basedir}/license-common">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.license-common" depends="compile.module.license-common.production,compile.module.license-common.tests" description="Compile module license-common"/>

  <target name="compile.module.license-common.production" description="Compile module license-common; production classes">
    <mkdir dir="${license-common.output.dir}"/>
    <javac2 destdir="${license-common.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.license-common}"/>
      <bootclasspath refid="license-common.module.bootclasspath"/>
      <classpath refid="license-common.module.classpath"/>
      <src refid="license-common.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.license-common"/>
    </javac2>

    <copy todir="${license-common.output.dir}">
      <fileset dir="${module.license-common.basedir}/license-common/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.license-common.tests" depends="compile.module.license-common.production" description="compile module license-common; test classes" unless="skip.tests"/>

  <target name="clean.module.license-common" description="cleanup module">
    <delete dir="${license-common.output.dir}"/>
    <delete dir="${license-common.testoutput.dir}"/>
  </target>


  <!-- Module license-keygen -->

  <dirname property="module.license-keygen.basedir" file="${ant.file}"/>



  <property name="compiler.args.license-keygen" value="${compiler.args}"/>

  <property name="license-keygen.output.dir" value="${module.license-keygen.basedir}/license-keygen/classes"/>
  <property name="license-keygen.testoutput.dir" value="${module.license-keygen.basedir}/license-keygen/classes"/>

  <path id="license-keygen.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="license-keygen.module.classpath">
    <pathelement location="${module.license-keygen.basedir}/license-keygen/lib/bcprov-jdk15-132.jar"/>
    <pathelement location="${license-common.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.license-keygen.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.license-keygen.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.license-keygen.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.license-keygen.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.license-keygen.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.license-keygen.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.license-keygen.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.license-keygen.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.license-keygen.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.idea.classpath"/>
  </path>


  <patternset id="excluded.from.module.license-keygen">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.license-keygen">
    <patternset refid="excluded.from.module.license-keygen"/>
  </patternset>

  <path id="license-keygen.module.sourcepath">
    <dirset dir="${module.license-keygen.basedir}/license-keygen">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.license-keygen" depends="compile.module.license-keygen.production,compile.module.license-keygen.tests" description="Compile module license-keygen"/>

  <target name="compile.module.license-keygen.production" depends="compile.module.common,compile.module.license-common" description="Compile module license-keygen; production classes">
    <mkdir dir="${license-keygen.output.dir}"/>
    <javac2 destdir="${license-keygen.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.license-keygen}"/>
      <bootclasspath refid="license-keygen.module.bootclasspath"/>
      <classpath refid="license-keygen.module.classpath"/>
      <src refid="license-keygen.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.license-keygen"/>
    </javac2>

    <copy todir="${license-keygen.output.dir}">
      <fileset dir="${module.license-keygen.basedir}/license-keygen/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.license-keygen.tests" depends="compile.module.license-keygen.production" description="compile module license-keygen; test classes" unless="skip.tests"/>

  <target name="clean.module.license-keygen" description="cleanup module">
    <delete dir="${license-keygen.output.dir}"/>
    <delete dir="${license-keygen.testoutput.dir}"/>
  </target>


  <!-- Module server -->

  <dirname property="module.server.basedir" file="${ant.file}"/>



  <property name="compiler.args.server" value="${compiler.args}"/>

  <property name="server.output.dir" value="${module.server.basedir}/server/classes"/>
  <property name="server.testoutput.dir" value="${module.server.basedir}/server/classesTest"/>

  <path id="server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="server.module.classpath">
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.server.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.server.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.server.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.server.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.server.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.server.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.server.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.server.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.server.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.xstream.classpath"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <path refid="library.database.classpath"/>
    <pathelement location="${patches.output.dir}"/>
    <pathelement location="${patches-impl.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${utils.output.dir}"/>
    <pathelement location="${license-common.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <path refid="library.commons-dbcp.classpath"/>
    <path refid="library.spring.classpath"/>
  </path>


  <patternset id="excluded.from.module.server">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.server">
    <patternset refid="excluded.from.module.server"/>
  </patternset>

  <path id="server.module.sourcepath">
    <dirset dir="${module.server.basedir}/server">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.server" depends="compile.module.server.production,compile.module.server.tests" description="Compile module server"/>

  <target name="compile.module.server.production" depends="compile.module.common,compile.module.runtime-util,compile.module.server-model,compile.module.patches,compile.module.server-openapi,compile.module.xml-rpc-wrapper,compile.module.license-common,compile.module.utils,compile.module.messages,compile.module.common-runtime,compile.module.patches-impl" description="Compile module server; production classes">
    <mkdir dir="${server.output.dir}"/>
    <javac2 destdir="${server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.server}"/>
      <bootclasspath refid="server.module.bootclasspath"/>
      <classpath refid="server.module.classpath"/>
      <src refid="server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.server"/>
    </javac2>

    <copy todir="${server.output.dir}">
      <fileset dir="${module.server.basedir}/server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.server.tests" depends="compile.module.server.production" description="compile module server; test classes" unless="skip.tests"/>

  <target name="clean.module.server" description="cleanup module">
    <delete dir="${server.output.dir}"/>
    <delete dir="${server.testoutput.dir}"/>
  </target>


  <!-- Module jabber-notificator -->

  <dirname property="module.jabber-notificator.basedir" file="${ant.file}"/>



  <property name="compiler.args.jabber-notificator" value="${compiler.args}"/>

  <property name="jabber-notificator.output.dir" value="${module.jabber-notificator.basedir}/jabber-notificator/classes"/>
  <property name="jabber-notificator.testoutput.dir" value="${module.jabber-notificator.basedir}/jabber-notificator/classes"/>

  <path id="jabber-notificator.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="jabber-notificator.module.classpath">
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${module.jabber-notificator.basedir}/jabber-notificator/lib/smack.jar"/>
    <pathelement location="${module.jabber-notificator.basedir}/jabber-notificator/lib/smackx.jar"/>
    <path refid="library.picocontainer.classpath"/>
    <path refid="library.log4j-1.2.12.classpath"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.jabber-notificator.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.jabber-notificator.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.jabber-notificator.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.jabber-notificator.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.jabber-notificator.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.jabber-notificator.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.jabber-notificator.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.jabber-notificator.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.jabber-notificator.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.idea.classpath"/>
  </path>


  <patternset id="excluded.from.module.jabber-notificator">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.jabber-notificator">
    <patternset refid="excluded.from.module.jabber-notificator"/>
  </patternset>

  <path id="jabber-notificator.module.sourcepath">
    <dirset dir="${module.jabber-notificator.basedir}/jabber-notificator">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.jabber-notificator" depends="compile.module.jabber-notificator.production,compile.module.jabber-notificator.tests" description="Compile module jabber-notificator"/>

  <target name="compile.module.jabber-notificator.production" depends="compile.module.common,compile.module.server,compile.module.server-model,compile.module.messages,compile.module.common-runtime" description="Compile module jabber-notificator; production classes">
    <mkdir dir="${jabber-notificator.output.dir}"/>
    <javac2 destdir="${jabber-notificator.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.jabber-notificator}"/>
      <bootclasspath refid="jabber-notificator.module.bootclasspath"/>
      <classpath refid="jabber-notificator.module.classpath"/>
      <src refid="jabber-notificator.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jabber-notificator"/>
    </javac2>

    <copy todir="${jabber-notificator.output.dir}">
      <fileset dir="${module.jabber-notificator.basedir}/jabber-notificator/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.jabber-notificator.tests" depends="compile.module.jabber-notificator.production" description="compile module jabber-notificator; test classes" unless="skip.tests"/>

  <target name="clean.module.jabber-notificator" description="cleanup module">
    <delete dir="${jabber-notificator.output.dir}"/>
    <delete dir="${jabber-notificator.testoutput.dir}"/>
  </target>


  <!-- Module server-side-inspections -->

  <dirname property="module.server-side-inspections.basedir" file="${ant.file}"/>



  <property name="compiler.args.server-side-inspections" value="${compiler.args}"/>

  <property name="server-side-inspections.output.dir" value="${module.server-side-inspections.basedir}/server-side-inspections/classes"/>
  <property name="server-side-inspections.testoutput.dir" value="${module.server-side-inspections.basedir}/server-side-inspections/classes"/>

  <path id="server-side-inspections.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="server-side-inspections.module.classpath">
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.server-side-inspections.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.server-side-inspections.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.server-side-inspections.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.server-side-inspections.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.server-side-inspections.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.server-side-inspections.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.server-side-inspections.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.server-side-inspections.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.server-side-inspections.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${inspections-util.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.server-side-inspections">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.server-side-inspections">
    <patternset refid="excluded.from.module.server-side-inspections"/>
  </patternset>

  <path id="server-side-inspections.module.sourcepath">
    <dirset dir="${module.server-side-inspections.basedir}/server-side-inspections">
      <include name="resources"/>
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.server-side-inspections" depends="compile.module.server-side-inspections.production,compile.module.server-side-inspections.tests" description="Compile module server-side-inspections"/>

  <target name="compile.module.server-side-inspections.production" depends="compile.module.common,compile.module.server,compile.module.server-openapi,compile.module.inspections-util,compile.module.messages" description="Compile module server-side-inspections; production classes">
    <mkdir dir="${server-side-inspections.output.dir}"/>
    <javac2 destdir="${server-side-inspections.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.server-side-inspections}"/>
      <bootclasspath refid="server-side-inspections.module.bootclasspath"/>
      <classpath refid="server-side-inspections.module.classpath"/>
      <src refid="server-side-inspections.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.server-side-inspections"/>
    </javac2>

    <copy todir="${server-side-inspections.output.dir}">
      <fileset dir="${module.server-side-inspections.basedir}/server-side-inspections/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.server-side-inspections.basedir}/server-side-inspections/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.server-side-inspections.tests" depends="compile.module.server-side-inspections.production" description="compile module server-side-inspections; test classes" unless="skip.tests"/>

  <target name="clean.module.server-side-inspections" description="cleanup module">
    <delete dir="${server-side-inspections.output.dir}"/>
    <delete dir="${server-side-inspections.testoutput.dir}"/>
  </target>


  <!-- Module inspections-runner -->

  <dirname property="module.inspections-runner.basedir" file="${ant.file}"/>



  <property name="compiler.args.inspections-runner" value="${compiler.args}"/>

  <property name="inspections-runner.output.dir" value="${module.inspections-runner.basedir}/inspections-runner/classes"/>
  <property name="inspections-runner.testoutput.dir" value="${module.inspections-runner.basedir}/inspections-runner/classes"/>

  <path id="inspections-runner.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="inspections-runner.module.classpath">
    <pathelement location="${agent.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.inspections-runner.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.inspections-runner.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.inspections-runner.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.inspections-runner.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.inspections-runner.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.inspections-runner.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.inspections-runner.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.inspections-runner.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.inspections-runner.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-side-inspections.output.dir}"/>
    <pathelement location="${inspections-util.output.dir}"/>
    <path refid="library.xstream.classpath"/>
  </path>


  <patternset id="excluded.from.module.inspections-runner">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.inspections-runner">
    <patternset refid="excluded.from.module.inspections-runner"/>
  </patternset>

  <path id="inspections-runner.module.sourcepath">
    <dirset dir="${module.inspections-runner.basedir}/inspections-runner">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.inspections-runner" depends="compile.module.inspections-runner.production,compile.module.inspections-runner.tests" description="Compile module inspections-runner"/>

  <target name="compile.module.inspections-runner.production" depends="compile.module.common,compile.module.runtime-util,compile.module.server-side-inspections,compile.module.inspections-util,compile.module.agent,compile.module.messages,compile.module.common-runtime" description="Compile module inspections-runner; production classes">
    <mkdir dir="${inspections-runner.output.dir}"/>
    <javac2 destdir="${inspections-runner.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.inspections-runner}"/>
      <bootclasspath refid="inspections-runner.module.bootclasspath"/>
      <classpath refid="inspections-runner.module.classpath"/>
      <src refid="inspections-runner.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.inspections-runner"/>
    </javac2>

    <copy todir="${inspections-runner.output.dir}">
      <fileset dir="${module.inspections-runner.basedir}/inspections-runner/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.inspections-runner.tests" depends="compile.module.inspections-runner.production" description="compile module inspections-runner; test classes" unless="skip.tests"/>

  <target name="clean.module.inspections-runner" description="cleanup module">
    <delete dir="${inspections-runner.output.dir}"/>
    <delete dir="${inspections-runner.testoutput.dir}"/>
  </target>


  <!-- Module BuildServer -->

  <dirname property="module.buildserver.basedir" file="${ant.file}"/>



  <property name="compiler.args.buildserver" value="${compiler.args}"/>

  <property name="buildserver.output.dir" value="${module.buildserver.basedir}/build/classes"/>
  <property name="buildserver.testoutput.dir" value="${module.buildserver.basedir}/build/classes"/>

  <path id="buildserver.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="buildserver.module.classpath">
    <pathelement location="${agent.output.dir}"/>
    <pathelement location="${ant-runner.output.dir}"/>
    <pathelement location="${ant-runtime.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.buildserver.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.buildserver.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.buildserver.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.buildserver.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.buildserver.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.buildserver.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.buildserver.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.buildserver.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.buildserver.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${coverage-agent.output.dir}"/>
    <pathelement location="${module.buildserver.basedir}/coverage-agent/lib/emma.jar"/>
    <pathelement location="${inspections-runner.output.dir}"/>
    <pathelement location="${maven-runner.output.dir}"/>
    <pathelement location="${maven-runtime.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <path refid="library.maven-2.1.classpath"/>
    <pathelement location="${inspections-util.output.dir}"/>
    <pathelement location="${msbuild-runner.output.dir}"/>
    <pathelement location="${nant-runner.output.dir}"/>
    <pathelement location="${solution2005-runner.output.dir}"/>
    <pathelement location="${idea-runner.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.buildserver">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.buildserver">
    <patternset refid="excluded.from.module.buildserver"/>
  </patternset>

  <path id="buildserver.module.sourcepath">
    <dirset dir="${module.buildserver.basedir}">
      <include name="build/src"/>
    </dirset>
  </path>


  <target name="compile.module.buildserver" depends="compile.module.buildserver.production,compile.module.buildserver.tests" description="Compile module BuildServer"/>

  <target name="compile.module.buildserver.production" depends="compile.module.server,compile.module.common,compile.module.maven-runner,compile.module.ant-runtime,compile.module.nant-runner,compile.module.inspections-util,compile.module.idea-runner,compile.module.msbuild-runner,compile.module.ant-runner,compile.module.solution2005-runner,compile.module.coverage-agent,compile.module.agent,compile.module.inspections-runner,compile.module.maven-runtime,compile.module.common-runtime" description="Compile module BuildServer; production classes">
    <mkdir dir="${buildserver.output.dir}"/>
    <javac2 destdir="${buildserver.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.buildserver}"/>
      <bootclasspath refid="buildserver.module.bootclasspath"/>
      <classpath refid="buildserver.module.classpath"/>
      <src refid="buildserver.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.buildserver"/>
    </javac2>

    <copy todir="${buildserver.output.dir}">
      <fileset dir="${module.buildserver.basedir}/build/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.buildserver.tests" depends="compile.module.buildserver.production" description="compile module BuildServer; test classes" unless="skip.tests"/>

  <target name="clean.module.buildserver" description="cleanup module">
    <delete dir="${buildserver.output.dir}"/>
    <delete dir="${buildserver.testoutput.dir}"/>
  </target>


  <!-- Module agentInstaller -->

  <dirname property="module.agentinstaller.basedir" file="${ant.file}"/>



  <property name="compiler.args.agentinstaller" value="${compiler.args}"/>

  <property name="agentinstaller.output.dir" value="${module.agentinstaller.basedir}/agentInstaller/classes"/>
  <property name="agentinstaller.testoutput.dir" value="${module.agentinstaller.basedir}/agentInstaller/classes"/>

  <path id="agentinstaller.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="agentinstaller.module.classpath">
    <pathelement location="${module.agentinstaller.basedir}/agentInstaller/lib/standalone-compiler.jar"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.idea.classpath"/>
  </path>


  <patternset id="excluded.from.module.agentinstaller">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.agentinstaller">
    <patternset refid="excluded.from.module.agentinstaller"/>
  </patternset>

  <path id="agentinstaller.module.sourcepath">
    <dirset dir="${module.agentinstaller.basedir}/agentInstaller">
      <include name="src"/>
    </dirset>
  </path>

  <path id="agentinstaller.module.test.sourcepath">
    <dirset dir="${module.agentinstaller.basedir}/agentInstaller">
      <include name="testSource"/>
    </dirset>
  </path>


  <target name="compile.module.agentinstaller" depends="compile.module.agentinstaller.production,compile.module.agentinstaller.tests" description="Compile module agentInstaller"/>

  <target name="compile.module.agentinstaller.production" description="Compile module agentInstaller; production classes">
    <mkdir dir="${agentinstaller.output.dir}"/>
    <javac2 destdir="${agentinstaller.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.agentinstaller}"/>
      <bootclasspath refid="agentinstaller.module.bootclasspath"/>
      <classpath refid="agentinstaller.module.classpath"/>
      <src refid="agentinstaller.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.agentinstaller"/>
    </javac2>

    <copy todir="${agentinstaller.output.dir}">
      <fileset dir="${module.agentinstaller.basedir}/agentInstaller/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.agentinstaller.tests" depends="compile.module.agentinstaller.production" description="compile module agentInstaller; test classes" unless="skip.tests">
    <mkdir dir="${agentinstaller.testoutput.dir}"/>
    <javac2 destdir="${agentinstaller.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.agentinstaller}"/>
      <classpath refid="agentinstaller.module.classpath"/>
      <classpath location="${agentinstaller.output.dir}"/>
      <src refid="agentinstaller.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.agentinstaller"/>
    </javac2>

    <copy todir="${agentinstaller.testoutput.dir}">
      <fileset dir="${module.agentinstaller.basedir}/agentInstaller/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.agentinstaller" description="cleanup module">
    <delete dir="${agentinstaller.output.dir}"/>
    <delete dir="${agentinstaller.testoutput.dir}"/>
  </target>


  <!-- Module agentInstaller-UI -->

  <dirname property="module.agentinstaller-ui.basedir" file="${ant.file}"/>



  <property name="compiler.args.agentinstaller-ui" value="${compiler.args}"/>

  <property name="agentinstaller-ui.output.dir" value="${module.agentinstaller-ui.basedir}/agentInstaller-UI/classes"/>
  <property name="agentinstaller-ui.testoutput.dir" value="${module.agentinstaller-ui.basedir}/agentInstaller-UI/classes"/>

  <path id="agentinstaller-ui.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="agentinstaller-ui.module.classpath">
    <pathelement location="${jdk-searcher.output.dir}"/>
    <pathelement location="${agentinstaller.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.agentinstaller-ui">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.agentinstaller-ui">
    <patternset refid="excluded.from.module.agentinstaller-ui"/>
  </patternset>

  <path id="agentinstaller-ui.module.sourcepath">
    <dirset dir="${module.agentinstaller-ui.basedir}/agentInstaller-UI">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.agentinstaller-ui" depends="compile.module.agentinstaller-ui.production,compile.module.agentinstaller-ui.tests" description="Compile module agentInstaller-UI"/>

  <target name="compile.module.agentinstaller-ui.production" depends="compile.module.jdk-searcher,compile.module.agentinstaller" description="Compile module agentInstaller-UI; production classes">
    <mkdir dir="${agentinstaller-ui.output.dir}"/>
    <javac2 destdir="${agentinstaller-ui.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.agentinstaller-ui}"/>
      <bootclasspath refid="agentinstaller-ui.module.bootclasspath"/>
      <classpath refid="agentinstaller-ui.module.classpath"/>
      <src refid="agentinstaller-ui.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.agentinstaller-ui"/>
    </javac2>

    <copy todir="${agentinstaller-ui.output.dir}">
      <fileset dir="${module.agentinstaller-ui.basedir}/agentInstaller-UI/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.agentinstaller-ui.tests" depends="compile.module.agentinstaller-ui.production" description="compile module agentInstaller-UI; test classes" unless="skip.tests"/>

  <target name="clean.module.agentinstaller-ui" description="cleanup module">
    <delete dir="${agentinstaller-ui.output.dir}"/>
    <delete dir="${agentinstaller-ui.testoutput.dir}"/>
  </target>


  <!-- Module test -->

  <dirname property="module.test.basedir" file="${ant.file}"/>



  <property name="compiler.args.test" value="${compiler.args}"/>

  <property name="test.output.dir" value="${module.test.basedir}/test/classes"/>
  <property name="test.testoutput.dir" value="${module.test.basedir}/test/classes"/>

  <path id="test.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="test.module.classpath">
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${agent.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.test.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.test.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.test.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.test.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.test.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.test.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.test.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.test.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.test.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.picocontainer.classpath"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <pathelement location="${ant-runtime.output.dir}"/>
    <pathelement location="${ant-runner.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
    <path refid="library.xstream.classpath"/>
    <pathelement location="${patches.output.dir}"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${email-notificator.output.dir}"/>
    <pathelement location="${jabber-notificator.output.dir}"/>
    <pathelement location="${module.test.basedir}/jabber-notificator/lib/smack.jar"/>
    <pathelement location="${launcher.output.dir}"/>
    <pathelement location="${patches-impl.output.dir}"/>
    <path refid="library.ant.classpath"/>
    <pathelement location="${ant-server-logging.output.dir}"/>
    <pathelement location="${utils.output.dir}"/>
    <pathelement location="${remote-server-proxy.output.dir}"/>
    <pathelement location="${license-common.output.dir}"/>
    <pathelement location="${license-keygen.output.dir}"/>
    <pathelement location="${inspections-runner.output.dir}"/>
    <pathelement location="${server-side-inspections.output.dir}"/>
    <pathelement location="${coverage-agent.output.dir}"/>
    <pathelement location="${module.test.basedir}/coverage-agent/lib/emma.jar"/>
    <path refid="library.idea-classpath.classpath"/>
    <pathelement location="${coverage-server.output.dir}"/>
    <pathelement location="${ant-runner-server.output.dir}"/>
    <pathelement location="${maven-runner-server.output.dir}"/>
    <pathelement location="${msbuild-runner-server.output.dir}"/>
    <pathelement location="${nant-runner-server.output.dir}"/>
    <pathelement location="${module.test.basedir}/agent/lib/commons-httpclient-3.0-rc4.jar"/>
    <path refid="library.database.classpath"/>
    <pathelement location="${inspections-util.output.dir}"/>
    <path refid="library.commons-dbcp.classpath"/>
    <pathelement location="${msbuild-runner.output.dir}"/>
    <pathelement location="${nant-runner.output.dir}"/>
    <pathelement location="${solution2005-runner.output.dir}"/>
    <pathelement location="${dotnetcommon-runtime.output.dir}"/>
    <path refid="library.spring.classpath"/>
    <pathelement location="${ntdomain-login.output.dir}"/>
    <pathelement location="${idea-runner.output.dir}"/>
    <pathelement location="${idea-runner-server.output.dir}"/>
    <pathelement location="${win32-notificator.output.dir}"/>
    <pathelement location="${jdk-searcher.output.dir}"/>
    <pathelement location="${agentinstaller.output.dir}"/>
    <pathelement location="${agentinstaller-ui.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.test">
    <patternset refid="ignored.files"/>
    <exclude name="jetbrains/mavenRunner/**"/>
  </patternset>

  <patternset id="excluded.from.compilation.test">
    <patternset refid="excluded.from.module.test"/>
  </patternset>

  <path id="test.module.test.sourcepath">
    <dirset dir="${module.test.basedir}/test">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.test" depends="compile.module.test.production,compile.module.test.tests" description="Compile module test"/>

  <target name="compile.module.test.production" depends="compile.module.common,compile.module.license-common,compile.module.ant-runtime,compile.module.nant-runner,compile.module.license-keygen,compile.module.inspections-util,compile.module.coverage-server,compile.module.remote-server-proxy,compile.module.jabber-notificator,compile.module.messages,compile.module.nant-runner-server,compile.module.patches-impl,compile.module.server-side-inspections,compile.module.server-openapi,compile.module.msbuild-runner,compile.module.jdk-searcher,compile.module.ntdomain-login,compile.module.dotnetcommon-runtime,compile.module.ant-runner-server,compile.module.utils,compile.module.coverage-agent,compile.module.launcher,compile.module.ant-server-logging,compile.module.msbuild-runner-server,compile.module.server,compile.module.email-notificator,compile.module.patches,compile.module.server-model,compile.module.runtime-util,compile.module.agentinstaller,compile.module.idea-runner-server,compile.module.win32-notificator,compile.module.maven-runner-server,compile.module.idea-runner,compile.module.xml-rpc-wrapper,compile.module.agentinstaller-ui,compile.module.ant-runner,compile.module.solution2005-runner,compile.module.agent,compile.module.inspections-runner,compile.module.common-runtime" description="Compile module test; production classes"/>

  <target name="compile.module.test.tests" depends="compile.module.test.production" description="compile module test; test classes" unless="skip.tests">
    <mkdir dir="${test.testoutput.dir}"/>
    <javac2 destdir="${test.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.test}"/>
      <classpath refid="test.module.classpath"/>
      <classpath location="${test.output.dir}"/>
      <src refid="test.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.test"/>
    </javac2>

    <copy todir="${test.testoutput.dir}">
      <fileset dir="${module.test.basedir}/test/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.test" description="cleanup module">
    <delete dir="${test.output.dir}"/>
    <delete dir="${test.testoutput.dir}"/>
  </target>


  <!-- Module inspection-tests -->

  <dirname property="module.inspection-tests.basedir" file="${ant.file}"/>



  <property name="compiler.args.inspection-tests" value="${compiler.args}"/>

  <property name="inspection-tests.output.dir" value="${module.inspection-tests.basedir}/inspection-tests/classes"/>
  <property name="inspection-tests.testoutput.dir" value="${module.inspection-tests.basedir}/inspection-tests/classes"/>

  <path id="inspection-tests.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="inspection-tests.module.classpath">
    <pathelement location="${test.output.dir}"/>
    <pathelement location="${build-server4idea_sources.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${utils.output.dir}"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${remote-server-proxy.output.dir}"/>
    <pathelement location="${server-side-inspections.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.inspection-tests.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.inspection-tests.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.inspection-tests.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.inspection-tests.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.inspection-tests.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.inspection-tests.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.inspection-tests.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.inspection-tests.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.inspection-tests.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${license-common.output.dir}"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <pathelement location="${inspections-util.output.dir}"/>
    <path refid="library.database.classpath"/>
  </path>


  <patternset id="excluded.from.module.inspection-tests">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.inspection-tests">
    <patternset refid="excluded.from.module.inspection-tests"/>
  </patternset>

  <path id="inspection-tests.module.test.sourcepath">
    <dirset dir="${module.inspection-tests.basedir}/inspection-tests">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.inspection-tests" depends="compile.module.inspection-tests.production,compile.module.inspection-tests.tests" description="Compile module inspection-tests"/>

  <target name="compile.module.inspection-tests.production" depends="compile.module.common,compile.module.server,compile.module.server-model,compile.module.server-openapi,compile.module.xml-rpc-wrapper,compile.module.build-server4idea_sources,compile.module.server-side-inspections,compile.module.test,compile.module.license-common,compile.module.utils,compile.module.inspections-util,compile.module.remote-server-proxy" description="Compile module inspection-tests; production classes"/>

  <target name="compile.module.inspection-tests.tests" depends="compile.module.inspection-tests.production" description="compile module inspection-tests; test classes" unless="skip.tests">
    <mkdir dir="${inspection-tests.testoutput.dir}"/>
    <javac2 destdir="${inspection-tests.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.inspection-tests}"/>
      <classpath refid="inspection-tests.module.classpath"/>
      <classpath location="${inspection-tests.output.dir}"/>
      <src refid="inspection-tests.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.inspection-tests"/>
    </javac2>

    <copy todir="${inspection-tests.testoutput.dir}">
      <fileset dir="${module.inspection-tests.basedir}/inspection-tests/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.inspection-tests" description="cleanup module">
    <delete dir="${inspection-tests.output.dir}"/>
    <delete dir="${inspection-tests.testoutput.dir}"/>
  </target>


  <!-- Module patches-tests -->

  <dirname property="module.patches-tests.basedir" file="${ant.file}"/>



  <property name="compiler.args.patches-tests" value="${compiler.args}"/>

  <property name="patches-tests.output.dir" value="${module.patches-tests.basedir}/patches-tests/classes"/>
  <property name="patches-tests.testoutput.dir" value="${module.patches-tests.basedir}/patches-tests/classes"/>

  <path id="patches-tests.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="patches-tests.module.classpath">
    <pathelement location="${patches.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${test.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${patches-impl.output.dir}"/>
    <pathelement location="${utils.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.patches-tests">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.patches-tests">
    <patternset refid="excluded.from.module.patches-tests"/>
  </patternset>

  <path id="patches-tests.module.test.sourcepath">
    <dirset dir="${module.patches-tests.basedir}/patches-tests">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.patches-tests" depends="compile.module.patches-tests.production,compile.module.patches-tests.tests" description="Compile module patches-tests"/>

  <target name="compile.module.patches-tests.production" depends="compile.module.patches,compile.module.test,compile.module.utils,compile.module.patches-impl" description="Compile module patches-tests; production classes"/>

  <target name="compile.module.patches-tests.tests" depends="compile.module.patches-tests.production" description="compile module patches-tests; test classes" unless="skip.tests">
    <mkdir dir="${patches-tests.testoutput.dir}"/>
    <javac2 destdir="${patches-tests.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.patches-tests}"/>
      <classpath refid="patches-tests.module.classpath"/>
      <classpath location="${patches-tests.output.dir}"/>
      <src refid="patches-tests.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.patches-tests"/>
    </javac2>

    <copy todir="${patches-tests.testoutput.dir}">
      <fileset dir="${module.patches-tests.basedir}/patches-tests/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.patches-tests" description="cleanup module">
    <delete dir="${patches-tests.output.dir}"/>
    <delete dir="${patches-tests.testoutput.dir}"/>
  </target>


  <!-- Module perforce-test -->

  <dirname property="module.perforce-test.basedir" file="${ant.file}"/>



  <property name="compiler.args.perforce-test" value="${compiler.args}"/>

  <property name="perforce-test.output.dir" value="${module.perforce-test.basedir}/perforce-test/classes"/>
  <property name="perforce-test.testoutput.dir" value="${module.perforce-test.basedir}/perforce-test/classes"/>

  <path id="perforce-test.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="perforce-test.module.classpath">
    <path refid="library.junit.classpath"/>
    <pathelement location="${perforce.output.dir}"/>
    <pathelement location="${patches.output.dir}"/>
    <pathelement location="${patches-impl.output.dir}"/>
    <pathelement location="${patches-tests.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${module.perforce-test.basedir}/perforce/lib/perforce_util.jar"/>
  </path>


  <patternset id="excluded.from.module.perforce-test">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.perforce-test">
    <patternset refid="excluded.from.module.perforce-test"/>
  </patternset>

  <path id="perforce-test.module.test.sourcepath">
    <dirset dir="${module.perforce-test.basedir}/perforce-test">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.perforce-test" depends="compile.module.perforce-test.production,compile.module.perforce-test.tests" description="Compile module perforce-test"/>

  <target name="compile.module.perforce-test.production" depends="compile.module.server,compile.module.server-model,compile.module.patches,compile.module.patches-tests,compile.module.perforce,compile.module.patches-impl" description="Compile module perforce-test; production classes"/>

  <target name="compile.module.perforce-test.tests" depends="compile.module.perforce-test.production" description="compile module perforce-test; test classes" unless="skip.tests">
    <mkdir dir="${perforce-test.testoutput.dir}"/>
    <javac2 destdir="${perforce-test.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.perforce-test}"/>
      <classpath refid="perforce-test.module.classpath"/>
      <classpath location="${perforce-test.output.dir}"/>
      <src refid="perforce-test.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.perforce-test"/>
    </javac2>

    <copy todir="${perforce-test.testoutput.dir}">
      <fileset dir="${module.perforce-test.basedir}/perforce-test/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.perforce-test" description="cleanup module">
    <delete dir="${perforce-test.output.dir}"/>
    <delete dir="${perforce-test.testoutput.dir}"/>
  </target>


  <!-- Module cvs-support-tests -->

  <dirname property="module.cvs-support-tests.basedir" file="${ant.file}"/>



  <property name="compiler.args.cvs-support-tests" value="${compiler.args}"/>

  <property name="cvs-support-tests.output.dir" value="${module.cvs-support-tests.basedir}/cvs-support-tests/classes"/>
  <property name="cvs-support-tests.testoutput.dir" value="${module.cvs-support-tests.basedir}/cvs-support-tests/classes"/>

  <path id="cvs-support-tests.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="cvs-support-tests.module.classpath">
    <pathelement location="${cvs-support.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${patches-tests.output.dir}"/>
    <pathelement location="${patches-impl.output.dir}"/>
    <pathelement location="${patches.output.dir}"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/sshtools-scp.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/cvs_util.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/sshtools-net.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/sshtools-zlib.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/maverick-sftp.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/sshtools-cipher.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/maverick.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/sshtools-sftp.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/maverick-ssh2.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/javacvs.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/sshtools-util.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/sshtools-publickey.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/maverick-ssh1.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/cvs-support/lib/sshtools-ant.jar"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${test.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.cvs-support-tests.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.cvs-support-tests.basedir}/tools/idea/lib/idea.jar"/>
  </path>


  <patternset id="excluded.from.module.cvs-support-tests">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.cvs-support-tests">
    <patternset refid="excluded.from.module.cvs-support-tests"/>
  </patternset>

  <path id="cvs-support-tests.module.test.sourcepath">
    <dirset dir="${module.cvs-support-tests.basedir}/cvs-support-tests">
      <include name="testSrc"/>
    </dirset>
  </path>


  <target name="compile.module.cvs-support-tests" depends="compile.module.cvs-support-tests.production,compile.module.cvs-support-tests.tests" description="Compile module cvs-support-tests"/>

  <target name="compile.module.cvs-support-tests.production" depends="compile.module.common,compile.module.server,compile.module.server-model,compile.module.patches,compile.module.test,compile.module.patches-tests,compile.module.cvs-support,compile.module.patches-impl" description="Compile module cvs-support-tests; production classes"/>

  <target name="compile.module.cvs-support-tests.tests" depends="compile.module.cvs-support-tests.production" description="compile module cvs-support-tests; test classes" unless="skip.tests">
    <mkdir dir="${cvs-support-tests.testoutput.dir}"/>
    <javac2 destdir="${cvs-support-tests.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.cvs-support-tests}"/>
      <classpath refid="cvs-support-tests.module.classpath"/>
      <classpath location="${cvs-support-tests.output.dir}"/>
      <src refid="cvs-support-tests.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.cvs-support-tests"/>
    </javac2>

    <copy todir="${cvs-support-tests.testoutput.dir}">
      <fileset dir="${module.cvs-support-tests.basedir}/cvs-support-tests/testSrc">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.cvs-support-tests" description="cleanup module">
    <delete dir="${cvs-support-tests.output.dir}"/>
    <delete dir="${cvs-support-tests.testoutput.dir}"/>
  </target>


  <!-- Module build-server4idea-tests -->

  <dirname property="module.build-server4idea-tests.basedir" file="${ant.file}"/>



  <property name="compiler.args.build-server4idea-tests" value="${compiler.args}"/>

  <property name="build-server4idea-tests.output.dir" value="${module.build-server4idea-tests.basedir}/build-server4idea-tests/classes"/>
  <property name="build-server4idea-tests.testoutput.dir" value="${module.build-server4idea-tests.basedir}/build-server4idea-tests/classes"/>

  <path id="build-server4idea-tests.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="build-server4idea-tests.module.classpath">
    <path refid="library.junit.classpath"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${test.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.build-server4idea-tests.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.build-server4idea-tests.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.build-server4idea-tests.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.build-server4idea-tests.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.build-server4idea-tests.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.build-server4idea-tests.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.build-server4idea-tests.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.build-server4idea-tests.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.build-server4idea-tests.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${build-server4idea_sources.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.build-server4idea-tests">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.build-server4idea-tests">
    <patternset refid="excluded.from.module.build-server4idea-tests"/>
  </patternset>

  <path id="build-server4idea-tests.module.test.sourcepath">
    <dirset dir="${module.build-server4idea-tests.basedir}/build-server4idea-tests">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.build-server4idea-tests" depends="compile.module.build-server4idea-tests.production,compile.module.build-server4idea-tests.tests" description="Compile module build-server4idea-tests"/>

  <target name="compile.module.build-server4idea-tests.production" depends="compile.module.common,compile.module.server,compile.module.server-model,compile.module.server-openapi,compile.module.build-server4idea_sources,compile.module.test" description="Compile module build-server4idea-tests; production classes"/>

  <target name="compile.module.build-server4idea-tests.tests" depends="compile.module.build-server4idea-tests.production" description="compile module build-server4idea-tests; test classes" unless="skip.tests">
    <mkdir dir="${build-server4idea-tests.testoutput.dir}"/>
    <javac2 destdir="${build-server4idea-tests.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.build-server4idea-tests}"/>
      <classpath refid="build-server4idea-tests.module.classpath"/>
      <classpath location="${build-server4idea-tests.output.dir}"/>
      <src refid="build-server4idea-tests.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.build-server4idea-tests"/>
    </javac2>

    <copy todir="${build-server4idea-tests.testoutput.dir}">
      <fileset dir="${module.build-server4idea-tests.basedir}/build-server4idea-tests/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.build-server4idea-tests" description="cleanup module">
    <delete dir="${build-server4idea-tests.output.dir}"/>
    <delete dir="${build-server4idea-tests.testoutput.dir}"/>
  </target>


  <!-- Module svn-test -->

  <dirname property="module.svn-test.basedir" file="${ant.file}"/>



  <property name="compiler.args.svn-test" value="${compiler.args}"/>

  <property name="svn-test.output.dir" value="${module.svn-test.basedir}/svn-test/classes"/>
  <property name="svn-test.testoutput.dir" value="${module.svn-test.basedir}/svn-test/classes"/>

  <path id="svn-test.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="svn-test.module.classpath">
    <pathelement location="${svn.output.dir}"/>
    <pathelement location="${test.output.dir}"/>
    <path refid="library.svn.classpath"/>
    <pathelement location="${patches-tests.output.dir}"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${patches-impl.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${patches.output.dir}"/>
    <path refid="library.idea.classpath"/>
  </path>


  <patternset id="excluded.from.module.svn-test">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.svn-test">
    <patternset refid="excluded.from.module.svn-test"/>
  </patternset>

  <path id="svn-test.module.test.sourcepath">
    <dirset dir="${module.svn-test.basedir}/svn-test">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.svn-test" depends="compile.module.svn-test.production,compile.module.svn-test.tests" description="Compile module svn-test"/>

  <target name="compile.module.svn-test.production" depends="compile.module.server,compile.module.server-model,compile.module.patches,compile.module.test,compile.module.patches-tests,compile.module.svn,compile.module.patches-impl" description="Compile module svn-test; production classes"/>

  <target name="compile.module.svn-test.tests" depends="compile.module.svn-test.production" description="compile module svn-test; test classes" unless="skip.tests">
    <mkdir dir="${svn-test.testoutput.dir}"/>
    <javac2 destdir="${svn-test.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.svn-test}"/>
      <classpath refid="svn-test.module.classpath"/>
      <classpath location="${svn-test.output.dir}"/>
      <src refid="svn-test.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.svn-test"/>
    </javac2>

    <copy todir="${svn-test.testoutput.dir}">
      <fileset dir="${module.svn-test.basedir}/svn-test/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.svn-test" description="cleanup module">
    <delete dir="${svn-test.output.dir}"/>
    <delete dir="${svn-test.testoutput.dir}"/>
  </target>


  <!-- Module web -->

  <dirname property="module.web.basedir" file="${ant.file}"/>



  <property name="compiler.args.web" value="${compiler.args}"/>

  <property name="web.output.dir" value="${module.web.basedir}/web/classes"/>
  <property name="web.testoutput.dir" value="${module.web.basedir}/web/classes"/>

  <path id="web.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="web.module.classpath">
    <pathelement location="${module.web.basedir}/web/lib/standard.jar"/>
    <pathelement location="${module.web.basedir}/web/lib/jstl.jar"/>
    <pathelement location="${module.web.basedir}/web/lib/jnlp.jar"/>
    <pathelement location="${module.web.basedir}/web/lib/jnlp-servlet.jar"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.commons-beanutils-core.classpath"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.xmlrpc-2.0.classpath"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.web.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.web.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.web.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.web.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.web.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.web.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.web.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.web.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.web.basedir}/tools/idea/lib/idea.jar"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <path refid="library.xstream.classpath"/>
    <pathelement location="${agentinstaller.output.dir}"/>
    <pathelement location="${patches.output.dir}"/>
    <pathelement location="${patches-impl.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${cvs-support.output.dir}"/>
    <pathelement location="${email-notificator.output.dir}"/>
    <pathelement location="${jabber-notificator.output.dir}"/>
    <pathelement location="${module.web.basedir}/jabber-notificator/lib/smack.jar"/>
    <pathelement location="${perforce.output.dir}"/>
    <pathelement location="${svn.output.dir}"/>
    <path refid="library.database.classpath"/>
    <path refid="library.spring.classpath"/>
    <pathelement location="${web-openapi.output.dir}"/>
    <pathelement location="${artefacts.output.dir}"/>
    <pathelement location="${ntdomain-login.output.dir}"/>
    <pathelement location="${license-common.output.dir}"/>
    <pathelement location="${server-side-inspections.output.dir}"/>
    <pathelement location="${coverage-server.output.dir}"/>
    <pathelement location="${ant-runner-server.output.dir}"/>
    <pathelement location="${maven-runner-server.output.dir}"/>
    <pathelement location="${msbuild-runner-server.output.dir}"/>
    <pathelement location="${nant-runner-server.output.dir}"/>
    <pathelement location="${utils.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <pathelement location="${inspections-util.output.dir}"/>
    <path refid="library.commons-dbcp.classpath"/>
    <pathelement location="${xml-rpc-wrapper.output.dir}"/>
    <pathelement location="${solution2005-runner-server.output.dir}"/>
    <pathelement location="${win32-notificator.output.dir}"/>
    <pathelement location="${idea-runner-server.output.dir}"/>
    <path refid="library.tomcat-local.classpath"/>
  </path>


  <patternset id="excluded.from.module.web">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.web">
    <patternset refid="excluded.from.module.web"/>
  </patternset>

  <path id="web.module.sourcepath">
    <dirset dir="${module.web.basedir}/web">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.web" depends="compile.module.web.production,compile.module.web.tests" description="Compile module web"/>

  <target name="compile.module.web.production" depends="compile.module.common,compile.module.license-common,compile.module.inspections-util,compile.module.coverage-server,compile.module.jabber-notificator,compile.module.nant-runner-server,compile.module.messages,compile.module.solution2005-runner-server,compile.module.patches-impl,compile.module.server-openapi,compile.module.server-side-inspections,compile.module.ntdomain-login,compile.module.utils,compile.module.ant-runner-server,compile.module.svn,compile.module.msbuild-runner-server,compile.module.server,compile.module.email-notificator,compile.module.patches,compile.module.server-model,compile.module.runtime-util,compile.module.web-openapi,compile.module.perforce,compile.module.agentinstaller,compile.module.idea-runner-server,compile.module.win32-notificator,compile.module.cvs-support,compile.module.maven-runner-server,compile.module.artefacts,compile.module.xml-rpc-wrapper,compile.module.common-runtime" description="Compile module web; production classes">
    <mkdir dir="${web.output.dir}"/>
    <javac2 destdir="${web.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.web}"/>
      <bootclasspath refid="web.module.bootclasspath"/>
      <classpath refid="web.module.classpath"/>
      <src refid="web.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.web"/>
    </javac2>

    <copy todir="${web.output.dir}">
      <fileset dir="${module.web.basedir}/web/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.web.tests" depends="compile.module.web.production" description="compile module web; test classes" unless="skip.tests"/>

  <target name="clean.module.web" description="cleanup module">
    <delete dir="${web.output.dir}"/>
    <delete dir="${web.testoutput.dir}"/>
  </target>

  <property name="web.dir.exploded" value="${module.web.basedir}/web/exploded"/>
  <target name="j2ee.build.web" depends="compile.module.web, compile.module.ant-runner-server, compile.module.artefacts, compile.module.common, compile.module.common-runtime, compile.module.coverage-server, compile.module.cvs-support, compile.module.email-notificator, compile.module.idea-runner-server, compile.module.inspections-util, compile.module.jabber-notificator, compile.module.license-common, compile.module.maven-runner-server, compile.module.messages, compile.module.msbuild-runner-server, compile.module.nant-runner-server, compile.module.ntdomain-login, compile.module.patches, compile.module.patches-impl, compile.module.perforce, compile.module.runtime-util, compile.module.server, compile.module.server-model, compile.module.server-openapi, compile.module.server-side-inspections, compile.module.solution2005-runner-server, compile.module.svn, compile.module.utils, compile.module.web-openapi, compile.module.win32-notificator, compile.module.xml-rpc-wrapper" description="Build configured Java EE directories and archives for module 'web'">
    <antcall target="j2ee.build.exploded.web">
      <param name="j2ee.dir.exploded" value="${web.dir.exploded}"/>
    </antcall>
  </target>
  <target name="j2ee.build.exploded.web" description="Build exploded directory for module 'web'">
    <copy file="${module.web.basedir}/web/META-INF/context.xml" tofile="${j2ee.dir.exploded}/META-INF/context.xml"/>
    <copy file="${module.web.basedir}/web/META-INF/context.xml" tofile="${j2ee.dir.exploded}/WEB-INF/context.xml"/>
    <copy file="${module.web.basedir}/web/WEB-INF/web.xml" tofile="${j2ee.dir.exploded}/WEB-INF/web.xml"/>
    <copy file="${module.web.basedir}/lib/xstream-1.1.2.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/xstream-1.1.2.jar"/>
    <copy file="${module.web.basedir}/lib/xpp3_min-1.1.3.4.M.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/xpp3_min-1.1.3.4.M.jar"/>
    <copy file="${module.web.basedir}/lib/xmlrpc-2.0.1.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/xmlrpc-2.0.1.jar"/>
    <copy file="${module.web.basedir}/lib/commons-codec-1.3.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/commons-codec-1.3.jar"/>
    <copy file="${module.web.basedir}/svn/lib/javasvn.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/javasvn.jar"/>
    <copy file="${module.web.basedir}/web/lib/spring.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/spring.jar"/>
    <copy file="${module.web.basedir}/lib/nanocontainer-1.0-RC-1.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/nanocontainer-1.0-RC-1.jar"/>
    <copy file="${module.web.basedir}/lib/picocontainer-1.1.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/picocontainer-1.1.jar"/>
    <copy file="${module.web.basedir}/lib/jmock-SNAPSHOT.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/jmock-SNAPSHOT.jar"/>
    <copy file="${module.web.basedir}/lib/junit-3.8.1.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/junit-3.8.1.jar"/>
    <copy file="${module.web.basedir}/lib/jdom.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/jdom.jar"/>
    <copy file="${module.web.basedir}/tools/idea/lib/idea.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/idea.jar"/>
    <copy file="${module.web.basedir}/tools/idea/lib/resources_en.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/resources_en.jar"/>
    <copy file="${module.web.basedir}/tools/idea/lib/extensions.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/extensions.jar"/>
    <copy file="${module.web.basedir}/tools/idea/lib/annotations.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/annotations.jar"/>
    <copy file="${module.web.basedir}/tools/idea/lib/resources.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/resources.jar"/>
    <copy file="${module.web.basedir}/tools/idea/lib/openapi.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/openapi.jar"/>
    <copy file="${module.web.basedir}/tools/idea/lib/trove4j.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/trove4j.jar"/>
    <copy file="${module.web.basedir}/tools/idea/lib/jdom.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/jdom.jar"/>
    <copy file="${module.web.basedir}/lib/log4j-1.2.12.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/log4j-1.2.12.jar"/>
    <copy file="${module.web.basedir}/lib/mysql-connector-java-3.1.13-bin.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/mysql-connector-java-3.1.13-bin.jar"/>
    <copy file="${module.web.basedir}/lib/h2.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/h2.jar"/>
    <copy file="${module.web.basedir}/lib/hsqldb.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/hsqldb.jar"/>
    <copy file="${module.web.basedir}/lib/commons-collections-3.2.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/commons-collections-3.2.jar"/>
    <copy file="${module.web.basedir}/lib/commons-pool-1.3.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/commons-pool-1.3.jar"/>
    <copy file="${module.web.basedir}/lib/commons-dbcp-1.2.1.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/commons-dbcp-1.2.1.jar"/>
    <copy file="${module.web.basedir}/lib/commons-logging.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/commons-logging.jar"/>
    <copy file="${module.web.basedir}/lib/commons-beanutils-core.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/commons-beanutils-core.jar"/>
    <copy file="${module.web.basedir}/web/lib/standard.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/standard.jar"/>
    <copy file="${module.web.basedir}/web/lib/jstl.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/jstl.jar"/>
    <copy file="${module.web.basedir}/web/lib/jnlp.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/jnlp.jar"/>
    <copy file="${module.web.basedir}/web/lib/jnlp-servlet.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/jnlp-servlet.jar"/>
    <copy file="${module.web.basedir}/web/lib/commons-fileupload-1.0.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/commons-fileupload-1.0.jar"/>
    <copy file="${module.web.basedir}/svn/lib/ganymed.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/ganymed.jar"/>
    <copy file="${module.web.basedir}/perforce/lib/perforce_util.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/perforce_util.jar"/>
    <copy file="${module.web.basedir}/lib/shaj-0.5.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/shaj-0.5.jar"/>
    <copy file="${module.web.basedir}/lib/mail.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/mail.jar"/>
    <copy file="${module.web.basedir}/lib/annotations.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/annotations.jar"/>
    <copy file="${module.web.basedir}/lib/activation.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/activation.jar"/>
    <copy file="${module.web.basedir}/jabber-notificator/lib/smackx.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/smackx.jar"/>
    <copy file="${module.web.basedir}/jabber-notificator/lib/smack.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/smack.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/sshtools-zlib.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/sshtools-zlib.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/sshtools-util.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/sshtools-util.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/sshtools-sftp.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/sshtools-sftp.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/sshtools-scp.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/sshtools-scp.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/sshtools-publickey.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/sshtools-publickey.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/sshtools-net.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/sshtools-net.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/sshtools-cipher.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/sshtools-cipher.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/sshtools-ant.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/sshtools-ant.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/resources_en.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/cvs_resources_en.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/maverick.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/maverick.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/maverick-ssh2.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/maverick-ssh2.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/maverick-ssh1.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/maverick-ssh1.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/maverick-sftp.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/maverick-sftp.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/javacvs.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/javacvs.jar"/>
    <copy file="${module.web.basedir}/cvs-support/lib/cvs_util.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/cvs_util.jar"/>
    <copy file="${module.web.basedir}/agentInstaller/lib/standalone-compiler.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/standalone-compiler.jar"/>
    <copy file="${module.web.basedir}/agent/lib/commons-httpclient-3.0-rc4.jar" tofile="${j2ee.dir.exploded}/WEB-INF/lib/commons-httpclient-3.0-rc4.jar"/>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/xml-rpc-wrapper.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/xml-rpc-wrapper.jar" duplicate="preserve">
      <fileset dir="${module.xml-rpc-wrapper.basedir}/xml-rpc-wrapper/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/win32-notificator.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/win32-notificator.jar" duplicate="preserve">
      <fileset dir="${module.win32-notificator.basedir}/win32-notificator/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/web-openapi.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/web-openapi.jar" duplicate="preserve">
      <fileset dir="${module.web-openapi.basedir}/web-openapi/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/utils.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/utils.jar" duplicate="preserve">
      <fileset dir="${module.utils.basedir}/utils/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/svn.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/svn.jar" duplicate="preserve">
      <fileset dir="${module.svn.basedir}/svn/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/Solution2005-runner-server.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/Solution2005-runner-server.jar" duplicate="preserve">
      <fileset dir="${module.solution2005-runner-server.basedir}/Solution2005-runner-server/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/server-side-inspections.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/server-side-inspections.jar" duplicate="preserve">
      <fileset dir="${module.server-side-inspections.basedir}/server-side-inspections/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/server-openapi.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/server-openapi.jar" duplicate="preserve">
      <fileset dir="${module.server-openapi.basedir}/server-openapi/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/server-model.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/server-model.jar" duplicate="preserve">
      <fileset dir="${module.server-model.basedir}/server-model/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/server.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/server.jar" duplicate="preserve">
      <fileset dir="${module.server.basedir}/server/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/runtime-util.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/runtime-util.jar" duplicate="preserve">
      <fileset dir="${module.runtime-util.basedir}/runtime-util/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/perforce.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/perforce.jar" duplicate="preserve">
      <fileset dir="${module.perforce.basedir}/perforce/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/patches-impl.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/patches-impl.jar" duplicate="preserve">
      <fileset dir="${module.patches-impl.basedir}/patches-impl/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/patches.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/patches.jar" duplicate="preserve">
      <fileset dir="${module.patches.basedir}/patches/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/ntdomain-login.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/ntdomain-login.jar" duplicate="preserve">
      <fileset dir="${module.ntdomain-login.basedir}/ntdomain-login/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/NAnt-runner-server.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/NAnt-runner-server.jar" duplicate="preserve">
      <fileset dir="${module.nant-runner-server.basedir}/NAnt-runner-server/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/MSBuild-runner-server.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/MSBuild-runner-server.jar" duplicate="preserve">
      <fileset dir="${module.msbuild-runner-server.basedir}/MSBuild-runner-server/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/messages.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/messages.jar" duplicate="preserve">
      <fileset dir="${module.messages.basedir}/messages/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/maven-runner-server.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/maven-runner-server.jar" duplicate="preserve">
      <fileset dir="${module.maven-runner-server.basedir}/maven-runner-server/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/cl.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/cl.jar" duplicate="preserve">
      <fileset dir="${module.license-common.basedir}/license-common/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/jabber-notificator.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/jabber-notificator.jar" duplicate="preserve">
      <fileset dir="${module.jabber-notificator.basedir}/jabber-notificator/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/inspections-util.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/inspections-util.jar" duplicate="preserve">
      <fileset dir="${module.inspections-util.basedir}/inspections-util/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/idea-runner-server.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/idea-runner-server.jar" duplicate="preserve">
      <fileset dir="${module.idea-runner-server.basedir}/idea-runner-server/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/email-notificator.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/email-notificator.jar" duplicate="preserve">
      <fileset dir="${module.email-notificator.basedir}/email-notificator/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/cvs-support.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/cvs-support.jar" duplicate="preserve">
      <fileset dir="${module.cvs-support.basedir}/cvs-support/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/coverage-server.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/coverage-server.jar" duplicate="preserve">
      <fileset dir="${module.coverage-server.basedir}/coverage-server/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/common-runtime.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/common-runtime.jar" duplicate="preserve">
      <fileset dir="${module.common-runtime.basedir}/common-runtime/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/common.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/common.jar" duplicate="preserve">
      <fileset dir="${module.common.basedir}/common/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/artefacts.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/artefacts.jar" duplicate="preserve">
      <fileset dir="${module.artefacts.basedir}/artefacts/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.dir.exploded}/WEB-INF/lib/ant-runner-server.jar"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.dir.exploded}/WEB-INF/lib/ant-runner-server.jar" duplicate="preserve">
      <fileset dir="${module.ant-runner-server.basedir}/ant-runner-server/classes"/>
    </jar>
    <copy todir="${j2ee.dir.exploded}/WEB-INF/lib">
      <fileset dir="${module.web.basedir}/web/lib/native"/>
    </copy>
    <copy todir="${j2ee.dir.exploded}/WEB-INF">
      <fileset dir="${module.web.basedir}/web/WEB-INF"/>
    </copy>
    <copy todir="${j2ee.dir.exploded}/">
      <fileset dir="${module.web.basedir}/web/resources"/>
    </copy>
    <copy todir="${j2ee.dir.exploded}/WEB-INF/classes">
      <fileset dir="${module.web.basedir}/web/classes"/>
    </copy>
  </target>
  <target name="j2ee.build.jar.web" description="Build Java EE archive for module 'web'">
    <property name="tmp.dir.web" value="${module.web.basedir}/temp"/>
    <mkdir dir="${tmp.dir.web}"/>
    <jar destfile="${tmp.dir.web}/ant-runner-server.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.ant-runner-server.basedir}/ant-runner-server/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/artefacts.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.artefacts.basedir}/artefacts/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/common.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.common.basedir}/common/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/common-runtime.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.common-runtime.basedir}/common-runtime/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/coverage-server.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.coverage-server.basedir}/coverage-server/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/cvs-support.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.cvs-support.basedir}/cvs-support/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/email-notificator.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.email-notificator.basedir}/email-notificator/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/idea-runner-server.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.idea-runner-server.basedir}/idea-runner-server/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/inspections-util.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.inspections-util.basedir}/inspections-util/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/jabber-notificator.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.jabber-notificator.basedir}/jabber-notificator/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/cl.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.license-common.basedir}/license-common/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/maven-runner-server.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.maven-runner-server.basedir}/maven-runner-server/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/messages.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.messages.basedir}/messages/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/MSBuild-runner-server.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.msbuild-runner-server.basedir}/MSBuild-runner-server/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/NAnt-runner-server.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.nant-runner-server.basedir}/NAnt-runner-server/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/ntdomain-login.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.ntdomain-login.basedir}/ntdomain-login/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/patches.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.patches.basedir}/patches/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/patches-impl.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.patches-impl.basedir}/patches-impl/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/perforce.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.perforce.basedir}/perforce/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/runtime-util.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.runtime-util.basedir}/runtime-util/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/server.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.server.basedir}/server/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/server-model.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.server-model.basedir}/server-model/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/server-openapi.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.server-openapi.basedir}/server-openapi/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/server-side-inspections.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.server-side-inspections.basedir}/server-side-inspections/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/Solution2005-runner-server.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.solution2005-runner-server.basedir}/Solution2005-runner-server/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/svn.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.svn.basedir}/svn/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/utils.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.utils.basedir}/utils/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/web-openapi.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.web-openapi.basedir}/web-openapi/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/win32-notificator.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.win32-notificator.basedir}/win32-notificator/classes"/>
    </jar>
    <jar destfile="${tmp.dir.web}/xml-rpc-wrapper.jar" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <fileset dir="${module.xml-rpc-wrapper.basedir}/xml-rpc-wrapper/classes"/>
    </jar>
    <dirname property="jar.dir" file="${j2ee.path.jar}"/>
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${j2ee.path.jar}" duplicate="preserve">
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
      <zipfileset dir="${module.web.basedir}/web/classes" prefix="WEB-INF/classes"/>
      <zipfileset dir="${module.web.basedir}/web/resources" prefix=""/>
      <zipfileset dir="${module.web.basedir}/web/WEB-INF" prefix="WEB-INF"/>
      <zipfileset dir="${module.web.basedir}/web/lib/native" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/ant-runner-server.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/artefacts.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/common.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/common-runtime.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/coverage-server.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/cvs-support.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/email-notificator.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/idea-runner-server.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/inspections-util.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/jabber-notificator.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/cl.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/maven-runner-server.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/messages.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/MSBuild-runner-server.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/NAnt-runner-server.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/ntdomain-login.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/patches.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/patches-impl.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/perforce.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/runtime-util.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/server.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/server-model.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/server-openapi.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/server-side-inspections.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/Solution2005-runner-server.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/svn.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/utils.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/web-openapi.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/win32-notificator.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${tmp.dir.web}/xml-rpc-wrapper.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/agent/lib/commons-httpclient-3.0-rc4.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/agentInstaller/lib/standalone-compiler.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/cvs_util.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/javacvs.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/maverick-sftp.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/maverick-ssh1.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/maverick-ssh2.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/maverick.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/resources_en.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/sshtools-ant.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/sshtools-cipher.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/sshtools-net.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/sshtools-publickey.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/sshtools-scp.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/sshtools-sftp.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/sshtools-util.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/cvs-support/lib/sshtools-zlib.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/jabber-notificator/lib/smack.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/jabber-notificator/lib/smackx.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/activation.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/annotations.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/mail.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/shaj-0.5.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/perforce/lib/perforce_util.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/svn/lib/ganymed.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/web/lib/commons-fileupload-1.0.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/web/lib/jnlp-servlet.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/web/lib/jnlp.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/web/lib/jstl.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/web/lib/standard.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/commons-beanutils-core.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/commons-logging.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/commons-dbcp-1.2.1.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/commons-pool-1.3.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/commons-collections-3.2.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/hsqldb.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/h2.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/mysql-connector-java-3.1.13-bin.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/log4j-1.2.12.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/tools/idea/lib/jdom.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/tools/idea/lib/trove4j.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/tools/idea/lib/openapi.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/tools/idea/lib/resources.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/tools/idea/lib/annotations.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/tools/idea/lib/extensions.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/tools/idea/lib/resources_en.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/tools/idea/lib/idea.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/jdom.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/junit-3.8.1.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/jmock-SNAPSHOT.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/picocontainer-1.1.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/nanocontainer-1.0-RC-1.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/web/lib/spring.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/svn/lib/javasvn.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/commons-codec-1.3.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/xmlrpc-2.0.1.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/xpp3_min-1.1.3.4.M.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/lib/xstream-1.1.2.jar" prefix="WEB-INF/lib"/>
      <zipfileset file="${module.web.basedir}/web/WEB-INF/web.xml" prefix="WEB-INF"/>
      <zipfileset file="${module.web.basedir}/web/META-INF/context.xml" prefix="WEB-INF"/>
      <zipfileset file="${module.web.basedir}/web/META-INF/context.xml" prefix="META-INF"/>
    </jar>
    <delete dir="${tmp.dir.web}"/>
  </target>


  <!-- Module web-test -->

  <dirname property="module.web-test.basedir" file="${ant.file}"/>



  <property name="compiler.args.web-test" value="${compiler.args}"/>

  <property name="web-test.output.dir" value="${module.web-test.basedir}/web-test/classes"/>
  <property name="web-test.testoutput.dir" value="${module.web-test.basedir}/web-test/classes"/>

  <path id="web-test.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="web-test.module.classpath">
    <path refid="library.junit.classpath"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server-model.output.dir}"/>
    <pathelement location="${messages.output.dir}"/>
    <pathelement location="${server-openapi.output.dir}"/>
    <pathelement location="${web.output.dir}"/>
    <pathelement location="${module.web-test.basedir}/web/lib/jstl.jar"/>
    <pathelement location="${module.web-test.basedir}/web/lib/jnlp-servlet.jar"/>
    <pathelement location="${module.web-test.basedir}/web/lib/commons-fileupload-1.0.jar"/>
    <pathelement location="${module.web-test.basedir}/web/lib/standard.jar"/>
    <pathelement location="${module.web-test.basedir}/web/lib/spring.jar"/>
    <pathelement location="${module.web-test.basedir}/web/lib/jnlp.jar"/>
    <pathelement location="${test.output.dir}"/>
    <pathelement location="${common.output.dir}"/>
    <pathelement location="${module.web-test.basedir}/lib/log4j-1.2.12.jar"/>
    <pathelement location="${module.web-test.basedir}/tools/idea/lib/jdom.jar"/>
    <pathelement location="${module.web-test.basedir}/tools/idea/lib/trove4j.jar"/>
    <pathelement location="${module.web-test.basedir}/tools/idea/lib/openapi.jar"/>
    <pathelement location="${module.web-test.basedir}/tools/idea/lib/resources.jar"/>
    <pathelement location="${module.web-test.basedir}/tools/idea/lib/annotations.jar"/>
    <pathelement location="${module.web-test.basedir}/tools/idea/lib/extensions.jar"/>
    <pathelement location="${module.web-test.basedir}/tools/idea/lib/resources_en.jar"/>
    <pathelement location="${module.web-test.basedir}/tools/idea/lib/idea.jar"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${common-runtime.output.dir}"/>
    <path refid="library.idea.classpath"/>
    <pathelement location="${web-openapi.output.dir}"/>
    <pathelement location="${artefacts.output.dir}"/>
    <pathelement location="${patches.output.dir}"/>
    <pathelement location="${license-common.output.dir}"/>
    <pathelement location="${runtime-util.output.dir}"/>
    <path refid="library.tomcat-local.classpath"/>
    <pathelement location="${win32-notificator.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.web-test">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.web-test">
    <patternset refid="excluded.from.module.web-test"/>
  </patternset>

  <path id="web-test.module.test.sourcepath">
    <dirset dir="${module.web-test.basedir}/web-test">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.web-test" depends="compile.module.web-test.production,compile.module.web-test.tests" description="Compile module web-test"/>

  <target name="compile.module.web-test.production" depends="compile.module.server,compile.module.common,compile.module.patches,compile.module.server-model,compile.module.runtime-util,compile.module.license-common,compile.module.web-openapi,compile.module.messages,compile.module.win32-notificator,compile.module.artefacts,compile.module.web,compile.module.test,compile.module.common-runtime" description="Compile module web-test; production classes"/>

  <target name="compile.module.web-test.tests" depends="compile.module.web-test.production" description="compile module web-test; test classes" unless="skip.tests">
    <mkdir dir="${web-test.testoutput.dir}"/>
    <javac2 destdir="${web-test.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.web-test}"/>
      <classpath refid="web-test.module.classpath"/>
      <classpath location="${web-test.output.dir}"/>
      <src refid="web-test.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.web-test"/>
    </javac2>

    <copy todir="${web-test.testoutput.dir}">
      <fileset dir="${module.web-test.basedir}/web-test/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.web-test" description="cleanup module">
    <delete dir="${web-test.output.dir}"/>
    <delete dir="${web-test.testoutput.dir}"/>
  </target>


  <!-- Module agentInstaller-izPack -->

  <dirname property="module.agentinstaller-izpack.basedir" file="${ant.file}"/>



  <property name="compiler.args.agentinstaller-izpack" value="${compiler.args}"/>

  <property name="agentinstaller-izpack.output.dir" value="${module.agentinstaller-izpack.basedir}/agentInstaller-izPack/classes"/>
  <property name="agentinstaller-izpack.testoutput.dir" value="${module.agentinstaller-izpack.basedir}/agentInstaller-izPack/classes"/>

  <path id="agentinstaller-izpack.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="agentinstaller-izpack.module.classpath">
    <pathelement location="${agentinstaller-ui.output.dir}"/>
    <pathelement location="${agentinstaller.output.dir}"/>
    <pathelement location="${module.agentinstaller-izpack.basedir}/agentInstaller/lib/standalone-compiler.jar"/>
    <pathelement location="${module.agentinstaller-izpack.basedir}/agentInstaller/lib/izevent.jar"/>
  </path>


  <patternset id="excluded.from.module.agentinstaller-izpack">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.agentinstaller-izpack">
    <patternset refid="excluded.from.module.agentinstaller-izpack"/>
  </patternset>

  <path id="agentinstaller-izpack.module.sourcepath">
    <dirset dir="${module.agentinstaller-izpack.basedir}/agentInstaller-izPack">
      <include name="src"/>
    </dirset>
  </path>


  <target name="compile.module.agentinstaller-izpack" depends="compile.module.agentinstaller-izpack.production,compile.module.agentinstaller-izpack.tests" description="Compile module agentInstaller-izPack"/>

  <target name="compile.module.agentinstaller-izpack.production" depends="compile.module.agentinstaller-ui,compile.module.agentinstaller" description="Compile module agentInstaller-izPack; production classes">
    <mkdir dir="${agentinstaller-izpack.output.dir}"/>
    <javac2 destdir="${agentinstaller-izpack.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.agentinstaller-izpack}"/>
      <bootclasspath refid="agentinstaller-izpack.module.bootclasspath"/>
      <classpath refid="agentinstaller-izpack.module.classpath"/>
      <src refid="agentinstaller-izpack.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.agentinstaller-izpack"/>
    </javac2>

    <copy todir="${agentinstaller-izpack.output.dir}">
      <fileset dir="${module.agentinstaller-izpack.basedir}/agentInstaller-izPack/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.agentinstaller-izpack.tests" depends="compile.module.agentinstaller-izpack.production" description="compile module agentInstaller-izPack; test classes" unless="skip.tests"/>

  <target name="clean.module.agentinstaller-izpack" description="cleanup module">
    <delete dir="${agentinstaller-izpack.output.dir}"/>
    <delete dir="${agentinstaller-izpack.testoutput.dir}"/>
  </target>


  <!-- Module spikes -->

  <dirname property="module.spikes.basedir" file="${ant.file}"/>



  <property name="compiler.args.spikes" value="${compiler.args}"/>

  <property name="spikes.output.dir" value="${module.spikes.basedir}/spikes/classes"/>
  <property name="spikes.testoutput.dir" value="${module.spikes.basedir}/spikes/classes"/>

  <path id="spikes.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="spikes.module.classpath"/>


  <patternset id="excluded.from.module.spikes">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.spikes">
    <patternset refid="excluded.from.module.spikes"/>
  </patternset>


  <target name="compile.module.spikes" depends="compile.module.spikes.production,compile.module.spikes.tests" description="Compile module spikes"/>

  <target name="compile.module.spikes.production" description="Compile module spikes; production classes"/>

  <target name="compile.module.spikes.tests" depends="compile.module.spikes.production" description="compile module spikes; test classes" unless="skip.tests"/>

  <target name="clean.module.spikes" description="cleanup module">
    <delete dir="${spikes.output.dir}"/>
    <delete dir="${spikes.testoutput.dir}"/>
  </target>

  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>

  <target name="clean" depends="clean.module.xml-rpc-wrapper, clean.module.runtime-util, clean.module.ant-runtime, clean.module.patches, clean.module.jdk-searcher, clean.module.messages, clean.module.common-runtime, clean.module.launcher, clean.module.maven-runtime, clean.module.ant-server-logging, clean.module.utils, clean.module.patches-impl, clean.module.server-model, clean.module.remote-server-proxy, clean.module.build-server4idea_sources, clean.module.server-logging, clean.module.common, clean.module.agent, clean.module.ant-runner, clean.module.idea-runner, clean.module.dotnetcommon-runtime, clean.module.coverage-agent, clean.module.msbuild-runner, clean.module.solution2005-runner, clean.module.server-openapi, clean.module.msbuild-runner-server, clean.module.svn, clean.module.ant-runner-server, clean.module.ntdomain-login, clean.module.maven-runner-server, clean.module.cvs-support, clean.module.idea-runner-server, clean.module.perforce, clean.module.web-openapi, clean.module.artefacts, clean.module.win32-notificator, clean.module.email-notificator, clean.module.solution2005-runner-server, clean.module.nant-runner-server, clean.module.inspections-util, clean.module.coverage-server, clean.module.nant-runner, clean.module.maven-runner, clean.module.license-common, clean.module.license-keygen, clean.module.server, clean.module.jabber-notificator, clean.module.server-side-inspections, clean.module.inspections-runner, clean.module.buildserver, clean.module.agentinstaller, clean.module.agentinstaller-ui, clean.module.test, clean.module.inspection-tests, clean.module.patches-tests, clean.module.perforce-test, clean.module.cvs-support-tests, clean.module.build-server4idea-tests, clean.module.svn-test, clean.module.web, clean.module.web-test, clean.module.agentinstaller-izpack, clean.module.spikes" description="cleanup all"/>

  <target name="all" depends="init, clean, compile.module.xml-rpc-wrapper, compile.module.runtime-util, compile.module.ant-runtime, compile.module.patches, compile.module.jdk-searcher, compile.module.messages, compile.module.common-runtime, compile.module.launcher, compile.module.maven-runtime, compile.module.ant-server-logging, compile.module.utils, compile.module.patches-impl, compile.module.server-model, compile.module.remote-server-proxy, compile.module.build-server4idea_sources, compile.module.server-logging, compile.module.common, compile.module.agent, compile.module.ant-runner, compile.module.idea-runner, compile.module.dotnetcommon-runtime, compile.module.coverage-agent, compile.module.msbuild-runner, compile.module.solution2005-runner, compile.module.server-openapi, compile.module.msbuild-runner-server, compile.module.svn, compile.module.ant-runner-server, compile.module.ntdomain-login, compile.module.maven-runner-server, compile.module.cvs-support, compile.module.idea-runner-server, compile.module.perforce, compile.module.web-openapi, compile.module.artefacts, compile.module.win32-notificator, compile.module.email-notificator, compile.module.solution2005-runner-server, compile.module.nant-runner-server, compile.module.inspections-util, compile.module.coverage-server, compile.module.nant-runner, compile.module.maven-runner, compile.module.license-common, compile.module.license-keygen, compile.module.server, compile.module.jabber-notificator, compile.module.server-side-inspections, compile.module.inspections-runner, compile.module.buildserver, compile.module.agentinstaller, compile.module.agentinstaller-ui, compile.module.test, compile.module.inspection-tests, compile.module.patches-tests, compile.module.perforce-test, compile.module.cvs-support-tests, compile.module.build-server4idea-tests, compile.module.svn-test, j2ee.build.web, compile.module.web-test, compile.module.agentinstaller-izpack, compile.module.spikes" description="build all"/>
</project>