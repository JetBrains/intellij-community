git.module.name=Git
git.module.description=Learn how to use Git integration in the IDE

# Utilities
git.window.closed.warning=Press {0} to open the {1} tool window again.
git.use.non.modal.commit.ui.warning=You need to enable the non-modal commit interface to complete this lesson. \
  Press {0}, go to {1} <strong>\u2192</strong> {2}, and select {3}.
git.not.use.staging.area.warning=You need to disable the <strong>Staging area</strong> to complete this lesson. \
  Press {0}, go to {1} <strong>\u2192</strong> {2}, and deselect {3}.
git.click.to.change.settings=Alternatively, <callback id="{0}">click</callback> to change the settings.
git.open.tool.window=Press {0} or click {1} stripe button to open the {2} tool window.
git.open.tool.window.balloon=Click to open the {0} tool window
git.click.balloon=Click {0}
git.click.to.open=Click to open the {0}

# Lessons
git.quick.start.lesson.name=Quick start
git.quick.start.introduction=In this lesson, you will learn how to clone an existing project and perform basic version control workflows \
  using IDE features of Git integration.
git.quick.start.find.action=You can clone an existing Git repository using {0} action. Press {1} twice to open the {2} popup.
git.quick.start.type.clone=Type {0} in the search field and choose the highlighted option.
git.quick.start.clone.dialog.got.it.1=You can clone the repository to the specified directory using the repository URL
git.quick.start.clone.dialog.got.it.2=Also, you can sign in directly to popular hosting services and then browse and clone repositories \
  from there
git.quick.start.close.clone.dialog=However, for this lesson, there is an already prepared sandbox repository. You can close this dialog.
git.quick.start.workflow.explanation=Great! Now let's investigate how to perform some basic Git workflows using its integration with the IDE. \
  For example, it can be: <strong>checkout new branch \u2192 make change and commit \u2192 push</strong>.
git.quick.start.open.vcs.widget=First, press {0} or click in the highlighted area to open the {1}.
git.quick.start.choose.new.branch.item=Choose {0} from the list.
git.quick.start.name.new.branch=Enter any name for the new branch, then press {0} or click {1}.
git.quick.start.modify.file=In the new branch, you can change your files, and the IDE will detect the changes. \
  For example, let''s modify the color of the cat''s eyes in the opened file. Replace {0} with some other color.
git.quick.start.open.commit.window=Now you can commit the changed file.
git.quick.start.commit.window.select.file=Here you can choose files to commit. Click the checkbox to add the file to the commit.
git.quick.start.perform.commit=Type a commit message in the highlighted area. For example, it can be {0}. Then click {1}.
git.quick.start.open.push.dialog=After performing a commit you can push it to the remote repository. Press {0} to open the {1} dialog.
git.quick.start.perform.push=Now click {0}. Your commit will be pushed to the repository created on your machine for tutorial purposes.
# Link name to the IDE help
git.quick.start.help.link=Set up a Git repository

git.project.history.lesson.name=Project history
git.project.history.open.git.window=Press {0} or click {1} stripe button to open the {2} tool window \
  and preview all performed commits in a visual timeline.
git.project.history.commits.tree.explanation=The tree of commits is located in the center of the tool window. \
  You can see that your last commit of your active branch got highlighted. \
  Note that all commits below the highlighted one are also from this branch, and they are colored differently. \
  The rest of the commits are in the other branches.
git.project.history.commits.tree.got.it=This is the last commit of your active branch
git.project.history.apply.branch.filter=All branches of your repository are listed in the left pane of the tool window. \
  {0,choice,0#Click|1#Double-click} the <strong>HEAD</strong> branch to show commits only from the active branch.
git.project.history.click.head.tooltip={0,choice,0#Click|1#Double-click} <strong>HEAD</strong> to show commits only from the active branch
git.project.history.apply.user.filter=You can use many filters that help you discover commits. \
  For example, you can preview the commits of a specific author. Click the highlighted filter to open the list of users.
git.project.history.click.filter.tooltip=Click to open the list of users
git.project.history.select.me=Select {0} from the list to show only your commits.
git.project.history.apply.message.filter=The highlighted search field can help you find a commit by a message or hash. \
  Suppose you want to find a commit by part of the message. For example, type {0} in the highlighted field and press {1}.
git.project.history.select.commit=Select the highlighted commit to obtain information about it.
git.project.history.commit.details.explanation=Right pane of the tool window shows information about the selected commit: \
  some metadata and the branches that contain this commit.
git.project.history.commit.details.got.it=The detailed commit metadata and branches that contain this commit are displayed here
git.project.history.click.changed.file=There is also a tree with all files changed in this commit. \
  Double-click the highlighted file to preview its changes.
git.project.history.click.changed.file.popup=Double-click the highlighted file to preview its changes
git.project.history.close.diff=Close the diff window after reviewing the changes. Press {0}.
git.project.history.invitation.to.commit.lesson=Great! Let's discover how to create commits in the next lesson.

git.commit.lesson.name=Commit
git.commit.open.commit.window=Suppose you modified some files in the project and want to commit them to the current branch.
git.commit.choose.files=The {0} tool window provides wide customization for your commits. \
  Let''s say, you want {1} to be a part of the commit. Click the checkbox to include it.
git.commit.choose.files.balloon=Select the highlighted file to include it to the commit
git.commit.open.before.commit.options=Now edit the commit options. Press {0} to open the Git Options popup.
git.commit.open.options.tooltip=Click to open the {0} options
git.commit.analyze.code.explanation=Use {0} to get notified of warnings and errors found in the files to be committed. \
  In this lesson, you can keep this option intact.
git.commit.enable.reformat.code=Select {0} to automatically edit files according to the code style.
git.commit.close.commit.options=When required options are selected, close the commit options popup. Press {0}.
git.commit.perform.commit=Now edit the commit message or leave it as proposed. Then click the {0} button to perform a commit.
git.commit.open.git.window=Great! Press {0} or click {1} stripe button to open the {2} tool window and discover your commit in the tree.
git.commit.select.top.commit=Select the top commit in the tree to see more details about it.
git.commit.select.top.commit.balloon=Select the commit to see more details about it.
git.commit.committed.file.explanation=The right pane of the {0} tool window shows the file changed by the last commit.
git.commit.committed.file.got.it=The file changed by the last commit is displayed here
git.commit.select.amend.checkbox=What if you forgot to add some changes to the last performed commit? \
  The best way is to use the {0} feature to edit the last commit. Press {1} or select {0} checkbox in the {2} tool window.
git.commit.select.amend.checkbox.balloon=Select {0} checkbox to start editing last commit
git.commit.select.file=Select the highlighted file to add it to the commit.
git.commit.select.file.balloon=Select the file to add it to the commit
git.commit.amend.commit=Click the {0} button to edit the last commit.
git.commit.amend.commit.balloon=Click to finally edit the last commit
git.commit.select.top.commit.again=Select the top commit in the {0} tool window again \
  to see information about the amended commit.
git.commit.select.top.commit.again.balloon=Select the top commit again to preview the changes
git.commit.two.committed.files.explanation=Now you can see that the target commit contains two changed files.
# Link name to the IDE help
git.commit.help.link=Commit and push changes to Git repository

git.feature.branch.lesson.name=Feature branch workflow
git.feature.branch.introduction.1=Suppose you have finished the work on your {0} branch and pushed the changes to the remote \
  to merge it with the {1} branch later. Press {2} to open the {3} tool window and preview the project history.
git.feature.branch.introduction.2=But while you are working on your feature, some of your colleagues may also push their changes to the {0} \
  branch.
git.feature.branch.introduction.check=Let\u2019s check that possible changes in {0} do not conflict with your changes.
git.feature.branch.introduction.got.it=These are the new commits of your {0} branch.
git.feature.branch.open.branches.popup.1=First, check out the {0} branch. Press {1} or click in the highlighted area to open the {2}.
git.feature.branch.checkout.branch=Choose the {0} branch and select {1} from the menu.
git.feature.branch.open.update.dialog=Now update the {0} branch to be aware of the possible changes from the remote repository. \
  Press {1} to open the {2} dialog.
git.feature.branch.confirm.update=Click {0} to confirm the update.
git.feature.branch.new.commits.explanation=You can notice some changes in the {0} branch.
git.feature.branch.new.commits.got.it=There is the new commit in the {0} branch
git.feature.branch.open.branches.popup.2=So, you should place your commits after the new commit from the {0} branch. \
  You can perform it by using the {1} feature. Press {2} or click in the highlighted area to open the {3} again.
git.feature.branch.checkout.and.rebase=Choose the {0} branch and select {1}.
git.feature.branch.open.push.dialog=When the {0} branch becomes updated, you should update it in the remote repository too. \
  Press {1} to open the {2} dialog.
git.feature.branch.choose.force.push=You cannot just push the changes, because the remote {0} branch conflicts with the updated local branch. \
  Use {1}. Press the highlighted arrow near the {2} button to open the list and select {1}.
git.feature.branch.confirm.force.push=Press {0} again to confirm the action.
git.feature.branch.force.push.tip=<strong>Tip</strong>: do not use {0} if you are not the only user of the branch. \
  It can cause the loss of your colleagues'' commits.
# Link name to the IDE help
git.feature.branch.help.link=Manage Git branches

git.interactive.rebase.lesson.name=Interactive rebase
git.interactive.rebase.open.git.window=Suppose you have made some fixes to your project. \
  Press {0} to open the {1} tool window and preview the project history.
git.interactive.rebase.introduction=Looking at the highlighted sequence of commits it is hard to tell what has changed in general. \
  It would be easier if you can reorder or squash some commits.
git.interactive.rebase.open.context.menu=Use <strong>Interactive Rebase</strong> to solve this task. \
  Right-click the highlighted commit to open the context menu.
git.interactive.rebase.click.commit.tooltip=Right-click the highlighted commit
git.interactive.rebase.choose.interactive.rebase=Select {0} from the list.
git.interactive.rebase.select.one.commit=It seems that the highlighted commit fixes something in the topmost commit of the list. \
  It would be great to combine these two commits into one. Select the highlighted commit.
git.interactive.rebase.move.commit=And now move this commit up to the highlighted area. \
  Drag and drop the commit or press {0} three times.
git.interactive.rebase.invoke.fixup=Press {0} or click the highlighted button and select {1} from the list \
  to add the changes from this commit to the topmost commit.
git.interactive.rebase.select.three.commits=Great! It looks that the three highlighted commits are about the same. \
  You can combine them in one and edit the resulting message. Select the highlighted commits by clicking them and pressing {0}.
git.interactive.rebase.invoke.squash=Press {0} or click the {1} button to unite the commits.
git.interactive.rebase.apply.reword=By default, messages of all squashed commits are included into the resulting message. \
  However, in this lesson, replace it with something like {0}. Edit the message if you want and press {1} to apply rewording.
git.interactive.rebase.start.rebasing=Finally, click {0}.
git.interactive.rebase.congratulations=Congratulations! You have made the history of the project clean!
# Link name to the IDE help
git.interactive.rebase.help.link=Edit project history by performing interactive rebase

git.changelists.shelf.lesson.name=Changelists and shelf
git.changelists.shelf.introduction=Suppose you don't want to commit some changes. For example, some comments are meant to be local only. \
  You can move a comment to a new changelist, so it won't be committed accidentally. \
  Click the highlighted line marker to open the context menu.
git.changelists.shelf.click.line.marker.balloon=Click the line marker
git.changelists.shelf.choose.new.changelist=Click {0} and select the {1} menu item.
git.changelists.shelf.create.changelist=Name the new changelist {0}. Press {1} or click {2} to create a new changelist.
git.changelists.shelf.open.commit.window=Now let's inspect the created changelist.
git.changelists.shelf.explanation=In addition, you can use the {0} feature to save these changes in a file on your computer. \
  Changes stored in the {0} can be applied later to any branch. It helps you avoid losing these changes.
git.changelists.shelf.open.context.menu=Let's shelve the changes! Right-click the highlighted changelist to open the context menu.
git.changelists.shelf.click.changelist.tooltip=Right-click the {0} changelist
git.changelists.shelf.open.shelf.dialog=Select {0} to open {1} dialog.
git.changelists.shelf.shelve.changelist=Now you can edit the message or leave it intact. \
  Click {0} to store the changes in {1}.
git.changelists.shelf.remove.changelist=You don''t need this changelist anymore, so click the {0} button.
git.changelists.shelf.performed.explanation=You can notice that the changelist is successfully saved to {0} \
  and the comment has disappeared.
git.changelists.shelf.performed.got.it=You can notice that the changelist is successfully saved to {0}
git.changelists.shelf.open.unshelve.dialog=When your changes are stored in {0}, you can apply them again. \
  Select the highlighted changelist and press {1} to open the <strong>Unshelve</strong> dialog.
git.changelists.shelf.unshelve.changelist=Now you can edit the name of the changelist to put the unshelving changes or leave it as is. \
  Click {0} to apply the changes.
git.changelists.shelf.congratulations=Congratulations! Now you know how to manage changelists and shelve your changes.
# Link name to the IDE help
git.changelists.shelf.help.link=Use Git to work on several features simultaneously

git.annotate.lesson.name=Annotate with Git Blame
git.annotate.introduction=Look at the highlighted property. The value of the property implies that a cat has four ears. \
  The reason for this change is intriguing. We can investigate the history of the file using the {0} feature.
git.annotate.invoke.shortcut.1=Press {0} to show history of this file.
git.annotate.open.context.menu=Right-click the highlighted left gutter to open the context menu.
git.annotate.click.gutter.balloon=Right-click the gutter
git.annotate.choose.annotate=Select the {0} option to show the history of this file.
git.annotate.add.shortcut.tip=<strong>Tip</strong>: you can assign a shortcut to the {0} action. Click this link {1} and choose {2}.
git.annotate.feature.explanation=The {0} action provides easy access to the last commit that modified any specific line of the file. \
  You can see that {1} is the last who modified this line. Right-click the highlighted annotation to open the context menu.
git.annotate.click.annotation.tooltip=Right-click the annotation
git.annotate.choose.show.diff=Select the {0} option to show what is changed in this commit.
git.annotate.go.deeper=You can notice that the value of {0} appeared before this commit. So let''s go deeper in history!
git.annotate.invoke.shortcut.2=Move the caret to the left editor and press {0} again.
git.annotate.invoke.manually=Right-click the highlighted area and select the {0} option from the opened menu.
git.annotate.show.diff=Right click the highlighted annotation to open the context menu and choose {0}.
git.annotate.found.needed.commit=Great! We found the place where {0} value has been changed. \
  So let''s annotate it for the last time to investigate the reason for this change.
git.annotate.invoke.shortcut.3=Move the caret to the right editor and press {0}.
git.annotate.click.annotation=Click the highlighted annotation to preview information about this commit.
git.annotate.close.changes=As far as we see the highlighted commit message, this strange value of {0} is not a mistake. \
  So, after the long journey through the history of this file, you can close the opened tool window. Press {1}.
git.annotate.close.all.windows=Now close {0,choice,0#all opened windows|1#all opened editor tabs} to return to the editor. \
  Press {1} two times.
git.annotate.close.annotations=Now you can close the annotations.
git.annotate.close.by.shortcut=Press {0}.
git.annotate.invoke.manually.2=Right-click the highlighted area and select the {0} option from the menu.
# Link name to the IDE help
git.annotate.help.link=Locate code author (Annotate with Git Blame)