git.module.name=Git
git.module.description=Learn how to use Git features right inside the IDE

# Utilities
git.balloon.press.to.proceed=Press {0} to proceed.
git.move.learn.window.balloon.text=We moved the Learn panel to the right because it is covered by the Commit tool window.
git.window.closed.warning=Press {0} to open the commit tool window again.
git.commit.window.closed.warning=Press {0} to open the Git tool window again.

# Lessons
git.project.history.lesson.name=Project history
git.project.history.open.git.window=Press {0} to open Git tool window and overview the project history.
git.project.history.commits.tree.explanation=Commits tree located in the center of the tool window. \
  The last commit of your active branch is highlighted. All commits with {0} background contained in this branch. \
  The rest of the commits are in the other branches.
git.project.history.apply.branch.filter=In the left side of the tool window listed all branches from your repository. \
  Double click the highlighted <strong>HEAD</strong> branch to show commits only from active branch.
git.project.history.apply.user.filter=You can use a lot of filters that can help to find needed commits. \
  For example you can show the commits from a specific author. Click the highlighted filter to open users popup.
git.project.history.select.me=Select {0} from the list to show only your commits.
git.project.history.apply.message.filter=Highlighted search field can help you to find a commit by message or hash. \
  Suppose you want to find a commit by part of the message. For example, type {0} in the highlighted field and press {1}.
git.project.history.select.commit=Select found commit to show information about it.
git.project.history.commit.details.explanation=In the right side of the tool window showed information about selected commit. \
  You can find here some metadata and branches that contain this commit.
git.project.history.click.changed.file=There are also tree with all files changed in this commit. \
  Click the highlighted file twice to show it's changes.
git.project.history.invitation.to.commit.lesson=Great! Let's discover how to create commit in the next lesson.

git.commit.lesson.name=Commit
git.commit.open.commit.window=Suppose you modified some files in the project and want to commit them to the current branch. \
  Press {0} to open commit tool window.
git.commit.choose.files=Commit tool window provides wide customization for your commit. \
  First, let's choose the files that we want to commit.
git.commit.choose.files.balloon=Deselect this file to exclude it from commit.
git.commit.open.before.commit.options=Second, let''s configure before commit actions. Press {0} to open options popup.
git.commit.analyze.code.explanation={0} is very useful when you are working with the code. \
  It will notify if warnings and errors will be found in the committing files. In our case you can stay this option the same.
git.commit.enable.reformat.code=Switch on {0} to automatically edit files according to codestyle.
git.commit.close.commit.options=When required options selected you can close the commit options popup. Press {0}.
git.commit.perform.commit=And now you can edit commit message or leave it as proposed. Then click {0} button to perform commit.
git.commit.open.git.window=Great! Press {0} to open Git tool window and see your commit in the tree.
git.commit.select.top.commit=Select top commit in the tree to see the information about it.
git.commit.committed.file.explanation=In the right side of the Git tool window you can see one file changed by last commit.
git.commit.select.amend.checkbox=What to do if we forgot to add some changes to the last performed commit? \
  The best way is to use {0} feature to edit last commit. Press {1} or select {0} checkbox in the commit tool window.
git.commit.select.file=Select highlighted file to add it to commit.
git.commit.amend.commit=Press {0} button to edit last commit.
git.commit.select.top.commit.again=Select top commit in the Git tool window again to see the information about amended commit.
git.commit.two.committed.files.explanation=Now you can see that our commit contain two changed files.

git.feature.branch.lesson.name=Feature branch workflow
git.feature.branch.introduction.1=Suppose you have finished the work on your {0} branch and pushed the changes to remote \
  hoping to merge it with the {1} branch later. Press {2} to open Git tool window and overview the project history.
git.feature.branch.introduction.2=But when you were worked on it some of your colleagues may also push their changes to the {0} branch. \
  So we should check that possible changes from {0} will not conflict with our changes.
git.feature.branch.open.branches.popup.1=At first, we need to checkout the {0} branch. \
  Please press {1} or click the highlighted current branch to open the branches list.
git.feature.branch.open.branches.popup.balloon=Your active branch is displayed here.
git.feature.branch.checkout.branch=Select the {0} branch and choose {1}.
git.feature.branch.open.update.dialog=Second, we should update the {0} branch to be aware of the possible changes from remote. \
  Press {1} to open update project dialog.
git.feature.branch.confirm.update=Click {0} button to confirm update.
git.feature.branch.new.commits.explanation=There really were some changes in the {0} branch.
git.feature.branch.open.branches.popup.2=So we should rebase our {0} branch on {1}. \
  Press {2} or click the highlighted current branch to open the branches list again.
git.feature.branch.checkout.and.rebase=Select the {0} branch and choose {1}.
git.feature.branch.open.push.dialog=When {0} branch become updated we should update it in the remote repository too. \
  Press {1} to open push dialog.
git.feature.branch.choose.force.push=We can''t just push the changes, because our remote {0} branch conflicts with updated local branch. \
  We should use {1}. Press highlighted arrow near {2} button to open drop-down menu and select {1}.
git.feature.branch.confirm.force.push=Press {0} button again to confirm action.

git.interactive.rebase.lesson.name=Interactive rebase
git.interactive.rebase.open.git.window=Suppose you have made some fixes to your project. \
  Press {0} to open Git tool window and overview the project history.
git.interactive.rebase.introduction=But from the resulting highlighted sequence of commits, \
  it was difficult to understand what has changed in general. It would be more easy if some commits will be reordered or squashed.
git.interactive.rebase.open.context.menu=We can use <strong>Interactive Rebase</strong> feature to solve this task easily. \
  Right click the highlighted commit to open context menu.
git.interactive.rebase.choose.interactive.rebase=Select {0} from the list and press {1} or click on it.
git.interactive.rebase.select.one.commit=Seems that the highlighted commit fixes something in the first commit from the list. \
  It would be great if we combine them in one. Select the highlighted commit.
git.interactive.rebase.move.commit=And now move this commit to the highlighted place. Use mouse or press {0} three times.
git.interactive.rebase.invoke.fixup=Press {0} or click highlighted button and select {1} from the list \
  to add changes from this commit to the first commit.
git.interactive.rebase.select.three.commits=Great! Seems that the three highlighted commits are about the same. \
  So we can combine them in one and edit resulting message. Select highlighted commits using {0}.
git.interactive.rebase.invoke.squash=And now press {0} or click {1} button to unite the commits.
git.interactive.rebase.apply.reword=By default messages of all squashing commits included in the resulting message, \
  but in our case we can replace it with something like <code>Fix style</code>. Edit the message if you want and press {0} to apply reword.
git.interactive.rebase.start.rebasing=Finally click {0} to perform rebase.
git.interactive.rebase.congratulations=Congratulations! You have made history of the project clean again!

git.changelists.shelf.lesson.name=Changelists and shelf
git.changelists.shelf.introduction=Suppose you don't want to commit added comment to the repository, \
  because this change needed only locally. In the common case it can be some personal settings. \
  You can extract the comment to the new changelist, to not commit it accidentally with other changes. \
  Click the highlighted line marker to open the context menu.
git.changelists.shelf.choose.new.changelist=Click the {0} link and choose the {1} item.
git.changelists.shelf.create.changelist=Name the new changelist something like <code>Comments</code>. \
  Press {0} or click {1} button to create new changelist.
git.changelists.shelf.open.commit.window=Now please press {0} to open commit tool window and see created changelist.
git.changelists.shelf.explanation=In addition you can use {0} feature to save this changes in the file on your computer. \
  Changes stored in the {0} can be applied later in any branch. So it will protect you from losing this changes.
git.changelists.shelf.open.context.menu=Let's shelve our changes! Right click the highlighted changelist to open context menu.
git.changelists.shelf.open.shelf.dialog=Select {0} to open {1} dialog.
git.changelists.shelf.shelve.changelist=Now you can edit the message or leave it as the IDE proposed. \
  Click {0} button to store the changes in the {1}.
git.changelists.shelf.remove.changelist=We don''t need this changelist anymore, so click the {0} button.
git.changelists.shelf.performed.explanation=You can see that our changelist successfully saved to the {0} \
  and comment is disappeared from the open file.
git.changelists.shelf.open.unshelve.dialog=When your changes stored in the {0} you can apply it again. \
  To perform it, select the highlighted changelist and press {1} to open the <strong>Unshelve</strong> dialog.
git.changelists.shelf.unshelve.changelist=Now you can edit the name of the changelist to put the unshelving changes \
  or leave it as the IDE proposed. Click {0} button to apply the changes.

git.annotate.lesson.name=Annotate with Git Blame
git.annotate.introduction=Look at the highlighted property. Seems strange that according to the value of this property, cat has 4 ears. \
  The reason of this change is interesting. We can investigate the history of the file using {0} feature.
git.annotate.invoke.shortcut.1=Press {0} to show history of this file.
git.annotate.open.context.menu=Right click somewhere in the highlighted area to open context menu.
git.annotate.choose.annotate=Choose {0} option to show history of this file.
git.annotate.add.shortcut.tip=<strong>Tip</strong>: you can assign a shortcut for {0} action. Click this link {1} and choose {2}.
git.annotate.feature.explanation=Annotate action provides easy access to the last commit that modified any specific line of the file. \
  You can see that {0} is the last who modified our strange line. Right click the highlighted annotation to open the context menu.
git.annotate.choose.show.diff=Choose {0} option to show what is changed in this commit.
git.annotate.go.deeper=You can see that our strange value of {0} appeared earlier than this commit. So let''s go deeper in the history!
git.annotate.invoke.shortcut.2=Move the caret to the left editor and press {0} again.
git.annotate.invoke.manually=Right click somewhere in the highlighted area and choose {0} option from the opened menu.
git.annotate.show.diff=Right click the highlighted annotation to open the context menu and choose {0} option.
git.annotate.found.needed.commit=Great! We found the place where {0} value was changed. \
  So let''s annotate it for the last time to investigate the reason of this change.
git.annotate.invoke.shortcut.3=Move the caret to the right editor and press {0}.
git.annotate.click.annotation=Click the highlighted annotation to show information about this commit.
git.annotate.close.all.windows=As mentioned in the highlighted commit message, this strange value of {0} is not a mistake. \
  So after the long journey through the history of this file you can close all opened windows to return to the editor.
git.annotate.close.annotations=And now you can close the annotations.
git.annotate.close.by.shortcut=Press {0}.