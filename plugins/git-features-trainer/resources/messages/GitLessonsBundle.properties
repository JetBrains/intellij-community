git.module.name=Git
git.module.description=Learn how to use Git integration in the IDE

# Utilities
git.balloon.press.to.proceed=Press {0} to proceed.
git.move.learn.window.balloon.text=We moved the Learn panel to the right because it is covered by the Commit tool window.
git.window.closed.warning=Press {0} to open the commit tool window again.
git.commit.window.closed.warning=Press {0} to open the Git tool window again.

# Lessons
git.project.history.lesson.name=Project history
git.project.history.open.git.window=Press {0} to open the Git tool window and preview the project history.
git.project.history.commits.tree.explanation=The tree of commits is located in the center of the tool window. \
  The last commit of your active branch is highlighted. All commits with {0} background are located in this branch. \
  The rest of the commits are in the other branches.
git.project.history.apply.branch.filter=All branches of your repository are listed in the left pane of the tool window. \
  Double-click the highlighted <strong>HEAD</strong> branch to show commits only from the active branch.
git.project.history.apply.user.filter=You can use many filters that help to discover commits. \
  For example, you can preview the commits of a specific author. Click the highlighted filter to open the list of users.
git.project.history.select.me=Select {0} from the list to show only your commits.
git.project.history.apply.message.filter=The highlighted search field can help you find a commit by a message or hash. \
  Suppose you want to find a commit by part of the message. For example, type {0} in the highlighted field and press {1}.
git.project.history.select.commit=Select the highlighted commit to obtain information about it.
git.project.history.commit.details.explanation=Right pane of the tool window shows information about the selected commit: \
  some metadata and the branches that contain this commit.
git.project.history.click.changed.file=There is also a tree with all files changed in this commit. \
  Double-click the highlighted file to preview its changes.
git.project.history.invitation.to.commit.lesson=Great! Let's discover how to create commits in the next lesson.

git.commit.lesson.name=Commit
git.commit.open.commit.window=Suppose you modified some files in the project and want to commit them to the current branch. \
  Press {0} to open the commit tool window.
git.commit.choose.files=The Commit tool window provides wide customization for your commits. \
  Let's choose the files that we want to commit.
git.commit.choose.files.balloon=Deselect this file to exclude it from commit.
git.commit.open.before.commit.options=Now tune the commit options. Press {0} to open the Git options popup.
git.commit.analyze.code.explanation=Use {0} to get notified of warnings and errors found in the files to be committed. \
  In this lesson, you can keep this option intact.
git.commit.enable.reformat.code=Select {0} to automatically edit files according to the code style.
git.commit.close.commit.options=When required options are selected, close the commit options popup. Press {0}.
git.commit.perform.commit=Now edit the commit message or leave it as proposed. Then click {0} button to perform a commit.
git.commit.open.git.window=Great! Press {0} to open the Git tool window and discover your commit in the tree.
git.commit.select.top.commit=Select the top commit in the tree to see the more details about it.
git.commit.committed.file.explanation=The right pane of the Git tool window shows the file changed by the last commit.
git.commit.select.amend.checkbox=What if you forgot to add some changes to the last performed commit? \
  The best way is to use the {0} feature to edit the last commit. Press {1} or select {0} checkbox in the commit tool window.
git.commit.select.file=Select the highlighted file to add it to the commit.
git.commit.amend.commit=Click the {0} button to edit the last commit.
git.commit.select.top.commit.again=Select the top commit in the Git tool window again to see the information about the amended commit.
git.commit.two.committed.files.explanation=Now you can see that the target commit contains two changed files.

git.feature.branch.lesson.name=Feature branch workflow
git.feature.branch.introduction.1=Suppose you have finished the work on your {0} branch and pushed the changes to the remote \
  to merge it with the {1} branch later. Press {2} to open the Git tool window and preview the project history.
git.feature.branch.introduction.2=But while you are working on your feature, some of your colleagues also push their changes to the {0} \
  branch. Let\u2019s check that changes in {0} do not conflict with your changes.
git.feature.branch.open.branches.popup.1=First, checkout the {0} branch. Press {1} or click the highlighted current branch to open the \
  branches list.
git.feature.branch.open.branches.popup.balloon=Your active branch is displayed here.
git.feature.branch.checkout.branch=Choose the {0} branch and select {1} from the menu.
git.feature.branch.open.update.dialog=Now update the {0} branch to be aware of the possible changes from the remote repository. \
  Press {1} to open the {2} dialog.
git.feature.branch.confirm.update=Click {0} to confirm the update.
git.feature.branch.new.commits.explanation=You can notice some changes in the {0} branch.
git.feature.branch.open.branches.popup.2=So, you should rebase the {0} branch on {1}. \
  Press {2} or click the highlighted current branch to open the list of branches again.
git.feature.branch.checkout.and.rebase=Select the {0} branch and choose {1}.
git.feature.branch.open.push.dialog=When the {0} branch becomes updated, you should update it in the remote repository too. \
  Press {1} to open the {2} dialog.
git.feature.branch.choose.force.push=You cannot just push the changes, because the remote {0} branch conflicts with the updated local branch. \
  Use {1}. Press the highlighted arrow near the {2} button to open the menu and select {1}.
git.feature.branch.confirm.force.push=Press {0} again to confirm the action.

git.interactive.rebase.lesson.name=Interactive rebase
git.interactive.rebase.open.git.window=Suppose you have made some fixes to your project. \
  Press {0} to open the Git tool window and preview the project history.
git.interactive.rebase.introduction=Looking at the highlighted sequence of commits it is hard to decide what has changed in general. \
  It would be easier if you could reorder or squash some commits.
git.interactive.rebase.open.context.menu=Use <strong>Interactive Rebase</strong> to solve this task. \
  Right-click the highlighted commit to open the context menu.
git.interactive.rebase.choose.interactive.rebase=Select {0} from the list and press {1}.
git.interactive.rebase.select.one.commit=Seems that the highlighted commit fixes something in the first commit from the list. \
  It would be great to combine both in one. Select the highlighted commit.
git.interactive.rebase.move.commit=And now move this commit up to the highlighted place. Use mouse or press {0} three times.
git.interactive.rebase.invoke.fixup=Press {0} or click the highlighted button and select {1} from the list \
  to add changes from this commit to the first commit.
git.interactive.rebase.select.three.commits=Great! Seems that the three highlighted commits are about the same. \
  So we can combine them in one and edit the resulting message. Select the highlighted commits by clicking them and pressing {0}.
git.interactive.rebase.invoke.squash=Press {0} or click {1} button to unite the commits.
git.interactive.rebase.apply.reword=By default, messages of all squashing commits are included into the resulting message. \
  However, in this lesson, replace it with something like <code>Fix style</code>. \
  Edit the message if you want and press {0} to apply rewording.
git.interactive.rebase.start.rebasing=Finally, click {0}.
git.interactive.rebase.congratulations=Congratulations! You have made the history of the project clean!

git.changelists.shelf.lesson.name=Changelists and shelf
git.changelists.shelf.introduction=Suppose you don't want to commit an added comment to the repository, because it is needed only locally. \
  In a common case, it can present some personal settings. \
  You can extract the comment to the new changelist, to not commit it accidentally with other changes. \
  Click the highlighted line marker to open the context menu.
git.changelists.shelf.choose.new.changelist=Click {0} and select the {1} menu item.
git.changelists.shelf.create.changelist=Name the new changelist <code>Comments</code>. \
  Press {0} or click {1} button to create a new changelist.
git.changelists.shelf.open.commit.window=Now press {0} to open the commit tool window and inspect the created changelist.
git.changelists.shelf.explanation=In addition, you can use the {0} feature to save these changes in a file on your computer. \
  Changes stored in the {0} can be applied later to any branch. It helps you avoid losing these changes.
git.changelists.shelf.open.context.menu=Let's shelve the changes! Right-click the highlighted changelist to open the context menu.
git.changelists.shelf.open.shelf.dialog=Select {0} to open {1} dialog.
git.changelists.shelf.shelve.changelist=Now you can edit the message or leave it intact. \
  Click {0} button to store the changes in the {1}.
git.changelists.shelf.remove.changelist=You don''t need this changelist anymore, so click the {0} button.
git.changelists.shelf.performed.explanation=You can notice that the changelist is successfully saved to the {0} \
  and the comment has disappeared.
git.changelists.shelf.open.unshelve.dialog=When your changes are stored in {0}, you can apply them again. \
  Select the highlighted changelist and press {1} to open the <strong>Unshelve</strong> dialog.
git.changelists.shelf.unshelve.changelist=Now you can edit the name of the changelist to put the unshelving changes or leave it as is. \
  Click {0} to apply the changes.

git.annotate.lesson.name=Annotate with Git Blame
git.annotate.introduction=Look at the highlighted property. The value of the property implies that a cat has four ears. \
  The reason for this change is interesting. We can investigate the history of the file using the {0} feature.
git.annotate.invoke.shortcut.1=Press {0} to show history of this file.
git.annotate.open.context.menu=Right-click the highlighted left gutter to open the context menu.
git.annotate.choose.annotate=Select the {0} option to show the history of this file.
git.annotate.add.shortcut.tip=<strong>Tip</strong>: you can assign a shortcut to the {0} action. Click this link {1} and choose {2}.
git.annotate.feature.explanation=The {0} action provides easy access to the last commit that modified any specific line of the file. \
  You can see that {1} is the last who modified this line. Right-click the highlighted annotation to open the context menu.
git.annotate.choose.show.diff=Choose the {0} option to show what is changed in this commit.
git.annotate.go.deeper=You can notice that the value of {0} appeared before this commit. So let''s go deeper in history!
git.annotate.invoke.shortcut.2=Move the caret to the left editor and press {0} again.
git.annotate.invoke.manually=Right-click the highlighted area and select the {0} option from the opened menu.
git.annotate.show.diff=Right click the highlighted annotation to open the context menu and choose {0}.
git.annotate.found.needed.commit=Great! We found the place where {0} value has been changed. \
  So let''s annotate it for the last time to investigate the reason for this change.
git.annotate.invoke.shortcut.3=Move the caret to the right editor and press {0}.
git.annotate.click.annotation=Click the highlighted annotation to preview information about this commit.
git.annotate.close.all.windows=As mentioned in the highlighted commit message, this strange value of {0} is not a mistake. \
  So, after the long journey through the history of this file you can close all opened windows to return to the editor.
git.annotate.close.annotations=And now you can close the annotations.
git.annotate.close.by.shortcut=Press {0}.