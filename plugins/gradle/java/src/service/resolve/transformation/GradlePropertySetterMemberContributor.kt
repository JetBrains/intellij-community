// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package org.jetbrains.plugins.gradle.service.resolve.transformation

import com.intellij.lang.java.beans.PropertyKind
import com.intellij.psi.*
import com.intellij.psi.impl.light.LightMethodBuilder
import com.intellij.psi.scope.PsiScopeProcessor
import com.intellij.psi.util.PropertyUtilBase.*
import com.intellij.util.asSafely
import org.jetbrains.plugins.gradle.config.isGradleFile
import org.jetbrains.plugins.gradle.service.resolve.GradleCommonClassNames
import org.jetbrains.plugins.groovy.lang.resolve.NonCodeMembersContributor
import org.jetbrains.plugins.groovy.lang.resolve.getName
import org.jetbrains.plugins.groovy.lang.resolve.shouldProcessMethods
import org.jetbrains.plugins.groovy.lang.resolve.shouldProcessProperties

/**
 * For each getter with type [org.gradle.api.provider.Property], Gradle generates a corresponding setter
 * @see org.gradle.internal.instantiation.generator.AbstractClassGenerator
 */
class GradlePropertySetterMemberContributor : NonCodeMembersContributor() {
  override fun getClassNames(): Collection<String> = emptyList()

  override fun getParentClassName(): String? = null

  override fun processDynamicElements(qualifierType: PsiType,
                                      aClass: PsiClass?,
                                      processor: PsiScopeProcessor,
                                      place: PsiElement,
                                      state: ResolveState) {

    if (aClass == null) {
      return
    }
    if (place.containingFile.isGradleFile().not()) {
      return
    }
    if (!(processor.shouldProcessMethods() || processor.shouldProcessProperties())) {
      return
    }
    val nameHint = processor.getName(state)?.let { getPropertyName(it) ?: return } ?: ""
    val getters = getAllProperties(aClass, false, true, true)
    for ((simpleName, method) in getters) {
      if (nameHint !in simpleName) {
        continue
      }
      processSetter(method, simpleName, processor, state)
    }
  }
}

private fun processSetter(method: PsiMethod, simpleName : String, processor: PsiScopeProcessor, state: ResolveState) {
  if (!isSimplePropertyGetter(method)) {
    return
  }
  val returnType = method.returnType.asSafely<PsiClassType>() ?: return
  if (returnType.resolve()?.qualifiedName != GradleCommonClassNames.GRADLE_API_PROVIDER_PROPERTY) {
    return
  }
  val setterName = getAccessorName(simpleName, PropertyKind.SETTER)
  val setter = with(LightMethodBuilder(method.manager, setterName)) {
    navigationElement = method
    containingClass = method.containingClass
    originInfo = "Generated by decoration of Gradle property getter"
    setMethodReturnType(PsiTypes.voidType())
    val innerParameter = returnType.parameters.singleOrNull() ?: return
    addParameter("value", innerParameter)
    this
  }
  processor.execute(setter, state)
}