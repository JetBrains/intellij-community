// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package org.jetbrains.plugins.gradle.util

import org.jetbrains.plugins.gradle.util.GradleCommandLineParserTestCase.SimpleOption.LongNotation
import org.jetbrains.plugins.gradle.util.GradleCommandLineParserTestCase.SimpleOption.PropertyNotation
import org.jetbrains.plugins.gradle.util.GradleCommandLineParserTestCase.SimpleOption.VarargNotation
import org.jetbrains.plugins.gradle.util.cmd.node.GradleCommandLine
import org.junit.jupiter.api.Test

class GradleCommandLineParserTest : GradleCommandLineParserTestCase() {

  @Test
  fun `test simple parsing`() {
    GradleCommandLine.parse("")
      .assertNoText()
      .assertNoTaskText()
      .assertNoOptionText()
      .assertNoTokens()
      .assertNoTaskTokens()
      .assertNoOptionTokens()
      .assertNoTasks()
      .assertNoOptions()
    GradleCommandLine.parse("task")
      .assertText("task")
      .assertTaskText("task")
      .assertNoOptionText()
      .assertTokens("task")
      .assertTaskTokens("task")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("task"))
      .assertNoOptions()
    GradleCommandLine.parse("--info")
      .assertText("--info")
      .assertNoTaskText()
      .assertOptionText("--info")
      .assertTokens("--info")
      .assertNoTaskTokens()
      .assertOptionTokens("--info")
      .assertNoTasks()
      .assertOptions(VarargNotation("--info"))
    GradleCommandLine.parse("--info --debug")
      .assertText("--info --debug")
      .assertNoTaskText()
      .assertOptionText("--info --debug")
      .assertTokens("--info", "--debug")
      .assertNoTaskTokens()
      .assertOptionTokens("--info", "--debug")
      .assertNoTasks()
      .assertOptions(VarargNotation("--info"), VarargNotation("--debug"))
    GradleCommandLine.parse("--debug --info")
      .assertText("--debug --info")
      .assertNoTaskText()
      .assertOptionText("--debug --info")
      .assertTokens("--debug", "--info")
      .assertNoTaskTokens()
      .assertOptionTokens("--debug", "--info")
      .assertNoTasks()
      .assertOptions(VarargNotation("--debug"), VarargNotation("--info"))
    GradleCommandLine.parse("task --info")
      .assertText("task --info")
      .assertTaskText("task")
      .assertOptionText("--info")
      .assertTokens("task", "--info")
      .assertTaskTokens("task")
      .assertOptionTokens("--info")
      .assertTasks(SimpleTask("task"))
      .assertOptions(VarargNotation("--info"))
    GradleCommandLine.parse("task1 task2 --continuous")
      .assertText("task1 task2 --continuous")
      .assertTaskText("task1 task2")
      .assertOptionText("--continuous")
      .assertTokens("task1", "task2", "--continuous")
      .assertTaskTokens("task1", "task2")
      .assertOptionTokens("--continuous")
      .assertTasks(SimpleTask("task1"), SimpleTask("task2"))
      .assertOptions(VarargNotation("--continuous"))
    GradleCommandLine.parse("-t task1 task2 --no-daemon")
      .assertText("task1 task2 -t --no-daemon")
      .assertTaskText("task1 task2")
      .assertOptionText("-t --no-daemon")
      .assertTokens("task1", "task2", "-t", "--no-daemon")
      .assertTaskTokens("task1", "task2")
      .assertOptionTokens("-t", "--no-daemon")
      .assertTasks(SimpleTask("task1"), SimpleTask("task2"))
      .assertOptions(VarargNotation("-t"), VarargNotation("--no-daemon"))
    GradleCommandLine.parse("task --unknown-option")
      .assertText("task --unknown-option")
      .assertTaskText("task --unknown-option")
      .assertNoOptionText()
      .assertTokens("task", "--unknown-option")
      .assertTaskTokens("task", "--unknown-option")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("task"), SimpleTask("--unknown-option"))
      .assertNoOptions()
  }

  @Test
  fun `test --tests option`() {
    GradleCommandLine.parse("test --tests")
      .assertText("test --tests")
      .assertTaskText("test --tests")
      .assertNoOptionText()
      .assertTokens("test", "--tests")
      .assertTaskTokens("test", "--tests")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("test", VarargNotation("--tests")))
      .assertNoOptions()
    GradleCommandLine.parse("test --tests='*'")
      .assertText("test --tests='*'")
      .assertTaskText("test --tests='*'")
      .assertNoOptionText()
      .assertTokens("test", "--tests='*'")
      .assertTaskTokens("test", "--tests='*'")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("test", LongNotation("--tests", "'*'")))
      .assertNoOptions()
    GradleCommandLine.parse("test --tests *")
      .assertText("test --tests *")
      .assertTaskText("test --tests *")
      .assertNoOptionText()
      .assertTokens("test", "--tests", "*")
      .assertTaskTokens("test", "--tests", "*")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("test", VarargNotation("--tests", "*")))
      .assertNoOptions()
    GradleCommandLine.parse("test --tests 'org.example.TestClass'")
      .assertText("test --tests 'org.example.TestClass'")
      .assertTaskText("test --tests 'org.example.TestClass'")
      .assertNoOptionText()
      .assertTokens("test", "--tests", "'org.example.TestClass'")
      .assertTaskTokens("test", "--tests", "'org.example.TestClass'")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("test", VarargNotation("--tests", "'org.example.TestClass'")))
      .assertNoOptions()
    GradleCommandLine.parse("test --tests 'org.example.TestClass.test1' --tests 'org.example.TestClass.test2'")
      .assertText("test --tests 'org.example.TestClass.test1' --tests 'org.example.TestClass.test2'")
      .assertTaskText("test --tests 'org.example.TestClass.test1' --tests 'org.example.TestClass.test2'")
      .assertNoOptionText()
      .assertTokens("test", "--tests", "'org.example.TestClass.test1'", "--tests", "'org.example.TestClass.test2'")
      .assertTaskTokens("test", "--tests", "'org.example.TestClass.test1'", "--tests", "'org.example.TestClass.test2'")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("test", VarargNotation("--tests", "'org.example.TestClass.test1'"), VarargNotation("--tests", "'org.example.TestClass.test2'")))
      .assertNoOptions()
    GradleCommandLine.parse("test --tests org.example.TestClass.test1 --tests=org.example.TestClass.test2")
      .assertText("test --tests org.example.TestClass.test1 --tests=org.example.TestClass.test2")
      .assertTaskText("test --tests org.example.TestClass.test1 --tests=org.example.TestClass.test2")
      .assertNoOptionText()
      .assertTokens("test", "--tests", "org.example.TestClass.test1", "--tests=org.example.TestClass.test2")
      .assertTaskTokens("test", "--tests", "org.example.TestClass.test1", "--tests=org.example.TestClass.test2")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("test", VarargNotation("--tests", "org.example.TestClass.test1"), LongNotation("--tests", "org.example.TestClass.test2")))
      .assertNoOptions()
  }

  @Test
  fun `test options with arguments`() {
    GradleCommandLine.parse("bootRun --include-build /home/user/project")
      .assertText("bootRun --include-build /home/user/project")
      .assertTaskText("bootRun")
      .assertOptionText("--include-build /home/user/project")
      .assertTokens("bootRun", "--include-build", "/home/user/project")
      .assertTaskTokens("bootRun")
      .assertOptionTokens("--include-build", "/home/user/project")
      .assertTasks(SimpleTask("bootRun"))
      .assertOptions(VarargNotation("--include-build", "/home/user/project"))
    GradleCommandLine.parse("--include-build /home/user/project bootRun")
      .assertText("bootRun --include-build /home/user/project")
      .assertTaskText("bootRun")
      .assertOptionText("--include-build /home/user/project")
      .assertTokens("bootRun", "--include-build", "/home/user/project")
      .assertTaskTokens("bootRun")
      .assertOptionTokens("--include-build", "/home/user/project")
      .assertTasks(SimpleTask("bootRun"))
      .assertOptions(VarargNotation("--include-build", "/home/user/project"))
    GradleCommandLine.parse("bootRun --include-build=/home/user/project")
      .assertText("bootRun --include-build=/home/user/project")
      .assertTaskText("bootRun")
      .assertOptionText("--include-build=/home/user/project")
      .assertTokens("bootRun", "--include-build=/home/user/project")
      .assertTaskTokens("bootRun")
      .assertOptionTokens("--include-build=/home/user/project")
      .assertTasks(SimpleTask("bootRun"))
      .assertOptions(LongNotation("--include-build", "/home/user/project"))
    GradleCommandLine.parse("task -Dmyprop=myvalue")
      .assertText("task -Dmyprop=myvalue")
      .assertTaskText("task")
      .assertOptionText("-Dmyprop=myvalue")
      .assertTokens("task", "-Dmyprop=myvalue")
      .assertTaskTokens("task")
      .assertOptionTokens("-Dmyprop=myvalue")
      .assertTasks(SimpleTask("task"))
      .assertOptions(PropertyNotation("-D", "myprop", "myvalue"))
    GradleCommandLine.parse("-Pmyprop=myvalue task")
      .assertText("task -Pmyprop=myvalue")
      .assertTaskText("task")
      .assertOptionText("-Pmyprop=myvalue")
      .assertTokens("task", "-Pmyprop=myvalue")
      .assertTaskTokens("task")
      .assertOptionTokens("-Pmyprop=myvalue")
      .assertTasks(SimpleTask("task"))
      .assertOptions(PropertyNotation("-P", "myprop", "myvalue"))
  }

  @Test
  fun `test deprecated options parsing`() {
    GradleCommandLine.parse("--help --unknown-option --version")
      .assertText("--unknown-option --help --version")
      .assertTaskText("--unknown-option")
      .assertOptionText("--help --version")
      .assertTokens("--unknown-option", "--help", "--version")
      .assertTaskTokens("--unknown-option")
      .assertOptionTokens("--help", "--version")
      .assertTasks(SimpleTask("--unknown-option"))
      .assertOptions(VarargNotation("--help"), VarargNotation("--version"))
    GradleCommandLine.parse("--build-file /home/user/project/build.gradle")
      .assertText("--build-file /home/user/project/build.gradle")
      .assertNoTaskText()
      .assertOptionText("--build-file /home/user/project/build.gradle")
      .assertTokens("--build-file", "/home/user/project/build.gradle")
      .assertNoTaskTokens()
      .assertOptionTokens("--build-file", "/home/user/project/build.gradle")
      .assertNoTasks()
      .assertOptions(VarargNotation("--build-file", "/home/user/project/build.gradle"))
      .assertNoTasks()
      .assertOptionTokens("--build-file", "/home/user/project/build.gradle")
    GradleCommandLine.parse("--settings-file=/home/user/project/settings.gradle")
      .assertText("--settings-file=/home/user/project/settings.gradle")
      .assertNoTaskText()
      .assertOptionText("--settings-file=/home/user/project/settings.gradle")
      .assertTokens("--settings-file=/home/user/project/settings.gradle")
      .assertNoTaskTokens()
      .assertOptionTokens("--settings-file=/home/user/project/settings.gradle")
      .assertNoTasks()
      .assertOptions(LongNotation("--settings-file", "/home/user/project/settings.gradle"))
  }

  @Test
  fun `test space merging`() {
    GradleCommandLine.parse("")
      .assertNoText()
      .assertNoTaskText()
      .assertNoOptionText()
      .assertNoTokens()
      .assertNoTaskTokens()
      .assertNoOptionTokens()
      .assertNoTasks()
      .assertNoOptions()
    GradleCommandLine.parse("      ")
      .assertNoText()
      .assertNoTaskText()
      .assertNoOptionText()
      .assertNoTokens()
      .assertNoTaskTokens()
      .assertNoOptionTokens()
      .assertNoTasks()
      .assertNoOptions()
    GradleCommandLine.parse("  task  task  ")
      .assertText("task task")
      .assertTaskText("task task")
      .assertNoOptionText()
      .assertTokens("task", "task")
      .assertTaskTokens("task", "task")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("task"), SimpleTask("task"))
      .assertNoOptions()
    GradleCommandLine.parse(listOf("", "task", "", "", "task", ""))
      .assertText("task task")
      .assertTaskText("task task")
      .assertNoOptionText()
      .assertTokens("task", "task")
      .assertTaskTokens("task", "task")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("task"), SimpleTask("task"))
      .assertNoOptions()
    GradleCommandLine.parse("''")
      .assertText("''")
      .assertTaskText("''")
      .assertNoOptionText()
      .assertTokens("''")
      .assertTaskTokens("''")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("''"))
      .assertNoOptions()
    GradleCommandLine.parse("\"\"")
      .assertText("\"\"")
      .assertTaskText("\"\"")
      .assertNoOptionText()
      .assertTokens("\"\"")
      .assertTaskTokens("\"\"")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("\"\""))
      .assertNoOptions()
    GradleCommandLine.parse("test --tests ''")
      .assertText("test --tests ''")
      .assertTaskText("test --tests ''")
      .assertNoOptionText()
      .assertTokens("test", "--tests", "''")
      .assertTaskTokens("test", "--tests", "''")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("test", VarargNotation("--tests", "''")))
      .assertNoOptions()
    GradleCommandLine.parse("test --tests '*'")
      .assertText("test --tests '*'")
      .assertTaskText("test --tests '*'")
      .assertNoOptionText()
      .assertTokens("test", "--tests", "'*'")
      .assertTaskTokens("test", "--tests", "'*'")
      .assertNoOptionTokens()
      .assertTasks(SimpleTask("test", VarargNotation("--tests", "'*'")))
      .assertNoOptions()
  }
}