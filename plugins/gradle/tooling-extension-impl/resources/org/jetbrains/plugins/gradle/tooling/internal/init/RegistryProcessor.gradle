// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
//file:noinspection GrPackage

import org.gradle.api.Project
import org.gradle.api.ProjectEvaluationListener
import org.gradle.api.ProjectState
import org.gradle.api.internal.project.ProjectInternal
import org.gradle.tooling.provider.model.ToolingModelBuilder
import org.gradle.tooling.provider.model.ToolingModelBuilderRegistry

import java.util.concurrent.CopyOnWriteArrayList

/**
 * Adds a single extra model builder instance for each root of ToolingModelBuilderRegistry hierarchy<br>
 * Thread safe.
 */
class RegistryProcessor implements ProjectEvaluationListener {

  ToolingModelBuilder jetModelBuilder

  RegistryProcessor(ToolingModelBuilder jetModelBuilder) {
    this.jetModelBuilder = jetModelBuilder
  }

  CopyOnWriteArrayList<ToolingModelBuilderRegistry> processedRegistries = new CopyOnWriteArrayList<ToolingModelBuilderRegistry>()

  @Override
  void beforeEvaluate(Project project) {
    def registry = (ToolingModelBuilderRegistry)((ProjectInternal)project).services.get(ToolingModelBuilderRegistry.class)
    process(registry)
  }

  void process(ToolingModelBuilderRegistry registry) {
    ToolingModelBuilderRegistry rootRegistry = registry
    while (rootRegistry.hasProperty('parent') && rootRegistry.parent != null) {
      rootRegistry = rootRegistry.parent
    }

    boolean alreadySeen = !processedRegistries.addIfAbsent(rootRegistry)
    if (alreadySeen || extraModelBuilderIsRegistered(rootRegistry)) {
      return
    }
    rootRegistry.register(jetModelBuilder)
    println("registered $jetModelBuilder on ${rootRegistry}")
  }

  private static boolean extraModelBuilderIsRegistered(registry) {
    return JetGradlePlugin.findJetModelBuilder(registry) != null
  }

  @Override
  void afterEvaluate(Project project, ProjectState state) {}
}
