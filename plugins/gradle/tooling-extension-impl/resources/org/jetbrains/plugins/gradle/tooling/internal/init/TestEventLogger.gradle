// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
//file:noinspection GrPackage

import groovy.xml.MarkupBuilder
import org.gradle.api.internal.tasks.testing.TestDescriptorInternal
import org.gradle.api.tasks.testing.TestDescriptor
import org.gradle.api.tasks.testing.TestOutputEvent
import org.gradle.api.tasks.testing.TestResult

import java.nio.charset.StandardCharsets

class TestEventLogger {

  static def writeLog(String text) {
    println String.format(
      "<ijLog>%s</ijLog>",
      text.replaceAll("\r\n|\n\r|\n|\r", "<ijLogEol/>")
    )
  }

  static void writeLogTestEvent(String testEventType, TestDescriptor testDescriptor, TestOutputEvent testEvent, TestResult testResult) {
    def writer = new StringWriter()
    def xml = new MarkupBuilder(writer)
    logTestEvent(xml, testEventType, testDescriptor, testEvent, testResult)
    writeLog(writer.toString())
  }

  private static def logTestEvent(
    MarkupBuilder xml,
    String testEventType,
    TestDescriptor testDescriptor,
    TestOutputEvent testEvent,
    TestResult testResult
  ) {
    xml.event(type: testEventType) {
      def internalDescriptor = (TestDescriptorInternal)testDescriptor
      def testId = internalDescriptor.id
      def parentTestId = internalDescriptor.parent?.id ?: ''
      xml.test(id: testId, parentId: parentTestId) {
        if (testDescriptor != null) {
          logTestDescriptor(xml, testDescriptor)
        }
        if (testEvent != null) {
          logTestOutputEvent(xml, testEvent)
        }
        if (testResult != null) {
          logTestResult(xml, testResult)
        }
      }
    }
  }

  private static def logTestDescriptor(MarkupBuilder xml, TestDescriptor testDescriptor) {
    def name = testDescriptor.name ?: ''
    def displayName = getName(testDescriptor) ?: ''
    def className = testDescriptor.className ?: ''
    xml.descriptor(name: name, displayName: displayName, className: className)
  }

  private static def logTestOutputEvent(MarkupBuilder xml, TestOutputEvent testEvent) {
    def message = escapeCdata(testEvent.message)
    xml.event(destination: testEvent.destination) {
      xml.mkp.yieldUnescaped("$message")
    }
  }

  private static logTestResult(MarkupBuilder xml, TestResult testResult) {
    xml.result(resultType: testResult.resultType ?: '', startTime: testResult.startTime, endTime: testResult.endTime) {
      def exception = testResult.exception

      if (exception != null) {
        logFailureDescriptor(xml, exception)
      }

      if (isInstance(exception, 'com.intellij.rt.execution.junit.FileComparisonFailure')) {
        logIjFileComparisonFailure(xml, exception)
      }
      else if (isInstance(exception?.cause, 'com.intellij.rt.execution.junit.FileComparisonFailure')) {
        logIjFileComparisonFailure(xml, exception.cause)
      }
      else if (isInstance(exception, 'org.junit.ComparisonFailure')) {
        logJunit4ComparisonFailure(xml, exception)
      }
      else if (isInstance(exception, 'junit.framework.ComparisonFailure')) {
        logJunit4ComparisonFailure(xml, exception)
      }
      else if (isInstance(exception, 'org.opentest4j.AssertionFailedError')) {
        logOpentest4jComparisonFailure(xml, exception)
      }
      else if (exception instanceof AssertionError) {
        xml.failureType('assertionFailed')
      }
      else {
        xml.failureType('error')
      }
    }
  }

  private static boolean isInstance(Object object, String aClassReference) {
    Class<?> aClass = object?.getClass()
    while (aClass != null) {
      if (aClassReference == aClass.getName()) {
        return true
      }
      aClass = aClass.getSuperclass()
    }
    return false
  }

  private static def logFailureDescriptor(MarkupBuilder xml, Throwable exception) {
    def errorMsg = escapeCdata(exception.message)
    def exceptionName = escapeCdata(exception.class.name)
    def stackTrace = escapeCdata(getStackTrace(exception))

    xml.mkp.yieldUnescaped("<errorMsg>$errorMsg</errorMsg>")
    xml.mkp.yieldUnescaped("<exceptionName>$exceptionName</exceptionName>")
    xml.mkp.yieldUnescaped("<stackTrace>$stackTrace</stackTrace>")
  }

  // org.junit.ComparisonFailure | junit.framework.ComparisonFailure
  private static def logJunit4ComparisonFailure(MarkupBuilder xml, Throwable exception) {
    def expected = escapeCdata(exception.fExpected)
    def actual = escapeCdata(exception.fActual)

    xml.failureType('comparison')
    xml.mkp.yieldUnescaped("<expected>$expected</expected>")
    xml.mkp.yieldUnescaped("<actual>$actual</actual>")
  }

  // org.opentest4j.AssertionFailedError
  private static def logOpentest4jComparisonFailure(MarkupBuilder xml, Throwable exception) {
    def expectedValueWrapper = exception.expected
    def actualValueWrapper = exception.actual
    def expectedValue = expectedValueWrapper?.value
    def actualValue = actualValueWrapper?.value
    def expectedString = getOpentest4jStringPresentation(expectedValueWrapper, expectedValue)
    def actualString = getOpentest4jStringPresentation(actualValueWrapper, actualValue)
    def expectedFilePath = getOpentest4jFilePath(expectedValue)
    def actualFilePath = getOpentest4jFilePath(actualValue)

    xml.failureType('comparison')
    xml.mkp.yieldUnescaped("<expected>${escapeCdata(expectedString)}</expected>")
    xml.mkp.yieldUnescaped("<actual>${escapeCdata(actualString)}</actual>")
    xml.mkp.yieldUnescaped("<filePath>${escapeCdata(expectedFilePath)}</filePath>")
    xml.mkp.yieldUnescaped("<actualFilePath>${escapeCdata(actualFilePath)}</actualFilePath>")
  }

  private static String getOpentest4jFilePath(Object value) {
    if ("org.opentest4j.FileInfo" == value.getClass().getName()) {
      return value.path
    }
    return null
  }

  // org.opentest4j.ValueWrapper
  private static String getOpentest4jStringPresentation(Object valueWrapper, Object value) {
    if (value instanceof String) {
      return value
    }
    if ("org.opentest4j.FileInfo" == value.getClass().getName()) {
      return value.getContentsAsString(StandardCharsets.UTF_8)
    }
    return valueWrapper?.stringRepresentation
  }

  // com.intellij.rt.execution.junit.FileComparisonFailure
  private static def logIjFileComparisonFailure(MarkupBuilder xml, Throwable exception) {
    def expected = exception.hasProperty('expectedStringPresentation')
      ? escapeCdata(exception.expectedStringPresentation)
      : escapeCdata(exception.expected)
    def actual = exception.hasProperty('actualStringPresentation')
      ? escapeCdata(exception.actualStringPresentation)
      : escapeCdata(exception.actual)
    def filePath = escapeCdata(exception.filePath)
    def actualFilePath = exception.hasProperty('actualFilePath')
      ? escapeCdata(exception.actualFilePath)
      : escapeCdata(null)

    xml.failureType('comparison')
    xml.mkp.yieldUnescaped("<expected>$expected</expected>")
    xml.mkp.yieldUnescaped("<actual>$actual</actual>")
    xml.mkp.yieldUnescaped("<filePath>$filePath</filePath>")
    xml.mkp.yieldUnescaped("<actualFilePath>$actualFilePath</actualFilePath>")
  }

  private static String escapeCdata(String s) {
    def string = s ?: ""
    def encodedString = string.getBytes("UTF-8").encodeBase64()
    return "<![CDATA[$encodedString]]>"
  }

  private static def getStackTrace(Throwable t) {
    if (!t) return ''
    StringWriter sw = new StringWriter()
    t.printStackTrace(new PrintWriter(sw))
    sw.toString()
  }

  private static def getName(TestDescriptor descriptor) {
    try {
      // available starting from ver. 4.10.3
      return descriptor.getDisplayName()
    }
    catch (Throwable ignore) {
      return descriptor.getName()
    }
  }
}