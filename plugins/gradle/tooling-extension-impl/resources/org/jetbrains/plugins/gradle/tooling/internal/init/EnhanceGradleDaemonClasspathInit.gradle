// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
//file:noinspection GrPackage

//noinspection GrUnresolvedAccess
List<List<String>> classNames = CLASS_NAMES

gradle.taskGraph.whenReady { taskGraph ->
  taskGraph.allTasks.each { Task task ->
    if (task instanceof Test) {
      task.doFirst(new GradleDaemonClasspathEnhancer(logger, classNames))
    }
  }
}

class GradleDaemonClasspathEnhancer implements Action<Test> {

  private final Logger logger
  private final List<List<String>> classNames

  GradleDaemonClasspathEnhancer(Logger logger, List<List<String>> classNames) {
    this.logger = logger
    this.classNames = classNames
  }

  @Override
  void execute(Test task) {
    enhanceGradleDaemonClasspath(logger, task, classNames)
  }

  private static void enhanceGradleDaemonClasspath(Logger logger, Test task, List<List<String>> classNames) {
    try {
      def testClasspath = getTestClasspath(task)
      def classpath = classNames.collectMany(new LinkedHashSet()) {
        findJarsForClasses(testClasspath, it)
      }
      logger.debug("Test classpath:")
      for (def url : testClasspath) {
        logger.debug(url.toString())
      }
      logger.debug("Reduced classpath:")
      for (def url : classpath) {
        logger.debug(url.toString())
      }
      logger.debug("End of classpath")
      if (!classpath.isEmpty()) {
        def classLoader = getDaemonClassLoader()
        addClasspath(classLoader, classpath)
      }
    }
    catch (Throwable exception) {
      logger.error("Unable to enhance Gradle Daemon by $classNames", exception)
    }
  }

  private static URLClassLoader getDaemonClassLoader() {
    try {
      def daemonMainClass = Class.forName("org.gradle.launcher.daemon.bootstrap.DaemonMain")
      def classLoader = daemonMainClass.getClassLoader()
      if (classLoader instanceof URLClassLoader) {
        return classLoader
      }
      throw new IllegalStateException("Unsupported Gradle daemon class loader: $classLoader")
    }
    catch (ClassNotFoundException exception) {
      throw new IllegalStateException("Daemon class loader not found.", exception)
    }
  }

  private static List<URL> getTestClasspath(Test task) {
    return task.classpath.files.collect { it.toURI().toURL() }
  }

  /**
   * Finds reduced classpath for classes. The [classNames] parameter list
   * should contain expected class and all its dependencies. Therefore,
   * function returns empty list if any of classes wasn't found.
   */
  private static List<URL> findJarsForClasses(List<URL> classpath, List<String> classNames) {
    def foundClassNames = new HashSet<String>()
    def reducedClasspath = new ArrayList<URL>()
    for (def url : classpath) {
      new URLClassLoader([url] as URL[]).withCloseable { classLoader ->
        for (def className : classNames) {
          if (hasClass(classLoader, className)) {
            foundClassNames.add(className)
            reducedClasspath.add(url)
            break
          }
        }
      }
    }
    if (foundClassNames.size() != classNames.size()) {
      return []
    }
    return reducedClasspath
  }

  private static boolean hasClass(URLClassLoader classLoader, String className) {
    def classFile = className.replace(".", "/") + ".class"
    return classLoader.findResource(classFile) != null
  }

  private static void addClasspath(URLClassLoader classLoader, Iterable<URL> classpath) {
    for (def url : classpath) {
      //noinspection GroovyAccessibility
      classLoader.addURL(url)
    }
  }
}