//file:noinspection GrPackage

import com.intellij.openapi.externalSystem.rt.execution.ForkedDebuggerHelper

//noinspection GrUnresolvedAccess
IMPORT_GRADLE_TASKS_UTIL

//noinspection GrUnresolvedAccess
String debuggerId = DEBUGGER_ID
//noinspection GrUnresolvedAccess
String processParameters = PROCESS_PARAMETERS


Project getCurrentProject() {
  def currentPath = gradle.startParameter.currentDir.path
  return rootProject.allprojects.find { it.projectDir.path == currentPath }
}

List<Task> filterStartTasks(List<Task> tasks) {
  def currentProject = getCurrentProject()
  logger.debug("Current Project: ${currentProject}")

  def rootGradle = gradle
  def compositePathPrefix = []

  while (rootGradle.getParent() != null) {
    compositePathPrefix.add(0, gradle.rootProject.name)
    rootGradle = rootGradle.getParent()
  }

  def startTaskNames = rootGradle.startParameter.taskNames
  logger.debug("Start Tasks Names: ${startTaskNames}")

  if (!compositePathPrefix.isEmpty()) {
    def compositePathPrefixString = ":" + compositePathPrefix.join(":")
    logger.debug("composite path prefix string: ${compositePathPrefixString}")
    startTaskNames = startTaskNames.collect {
      if (it.startsWith(compositePathPrefixString)) {
        return it.substring(compositePathPrefixString.length())
      } else {
        return it
      }
    }
  }

  logger.debug("Start startTaskNames after cleanup: ${startTaskNames}")
  if (startTaskNames.isEmpty()) {
    startTaskNames = (currentProject ?: project).defaultTasks
  }

  //noinspection GrUnresolvedAccess
  List<Task> matchedTasks = GradleTasksUtil.filterTasks(currentProject, tasks, startTaskNames)
  logger.debug("Matched tasks: ${matchedTasks}")
  return matchedTasks
}

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
  //noinspection GroovyAssignabilityCheck
  def debugAllIsEnabled = Boolean.valueOf(System.properties["idea.gradle.debug.all"])
  logger.debug("idea.gradle.debug.all is ${debugAllIsEnabled}")

  taskGraph.allTasks.each { Task task ->
    if (task instanceof Test) {
      task.maxParallelForks = 1
      task.forkEvery = 0
    }
  }
  def jvmTasks = taskGraph.allTasks.findAll { task -> task instanceof JavaForkOptions }
  def matchedTasks = debugAllIsEnabled ? jvmTasks : filterStartTasks(jvmTasks)
  matchedTasks.each { task ->
    task.doFirst {
      def options = task as JavaForkOptions
      def moduleDir = task.project.projectDir.path
      def debugPort = ForkedDebuggerHelper.setupDebugger(debuggerId, task.path, processParameters, moduleDir)
      def jvmArgs = options.jvmArgs.findAll { !it?.startsWith('-agentlib:jdwp') && !it?.startsWith('-Xrunjdwp') }
      jvmArgs << ForkedDebuggerHelper.JVM_DEBUG_SETUP_PREFIX + ForkedDebuggerHelper.addrFromProperty + ':' + debugPort
      options.jvmArgs = jvmArgs
    }
    task.doLast {
      ForkedDebuggerHelper.signalizeFinish(debuggerId, task.path)
    }
  }
}
