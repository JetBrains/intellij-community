// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
//file:noinspection GrPackage
//file:noinspection unused

import org.gradle.api.Project
import org.gradle.api.Task

enum MatchResult {
  MATCHED, PARTIALLY_MATCHED, NOT_MATCHED
}

class GradleTasksUtil {

  private static String removePrefix(String string, String prefix) {
    if (string.startsWith(prefix)) {
      return string - prefix
    }
    return null
  }

  private static String getRelativeTaskPath(Project project, Task task) {
    def taskPath = task.path
    def projectPath = project?.path
    if (projectPath == null) return null
    def path = removePrefix(taskPath, projectPath)
    if (path == null) return null
    return removePrefix(path, ":") ?: path
  }

  private static List<String> getPossibleTaskNames(Project project, Task task) {
    def relativeTaskPath = getRelativeTaskPath(project, task)
    if (relativeTaskPath == null) {
      [task.path]
    }
    else {
      [task.name, task.path, relativeTaskPath]
    }
  }

  private static MatchResult isMatchedTask(Project project, Task task, Iterable<String> matchers) {
    def possibleNames = getPossibleTaskNames(project, task)
    if (matchers.any { it in possibleNames }) {
      return MatchResult.MATCHED
    }
    if (possibleNames.any { matchers.any { matcher -> it.startsWith(matcher) } }) {
      return MatchResult.PARTIALLY_MATCHED
    }
    return MatchResult.NOT_MATCHED
  }

  static List<Task> filterTasks(Project project, List<Task> tasks, Iterable<String> matchers) {
    def tasksMatchStatus = tasks.collect { [it, isMatchedTask(project, it, matchers)] }
    def matchedTasks = tasksMatchStatus.findAll { it[1] as MatchResult == MatchResult.MATCHED }.collect { it[0] as Task }
    if (matchedTasks.isEmpty()) {
      matchedTasks = tasksMatchStatus.findAll { it[1] as MatchResult == MatchResult.PARTIALLY_MATCHED }.collect { it[0] as Task }
    }
    return matchedTasks
  }

  static String findTestMatcher(Project project, Task task, Iterable<String> matchers) {
    for (matcher in matchers) {
      if (isMatchedTask(project, task, [matcher]) != MatchResult.NOT_MATCHED) {
        return matcher
      }
    }
    return null
  }
}
