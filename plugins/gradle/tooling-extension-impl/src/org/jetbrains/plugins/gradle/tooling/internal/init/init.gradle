import org.gradle.api.internal.project.ProjectInternal
import org.gradle.tooling.provider.model.ToolingModelBuilderRegistry
import org.jetbrains.plugins.gradle.tooling.internal.ExtraModelBuilder
import org.gradle.util.*

System.setProperty("idea.active", "true")
initscript {
  dependencies {
    classpath files(${EXTENSIONS_JARS_PATH})
  }
}

apply plugin: JetGradlePlugin

class JetGradlePlugin implements Plugin<Gradle> {
  void apply(Gradle gradle) {
    def extraModelBuilderInstance = new ExtraModelBuilder()
    def isCompositeBuildsSupported = GradleVersion.current() >= GradleVersion.version("3.1")
    def isOldGradle = !isCompositeBuildsSupported && GradleVersion.current() <= GradleVersion.version("2.13")
    Set<ToolingModelBuilderRegistry> rootRegistries = new HashSet<>()
    Set<ToolingModelBuilderRegistry> registries = new HashSet<>()
    if (isOldGradle) {
      gradle.allprojects { project ->
        registries.add(((ProjectInternal)project).services.get(ToolingModelBuilderRegistry.class))
      }
    }
    else {
      gradle.rootProject { project ->
        registries.add(((ProjectInternal)project).services.get(ToolingModelBuilderRegistry.class))
        try {
          if (isCompositeBuildsSupported) {
            project.gradle.includedBuilds.each {
              registries.add(it.configuredBuild.services.get(ToolingModelBuilderRegistry.class))
            }
          }
        }
        catch (ignore) {
        }
      }
    }
    gradle.rootProject {
      registries.each {
        def registry = it
        while(registry.hasProperty('parent') && registry.parent != null) {
          registry = registry.parent
        }
        rootRegistries.add(registry)
      }
      rootRegistries.each {
        if (it.hasProperty('builders') && it.builders instanceof Collection &&
            (it.builders as Collection).find { it instanceof ExtraModelBuilder} != null) {
          return
        }
        it.register(extraModelBuilderInstance)
      }
    }
  }
}
