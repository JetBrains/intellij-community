//file:noinspection GrPackage

interface Properties {
//noinspection GrUnresolvedAccess
  public static final String dependencyNotation = DEPENDENCY_NOTATION
//noinspection GrUnresolvedAccess
  public static final String targetPath = TARGET_PATH
//noinspection GrUnresolvedAccess
  public static final String gradleTaskName = GRADLE_TASK_NAME
}

// Requires Gradle 5.6+
// This version is lazy and configuration cache friendly
abstract class IjDownloadTask extends DefaultTask {

  @Input
  abstract Property<String> getTargetPathProvider()

  @InputFiles
  abstract Property<FileCollection> getCollectionProvider()

  @TaskAction
  void downloadDependency() {
    def pathToFile = getPathToResolvedFile(getCollectionProvider())
    if (pathToFile == null) {
      throw new IllegalArgumentException("Unable to download sources for " + Properties.dependencyNotation)
    }
    String target = getTargetPathProvider().get()
    File targetFile = new File(target)
    targetFile.write pathToFile
    logger.lifecycle('Sources were downloaded to ' + pathToFile)
  }

  private static String getPathToResolvedFile(Property<FileCollection> collectionProvider) {
    def fileCollection = collectionProvider.get()
    if (fileCollection.isEmpty() || fileCollection.size() > 1) {
      return null
    }
    return fileCollection.getSingleFile().path
  }
}

Set<? extends ArtifactRepository> projectRepositories() {
  def target = new HashSet()
  allprojects {
    target.addAll(it.repositories)
  }
  return target
}

gradle.projectsEvaluated {
  rootProject
    .repositories
    .addAll(projectRepositories())
  Configuration configuration = rootProject.configurations.create('downloadSources_' + UUID.randomUUID())
  configuration.transitive = false
  rootProject.dependencies.add(configuration.name, Properties.dependencyNotation)
  def lazyArtifacts = configuration.incoming.files
  rootProject.tasks.register(Properties.gradleTaskName, IjDownloadTask) {
    collectionProvider = lazyArtifacts
    targetPathProvider = Properties.targetPath
  }
}
