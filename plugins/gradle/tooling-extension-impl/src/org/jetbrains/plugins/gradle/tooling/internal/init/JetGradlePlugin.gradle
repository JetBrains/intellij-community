// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
//file:noinspection GrPackage

import org.gradle.api.Plugin
import org.gradle.api.internal.GradleInternal
import org.gradle.api.invocation.Gradle
import org.gradle.tooling.provider.model.ToolingModelBuilder
import org.gradle.tooling.provider.model.ToolingModelBuilderRegistry
import org.gradle.tooling.provider.model.UnknownModelException
import org.gradle.util.GradleVersion
import org.jetbrains.plugins.gradle.model.internal.DummyModel
import org.jetbrains.plugins.gradle.tooling.internal.ExtraModelBuilder

import javax.inject.Inject

class JetGradlePlugin implements Plugin<Gradle> {
  private final ToolingModelBuilderRegistry toolingModelBuilderRegistry

  @Inject
  JetGradlePlugin(ToolingModelBuilderRegistry toolingModelBuilderRegistry) {
    this.toolingModelBuilderRegistry = toolingModelBuilderRegistry
  }

  void apply(Gradle gradle) {
    def jetModelBuilder = getJetModelBuilderOrRegisterIfAbsent(gradle, toolingModelBuilderRegistry)
    def projectEvaluationIsNotCalledForIncludedBuilds = GradleVersion.current() >= GradleVersion.version("3.1") &&
                                                        GradleVersion.current() < GradleVersion.version("4.0")
    if (projectEvaluationIsNotCalledForIncludedBuilds) {
      def processor = new RegistryProcessor(jetModelBuilder)
      gradle.rootProject {
        it.afterEvaluate {
          gradle.includedBuilds.each { included ->
            // included builds should be configured by now, so calling `configuredBuild` should be safe
            def toolingRegistry = (ToolingModelBuilderRegistry)included.configuredBuild.services.get(ToolingModelBuilderRegistry.class)
            processor.process(toolingRegistry)
          }
        }
      }
    }
  }

  static ToolingModelBuilder getJetModelBuilderOrRegisterIfAbsent(Gradle gradle, ToolingModelBuilderRegistry registry) {
    def jetModelBuilder = findJetModelBuilder(registry)
    if (jetModelBuilder != null) return jetModelBuilder

    Gradle rootGradle = gradle
    while (rootGradle.parent != null) {
      rootGradle = rootGradle.parent
    }
    ToolingModelBuilderRegistry rootRegistry = (rootGradle as GradleInternal).services.get(ToolingModelBuilderRegistry)
    jetModelBuilder = rootGradle.extensions.findByName("jetModelBuilder")
    if(jetModelBuilder == null) {
      jetModelBuilder = GradleVersion.current() >= GradleVersion.version("4.4")
        ? (ToolingModelBuilder) ExtraModelBuilder.class.classLoader.loadClass(ExtraModelBuilder.class.typeName + "\$ForGradle44").newInstance()
        : new ExtraModelBuilder();
      rootRegistry.register(jetModelBuilder)
      rootGradle.extensions.add("jetModelBuilder", jetModelBuilder)
    }
    if (registry != rootRegistry) {
      registry.register(jetModelBuilder)
    }
    return jetModelBuilder
  }

  static ToolingModelBuilder findJetModelBuilder(ToolingModelBuilderRegistry registry) {
    try {
      return registry.getBuilder(DummyModel.class.getName())
    }
    catch(UnknownModelException ignored) {}
    return null
  }
}
