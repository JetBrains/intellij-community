<?xml version="1.0" encoding="UTF-8"?>
<project name="Fernflower" default="dist" basedir=".">

  <target name="init">
    <property name="src" value="${basedir}/src"/>
    <property name="out" value="${basedir}/out/production"/>
    <property name="dist" value="${basedir}/fernflower.jar"/>
    <property name="test-src" value="${basedir}/test"/>
    <property name="test-out" value="${basedir}/out/test"/>
    <property name="test-data" value="${basedir}/testData"/>
  </target>

  <!-- external dependencies, adjust to your own -->
  <path id="junit">
    <file name="${basedir}/../../../lib/junit-4.12.jar"/>
    <file name="${basedir}/../../../lib/hamcrest-core-1.3.jar"/>
    <file name="${basedir}/../../../lib/hamcrest-library-1.3.jar"/>
  </path>

  <target name="clean" depends="init">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${out}"/>
      <fileset dir="${test-out}"/>
      <fileset file="${dist}"/>
    </delete>
  </target>

  <target name="compile" depends="init,clean">
    <mkdir dir="${out}"/>
    <javac srcdir="${src}" destdir="${out}" source="1.8" target="1.8" encoding="UTF-8" debug="true" includeantruntime="false"/>
  </target>

  <target name="dist" depends="init,compile">
    <jar jarfile="${dist}" compress="true" basedir="${out}" includes="**/*.class">
      <manifest>
        <attribute name="Main-Class" value="org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler"/>
      </manifest>
    </jar>
  </target>

  <target name="test-compile" depends="init,compile">
    <mkdir dir="${test-out}"/>
    <javac srcdir="${test-src}" destdir="${test-out}" source="1.8" target="1.8" encoding="UTF-8" debug="true" includeantruntime="false">
      <classpath path="${out}"/>
      <classpath refid="junit"/>
    </javac>
  </target>


  <target name="test" depends="test-stdout,test-normal"/>

  <target name="test-normal" depends="init,test-compile">
    <junit printsummary="true" failureproperty="tests.failed" fork="true">
      <classpath path="${test-out}:${out}"/>
      <classpath refid="junit"/>
      <batchtest>
        <fileset dir="${test-src}" includes="**/*Test.java"/>
      </batchtest>
    </junit>
    <fail if="tests.failed" message="Tests failed."/>
    <fail if="tests.stdout.failed" message="Stdout Tests failed."/>
  </target>

  <target name="test-stdout" depends="init,test-compile,test-stdout-prepare">
    <junit printsummary="true" failureproperty="tests.stdout.failed" fork="true" >
      <classpath path="${test-out}:${out}"/>
      <classpath refid="junit"/>
      <sysproperty key="stdout-tests.expected.dir" value="${stdout-tests.expected.dir}"/>
      <sysproperty key="stdout-tests.decompile.dir"   value="${stdout-tests.decompile.dir}"/>
      <batchtest >
        <fileset dir="${test-src}" includes="**/StdoutCompareTestRunner.java"/>
      </batchtest>
      
      <!-- look at output
      <formatter type="plain" usefile="false" />
      <formatter type="plain" />
      -->
    </junit>
    <!-- clean up (delete tmp dir with all the output) -->
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${stdout-tests.temp.dir}"/>
    </delete>
  </target>


  <target name="test-stdout-prepare" depends="init,test-compile">
    
    <!-- here you can skip tests -->
    <patternset id="stdout-tests.exclude.pattern">
      <include name="**/*.java"/>
      
      <!-- general problems -->
      <!-- non-compilable: causes private field/method access -->
      <exclude name="**/PrivateAccess.java"/>
      <!-- non-compilable: assertion code atm can only handle the throw in the if clause, not in the else clause -->
      <exclude name="**/assertions/**/*"/>
      <!-- overloading causes many troubles... -->
      <exclude name="**/overloading/**/*"/>
      <!-- non-compilable: renaming fails -->
      <exclude name="**/renaming/**/*"/>
      
      <!-- old java versions -->
      <!-- non-compilable: (.class field trouble with assert) (remove filter on assertions above too) -->
      <exclude name="**/java14/assertions/**/*"/>
      
    </patternset>

    <tempfile property="stdout-tests.temp.dir" destDir="${java.io.tmpdir}" prefix="decompiler_test_" suffix="_stdout-tests_dir"/>
    <!--property name="stdout-tests.temp.dir" value="tmp_decompiler_test_stdout-tests_dir"/-->
    <property name="stdout-tests.expected.dir" value="${stdout-tests.temp.dir}/expected"/>
    <property name="stdout-tests.decompile.dir" value="${stdout-tests.temp.dir}/decompile"/>
    
    <property name="defaultJavaVersion" value="1.8"/>
    
    <!-- delete previous outputs if they exist -->
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${stdout-tests.expected.dir}"/>
      <fileset dir="${stdout-tests.decompile.dir}"/>
    </delete>
    
    <mkdir dir="${stdout-tests.expected.dir}/classes"/>
    <mkdir dir="${stdout-tests.expected.dir}/results"/>
    <mkdir dir="${stdout-tests.decompile.dir}/classes"/>
    <mkdir dir="${stdout-tests.decompile.dir}/results"/>
    
    <!-- compile (default java) the test cases from testData (packages in javadefault) -->
    <javac srcdir="${test-data}/src-stdout" destdir="${stdout-tests.expected.dir}/classes"
      source="${defaultJavaVersion}" target="${defaultJavaVersion}"
      encoding="UTF-8" includeantruntime="false" failonerror="false">
      <patternset>
        <patternset includes="javadefault/**/*" />
        <patternset refid="stdout-tests.exclude.pattern" />
      </patternset>
    </javac>
    <!-- compile (java 1.4) the test cases from testData (packages in java14) -->
    <javac srcdir="${test-data}/src-stdout" destdir="${stdout-tests.expected.dir}/classes"
      source="1.4" target="1.4"
      encoding="UTF-8" includeantruntime="false" failonerror="false">
      <patternset>
        <patternset includes="java14/**/*" />
        <patternset refid="stdout-tests.exclude.pattern" />
      </patternset>
    </javac>
    <!-- compile (java 1.5) the test cases from testData (packages in java15) -->
    <javac srcdir="${test-data}/src-stdout" destdir="${stdout-tests.expected.dir}/classes"
      source="1.5" target="1.5"
      encoding="UTF-8" includeantruntime="false" failonerror="false">
      <patternset>
        <patternset includes="java15/**/*" />
        <patternset refid="stdout-tests.exclude.pattern" />
      </patternset>
    </javac>
    
    <!-- run test cases from testData, stdout stored to compare later -->
    <java classname="org.jetbrains.java.decompiler.StdoutCompareTestHelper" fork="true" failonerror="false">
      <arg value="run"/>
      <arg value="${stdout-tests.expected.dir}/results"/>
      <!-- activate assertions to be able to test them -->
      <jvmarg value="-ea"/>
        
      <classpath path="${test-out}"/>
      <classpath path="${out}"/>
      <classpath refid="junit"/>
      <classpath path="${stdout-tests.expected.dir}/classes"/>
    </java>
    
    <!-- decompile the classes -->
    <java classname="org.jetbrains.java.decompiler.StdoutCompareTestHelper" fork="true" failonerror="false">
      <arg value="decompile"/>
      <arg value="${stdout-tests.expected.dir}/classes"/>
      <arg value="${stdout-tests.decompile.dir}"/>
        
      <classpath path="${test-out}"/>
      <classpath path="${out}"/>
      <classpath refid="junit"/>
    </java>
    <!-- compile the decompiled classes -->
    <javac srcdir="${stdout-tests.decompile.dir}/decompiled" destdir="${stdout-tests.decompile.dir}/classes"
      source="${defaultJavaVersion}" target="${defaultJavaVersion}" encoding="UTF-8" includeantruntime="false" failonerror="false">
    </javac>    
    <!-- now run the decompiled classes -->
    <java classname="org.jetbrains.java.decompiler.StdoutCompareTestHelper" fork="true" failonerror="false">
      <arg value="run"/>
      <arg value="${stdout-tests.decompile.dir}/results"/>
      <!-- activate assertions to be able to test them -->
      <jvmarg value="-ea"/>
        
      <classpath path="${test-out}"/>
      <classpath path="${out}"/>
      <classpath refid="junit"/>
      <classpath path="${stdout-tests.decompile.dir}/classes"/>
    </java>
  </target>

</project>
