package java.lang;

import sun.misc.VM;

public final class Integer extends Number implements Comparable<Integer> {
   public static final int MIN_VALUE = -2147483648;
   public static final int MAX_VALUE = 2147483647;
   public static final Class<Integer> TYPE = Class.getPrimitiveClass("int");
   static final char[] digits = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
   static final char[] DigitTens = new char[]{'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'};
   static final char[] DigitOnes = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
   static final int[] sizeTable = new int[]{9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, MAX_VALUE};
   private final int value;
   public static final int SIZE = 32;
   public static final int BYTES = 4;
   private static final long serialVersionUID = 1360826667806852920L;

   public static String toString(int var0, int var1) {
      if (var1 < 2 || var1 > 36) {// 131
         var1 = 10;// 132
      }

      if (var1 == 10) {// 135
         return toString(var0);// 136
      } else {
         char[] var2 = new char[33];// 139
         boolean var3 = var0 < 0;// 140
         int var4 = 32;// 141
         if (!var3) {// 143
            var0 = -var0;// 144
         }

         while(var0 <= -var1) {// 147
            var2[var4--] = digits[-(var0 % var1)];// 148
            var0 /= var1;// 149
         }

         var2[var4] = digits[-var0];// 151
         if (var3) {// 153
            --var4;
            var2[var4] = '-';// 154
         }

         return new String(var2, var4, 33 - var4);// 157
      }
   }

   public static String toUnsignedString(int var0, int var1) {
      return Long.toUnsignedString(toUnsignedLong(var0), var1);// 187
   }

   public static String toHexString(int var0) {
      return toUnsignedString0(var0, 4);// 233
   }

   public static String toOctalString(int var0) {
      return toUnsignedString0(var0, 3);// 271
   }

   public static String toBinaryString(int var0) {
      return toUnsignedString0(var0, 1);// 303
   }

   private static String toUnsignedString0(int var0, int var1) {
      int var2 = 32 - numberOfLeadingZeros(var0);// 311
      int var3 = Math.max((var2 + (var1 - 1)) / var1, 1);// 312
      char[] var4 = new char[var3];// 313
      formatUnsignedInt(var0, var1, var4, 0, var3);// 315
      return new String(var4, true);// 318
   }

   static int formatUnsignedInt(int var0, int var1, char[] var2, int var3, int var4) {
      int var5 = var4;// 331
      int var6 = 1 << var1;// 332
      int var7 = var6 - 1;// 333

      do {
         --var5;
         var2[var3 + var5] = digits[var0 & var7];// 335
         var0 >>>= var1;// 336
      } while(var0 != 0 && var5 > 0);// 337

      return var5;// 339
   }

   public static String toString(int var0) {
      if (var0 == MIN_VALUE) {// 398
         return "-2147483648";// 399
      } else {
         int var1 = var0 < 0 ? stringSize(-var0) + 1 : stringSize(var0);// 400
         char[] var2 = new char[var1];// 401
         getChars(var0, var1, var2);// 402
         return new String(var2, true);// 403
      }
   }

   public static String toUnsignedString(int var0) {
      return Long.toString(toUnsignedLong(var0));// 421
   }

   static void getChars(int var0, int var1, char[] var2) {
      int var5 = var1;// 435
      byte var6 = 0;// 436
      if (var0 < 0) {// 438
         var6 = 45;// 439
         var0 = -var0;// 440
      }

      while(var0 >= 65536) {// 444
         int var3 = var0 / 100;// 445
         int var4 = var0 - ((var3 << 6) + (var3 << 5) + (var3 << 2));// 447
         var0 = var3;// 448
         --var5;
         var2[var5] = DigitOnes[var4];// 449
         --var5;
         var2[var5] = DigitTens[var4];// 450
      }

      int var7;
      do {
         var7 = var0 * '쳍' >>> 19;// 456
         int var8 = var0 - ((var7 << 3) + (var7 << 1));// 457
         --var5;
         var2[var5] = digits[var8];// 458
         var0 = var7;// 459
      } while(var7 != 0);// 460

      if (var6 != 0) {// 462
         --var5;
         var2[var5] = (char)var6;// 463
      }

   }// 465

   static int stringSize(int var0) {
      int var1;
      for(var1 = 0; var0 > sizeTable[var1]; ++var1) {// 472 473
      }

      return var1 + 1;// 474
   }

   public static int parseInt(String var0, int var1) throws NumberFormatException {
      if (var0 == null) {// 541
         throw new NumberFormatException("null");// 542
      } else if (var1 < 2) {// 545
         throw new NumberFormatException("radix " + var1 + " less than Character.MIN_RADIX");// 546
      } else if (var1 > 36) {// 550
         throw new NumberFormatException("radix " + var1 + " greater than Character.MAX_RADIX");// 551
      } else {
         int var2 = 0;// 555
         boolean var3 = false;// 556
         int var4 = 0;// 557
         int var5 = var0.length();
         int var6 = -2147483647;// 558
         if (var5 > 0) {// 562
            char var9 = var0.charAt(0);// 563
            if (var9 < '0') {// 564
               if (var9 == '-') {// 565
                  var3 = true;// 566
                  var6 = MIN_VALUE;// 567
               } else if (var9 != '+') {// 568
                  throw NumberFormatException.forInputString(var0);// 569
               }

               if (var5 == 1) {// 571
                  throw NumberFormatException.forInputString(var0);// 572
               }

               ++var4;// 573
            }

            int var8;
            for(int var7 = var6 / var1; var4 < var5; var2 -= var8) {// 575 576 589
               var8 = Character.digit(var0.charAt(var4++), var1);// 578
               if (var8 < 0) {// 579
                  throw NumberFormatException.forInputString(var0);// 580
               }

               if (var2 < var7) {// 582
                  throw NumberFormatException.forInputString(var0);// 583
               }

               var2 *= var1;// 585
               if (var2 < var6 + var8) {// 586
                  throw NumberFormatException.forInputString(var0);// 587
               }
            }

            return var3 ? var2 : -var2;// 594
         } else {
            throw NumberFormatException.forInputString(var0);// 592
         }
      }
   }

   public static int parseInt(String var0) throws NumberFormatException {
      return parseInt(var0, 10);// 615
   }

   public static int parseUnsignedInt(String var0, int var1) throws NumberFormatException {
      if (var0 == null) {// 663
         throw new NumberFormatException("null");// 664
      } else {
         int var2 = var0.length();// 667
         if (var2 > 0) {// 668
            char var3 = var0.charAt(0);// 669
            if (var3 == '-') {// 670
               throw new NumberFormatException(String.format("Illegal leading minus sign on unsigned string %s.", var0));// 671 672
            } else if (var2 > 5 && (var1 != 10 || var2 > 9)) {// 675
               long var4 = Long.parseLong(var0, var1);// 679
               if ((var4 & -4294967296L) == 0L) {// 680
                  return (int)var4;// 681
               } else {
                  throw new NumberFormatException(String.format("String value %s exceeds range of unsigned int.", var0));// 683 684
               }
            } else {
               return parseInt(var0, var1);// 677
            }
         } else {
            throw NumberFormatException.forInputString(var0);// 690
         }
      }
   }

   public static int parseUnsignedInt(String var0) throws NumberFormatException {
      return parseUnsignedInt(var0, 10);// 711
   }

   public static Integer valueOf(String var0, int var1) throws NumberFormatException {
      return parseInt(var0, var1);// 740
   }

   public static Integer valueOf(String var0) throws NumberFormatException {
      return parseInt(var0, 10);// 766
   }

   public static Integer valueOf(int var0) {
      return var0 >= -128 && var0 <= Integer.IntegerCache.high ? Integer.IntegerCache.cache[var0 + 128] : new Integer(var0);// 830 831 832
   }

   public Integer(int var1) {
      this.value = var1;// 850
   }// 851

   public Integer(String var1) throws NumberFormatException {
      this.value = parseInt(var1, 10);// 867
   }// 868

   public byte byteValue() {
      return (byte)this.value;// 876
   }

   public short shortValue() {
      return (short)this.value;// 885
   }

   public int intValue() {
      return this.value;// 893
   }

   public long longValue() {
      return (long)this.value;// 903
   }

   public float floatValue() {
      return (float)this.value;// 912
   }

   public double doubleValue() {
      return (double)this.value;// 921
   }

   public String toString() {
      return toString(this.value);// 935
   }

   public int hashCode() {
      return hashCode(this.value);// 947
   }

   public static int hashCode(int var0) {
      return var0;// 960
   }

   public boolean equals(Object var1) {
      if (var1 instanceof Integer) {// 974
         return this.value == (Integer)var1;// 975
      } else {
         return false;// 977
      }
   }

   public static Integer getInteger(String var0) {
      return getInteger(var0, (Integer)null);// 1011
   }

   public static Integer getInteger(String var0, int var1) {
      Integer var2 = getInteger(var0, (Integer)null);// 1057
      return var2 == null ? var1 : var2;// 1058
   }

   public static Integer getInteger(String var0, Integer var1) {
      String var2 = null;// 1099

      try {
         var2 = System.getProperty(var0);// 1101
      } catch (NullPointerException | IllegalArgumentException var4) {// 1102
      }

      if (var2 != null) {// 1104
         try {
            return decode(var2);// 1106
         } catch (NumberFormatException var5) {// 1107
         }
      }

      return var1;// 1110
   }

   public static Integer decode(String var0) throws NumberFormatException {
      byte var1 = 10;// 1156
      int var2 = 0;// 1157
      boolean var3 = false;// 1158
      if (var0.length() == 0) {// 1161
         throw new NumberFormatException("Zero length string");// 1162
      } else {
         char var5 = var0.charAt(0);// 1163
         if (var5 == '-') {// 1165
            var3 = true;// 1166
            ++var2;// 1167
         } else if (var5 == '+') {// 1168
            ++var2;// 1169
         }

         if (!var0.startsWith("0x", var2) && !var0.startsWith("0X", var2)) {// 1172
            if (var0.startsWith("#", var2)) {// 1176
               ++var2;// 1177
               var1 = 16;// 1178
            } else if (var0.startsWith("0", var2) && var0.length() > 1 + var2) {// 1180
               ++var2;// 1181
               var1 = 8;// 1182
            }
         } else {
            var2 += 2;// 1173
            var1 = 16;// 1174
         }

         if (!var0.startsWith("-", var2) && !var0.startsWith("+", var2)) {// 1185
            Integer var4;
            try {
               var4 = valueOf(var0.substring(var2), var1);// 1189
               var4 = var3 ? -var4 : var4;// 1190
            } catch (NumberFormatException var8) {
               String var7 = var3 ? "-" + var0.substring(var2) : var0.substring(var2);// 1195 1196
               var4 = valueOf(var7, var1);// 1197
            }

            return var4;// 1199
         } else {
            throw new NumberFormatException("Sign character in wrong position");// 1186
         }
      }
   }

   public int compareTo(Integer var1) {
      return compare(this.value, var1.value);// 1216
   }

   public static int compare(int var0, int var1) {
      return var0 < var1 ? -1 : (var0 == var1 ? 0 : 1);// 1234
   }

   public static int compareUnsigned(int var0, int var1) {
      return compare(var0 + MIN_VALUE, var1 + MIN_VALUE);// 1250
   }

   public static long toUnsignedLong(int var0) {
      return (long)var0 & 4294967295L;// 1271
   }

   public static int divideUnsigned(int var0, int var1) {
      return (int)(toUnsignedLong(var0) / toUnsignedLong(var1));// 1294
   }

   public static int remainderUnsigned(int var0, int var1) {
      return (int)(toUnsignedLong(var0) % toUnsignedLong(var1));// 1311
   }

   public static int highestOneBit(int var0) {
      var0 |= var0 >> 1;// 1348
      var0 |= var0 >> 2;// 1349
      var0 |= var0 >> 4;// 1350
      var0 |= var0 >> 8;// 1351
      var0 |= var0 >> 16;// 1352
      return var0 - (var0 >>> 1);// 1353
   }

   public static int lowestOneBit(int var0) {
      return var0 & -var0;// 1371
   }

   public static int numberOfLeadingZeros(int var0) {
      if (var0 == 0) {// 1397
         return 32;// 1398
      } else {
         int var1 = 1;// 1399
         if (var0 >>> 16 == 0) {// 1400
            var1 += 16;
            var0 <<= 16;
         }

         if (var0 >>> 24 == 0) {// 1401
            var1 += 8;
            var0 <<= 8;
         }

         if (var0 >>> 28 == 0) {// 1402
            var1 += 4;
            var0 <<= 4;
         }

         if (var0 >>> 30 == 0) {// 1403
            var1 += 2;
            var0 <<= 2;
         }

         var1 -= var0 >>> 31;// 1404
         return var1;// 1405
      }
   }

   public static int numberOfTrailingZeros(int var0) {
      if (var0 == 0) {// 1425
         return 32;
      } else {
         int var2 = 31;// 1426
         int var1 = var0 << 16;// 1427
         if (var1 != 0) {
            var2 -= 16;
            var0 = var1;
         }

         var1 = var0 << 8;// 1428
         if (var1 != 0) {
            var2 -= 8;
            var0 = var1;
         }

         var1 = var0 << 4;// 1429
         if (var1 != 0) {
            var2 -= 4;
            var0 = var1;
         }

         var1 = var0 << 2;// 1430
         if (var1 != 0) {
            var2 -= 2;
            var0 = var1;
         }

         return var2 - (var0 << 1 >>> 31);// 1431
      }
   }

   public static int bitCount(int var0) {
      var0 -= var0 >>> 1 & 1431655765;// 1446
      var0 = (var0 & 858993459) + (var0 >>> 2 & 858993459);// 1447
      var0 = var0 + (var0 >>> 4) & 252645135;// 1448
      var0 += var0 >>> 8;// 1449
      var0 += var0 >>> 16;// 1450
      return var0 & 63;// 1451
   }

   public static int rotateLeft(int var0, int var1) {
      return var0 << var1 | var0 >>> -var1;// 1475
   }

   public static int rotateRight(int var0, int var1) {
      return var0 >>> var1 | var0 << -var1;// 1499
   }

   public static int reverse(int var0) {
      var0 = (var0 & 1431655765) << 1 | var0 >>> 1 & 1431655765;// 1514
      var0 = (var0 & 858993459) << 2 | var0 >>> 2 & 858993459;// 1515
      var0 = (var0 & 252645135) << 4 | var0 >>> 4 & 252645135;// 1516
      var0 = var0 << 24 | (var0 & '\uff00') << 8 | var0 >>> 8 & '\uff00' | var0 >>> 24;// 1517
      return var0;// 1519
   }

   public static int signum(int var0) {
      return var0 >> 31 | -var0 >>> 31;// 1533
   }

   public static int reverseBytes(int var0) {
      return var0 >>> 24 | var0 >> 8 & '\uff00' | var0 << 8 & 16711680 | var0 << 24;// 1546
   }

   public static int sum(int var0, int var1) {
      return var0 + var1;// 1562
   }

   public static int max(int var0, int var1) {
      return Math.max(var0, var1);// 1576
   }

   public static int min(int var0, int var1) {
      return Math.min(var0, var1);// 1590
   }

   private static class IntegerCache {
      static final int low = -128;
      static final int high;
      static final Integer[] cache;

      static {
         int var0 = 127;// 787
         String var1 = VM.getSavedProperty("java.lang.Integer.IntegerCache.high");// 788 789
         if (var1 != null) {// 790
            try {
               int var2 = Integer.parseInt(var1);// 792
               var2 = Math.max(var2, 127);// 793
               var0 = Math.min(var2, 2147483518);// 795
            } catch (NumberFormatException var4) {// 796
            }
         }

         high = var0;// 800
         cache = new Integer[high - -128 + 1];// 802
         int var6 = -128;// 803

         for(int var3 = 0; var3 < cache.length; ++var3) {// 804
            cache[var3] = new Integer(var6++);// 805
         }

         assert high >= 127;// 808

      }// 809
   }
}

class 'java/lang/Integer' {
   method 'toString (II)Ljava/lang/String;' {
      0      18
      1      18
      2      18
      5      18
      6      18
      7      18
      8      18
      b      19
      c      19
      d      19
      e      22
      f      22
      10      22
      11      22
      14      23
      15      23
      16      23
      17      23
      18      23
      19      25
      1a      25
      1d      25
      1e      26
      1f      26
      27      26
      28      27
      29      27
      2a      27
      2b      27
      2c      28
      2d      28
      30      29
      31      29
      32      29
      33      32
      34      32
      35      32
      36      32
      39      33
      3c      33
      3d      33
      3e      33
      3f      33
      40      33
      41      33
      42      33
      43      33
      44      33
      45      33
      46      33
      47      33
      49      34
      4b      34
      4f      37
      50      37
      51      37
      52      37
      53      37
      54      37
      55      37
      56      37
      57      37
      58      37
      59      38
      5a      38
      5d      40
      5e      39
      5f      39
      60      39
      61      40
      62      40
      63      40
      64      40
      65      40
      6a      43
      6b      43
      6c      43
      6d      43
      6e      43
      6f      43
      70      43
      71      43
      75      43
   }

   method 'toUnsignedString (II)Ljava/lang/String;' {
      0      48
      1      48
      2      48
      3      48
      4      48
      5      48
      6      48
      7      48
      8      48
   }

   method 'toHexString (I)Ljava/lang/String;' {
      0      52
      1      52
      2      52
      3      52
      4      52
      5      52
   }

   method 'toOctalString (I)Ljava/lang/String;' {
      0      56
      1      56
      2      56
      3      56
      4      56
      5      56
   }

   method 'toBinaryString (I)Ljava/lang/String;' {
      0      60
      1      60
      2      60
      3      60
      4      60
      5      60
   }

   method 'toUnsignedString0 (II)Ljava/lang/String;' {
      0      64
      1      64
      2      64
      3      64
      4      64
      5      64
      6      64
      7      64
      8      65
      9      65
      a      65
      b      65
      c      65
      d      65
      e      65
      f      65
      10      65
      11      65
      12      65
      13      65
      14      66
      17      66
      18      66
      19      67
      1a      67
      1b      67
      1c      67
      1d      67
      1e      67
      1f      67
      20      67
      21      67
      27      68
      28      68
      29      68
      2d      68
   }

   method 'formatUnsignedInt (II[CII)I' {
      0      72
      1      72
      2      72
      3      72
      4      73
      5      73
      6      73
      7      73
      8      73
      9      74
      a      74
      b      74
      c      74
      d      74
      e      74
      f      78
      10      78
      11      77
      12      77
      13      77
      14      78
      15      78
      16      78
      17      78
      18      78
      19      78
      1a      78
      1b      78
      1c      78
      1d      78
      1e      78
      1f      78
      21      79
      23      79
      24      80
      25      80
      28      80
      29      80
      2a      80
      2d      82
      2e      82
      2f      82
   }

   method 'toString (I)Ljava/lang/String;' {
      0      86
      1      86
      2      86
      3      86
      6      87
      7      87
      8      87
      9      89
      a      89
      d      89
      e      89
      f      89
      10      89
      11      89
      12      89
      13      89
      17      89
      18      89
      1b      89
      1c      90
      1f      90
      20      91
      21      91
      22      91
      23      91
      24      91
      25      91
      2a      92
      2b      92
      2f      92
   }

   method 'toUnsignedString (I)Ljava/lang/String;' {
      0      97
      1      97
      2      97
      3      97
      4      97
      5      97
      6      97
      7      97
   }

   method 'getChars (II[C)V' {
      0      101
      1      101
      2      101
      3      102
      4      102
      5      102
      6      103
      7      103
      a      104
      b      104
      c      104
      d      104
      e      105
      f      105
      10      105
      11      108
      12      108
      13      108
      14      108
      17      109
      18      109
      19      109
      1a      109
      1b      109
      1c      110
      1d      110
      1e      110
      1f      110
      20      110
      21      110
      22      110
      23      110
      24      110
      25      110
      26      110
      27      110
      28      110
      29      110
      2a      110
      2b      110
      2c      111
      2d      111
      2e      113
      2f      112
      30      112
      31      112
      32      113
      33      113
      34      113
      35      113
      36      113
      37      113
      38      113
      39      113
      3a      113
      3b      115
      3c      114
      3d      114
      3e      114
      3f      115
      40      115
      41      115
      42      115
      43      115
      44      115
      45      115
      46      115
      47      115
      4b      120
      4c      120
      4d      120
      4e      120
      4f      120
      50      120
      51      120
      52      120
      53      121
      54      121
      55      121
      56      121
      57      121
      58      121
      59      121
      5a      121
      5b      121
      5c      121
      5d      121
      5e      123
      5f      122
      60      122
      61      122
      62      123
      63      123
      64      123
      65      123
      66      123
      67      123
      68      123
      69      123
      6a      123
      6b      124
      6c      124
      6e      125
      74      127
      75      127
      76      127
      79      129
      7a      128
      7b      128
      7c      128
      7d      129
      7e      129
      7f      129
      80      129
      81      129
      82      132
   }

   method 'stringSize (I)I' {
      0      136
      1      136
      2      136
      3      136
      4      136
      5      136
      6      136
      7      136
      8      136
      b      139
      c      139
      d      139
      e      139
      f      136
   }

   method 'parseInt (Ljava/lang/String;I)I' {
      0      143
      1      143
      8      144
      9      144
      d      144
      e      145
      f      145
      10      145
      1e      146
      1f      146
      23      146
      27      146
      28      146
      2c      146
      2d      146
      2e      146
      32      146
      33      147
      34      147
      35      147
      36      147
      44      148
      45      148
      49      148
      4d      148
      4e      148
      52      148
      53      148
      54      148
      58      148
      59      150
      5a      150
      5b      151
      5c      151
      5d      152
      5e      152
      5f      152
      60      153
      61      153
      62      153
      63      153
      64      153
      65      153
      66      154
      67      154
      68      154
      69      154
      6a      155
      6b      155
      6c      155
      6f      156
      70      156
      71      156
      72      156
      73      156
      74      156
      75      156
      76      157
      77      157
      78      157
      79      157
      7a      157
      7d      158
      7e      158
      7f      158
      80      158
      81      158
      84      159
      85      159
      86      160
      87      160
      88      160
      89      160
      8d      161
      8e      161
      8f      161
      90      161
      91      161
      94      162
      95      162
      96      162
      97      162
      98      162
      99      165
      9a      165
      9b      165
      9c      165
      9f      166
      a0      166
      a1      166
      a2      166
      a3      166
      a4      169
      a7      173
      a8      173
      a9      173
      aa      173
      ab      173
      ac      173
      ad      173
      ae      173
      af      173
      b0      173
      b1      173
      b4      174
      b7      174
      b8      174
      b9      174
      ba      174
      bb      174
      bc      174
      bd      174
      be      174
      bf      174
      c0      174
      c1      174
      c2      174
      c3      175
      c4      175
      c5      175
      c8      176
      c9      176
      ca      176
      cb      176
      cc      176
      cd      179
      ce      179
      cf      179
      d0      179
      d3      180
      d4      180
      d5      180
      d6      180
      d7      180
      d9      183
      db      183
      dc      184
      dd      184
      de      184
      df      184
      e0      184
      e1      184
      e2      184
      e5      185
      e6      185
      e7      185
      e8      185
      e9      185
      eb      173
      ec      173
      ee      173
      f5      191
      f6      191
      f7      191
      f8      191
      f9      191
      fa      189
      fb      189
      fe      189
      102      189
      103      189
      104      189
   }

   method 'parseInt (Ljava/lang/String;)I' {
      0      197
      1      197
      2      197
      3      197
      4      197
      5      197
      6      197
   }

   method 'parseUnsignedInt (Ljava/lang/String;I)I' {
      0      201
      1      201
      8      202
      9      202
      d      202
      e      204
      f      204
      10      204
      11      204
      12      204
      13      205
      14      205
      17      206
      18      206
      19      206
      1a      206
      1b      206
      1c      206
      1d      207
      1e      207
      1f      207
      20      207
      27      208
      28      208
      2f      208
      31      208
      32      208
      33      208
      37      208
      38      209
      39      209
      3a      209
      3d      209
      3e      209
      3f      209
      40      209
      43      209
      44      209
      45      209
      46      209
      49      217
      4a      217
      4b      217
      4c      217
      4d      217
      4e      217
      4f      210
      50      210
      51      210
      52      210
      53      210
      54      210
      55      210
      56      211
      57      211
      58      211
      59      211
      5a      211
      5b      211
      5c      211
      5d      211
      5e      211
      61      212
      62      212
      63      212
      64      212
      69      214
      6a      214
      71      214
      73      214
      74      214
      75      214
      79      214
      7a      220
      7b      220
      7c      220
      7d      220
      7e      220
   }

   method 'parseUnsignedInt (Ljava/lang/String;)I' {
      0      226
      1      226
      2      226
      3      226
      4      226
      5      226
      6      226
   }

   method 'valueOf (Ljava/lang/String;I)Ljava/lang/Integer;' {
      0      230
      1      230
      2      230
      3      230
      4      230
      5      230
      6      230
      7      230
      8      230
   }

   method 'valueOf (Ljava/lang/String;)Ljava/lang/Integer;' {
      0      234
      1      234
      2      234
      3      234
      4      234
      5      234
      6      234
      7      234
      8      234
      9      234
   }

   method 'valueOf (I)Ljava/lang/Integer;' {
      0      238
      1      238
      2      238
      3      238
      6      238
      7      238
      8      238
      9      238
      a      238
      d      238
      e      238
      f      238
      10      238
      11      238
      12      238
      13      238
      14      238
      15      238
      1b      238
   }

   method '<init> (I)V' {
      4      242
      5      242
      6      242
      7      242
      8      242
      9      243
   }

   method '<init> (Ljava/lang/String;)V' {
      4      246
      5      246
      6      246
      7      246
      8      246
      9      246
      a      246
      b      246
      c      246
      d      246
      e      247
   }

   method 'byteValue ()B' {
      0      250
      1      250
      2      250
      3      250
      4      250
      5      250
   }

   method 'shortValue ()S' {
      0      254
      1      254
      2      254
      3      254
      4      254
      5      254
   }

   method 'intValue ()I' {
      0      258
      1      258
      2      258
      3      258
      4      258
   }

   method 'longValue ()J' {
      0      262
      1      262
      2      262
      3      262
      4      262
      5      262
   }

   method 'floatValue ()F' {
      0      266
      1      266
      2      266
      3      266
      4      266
      5      266
   }

   method 'doubleValue ()D' {
      0      270
      1      270
      2      270
      3      270
      4      270
      5      270
   }

   method 'toString ()Ljava/lang/String;' {
      0      274
      1      274
      2      274
      3      274
      4      274
      5      274
      6      274
      7      274
   }

   method 'hashCode ()I' {
      0      278
      1      278
      2      278
      3      278
      4      278
      5      278
      6      278
      7      278
   }

   method 'hashCode (I)I' {
      0      282
      1      282
   }

   method 'equals (Ljava/lang/Object;)Z' {
      0      286
      1      286
      2      286
      3      286
      4      286
      7      287
      8      287
      9      287
      a      287
      b      287
      c      287
      d      287
      e      287
      f      287
      10      287
      11      287
      12      287
      1a      287
      1b      289
      1c      289
   }

   method 'getInteger (Ljava/lang/String;)Ljava/lang/Integer;' {
      0      294
      1      294
      2      294
      3      294
      4      294
      5      294
   }

   method 'getInteger (Ljava/lang/String;I)Ljava/lang/Integer;' {
      0      298
      1      298
      2      298
      3      298
      4      298
      5      298
      6      299
      7      299
      a      299
      b      299
      11      299
      12      299
   }

   method 'getInteger (Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;' {
      0      303
      1      303
      2      306
      3      306
      4      306
      5      306
      6      306
      a      307
      b      310
      c      310
      f      312
      10      312
      11      312
      12      312
      13      312
      14      313
      15      317
      16      317
   }

   method 'decode (Ljava/lang/String;)Ljava/lang/Integer;' {
      0      321
      1      321
      2      321
      3      322
      4      322
      5      323
      6      323
      7      324
      8      324
      9      324
      a      324
      b      324
      12      325
      13      325
      17      325
      18      327
      19      327
      1a      327
      1b      327
      1c      327
      1d      327
      1e      327
      1f      328
      20      328
      21      328
      22      328
      23      328
      26      329
      27      329
      28      330
      2e      331
      2f      331
      30      331
      31      331
      32      331
      35      332
      38      335
      39      335
      3a      335
      3b      335
      3c      335
      3d      335
      3e      335
      3f      335
      42      335
      43      335
      44      335
      45      335
      46      335
      47      335
      48      335
      49      335
      4c      344
      4d      344
      4e      344
      4f      345
      50      345
      51      345
      55      336
      56      336
      57      336
      58      336
      59      336
      5a      336
      5b      336
      5c      336
      5f      337
      60      337
      61      337
      62      338
      63      338
      64      338
      68      339
      69      339
      6a      339
      6b      339
      6c      339
      6d      339
      6e      339
      6f      339
      72      339
      73      339
      74      339
      75      339
      76      339
      77      339
      78      339
      79      339
      7c      340
      7d      340
      7e      340
      7f      341
      80      341
      81      341
      82      348
      83      348
      84      348
      85      348
      86      348
      87      348
      88      348
      89      348
      8c      348
      8d      348
      8e      348
      8f      348
      90      348
      91      348
      92      348
      93      348
      9a      360
      9b      360
      9f      360
      a0      351
      a1      351
      a2      351
      a3      351
      a4      351
      a5      351
      a6      351
      a7      351
      a8      351
      a9      351
      aa      351
      ab      352
      ac      352
      af      352
      b0      352
      b1      352
      b2      352
      b3      352
      b4      352
      b5      352
      bb      352
      bd      352
      be      352
      c4      354
      c5      354
      cf      354
      d0      354
      d4      354
      d5      354
      d6      354
      d7      354
      d8      354
      dc      354
      e2      354
      e3      354
      e4      354
      e7      353
      e8      354
      e9      355
      ea      355
      eb      355
      ec      355
      ed      355
      ee      355
      ef      355
      f0      355
      f1      358
      f2      358
      f3      358
   }

   method 'compareTo (Ljava/lang/Integer;)I' {
      0      366
      1      366
      2      366
      3      366
      4      366
      5      366
      6      366
      7      366
      8      366
      9      366
      a      366
      b      366
   }

   method 'compare (II)I' {
      0      370
      1      370
      2      370
      5      370
      9      370
      a      370
      b      370
      e      370
      12      370
      13      370
   }

   method 'compareUnsigned (II)I' {
      0      374
      1      374
      2      374
      3      374
      4      374
      5      374
      6      374
      7      374
      8      374
      9      374
      a      374
      b      374
   }

   method 'toUnsignedLong (I)J' {
      0      378
      1      378
      2      378
      3      378
      4      378
      5      378
      6      378
   }

   method 'divideUnsigned (II)I' {
      0      382
      1      382
      2      382
      3      382
      4      382
      5      382
      6      382
      7      382
      8      382
      9      382
      a      382
   }

   method 'remainderUnsigned (II)I' {
      0      386
      1      386
      2      386
      3      386
      4      386
      5      386
      6      386
      7      386
      8      386
      9      386
      a      386
   }

   method 'highestOneBit (I)I' {
      1      390
      2      390
      3      390
      5      390
      7      391
      8      391
      9      391
      b      391
      d      392
      e      392
      f      392
      11      392
      13      393
      14      393
      15      393
      16      393
      18      393
      1a      394
      1b      394
      1c      394
      1d      394
      1f      394
      20      395
      21      395
      22      395
      23      395
      24      395
      25      395
   }

   method 'lowestOneBit (I)I' {
      0      399
      1      399
      2      399
      3      399
      4      399
   }

   method 'numberOfLeadingZeros (I)I' {
      0      403
      1      403
      4      404
      5      404
      6      404
      7      406
      8      406
      9      407
      a      407
      b      407
      c      407
      d      407
      10      408
      11      408
      12      408
      14      409
      15      409
      17      409
      18      412
      19      412
      1a      412
      1b      412
      1c      412
      1f      413
      20      413
      21      413
      23      414
      24      414
      26      414
      27      417
      28      417
      29      417
      2a      417
      2b      417
      2e      418
      2f      418
      30      418
      32      419
      34      419
      35      422
      36      422
      37      422
      38      422
      39      422
      3c      423
      3d      423
      3e      423
      40      424
      42      424
      44      427
      45      427
      46      427
      47      427
      49      427
      4a      428
      4b      428
   }

   method 'numberOfTrailingZeros (I)I' {
      0      433
      1      433
      4      434
      5      434
      6      434
      7      436
      8      436
      9      436
      a      437
      b      437
      c      437
      d      437
      e      437
      f      438
      10      438
      14      439
      15      439
      17      439
      18      440
      19      440
      1a      443
      1b      443
      1c      443
      1d      443
      1e      443
      1f      444
      20      444
      24      445
      25      445
      27      445
      28      446
      29      446
      2a      449
      2b      449
      2c      449
      2d      449
      2e      450
      2f      450
      33      451
      35      451
      36      452
      37      452
      38      455
      39      455
      3a      455
      3b      455
      3c      456
      3d      456
      41      457
      43      457
      44      458
      45      458
      46      461
      47      461
      48      461
      49      461
      4a      461
      4b      461
      4c      461
      4d      461
      4e      461
   }

   method 'bitCount (I)I' {
      1      466
      2      466
      3      466
      4      466
      5      466
      6      466
      8      466
      9      467
      a      467
      b      467
      c      467
      d      467
      e      467
      f      467
      10      467
      11      467
      12      467
      13      467
      14      467
      15      468
      16      468
      17      468
      18      468
      19      468
      1a      468
      1b      468
      1c      468
      1d      468
      1f      469
      20      469
      21      469
      22      469
      24      469
      26      470
      27      470
      28      470
      29      470
      2b      470
      2c      471
      2d      471
      2e      471
      2f      471
      30      471
   }

   method 'rotateLeft (II)I' {
      0      475
      1      475
      2      475
      3      475
      4      475
      5      475
      6      475
      7      475
      8      475
   }

   method 'rotateRight (II)I' {
      0      479
      1      479
      2      479
      3      479
      4      479
      5      479
      6      479
      7      479
      8      479
   }

   method 'reverse (I)I' {
      0      483
      1      483
      2      483
      3      483
      4      483
      5      483
      6      483
      7      483
      8      483
      9      483
      a      483
      b      483
      c      483
      d      483
      e      484
      f      484
      10      484
      11      484
      12      484
      13      484
      14      484
      15      484
      16      484
      17      484
      18      484
      19      484
      1a      484
      1b      484
      1c      485
      1d      485
      1e      485
      1f      485
      20      485
      21      485
      22      485
      23      485
      24      485
      25      485
      26      485
      27      485
      28      485
      29      485
      2a      486
      2b      486
      2c      486
      2d      486
      2e      486
      2f      486
      30      486
      31      486
      32      486
      33      486
      34      486
      35      486
      36      486
      37      486
      38      486
      39      486
      3a      486
      3b      486
      3c      486
      3d      486
      3e      486
      3f      486
      40      486
      41      486
      42      486
      43      486
      44      487
      45      487
   }

   method 'signum (I)I' {
      0      491
      1      491
      2      491
      3      491
      4      491
      5      491
      6      491
      7      491
      8      491
      9      491
      a      491
   }

   method 'reverseBytes (I)I' {
      0      495
      1      495
      2      495
      3      495
      4      495
      5      495
      6      495
      7      495
      8      495
      9      495
      a      495
      b      495
      c      495
      d      495
      e      495
      f      495
      10      495
      11      495
      12      495
      13      495
      14      495
      15      495
      16      495
      17      495
      18      495
      19      495
   }

   method 'sum (II)I' {
      0      499
      1      499
      2      499
      3      499
   }

   method 'max (II)I' {
      0      503
      1      503
      2      503
      3      503
      4      503
      5      503
   }

   method 'min (II)I' {
      0      507
      1      507
      2      507
      3      507
      4      507
      5      507
   }
}

class 'java/lang/Integer$IntegerCache' {
   method '<clinit> ()V' {
      10      516
      11      516
      12      516
      13      517
      14      517
      15      517
      16      517
      17      517
      18      517
      19      518
      1a      518
      1d      520
      1e      520
      1f      520
      20      520
      21      520
      22      521
      23      521
      24      521
      25      521
      26      521
      27      521
      28      521
      29      522
      2a      522
      2b      522
      2c      522
      2d      522
      2e      522
      2f      522
      33      523
      34      527
      35      527
      36      527
      37      527
      38      528
      39      528
      3a      528
      3b      528
      3c      528
      3d      528
      3e      528
      3f      528
      43      528
      44      528
      45      528
      46      529
      47      529
      48      529
      49      531
      4a      531
      4b      531
      4c      531
      4d      531
      4e      531
      4f      531
      50      531
      53      532
      54      532
      55      532
      56      532
      5c      532
      5d      532
      5e      532
      62      532
      63      531
      6f      535
      70      535
      71      535
      72      535
      73      535
      74      535
      7f      537
   }
}

Lines mapping:
131 <-> 19
132 <-> 20
135 <-> 23
136 <-> 24
139 <-> 26
140 <-> 27
141 <-> 28
143 <-> 29
144 <-> 30
147 <-> 33
148 <-> 34
149 <-> 35
151 <-> 38
153 <-> 39
154 <-> 41
157 <-> 44
187 <-> 49
233 <-> 53
271 <-> 57
303 <-> 61
311 <-> 65
312 <-> 66
313 <-> 67
315 <-> 68
318 <-> 69
331 <-> 73
332 <-> 74
333 <-> 75
335 <-> 79
336 <-> 80
337 <-> 81
339 <-> 83
398 <-> 87
399 <-> 88
400 <-> 90
401 <-> 91
402 <-> 92
403 <-> 93
421 <-> 98
435 <-> 102
436 <-> 103
438 <-> 104
439 <-> 105
440 <-> 106
444 <-> 109
445 <-> 110
447 <-> 111
448 <-> 112
449 <-> 114
450 <-> 116
456 <-> 121
457 <-> 122
458 <-> 124
459 <-> 125
460 <-> 126
462 <-> 128
463 <-> 130
465 <-> 133
472 <-> 137
473 <-> 137
474 <-> 140
541 <-> 144
542 <-> 145
545 <-> 146
546 <-> 147
550 <-> 148
551 <-> 149
555 <-> 151
556 <-> 152
557 <-> 153
558 <-> 155
562 <-> 156
563 <-> 157
564 <-> 158
565 <-> 159
566 <-> 160
567 <-> 161
568 <-> 162
569 <-> 163
571 <-> 166
572 <-> 167
573 <-> 170
575 <-> 174
576 <-> 174
578 <-> 175
579 <-> 176
580 <-> 177
582 <-> 180
583 <-> 181
585 <-> 184
586 <-> 185
587 <-> 186
589 <-> 174
592 <-> 192
594 <-> 190
615 <-> 198
663 <-> 202
664 <-> 203
667 <-> 205
668 <-> 206
669 <-> 207
670 <-> 208
671 <-> 209
672 <-> 209
675 <-> 210
677 <-> 218
679 <-> 211
680 <-> 212
681 <-> 213
683 <-> 215
684 <-> 215
690 <-> 221
711 <-> 227
740 <-> 231
766 <-> 235
787 <-> 517
788 <-> 518
789 <-> 518
790 <-> 519
792 <-> 521
793 <-> 522
795 <-> 523
796 <-> 524
800 <-> 528
802 <-> 529
803 <-> 530
804 <-> 532
805 <-> 533
808 <-> 536
809 <-> 538
830 <-> 239
831 <-> 239
832 <-> 239
850 <-> 243
851 <-> 244
867 <-> 247
868 <-> 248
876 <-> 251
885 <-> 255
893 <-> 259
903 <-> 263
912 <-> 267
921 <-> 271
935 <-> 275
947 <-> 279
960 <-> 283
974 <-> 287
975 <-> 288
977 <-> 290
1011 <-> 295
1057 <-> 299
1058 <-> 300
1099 <-> 304
1101 <-> 307
1102 <-> 308
1104 <-> 311
1106 <-> 313
1107 <-> 314
1110 <-> 318
1156 <-> 322
1157 <-> 323
1158 <-> 324
1161 <-> 325
1162 <-> 326
1163 <-> 328
1165 <-> 329
1166 <-> 330
1167 <-> 331
1168 <-> 332
1169 <-> 333
1172 <-> 336
1173 <-> 345
1174 <-> 346
1176 <-> 337
1177 <-> 338
1178 <-> 339
1180 <-> 340
1181 <-> 341
1182 <-> 342
1185 <-> 349
1186 <-> 361
1189 <-> 352
1190 <-> 353
1195 <-> 355
1196 <-> 355
1197 <-> 356
1199 <-> 359
1216 <-> 367
1234 <-> 371
1250 <-> 375
1271 <-> 379
1294 <-> 383
1311 <-> 387
1348 <-> 391
1349 <-> 392
1350 <-> 393
1351 <-> 394
1352 <-> 395
1353 <-> 396
1371 <-> 400
1397 <-> 404
1398 <-> 405
1399 <-> 407
1400 <-> 408
1401 <-> 413
1402 <-> 418
1403 <-> 423
1404 <-> 428
1405 <-> 429
1425 <-> 434
1426 <-> 437
1427 <-> 438
1428 <-> 444
1429 <-> 450
1430 <-> 456
1431 <-> 462
1446 <-> 467
1447 <-> 468
1448 <-> 469
1449 <-> 470
1450 <-> 471
1451 <-> 472
1475 <-> 476
1499 <-> 480
1514 <-> 484
1515 <-> 485
1516 <-> 486
1517 <-> 487
1519 <-> 488
1533 <-> 492
1546 <-> 496
1562 <-> 500
1576 <-> 504
1590 <-> 508
Not mapped:
591
780
798
849
866
1103
1191
1198
