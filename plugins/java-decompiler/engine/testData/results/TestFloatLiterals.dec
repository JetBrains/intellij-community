package pkg;

public class TestFloatLiterals {
   public static final double MAX_D = Double.MAX_VALUE;
   public static final double MIN_D = Double.MIN_VALUE;
   public static final double MIN_ND = Double.MIN_NORMAL;
   public static final float MAX_F = Float.MAX_VALUE;
   public static final float MIN_F = Float.MIN_VALUE;
   public static final float MINN_F = Float.MIN_NORMAL;
   public static final double MAX_FD = (double)Float.MAX_VALUE;
   public static final double MIN_FD = (double)Float.MIN_VALUE;
   public static final double MINN_FD = (double)Float.MIN_NORMAL;
   public static final double NEG_MAX_D = -Double.MAX_VALUE;
   public static final double NEG_MIN_D = -Double.MIN_VALUE;
   public static final double NEG_MIN_ND = -Double.MIN_NORMAL;
   public static final float NEG_MAX_F = -Float.MAX_VALUE;
   public static final float NEG_MIN_F = -Float.MIN_VALUE;
   public static final float NEG_MINN_F = -Float.MIN_NORMAL;
   public static final double NEG_MAX_FD = (double)-Float.MAX_VALUE;
   public static final double NEG_MIN_FD = (double)-Float.MIN_VALUE;
   public static final double NEG_MINN_FD = (double)-Float.MIN_NORMAL;
   public static final double PI_D = Math.PI;
   public static final double E_D = Math.E;
   public static final float PI_F = (float)Math.PI;
   public static final float E_F = (float)Math.E;
   public static final double PI_FD = (double)(float)Math.PI;
   public static final double E_FD = (double)(float)Math.E;
   public static final double ONE_D = 1.0D;
   public static final float ONE_F = 1.0F;
   public static final double ONE_FD = 1.0D;
   public static final double ONETENTH_D = 0.1D;
   public static final float ONETENTH_F = 0.1F;
   public static final double ONETENTH_FD = (double)0.1F;
   public static final double FRACTION_D = 0.22340425531914893D;
   public static final float FRACTION_F = 0.22340426F;
   public static final double FRACTION_FD = (double)0.22340426F;
   public static final double DEG_TO_RAD_D = (Math.PI / 180D);
   public static final float DEG_TO_RAD_F = ((float)Math.PI / 180F);

   public static double degreesToRadians(double var0) {
      return var0 * (Math.PI / 180D);
   }

   public static float degreesToRadians(float var0) {
      return var0 * ((float)Math.PI / 180F);
   }

   public static double degreesToRadiansLossy(double var0) {
      return var0 * (double)((float)Math.PI / 180F);
   }
}
