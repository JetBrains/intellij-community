package pkg;

public @interface MoreAnnotations {
   @MoreAnnotations(
      intValue = 1,
      byteValue = 1,
      floatValue = 1.0F,
      doubleValue = 1.0,
      booleanValue = true,
      shortValue = 1,
      longValue = 1L,
      charValue = '\n',
      enumValue = MoreAnnotations.TestEnum.FirstValue,
      annotationValue = @MoreAnnotations.NestedAnnotation("a"),
      stringValue = "",
      classValue = String.class
   )
   String annotatedWithValues = "";
   @MoreAnnotations(
      intArray = {},
      byteArray = {},
      floatArray = {},
      doubleArray = {},
      booleanArray = {},
      shortArray = {},
      longArray = {},
      charArray = {},
      enumArray = {},
      annotationArray = {},
      stringArray = {},
      classArray = {}
   )
   String annotatedWithEmptyArrays = "";
   @MoreAnnotations(
      intArray = {1, 0, 2147483647, -2147483648},
      byteArray = {1, 0, 127, -128, -1},
      floatArray = {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0F, 1.0F / 0.0F, -1.0F / 0.0F},
      doubleArray = {1.0, 0.0, 1.7976931348623157E308, 4.9E-324, 0.0 / 0.0, 1.0 / 0.0, -1.0 / 0.0},
      booleanArray = {true, false},
      shortArray = {1, 0, 32767, -32768, -1},
      longArray = {1L, 0L, 9223372036854775807L, -9223372036854775808L},
      charArray = {'a', '\n', '\u0001', '\u0000', '\uffff', '\u0000'},
      enumArray = {MoreAnnotations.TestEnum.FirstValue, MoreAnnotations.TestEnum.SecondValue},
      annotationArray = {@MoreAnnotations.NestedAnnotation("a"), @MoreAnnotations.NestedAnnotation("b")},
      stringArray = {"first", "second", ""},
      classArray = {CharSequence.class, String.class, StringBuilder.class}
   )
   String annotatedWithArrays = "";

   int intValue() default 1;

   byte byteValue() default 1;

   float floatValue() default 1.0F / 0.0F;

   double doubleValue() default 0.0 / 0.0;

   boolean booleanValue() default true;

   short shortValue() default 1;

   long longValue() default 1L;

   char charValue() default '0';

   TestEnum enumValue() default MoreAnnotations.TestEnum.FirstValue;

   NestedAnnotation annotationValue() default @MoreAnnotations.NestedAnnotation;

   String stringValue() default "default";

   Class<? extends CharSequence> classValue() default CharSequence.class;

   int[] intArray() default {1, 0, 2147483647, -2147483648};

   byte[] byteArray() default {1, 0, 127, -128, -1};

   float[] floatArray() default {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0F, 1.0F / 0.0F, -1.0F / 0.0F};

   double[] doubleArray() default {1.0, 0.0, 1.7976931348623157E308, 4.9E-324, 0.0 / 0.0, 1.0 / 0.0, -1.0 / 0.0};

   boolean[] booleanArray() default {true, false};

   short[] shortArray() default {1, 0, 32767, -32768, -1};

   long[] longArray() default {1L, 0L, 9223372036854775807L, -9223372036854775808L};

   char[] charArray() default {'\u0001', '\u0000', '\uffff', '\u0000'};

   TestEnum[] enumArray() default {MoreAnnotations.TestEnum.FirstValue};

   NestedAnnotation[] annotationArray() default {@MoreAnnotations.NestedAnnotation};

   String[] stringArray() default {"first", "second", ""};

   Class<? extends CharSequence>[] classArray() default {CharSequence.class, String.class, StringBuilder.class};

   public static enum TestEnum {
      FirstValue,
      SecondValue;
   }

   public @interface NestedAnnotation {
      String value() default "MyString";
   }
}

