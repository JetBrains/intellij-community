package pkg;

public class TestInvertedFloatComparison {
   public boolean less(double var1, double var3) {
      return var1 < var3;// 6
   }

   public boolean less(int var1, int var2) {
      return var1 < var2;// 10
   }

   public boolean notLess(double var1, double var3) {
      return !(var1 < var3);// 14
   }

   public boolean notLess(int var1, int var2) {
      return var1 >= var2;// 18
   }

   public boolean greater(double var1, double var3) {
      return var1 > var3;// 22
   }

   public boolean greater(int var1, int var2) {
      return var1 > var2;// 26
   }

   public boolean notGreater(double var1, double var3) {
      return !(var1 > var3);// 30
   }

   public boolean notGreater(int var1, int var2) {
      return var1 <= var2;// 34
   }

   public boolean lessEqual(double var1, double var3) {
      return var1 <= var3;// 38
   }

   public boolean lessEqual(int var1, int var2) {
      return var1 <= var2;// 42
   }

   public boolean notLessEqual(double var1, double var3) {
      return !(var1 <= var3);// 46
   }

   public boolean notLessEqual(int var1, int var2) {
      return var1 > var2;// 50
   }

   public boolean greaterEqual(double var1, double var3) {
      return var1 >= var3;// 54
   }

   public boolean greaterEqual(int var1, int var2) {
      return var1 >= var2;// 58
   }

   public boolean notGreaterEqual(double var1, double var3) {
      return !(var1 >= var3);// 62
   }

   public boolean notGreaterEqual(int var1, int var2) {
      return var1 < var2;// 66
   }
}

class 'pkg/TestInvertedFloatComparison' {
   method 'less (DD)Z' {
      0      4
      1      4
      2      4
      b      4
   }

   method 'less (II)Z' {
      0      8
      1      8
      2      8
      a      8
   }

   method 'notLess (DD)Z' {
      0      12
      1      12
      2      12
      b      12
   }

   method 'notLess (II)Z' {
      0      16
      1      16
      2      16
      a      16
   }

   method 'greater (DD)Z' {
      0      20
      1      20
      2      20
      b      20
   }

   method 'greater (II)Z' {
      0      24
      1      24
      2      24
      a      24
   }

   method 'notGreater (DD)Z' {
      0      28
      1      28
      2      28
      b      28
   }

   method 'notGreater (II)Z' {
      0      32
      1      32
      2      32
      a      32
   }

   method 'lessEqual (DD)Z' {
      0      36
      1      36
      2      36
      b      36
   }

   method 'lessEqual (II)Z' {
      0      40
      1      40
      2      40
      a      40
   }

   method 'notLessEqual (DD)Z' {
      0      44
      1      44
      2      44
      b      44
   }

   method 'notLessEqual (II)Z' {
      0      48
      1      48
      2      48
      a      48
   }

   method 'greaterEqual (DD)Z' {
      0      52
      1      52
      2      52
      b      52
   }

   method 'greaterEqual (II)Z' {
      0      56
      1      56
      2      56
      a      56
   }

   method 'notGreaterEqual (DD)Z' {
      0      60
      1      60
      2      60
      b      60
   }

   method 'notGreaterEqual (II)Z' {
      0      64
      1      64
      2      64
      a      64
   }
}

Lines mapping:
6 <-> 5
10 <-> 9
14 <-> 13
18 <-> 17
22 <-> 21
26 <-> 25
30 <-> 29
34 <-> 33
38 <-> 37
42 <-> 41
46 <-> 45
50 <-> 49
54 <-> 53
58 <-> 57
62 <-> 61
66 <-> 65
