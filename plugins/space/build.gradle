import static Versions.*

buildscript {
    repositories {
        maven { url "https://www.jetbrains.com/intellij-repository/snapshots" } // for nightly builds
        if (Build.buildSettings.useCacheRedirector) {
            maven { url "https://cache-redirector.jetbrains.com/jetbrains.bintray.com/intellij-plugin-service" }
        } else {
            maven { url "https://dl.bintray.com/jetbrains/intellij-plugin-service" }
        }
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.4.18"
}

applyKotlinJVM()

def pluginTitle = "space-intellij-plugin"

if (hasProperty("teamcity")) {
    if (project.hasProperty('pluginChannel')) {
        version = "2020.1.internal.${teamcity["build.number"]}"
    } else {
        version = "2020.1.${teamcity["build.number"]}"
    }
}

dependencies {
    compile project(":app:app-state")

    compile "org.slf4j:jul-to-slf4j:$sl4j_version"
    compile "ch.qos.logback:logback-classic:1.2.1"

    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-server-jetty:$ktor_version"

    compile project(':plugins:pipelines:pipelines-config:pipelines-config-compiler-bootstrap')
    compile project(':plugins:pipelines:pipelines-config:pipelines-config-utils')

    compile project(':plugins:pipelines:pipelines-config:pipelines-config-dsl-script-exec')

    compile project(':plugins:pipelines:pipelines-common')
    compile project(':plugins:pipelines:pipelines-engine')
    compile project(':plugins:pipelines:pipelines-utils')
    compile project(':plugins:pipelines:pipelines-provider')
    compile project(':plugins:pipelines:pipelines-provider-local')
}

test { finalizedBy jacocoTestReport }

def kotlinIdeaPluginVersion = "1.3.70-release-IJ2020.1-2"

intellij {
    version "201.6668.121"
    pluginName pluginTitle
    updateSinceUntilBuild false
    sandboxDirectory "${project.buildDir}/.sandbox"
    setPlugins("org.jetbrains.kotlin:$kotlinIdeaPluginVersion", 'git4idea')
    downloadSources = true
}

runIde {
    jbrVersion = '11_0_2b159'
    dependsOn ":plugins:pipelines:pipelines-config:pipelines-config-compiler:publishToMavenLocal"
    dependsOn ":plugins:pipelines:pipelines-config:pipelines-config-dsl-runtime:publishToMavenLocal"
}

publishPlugin {
    channels project.hasProperty('pluginChannel') ? project.property('pluginChannel') : ''
    token System.getenv('IDEA_PLUGIN_DEPLOY_TOKEN')
}

prepareSandbox {

    def defTask = project.tasks.getByPath(":plugins:pipelines:pipelines-config:pipelines-config-scriptdefinition-compile:runtimeJar")

    from(defTask) {
        into "${pluginTitle}/script-def"
    }

    dependsOn defTask
}
