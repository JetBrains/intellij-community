// https://github.com/toml-lang/toml/blob/master/toml.abnf
{
  generate=[psi="no"]
  generatePsi=false // We employ hand-written Kotlin PSI
  parserClass="org.toml.lang.parse.TomlParser"
  parserUtilClass="org.toml.lang.parse.TomlParserUtil"

  elementTypeHolderClass="org.toml.lang.psi.TomlElementTypes"
  elementTypeClass="org.toml.lang.psi.TomlCompositeType"
  tokenTypeClass="org.toml.lang.psi.TomlTokenType"

  tokens=[
    COMMENT="regexp:#.*"

    BOOLEAN

    BARE_KEY_OR_NUMBER="regexp:\d+"
    BARE_KEY_OR_DATE="regexp:\d{4}-\d{2}-\d{2}"
    NUMBER
    BARE_KEY
    DATE_TIME

    BASIC_STRING
    LITERAL_STRING
    MULTILINE_BASIC_STRING
    MULTILINE_LITERAL_STRING

    EQ='='
    COMMA=','
    DOT='.'
    L_BRACKET='['
    R_BRACKET=']'
    L_CURLY='{'
    R_CURLY='}'
  ]
}

File ::= FileForm*

private FileForm ::= NewLineKeyValue | ArrayTable | Table { recoverWhile = FileForm_recover }
private FileForm_recover ::=
  !<<atNewLine (BARE_KEY | BARE_KEY_OR_NUMBER | BARE_KEY_OR_DATE | BASIC_STRING | LITERAL_STRING | '[')>>
private EatUntilNextLine_recover ::= !<<atNewLine <<any>>>>

KeyValue ::= Key '=' <<atSameLine Value>> { pin = 1 }
NewLineKeyValue ::= <<atNewLine KeyValue>> {
    elementType = KeyValue
    recoverWhile = EatUntilNextLine_recover
}

Key ::= KeySegment ('.' KeySegment)*
KeySegment ::= BareKey | BASIC_STRING | LITERAL_STRING
private BareKey ::= BARE_KEY
  | <<remap 'BARE_KEY_OR_NUMBER' 'BARE_KEY'>>
  | <<remap 'BARE_KEY_OR_DATE' 'BARE_KEY'>>


private Value ::= Literal | Array | InlineTable

Literal ::= Number | Date | BOOLEAN
  | BASIC_STRING | LITERAL_STRING
  | MULTILINE_BASIC_STRING | MULTILINE_LITERAL_STRING

private Number ::= <<remap 'BARE_KEY_OR_NUMBER' 'NUMBER'>> | NUMBER
private Date ::= <<remap 'BARE_KEY_OR_DATE' 'DATE_TIME'>> | DATE_TIME

private Value_first ::= BARE_KEY_OR_NUMBER | NUMBER | BARE_KEY_OR_DATE | DATE_TIME
                      | BOOLEAN
                      | BASIC_STRING | LITERAL_STRING
                      | MULTILINE_BASIC_STRING | MULTILINE_LITERAL_STRING
                      | '[' | '{'

Array ::= '[' ArrayElement* ']' { pin = 1 }
private ArrayElement ::= !']' Value (','|&']') {
  pin = 1
  recoverWhile = ArrayElement_recover
}
private ArrayElement_recover ::= !(']' | Value_first) { consumeTokenMethod = "consumeTokenFast" }

Table ::= TableHeader NewLineKeyValue*
TableHeader ::= '[' Key ']' {
  pin = 1
  recoverWhile = EatUntilNextLine_recover
}

ArrayTable ::= ArrayTableHeader NewLineKeyValue*
ArrayTableHeader ::= '[''[' Key ']'']' {
  pin = 2
  elementType = TableHeader
  recoverWhile = EatUntilNextLine_recover
}

InlineTable ::= '{' InlineTableElement* '}' { pin = 1 }
private InlineTableElement ::= KeyValue (','|&'}') { pin = 1 }
