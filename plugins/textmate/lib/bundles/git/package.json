{
  "name": "git",
  "displayName": "%displayName%",
  "description": "%description%",
  "publisher": "vscode",
  "license": "MIT",
  "version": "1.0.0",
  "engines": {
    "vscode": "^1.5.0"
  },
  "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
  "enableProposedApi": true,
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*",
    "onFileSystem:git"
  ],
  "main": "./out/main",
  "icon": "resources/icons/git.png",
  "scripts": {
    "compile": "gulp compile-extension:git",
    "watch": "gulp watch-extension:git",
    "update-emoji": "node ./build/update-emoji.js",
    "update-grammar": "node ./build/update-grammars.js",
    "test": "node ../../node_modules/mocha/bin/mocha"
  },
  "capabilities": {
    "virtualWorkspaces": true,
    "untrustedWorkspaces": {
      "supported": true
    }
  },
  "contributes": {
    "commands": [
      {
        "command": "git.setLogLevel",
        "title": "%command.setLogLevel%",
        "category": "Git"
      },
      {
        "command": "git.clone",
        "title": "%command.clone%",
        "category": "Git"
      },
      {
        "command": "git.cloneRecursive",
        "title": "%command.cloneRecursive%",
        "category": "Git"
      },
      {
        "command": "git.init",
        "title": "%command.init%",
        "category": "Git",
        "icon": "$(add)"
      },
      {
        "command": "git.openRepository",
        "title": "%command.openRepository%",
        "category": "Git"
      },
      {
        "command": "git.close",
        "title": "%command.close%",
        "category": "Git"
      },
      {
        "command": "git.refresh",
        "title": "%command.refresh%",
        "category": "Git",
        "icon": "$(refresh)"
      },
      {
        "command": "git.openChange",
        "title": "%command.openChange%",
        "category": "Git",
        "icon": "$(compare-changes)"
      },
      {
        "command": "git.openAllChanges",
        "title": "%command.openAllChanges%",
        "category": "Git"
      },
      {
        "command": "git.openFile",
        "title": "%command.openFile%",
        "category": "Git",
        "icon": "$(go-to-file)"
      },
      {
        "command": "git.openFile2",
        "title": "%command.openFile%",
        "category": "Git",
        "icon": "$(go-to-file)"
      },
      {
        "command": "git.openHEADFile",
        "title": "%command.openHEADFile%",
        "category": "Git"
      },
      {
        "command": "git.stage",
        "title": "%command.stage%",
        "category": "Git",
        "icon": "$(add)"
      },
      {
        "command": "git.stageAll",
        "title": "%command.stageAll%",
        "category": "Git",
        "icon": "$(add)"
      },
      {
        "command": "git.stageAllTracked",
        "title": "%command.stageAllTracked%",
        "category": "Git",
        "icon": "$(add)"
      },
      {
        "command": "git.stageAllUntracked",
        "title": "%command.stageAllUntracked%",
        "category": "Git",
        "icon": "$(add)"
      },
      {
        "command": "git.stageAllMerge",
        "title": "%command.stageAllMerge%",
        "category": "Git",
        "icon": "$(add)"
      },
      {
        "command": "git.stageSelectedRanges",
        "title": "%command.stageSelectedRanges%",
        "category": "Git"
      },
      {
        "command": "git.revertSelectedRanges",
        "title": "%command.revertSelectedRanges%",
        "category": "Git"
      },
      {
        "command": "git.stageChange",
        "title": "%command.stageChange%",
        "category": "Git",
        "icon": "$(add)"
      },
      {
        "command": "git.revertChange",
        "title": "%command.revertChange%",
        "category": "Git",
        "icon": "$(discard)"
      },
      {
        "command": "git.unstage",
        "title": "%command.unstage%",
        "category": "Git",
        "icon": "$(remove)"
      },
      {
        "command": "git.unstageAll",
        "title": "%command.unstageAll%",
        "category": "Git",
        "icon": "$(remove)"
      },
      {
        "command": "git.unstageSelectedRanges",
        "title": "%command.unstageSelectedRanges%",
        "category": "Git"
      },
      {
        "command": "git.clean",
        "title": "%command.clean%",
        "category": "Git",
        "icon": "$(discard)"
      },
      {
        "command": "git.cleanAll",
        "title": "%command.cleanAll%",
        "category": "Git",
        "icon": "$(discard)"
      },
      {
        "command": "git.cleanAllTracked",
        "title": "%command.cleanAllTracked%",
        "category": "Git",
        "icon": "$(discard)"
      },
      {
        "command": "git.cleanAllUntracked",
        "title": "%command.cleanAllUntracked%",
        "category": "Git",
        "icon": "$(discard)"
      },
      {
        "command": "git.rename",
        "title": "%command.rename%",
        "category": "Git",
        "icon": "$(discard)"
      },
      {
        "command": "git.commit",
        "title": "%command.commit%",
        "category": "Git",
        "icon": "$(check)"
      },
      {
        "command": "git.commitStaged",
        "title": "%command.commitStaged%",
        "category": "Git"
      },
      {
        "command": "git.commitEmpty",
        "title": "%command.commitEmpty%",
        "category": "Git"
      },
      {
        "command": "git.commitStagedSigned",
        "title": "%command.commitStagedSigned%",
        "category": "Git"
      },
      {
        "command": "git.commitStagedAmend",
        "title": "%command.commitStagedAmend%",
        "category": "Git"
      },
      {
        "command": "git.commitAll",
        "title": "%command.commitAll%",
        "category": "Git"
      },
      {
        "command": "git.commitAllSigned",
        "title": "%command.commitAllSigned%",
        "category": "Git"
      },
      {
        "command": "git.commitAllAmend",
        "title": "%command.commitAllAmend%",
        "category": "Git"
      },
      {
        "command": "git.commitNoVerify",
        "title": "%command.commitNoVerify%",
        "category": "Git",
        "icon": "$(check)"
      },
      {
        "command": "git.commitStagedNoVerify",
        "title": "%command.commitStagedNoVerify%",
        "category": "Git"
      },
      {
        "command": "git.commitEmptyNoVerify",
        "title": "%command.commitEmptyNoVerify%",
        "category": "Git"
      },
      {
        "command": "git.commitStagedSignedNoVerify",
        "title": "%command.commitStagedSignedNoVerify%",
        "category": "Git"
      },
      {
        "command": "git.commitStagedAmendNoVerify",
        "title": "%command.commitStagedAmendNoVerify%",
        "category": "Git"
      },
      {
        "command": "git.commitAllNoVerify",
        "title": "%command.commitAllNoVerify%",
        "category": "Git"
      },
      {
        "command": "git.commitAllSignedNoVerify",
        "title": "%command.commitAllSignedNoVerify%",
        "category": "Git"
      },
      {
        "command": "git.commitAllAmendNoVerify",
        "title": "%command.commitAllAmendNoVerify%",
        "category": "Git"
      },
      {
        "command": "git.restoreCommitTemplate",
        "title": "%command.restoreCommitTemplate%",
        "category": "Git"
      },
      {
        "command": "git.undoCommit",
        "title": "%command.undoCommit%",
        "category": "Git"
      },
      {
        "command": "git.checkout",
        "title": "%command.checkout%",
        "category": "Git"
      },
      {
        "command": "git.checkoutDetached",
        "title": "%command.checkoutDetached%",
        "category": "Git"
      },
      {
        "command": "git.branch",
        "title": "%command.branch%",
        "category": "Git"
      },
      {
        "command": "git.branchFrom",
        "title": "%command.branchFrom%",
        "category": "Git"
      },
      {
        "command": "git.deleteBranch",
        "title": "%command.deleteBranch%",
        "category": "Git"
      },
      {
        "command": "git.renameBranch",
        "title": "%command.renameBranch%",
        "category": "Git"
      },
      {
        "command": "git.merge",
        "title": "%command.merge%",
        "category": "Git"
      },
      {
        "command": "git.rebase",
        "title": "%command.rebase%",
        "category": "Git"
      },
      {
        "command": "git.createTag",
        "title": "%command.createTag%",
        "category": "Git"
      },
      {
        "command": "git.deleteTag",
        "title": "%command.deleteTag%",
        "category": "Git"
      },
      {
        "command": "git.fetch",
        "title": "%command.fetch%",
        "category": "Git"
      },
      {
        "command": "git.fetchPrune",
        "title": "%command.fetchPrune%",
        "category": "Git"
      },
      {
        "command": "git.fetchAll",
        "title": "%command.fetchAll%",
        "category": "Git"
      },
      {
        "command": "git.pull",
        "title": "%command.pull%",
        "category": "Git"
      },
      {
        "command": "git.pullRebase",
        "title": "%command.pullRebase%",
        "category": "Git"
      },
      {
        "command": "git.pullFrom",
        "title": "%command.pullFrom%",
        "category": "Git"
      },
      {
        "command": "git.push",
        "title": "%command.push%",
        "category": "Git"
      },
      {
        "command": "git.pushForce",
        "title": "%command.pushForce%",
        "category": "Git"
      },
      {
        "command": "git.pushTo",
        "title": "%command.pushTo%",
        "category": "Git"
      },
      {
        "command": "git.pushToForce",
        "title": "%command.pushToForce%",
        "category": "Git"
      },
      {
        "command": "git.pushTags",
        "title": "%command.pushTags%",
        "category": "Git"
      },
      {
        "command": "git.pushWithTags",
        "title": "%command.pushFollowTags%",
        "category": "Git"
      },
      {
        "command": "git.pushWithTagsForce",
        "title": "%command.pushFollowTagsForce%",
        "category": "Git"
      },
      {
        "command": "git.cherryPick",
        "title": "%command.cherryPick%",
        "category": "Git"
      },
      {
        "command": "git.addRemote",
        "title": "%command.addRemote%",
        "category": "Git"
      },
      {
        "command": "git.removeRemote",
        "title": "%command.removeRemote%",
        "category": "Git"
      },
      {
        "command": "git.sync",
        "title": "%command.sync%",
        "category": "Git"
      },
      {
        "command": "git.syncRebase",
        "title": "%command.syncRebase%",
        "category": "Git"
      },
      {
        "command": "git.publish",
        "title": "%command.publish%",
        "category": "Git"
      },
      {
        "command": "git.showOutput",
        "title": "%command.showOutput%",
        "category": "Git"
      },
      {
        "command": "git.ignore",
        "title": "%command.ignore%",
        "category": "Git"
      },
      {
        "command": "git.revealInExplorer",
        "title": "%command.revealInExplorer%",
        "category": "Git"
      },
      {
        "command": "git.stashIncludeUntracked",
        "title": "%command.stashIncludeUntracked%",
        "category": "Git"
      },
      {
        "command": "git.stash",
        "title": "%command.stash%",
        "category": "Git"
      },
      {
        "command": "git.stashPop",
        "title": "%command.stashPop%",
        "category": "Git"
      },
      {
        "command": "git.stashPopLatest",
        "title": "%command.stashPopLatest%",
        "category": "Git"
      },
      {
        "command": "git.stashApply",
        "title": "%command.stashApply%",
        "category": "Git"
      },
      {
        "command": "git.stashApplyLatest",
        "title": "%command.stashApplyLatest%",
        "category": "Git"
      },
      {
        "command": "git.stashDrop",
        "title": "%command.stashDrop%",
        "category": "Git"
      },
      {
        "command": "git.timeline.openDiff",
        "title": "%command.timelineOpenDiff%",
        "icon": "$(compare-changes)",
        "category": "Git"
      },
      {
        "command": "git.timeline.copyCommitId",
        "title": "%command.timelineCopyCommitId%",
        "category": "Git"
      },
      {
        "command": "git.timeline.copyCommitMessage",
        "title": "%command.timelineCopyCommitMessage%",
        "category": "Git"
      },
      {
        "command": "git.timeline.selectForCompare",
        "title": "%command.timelineSelectForCompare%",
        "category": "Git"
      },
      {
        "command": "git.timeline.compareWithSelected",
        "title": "%command.timelineCompareWithSelected%",
        "category": "Git"
      },
      {
        "command": "git.rebaseAbort",
        "title": "%command.rebaseAbort%",
        "category": "Git"
      }
    ],
    "keybindings": [
      {
        "command": "git.stageSelectedRanges",
        "key": "ctrl+k ctrl+alt+s",
        "mac": "cmd+k cmd+alt+s",
        "when": "isInDiffEditor"
      },
      {
        "command": "git.unstageSelectedRanges",
        "key": "ctrl+k ctrl+n",
        "mac": "cmd+k cmd+n",
        "when": "isInDiffEditor"
      },
      {
        "command": "git.revertSelectedRanges",
        "key": "ctrl+k ctrl+r",
        "mac": "cmd+k cmd+r",
        "when": "isInDiffEditor"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "git.setLogLevel",
          "when": "config.git.enabled && !git.missing"
        },
        {
          "command": "git.clone",
          "when": "config.git.enabled && !git.missing"
        },
        {
          "command": "git.cloneRecursive",
          "when": "config.git.enabled && !git.missing"
        },
        {
          "command": "git.init",
          "when": "config.git.enabled && !git.missing"
        },
        {
          "command": "git.openRepository",
          "when": "config.git.enabled && !git.missing"
        },
        {
          "command": "git.close",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.refresh",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.openFile",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.openHEADFile",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.openChange",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stage",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stageAll",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stageAllTracked",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stageAllUntracked",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stageAllMerge",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stageSelectedRanges",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stageChange",
          "when": "false"
        },
        {
          "command": "git.revertSelectedRanges",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.revertChange",
          "when": "false"
        },
        {
          "command": "git.openFile2",
          "when": "false"
        },
        {
          "command": "git.unstage",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.unstageAll",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.unstageSelectedRanges",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.clean",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.cleanAll",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.cleanAllTracked",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.cleanAllUntracked",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.rename",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file"
        },
        {
          "command": "git.commit",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitStaged",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitEmpty",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitStagedSigned",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitStagedAmend",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitAll",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitAllSigned",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitAllAmend",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.rebaseAbort",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitRebaseInProgress"
        },
        {
          "command": "git.commitNoVerify",
          "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitStagedNoVerify",
          "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitEmptyNoVerify",
          "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitStagedSignedNoVerify",
          "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitStagedAmendNoVerify",
          "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitAllNoVerify",
          "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitAllSignedNoVerify",
          "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitAllAmendNoVerify",
          "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.restoreCommitTemplate",
          "when": "false"
        },
        {
          "command": "git.revealInExplorer",
          "when": "false"
        },
        {
          "command": "git.undoCommit",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.checkout",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.branch",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.branchFrom",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.deleteBranch",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.renameBranch",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.cherryPick",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pull",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pullFrom",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pullRebase",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.merge",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.rebase",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.createTag",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.deleteTag",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.fetch",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.fetchPrune",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.fetchAll",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.push",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushForce",
          "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushTo",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushToForce",
          "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushWithTags",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushWithTagsForce",
          "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushTags",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.addRemote",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.removeRemote",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.sync",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.syncRebase",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.publish",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.showOutput",
          "when": "config.git.enabled"
        },
        {
          "command": "git.ignore",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashIncludeUntracked",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stash",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashPop",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashPopLatest",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashApply",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashApplyLatest",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashDrop",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.timeline.openDiff",
          "when": "false"
        },
        {
          "command": "git.timeline.copyCommitId",
          "when": "false"
        },
        {
          "command": "git.timeline.copyCommitMessage",
          "when": "false"
        },
        {
          "command": "git.timeline.selectForCompare",
          "when": "false"
        },
        {
          "command": "git.timeline.compareWithSelected",
          "when": "false"
        }
      ],
      "scm/title": [
        {
          "command": "git.commit",
          "group": "navigation",
          "when": "scmProvider == git"
        },
        {
          "command": "git.refresh",
          "group": "navigation",
          "when": "scmProvider == git"
        },
        {
          "command": "git.pull",
          "group": "1_header@1",
          "when": "scmProvider == git"
        },
        {
          "command": "git.push",
          "group": "1_header@2",
          "when": "scmProvider == git"
        },
        {
          "command": "git.clone",
          "group": "1_header@3",
          "when": "scmProvider == git"
        },
        {
          "command": "git.checkout",
          "group": "1_header@4",
          "when": "scmProvider == git"
        },
        {
          "submenu": "git.commit",
          "group": "2_main@1",
          "when": "scmProvider == git"
        },
        {
          "submenu": "git.changes",
          "group": "2_main@2",
          "when": "scmProvider == git"
        },
        {
          "submenu": "git.pullpush",
          "group": "2_main@3",
          "when": "scmProvider == git"
        },
        {
          "submenu": "git.branch",
          "group": "2_main@4",
          "when": "scmProvider == git"
        },
        {
          "submenu": "git.remotes",
          "group": "2_main@5",
          "when": "scmProvider == git"
        },
        {
          "submenu": "git.stash",
          "group": "2_main@6",
          "when": "scmProvider == git"
        },
        {
          "submenu": "git.tags",
          "group": "2_main@7",
          "when": "scmProvider == git"
        },
        {
          "command": "git.showOutput",
          "group": "3_footer",
          "when": "scmProvider == git"
        }
      ],
      "scm/sourceControl": [
        {
          "command": "git.close",
          "group": "navigation",
          "when": "scmProvider == git"
        }
      ],
      "scm/resourceGroup/context": [
        {
          "command": "git.stageAllMerge",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "1_modification"
        },
        {
          "command": "git.stageAllMerge",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "inline@2"
        },
        {
          "command": "git.unstageAll",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "1_modification"
        },
        {
          "command": "git.unstageAll",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "inline@2"
        },
        {
          "command": "git.cleanAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
          "group": "1_modification"
        },
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
          "group": "1_modification"
        },
        {
          "command": "git.cleanAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
          "group": "inline@2"
        },
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
          "group": "inline@2"
        },
        {
          "command": "git.cleanAllTracked",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
          "group": "1_modification"
        },
        {
          "command": "git.stageAllTracked",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
          "group": "1_modification"
        },
        {
          "command": "git.cleanAllTracked",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
          "group": "inline@2"
        },
        {
          "command": "git.stageAllTracked",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
          "group": "inline@2"
        },
        {
          "command": "git.cleanAllUntracked",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "1_modification"
        },
        {
          "command": "git.stageAllUntracked",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "1_modification"
        },
        {
          "command": "git.cleanAllUntracked",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "inline@2"
        },
        {
          "command": "git.stageAllUntracked",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "inline@2"
        }
      ],
      "scm/resourceFolder/context": [
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "1_modification"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "inline@2"
        },
        {
          "command": "git.unstage",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "1_modification"
        },
        {
          "command": "git.unstage",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "inline@2"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline@2"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline@2"
        },
        {
          "command": "git.ignore",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification@3"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "1_modification"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "inline@2"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "inline@2"
        },
        {
          "command": "git.ignore",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "1_modification@3"
        }
      ],
      "scm/resourceState/context": [
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "1_modification"
        },
        {
          "command": "git.openFile",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "navigation"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "inline@2"
        },
        {
          "command": "git.revealInExplorer",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "2_view"
        },
        {
          "command": "git.openFile2",
          "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
          "group": "inline@1"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
          "group": "inline@1"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "navigation"
        },
        {
          "command": "git.openFile",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "navigation"
        },
        {
          "command": "git.openHEADFile",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "navigation"
        },
        {
          "command": "git.unstage",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "1_modification"
        },
        {
          "command": "git.unstage",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "inline@2"
        },
        {
          "command": "git.revealInExplorer",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "2_view"
        },
        {
          "command": "git.openFile2",
          "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
          "group": "inline@1"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
          "group": "inline@1"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "navigation"
        },
        {
          "command": "git.openHEADFile",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "navigation"
        },
        {
          "command": "git.openFile",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "navigation"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline@2"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline@2"
        },
        {
          "command": "git.openFile2",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
          "group": "inline@1"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
          "group": "inline@1"
        },
        {
          "command": "git.ignore",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification@3"
        },
        {
          "command": "git.revealInExplorer",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "2_view"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "navigation"
        },
        {
          "command": "git.openHEADFile",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "navigation"
        },
        {
          "command": "git.openFile",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "navigation"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository",
          "group": "inline@2"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "inline@2"
        },
        {
          "command": "git.openFile2",
          "when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
          "group": "inline@1"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
          "group": "inline@1"
        },
        {
          "command": "git.ignore",
          "when": "scmProvider == git && scmResourceGroup == untracked",
          "group": "1_modification@3"
        }
      ],
      "editor/title": [
        {
          "command": "git.openFile",
          "group": "navigation",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.openFile",
          "group": "navigation",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInNotebookTextDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.openChange",
          "group": "navigation",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && !isInDiffEditor && resourceScheme == file"
        },
        {
          "command": "git.stageSelectedRanges",
          "group": "2_git@1",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.unstageSelectedRanges",
          "group": "2_git@2",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.revertSelectedRanges",
          "group": "2_git@3",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        }
      ],
      "editor/context": [
        {
          "command": "git.stageSelectedRanges",
          "group": "2_git@1",
          "when": "isInDiffRightEditor && !isInEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.unstageSelectedRanges",
          "group": "2_git@2",
          "when": "isInDiffRightEditor && !isInEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.revertSelectedRanges",
          "group": "2_git@3",
          "when": "isInDiffRightEditor && !isInEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        }
      ],
      "scm/change/title": [
        {
          "command": "git.stageChange",
          "when": "config.git.enabled && !git.missing && originalResourceScheme == git"
        },
        {
          "command": "git.revertChange",
          "when": "config.git.enabled && !git.missing && originalResourceScheme == git"
        }
      ],
      "timeline/item/context": [
        {
          "command": "git.timeline.openDiff",
          "group": "1_actions",
          "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"
        },
        {
          "command": "git.timeline.compareWithSelected",
          "group": "3_compare@1",
          "when": "config.git.enabled && !git.missing && git.timeline.selectedForCompare && timelineItem =~ /git:file\\b/ && !listMultiSelection"
        },
        {
          "command": "git.timeline.selectForCompare",
          "group": "3_compare@2",
          "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"
        },
        {
          "command": "git.timeline.copyCommitId",
          "group": "5_copy@1",
          "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"
        },
        {
          "command": "git.timeline.copyCommitMessage",
          "group": "5_copy@2",
          "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"
        }
      ],
      "git.commit": [
        {
          "command": "git.commit",
          "group": "1_commit@1"
        },
        {
          "command": "git.commitStaged",
          "group": "1_commit@2"
        },
        {
          "command": "git.commitAll",
          "group": "1_commit@3"
        },
        {
          "command": "git.undoCommit",
          "group": "1_commit@4"
        },
        {
          "command": "git.rebaseAbort",
          "group": "1_commit@5"
        },
        {
          "command": "git.commitNoVerify",
          "group": "1_commit@6",
          "when": "config.git.allowNoVerifyCommit"
        },
        {
          "command": "git.commitStagedNoVerify",
          "group": "1_commit@7",
          "when": "config.git.allowNoVerifyCommit"
        },
        {
          "command": "git.commitAllNoVerify",
          "group": "1_commit@8",
          "when": "config.git.allowNoVerifyCommit"
        },
        {
          "command": "git.commitStagedAmend",
          "group": "2_amend@1"
        },
        {
          "command": "git.commitAllAmend",
          "group": "2_amend@2"
        },
        {
          "command": "git.commitStagedAmendNoVerify",
          "group": "2_amend@3",
          "when": "config.git.allowNoVerifyCommit"
        },
        {
          "command": "git.commitAllAmendNoVerify",
          "group": "2_amend@4",
          "when": "config.git.allowNoVerifyCommit"
        },
        {
          "command": "git.commitStagedSigned",
          "group": "3_signoff@1"
        },
        {
          "command": "git.commitAllSigned",
          "group": "3_signoff@2"
        },
        {
          "command": "git.commitStagedSignedNoVerify",
          "group": "3_signoff@3",
          "when": "config.git.allowNoVerifyCommit"
        },
        {
          "command": "git.commitAllSignedNoVerify",
          "group": "3_signoff@4",
          "when": "config.git.allowNoVerifyCommit"
        }
      ],
      "git.changes": [
        {
          "command": "git.stageAll",
          "group": "changes@1"
        },
        {
          "command": "git.unstageAll",
          "group": "changes@2"
        },
        {
          "command": "git.cleanAll",
          "group": "changes@3"
        }
      ],
      "git.pullpush": [
        {
          "command": "git.sync",
          "group": "1_sync@1"
        },
        {
          "command": "git.syncRebase",
          "when": "gitState == idle",
          "group": "1_sync@2"
        },
        {
          "command": "git.pull",
          "group": "2_pull@1"
        },
        {
          "command": "git.pullRebase",
          "group": "2_pull@2"
        },
        {
          "command": "git.pullFrom",
          "group": "2_pull@3"
        },
        {
          "command": "git.push",
          "group": "3_push@1"
        },
        {
          "command": "git.pushForce",
          "when": "config.git.allowForcePush",
          "group": "3_push@2"
        },
        {
          "command": "git.pushTo",
          "group": "3_push@3"
        },
        {
          "command": "git.pushToForce",
          "when": "config.git.allowForcePush",
          "group": "3_push@4"
        },
        {
          "command": "git.fetch",
          "group": "4_fetch@1"
        },
        {
          "command": "git.fetchPrune",
          "group": "4_fetch@2"
        },
        {
          "command": "git.fetchAll",
          "group": "4_fetch@3"
        }
      ],
      "git.branch": [
        {
          "command": "git.merge",
          "group": "branch@1"
        },
        {
          "command": "git.rebase",
          "group": "branch@2"
        },
        {
          "command": "git.branch",
          "group": "branch@3"
        },
        {
          "command": "git.branchFrom",
          "group": "branch@4"
        },
				{
					"command": "git.renameBranch",
					"group": "branch@5"
				},
        {
          "command": "git.deleteBranch",
          "group": "branch@6"
        },
        {
          "command": "git.publish",
          "group": "branch@7"
        }
      ],
      "git.remotes": [
        {
          "command": "git.addRemote",
          "group": "remote@1"
        },
        {
          "command": "git.removeRemote",
          "group": "remote@2"
        }
      ],
      "git.stash": [
        {
          "command": "git.stash",
          "group": "stash@1"
        },
        {
          "command": "git.stashIncludeUntracked",
          "group": "stash@2"
        },
        {
          "command": "git.stashApplyLatest",
          "group": "stash@3"
        },
        {
          "command": "git.stashApply",
          "group": "stash@4"
        },
        {
          "command": "git.stashPopLatest",
          "group": "stash@5"
        },
        {
          "command": "git.stashPop",
          "group": "stash@6"
        },
        {
          "command": "git.stashDrop",
          "group": "stash@7"
        }
      ],
      "git.tags": [
        {
          "command": "git.createTag",
          "group": "tags@1"
        },
        {
          "command": "git.deleteTag",
          "group": "tags@2"
        }
      ]
    },
    "submenus": [
      {
        "id": "git.commit",
        "label": "%submenu.commit%"
      },
      {
        "id": "git.changes",
        "label": "%submenu.changes%"
      },
      {
        "id": "git.pullpush",
        "label": "%submenu.pullpush%"
      },
      {
        "id": "git.branch",
        "label": "%submenu.branch%"
      },
      {
        "id": "git.remotes",
        "label": "%submenu.remotes%"
      },
      {
        "id": "git.stash",
        "label": "%submenu.stash%"
      },
      {
        "id": "git.tags",
        "label": "%submenu.tags%"
      }
    ],
    "configuration": {
      "title": "Git",
      "properties": {
        "git.enabled": {
          "type": "boolean",
          "scope": "resource",
          "description": "%config.enabled%",
          "default": true
        },
        "git.path": {
          "type": [
            "string",
            "null",
            "array"
          ],
          "markdownDescription": "%config.path%",
          "default": null,
          "scope": "machine"
        },
        "git.autoRepositoryDetection": {
          "type": [
            "boolean",
            "string"
          ],
          "enum": [
            true,
            false,
            "subFolders",
            "openEditors"
          ],
          "enumDescriptions": [
            "%config.autoRepositoryDetection.true%",
            "%config.autoRepositoryDetection.false%",
            "%config.autoRepositoryDetection.subFolders%",
            "%config.autoRepositoryDetection.openEditors%"
          ],
          "description": "%config.autoRepositoryDetection%",
          "default": true
        },
        "git.autorefresh": {
          "type": "boolean",
          "description": "%config.autorefresh%",
          "default": true
        },
        "git.autofetch": {
          "type": ["boolean", "string"],
          "enum": [true, false, "all"],
          "scope": "resource",
          "markdownDescription": "%config.autofetch%",
          "default": false,
          "tags": [
            "usesOnlineServices"
          ]
        },
        "git.autofetchPeriod": {
          "type": "number",
          "scope": "resource",
          "markdownDescription": "%config.autofetchPeriod%",
          "default": 180
        },
        "git.branchValidationRegex": {
          "type": "string",
          "description": "%config.branchValidationRegex%",
          "default": ""
        },
        "git.branchWhitespaceChar": {
          "type": "string",
          "description": "%config.branchWhitespaceChar%",
          "default": "-"
        },
        "git.confirmSync": {
          "type": "boolean",
          "description": "%config.confirmSync%",
          "default": true
        },
        "git.countBadge": {
          "type": "string",
          "enum": [
            "all",
            "tracked",
            "off"
          ],
          "enumDescriptions": [
            "%config.countBadge.all%",
            "%config.countBadge.tracked%",
            "%config.countBadge.off%"
          ],
          "description": "%config.countBadge%",
          "default": "all",
          "scope": "resource"
        },
        "git.checkoutType": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "local",
              "tags",
              "remote"
            ],
            "enumDescriptions": [
              "%config.checkoutType.local%",
              "%config.checkoutType.tags%",
              "%config.checkoutType.remote%"
            ]
          },
          "uniqueItems": true,
          "markdownDescription": "%config.checkoutType%",
          "default": [
            "local",
            "remote",
            "tags"
          ]
        },
        "git.ignoreLegacyWarning": {
          "type": "boolean",
          "description": "%config.ignoreLegacyWarning%",
          "default": false
        },
        "git.ignoreMissingGitWarning": {
          "type": "boolean",
          "description": "%config.ignoreMissingGitWarning%",
          "default": false
        },
        "git.ignoreWindowsGit27Warning": {
          "type": "boolean",
          "description": "%config.ignoreWindowsGit27Warning%",
          "default": false
        },
        "git.ignoreLimitWarning": {
          "type": "boolean",
          "description": "%config.ignoreLimitWarning%",
          "default": false
        },
        "git.ignoreRebaseWarning": {
          "type": "boolean",
          "description": "%config.ignoreRebaseWarning%",
          "default": false
        },
        "git.defaultCloneDirectory": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "scope": "machine",
          "description": "%config.defaultCloneDirectory%"
        },
        "git.enableSmartCommit": {
          "type": "boolean",
          "scope": "resource",
          "description": "%config.enableSmartCommit%",
          "default": false
        },
        "git.smartCommitChanges": {
          "type": "string",
          "enum": [
            "all",
            "tracked"
          ],
          "enumDescriptions": [
            "%config.smartCommitChanges.all%",
            "%config.smartCommitChanges.tracked%"
          ],
          "scope": "resource",
          "description": "%config.smartCommitChanges%",
          "default": "all"
        },
        "git.suggestSmartCommit": {
          "type": "boolean",
          "scope": "resource",
          "description": "%config.suggestSmartCommit%",
          "default": true
        },
        "git.enableCommitSigning": {
          "type": "boolean",
          "scope": "resource",
          "description": "%config.enableCommitSigning%",
          "default": false
        },
        "git.confirmEmptyCommits": {
          "type": "boolean",
          "scope": "resource",
          "description": "%config.confirmEmptyCommits%",
          "default": true
        },
        "git.decorations.enabled": {
          "type": "boolean",
          "default": true,
          "description": "%config.decorations.enabled%"
        },
        "git.enableStatusBarSync": {
          "type": "boolean",
          "default": true,
          "description": "%config.enableStatusBarSync%",
          "scope": "resource"
        },
        "git.followTagsWhenSync": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.followTagsWhenSync%"
        },
        "git.promptToSaveFilesBeforeStash": {
          "type": "string",
          "enum": [
            "always",
            "staged",
            "never"
          ],
          "enumDescriptions": [
            "%config.promptToSaveFilesBeforeStash.always%",
            "%config.promptToSaveFilesBeforeStash.staged%",
            "%config.promptToSaveFilesBeforeStash.never%"
          ],
          "scope": "resource",
          "default": "always",
          "description": "%config.promptToSaveFilesBeforeStash%"
        },
        "git.promptToSaveFilesBeforeCommit": {
          "type": "string",
          "enum": [
            "always",
            "staged",
            "never"
          ],
          "enumDescriptions": [
            "%config.promptToSaveFilesBeforeCommit.always%",
            "%config.promptToSaveFilesBeforeCommit.staged%",
            "%config.promptToSaveFilesBeforeCommit.never%"
          ],
          "scope": "resource",
          "default": "always",
          "description": "%config.promptToSaveFilesBeforeCommit%"
        },
        "git.postCommitCommand": {
          "type": "string",
          "enum": [
            "none",
            "push",
            "sync"
          ],
          "enumDescriptions": [
            "%config.postCommitCommand.none%",
            "%config.postCommitCommand.push%",
            "%config.postCommitCommand.sync%"
          ],
          "markdownDescription": "%config.postCommitCommand%",
          "scope": "resource",
          "default": "none"
        },
        "git.openAfterClone": {
          "type": "string",
          "enum": [
            "always",
            "alwaysNewWindow",
            "whenNoFolderOpen",
            "prompt"
          ],
          "enumDescriptions": [
            "%config.openAfterClone.always%",
            "%config.openAfterClone.alwaysNewWindow%",
            "%config.openAfterClone.whenNoFolderOpen%",
            "%config.openAfterClone.prompt%"
          ],
          "default": "prompt",
          "description": "%config.openAfterClone%"
        },
        "git.showInlineOpenFileAction": {
          "type": "boolean",
          "default": true,
          "description": "%config.showInlineOpenFileAction%"
        },
        "git.showPushSuccessNotification": {
          "type": "boolean",
          "description": "%config.showPushSuccessNotification%",
          "default": false
        },
        "git.inputValidation": {
          "type": "string",
          "enum": [
            "always",
            "warn",
            "off"
          ],
          "default": "warn",
          "description": "%config.inputValidation%"
        },
        "git.inputValidationLength": {
          "type": "number",
          "default": 72,
          "description": "%config.inputValidationLength%"
        },
        "git.inputValidationSubjectLength": {
          "type": [
            "number",
            "null"
          ],
          "default": 50,
          "description": "%config.inputValidationSubjectLength%"
        },
        "git.detectSubmodules": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%config.detectSubmodules%"
        },
        "git.detectSubmodulesLimit": {
          "type": "number",
          "scope": "resource",
          "default": 10,
          "description": "%config.detectSubmodulesLimit%"
        },
        "git.alwaysShowStagedChangesResourceGroup": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.alwaysShowStagedChangesResourceGroup%"
        },
        "git.alwaysSignOff": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.alwaysSignOff%"
        },
        "git.ignoreSubmodules": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.ignoreSubmodules%"
        },
        "git.ignoredRepositories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "scope": "window",
          "description": "%config.ignoredRepositories%"
        },
        "git.scanRepositories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "scope": "resource",
          "description": "%config.scanRepositories%"
        },
        "git.showProgress": {
          "type": "boolean",
          "description": "%config.showProgress%",
          "default": true,
          "scope": "resource"
        },
        "git.rebaseWhenSync": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.rebaseWhenSync%"
        },
        "git.fetchOnPull": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.fetchOnPull%"
        },
        "git.pruneOnFetch": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.pruneOnFetch%"
        },
        "git.pullTags": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%config.pullTags%"
        },
        "git.autoStash": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.autoStash%"
        },
        "git.allowForcePush": {
          "type": "boolean",
          "default": false,
          "description": "%config.allowForcePush%"
        },
        "git.useForcePushWithLease": {
          "type": "boolean",
          "default": true,
          "description": "%config.useForcePushWithLease%"
        },
        "git.confirmForcePush": {
          "type": "boolean",
          "default": true,
          "description": "%config.confirmForcePush%"
        },
        "git.allowNoVerifyCommit": {
          "type": "boolean",
          "default": false,
          "description": "%config.allowNoVerifyCommit%"
        },
        "git.confirmNoVerifyCommit": {
          "type": "boolean",
          "default": true,
          "description": "%config.confirmNoVerifyCommit%"
        },
        "git.openDiffOnClick": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%config.openDiffOnClick%"
        },
        "git.supportCancellation": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.supportCancellation%"
        },
        "git.branchSortOrder": {
          "type": "string",
          "enum": [
            "committerdate",
            "alphabetically"
          ],
          "default": "committerdate",
          "description": "%config.branchSortOrder%"
        },
        "git.untrackedChanges": {
          "type": "string",
          "enum": [
            "mixed",
            "separate",
            "hidden"
          ],
          "enumDescriptions": [
            "%config.untrackedChanges.mixed%",
            "%config.untrackedChanges.separate%",
            "%config.untrackedChanges.hidden%"
          ],
          "default": "mixed",
          "description": "%config.untrackedChanges%",
          "scope": "resource"
        },
        "git.requireGitUserConfig": {
          "type": "boolean",
          "description": "%config.requireGitUserConfig%",
          "default": true
        },
        "git.showCommitInput": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%config.showCommitInput%"
        },
        "git.terminalAuthentication": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%config.terminalAuthentication%"
        },
        "git.useCommitInputAsStashMessage": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.useCommitInputAsStashMessage%"
        },
        "git.githubAuthentication": {
          "deprecationMessage": "This setting is now deprecated, please use `github.gitAuthentication` instead."
        },
        "git.timeline.date": {
          "enum": [
            "committed",
            "authored"
          ],
          "enumDescriptions": [
            "%config.timeline.date.committed%",
            "%config.timeline.date.authored%"
          ],
          "default": "committed",
          "description": "%config.timeline.date%",
          "scope": "window"
        },
        "git.timeline.showAuthor": {
          "type": "boolean",
          "default": true,
          "description": "%config.timeline.showAuthor%",
          "scope": "window"
        }
      }
    },
    "colors": [
      {
        "id": "gitDecoration.addedResourceForeground",
        "description": "%colors.added%",
        "defaults": {
          "light": "#587c0c",
          "dark": "#81b88b",
          "highContrast": "#1b5225"
        }
      },
      {
        "id": "gitDecoration.modifiedResourceForeground",
        "description": "%colors.modified%",
        "defaults": {
          "light": "#895503",
          "dark": "#E2C08D",
          "highContrast": "#E2C08D"
        }
      },
      {
        "id": "gitDecoration.deletedResourceForeground",
        "description": "%colors.deleted%",
        "defaults": {
          "light": "#ad0707",
          "dark": "#c74e39",
          "highContrast": "#c74e39"
        }
      },
      {
        "id": "gitDecoration.renamedResourceForeground",
        "description": "%colors.renamed%",
        "defaults": {
          "light": "#007100",
          "dark": "#73C991",
          "highContrast": "#73C991"
        }
      },
      {
        "id": "gitDecoration.untrackedResourceForeground",
        "description": "%colors.untracked%",
        "defaults": {
          "light": "#007100",
          "dark": "#73C991",
          "highContrast": "#73C991"
        }
      },
      {
        "id": "gitDecoration.ignoredResourceForeground",
        "description": "%colors.ignored%",
        "defaults": {
          "light": "#8E8E90",
          "dark": "#8C8C8C",
          "highContrast": "#A7A8A9"
        }
      },
      {
        "id": "gitDecoration.stageModifiedResourceForeground",
        "description": "%colors.stageModified%",
        "defaults": {
          "light": "#895503",
          "dark": "#E2C08D",
          "highContrast": "#E2C08D"
        }
      },
      {
        "id": "gitDecoration.stageDeletedResourceForeground",
        "description": "%colors.stageDeleted%",
        "defaults": {
          "light": "#ad0707",
          "dark": "#c74e39",
          "highContrast": "#c74e39"
        }
      },
      {
        "id": "gitDecoration.conflictingResourceForeground",
        "description": "%colors.conflict%",
        "defaults": {
          "light": "#ad0707",
          "dark": "#e4676b",
          "highContrast": "#c74e39"
        }
      },
      {
        "id": "gitDecoration.submoduleResourceForeground",
        "description": "%colors.submodule%",
        "defaults": {
          "light": "#1258a7",
          "dark": "#8db9e2",
          "highContrast": "#8db9e2"
        }
      }
    ],
    "languages": [
      {
        "id": "git-commit",
        "aliases": [
          "Git Commit Message",
          "git-commit"
        ],
        "filenames": [
          "COMMIT_EDITMSG",
          "MERGE_MSG"
        ],
        "configuration": "./languages/git-commit.language-configuration.json"
      },
      {
        "id": "git-rebase",
        "aliases": [
          "Git Rebase Message",
          "git-rebase"
        ],
        "filenames": [
          "git-rebase-todo"
        ],
        "configuration": "./languages/git-rebase.language-configuration.json"
      },
      {
        "id": "diff",
        "aliases": [
          "Diff",
          "diff"
        ],
        "extensions": [
          ".diff",
          ".patch",
          ".rej"
        ],
        "configuration": "./languages/diff.language-configuration.json"
      },
      {
        "id": "ignore",
        "aliases": [
          "Ignore",
          "ignore"
        ],
        "extensions": [
          ".gitignore_global",
          ".gitignore"
        ],
        "configuration": "./languages/ignore.language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "git-commit",
        "scopeName": "text.git-commit",
        "path": "./syntaxes/git-commit.tmLanguage.json"
      },
      {
        "language": "git-rebase",
        "scopeName": "text.git-rebase",
        "path": "./syntaxes/git-rebase.tmLanguage.json"
      },
      {
        "language": "diff",
        "scopeName": "source.diff",
        "path": "./syntaxes/diff.tmLanguage.json"
      },
      {
        "language": "ignore",
        "scopeName": "source.ignore",
        "path": "./syntaxes/ignore.tmLanguage.json"
      }
    ],
    "configurationDefaults": {
      "[git-commit]": {
        "editor.rulers": [
          72
        ],
        "workbench.editor.restoreViewState": false
      },
      "[git-rebase]": {
        "workbench.editor.restoreViewState": false
      }
    },
    "viewsWelcome": [
      {
        "view": "scm",
        "contents": "%view.workbench.scm.disabled%",
        "when": "!config.git.enabled"
      },
      {
        "view": "scm",
        "contents": "%view.workbench.scm.missing%",
        "when": "config.git.enabled && git.missing"
      },
      {
        "view": "scm",
        "contents": "%view.workbench.scm.empty%",
        "when": "config.git.enabled && workbenchState == empty",
        "enablement": "git.state == initialized",
        "group": "2_open@1"
      },
      {
        "view": "scm",
        "contents": "%view.workbench.scm.folder%",
        "when": "config.git.enabled && workbenchState == folder",
        "enablement": "git.state == initialized",
        "group": "5_scm@1"
      },
      {
        "view": "scm",
        "contents": "%view.workbench.scm.workspace%",
        "when": "config.git.enabled && workbenchState == workspace && workspaceFolderCount != 0",
        "enablement": "git.state == initialized",
        "group": "5_scm@1"
      },
      {
        "view": "scm",
        "contents": "%view.workbench.scm.emptyWorkspace%",
        "when": "config.git.enabled && workbenchState == workspace && workspaceFolderCount == 0",
        "enablement": "git.state == initialized",
        "group": "2_open@1"
      },
      {
        "view": "explorer",
        "contents": "%view.workbench.cloneRepository%",
        "when": "config.git.enabled",
        "enablement": "git.state == initialized",
        "group": "5_scm@1"
      },
      {
        "view": "explorer",
        "contents": "%view.workbench.learnMore%",
        "when": "config.git.enabled",
        "enablement": "git.state == initialized",
        "group": "5_scm@10"
      }
    ]
  },
  "dependencies": {
    "byline": "^5.0.0",
    "file-type": "^7.2.0",
    "iconv-lite-umd": "0.6.8",
    "jschardet": "2.3.0",
    "vscode-extension-telemetry": "0.1.7",
    "vscode-nls": "^4.0.0",
    "vscode-uri": "^2.0.0",
    "which": "^1.3.0"
  },
  "devDependencies": {
    "@types/byline": "4.2.31",
    "@types/file-type": "^5.2.1",
    "@types/mocha": "^8.2.0",
    "@types/node": "14.x",
    "@types/which": "^1.0.28"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/microsoft/vscode.git"
  }
}
