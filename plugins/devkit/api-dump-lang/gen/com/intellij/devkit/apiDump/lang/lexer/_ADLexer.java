// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ADLexer.flex

package com.intellij.devkit.apiDump.lang.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import com.intellij.devkit.apiDump.lang.elementTypes.ADTokenType;
import com.intellij.devkit.apiDump.lang.psi.ADElementTypes;
import com.intellij.psi.TokenType;
@SuppressWarnings("ALL")

class _ADLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\1\0\10\1\5\2\16\1\4\3\1\2\3\3\1\4"+
    "\3\3\1\5\1\6\1\7\1\3\1\10\1\11\1\12"+
    "\1\3\12\1\1\13\1\3\1\14\1\3\1\15\1\3"+
    "\1\16\32\4\1\17\1\3\1\20\1\3\1\4\1\3"+
    "\32\4\4\3\41\1\2\3\4\4\4\3\1\4\2\3"+
    "\1\1\7\3\1\4\4\3\1\4\5\3\27\4\1\3"+
    "\37\4\1\3\u01ca\4\4\3\14\4\16\3\5\4\7\3"+
    "\1\4\1\3\1\4\21\3\160\1\5\4\1\3\2\4"+
    "\2\3\4\4\1\3\1\4\6\3\1\4\1\3\3\4"+
    "\1\3\1\4\1\3\24\4\1\3\123\4\1\3\213\4"+
    "\1\3\5\1\2\3\246\4\1\3\46\4\2\3\1\4"+
    "\6\3\51\4\6\3\1\4\1\3\55\1\1\3\1\1"+
    "\1\3\2\1\1\3\2\1\1\3\1\1\10\3\33\4"+
    "\4\3\4\4\15\3\6\1\5\3\1\4\4\3\13\1"+
    "\1\3\1\1\3\3\53\4\37\1\4\3\2\4\1\1"+
    "\143\4\1\3\1\4\10\1\1\3\6\1\2\4\2\1"+
    "\1\3\4\1\2\4\12\1\3\4\2\3\1\4\17\3"+
    "\1\1\1\4\1\1\36\4\33\1\2\3\131\4\13\1"+
    "\1\4\16\3\12\1\41\4\11\1\2\4\4\3\1\4"+
    "\2\3\1\1\30\4\4\1\1\4\11\1\1\4\3\1"+
    "\1\4\5\1\22\3\31\4\3\1\4\3\13\4\65\3"+
    "\25\4\1\3\22\4\13\3\61\1\66\4\3\1\1\4"+
    "\22\1\1\4\7\1\12\4\2\1\2\3\12\1\1\3"+
    "\20\4\3\1\1\3\10\4\2\3\2\4\2\3\26\4"+
    "\1\3\7\4\1\3\1\4\3\3\4\4\2\3\1\1"+
    "\1\4\7\1\2\3\2\1\2\3\3\1\1\4\10\3"+
    "\1\1\4\3\2\4\1\3\3\4\2\1\2\3\12\1"+
    "\4\4\7\3\2\4\1\3\1\1\2\3\3\1\1\3"+
    "\6\4\4\3\2\4\2\3\26\4\1\3\7\4\1\3"+
    "\2\4\1\3\2\4\1\3\2\4\2\3\1\1\1\3"+
    "\5\1\4\3\2\1\2\3\3\1\3\3\1\1\7\3"+
    "\4\4\1\3\1\4\7\3\14\1\3\4\1\1\13\3"+
    "\3\1\1\3\11\4\1\3\3\4\1\3\26\4\1\3"+
    "\7\4\1\3\2\4\1\3\5\4\2\3\1\1\1\4"+
    "\10\1\1\3\3\1\1\3\3\1\2\3\1\4\17\3"+
    "\2\4\2\1\2\3\12\1\1\3\1\4\7\3\1\4"+
    "\6\1\1\3\3\1\1\3\10\4\2\3\2\4\2\3"+
    "\26\4\1\3\7\4\1\3\2\4\1\3\5\4\2\3"+
    "\1\1\1\4\7\1\2\3\2\1\2\3\3\1\7\3"+
    "\3\1\4\3\2\4\1\3\3\4\2\1\2\3\12\1"+
    "\1\3\1\4\20\3\1\1\1\4\1\3\6\4\3\3"+
    "\3\4\1\3\4\4\3\3\2\4\1\3\1\4\1\3"+
    "\2\4\3\3\2\4\3\3\3\4\3\3\14\4\4\3"+
    "\5\1\3\3\3\1\1\3\4\1\2\3\1\4\6\3"+
    "\1\1\16\3\12\1\11\3\1\4\6\3\5\1\10\4"+
    "\1\3\3\4\1\3\27\4\1\3\20\4\3\3\1\4"+
    "\7\1\1\3\3\1\1\3\4\1\7\3\2\1\1\3"+
    "\3\4\5\3\2\4\2\1\2\3\12\1\20\3\1\4"+
    "\3\1\1\3\10\4\1\3\3\4\1\3\27\4\1\3"+
    "\12\4\1\3\5\4\2\3\1\1\1\4\7\1\1\3"+
    "\3\1\1\3\4\1\7\3\2\1\7\3\1\4\1\3"+
    "\2\4\2\1\2\3\12\1\1\3\2\4\15\3\4\1"+
    "\11\4\1\3\3\4\1\3\51\4\2\1\1\4\7\1"+
    "\1\3\3\1\1\3\4\1\1\4\5\3\3\4\1\1"+
    "\7\3\3\4\2\1\2\3\12\1\12\3\6\4\1\3"+
    "\3\1\1\3\22\4\3\3\30\4\1\3\11\4\1\3"+
    "\1\4\2\3\7\4\3\3\1\1\4\3\6\1\1\3"+
    "\1\1\1\3\10\1\6\3\12\1\2\3\2\1\15\3"+
    "\60\4\1\1\2\4\7\1\4\3\10\4\10\1\1\3"+
    "\12\1\47\3\2\4\1\3\1\4\1\3\5\4\1\3"+
    "\30\4\1\3\1\4\1\3\12\4\1\1\2\4\11\1"+
    "\1\4\2\3\5\4\1\3\1\4\1\3\6\1\2\3"+
    "\12\1\2\3\4\4\40\3\1\4\27\3\2\1\6\3"+
    "\12\1\13\3\1\1\1\3\1\1\1\3\1\1\4\3"+
    "\2\1\10\4\1\3\44\4\4\3\24\1\1\3\2\1"+
    "\5\4\13\1\1\3\44\1\11\3\1\1\71\3\53\4"+
    "\24\1\1\4\12\1\6\3\6\4\4\1\4\4\3\1"+
    "\1\4\3\1\2\4\7\1\3\4\4\1\15\4\14\1"+
    "\1\4\17\1\2\3\46\4\1\3\1\4\5\3\1\4"+
    "\2\3\53\4\1\3\115\4\1\3\4\4\2\3\7\4"+
    "\1\3\1\4\1\3\4\4\2\3\51\4\1\3\4\4"+
    "\2\3\41\4\1\3\4\4\2\3\7\4\1\3\1\4"+
    "\1\3\4\4\2\3\17\4\1\3\71\4\1\3\4\4"+
    "\2\3\103\4\2\3\3\1\40\3\20\4\20\3\126\4"+
    "\2\3\6\4\3\3\u016c\4\2\3\21\4\1\3\32\4"+
    "\5\3\113\4\3\3\13\4\7\3\15\4\1\3\4\4"+
    "\3\1\13\3\22\4\3\1\13\3\22\4\2\1\14\3"+
    "\15\4\1\3\3\4\1\3\2\1\14\3\64\4\40\1"+
    "\3\3\1\4\3\3\2\4\1\1\2\3\12\1\41\3"+
    "\4\1\1\3\12\1\6\3\131\4\7\3\5\4\2\1"+
    "\42\4\1\1\1\4\5\3\106\4\12\3\37\4\1\3"+
    "\14\1\4\3\14\1\12\3\12\1\36\4\2\3\5\4"+
    "\13\3\54\4\4\3\32\4\6\3\12\1\46\3\27\4"+
    "\5\1\4\3\65\4\12\1\1\3\35\1\2\3\13\1"+
    "\6\3\12\1\15\3\1\4\10\3\16\1\1\3\2\1"+
    "\77\3\5\1\57\4\21\1\7\4\4\3\12\1\21\3"+
    "\11\1\14\3\3\1\36\4\15\1\2\4\12\1\54\4"+
    "\16\1\14\3\44\4\24\1\10\3\12\1\3\3\3\4"+
    "\12\1\44\4\2\3\11\4\7\3\53\4\2\3\3\4"+
    "\20\3\3\1\1\3\25\1\4\4\1\1\6\4\1\1"+
    "\2\4\3\1\1\4\5\3\300\4\72\1\1\3\5\1"+
    "\26\4\2\3\6\4\2\3\46\4\2\3\6\4\2\3"+
    "\10\4\1\3\1\4\1\3\1\4\1\3\1\4\1\3"+
    "\37\4\2\3\65\4\1\3\7\4\1\3\1\4\3\3"+
    "\3\4\1\3\7\4\3\3\4\4\2\3\6\4\4\3"+
    "\15\4\5\3\3\4\1\3\7\4\16\3\5\1\32\3"+
    "\5\1\20\3\2\4\23\3\1\4\13\3\5\1\1\3"+
    "\12\1\1\3\1\4\15\3\1\4\20\3\15\4\3\3"+
    "\40\4\20\3\15\1\4\3\1\1\3\3\14\1\21\3"+
    "\1\4\4\3\1\4\2\3\12\4\1\3\1\4\3\3"+
    "\5\4\6\3\1\4\1\3\1\4\1\3\1\4\1\3"+
    "\4\4\1\3\13\4\2\3\4\4\5\3\5\4\4\3"+
    "\1\4\21\3\51\4\u0177\3\57\4\1\3\57\4\1\3"+
    "\205\4\6\3\4\4\3\1\2\4\14\3\46\4\1\3"+
    "\1\4\5\3\1\4\2\3\70\4\7\3\1\4\17\3"+
    "\1\1\27\4\11\3\7\4\1\3\7\4\1\3\7\4"+
    "\1\3\7\4\1\3\7\4\1\3\7\4\1\3\7\4"+
    "\1\3\7\4\1\3\40\1\57\3\1\4\325\3\3\4"+
    "\31\3\11\4\6\1\1\3\5\4\2\3\5\4\4\3"+
    "\126\4\2\3\2\1\2\3\3\4\1\3\132\4\1\3"+
    "\4\4\5\3\53\4\1\3\136\4\21\3\40\4\60\3"+
    "\320\4\100\3\375\4\3\3\215\4\103\3\56\4\2\3"+
    "\15\4\3\3\20\4\12\1\2\4\24\3\57\4\1\1"+
    "\4\3\12\1\1\3\37\4\2\1\120\4\2\1\45\3"+
    "\11\4\2\3\147\4\2\3\65\4\2\3\11\4\52\3"+
    "\15\4\1\1\3\4\1\1\4\4\1\1\27\4\5\1"+
    "\4\3\1\1\13\3\1\4\7\3\64\4\14\3\2\1"+
    "\62\4\22\1\12\3\12\1\6\3\22\1\6\4\3\3"+
    "\1\4\1\3\2\4\13\1\34\4\10\1\2\3\27\4"+
    "\15\1\14\3\35\4\3\3\4\1\57\4\16\1\16\3"+
    "\1\4\12\1\6\3\5\4\1\1\12\4\12\1\5\4"+
    "\1\3\51\4\16\1\11\3\3\4\1\1\10\4\2\1"+
    "\2\3\12\1\6\3\27\4\3\3\1\4\3\1\62\4"+
    "\1\1\1\4\3\1\2\4\2\1\5\4\2\1\1\4"+
    "\1\1\1\4\30\3\3\4\2\3\13\4\5\1\2\3"+
    "\3\4\2\1\12\3\6\4\2\3\6\4\2\3\6\4"+
    "\11\3\7\4\1\3\7\4\1\3\53\4\1\3\16\4"+
    "\6\3\163\4\10\1\1\3\2\1\2\3\12\1\6\3"+
    "\244\4\14\3\27\4\4\3\61\4\4\3\156\4\2\3"+
    "\152\4\46\3\7\4\14\3\5\4\5\3\1\4\1\1"+
    "\12\4\1\3\15\4\1\3\5\4\1\3\1\4\1\3"+
    "\2\4\1\3\2\4\1\3\154\4\41\3\153\4\22\3"+
    "\100\4\2\3\66\4\50\3\15\4\3\3\20\1\20\3"+
    "\20\1\3\3\2\4\30\3\3\4\31\3\1\4\6\3"+
    "\5\4\1\3\207\4\2\3\1\1\4\3\1\4\13\3"+
    "\12\1\7\3\32\4\4\3\1\4\1\3\32\4\13\3"+
    "\131\4\3\3\6\4\2\3\6\4\2\3\6\4\2\3"+
    "\3\4\3\3\2\4\3\3\2\4\22\3\3\1\4\3"+
    "\14\4\1\3\32\4\1\3\23\4\1\3\2\4\1\3"+
    "\17\4\2\3\16\4\42\3\173\4\105\3\65\4\210\3"+
    "\1\1\202\3\35\4\3\3\61\4\17\3\1\1\37\3"+
    "\40\4\15\3\36\4\5\3\46\4\5\1\5\3\36\4"+
    "\2\3\44\4\4\3\10\4\1\3\5\4\52\3\236\4"+
    "\2\3\12\1\6\3\44\4\4\3\44\4\4\3\50\4"+
    "\10\3\64\4\234\3\67\4\11\3\26\4\12\3\10\4"+
    "\230\3\6\4\2\3\1\4\1\3\54\4\1\3\2\4"+
    "\3\3\1\4\2\3\27\4\12\3\27\4\11\3\37\4"+
    "\101\3\23\4\1\3\2\4\12\3\26\4\12\3\32\4"+
    "\106\3\70\4\6\3\2\4\100\3\1\4\3\1\1\3"+
    "\2\1\5\3\4\1\4\4\1\3\3\4\1\3\35\4"+
    "\2\3\3\1\4\3\1\1\40\3\35\4\3\3\35\4"+
    "\43\3\10\4\1\3\34\4\2\1\31\3\66\4\12\3"+
    "\26\4\12\3\23\4\15\3\22\4\156\3\111\4\67\3"+
    "\63\4\15\3\63\4\15\3\44\4\4\1\10\3\12\1"+
    "\u0146\3\52\4\1\3\2\1\3\3\2\4\116\3\35\4"+
    "\12\3\1\4\10\3\26\4\13\1\137\3\25\4\33\3"+
    "\27\4\11\3\3\1\65\4\17\1\37\3\12\1\17\3"+
    "\4\1\55\4\13\1\2\3\1\1\17\3\1\1\2\3"+
    "\31\4\7\3\12\1\6\3\3\1\44\4\16\1\1\3"+
    "\12\1\4\3\1\4\2\1\1\4\10\3\43\4\1\1"+
    "\2\3\1\4\11\3\3\1\60\4\16\1\4\4\4\3"+
    "\4\1\1\3\14\1\1\4\1\3\1\4\43\3\22\4"+
    "\1\3\31\4\14\1\6\3\1\1\101\3\7\4\1\3"+
    "\1\4\1\3\4\4\1\3\17\4\1\3\12\4\7\3"+
    "\57\4\14\1\5\3\12\1\6\3\4\1\1\3\10\4"+
    "\2\3\2\4\2\3\26\4\1\3\7\4\1\3\2\4"+
    "\1\3\5\4\1\3\2\1\1\4\7\1\2\3\2\1"+
    "\2\3\3\1\2\3\1\4\6\3\1\1\5\3\5\4"+
    "\2\1\2\3\7\1\3\3\5\1\213\3\65\4\22\1"+
    "\4\4\5\3\12\1\4\3\1\1\3\4\36\3\60\4"+
    "\24\1\2\4\1\3\1\4\10\3\12\1\246\3\57\4"+
    "\7\1\2\3\11\1\27\3\4\4\2\1\42\3\60\4"+
    "\21\1\3\3\1\4\13\3\12\1\46\3\53\4\15\1"+
    "\1\4\7\3\12\1\66\3\33\4\2\3\17\1\4\3"+
    "\12\1\306\3\54\4\17\1\145\3\100\4\12\1\25\3"+
    "\10\4\2\3\1\4\2\3\10\4\1\3\2\4\1\3"+
    "\30\4\6\1\1\3\2\1\2\3\4\1\1\4\1\1"+
    "\1\4\2\1\14\3\12\1\106\3\10\4\2\3\47\4"+
    "\7\1\2\3\7\1\1\4\1\3\1\4\1\1\33\3"+
    "\1\4\12\1\50\4\7\1\1\4\4\1\10\3\1\1"+
    "\10\3\1\4\13\1\56\4\20\1\3\3\1\4\42\3"+
    "\71\4\7\3\11\4\1\3\45\4\10\1\1\3\10\1"+
    "\1\4\17\3\12\1\30\3\36\4\2\3\26\1\1\3"+
    "\16\1\111\3\7\4\1\3\2\4\1\3\46\4\6\1"+
    "\3\3\1\1\1\3\2\1\1\3\7\1\1\4\1\1"+
    "\10\3\12\1\6\3\6\4\1\3\2\4\1\3\40\4"+
    "\5\1\1\3\2\1\1\3\5\1\1\4\7\3\12\1"+
    "\u0136\3\23\4\4\1\271\3\1\4\54\3\4\4\37\3"+
    "\232\4\146\3\157\4\21\3\304\4\274\3\57\4\1\3"+
    "\11\1\307\3\107\4\271\3\71\4\7\3\37\4\1\3"+
    "\12\1\146\3\36\4\2\3\5\1\13\3\60\4\7\1"+
    "\11\3\4\4\14\3\12\1\11\3\25\4\5\3\23\4"+
    "\260\3\100\4\200\3\113\4\4\3\1\1\1\4\67\1"+
    "\7\3\4\1\15\4\100\3\2\4\1\3\1\4\1\1"+
    "\13\3\2\1\16\3\370\4\10\3\326\4\52\3\11\4"+
    "\367\3\37\4\61\3\3\4\21\3\4\4\10\3\u018c\4"+
    "\4\3\153\4\5\3\15\4\3\3\11\4\7\3\12\4"+
    "\3\3\2\1\1\3\4\1\301\3\5\1\3\3\26\1"+
    "\2\3\7\1\36\3\4\1\224\3\3\1\273\3\125\4"+
    "\1\3\107\4\1\3\2\4\2\3\1\4\2\3\2\4"+
    "\2\3\4\4\1\3\14\4\1\3\1\4\1\3\7\4"+
    "\1\3\101\4\1\3\4\4\2\3\10\4\1\3\7\4"+
    "\1\3\34\4\1\3\4\4\1\3\5\4\1\3\1\4"+
    "\3\3\7\4\1\3\u0154\4\2\3\31\4\1\3\31\4"+
    "\1\3\37\4\1\3\31\4\1\3\37\4\1\3\31\4"+
    "\1\3\37\4\1\3\31\4\1\3\37\4\1\3\31\4"+
    "\1\3\10\4\2\3\151\1\4\3\62\1\10\3\1\1"+
    "\16\3\1\1\26\3\5\1\1\3\17\1\120\3\7\1"+
    "\1\3\21\1\2\3\7\1\1\3\2\1\1\3\5\1"+
    "\325\3\55\4\3\3\7\1\7\4\2\3\12\1\4\3"+
    "\1\4\u0171\3\54\4\16\1\5\3\306\4\13\3\7\1"+
    "\51\3\104\4\7\1\1\4\4\3\12\1\u0156\3\1\4"+
    "\117\3\4\4\1\3\33\4\1\3\2\4\1\3\1\4"+
    "\2\3\1\4\1\3\12\4\1\3\4\4\1\3\1\4"+
    "\1\3\1\4\6\3\1\4\4\3\1\4\1\3\1\4"+
    "\1\3\1\4\1\3\3\4\1\3\2\4\1\3\1\4"+
    "\2\3\1\4\1\3\1\4\1\3\1\4\1\3\1\4"+
    "\1\3\1\4\1\3\2\4\1\3\1\4\2\3\4\4"+
    "\1\3\7\4\1\3\4\4\1\3\4\4\1\3\1\4"+
    "\1\3\12\4\1\3\21\4\5\3\3\4\1\3\5\4"+
    "\1\3\21\4\u0134\3\12\1\6\3\336\4\42\3\65\4"+
    "\13\3\336\4\2\3\u0182\4\16\3\u0131\4\37\3\36\4"+
    "\342\3\113\4\266\3\1\1\36\3\140\1\200\3\360\1"+
    "\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[16];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\21\0\42\0\63\0\42\0\42\0\42\0\42"+
    "\0\42\0\42\0\42\0\42\0\42\0\42\0\42\0\42";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[16];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\2\1\0\1\2\37\0\2\4\2\0\1\4"+
    "\4\0\1\4\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\1\1\14\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[16];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _ADLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ADLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 16: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 17: break;
          case 3:
            { return ADElementTypes.IDENTIFIER;
            }
          // fall through
          case 18: break;
          case 4:
            { return ADElementTypes.LPAREN;
            }
          // fall through
          case 19: break;
          case 5:
            { return ADElementTypes.RPAREN;
            }
          // fall through
          case 20: break;
          case 6:
            { return ADElementTypes.ASTERISK;
            }
          // fall through
          case 21: break;
          case 7:
            { return ADElementTypes.COMMA;
            }
          // fall through
          case 22: break;
          case 8:
            { return ADElementTypes.MINUS;
            }
          // fall through
          case 23: break;
          case 9:
            { return ADElementTypes.DOT;
            }
          // fall through
          case 24: break;
          case 10:
            { return ADElementTypes.COLON;
            }
          // fall through
          case 25: break;
          case 11:
            { return ADElementTypes.LESS;
            }
          // fall through
          case 26: break;
          case 12:
            { return ADElementTypes.MORE;
            }
          // fall through
          case 27: break;
          case 13:
            { return ADElementTypes.AT;
            }
          // fall through
          case 28: break;
          case 14:
            { return ADElementTypes.LBRACKET;
            }
          // fall through
          case 29: break;
          case 15:
            { return ADElementTypes.RBRACKET;
            }
          // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
