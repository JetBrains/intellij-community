#module type
module.title=IntelliJ Platform Plugin
module.description=Plugin modules are used for developing plugins for <b>IntelliJ Platform</b>-based IDEs.<br>\
  They provide <b>IntelliJ Platform Plugin SDK</b> and <b>Run Configuration</b> for running and debugging plugins inside an IDE.
plugin.descriptor=IntelliJ Platform Plugin Descriptor

group.PluginDeployActions.text=Plugin Deployment Actions

#Module Editor - Deployment
deployment.title=Plugin Deployment
deployment.cleanup=Clean Up {0} Directory
deployment.directory.location=Select {0} Directory Location
deployment.view.select=Select {0}
manifest.settings=Manifest Settings
manifest.selection=Selected {0} will be included in resulting distribution
manifest.use.user.defined=Use user manifest:
deployment.view.delete=Delete {0}?
deployment.view.meta-inf.label=Path to {0}
suggest.to.delete=Do you want to delete ''{0}''?
vm.parameters=&VM Options
program.parameters=&Program Arguments

#Prepare for deployment action
action.MakeJarAction.text=Prepare To Deploy
action.MakeAllJarsAction.text=Prepare All Plugins To Deploy
select.plugin.modules.title=Select modules
select.plugin.modules.description=Select modules to be prepared for deployment
prepare.for.deployment.common=Preparing For Deployment
prepare.for.deployment=Prepare Plugin Module ''{0}'' For Deployment
prepare.for.deployment.all=Prepare All Plugin Modules For Deployment
saved.message.common={0} will be saved in selected directory
saved.message= {0, choice, 1#Zip|2#JAR} for module ''{1}'' was saved to {2}
success.deployment.message=Plugin Module ''{0}'' Successfully Prepared For Deployment
success.deployment.message.all=All Plugins Successfully Prepared For Deployment

##Idea Sdk
sdk.title=IntelliJ Platform Plugin SDK
jdk.specification=Please configure JDK
sandbox.specification=Please configure the sandbox
sandbox.home=Sandbox Home
sandbox.home.label=Sandbox Home:
sandbox.no.configured=No sandbox specified for IntelliJ Platform Plugin SDK
sandbox.purpose=Browse folder to put config, system and plugins for target IDE

#errors
error.occurred=Error Occurred
sdk.no.specified=No SDK specified for plugin module ''{0}''
sdk.type.incorrect=Wrong SDK type for plugin module ''{0}''.
sdk.type.incorrect.common=Wrong SDK type for plugin module
error.file.not.found=File not Found
error.file.not.found.message=File ''{0}'' not found
error.no.plugin.xml=No plugin.xml file found
error.plugin.xml.readonly=Read-only plugin.xml file cannot be processed: {0}
error.plugin.xml.tag.invalid=<Invalid>
error.cannot.process.plugin.xml=Cannot process plugin descriptor file: {0}
error.cannot.create.service.class=Cannot Create Service Class

#run configurations
run.configuration.no.module.specified=No plugin module specified for configuration
run.configuration.title=Plugin
run.configuration.type.description=Plugin Sandbox Environment

#Test Data
testdata.create.dialog.title=Create Testdata File
testdata.file.doesn.not.exist=<html>The referenced testdata file {0} does not exist. Would you like to create it?</html>
testdata.create.missing.files=Create Missing Files
testdata.confirm.create.missing.files.dialog.message=The following testdata files will be created:\n{0}
testdata.searching=Searching for Testdata Files

#Misc
info.message=Info
new.action.id=&Action ID:
new.action.description=&Description:
new.action.class.name=&Class Name:
new.action.text=&Name:
new.action.add.to.group=Add to Group
new.action.group.actions=Act&ions:
new.action.group.anchor=Anchor:
new.action.group.anchor.first=&First
new.action.group.anchor.=&Last
new.action.group.anchor.before=&Before
new.action.group.anchor.after=Af&ter
new.action.group.groups=&Groups:
new.action.keyboard.shortcuts=Keyboard Shortcuts
new.action.keyboard.first=First:
new.action.keyboard.second=Second:
new.action.keyboard.clear=X
new.action.keyboard.clear.tooltip=Clear shortcut
new.action.invalid.id=Action ID must not be empty
new.action.invalid.class.name=Action Class Name is not a valid Java qualified name
new.action.invalid.name=Action Name must not be empty
new.action.cannot.create.class=Cannot create action class

command.implement.externalizable=Implement Externalizable

new.menu.action.text=Action
new.menu.action.description=Create new action
new.action.error=Cannot create action
new.action.action.name=Creating new action: {0}.{1}
new.action.dialog.title=New Action

action.name.create.new.message.bundle=Create new message bundle ''{0}''
error.title.cannot.create.new.message.bundle=Cannot create new message bundle
action.DevKit.NewMessageBundle.text=Message Bundle
action.DevKit.NewMessageBundle.description=Creates a new message bundle class and corresponding properties file
title.create.new.message.bundle=Create New Message Bundle
label.bundle.name=Bundle name:
error.message.do.not.put.bundle.to.impl.module=Currently it's not recommended to create a separate bundle for .impl module, use the bundle from the corresponding API module instead

new.theme.dialog.title=Create New Theme
new.theme.dialog.name.text.field.text=Name:
new.theme.dialog.is.dark.checkbox.text=Dark theme
new.theme.dialog.name.empty=Theme Name must not be empty

theme.choose.color.dialog.title=Choose Color

new.menu.application.component.text=Application Component
new.menu.module.component.text=Module Component
new.menu.project.component.text=Project Component

new.service.class.action.name=Creating new service
new.service.dialog.interface=Service &interface:
new.service.dialog.implementation=Service i&mplementation:
new.service.dialog.class=Service &class:
new.service.dialog.separate=&Separate interface from implementation
new.service.dialog.invalid.name=Service Name is not a valid Java qualified name
new.service.dialog.invalid.interface=Service Interface is not a valid Java qualified name
new.service.dialog.invalid.implementation=Service Implementation is not a valid Java qualified name

new.application.service.dialog.title=Create Application Service
new.project.service.dialog.title=Create Project Service
new.module.service.dialog.title=Create New Module Service

select.plugin.module.to.patch=Select Plugin Module to Patch

keyword.extend=extend
keyword.implement=implement
class.action=action
class.interface=interface
class.implementation=implementation

structure.sort.alphabetically.in.groups=Sort Alphabetically in Groups

inspections.group.name=Plugin DevKit
inspections.group.descriptor=Plugin descriptor
inspections.group.description.file=Description file
inspections.group.code=Code
inspections.plugin.xml.inner.class.must.be.separated.with.dollar=Inner class must be separated with '$'
inspections.plugin.xml.plugin.should.have.jetbrains.vendor=Plugin developed as a part of IntelliJ IDEA project should specify 'JetBrains' as its vendor
inspections.plugin.xml.plugin.jetbrains.vendor.no.url=Plugin developed as a part of IntelliJ IDEA project shouldn''t specify ''{0}'' as url
inspections.plugin.xml.plugin.jetbrains.vendor.no.email=Plugin developed as a part of IntelliJ IDEA project shouldn't specify email
inspections.plugin.xml.plugin.jetbrains.no.version=Plugin developed as a part of IntelliJ IDEA project shouldn't specify version
inspections.plugin.xml.plugin.jetbrains.no.idea.version=Plugin developed as a part of IntelliJ IDEA project shouldn't specify idea-version as it is generated by build scripts automatically
inspections.plugin.xml.plugin.jetbrains.no.change.notes=Plugin developed as a part of IntelliJ IDEA project shouldn't specify change-notes
inspections.plugin.xml.plugin.jetbrains.no.generic.plugin.url=Plugin developed as a part of IntelliJ IDEA project shouldn't specify generic plugin url
inspections.plugin.xml.ep.qualifiedName.superfluous=Unnecessary declaration via 'qualifiedName'
inspections.plugin.xml.ep.qualifiedName.superfluous.fix=Declare via 'name'
inspections.plugin.xml.ep.doesnt.have.with=<extensionPoint> does not have <with> tags to specify the types of class fields
inspections.plugin.xml.ep.both.beanClass.and.interface=<extensionPoint> must not specify both 'interface' and 'beanClass' attributes
inspections.plugin.xml.ep.missing.beanClass.and.interface=<extensionPoint> must specify either 'interface' or 'beanClass' attribute
inspections.plugin.xml.ep.both.name.and.qualifiedName=<extensionPoint> must not specify both 'name' and 'qualifiedName' attributes
inspections.plugin.xml.ep.missing.name.and.qualifiedName=<extensionPoint> must specify either 'name' or 'qualifiedName' attribute
inspections.plugin.xml.use.defaultExtensionNs=Use defaultExtensionNs instead
inspections.plugin.xml.specify.defaultExtensionNs.explicitly=Specify defaultExtensionNs="{0}" explicitly
inspections.plugin.xml.invalid.build.number=<html>Invalid build number ''{0}'' (<a href="http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html">Documentation</a>)</html>
inspections.plugin.xml.until.build.use.asterisk.instead.of.big.number=Don''t use ''{0}'' in ''until-build'', use ''*'' instead
inspections.plugin.xml.until.build.misleading.plain.number=Plain numbers in ''until-build'' attribute may be misleading. ''{0}'' means the same as ''{0}.0'', so the plugin won''t be compatible with {0}.* builds. It''s better to specify ''{1}'' instead.
inspections.plugin.xml.until.build.must.be.greater.than.since.build="until-build" must be greater than "since-build"
inspections.plugin.xml.dependency.superfluous.optional=Superfluous declaration
inspections.plugin.xml.dependency.specify.config.file=Must specify 'config-file'
inspections.plugin.xml.deprecated.ep=Deprecated EP ''{0}''
inspections.plugin.xml.no.need.to.specify.itnReporter=Exceptions from plugins developed by JetBrains are reported via ITNReporter automatically, there is no need to specify it explicitly
inspections.plugin.xml.third.party.plugins.must.not.use.itnReporter='com.intellij.diagnostic.ITNReporter' reports errors for internal processing at JetBrains, it should not be used for third-party plugins
inspections.plugin.xml.deprecated.attribute=Deprecated attribute ''{0}''
inspections.plugin.xml.deprecated.helpset=Helpset is not used anymore, use 'com.intellij.openapi.help.WebHelpProvider' instead
inspections.plugin.xml.attribute.not.used.anymore=Attribute ''{0}'' not used anymore
inspections.plugin.xml.anchor.must.have.relative-to-action='anchor' must be specified with 'relative-to-action'
inspections.plugin.xml.must.use.after.before.with.relative-to-action=Must use ''{0}''|''{1}'' with ''relative-to-action''
inspections.plugin.xml.skipForDefaultProject.deprecated='skipForDefaultProject' is deprecated; project components are not loaded in the default project by default
inspections.plugin.xml.invalid.ep.name.description=Invalid EP {0} ''{1}'', must contain only latin characters, digits and dots, must not start/end with dot, each fragment must start with lowercase character, last fragment words must not repeat any previous fragment
inspections.plugin.xml.invalid.ep.name=name
inspections.plugin.xml.invalid.ep.qualifiedName=qualified name
inspections.plugin.xml.ignore.classes.title=Registration check ignore class list:
inspections.plugin.xml.add.ignored.class.title=Specify Class to Ignore
inspections.plugin.xml.plugin.modules.label=Modules of multi-module plugins:
inspections.plugin.xml.plugin.modules.description=Each line specifies comma-separated list of module names which are included into a single plugin.
inspections.plugin.xml.version.must.be.specified=<version> must be specified
inspections.plugin.xml.vendor.must.be.specified=<vendor> must be specified
inspections.plugin.xml.do.not.use.template.text=Do not use template text ''{0}''
inspections.plugin.xml.must.not.contain.template.text=Must not contain template text ''{0}''
inspections.plugin.xml.value.exceeds.max.length=Value exceeds maximum length {0}
inspections.plugin.xml.value.must.have.minimum.length=Value must have minimum length of {0}
inspections.plugin.xml.product.descriptor.invalid.date=Date must be in YYYYMMDD format
inspections.plugin.xml.no.plugin.icon.svg.file=<html>Plugin should provide ''{0}'' (<a href="https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_icon_file.html">Documentation</a>)</html>
inspections.plugin.xml.component.interface.class.redundant=Redundant tag 'interfaceClass'
inspections.plugin.xml.service.interface.class.redundant=Redundant attribute 'serviceInterface'
inspections.plugin.xml.duplicated.dependency=Duplicate dependency configuration file ''{0}''

inspections.registration.problems.name=Component type mismatch
inspections.registration.problems.option.check.plugin.xml=Check Plugin Descriptor (plugin.xml)
inspections.registration.problems.option.check.java.actions=Check Java Actions
inspections.registration.problems.option.check.java.code=Check Java Code
inspections.registration.problems.quickfix.read-only=Class ''{0}'' is read-only
inspections.registration.problems.quickfix.create.constructor=Create no-argument constructor

inspections.registration.problems.incompatible.message=According to its registration in plugin.xml, the class should {0} ''{1}''
inspections.registration.problems.abstract=Plugin component class must not be abstract
inspections.registration.problems.missing.noarg.ctor=Action class must have a no-argument constructor

inspections.registration.problems.missing.implementation.class=Missing implementation-class
inspections.registration.problems.cannot.resolve.class=Cannot resolve {0} class
inspections.registration.problems.component.incompatible.interface=Component class is not assignable to its interface-class ''{0}''
inspections.registration.problems.component.duplicate.interface=Multiple components with the same interface-class are not allowed
inspections.registration.problems.action.incompatible.class=Action class must extend ''{0}''

inspections.component.not.registered.name=Component/Action not registered
inspections.component.not.registered.message={0} is not registered in plugin.xml
inspections.component.not.registered.option.check.actions=Check Actions
inspections.component.not.registered.option.ignore.non.public=Ignore non-public classes
inspections.component.not.registered.quickfix.family=Register {0}
inspections.component.not.registered.quickfix.name=Register {0}
inspections.component.not.registered.quickfix.error=Cannot Register {0}

inspections.component.postfix.template.not.found.description.name=Postfix template description checker

inspections.presentation.cannot.resolve.icon=Cannot resolve icon ''{0}''
inspections.plugin.xml.invalid.order.attribute=Invalid 'order' attribute value
invalid.order.attribute.part=Invalid ''order'' attribute value part: ''{0}'', must be ''first'', ''last'', ''before <id>'' or ''after <id>''

inspections.unregistered.named.color=<html>Named color key ''{0}'' is not registered in <code>*.themeMetadata.json</code> (<a href="https://www.jetbrains.org/intellij/sdk/docs/reference_guide/ui_themes/themes_metadata.html">Documentation</a>)</html>

ant.build.jar.comment=Build archive for plugin ''{0}''
ant.build.jar.description=Build plugin archive for module ''{0}''
no.java.sdk.for.idea.sdk.found=No Java SDK of appropriate version found. In addition to the IntelliJ Platform Plugin SDK, you need to define a JDK with the same Java version ({0}).
no.idea.sdk.version.found=Failed to detect JDK version required for IntelliJ Platform Plugin SDK.
error.cannot.resolve.plugin=Cannot resolve plugin {0}
create.description.file=Create description file {0}
create.description.file.family.name=Create description file
select.target.location.of.description=Select Target Location of {0}
implemented.at.runtime.dom=DOM Element implemented at runtime
implemented.at.runtime.jamElement=JAM Element implemented at runtime

line.marker.tooltip.extension.declaration=<a href="#navigation/{0}:{1}">{2}</a> declaration in {3}
line.marker.tooltip.extension.point.declaration=<a href="#navigation/{0}:{1}">{2}</a> EP declaration in {3}
inspections.usage.uelement.as.psi=Usage of UElement as PsiElement is not recommended

inspections.missing.recent.api.common.message=''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}.
inspections.missing.recent.api.class.message=''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}. Note that this type might have had a different fully qualified name in the previous IDEs.
inspections.missing.recent.api.method.message=''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}. Note that this method might have had a different full signature in the previous IDEs.
inspections.missing.recent.api.field.message=''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}. Note that this field might have had a different full signature in the previous IDEs.
inspections.missing.recent.api.default.constructor.message=Default constructor of ''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}.
inspections.missing.recent.api.overriding=Overrides method in ''{0}'' that is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}. Note that the overridden method might have had a different signature in the previous IDEs.

inspection.renamer.dialog.title=Rename Inspection Description File and Change Short Name
inspection.renamer.option.name=Rename inspection description file and change short name
inspection.renamer.dialog.description=<html>Do you want to also rename inspection description file and change short name?<br/><b>Warning: it may break existing inspection profiles and suppression comments.</b></html>
inspection.renamer.entity.name=Element

intellij.api.annotations.update.title=Update IntelliJ API Annotations {0}
intellij.api.annotations.update.confirmation.content=<html>Inspection that verifies API usages of {0} needs to update the external annotations, which will be downloaded from the Maven repository. <br><br>Would you like to update those annotations to have additional IDE assistance during the plugin development?</html>
intellij.api.annotations.update.confirmation.update.button=Update
intellij.api.annotations.update.confirmation.disable.inspection.button=Disable inspection
intellij.api.annotations.update.successfully.updated=IntelliJ API external annotations for {0} have been successfully updated.
intellij.api.annotations.update.successfully.updated.but.not.latest.version=IntelliJ API external annotations for {0} have been updated to version {1}, which is the latest available in the Maven repository. Probably annotations for {0} haven''t been published yet. We will suggest updating the annotations again later.
intellij.api.annotations.update.failed=Failed to update IntelliJ API external annotations: {0}
intellij.api.annotations.update.failed.no.annotations.found=No external annotations found for {0} in the Maven repository.

inspections.plugin.xml.i18n.name=Extract text/description for i18n
inspections.plugin.xml.i18n.inspection.tag.family.name=Extract displayName for i18n
inspections.plugin.xml.i18n.choose.bundle.4inspections.title=Choose Bundle

line.marker.related.property.title=Related Property
line.marker.related.property.description=Related property

action.DevKit.EditThemeEditorColorScheme.text=Edit Editor Color Scheme
action.DevKit.RollbackTheme.text=Stop Theme Preview
action.DevKit.ApplyTheme.text=Preview Theme
action.DevKit.OpenThemeReferenceDocs.text=Open UI Themes Reference Documentation
action.AnalyzeEPUsageIgnoreSafeClasses.text=Analyze EP Usage (Do not Follow Safe Types)
action.AnalyzeEPUsage.text=Analyze EP Usage
action.AnalyzeUnloadablePlugins.text=Analyze Unloadable Plugins
action.DumpCleanTestData.text=Dump Highlighting-Markup-Free Data
action.TestData.Navigate.text=Navigate to Test Data
action.ShowHelpPageById.text=Show Help Page by ID
action.GenerateDomModel.text=Generate DOM Model...
action.ShowSerializedXml.text=Show Serialized XML for Class
action.ShuffleNamesAction.text=Shuffle/Scramble/Anonymize/Permute Names
action.ToggleHighlightingMarkup.text=Toggle Expected Highlighting Markup
group.Internal.DevKit.text=DevKit
action.GenerateExternalization.text=Generate Externalization
action.DevKit.NewTheme.text=Theme
action.NewModuleService.text=Module Service
action.NewModuleService.description=Create new module service
action.NewProjectService.text=Project Service
action.NewProjectService.description=Create new project service
action.NewApplicationService.text=Application Service
action.NewApplicationService.description=Create new application service
action.NewAction.text=Action
action.NewAction.description=Create new action
group.DevkitNewActions.text=Plugin DevKit
action.Anonymous.text.choose.color=Choose Color...
inspection.serializable.constructor.message=Non-default ctor should be annotated with @PropertyMapping