#module type
module.title=IntelliJ Platform Plugin
module.description=Plugin modules are used for developing plugins for <b>IntelliJ Platform</b>-based IDEs.<br>\
  They provide <b>IntelliJ Platform Plugin SDK</b> and <b>Run Configuration</b> for running and debugging plugins inside an IDE.
plugin.descriptor=IntelliJ Platform Plugin Descriptor

module.builder.title=IDE Plugin
module.builder.type=Type:
module.builder.type.theme=Theme
module.builder.type.plugin=Plugin
module.builder.how.to.link=How to build a plugin for IntelliJ-based IDEs
module.builder.github.template.link=Fully-featured GitHub template
module.builder.scala.github.template.link=How to develop plugins with Scala and SBT

file.templates=Templates
file.templates.new.plugin=New Plugin

#Gradle wizard
module.wizard.gradle.plugin.xml.template.display.name=plugin.xml in Gradle-based projects

module.wizard.devkit.simple.plugin.label=<html>This project type is recommended for simple plugins, such as a custom UI theme.<br> \
  For more complex plugins, a Gradle-based project is <a href="https://plugins.jetbrains.com/docs/intellij/developing-plugins.html?from=DevkitPluginModuleWizard">recommended</a>.

group.PluginDeployActions.text=Plugin Deployment Actions

#Module Editor - Deployment
deployment.title=Plugin Deployment
deployment.cleanup=Clean Up {0} Directory
deployment.directory.location=Select {0} Directory Location
deployment.view.select=Select {0}
manifest.settings=Manifest Settings
manifest.selection=Selected {0} will be included in resulting distribution
manifest.use.user.defined=Use user manifest:
deployment.view.delete=Delete {0}?
deployment.view.meta-inf.label=Path to {0}
suggest.to.delete=Do you want to delete ''{0}''?
vm.parameters=&VM Options
program.parameters=&Program Arguments

#Prepare for deployment action
action.MakeJarAction.text=Prepare To Deploy
action.MakeAllJarsAction.text=Prepare All Plugins To Deploy
select.plugin.modules.title=Select Modules
select.plugin.modules.description=Select modules to be prepared for deployment
prepare.for.deployment.task=Prepare plugin module ''{0}'' for deployment
prepare.for.deployment.task.progress=Preparing for deployment
prepare.for.deployment=Prepare Plugin Module ''{0}'' For Deployment
prepare.for.deployment.all=Prepare All Plugin Modules For Deployment
saved.message.common={0} will be saved in selected directory
saved.message= {0, choice, 1#Zip|2#JAR} for module ''{1}'' was saved to {2}
success.deployment.message=Plugin module ''{0}'' successfully prepared for deployment
success.deployment.message.all=All plugins successfully prepared for deployment

##Idea Sdk
sdk.title=IntelliJ Platform Plugin SDK
sdk.select.java.sdk=Select Java SDK to be used for IntelliJ Platform Plugin SDK
sdk.select.java.sdk.label=Internal Java Platform:
sdk.select.java.sdk.title=Select Internal Java Platform
sdk.no.java.sdk.for.idea.sdk.found=No Java SDK of appropriate version found. In addition to the IntelliJ Platform Plugin SDK, you need to define a JDK with the same Java version ({0}).
sdk.no.idea.sdk.version.found=Failed to detect JDK version required for IntelliJ Platform Plugin SDK.
sdk.no.java.sdk.for.idea.sdk.found.title=No Java SDK Found
sdk.from.sources.scanning.roots=Scanning for Roots

sandbox.specification=Please configure the sandbox
sandbox.home=Sandbox Home
sandbox.home.label=Sandbox Home:
sandbox.no.configured=No sandbox specified for IntelliJ Platform Plugin SDK
sandbox.no.sdk=Please configure SDK
sandbox.purpose=Browse folder to put config, system and plugins for target IDE

#errors
error.occurred=Error Occurred
sdk.no.specified=No SDK specified for plugin module ''{0}''
sdk.type.incorrect=Wrong SDK type for plugin module ''{0}''.
sdk.type.incorrect.common=Wrong SDK type for plugin module
error.file.not.found=File not Found
error.file.not.found.message=File ''{0}'' not found
error.no.plugin.xml=No plugin.xml file found
error.plugin.xml.readonly=Read-only plugin.xml file cannot be processed: {0}
error.plugin.xml.tag.invalid=<Invalid>

#run configurations
run.configuration.no.module.specified=No plugin module specified for configuration
run.configuration.title=Plugin
run.configuration.type.description=Plugin Sandbox Environment

#Test Data
testdata.create.dialog.title=Create Testdata File
testdata.file.doesn.not.exist=<html>The referenced testdata file {0} does not exist. Would you like to create it?</html>
testdata.create.missing.files=Create Missing Files
testdata.confirm.create.missing.files.dialog.message=The following testdata files will be created:\n{0}
testdata.searching=Searching for testdata files
testdata.goto.test.data.action.text=Go to {0}
testdata.notification.no.test.datafiles.title=Found no test data files
testdata.notification.no.test.datafiles.content=Cannot find test data files for class
testdata.progress.text.searching.for.test.data.files=Searching for ''{0}'' test data files\u2026

#Misc
info.message=Info
new.action.id=&Action ID:
new.action.description=&Description:
new.action.class.name=&Class Name:
new.action.text=&Name:
new.action.add.to.group=Add to Group
new.action.group.actions=Act&ions:
new.action.group.anchor=Anchor:
new.action.group.anchor.first=&First
new.action.group.anchor.=&Last
new.action.group.anchor.before=&Before
new.action.group.anchor.after=Af&ter
new.action.group.groups=&Groups:
new.action.keyboard.shortcuts=Keyboard Shortcuts
new.action.keyboard.first=First:
new.action.keyboard.second=Second:
new.action.keyboard.clear=X
new.action.keyboard.clear.tooltip=Clear shortcut
new.action.invalid.id=Action ID must not be empty
new.action.invalid.class.name=Action Class Name is not a valid Java qualified name
new.action.invalid.name=Action Name must not be empty
new.action.cannot.create.class=Cannot create action class

command.implement.externalizable=Implement Externalizable

new.menu.action.text=Action
new.action.error=Cannot Create Action
new.action.action.name=Creating New Action: {0}.{1}
new.action.dialog.title=New Action

action.DevKit.NewMessageBundle.action.name.create.new.message.bundle=Create New Message Bundle ''{0}''
action.DevKit.NewMessageBundle.error.title.cannot.create.new.message.bundle=Cannot Create New Message Bundle
action.DevKit.NewMessageBundle.text=Message Bundle
action.DevKit.NewMessageBundle.description=Creates a new message bundle class and corresponding properties file
action.DevKit.NewMessageBundle.title.create.new.message.bundle=Create New Message Bundle
action.DevKit.NewMessageBundle.label.bundle.name=Bundle name:
action.DevKit.NewMessageBundle.error.message.multiple.content.roots.for.module=multiple content roots for {0}
action.DevKit.NewMessageBundle.error.message.under.sources.root={0} is under sources roots
action.DevKit.NewMessageBundle.error.message.folder.already.exists=''{0}'' folder already exists under {1}
action.DevKit.NewMessageBundle.error.message.do.not.put.bundle.to.impl.module=Currently it's not recommended to create a separate bundle for .impl module, use the bundle from the corresponding API module instead
action.DevKit.NewMessageBundle.notification.title.cannot.create.resources.root.for.properties.file=Cannot create new message bundle
action.DevKit.NewMessageBundle.notification.content.cannot.create.resources.root.for.properties.file=Cannot create resources root for properties file: {0}

new.menu.application.component.text=Application Component
new.menu.module.component.text=Module Component
new.menu.project.component.text=Project Component

select.plugin.module.to.patch=Select Plugin Module to Patch

structure.sort.alphabetically.in.groups=Sort Alphabetically in Groups
structure.sort.alphabetically.in.groups.description=Sort alphabetically in groups

inspections.group.name=Plugin DevKit
inspections.group.descriptor=Plugin descriptor
inspections.group.description.file=Description file
inspections.group.code=Code
inspections.group.path=Plugin DevKit
inspections.plugin.xml.inner.class.must.be.separated.with.dollar=Inner class must be separated with '$'
inspections.plugin.xml.plugin.should.have.jetbrains.vendor=Plugin developed as a part of IntelliJ IDEA project should specify 'JetBrains' as its vendor
inspections.plugin.xml.plugin.jetbrains.vendor.no.url=Plugin developed as a part of IntelliJ IDEA project shouldn''t specify ''{0}'' as url
inspections.plugin.xml.plugin.jetbrains.vendor.no.email=Plugin developed as a part of IntelliJ IDEA project shouldn't specify email
inspections.plugin.xml.plugin.jetbrains.no.version=Plugin developed as a part of IntelliJ IDEA project shouldn't specify version
inspections.plugin.xml.plugin.jetbrains.no.idea.version=Plugin developed as a part of IntelliJ IDEA project shouldn't specify idea-version as it is generated by build scripts automatically
inspections.plugin.xml.plugin.jetbrains.no.change.notes=Plugin developed as a part of IntelliJ IDEA project shouldn't specify change-notes
inspections.plugin.xml.plugin.jetbrains.no.generic.plugin.url=Plugin developed as a part of IntelliJ IDEA project shouldn't specify generic plugin url
inspections.plugin.xml.ep.qualifiedName.superfluous=Unnecessary declaration via 'qualifiedName'
inspections.plugin.xml.ep.qualifiedName.superfluous.fix=Declare via 'name'
inspections.plugin.xml.ep.doesnt.have.with='<extensionPoint>' does not have '<with>' tags to specify the types of class fields
inspections.plugin.xml.ep.both.beanClass.and.interface='<extensionPoint>' must not specify both 'interface' and 'beanClass' attributes
inspections.plugin.xml.ep.missing.beanClass.and.interface='<extensionPoint>' must specify either 'interface' or 'beanClass' attribute
inspections.plugin.xml.ep.both.name.and.qualifiedName='<extensionPoint>' must not specify both 'name' and 'qualifiedName' attributes
inspections.plugin.xml.ep.missing.name.and.qualifiedName='<extensionPoint>' must specify either 'name' or 'qualifiedName' attribute
inspections.plugin.xml.synonym.missing.key.and.text='<synonym>' must specify either 'key' or 'text' attribute
inspections.plugin.xml.synonym.both.key.and.text='<synonym>' must not specify both 'key' or 'text' attributes
inspections.plugin.xml.use.defaultExtensionNs=Use defaultExtensionNs instead
inspections.plugin.xml.specify.defaultExtensionNs.explicitly=Specify defaultExtensionNs="{0}" explicitly
inspections.plugin.xml.invalid.build.number=<html>Invalid build number ''{0}'' (<a href="https://plugins.jetbrains.com/docs/intellij/build-number-ranges.html?from=DevkitPluginXmlInspection">Documentation</a>)</html>
inspections.plugin.xml.until.build.use.asterisk.instead.of.big.number=Don''t use ''{0}'' in ''until-build'', use ''*'' instead
inspections.plugin.xml.until.build.misleading.plain.number=Plain numbers in ''until-build'' attribute may be misleading. ''{0}'' means the same as ''{0}.0'', so the plugin won''t be compatible with {0}.* builds. It''s better to specify ''{1}'' instead.
inspections.plugin.xml.until.build.must.be.greater.than.since.build="until-build" must be greater than "since-build"
inspections.plugin.xml.dependency.superfluous.optional=Superfluous declaration
inspections.plugin.xml.dependency.specify.config.file=Must specify 'config-file'
inspections.plugin.xml.deprecated.ep=Deprecated extension point ''{0}''
inspections.plugin.xml.deprecated.ep.use.replacement=Deprecated extension point ''{0}'', use ''{1}'' instead
inspections.plugin.xml.deprecated.ep.marked.for.removal=Marked for removal extension point ''{0}''
inspections.plugin.xml.deprecated.ep.marked.for.removal.in.version=Marked for removal extension point ''{0}'' in version ''{1}''
inspections.plugin.xml.no.need.to.specify.itnReporter=Exceptions from plugins developed by JetBrains are reported via ITNReporter automatically, there is no need to specify it explicitly
inspections.plugin.xml.third.party.plugins.must.not.use.itnReporter='com.intellij.diagnostic.ITNReporter' reports errors for internal processing at JetBrains, it should not be used for third-party plugins
inspections.plugin.xml.deprecated.attribute=Deprecated attribute ''{0}''
inspections.plugin.xml.marked.for.removal.attribute=Marked for removal attribute ''{0}''
inspections.plugin.xml.deprecated.helpset=Helpset is not used anymore, use 'com.intellij.openapi.help.WebHelpProvider' instead
inspections.plugin.xml.attribute.not.used.anymore=Attribute ''{0}'' not used anymore
inspections.plugin.xml.anchor.must.have.relative-to-action='anchor' must be specified with 'relative-to-action'
inspections.plugin.xml.must.use.after.before.with.relative-to-action=Must use ''{0}''|''{1}'' with ''relative-to-action''
inspections.plugin.xml.skipForDefaultProject.deprecated='skipForDefaultProject' is deprecated; project components are not loaded in the default project by default
inspections.plugin.xml.invalid.ep.name.description=Invalid extension point {0} ''{1}'', must contain only latin characters, digits and dots, must not start/end with dot, each fragment must start with lowercase character, last fragment words must not repeat any previous fragment
inspections.plugin.xml.invalid.ep.name=name
inspections.plugin.xml.invalid.ep.qualifiedName=qualified name
inspections.plugin.xml.ignore.classes.title=Registration check ignore class list:
inspections.plugin.xml.add.ignored.class.title=Specify Class to Ignore
inspections.plugin.xml.plugin.modules.label=Modules of multi-module plugins:
inspections.plugin.xml.plugin.modules.description=Each line is a comma-separated list of module names included in a single plugin.
inspections.plugin.xml.version.must.be.specified='<version>' must be specified
inspections.plugin.xml.vendor.must.be.specified='<vendor>' must be specified
inspections.plugin.xml.do.not.use.template.text=Do not use template text ''{0}''
inspections.plugin.xml.must.not.contain.template.text=Must not contain template text ''{0}''
inspections.plugin.xml.value.exceeds.max.length=Value exceeds maximum length {0}
inspections.plugin.xml.value.must.have.minimum.length=Value must have minimum length of {0}
inspections.plugin.xml.product.descriptor.invalid.date=Date must be a YYYYMMDD integer, or a placeholder (e.g. __DATE__)
inspections.plugin.xml.product.descriptor.invalid.version=Version must be an integer, or a placeholder (e.g. __VERSION__)
inspections.plugin.xml.no.plugin.icon.svg.file=<html>Plugin should provide ''{0}'' (<a href="https://plugins.jetbrains.com/docs/intellij/plugin-icon-file.html?from=DevkitPluginXmlInspection">Documentation</a>)</html>
inspections.plugin.xml.component.interface.class.redundant=Redundant tag 'interface-class'
inspections.plugin.xml.service.interface.class.redundant=Redundant attribute 'serviceInterface'
inspections.plugin.xml.duplicated.dependency=Duplicate dependency configuration file ''{0}''
inspections.plugin.xml.ComponentModuleRegistrationChecker.element.registered.wrong.module=Element should be registered in ''{0}'' module where its class ''{1}'' is defined
inspections.plugin.xml.ComponentModuleRegistrationChecker.fix.move.registration.name=Move registration to {0}
inspections.plugin.xml.ComponentModuleRegistrationChecker.fix.move.registration.family.name=Move registration to correct module
inspections.plugin.xml.fix.extension.point.add.with.tag=Add <with> tag
inspections.plugin.xml.listener.does.not.inherit=''{0}'' does not inherit from ''{1}''
inspections.plugin.xml.since.build.could.not.locate.main.descriptor=Could not locate main plugin.xml file to determine required <idea-version> 'since-build'
inspections.plugin.xml.since.build.must.be.specified=Must specify <idea-version> 'since-build'
inspections.plugin.xml.since.build.could.not.determine.platform.version=Could not determine target platform version, please check project setup
inspections.plugin.xml.since.build.listeners.os.attribute=Attribute ''os'' available in platform version {0} or later only, but specified ''since-build'' platform is ''{1}''
inspections.plugin.xml.since.build.listeners.not.available=Feature available in platform version {0} or later only, but specified ''since-build'' platform is ''{1}''
inspections.plugin.xml.action.group.id.required='id' should be specified
inspections.plugin.xml.action.class.required.with.use.shortcut.of='class' must be specified with 'use-shortcut-of'
inspections.plugin.xml.action.must.override.method.with.use.shortcut.of=Must override {0} with ''use-shortcut-of''
inspections.plugin.xml.jetbrains.only.api=Usage of API reserved for JetBrains internal use
inspections.plugin.xml.usage.of.experimental.api=Usage of API marked with @{0}. Such API may be changed or removed in future IDE versions causing compatibility problems.
inspections.plugin.xml.usage.of.internal.api=Usage of API marked with @{0}. Such API should not be used outside of IntelliJ IDEA project.
inspections.plugin.xml.usage.of.obsolete.api=Usage of API marked with @{0}. Such API should not be used in new code.
inspections.plugin.xml.vendor.specify.jetbrains=Specify JetBrains as vendor
inspections.plugin.xml.change.until.build.name=Change ''until-build'' to ''{0}''
inspections.plugin.xml.change.until.build.family.name=Correct 'until-build' attribute
inspections.plugin.xml.deprecated=Deprecated
inspections.plugin.xml.add.version.tag=Add <version>
inspections.plugin.xml.add.vendor.tag=Add <vendor>
inspections.plugin.xml.module.descriptor.at.least.one.dependency=At least one <module> entry must be defined
inspections.plugin.xml.dependency.descriptor.at.least.one.dependency=At least one <module> or <plugin> dependency must be defined
inspections.plugin.xml.dependency.class.located.in.wrong.package=Class ''{0}'' must be located in package ''{1}''
inspections.plugin.xml.dependency.descriptor.cannot.use.depends=Cannot use <depends> in addition to <dependencies>

inspections.registration.problems.name=Component type mismatch
inspections.registration.problems.quickfix.read-only=Class ''{0}'' is read-only
inspections.registration.problems.quickfix.create.constructor=Create no-argument constructor

inspections.registration.problems.incompatible.message=According to its registration in plugin.xml, the class should extend ''{0}''
inspections.registration.problems.abstract=Plugin component class must not be abstract
inspections.registration.problems.missing.noarg.ctor=Action class must have a no-argument constructor

inspections.registration.problems.component.incompatible.interface=Component class is not assignable to its interface-class ''{0}''
inspections.registration.problems.component.duplicate.interface=Multiple components with the same 'interface-class' are not allowed

inspections.component.not.registered.name=Component/Action not registered
inspections.component.not.registered.message={0} is not registered in plugin.xml
inspections.component.not.registered.option.check.actions=Check Actions
inspections.component.not.registered.option.ignore.non.public=Ignore non-public classes
inspections.component.not.registered.quickfix.family=Register {0}
inspections.component.not.registered.quickfix.name=Register {0}
inspections.component.not.registered.quickfix.error=Cannot Register {0}
inspections.statistics.collector.not.registered.name=Statistics collector not registered
inspections.statistics.collector.not.registered.message=Statistics collector is not registered in plugin.xml

inspections.component.postfix.template.not.found.description.name=Postfix template description checker

inspections.presentation.cannot.resolve.icon=Cannot resolve icon ''{0}''
inspections.plugin.xml.invalid.order.attribute=Invalid 'order' attribute value
invalid.order.attribute.part=Invalid ''order'' attribute value part: ''{0}'', must be ''first'', ''last'', ''before <id>'' or ''after <id>''

inspections.inspection.description.optional.short.name=Inspection does not have a description{0}

inspections.inspection.mapping.consistency.specify.bundle=Bundle should be specified
inspections.inspection.mapping.consistency.specify.displayName.or.key=displayName or key should be specified
inspections.inspection.mapping.consistency.specify.groupName.or.groupKey=groupName or groupKey should be specified

inspections.intention.description.not.found=Intention does not have a description
inspections.intention.description.no.before.after.template=Intention must have 'before.*.template' and 'after.*.template' beside 'description.html'

inspections.postfix.description.not.found=Postfix template does not have a description
inspections.postfix.description.no.before.after.template=Postfix template must have 'before.*.template' and 'after.*.template' beside 'description.html'

inspections.quick.fix.family.name=QuickFix's getFamilyName() implementation must not depend on a specific context

inspections.unspecified.actions.place.toolbar=Unspecified place for action toolbar
inspections.unspecified.actions.place.popup.menu=Unspecified place for action popup menu

inspections.psi.element.concat.psi.element=Suspicious conversion of PsiElement to string
inspections.psi.element.concat.psi.type=Suspicious conversion of PsiType to string
inspections.psi.element.concat.add.get.text.family.name=Call text representation retrieval method
inspections.psi.element.concat.add.get.text.name=Use ''{0}'' call


inspections.plugin.xml.dynamic.plugin.component.usage=Non-dynamic plugin due to using components.
inspections.plugin.xml.dynamic.plugin.component.usage.docs.link.title=Migration Guide
inspections.plugin.xml.dynamic.plugin.option.highlight.usages.ep=Highlight usage of non-dynamic extension points
inspections.plugin.xml.dynamic.plugin.extension.point=Non-dynamic extension point ''{0}''
inspections.plugin.xml.dynamic.plugin.explicit.non.dynamic.extension.point=Explicit non-dynamic extension point ''{0}''
inspections.plugin.xml.dynamic.plugin.id.required.for.group='id' must be specified for <group>
inspections.plugin.xml.dynamic.plugin.usage.of.non.dynamic.extension.point=Usage of non-dynamic extension point ''{0}''
inspections.plugin.xml.dynamic.plugin.analyze.extension.point={0} for ''{1}''

inspections.stateful.extension.point.leak.psi.element=Potential memory leak: don't hold PsiElement, use SmartPsiElementPointer instead
inspections.stateful.extension.point.leak.psi.element.quick.fix=See also LocalQuickFixOnPsiElement.
inspections.stateful.extension.point.do.not.use.in.quick.fix=Do not use {0} as a field in quick-fix
inspections.stateful.extension.point.do.not.use.in.extension=Do not use {0} as a field in extension

inspections.file.equals.method=Do not use File.equals/hashCode/compareTo as they don't honor case-sensitivity on macOS. Use FileUtil.filesEquals/fileHashCode/compareFiles instead.

inspections.undesirable.class.use.instead=Please use ''{0}'' instead

inspections.unsafe.vfs.recursion='VirtualFile.getChildren()' called from a recursive method

inspections.use.couple.of=Replace with 'Couple.of()'
inspections.use.couple.type=Replace with ''Couple<{0}>''
inspections.use.couple.family.name=Replace 'Pair' with 'Couple'

inspections.use.equals.description=''{0}'' instances should be compared for equality, not identity
inspections.use.equals.fix.replace.equality.with.equals.family.name=Replace equal operator with 'equals()'
inspections.use.equals.fix.replace.equality.with.equals.name=Replace ''{0}'' with ''equals()''
inspections.use.equals.fix.replace.equality.with.not.equals.name=Replace ''{0}'' with ''!equals()''

inspections.unsafe.return.insert.family.name=Skip anonymous/local classes
inspections.unsafe.return.insert.visit.lambda.expression=Insert visitLambdaExpression method
inspections.unsafe.return.insert.visit.class.method=Insert visitClass method
inspections.unsafe.return.insert.visit.lambda.expression.and.class.methods=Insert visitLambdaExpression/visitClass methods
inspections.unsafe.return.message=Recursive visitors with 'visitReturnStatement' most probably should specifically process anonymous/local classes ('visitClass') and lambda expressions ('visitLambdaExpression')

inspections.awt.color.used='java.awt.Color' used instead of 'JBColor'
inspections.awt.color.used.fix.use.jb.color.constant.family.name=Convert to 'JBColor' constant
inspections.awt.color.used.fix.use.jb.color.fix.family.name=Convert to 'JBColor'

error.cannot.resolve.plugin=Cannot resolve plugin ''{0}'' in dependencies
error.cannot.resolve.plugin.reference.link.title=(Reference: Plugin Dependencies)
error.cannot.resolve.extension.point=Cannot resolve extension point ''{0}'' in dependencies
error.cannot.resolve.extension.point.missing.dependency=Missing dependency declaration for using extension point ''{0}''
error.cannot.resolve.extension.point.missing.dependency.fix.family.name=Add missing <depends>

create.description.file=Create description file {0}
create.description.file.family.name=Create description file
select.target.location.of.description=Select Target Location of {0}
implemented.at.runtime.dom=DOM Element implemented at runtime

inspections.usage.uelement.as.psi=Usage of UElement as PsiElement is not recommended

inspections.missing.recent.api.common.message=''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}.
inspections.missing.recent.api.class.message=''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}. Note that this type might have had a different fully qualified name in the previous IDEs.
inspections.missing.recent.api.method.message=''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}. Note that this method might have had a different full signature in the previous IDEs.
inspections.missing.recent.api.field.message=''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}. Note that this field might have had a different full signature in the previous IDEs.
inspections.missing.recent.api.default.constructor.message=Default constructor of ''{0}'' is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}.
inspections.missing.recent.api.overriding=Overrides method in ''{0}'' that is available only since {1} but the module is targeted for {2}. It may lead to compatibility problems with IDEs prior to {1}. Note that the overridden method might have had a different signature in the previous IDEs.
inspections.missing.recent.api.since.until.range.all.builds=all builds
inspections.missing.recent.api.settings.range=Plugin compatibility range
inspections.missing.recent.api.settings.since=Since
inspections.missing.recent.api.settings.until=Until
inspections.missing.recent.api.settings.invalid.build.number=Invalid build number: {0}

inspection.renamer.dialog.title=Rename Inspection Description File and Change Short Name
inspection.renamer.option.name=Rename inspection description file and change short name
inspection.renamer.dialog.description=<html>Do you want to also rename inspection description file and change short name?<br/><b>Warning: it may break existing inspection profiles and suppression comments.</b></html>
inspection.renamer.entity.name=Element

intellij.api.annotations.update.task.title=Updating IntelliJ API Annotations {0}

inspections.leakable.map.key.name=Map key may leak
inspections.leakable.map.key.text=Consider using ''String'' instead of ''{0}'' as the map key
inspections.leakable.map.key.quick.fix.name=Parameterize with ''{0}''

inspections.unresolved.plugin.config.reference=Unresolved plugin configuration reference

inspections.use.gray.awt.color.used.name='java.awt.Color' used for gray
inspections.use.gray.fix.convert.name=Convert to ''Gray._{0}''
inspections.use.gray.fix.convert.family.name=Convert to 'Gray'

line.marker.related.property.tooltip=Related property
line.marker.related.property.popup.title=Related Properties
line.marker.related.property.description=Related property

action.AnalyzeEPUsageIgnoreSafeClasses.text=Analyze Extension Point Usage (Do not Follow Safe Types)
action.AnalyzeEPUsage.text=Analyze Extension Point Usage

action.AnalyzeUnloadablePlugins.text=Analyze Unloadable Plugins
action.AnalyzeUnloadablePlugins.progress.title=Analyzing Plugins ({0})

action.DumpCleanTestData.text=Dump Highlighting-Markup-Free Data
action.DumpCleanTestData.file.chooser.title=Choose Directory
action.DumpCleanTestData.file.chooser.source.description=Directory containing highlighting test data
action.DumpCleanTestData.file.chooser.destination.description=Directory where highlighting-markup-free copies would be placed
action.DumpCleanTestData.error.source.destination.must.differ=Source and destination roots should differ

action.ShowHelpPageById.text=Show Help Page by ID
action.ShowHelpPageById.dialog.enter.help.id=Enter Help ID:
action.ShowHelpPageById.dialog.title=Show Help Page


action.ShowSerializedXml.text=Show Serialized XML for Class
action.ShowSerializedXml.message.caret.must.be.at.class.identifier=Caret should be positioned at the name of the class
action.ShowSerializedXml.message.cannot.find.class=Cannot find class ''{0}''
action.ShowSerializedXml.message.cannot.generate.class=Cannot generate class ''{0}'': {1}
action.ShowSerializedXml.dialog.title=Serialized XML for ''{0}''

action.ShuffleNamesAction.text=Shuffle/Scramble/Anonymize/Permute Names
action.ToggleHighlightingMarkup.text=Toggle Expected Highlighting Markup
group.Internal.DevKit.text=DevKit
action.GenerateExternalization.text=Generate Externalization
action.NewAction.text=Action
action.NewAction.description=Create new action
group.DevkitNewActions.text=Plugin DevKit
inspection.serializable.constructor.message=Non-default constructor should be annotated with @PropertyMapping

action.TestData.Navigate.text=Navigate to Test Data
testdata.popup.navigation.title=Test Data
testdata.related.navigation.group=Test Data
testdata.related.navigation.title=Test data

# UpdateFromSources
action.UpdateIdeFromSourcesAction.update.show.settings.text=Update IDE from Sources Settings\u2026
action.UpdateIdeFromSourcesAction.update.text=Update IDE from Sources\u2026
action.UpdateIdeFromSourcesAction.update.description=Builds an installation of IntelliJ IDEA from the currently opened sources and replace the current installation by it.
action.UpdateIdeFromSourcesAction.task.title=Updating from Sources
action.UpdateIdeFromSourcesAction.task.failed.title=Update from sources failed
action.UpdateIdeFromSourcesAction.task.failed.content=Build script finished with error code {0}
action.UpdateIdeFromSourcesAction.notification.title=Update from Sources
action.UpdateIdeFromSourcesAction.notification.content=New installation is prepared at {0}.
action.UpdateIdeFromSourcesAction.settings.title=Update IDE from Sources
action.UpdateIdeFromSourcesAction.settings.ok.button=Update
action.UpdateIdeFromSourcesAction.settings.do.not.show.description=You can invoke 'Update IDE from Sources Settings' action to change settings
action.UpdateIdeFromSourcesAction.settings.row.ide.installation=IDE installation:
action.UpdateIdeFromSourcesAction.settings.installation.choose.ide.directory.title=Choose IDE Installation Directory
action.UpdateIdeFromSourcesAction.settings.enabled.plugins.only=Build enabled plugins only
action.UpdateIdeFromSourcesAction.settings.restart.automatically=Restart automatically
action.UpdateIdeFromSourcesAction.error.work.home.not.valid.ide.home={0} is not a valid IDE home: {1}
action.UpdateIdeFromSourcesAction.error.config.or.system.directory.under.home=Cannot update {0} installation because ''{1}'' property points\nto a directory located under it and it''ll be cleared during update.
action.UpdateIdeFromSourcesAction.error.work.home.not.valid.ide.home.not.directory=it is not a directory
action.UpdateIdeFromSourcesAction.error.work.home.not.valid.ide.home.not.exists=''{0}'' does not exist
action.UpdateIdeFromSourcesAction.error.ide.cannot.restart=This IDE cannot restart itself so updating from sources isn't supported
action.UpdateIdeFromSourcesAction.backup.progress.text=Backing up files
action.UpdateIdeFromSourcesAction.copy.progress.text=Copying files to IDE distribution\u2026
action.UpdateIdeFromSourcesAction.copy.delete.old.files.text=Deleting old files
action.UpdateIdeFromSourcesAction.copy.copy.new.files.text=Copying new files
action.UpdateIdeFromSourcesAction.update.progress.text=Updating IDE from sources\u2026
action.UpdateIdeFromSourcesAction.update.progress.delete=Deleting {0}
action.UpdateIdeFromSourcesAction.update.progress.start.script=Starting {0} script
action.UpdateIdeFromSourcesAction.notification.action.view.output=View output
action.UpdateIdeFromSourcesAction.notification.action.view.debug.log=View debug log
action.UpdateIdeFromSourcesAction.dialog.message.directory.not.writable=Directory {0} is not writable

inspections.IncorrectParentDisposableInspection.do.not.use.as.disposable=Don''t use {0} as disposable in plugin code
inspections.IncorrectParentDisposableInspection.documentation.link.title=Choosing a Disposable Parent

extension.point.documentation.link.platform.explorer=Show Usages in IntelliJ Platform Explorer
extension.point.documentation.field.required.suffix=(required)
extension.point.documentation.field.required.can.be.empty.suffix=(required, empty allowed)
extension.point.documentation.implementation.section=Extension Point Implementation

gutter.related.option.description=Description
gutter.related.option.before.after.templates=Before/After templates
gutter.related.option.name=Description / Before|After templates
gutter.related.navigation.popup.template.title=Select Template
gutter.related.navigation.popup.template.tooltip=Before/After Templates
gutter.related.extension.declaration=Declaration
gutter.related.navigation.popup.description.tooltip=Description
gutter.related.navigation.choose.extension=Choose Extension
gutter.related.navigation.choose.extension.point=Choose Extension Point
gutter.related.navigation.choose.listener=Choose Listener
gutter.related.navigation.choose.action=Choose Action
gutter.related.navigation.choose.action.group=Choose Action Group
gutter.related.navigation.choose.component=Choose Component

# plugin.xml resolving
plugin.xml.convert.action.or.group.cannot.resolve=Cannot resolve {0} ''{1}''
plugin.xml.convert.action.or.group.invalid.name=<invalid name>
plugin.xml.convert.action.or.group.type.action.or.group=action or group
plugin.xml.convert.action.or.group.type.action=action
plugin.xml.convert.action.or.group.type.group=group

plugin.xml.convert.enum.cannot.resolve=Cannot resolve ''{0}'' in {1}
plugin.xml.convert.extension.order.cannot.resolve=Cannot resolve '''''{'0'}''''' {0}extension
plugin.xml.convert.extension.property.cannot.resolve=Cannot resolve extension point property ''{0}''
plugin.xml.convert.property.bundle.cannot.resolve=Cannot resolve property bundle
plugin.xml.convert.keymap.cannot.resolve=Cannot resolve keymap ''{0}''
plugin.xml.convert.language.id.cannot.resolve=Cannot resolve language with id ''''{0}''''
plugin.xml.convert.language.id.any.language.display.name=<any language>

plugin.xml.convert.module.descriptor.name=Cannot resolve module descriptor ''{0}'' in source roots of module ''{1}''

# code resolving
code.convert.experimental.feature.id.cannot.resolve=Cannot resolve feature ''{0}''
code.convert.experimental.feature.no.description=No Description
code.convert.registry.key.cannot.resolve=Cannot resolve registry key ''{0}''
code.convert.registry.key.no.description=No Description
code.convert.registry.key.no.default.value=No Default

code.convert.notification.group.cannot.resolve=Cannot resolve notification group id ''{0}''

message.bundle.convert.toolwindow.id.cannot.resolve=Cannot resolve toolwindow ID ''{0}''

message.bundle.convert.advanced.setting.id.cannot.resolve=Cannot resolve advanced setting ID ''{0}''

code.convert.extension.point.declaration=Cannot resolve extension point ''{0}''

plugin.xml.scopes.display.name=Plugin Descriptor Files
plugin.xml.scopes.production.display.name=All production plugin descriptor files

# registry.properties
registry.properties.annotator.plugin.keys.use.ep=Plugin specific keys should be registered via 'com.intellij.registryKey' extension point
registry.properties.annotator.key.no.description.key=Key ''{0}'' does not have description key
registry.properties.annotator.show.ep.family.name=Show extension point declaration
registry.properties.annotator.show.ep.name=Show extension point declaration for ''{0}''
registry.properties.annotator.show.ep.message=Copy this declaration into your plugin descriptor XML
registry.properties.annotator.show.ep.title=Extension Point Declaration
registry.properties.annotator.add.description.text=Add description key for ''{0}''
registry.properties.annotator.add.description.family.name=Add description key

inspections.use.dpi.aware.empty.border.can.be.simplified=Empty border creation can be simplified
inspections.use.dpi.aware.empty.border.not.dpi.aware='EmptyBorder' is not DPI-aware
inspections.use.dpi.aware.empty.border.simplify.fix.name=Simplify
inspections.use.dpi.aware.empty.border.convert.fix.name=Convert to 'JBUI.Borders.empty(...)'

inspections.use.dpi.aware.insets.can.be.simplified=Insets creation can be simplified
inspections.use.dpi.aware.insets.not.dpi.aware='Insets' is not DPI-aware
inspections.use.dpi.aware.insets.simplify.fix.name=Simplify
inspections.use.dpi.aware.insets.convert.fix.name=Convert to 'JBUI.insets(...)'

plugin.descriptor.chooser.cannot.find=Cannot find plugin descriptor
plugin.descriptor.chooser.popup.title=Choose Plugin Descriptor

register.extension.fix.name=Register extension
register.extension.fix.popup.title=Choose Extension Point
register.inspection.fix.family.name=Register inspection
register.inspection.fix.name=Register inspection ''{0}''

inspections.non.default.warning.type.service=Service
inspections.non.default.warning.type.extension=Extension
inspections.non.default.warning.and.suffix.message={0} should not have constructor with parameters {1}
inspections.non.default.warning.suffix.project.or.module=(except Project or Module if requested on corresponding level)
inspections.non.default.warning.suffix.project=(except Project)
inspections.non.default.warning.suffix.module=(except Module)

extension.point.analyzer.not.extension.point.name=Not an ExtensionPointName reference
extension.point.analyzer.analyze.title=Analyzing extension point usages
extension.point.analyzer.analyze.status.bar.info=Analyzing ''{0}'' (total: {1})
extension.point.analyzer.analyze.no.usages=No usages found
extension.point.analyzer.analyze.usage.all.safe=All usages are dynamic-safe
extension.point.analyzer.analyze.xml.not.extension.point=Not an <extensionPoint>
extension.point.analyzer.analyze.xml.cannot.resolve.ep.class=Can't resolve class for extension point
extension.point.analyzer.analyze.xml.no.implementation.language.extension.point=Can't find implementation class for LanguageExtensionPoint
extension.point.analyzer.analyze.xml.batch.not.extension.points=Not an <extensionPoints>
extension.point.analyzer.analyze.xml.batch.title=Analyzing extension points
extension.point.analyzer.analyze.xml.no.extension.point.name.field=Can't find ExtensionPointName field
extension.point.analyzer.reason.no.ep.field=No extension point field
extension.point.analyzer.reason.element.of=Element of {0}
extension.point.analyzer.reason.extension.instance=Extension instance
extension.point.analyzer.reason.extension.list=Extension list
extension.point.analyzer.reason.return.value={0}: return value of ''{1}'' (type: {2})
extension.point.analyzer.reason.unknown.usage=Unknown usage of ExtensionPoint
extension.point.analyzer.reason.call.not.loop.value=Call is not loop's iterated value
extension.point.analyzer.reason.impure.method={0} passed to impure method, side-effect is possible (annotate as ''@Contract(pure = true)'' if this should not be so)
extension.point.analyzer.reason.unresolved.method.call=Unresolved method call
extension.point.analyzer.reason.too.many.visited.objects=Too many visited objects, search stopped
extension.point.analyzer.reason.get.instance.method.skipped=Returned from 'getInstance' method (too expensive to search call sites)
extension.point.analyzer.reason.returned.from.method={0}: returned from method ''{1}''
extension.point.analyzer.reason.leak.returned.from.method={0}: returned from method ''{1}'' and leaks after that
extension.point.analyzer.reason.unknown.usage.text={0}: Unknown usage
extension.point.analyzer.reason.uast.no.source.psi={0}: UVariable has no source PSI
extension.point.analyzer.usage.safe.eps=Safe EPs
extension.point.analyzer.usage.unsafe.eps=Unsafe Extension Point Usages

inspection.plugin.xml.validity.display.name=Plugin.xml validity
inspection.plugin.xml.extension.registration.display.name=Plugin.xml extension registration
inspection.plugin.xml.extension.registration.should.define.language.attribute=Extension ''{0}'' should define ''language'' attribute
inspection.plugin.xml.extension.registration.should.define.language.tag=Extension ''{0}'' should define ''language'' tag
inspection.plugin.xml.extension.registration.should.define.language.tag.family.name=Add language tag
inspection.plugin.xml.extension.registration.should.define.externalidprefix.attribute=<html>Define externalIdPrefix attribute, see <a href='https://plugins.jetbrains.com/docs/intellij/stub-indexes.html?from=PluginXmlExtensionRegistrationInspection'>Stub Indexes</a></html>
inspection.plugin.xml.extension.registration.should.define.id.attribute=Define 'id' attribute matching 'StatusBarWidgetFactory.getId()' implementation
inspection.plugin.xml.extension.registration.configurable.should.define.displayName.or.key.attribute=Define 'displayName' or 'key' attribute matching 'Configurable.getDisplayName()' implementation
inspection.plugin.xml.dynamic.plugin.display.name=Plugin.xml dynamic plugin verification
inspection.inspection.description.not.found.inspection.display.name=Inspection description checker
inspection.inspection.using.gray.colors.display.name=Using new Color(a,a,a)
inspection.inspection.unspecified.actions.place.display.name=Unspecified action place
inspection.intention.description.not.found.inspection.display.name=Intention description checker
inspection.undesirable.class.usage.display.name=Undesirable class usage
inspection.file.equals.usage.display.name=File.equals() usage
inspection.unsafe.vfs.recursion.display.name=Unsafe VFS recursion
inspection.use.JB.color.display.name=Use Darcula aware JBColor
inspection.use.DPI.aware.insets.display.name=Use DPI-aware insets
inspection.use.DPI.aware.borders.display.name=Use DPI-aware borders
inspection.use.couple.display.name=Use Couple instead of Pair
inspection.use.virtual.file.equals.display.name=Use 'VirtualFile#equals(Object)'
inspection.use.plugin.id.equals.display.name=Use 'PluginId#equals(Object)'
inspection.unsafe.return.statement.visitor.display.name=Unsafe return statements visitor
inspection.stateful.ep.display.name=Stateful extension
inspection.u.element.as.psi.display.name=UElement as PsiElement usage
inspection.use.primitive.types.equals.display.name=Use 'PsiType#equals(Object)' with primitive types
inspection.highlight.visitor.internal.display.name=Good code is red
inspection.quick.fix.get.family.name.violation.display.name=QuickFix's getFamilyName() implementation must not depend on a specific context
inspection.psi.element.concatenation.display.name=Using PsiElement string representation to generate new expression is incorrect
inspection.migrate.to.opt.control.display.name=Migrate to getOptionPane()
inspection.migrate.to.opt.control.message=Can be converted automatically to OptPane
inspection.migrate.to.opt.control.fix=Convert to OptPane
inspection.non.default.constructor.display.name=Non-default constructors for service and extension class
inspection.presentation.annotation.display.name=Invalid icon path in @Presentation
inspection.missing.recent.api.display.name=Usage of IntelliJ API not available in older IDEs
inspection.serializable.ctor.display.name=Non-default constructor in serializable class
inspection.incorrect.parent.disposable.display.name=Incorrect parentDisposable parameter
inspection.missing.accessible.context.display.name=Accessible context is missing
inspection.message.accessible.context.not.defined.for.jpanel=Accessible context is not defined for JPanel
inspections.action.update.thread.display.name=ActionUpdateThread is missing
inspections.action.update.thread.message=Override 'getActionUpdateThread' and choose 'EDT' or 'BGT'
gutter.name.test.data.line.marker=Test data
progress.title.calculate.target.properties.file=Calculate target properties file
inspection.message.field.may.prevent.intention.preview.to.work.properly=Field may prevent intention preview from working properly
inspection.message.unnecessary.safe.field.annotation=Unnecessary @SafeFieldForPreview annotation: the field type is considered to be safe already
inspection.action.is.not.preview.friendly.display.name=Field blocks intention preview
notification.group.devkit.deployment=Plugin deployment finished
notification.group.testdata=No test data files found

inspection.light.service.must.be.final.display.name=Light service must be final
inspection.light.service.must.be.final.message=Light service must be final
inspection.light.service.must.be.concrete.class.message=\
  Light service must be a concrete class and cannot be abstract or an interface.\n\
  The IntelliJ Platform relies on the concrete implementation class to create and \
  manage the service instance. Without a concrete implementation, the platform \
  would not be able to create an instance of the service, and the service would \
  not be available for use by the plugin.\n\
  To solve this problem, you should define a concrete implementation class for the \
  service and annotate it with '@Service'.

inspection.mismatched.light.service.level.and.ctor.display.name=Mismatch between light service level and its constructor
inspection.mismatched.light.service.level.and.ctor.project.level.required=Light service with a constructor that takes a single parameter of type 'Project' must specify '@Service(Service.Level.PROJECT)'
inspection.mismatched.light.service.level.and.ctor.app.level.ctor.required=Application-level service requires a no-arg or single parameter constructor with 'kotlinx.coroutines.CoroutineScope' type
inspection.mismatched.light.service.level.and.ctor.specify.project.level.fix=Specify 'Service.Level.PROJECT' parameter in '@Service' annotation

inspection.retrieving.service.display.name=Incorrect or simplifiable retrieving service
inspection.retrieving.service.not.registered=The ''{0}'' class is not registered as a service
inspection.retrieving.service.mismatch.for.project.level=The project-level service is retrieved as an application-level service
inspection.retrieving.service.mismatch.for.app.level=The application-level service is retrieved as a project-level service
inspection.retrieving.service.can.be.replaced.with=Can be replaced with ''{0}.{1}()'' call
inspection.retrieving.service.replace.with=Replace with ''{0}.{1}()'' call

inspection.extension.class.should.be.final.and.non.public.display.name=Extension class should be final and non-public
inspection.extension.class.should.be.final.text=Extension class should be final
inspection.extension.class.should.not.be.public.text=Extension class should not be public

inspection.light.service.migration.display.name=A service can be converted to a light one
inspection.light.service.migration.app.level.message=Service can be converted to a light one.\n\
  Annotate the service class with '@Service' and remove its registration from the 'plugin.xml' file.
inspection.light.service.migration.project.level.message=Service can be converted to a light one.\n\
  Annotate the service class with '@Service(Service.Level.PROJECT)' and remove its registration from the 'plugin.xml' file.
inspection.light.service.migration.already.annotated.message=Service class annotated with '@Service' must not be registered in the 'plugin.xml' file

inspection.action.presentation.instantiated.in.ctor.display.name=Eager creation of action presentation
inspection.action.presentation.instantiated.in.ctor.message=Action presentation instantiated in the constructor

inspection.extension.registered.as.service.or.component.display.name=Extension registered as service/component
inspection.extension.registered.as.service.message=A class must not be registered as both an extension and a service
inspection.extension.registered.as.component.message=A class must not be registered as both an extension and a component

inspection.cancellation.check.in.loops.display.name=Cancellation check in loops
inspection.cancellation.check.in.loops.message=Cancellation check ''{0}'' should be the first statement in a loop body
inspection.insert.cancellation.check.fix.message=Insert cancellation check

inspections.application.service.as.static.final.field.or.property.display.name=Application service assigned to a static final field or immutable property
inspections.application.service.as.static.final.field.message=Application service must not be assigned to a static final field
inspections.wrap.application.service.in.supplier.quick.fix.message=Wrap application service in 'java.util.function.Supplier'

inspection.threading.concurrency.display.name=Threading and concurrency problems
inspection.threading.concurrency.violation.call.inside.method=Method annotated with ''@{0}'' must not be called from method annotated with ''@{1}''
inspection.threading.concurrency.violation.unannotated.method.contains.call=Unannotated method calls method annotated with ''@{0}''
inspection.threading.concurrency.violation.unannotated.method.contains.call.multiple.annotations=Unannotated method calls method annotated with multiple threading annotations
inspection.threading.concurrency.option.group.inside.requires.edt=Check inside @RequiresEdt:
inspection.threading.concurrency.option.group.inside.requires.edt.check.requires.read.lock=@RequiresReadLock
inspection.threading.concurrency.option.group.inside.requires.edt.check.requires.write.lock=@RequiresWriteLock
inspection.threading.concurrency.option.check.missing.annotations.methods=Check missing annotations for public methods

inspection.token.set.in.parser.definition.display.name=Non-platform TokenSet declared in ParserDefinition
inspection.token.set.in.parser.definition=TokenSet in ParserDefinition references non-platform classes

inspections.calling.method.should.be.rbc.annotated=Calling method should be annotated with @RequiresBlockingContext
inspections.calling.method.should.be.rbc.annotated.message=Calling method should be annotated with '@RequiresBlockingContext'
inspections.calling.method.should.be.rbc.annotated.annotate.fix=Annotate calling method with '@RequiresBlockingContext'

inspections.incorrect.process.canceled.exception.handling.display.name='ProcessCanceledException' handled incorrectly
inspections.incorrect.process.canceled.exception.handling.name.not.rethrown='ProcessCanceledException' must be rethrown
inspections.incorrect.process.canceled.exception.handling.name.logged='ProcessCanceledException' must not be logged
inspections.incorrect.process.canceled.exception.inheritor.handling.name.not.rethrown='ProcessCanceledException' inheritor must be rethrown
inspections.incorrect.process.canceled.exception.inheritor.handling.name.logged='ProcessCanceledException' inheritor must not be logged

inspections.incorrect.implicit.process.canceled.exception.handling.name.not.rethrown=''ProcessCanceledException'' must be rethrown. ''ProcessCanceledException'' is thrown by ''{0}()''.
inspections.incorrect.implicit.process.canceled.exception.handling.name.logged=''ProcessCanceledException'' must not be logged. ''ProcessCanceledException'' is thrown by ''{0}()''.

inspections.incorrect.implicit.process.canceled.exception.inheritor.handling.name.not.rethrown=''ProcessCanceledException'' inheritor must be rethrown. ''ProcessCanceledException'' is thrown by ''{0}()''.
inspections.incorrect.implicit.process.canceled.exception.inheritor.handling.name.logged=''ProcessCanceledException'' inheritor must not be logged. ''ProcessCanceledException'' is thrown by ''{0}()''.
update.ide.from.sources=Update &IDE from sources
update.ide.from.sources.option=from sources

inspections.static.initialization.in.extensions.name=Static initialization in extension point implementations
inspections.static.initialization.in.extensions.message=Extension point implementations must not use static initialization

inspections.listener.implementation.must.not.be.disposable.name=Listener implementation implements 'Disposable'
inspections.listener.implementation.must.not.implement.disposable=Listener implementation must not implement 'Disposable'