inspections.plugin.extension.registers.kotlin.object=Extension class is a Kotlin object
inspections.plugin.kotlin.object.registered.as.extension=Kotlin object registered as extension

inspections.forbidden.method.in.suspend.context=Forbidden in suspend context method usage
inspections.forbidden.method.in.suspend.context.text=Method ''{0}'' annotated with @RequiresBlockingContext. It is not designed to be called in suspend functions
inspections.forbidden.method.in.suspend.context.check.canceled.text=Do not call 'ProgressManager.checkCanceled' in suspend context. Use top-level 'checkCancelled' function
inspections.forbidden.method.in.suspend.context.check.canceled.fix.text=Replace 'ProgressManager.checkCanceled' with coroutine-friendly 'checkCancelled'
inspections.forbidden.method.in.suspend.context.invoke.and.wait.text='invokeAndWait' can block current coroutine. Use 'Dispatchers.EDT' instead
inspections.forbidden.method.in.suspend.context.invoke.and.wait.fix.text=Replace 'invokeAndWait' call with 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.later.text='invokeLater' is not idiomatic in suspend context. Use 'Dispatchers.EDT' instead
inspections.forbidden.method.in.suspend.context.invoke.later.fix.with.context.text=(May change semantics) Replace 'invokeLater' call with 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.later.fix.launch.text=Replace 'invokeLater' with 'launch(Dispatchers.EDT)'
inspections.forbidden.method.in.suspend.context.default.modality.state.text='defaultModalityState()' does not work in suspend context. If it is really necessary, use 'contextModality()'
inspections.forbidden.method.in.suspend.context.navigate.to.suspend.context=Navigate to suspend context

inspections.companion.object.in.extension=Companion object in extensions
inspections.companion.object.in.extension.message=Companion objects must not be used in extensions
