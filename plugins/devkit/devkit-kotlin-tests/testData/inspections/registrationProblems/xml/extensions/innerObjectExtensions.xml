<idea-plugin>

  <extensions defaultExtensionNs="com.intellij">
    <!-- Configurables: -->
    <!-- INCORRECT: objects used: -->
    <applicationConfigurable instance="<error descr="Extension class is a Kotlin object">ConfigurablesOuterClass$SingletonConfigurable</error>"/>
    <applicationConfigurable implementation="<error descr="Extension class is a Kotlin object">ConfigurablesOuterClass$SingletonConfigurable</error>"/>
    <applicationConfigurable provider="<error descr="Extension class is a Kotlin object">ConfigurablesOuterClass$SingletonConfigurableProvider</error>"/>
    <projectConfigurable instance="<error descr="Extension class is a Kotlin object">ConfigurablesOuterClass$SingletonConfigurable</error>"/>
    <projectConfigurable implementation="<error descr="Extension class is a Kotlin object">ConfigurablesOuterClass$SingletonConfigurable</error>"/>
    <projectConfigurable provider="<error descr="Extension class is a Kotlin object">ConfigurablesOuterClass$SingletonConfigurableProvider</error>"/>
    <!-- Correct: regular classes: -->
    <applicationConfigurable instance="ConfigurablesOuterClass$ApplicationConfigurable"/>
    <applicationConfigurable implementation="ConfigurablesOuterClass$ApplicationConfigurable"/>
    <applicationConfigurable provider="ConfigurablesOuterClass$ApplicationConfigurableProvider"/>
    <projectConfigurable instance="ConfigurablesOuterClass$ProjectConfigurable"/>
    <projectConfigurable implementation="ConfigurablesOuterClass$ProjectConfigurable"/>
    <projectConfigurable provider="ConfigurablesOuterClass$ProjectConfigurableProvider"/>

    <!-- com.intellij.fileType extension point: -->
    <!-- INCORRECT: object used: -->
    <fileType name="Any1" implementationClass="<error descr="Extension class is a Kotlin object">FileTypesOuterClass$SingletonFileType</error>"/>
    <!-- Correct: field name provided: -->
    <fileType name="Any2" implementationClass="FileTypesOuterClass$SingletonFileType" fieldName="INSTANCE"/>
    <!-- Correct: regular class: -->
    <fileType name="Any3" implementationClass="FileTypesOuterClass$MyFileType"/>

    <!-- Intention actions: -->
    <!-- INCORRECT: object used: -->
    <intentionAction>
      <language>Any</language>
      <className><error descr="Extension class is a Kotlin object">IntentionActionsOuterClass$SingletonIntentionAction</error></className>
    </intentionAction>
    <!-- Correct: regular class: -->
    <intentionAction>
      <language>Any</language>
      <className>IntentionActionsOuterClass$MyIntentionAction</className>
    </intentionAction>

    <!-- service extension points: -->
    <!-- INCORRECT: objects: -->
    <applicationService serviceImplementation="<error descr="Extension class is a Kotlin object">ServicesOuterClass$MyApplicationSingletonService</error>"/>
    <projectService serviceImplementation="<error descr="Extension class is a Kotlin object">ServicesOuterClass$MyProjectSingletonService</error>"/>
    <moduleService serviceImplementation="<error descr="Extension class is a Kotlin object">ServicesOuterClass$MyModuleSingletonService</error>"/>
    <applicationService serviceImplementation="ServicesOuterClass$MyApplicationService" testServiceImplementation="<error descr="Extension class is a Kotlin object">ServicesOuterClass$MyApplicationSingletonService</error>" headlessImplementation="<error descr="Extension class is a Kotlin object">ServicesOuterClass$MyApplicationSingletonService</error>"/>
    <projectService serviceImplementation="ServicesOuterClass$MyProjectService" testServiceImplementation="<error descr="Extension class is a Kotlin object">ServicesOuterClass$MyProjectSingletonService</error>" headlessImplementation="<error descr="Extension class is a Kotlin object">ServicesOuterClass$MyProjectSingletonService</error>"/>
    <moduleService serviceImplementation="ServicesOuterClass$MyModuleService" testServiceImplementation="<error descr="Extension class is a Kotlin object">ServicesOuterClass$MyModuleSingletonService</error>" headlessImplementation="<error descr="Extension class is a Kotlin object">ServicesOuterClass$MyModuleSingletonService</error>"/>
    <!-- Correct: regular class services: -->
    <applicationService serviceImplementation="ServicesOuterClass$MyApplicationService"/>
    <projectService serviceImplementation="ServicesOuterClass$MyProjectService"/>
    <moduleService serviceImplementation="ServicesOuterClass$MyModuleService"/>

  </extensions>

</idea-plugin>
