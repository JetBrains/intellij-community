<idea-plugin package="org.jetbrains.kotlin" xmlns:xi="http://www.w3.org/2001/XInclude" version="2" url="https://kotlinlang.org" allow-bundled-update="true">
  <id>org.jetbrains.kotlin</id>

  <name>Kotlin</name>
  <category>Languages</category>
  <description><![CDATA[
The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.
<br>
<a href="https://kotlinlang.org/docs/tutorials/getting-started.html">Getting Started in IntelliJ IDEA</a><br>
<a href="https://kotlinlang.org/docs/tutorials/kotlin-android.html">Getting Started in Android Studio</a><br>
<a href="https://slack.kotlinlang.org/">Public Slack</a><br>
<a href="https://youtrack.jetbrains.com/issues/KT">Issue tracker</a><br>
]]></description>
  <!--suppress PluginXmlValidity -->
  <version>@snapshot@</version>

  <!--suppress PluginXmlValidity -->
  <vendor url="https://www.jetbrains.com">JetBrains</vendor>

  <!--suppress PluginXmlValidity -->
  <change-notes><![CDATA[
    <h3>1.8.0</h3>
    <ul>
      <li>Kotlin/JVM: removed old backend, the `-Xuse-old-backend` compiler option is no longer supported, support for Java 19 bytecode</li>
      <li>Kotlin/Native: support for Xcode 14 and `watchosDeviceArm64` target, new `ObjCName`, `HiddenFromObjC` and `ShouldRefineInSwift` annotations to improve Objective-C and Swift interoperability, CocoaPods Gradle plugin dynamically links registered Kotlin frameworks by default</li>
      <li>Kotlin/JS: stable IR compiler that uses incremental compilation by default, deprecated old backend, support for reporting when `yarn.lock` is updated during the CI process, Gradle plugin supports `kotlin.js.browser.karma.browsers` property to set browser test targets</li>
      <li>Compiler: Lombok compiler plugin supports the `@Builder` annotation</li>
      <li>Kotlin Multiplatform: new Android source set layout that can be enabled in Gradle plugin with `kotlin.mpp.androidSourceSetLayoutVersion=2` and includes new naming schema for `KotlinSourceSet` entities, naming change to compilation configurations created by the Kotlin Multiplatform Gradle plugin</li>
      <li>Gradle: ensured compatibility with Gradle 7.3, disable daemon fallback strategy with `kotlin.daemon.useFallbackStrategy`, exposed available Kotlin compiler options as Gradle lazy properties, minimum supported Gradle version is 6.8.3, minimum supported Android Gradle plugin version is 4.1.3</li>
      <li>Libraries: stable extensions for `java.util.Optional` in stdlib, stable `toTimeUnit()`, `toDurationUnit`, `cbrt()` functions, JVM target is 1.8 for stdlib, experimental enhancement of `TimeMark` allowing `elapsedNow` to be read from multiple `TimeMark`s simultaneously, added extension functions to `java.nio.file.Path` that can recursively copy or delete directories</li>
    </ul>
    Learn more in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.8.0">changelog</a>.
    <br><br>
    <h3>1.7.20</h3>
    <ul>
      <li>K2: support for the `all-open, `no-arg`, SAM-with-receiver, Lombok, Parcelize, AtomicFU, and `jvm-abi-gen` compiler plugins</li>
      <li>Language: experimental `..<` (`rangeUntil`) operator for ranges with the excluded end bound, deprecated inferring type variables into an empty intersection type, warning on potentially empty intersection types, improved script handling in source roots</li>
      <li>Language: builder inference in cases with multiple lambdas now requires explicit type arguments; using an uninferred stub type as a receiver in a call during type inference is now forbidden and leads to an error</li>
      <li>Kotlin/JVM: experimental generic inline classes, more optimized cases of delegated properties</li>
      <li>Kotlin/Native: the new memory manager enabled by default (with deprecated freezing API and an ability to run Kotlin `suspend` functions on non-main threads from Swift), customizable bundle identifier of the generated framework, improved documentation generated to the Objective-C header</li>
      <li>Kotlin/JS IR: improved speed on the first build when using the incremental compilation, faster klib generation</li>
      <li>Libraries: a new experimental interface for ranges with the excluded end bound, new walk and visit extensions for `java.nio.file.Path`</li>
      <li>Gradle: simplified configuration method for the JVM Toolchain, fixed deprecations and ensured compatibility with Gradle 7.1</li>
    </ul>
    Learn more in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.7.20">changelog</a>.
    <br><br>
    <h3>1.7.0</h3>
    <ul>
      <li>New Kotlin K2 compiler for JVM in Alpha</li>
      <li>Language: changes in builder inference, allowed implementation by delegation to inlined value of inline class, changes in Opt-in annotations</li>
      <li>Kotlin/JVM: performance improvements, removed `1.6` target version</li>
      <li>Kotlin/Native: performance improvement for the new memory manager, embeddable compiler jar for Kotlin/Native by default, returning `Void` instead of `KotlinUnit` from `suspend` functions by default, generation of standalone executable for androidNative targets by default, prohibited exceptions through Objective-C bridges</li>
      <li>Kotlin/JS: performance improvements, smaller bundle size, generated `.js` compatible with old browsers and engines</li>
      <li>Libraries: extensions for `java.util.Optional` in stdlib, min/max(By/With) functions for non-empty collections, stable `Regex.matchAt()`, `Regex.matchesAt()`, `findAnnotations()`, `DeepRecursiveFunction` functions, getting named groups of a regex match in JS and Native</li>
      <li>Gradle: Experimental incremental compilation, minimal supported Gradle version is `6.7.1` and Android Gradle plugin is `3.6.4`, allow to override default Kotlin/Native compiler download URL, deprecated `kotlin.compiler.execution.strategy`, removed `useExperimentalAnnotation`, `experimentalAnnotationInUse`, `kotlin.coroutines` (and related `kotlin.experimental.coroutines` Gradle DSL option) properties</li>
    </ul>
    Learn more in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.7.0">changelog</a>.
    <br><br>
    <h3>1.6.20</h3>
    <ul>
      <li>Language: prototype of context receivers, definitely non-nullable types</li>
      <li>Kotlin/JVM: experimental parallel compilation of a single module, callable references to functional interface constructors, improved compatibility for default methods</li>
      <li>Kotlin/Native: instantiation of annotation classes, improved interop with Swift async/await, better stack traces with libbacktrace, performance improvements</li>
      <li>Multiplatform: hierarchical project structure by default</li>
      <li>CocoaPods Gradle plugin: new tasks for generating a suitable podspec for XCFramework publishing, accepting the podspec version when configuring CocoaPods for Kotlin/Native</li>
      <li>Kotlin/JS: IR compiler improvements (incremental compilation, lazy initialization of top-level properties, separate JS files for project modules), export improvements</li>
      <li>Security: using relative paths in klibs, persisting yarn.lock for Kotlin/JS Gradle projects, installation of npm dependencies with --ignore-scripts by default</li>
      <li>Gradle: compiler execution strategies, cleaning up deprecated properties and options</li>
    </ul>
    Learn more in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.6.20">changelog</a>.
    <br>
    For more details, see [What’s New in Kotlin 1.6.20](https://kotlinlang.org/docs/whatsnew1620.html).
    <br><br>
    <h3>1.6.20</h3>
    <ul>
      <li>Language: prototype of context receivers, definitely non-nullable types</li>
      <li>Kotlin/JVM: experimental parallel compilation of a single module, callable references to functional interface constructors, improved compatibility for default methods</li>
      <li>Kotlin/Native: instantiation of annotation classes, improved interop with Swift async/await, better stack traces with libbacktrace, performance improvements</li>
      <li>Multiplatform: hierarchical project structure by default</li>
      <li>CocoaPods Gradle plugin: new tasks for generating a suitable podspec for XCFramework publishing, accepting the podspec version when configuring CocoaPods for Kotlin/Native</li>
      <li>Kotlin/JS: IR compiler improvements (incremental compilation, lazy initialization of top-level properties, separate JS files for project modules), export improvements</li>
      <li>Security: using relative paths in klibs, persisting yarn.lock for Kotlin/JS Gradle projects, installation of npm dependencies with --ignore-scripts by default</li>
      <li>Gradle: compiler execution strategies, cleaning up deprecated properties and options</li>
    </ul>
    Learn more in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.6.20">changelog</a>.
    <br>
    For more details, see [What’s New in Kotlin 1.6.20](https://kotlinlang.org/docs/whatsnew1620.html).
    <br><br>
    <h3>1.6.0</h3>
    <ul>
      <li>Language: stable exhaustive `when` statements for enum, sealed and Boolean subjects, stable conversions from regular to suspending functional types, stable instantiation of annotation classes, improvements to type inference and builder inference</li>
      <li>Kotlin/JVM: support for repeatable annotations with runtime retention and bytecode optimizations for delegated properties</li>
      <li>Kotlin/Native: a preview of the new memory manager, support for Xcode 13, updated LLVM to 11.1.0, compiler caches enabled by default for `linuxX64` and `iosArm64`, cross-compilation for MinGW targets, unified compiler plugin ABI with JVM and JS IR backends, reworked unhandled exception handling API</li>
      <li>Kotlin/JS: ability to disable downloading Node.js and Yarn</li>
      <li>Gradle: removed 'kotlin.useFallbackCompilerSearch' build option</li>
      <li>Stdlib: top-level `readln()` and `readlnOrNull()` on JVM, stable `typeOf()`, Duration API, and сollection builders, improvements to the existing API </li>
    </ul>
    Learn more in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.6.0">changelog</a>.
    <br><br>
	  <h3>1.5.30</h3>
    <ul>
      <li>Kotlin/JVM: instantiation of annotation classes and improvements to how nullability annotations are handled.</li>
      <li>Kotlin/Native: support for Apple silicon, Kotlin DSL improvements for the Cocoapods Gradle plugin, deprecation of linkage with DLLs without import libraries for MinGW targets, optimized access to object declarations with `const val`s only, and debugger improvements.</li>
      <li>Swift/Objective-C interop: experimental interoperability with Swift 5.5 async/await and improved singleton mapping.</li>
      <li>C interop: passing by value for more C structs.</li>
      <li>Kotlin Multiplatform: the ability to share custom `cinterop` libraries between platforms, XCFrameworks support, and a new default publishing setup for Android artifacts.</li>
      <li>Kotlin/JS: IR backend in Beta and source map generation for it.</li>
      <li>Gradle: Java toolchain support and changes to Kotlin daemon JVM argument configuration.</li>
      <li>Standard library: improvements to the `Regex` and `Duration` APIs.</li>
      <li>Compiler improvements: changes to the opt-in requirement mechanism, improvements to type inference on recursive generic types, and the elimination of builder inference restrictions.</li>
    </ul>
    Learn more in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.30">changelog</a> and <a href="https://blog.jetbrains.com/kotlin/2021/08/kotlin-1-5-30-released/?utm_source=ide&utm_medium=change-notes&utm_campaign=1-5-30-release">this blog post</a>.
    <br><br>
    <h3>1.5.21</h3>
    A bug fix release for Kotlin 1.5.20. Learn more in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.21">changelog</a>.
    <br><br>
    <h3>1.5.20</h3>
    Released: <b>June 24, 2021</b>
    <ul>
      <li>String concatenation uses invokedynamic on JVM by default.</li>
      <li>Annotations on function type parameters are emitted to the bytecode on JVM 1.8+.</li>
      <li>Support calling Lombok-generated Java methods from Kotlin code in the same module.</li>
      <li>Kotlin/Native: improved performance of `Array.copyInto` inside one array.</li>
      <li>Kotlin/Native: opt-in export of KDoc comments to the generated Objective-C headers with the `-Xexport-kdoc` compiler option.</li>
      <li>Experimental caching of annotation processors' classloaders.</li>
      <li>Parallel compilation of Kotlin sources is controlled by `--parallel` Gradle property. The `kotlin.parallel.tasks.in.project` property is deprecated.</li>
      <li>Aligned behavior of stdlib functions `isLowerCase`/`isUpperCase` and `digitToInt` across platforms.</li>
    </ul>
    For more details, see <a href="https://kotlinlang.org/docs/whatsnew1520.html?utm_source=ide&utm_medium=change-notes&utm_campaign=1-5-20-release">What’s New in Kotlin 1.5.20</a> and <a href="https://blog.jetbrains.com/kotlin/2021/06/kotlin-1-5-20-released/?utm_source=ide&utm_medium=change-notes&utm_campaign=1-5-20-release">this blog post</a>
    <br><br>
    <h3>1.5.10</h3>
    Released: <b>May 24, 2021</b>
    <br>
    A bug fix release for Kotlin 1.5.0.
    Learn more in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.10/">changelog</a>.
    <br><br>
    <h3>1.5.0</h3>
    Released: <b>May 5, 2021</b>
    <ul>
      <li><a href="https://kotlinlang.org/docs/whatsnew14.html?utm_source=product&utm_medium=link#new-jvm-ir-backend">JVM IR backend</a> by default.</li>
      <li>New language features by default: inline value classes, sealed interfaces, and JVM records support.</li>
      <li>New default JVM target: 1.8 (1.6 is deprecated)</li>
      <li><a href="https://kotlinlang.org/docs/fun-interfaces.html?utm_source=product&utm_medium=link">SAM adapters</a> use invokedynamic on JVM by default. Lambdas can use invokedynamic with an opt-in via `-Xlambdas=indy`.</li>
      <li>Deprecation of `-Xjvm-default=enable` and `-Xjvm-default=compatibility` compiler modes and `@JvmDefault` annotation.</li>
      <li>Kotlin/Native compilation time improvements.</li>
      <li>Kotlin/JS uses webpack 5 by default.</li>
      <li>New stdlib APIs: math functions `floorDiv()` and `mod()`, collection function `firstNotNullOf()`, strict version of `String.toBoolean()`.</li>
      <li>Stabilization of experimental APIs: unsigned integers, extensions for Java NIO Path API, Char-to-int and Char-to-code conversions, locale-agnostic functions for upper-/lowercasing.</li>
      <li>Changes in the experimental Duration API.</li>
      <li>Simplified kotlin-test dependency usage.</li>
      <li>New and updated assertion functions in kotlin-test.</li>
      <li>New library versions: coroutines 1.5.0, serialization 1.2.0, dateTime 0.2.0</li>
      <li>Fixed compiler exceptions.</li>
    </ul>
    Learn more in:
    <ul>
      <li><a href="https://kotlinlang.org/docs/whatsnew15.html?utm_source=product&utm_medium=link">What’s New in Kotlin 1.5.0</a>.</li>
      <li><a href="https://blog.jetbrains.com/kotlin/2021/04/kotlin-1-5-0-released/?utm_source=product&utm_medium=link">the release blog post</a>.</li>
      <li><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.0/">the release changelog</a>.</li>
    </ul>
    <br><br>
    <h3>1.4.30</h3>
    Released: <b>February 4, 2021</b>
    <ul>
      <li>Preview of new language features: JVM records support, sealed interfaces, and stable inline classes.</li>
      <li>Kotlin/JVM: IR backend is now in Beta.</li>
      <li>Kotlin/Native: performance improvements, new `watchosX64` simulator target, support for Xcode 12.2 libraries.</li>
      <li>Kotlin/JS: prototype lazy initialization of top-level properties.</li>
      <li>Support for Gradle configuration cache.</li>
      <li>Standard library API improvements: locale-agnostic API for upper/lowercasing text and clear Char-to-code and Char-to-digit conversions.</li>
    </ul>
    For more details, see <a href="https://kotlinlang.org/docs/reference/whatsnew1430.html?utm_source=product&utm_medium=link">What’s New in Kotlin 1.4.30</a> and <a href="http://blog.jetbrains.com/kotlin/2021/01/1-4-30-is-released-with-a-new-jvm-backend-and-language-and-multiplatform-features/?utm_source=product&utm_medium=link">this blog post</a>.
    <br><br>
    <h3>1.4.20</h3>
    Released: <b>November 23, 2020</b>
    <ul>
      <li>Kotlin/JS: New project templates, improved Gradle plugin, experimental <b>compilation with errors mode</b> in the IR compiler.</li>
      <li>Kotlin/Native: New escape analysis mechanism, wrapping of Objective-C exceptions, various functional and performance improvements.</li>
      <li>IDE: Experimental support for <a href="https://blog.jetbrains.com/idea/2020/03/intellij-idea-2020-1-beta2/">Code Vision</a>, the <b>Redirect input from</b> option in Kotlin run configurations, and more.</li>
      <li>JEP 280 (invokedynamic) string concatenation is available on the JVM.</li>
      <li>Changes to the layout of multiplatform projects.</li>
      <li>Improved CocoaPods support.</li>
      <li>Standard library improvements: Extensions for java.nio.file.Path and performance optimizations.</li>
      <li>Deprecation of the kotlin-android-extensions compiler plugin. Parcelable implementation generator has moved to the new kotlin-parcelize plugin.</li>
    </ul>
    For more details, see <a href="https://kotlinlang.org/docs/reference/whatsnew1420.html?utm_source=product&utm_medium=link">What’s New in Kotlin 1.4.20</a> and <a href="https://blog.jetbrains.com/kotlin/2020/11/kotlin-1-4-20-released/?utm_source=product&utm_medium=link">this blog post</a>.
    <br><br>
    <h3>1.4.0</h3>
    Released: <b>August 17, 2020</b>
    <ul>
      <li>New compiler with better type inference.</li>
      <li>IR backends for JVM and JS in Alpha mode (<a href="https://kotlinlang.org/docs/reference/whatsnew14.html#unified-backends-and-extensibility">requires opt-in</a>).</li>
      <li>A new flexible Kotlin Project Wizard for easy creation and configuration of different types of projects.</li>
      <li>New IDE functionality to debug coroutines.</li>
      <li>IDE performance improvements: many actions, such as project opening and autocomplete suggestions now complete up to 4 times faster.</li>
      <li>New language features such as SAM conversions, trailing comma, and other.</li>
      <li>Type annotations in the JVM bytecode and new modes for generating default interfaces in Kotlin/JVM.</li>
      <li>New Gradle DSL for Kotlin/JS.</li>
      <li>Improved performance and interop with Swift and Objective-C in Kotlin/Native.</li>
      <li>Support for sharing code in several targets thanks to the hierarchical structure in multiplatform projects.</li>
      <li>New collection operators, delegated properties improvements, the double-ended queue implementation ArrayDeque, and much more new things in the standard library.</li>
    </ul>
    For more details, see <a href="https://kotlinlang.org/docs/reference/whatsnew14.html?utm_source=product&utm_medium=link">What’s New in Kotlin 1.4.0</a> and <a href="http://blog.jetbrains.com/kotlin/2020/08/kotlin-1-4-released-with-a-focus-on-quality-and-performance/?utm_source=product&utm_medium=link">this blog post</a>.
    <br><br>
    To get the most out of the changes and improvements introduced in Kotlin 1.4, join our <a href="https://kotlinlang.org/lp/event-14/">Online Event</a> where you will be able to enjoy four days of Kotlin talks, Q&As with the Kotlin team, and more.
    ]]>
  </change-notes>

  <dependencies>
    <!-- IJ/AS-DEPENDENCY-PLACEHOLDER -->
    <plugin id="com.intellij.java"/>
  </dependencies>

  <depends optional="true" config-file="performance-plugin.xml">com.jetbrains.performancePlugin</depends>

  <!-- IJ/AS-INCOMPATIBLE-PLACEHOLDER -->

  <xi:include href="k1.xml" includeUnless="idea.kotlin.plugin.use.k2"/>
  <xi:include href="k2.xml" includeIf="idea.kotlin.plugin.use.k2"/>
</idea-plugin>
