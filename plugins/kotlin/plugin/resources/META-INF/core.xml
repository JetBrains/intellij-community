<idea-plugin>
  <resource-bundle>messages.KotlinBundle</resource-bundle>

  <extensionPoints>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.idea.codeInsight.unambiguousImports"
            interface="org.jetbrains.kotlin.idea.codeInsight.KotlinAutoImportsFilter"
            dynamic="true"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.updater"
            beanClass="com.intellij.openapi.fileTypes.FileTypeExtensionPoint"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.pluginUpdateVerifier"
            interface="org.jetbrains.kotlin.idea.update.PluginUpdateVerifier"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.projectConfigurator"
            interface="org.jetbrains.kotlin.idea.configuration.KotlinProjectConfigurator"
            dynamic="true"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.newFileHook"
            interface="org.jetbrains.kotlin.idea.actions.NewKotlinFileHook"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.facetValidatorCreator"
            interface="org.jetbrains.kotlin.idea.facet.KotlinFacetValidatorCreator"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.clearBuildState"
            interface="org.jetbrains.kotlin.idea.compiler.configuration.ClearBuildStateExtension"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.experimentalFeature"
            interface="org.jetbrains.kotlin.idea.configuration.ExperimentalFeature"
            dynamic="true"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.j2kConverterExtension"
            interface="org.jetbrains.kotlin.j2k.J2kConverterExtension"
            dynamic="true"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.idea.testFrameworkProvider"
            interface="org.jetbrains.kotlin.idea.extensions.KotlinTestFrameworkProvider"
            dynamic="true"/>
    <extensionPoint
            qualifiedName="org.jetbrains.kotlin.buildSystemTypeDetector"
            interface="org.jetbrains.kotlin.idea.configuration.BuildSystemTypeDetector"
            dynamic="true"/>
  </extensionPoints>

  <extensions defaultExtensionNs="com.intellij">
    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.PluginStartupApplicationService" />
    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.KotlinPluginUpdater"/>
    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.quickfix.QuickFixes"/>
    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.codeInsight.KotlinCodeInsightSettings"/>
    <applicationService serviceImplementation="org.jetbrains.kotlin.idea.editor.KotlinEditorOptions"/>

    <applicationService
            serviceInterface="org.jetbrains.kotlin.idea.references.ReadWriteAccessChecker"
            serviceImplementation="org.jetbrains.kotlin.idea.references.ReadWriteAccessCheckerDescriptorsImpl"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.PluginStartupService"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.core.KotlinPluginDisposable"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.core.util.ProjectJob"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.configuration.KotlinMigrationProjectService"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCommonCompilerArgumentsHolder"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.Kotlin2JvmCompilerArgumentsHolder"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.Kotlin2JsCompilerArgumentsHolder"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerSettings"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerWorkspaceSettings"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.codeInsight.KotlinCodeInsightWorkspaceSettings"/>

    <projectService
            serviceInterface="org.jetbrains.kotlin.idea.util.FirPluginOracleService"
            serviceImplementation="org.jetbrains.kotlin.idea.util.FirPluginOracleServiceFE10Impl"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.idea.util.ImportInsertHelper"
            serviceImplementation="org.jetbrains.kotlin.idea.util.ImportInsertHelperImpl"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.idea.core.NotPropertiesService"
            serviceImplementation="org.jetbrains.kotlin.idea.intentions.NotPropertiesServiceImpl"/>

    <applicationConfigurable
            groupId="language"
            bundle="messages.KotlinBundle"
            key="kotlin.language.configurable"
            id="preferences.language.Kotlin"
            instance="org.jetbrains.kotlin.idea.configuration.KotlinLanguageConfiguration"/>

    <projectConfigurable
            instance="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerConfigurableTab"
            id="project.kotlinCompiler"
            bundle="messages.KotlinBundle"
            key="kotlin.compiler.configurable"
            parentId="project.propCompiler"/>

    <errorHandler implementation="org.jetbrains.kotlin.idea.reporter.KotlinReportSubmitter"/>

    <iconProvider implementation="org.jetbrains.kotlin.idea.KotlinIconProvider"/>

    <pathMacroExpandableProtocol protocol="kotlin-js-meta"/>

    <pathMacroContributor implementation="org.jetbrains.kotlin.idea.KotlinPluginMacros"/>

    <postStartupActivity implementation="org.jetbrains.kotlin.idea.PluginStartupActivity"/>
    <postStartupActivity implementation="org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginStartupActivity"/>
    <postStartupActivity implementation="org.jetbrains.kotlin.idea.caches.KotlinPackageContentModificationListener"/>
    <postStartupActivity implementation="org.jetbrains.kotlin.idea.configuration.KotlinMigrationProjectComponent"/>

    <lang.importOptimizer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.imports.KotlinImportOptimizer"/>
    <lang.foldingBuilder
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.KotlinFoldingBuilder"/>

    <codeInsight.parameterInfo
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinFunctionParameterInfoHandler"/>
    <codeInsight.parameterInfo
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinLambdaParameterInfoHandler"/>
    <codeInsight.parameterInfo
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinArrayAccessParameterInfoHandler"/>
    <codeInsight.parameterInfo
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinClassTypeArgumentInfoHandler"/>
    <codeInsight.parameterInfo
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinFunctionTypeArgumentInfoHandler"/>
    <codeInsight.parameterInfo
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinClassConstructorInfoHandler"/>

    <codeInsight.linkHandler
            prefix="#kotlinClass/"
            handlerClass="org.jetbrains.kotlin.idea.highlighter.markers.KotlinClassTooltipLinkHandler"/>

    <codeInsight.nonBlockingContextChecker
            implementation="org.jetbrains.kotlin.idea.inspections.blockingCallsDetection.CoroutineNonBlockingContextChecker"/>
    <codeInsight.blockingMethodChecker
            implementation="org.jetbrains.kotlin.idea.inspections.blockingCallsDetection.CoroutineBlockingMethodChecker"/>

    <typeDeclarationProvider implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinTypeDeclarationProvider"/>

    <breadcrumbsInfoProvider implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinBreadcrumbsInfoProvider"/>

    <lang.documentationProvider language="JAVA" implementationClass="org.jetbrains.kotlin.idea.KotlinDocumentationProvider" order="first"/>
    <documentationProvider implementation="org.jetbrains.kotlin.idea.KotlinDocumentationProvider"/>

    <codeInsight.implementMethod language="kotlin" implementationClass="org.jetbrains.kotlin.idea.core.overrideImplement.ImplementMembersHandler"/>
    <codeInsight.overrideMethod language="kotlin" implementationClass="org.jetbrains.kotlin.idea.core.overrideImplement.OverrideMembersHandler"/>

    <typeHierarchyProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.hierarchy.KotlinTypeHierarchyProviderBySuperTypeCallEntry"/>
    <typeHierarchyProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.hierarchy.KotlinTypeHierarchyProvider"/>
    <typeHierarchyProvider
            language="JAVA"
            order="last"
            implementationClass="org.jetbrains.kotlin.idea.hierarchy.KotlinTypeHierarchyProviderBySuperTypeCallEntry"/>
    <callHierarchyProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.hierarchy.calls.KotlinCallHierarchyProvider" />
    <methodHierarchyProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.hierarchy.overrides.KotlinOverrideHierarchyProvider" />

    <hierarchy.referenceProcessor implementation="org.jetbrains.kotlin.idea.hierarchy.calls.KotlinCallReferenceProcessor"/>

    <codeInsight.typeInfo language="kotlin"
                          implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinExpressionTypeProviderDescriptorsImpl"/>

    <testCreator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.testIntegration.KotlinTestCreator"/>
    <testFinder implementation="org.jetbrains.kotlin.idea.testIntegration.KotlinTestFinder"/>

    <createFromTemplateHandler implementation="org.jetbrains.kotlin.idea.actions.KotlinCreateFromTemplateHandler"/>

    <lang.jvm.actions.jvmElementActionsFactory implementation="org.jetbrains.kotlin.idea.quickfix.crossLanguage.KotlinElementActionsFactory"/>

    <referenceImporter implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinReferenceImporter" id="KotlinReferenceImporter"/>
    <autoImportOptionsProvider instance="org.jetbrains.kotlin.idea.codeInsight.KotlinCodeInsightWorkspaceSettingsProvider"/>

    <lang.elementManipulator
            forClass="org.jetbrains.kotlin.psi.KtStringTemplateExpression"
            implementationClass="org.jetbrains.kotlin.psi.psiUtil.KtStringTemplateExpressionManipulator"/>

    <treeStructureProvider implementation="org.jetbrains.kotlin.idea.projectView.KotlinSelectInProjectViewProvider"/>
    <treeStructureProvider implementation="org.jetbrains.kotlin.idea.projectView.KotlinExpandNodeProjectViewProvider" order="last"/>

    <qualifiedNameProvider implementation="org.jetbrains.kotlin.idea.actions.KotlinQualifiedNameProvider"/>

    <packageDependencies.visitor
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.packageDependencies.KotlinDependencyVisitorFactory"/>

    <annotationSupport language="kotlin" implementationClass="com.intellij.psi.impl.source.tree.java.JavaAnnotationSupport"/>

    <deadCode implementation="org.jetbrains.kotlin.idea.inspections.KotlinJUnitStaticEntryPoint"/>

    <checkinHandlerFactory implementation="org.jetbrains.kotlin.idea.vcs.BunchFileCheckInHandlerFactory"/>

    <stripTrailingSpacesFilterFactory implementation="org.jetbrains.kotlin.idea.editor.KotlinStripTrailingSpacesFilterFactory"/>

    <search.topHitProvider implementation="org.jetbrains.kotlin.idea.editor.KotlinEditorOptionsTopHitProvider"/>

    <psi.classFileDecompiler implementation="org.jetbrains.kotlin.idea.decompiler.classFile.KotlinClassFileDecompiler"/>
    <psi.classFileDecompiler implementation="org.jetbrains.kotlin.idea.decompiler.js.KotlinJavaScriptMetaFileDecompiler"/>
    <psi.classFileDecompiler implementation="org.jetbrains.kotlin.idea.decompiler.builtIns.KotlinBuiltInDecompiler"/>

    <moduleConfigurationEditorProvider implementation="org.jetbrains.kotlin.idea.roots.ui.NonJvmKotlinModuleEditorsProvider"/>

    <projectStructure.sourceRootEditHandler implementation="org.jetbrains.kotlin.idea.roots.ui.KotlinModuleSourceRootEditHandler$Source"/>
    <projectStructure.sourceRootEditHandler implementation="org.jetbrains.kotlin.idea.roots.ui.KotlinModuleSourceRootEditHandler$TestSource"/>
    <projectStructure.sourceRootEditHandler implementation="org.jetbrains.kotlin.idea.roots.ui.KotlinModuleSourceRootEditHandler$Resource"/>
    <projectStructure.sourceRootEditHandler implementation="org.jetbrains.kotlin.idea.roots.ui.KotlinModuleSourceRootEditHandler$TestResource"/>

    <lang.psiStructureViewFactory
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.structureView.KotlinStructureViewFactory"/>

    <structureViewBuilder
            order="first"
            key="CLASS"
            factoryClass="org.jetbrains.kotlin.idea.structureView.KtClsStructureViewBuilderProvider"/>

    <registryKey
            key="kotlin.code-vision.usages"
            description="Enable Code-Vision usages search"
            defaultValue="false"
            restartRequired="false"/>
    <registryKey
            key="kotlin.code-vision.inheritors"
            description="Enable Code-Vision inheritors search"
            defaultValue="false"
            restartRequired="false"/>
    <registryKey
            key="kotlin.experimental.new.j2k"
            description="Enable new Java to Kotlin converter"
            defaultValue="true"
            restartRequired="false"/>
  </extensions>

  <extensions defaultExtensionNs="org.jetbrains.kotlin">
    <versionInfoProvider implementation="org.jetbrains.kotlin.idea.facet.KotlinVersionInfoProviderByModuleDependencies"/>

    <pluginUpdateVerifier implementation="org.jetbrains.kotlin.idea.update.GooglePluginUpdateVerifier"/>

    <binaryExtension implementation="org.jetbrains.kotlin.idea.util.JavaClassBinary"/>
    <binaryExtension implementation="org.jetbrains.kotlin.idea.util.KotlinBuiltInBinary"/>
    <binaryExtension implementation="org.jetbrains.kotlin.idea.util.KotlinModuleBinary"/>
    <binaryExtension implementation="org.jetbrains.kotlin.idea.util.KotlinJsMetaBinary"/>

    <projectConfigurator implementation="org.jetbrains.kotlin.idea.configuration.KotlinJavaModuleConfigurator"/>
    <projectConfigurator implementation="org.jetbrains.kotlin.idea.configuration.KotlinJsModuleConfigurator"/>

    <quickFixContributor implementation="org.jetbrains.kotlin.idea.quickfix.QuickFixRegistrar"/>

    <j2kConverterExtension implementation="org.jetbrains.kotlin.nj2k.NewJ2kConverterExtension"/>
    <j2kConverterExtension implementation="org.jetbrains.kotlin.idea.j2k.OldJ2kConverterExtension"/>

    <buildSystemTypeDetector implementation="org.jetbrains.kotlin.idea.configuration.GradleDetector"/>
  </extensions>

  <!-- Editing -->
  <extensions defaultExtensionNs="com.intellij">
    <typedHandler implementation="org.jetbrains.kotlin.idea.editor.KotlinTypedHandler"/>
    <typedHandler implementation="org.jetbrains.kotlin.idea.kdoc.KDocTypedHandler"/>
    <typedHandler implementation="org.jetbrains.kotlin.idea.editor.KotlinRawStringTypedHandler"/>

    <lang.surroundDescriptor
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.surroundWith.expression.KotlinExpressionSurroundDescriptor"/>
    <lang.surroundDescriptor
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.surroundWith.statement.KotlinStatementSurroundDescriptor"/>
    <lang.unwrapDescriptor
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.unwrap.KotlinUnwrapDescriptor"/>

    <statementUpDownMover
            id="ktExpression"
            order="before declaration"
            implementation="org.jetbrains.kotlin.idea.codeInsight.upDownMover.KotlinExpressionMover"/>
    <statementUpDownMover
            id="ktDeclaration"
            order="before ktExpression"
            implementation="org.jetbrains.kotlin.idea.codeInsight.upDownMover.KotlinDeclarationMover"/>

    <moveLeftRightHandler language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinMoveLeftRightHandler"/>

    <editorSmartKeysConfigurable instance="org.jetbrains.kotlin.idea.editor.KotlinEditorOptionsConfigurable"/>

    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinDeclarationAndAssignmentHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinInitializerAndIfToElvisHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinBlockIntoSingleStatementHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinStatementsAddSemicolonHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinToStringTemplateHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinWithTrailingCommaHandler"/>

    <quoteHandler fileType="Kotlin" className="org.jetbrains.kotlin.idea.editor.KotlinQuoteHandler"/>

    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinStatementGroupSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinCodeBlockSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinDocCommentSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinCallExpressionWithLambdaSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinDeclarationSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinListSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinStringLiteralSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinInvokedExpressionSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinTypeSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinSuperTypeSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinBracketsSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinLabeledReturnSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinClassMemberSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinEscapedIdentifierSelectioner"/>

    <basicWordSelectionFilter implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinWordSelectionFilter"/>

    <declarationRangeHandler
            key="org.jetbrains.kotlin.psi.KtClassOrObject"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinClassDeclarationRangeHandler"/>
    <declarationRangeHandler
            key="org.jetbrains.kotlin.psi.KtDeclarationWithBody"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinFunDeclarationRangeHandler"/>

    <enterHandlerDelegate
            id="KotlinEnterHandler"
            order="before EnterBetweenBracesHandler, before xmlEnter"
            implementation="org.jetbrains.kotlin.idea.editor.KotlinEnterHandler"/>
    <enterHandlerDelegate
            id="KotlinMultilineStringEnterHandler"
            order="before EnterBetweenBracesHandler, before xmlEnter"
            implementation="org.jetbrains.kotlin.idea.editor.KotlinMultilineStringEnterHandler"/>
    <enterHandlerDelegate
            id="KotlinEnterAfterUnmatchedBraceHandler"
            order="before afterUnmatchedBrace"
            implementation="org.jetbrains.kotlin.idea.editor.KotlinEnterAfterUnmatchedBraceHandler"/>
    <enterBetweenBracesDelegate
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.editor.KotlinEnterBetweenBracesAndBracketsNoCommitDelegate"/>

    <lang.smartEnterProcessor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.editor.KotlinSmartEnterHandler"/>

    <backspaceHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinBackspaceHandler"/>
    <backspaceHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinStringTemplateBackspaceHandler"/>
    <backspaceHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinRawStringBackspaceHandler"/>
  </extensions>

  <!-- Tips and Tricks -->
  <extensions defaultExtensionNs="com.intellij">
    <tipAndTrick file="Kotlin.html"/>
    <tipAndTrick file="Kotlin_project.html"/>
    <tipAndTrick file="Kotlin_mix.html"/>
    <tipAndTrick file="Kotlin_Java_convert.html"/>
  </extensions>

  <!-- Navigation -->
  <extensions defaultExtensionNs="com.intellij">
    <navbar implementation="org.jetbrains.kotlin.idea.navigationToolbar.KotlinNavBarModelExtension" order="first"/>

    <applicationService
            serviceInterface="org.jetbrains.kotlin.psi.KotlinReferenceProvidersService"
            serviceImplementation="org.jetbrains.kotlin.idea.references.KtIdeReferenceProviderService"/>

    <psi.referenceContributor
            implementation="org.jetbrains.kotlin.idea.references.KotlinWebReferenceContributor"/>
    <psi.referenceContributor
            id="kotlinFilePathReferenceContributor"
            language="kotlin"
            implementation="org.jetbrains.kotlin.idea.references.KotlinFilePathReferenceContributor"/>
  </extensions>

  <!-- Formatter -->
  <extensions defaultExtensionNs="com.intellij">
    <lang.formatter language="kotlin" implementationClass="org.jetbrains.kotlin.idea.formatter.KotlinFormattingModelBuilder"/>

    <lineIndentProvider implementation="org.jetbrains.kotlin.idea.formatter.KotlinLineIndentProvider"/>

    <preFormatProcessor implementation="org.jetbrains.kotlin.idea.formatter.KotlinPreFormatProcessor"/>

    <postFormatProcessor implementation="org.jetbrains.kotlin.idea.formatter.TrailingCommaPostFormatProcessor"/>

    <langCodeStyleSettingsProvider implementation="org.jetbrains.kotlin.idea.formatter.KotlinLanguageCodeStyleSettingsProvider"/>

    <codeStyleSettingsProvider implementation="org.jetbrains.kotlin.idea.formatter.KotlinGenerationSettingsProvider"/>

    <predefinedCodeStyle implementation="org.jetbrains.kotlin.idea.formatter.KotlinStyleGuideCodeStyle"/>
    <predefinedCodeStyle implementation="org.jetbrains.kotlin.idea.formatter.KotlinObsoleteCodeStyle"/>

    <registryKey
            key="kotlin.formatter.allowTrailingCommaInAnyProject"
            description="Allow a trailing comma regardless of plugin version"
            defaultValue="false"
            restartRequired="false"/>
    <registryKey
            key="kotlin.formatter.allowTrailingCommaOnCallSite"
            description="Allow a trailing comma on call-site"
            defaultValue="false"
            restartRequired="false"/>
  </extensions>

  <!-- Templates -->
  <extensions defaultExtensionNs="com.intellij">
    <defaultLiveTemplates file="liveTemplates/Kotlin.xml"/>

    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.AnyVariableMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.SuitableVariableMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.FunctionParametersMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.AnonymousSuperMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.SuggestVariableNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinClassNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinFunctionNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinPackageNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinMainArgumentsMacro"/>

    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Generic"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$TopLevel"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Statement"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Class"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Expression"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Comment"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$ObjectDeclaration"/>

    <liveTemplateOptionalProcessor implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinShortenFQNamesProcessor"/>

    <defaultTemplatePropertiesProvider
            order="last"
            implementation="org.jetbrains.kotlin.idea.actions.KotlinDefaultTemplatePropertiesProvider"/>

    <codeInsight.template.postfixTemplateProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.postfix.KtPostfixTemplateProvider"/>
  </extensions>

  <!-- Line markers -->
  <extensions defaultExtensionNs="com.intellij">
    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.markers.KotlinLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinRecursiveCallLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinSuspendCallLineMarkerProvider"/>
    <runLineMarkerContributor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinRunLineMarkerContributor"/>
    <runLineMarkerContributor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinTestRunLineMarkerContributor"/>
  </extensions>

  <!-- Inlay hints -->
  <extensions defaultExtensionNs="com.intellij">
    <codeInsight.parameterNameHints language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.hints.KotlinInlayParameterHintsProvider"/>

    <codeInsight.inlayProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.hints.KotlinCodeAuthorInlayHintsProvider"/>
    <codeInsight.inlayProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.codevision.KotlinCodeVisionProvider"/>
    <codeInsight.inlayProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.hints.KotlinReferencesTypeHintsProvider"/>
    <codeInsight.inlayProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.hints.KotlinLambdasHintsProvider"/>
    <codeInsight.inlayProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.hints.KotlinCallChainHintsProvider"/>
    <codeInsight.inlayProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.hints.KotlinRangesHintsProvider"/>

    <search.projectOptionsTopHitProvider implementation="org.jetbrains.kotlin.idea.codeInsight.hints.KotlinInlayHintsTopHitProvider"/>
  </extensions>

  <!-- Go to declaration -->
  <extensions defaultExtensionNs="com.intellij">
    <gotoSymbolContributor implementation="org.jetbrains.kotlin.idea.goto.KotlinGotoSymbolContributor"/>
    <gotoPrimeSymbolContributor implementation="org.jetbrains.kotlin.idea.goto.KotlinGotoPrimeSymbolContributor"/>
    <gotoClassContributor implementation="org.jetbrains.kotlin.idea.goto.KotlinGotoClassContributor"/>
    <gotoDeclarationHandler implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinImportAliasGotoDeclarationHandler"/>
    <gotoRelatedProvider implementation="org.jetbrains.kotlin.idea.goto.KotlinExpectOrActualGotoRelatedProvider"/>

    <codeInsight.gotoSuper language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.GotoSuperActionHandler"/>

    <gotoTargetRendererProvider
            id="JetGotoTargetRenderProvider"
            order="first"
            implementation="org.jetbrains.kotlin.idea.KotlinGotoTargetRenderProvider"/>
  </extensions>

  <!-- Copy-paste -->
  <extensions defaultExtensionNs="com.intellij">
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.conversion.copy.ConvertJavaCopyPasteProcessor"/>
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.conversion.copy.ConvertTextJavaCopyPasteProcessor"/>
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinCopyPasteReferenceProcessor"/>
    <copyPastePreProcessor implementation="org.jetbrains.kotlin.idea.editor.KotlinLiteralCopyPasteProcessor"/>
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.refactoring.cutPaste.MoveDeclarationsCopyPasteProcessor"/>

    <filePasteProvider implementation="org.jetbrains.kotlin.idea.conversion.copy.KotlinFilePasteProvider" order="first"/>
  </extensions>

  <!-- Declaration search and Find Usages -->
  <extensions defaultExtensionNs="com.intellij">
    <searchEverywhereResultsEqualityProvider implementation="org.jetbrains.kotlin.idea.searcheverywhere.KtSearchEverywhereEqualityProvider"/>

    <searchEverywhereClassifier implementation="org.jetbrains.kotlin.idea.goto.KotlinSearchEverywhereClassifier"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.findUsages.KotlinFindUsagesSupport"
                    serviceImplementation="org.jetbrains.kotlin.idea.findUsages.KotlinFindUsagesSupportImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.search.KotlinSearchUsagesSupport"
                    serviceImplementation="org.jetbrains.kotlin.idea.search.KotlinSearchUsagesSupportImpl"/>

    <lang.findUsagesProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.findUsages.KotlinFindUsagesProvider"/>

    <lang.sliceProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.slicer.KotlinSliceProvider"/>

    <fileStructureGroupRuleProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinDeclarationGroupRuleProvider"/>
    <fileStructureGroupRuleProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinDeclarationSecondLevelGroupRuleProvider"/>

    <findUsagesHandlerFactory implementation="org.jetbrains.kotlin.idea.findUsages.KotlinFindUsagesHandlerFactory"/>

    <highlightUsagesHandlerFactory implementation="org.jetbrains.kotlin.idea.highlighter.KotlinHighlightExitPointsHandlerFactory"/>
    <highlightUsagesHandlerFactory implementation="org.jetbrains.kotlin.idea.highlighter.KotlinHighlightImplicitItHandlerFactory"/>

    <referencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinReferencesSearcher"/>
    <referencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinAliasedImportedElementSearcher"/>

    <directClassInheritorsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinDirectInheritorsSearcher"/>
    <overridingMethodsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinOverridingMethodsWithGenericsSearcher"/>
    <overridingMethodsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinOverridingMethodsWithFlexibleTypesSearcher"/>
    <definitionsScopedSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinDefinitionsSearcher"/>
    <annotatedElementsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinAnnotatedElementsSearcher"/>
    <classesWithAnnotatedMembersSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinClassesWithAnnotatedMembersSearcher"/>
    <useScopeOptimizer implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinDeclarationScopeOptimizer"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinPropertyAccessorsReferenceSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinConstructorDelegationCallReferenceSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinOverridingMethodReferenceSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinConventionMethodReferencesSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.DefaultAnnotationMethodKotlinImplicitReferenceSearcher"/>

    <importFilteringRule implementation="org.jetbrains.kotlin.idea.findUsages.KotlinImportFilteringRule"/>

    <targetElementEvaluator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinTargetElementEvaluator" />

    <targetElementUtilExtender implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinTargetElementEvaluator"/>

    <structuralsearch.profile implementation="org.jetbrains.kotlin.idea.structuralsearch.KotlinStructuralSearchProfile"/>
    <structuralsearch.filterProvider implementation="org.jetbrains.kotlin.idea.structuralsearch.filters.KotlinFilterProvider"/>

    <elementDescriptionProvider order="first" implementation="org.jetbrains.kotlin.idea.findUsages.KotlinElementDescriptionProvider"/>
    <elementDescriptionProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinNonCodeSearchElementDescriptionProvider"/>

    <usageContextPanelProvider implementation="org.jetbrains.kotlin.idea.slicer.KotlinUsageContextDataInflowPanel$Provider"/>
    <usageContextPanelProvider implementation="org.jetbrains.kotlin.idea.slicer.KotlinUsageContextDataOutflowPanel$Provider"/>

    <usageToPsiElementProvider implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinUsageToPsiElementProvider"/>

    <usageTypeProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinUsageTypeProviderImpl"/>

    <readWriteAccessDetector implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinReadWriteAccessDetector" id="kotlin"/>
  </extensions>

  <extensions defaultExtensionNs="com.intellij.jvm">
    <declarationSearcher language="kotlin" implementationClass="org.jetbrains.kotlin.idea.jvm.KotlinDeclarationSearcher"/>
  </extensions>

  <actions>
    <action id="Kotlin.NewFile" class="org.jetbrains.kotlin.idea.actions.NewKotlinFileAction">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewGroup1"/>
    </action>
    <action id="Kotlin.NewScript" class="org.jetbrains.kotlin.idea.actions.NewKotlinScriptAction">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFromTemplate"/>
    </action>
    <action id="Kotlin.NewWorksheet" class="org.jetbrains.kotlin.idea.actions.NewKotlinWorksheetAction">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFromTemplate"/>
    </action>

    <group id="KotlinToolsGroup" popup="true" icon="/org/jetbrains/kotlin/idea/icons/kotlin13.svg"
           class="org.jetbrains.kotlin.idea.actions.KotlinActionGroup">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </group>

    <action id="KotlinConfigureUpdates" class="org.jetbrains.kotlin.idea.actions.ConfigurePluginUpdatesAction">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <action id="CopyKotlinProjectInformation" class="org.jetbrains.kotlin.idea.actions.internal.CopyKotlinProjectOverviewAction">
    </action>

    <group id="ConvertJavaToKotlinGroup">
      <separator/>
      <action id="ConvertJavaToKotlin" class="org.jetbrains.kotlin.idea.actions.JavaToKotlinAction">
        <keyboard-shortcut keymap="$default" first-keystroke="control alt shift K"/>
      </action>
      <add-to-group group-id="CodeMenu" anchor="last"/>
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
      <add-to-group group-id="EditorTabPopupMenu" anchor="last"/>
    </group>

    <action id="KotlinCodeMigration" class="org.jetbrains.kotlin.idea.migration.CodeMigrationAction">
      <!-- TODO: Not assigned to any group because there should be a panel for filling migration options -->
    </action>
    <action id="KotlinCodeMigrationToggle" class="org.jetbrains.kotlin.idea.migration.CodeMigrationToggleAction">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <group id="KotlinGenerateGroup">
      <action id="KotlinGenerateTestMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$Test"/>
      <action id="KotlinGenerateSetUpMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$SetUp"/>
      <action id="KotlinGenerateTearDownMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$TearDown"/>
      <action id="KotlinGenerateDataMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$Data"/>
      <separator />
      <action id="KotlinGenerateSecondaryConstructor"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateSecondaryConstructorAction"/>
      <action id="KotlinGenerateEqualsAndHashCode"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateEqualsAndHashcodeAction"/>
      <action id="KotlinGenerateToString"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateToStringAction"/>

      <add-to-group group-id="GenerateGroup" anchor="first"/>
    </group>

    <group id="InternalKotlin" internal="true">
      <separator/>

      <action id="DumbModeTremble"
              class="org.jetbrains.kotlin.idea.actions.internal.DumbModeTrembleAction"/>
      <action id="HighlightingBenchmarkAction"
              class="org.jetbrains.kotlin.idea.actions.internal.benchmark.HighlightingBenchmarkAction"/>

      <group id="KotlinInternalGroup" popup="true">
        <action
                id="CacheResetOnProcessCanceledToggleAction"
                class="org.jetbrains.kotlin.idea.actions.internal.CacheResetOnProcessCanceledToggleAction"/>
        <action
                id="CheckComponentsUsageSearchAction"
                class="org.jetbrains.kotlin.idea.actions.internal.CheckComponentsUsageSearchAction"/>
        <action
                id="FindImplicitNothingAction"
                class="org.jetbrains.kotlin.idea.actions.internal.FindImplicitNothingAction"/>
        <action
                id="PrintOutNotPropertyMatches"
                class="org.jetbrains.kotlin.idea.actions.internal.SearchNotPropertyCandidatesAction"/>
        <action
                id="StoredExceptionsThrowToggleAction"
                class="org.jetbrains.kotlin.idea.actions.internal.StoredExceptionsThrowToggleAction"/>
        <action
                id="MultiplatformCompositeAnalysisToggleAction"
                class="org.jetbrains.kotlin.idea.actions.internal.MultiplatformCompositeAnalysisToggleAction"/>
        <action
                id="LibraryToSourceDependencySupportToggleAction"
                class="org.jetbrains.kotlin.idea.actions.internal.LibraryToSourceDependencySupportToggleAction"/>
        <action
                id="CopyAsDiagnosticTest"
                class="org.jetbrains.kotlin.idea.actions.internal.CopyAsDiagnosticTestAction"/>
        <action
                id="KotlinFormattingSettingsStatusAction"
                class="org.jetbrains.kotlin.idea.actions.internal.KotlinFormattingSettingsStatusAction"/>
        <action
                id="KotlinThrowException"
                class="org.jetbrains.kotlin.idea.actions.internal.KotlinThrowExceptionAction"/>

        <group id="KotlinCompletionBenchmarkGroup" popup="true">
          <action
                  id="TopLevelCompletionBenchmarkAction"
                  class="org.jetbrains.kotlin.idea.actions.internal.benchmark.TopLevelCompletionBenchmarkAction"/>

          <action
                  id="LocalCompletionBenchmarkAction"
                  class="org.jetbrains.kotlin.idea.actions.internal.benchmark.LocalCompletionBenchmarkAction"/>
        </group>
      </group>

      <separator/>

      <add-to-group group-id="Internal" anchor="last"/>
    </group>

    <action id="KotlinShellExecute" class="com.intellij.openapi.actionSystem.EmptyAction">
      <keyboard-shortcut first-keystroke="control ENTER" keymap="$default"/>
    </action>
  </actions>
</idea-plugin>