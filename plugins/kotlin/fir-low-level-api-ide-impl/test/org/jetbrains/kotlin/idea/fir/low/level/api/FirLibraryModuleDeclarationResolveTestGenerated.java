// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.low.level.api;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir-low-level-api-ide-impl")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/libraryModuleResolve")
public class FirLibraryModuleDeclarationResolveTestGenerated extends AbstractFirLibraryModuleDeclarationResolveTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("enumEntry.kt")
    public void testEnumEntry() throws Exception {
        runTest("testData/libraryModuleResolve/enumEntry.kt");
    }

    @TestMetadata("implicitJavaTypes_listOfStrings.kt")
    public void testImplicitJavaTypes_listOfStrings() throws Exception {
        runTest("testData/libraryModuleResolve/implicitJavaTypes_listOfStrings.kt");
    }

    @TestMetadata("implicitJavaTypes_string.kt")
    public void testImplicitJavaTypes_string() throws Exception {
        runTest("testData/libraryModuleResolve/implicitJavaTypes_string.kt");
    }

    @TestMetadata("implicitJavaTypes_stringFun.kt")
    public void testImplicitJavaTypes_stringFun() throws Exception {
        runTest("testData/libraryModuleResolve/implicitJavaTypes_stringFun.kt");
    }

    @TestMetadata("memberFunctionNoArgs.kt")
    public void testMemberFunctionNoArgs() throws Exception {
        runTest("testData/libraryModuleResolve/memberFunctionNoArgs.kt");
    }

    @TestMetadata("memberFunctionWithArgs.kt")
    public void testMemberFunctionWithArgs() throws Exception {
        runTest("testData/libraryModuleResolve/memberFunctionWithArgs.kt");
    }

    @TestMetadata("memberProperty.kt")
    public void testMemberProperty() throws Exception {
        runTest("testData/libraryModuleResolve/memberProperty.kt");
    }

    @TestMetadata("topLevelClass.kt")
    public void testTopLevelClass() throws Exception {
        runTest("testData/libraryModuleResolve/topLevelClass.kt");
    }

    @TestMetadata("topLevelClassPrimaryConstructor.kt")
    public void testTopLevelClassPrimaryConstructor() throws Exception {
        runTest("testData/libraryModuleResolve/topLevelClassPrimaryConstructor.kt");
    }

    @TestMetadata("topLevelClassSecondaryConstructor.kt")
    public void testTopLevelClassSecondaryConstructor() throws Exception {
        runTest("testData/libraryModuleResolve/topLevelClassSecondaryConstructor.kt");
    }

    @TestMetadata("topLevelFunctionNoArgs.kt")
    public void testTopLevelFunctionNoArgs() throws Exception {
        runTest("testData/libraryModuleResolve/topLevelFunctionNoArgs.kt");
    }

    @TestMetadata("topLevelFunctionWithArgs.kt")
    public void testTopLevelFunctionWithArgs() throws Exception {
        runTest("testData/libraryModuleResolve/topLevelFunctionWithArgs.kt");
    }

    @TestMetadata("topLevelProperty.kt")
    public void testTopLevelProperty() throws Exception {
        runTest("testData/libraryModuleResolve/topLevelProperty.kt");
    }
}
