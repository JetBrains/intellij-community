// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.inspections;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir-fe10-binding")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class Fe10BindingLocalInspectionTestGenerated extends AbstractFe10BindingLocalInspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/addOperatorModifier")
    public static class AddOperatorModifier extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("containsBool.kt")
        public void testContainsBool() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/containsBool.kt");
        }

        @TestMetadata("containsInt.kt")
        public void testContainsInt() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/containsInt.kt");
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/extension.kt");
        }

        @TestMetadata("forOverride.kt")
        public void testForOverride() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/forOverride.kt");
        }

        @TestMetadata("overridden.kt")
        public void testOverridden() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/overridden.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/simple.kt");
        }

        @TestMetadata("toplevel.kt")
        public void testToplevel() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/toplevel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument")
    public static class BooleanLiteralArgument extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/boolean.kt");
        }

        @TestMetadata("booleanLiteral.kt")
        public void testBooleanLiteral() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteral.kt");
        }

        @TestMetadata("booleanLiteralFixAll.kt")
        public void testBooleanLiteralFixAll() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralFixAll.kt");
        }

        @TestMetadata("booleanLiteralFixPart.kt")
        public void testBooleanLiteralFixPart() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralFixPart.kt");
        }

        @TestMetadata("booleanLiteralMiddle.kt")
        public void testBooleanLiteralMiddle() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralMiddle.kt");
        }

        @TestMetadata("booleanLiteralNoPrevious.kt")
        public void testBooleanLiteralNoPrevious() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralNoPrevious.kt");
        }

        @TestMetadata("hasError.kt")
        public void testHasError() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/hasError.kt");
        }

        @TestMetadata("hasName.kt")
        public void testHasName() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/hasName.kt");
        }

        @TestMetadata("hasVararg.kt")
        public void testHasVararg() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/hasVararg.kt");
        }

        @TestMetadata("intLiteral.kt")
        public void testIntLiteral() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/intLiteral.kt");
        }

        @TestMetadata("javaMethod.kt")
        public void testJavaMethod() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/javaMethod.kt");
        }

        @TestMetadata("pair.kt")
        public void testPair() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/pair.kt");
        }

        @TestMetadata("triple.kt")
        public void testTriple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/triple.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/vararg.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject")
    public static class ConvertSealedSubClassToObject extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/annotation.kt");
        }

        @TestMetadata("baseEquals.kt")
        public void testBaseEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/baseEquals.kt");
        }

        @TestMetadata("baseState.kt")
        public void testBaseState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/baseState.kt");
        }

        @TestMetadata("convertSubClassFromAnotherFile.kt")
        public void testConvertSubClassFromAnotherFile() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassFromAnotherFile.kt");
        }

        @TestMetadata("convertSubClassWithModifiers.kt")
        public void testConvertSubClassWithModifiers() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithModifiers.kt");
        }

        @TestMetadata("convertSubClassWithParentheses.kt")
        public void testConvertSubClassWithParentheses() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithParentheses.kt");
        }

        @TestMetadata("convertSubClassWithSecondaryConstructor.kt")
        public void testConvertSubClassWithSecondaryConstructor() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithSecondaryConstructor.kt");
        }

        @TestMetadata("convertSubClassWithoutParentheses.kt")
        public void testConvertSubClassWithoutParentheses() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithoutParentheses.kt");
        }

        @TestMetadata("data.kt")
        public void testData() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/data.kt");
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/enum.kt");
        }

        @TestMetadata("fakeState.kt")
        public void testFakeState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/fakeState.kt");
        }

        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/generic.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/inner.kt");
        }

        @TestMetadata("noEquals.kt")
        public void testNoEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/noEquals.kt");
        }

        @TestMetadata("nonEmptyConstructor.kt")
        public void testNonEmptyConstructor() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/nonEmptyConstructor.kt");
        }

        @TestMetadata("openSubclass.kt")
        public void testOpenSubclass() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/openSubclass.kt");
        }

        @TestMetadata("ownEquals.kt")
        public void testOwnEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/ownEquals.kt");
        }

        @TestMetadata("ownState.kt")
        public void testOwnState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/ownState.kt");
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/sealed.kt");
        }

        @TestMetadata("sealedEquals.kt")
        public void testSealedEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/sealedEquals.kt");
        }

        @TestMetadata("sealedState.kt")
        public void testSealedState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/sealedState.kt");
        }

        @TestMetadata("withCompanion.kt")
        public void testWithCompanion() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/withCompanion.kt");
        }

        @TestMetadata("withInner.kt")
        public void testWithInner() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/withInner.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/cascadeIf")
    public static class CascadeIf extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cannotIntroduceSubject.kt")
        public void testCannotIntroduceSubject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/cannotIntroduceSubject.kt");
        }

        @TestMetadata("complex.kt")
        public void testComplex() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/complex.kt");
        }

        @TestMetadata("four.kt")
        public void testFour() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/four.kt");
        }

        @TestMetadata("ifTree.kt")
        public void testIfTree() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/ifTree.kt");
        }

        @TestMetadata("insideOtherIf.kt")
        public void testInsideOtherIf() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/insideOtherIf.kt");
        }

        @TestMetadata("middleIf.kt")
        public void testMiddleIf() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/middleIf.kt");
        }

        @TestMetadata("noSecondElse.kt")
        public void testNoSecondElse() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/noSecondElse.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/normal.kt");
        }

        @TestMetadata("oneLiner.kt")
        public void testOneLiner() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/oneLiner.kt");
        }

        @TestMetadata("shortIf.kt")
        public void testShortIf() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/shortIf.kt");
        }

        @TestMetadata("withAnnotation.kt")
        public void testWithAnnotation() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/withAnnotation.kt");
        }

        @TestMetadata("withBreak.kt")
        public void testWithBreak() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/withBreak.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence")
    public abstract static class ConvertCallChainIntoSequence extends AbstractFe10BindingLocalInspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination")
        public static class Termination extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("all.kt")
            public void testAll() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/all.kt");
            }

            @TestMetadata("any.kt")
            public void testAny() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/any.kt");
            }

            @TestMetadata("asIterable.kt")
            public void testAsIterable() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/asIterable.kt");
            }

            @TestMetadata("asSequence.kt")
            public void testAsSequence() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/asSequence.kt");
            }

            @TestMetadata("assosiate.kt")
            public void testAssosiate() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/assosiate.kt");
            }

            @TestMetadata("assosiateBy.kt")
            public void testAssosiateBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/assosiateBy.kt");
            }

            @TestMetadata("assosiateByTo.kt")
            public void testAssosiateByTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/assosiateByTo.kt");
            }

            @TestMetadata("assosiateTo.kt")
            public void testAssosiateTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/assosiateTo.kt");
            }

            @TestMetadata("average.kt")
            public void testAverage() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/average.kt");
            }

            @TestMetadata("contains.kt")
            public void testContains() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/contains.kt");
            }

            @TestMetadata("count.kt")
            public void testCount() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/count.kt");
            }

            @TestMetadata("elementAt.kt")
            public void testElementAt() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/elementAt.kt");
            }

            @TestMetadata("elementAtOrElse.kt")
            public void testElementAtOrElse() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/elementAtOrElse.kt");
            }

            @TestMetadata("elementAtOrNull.kt")
            public void testElementAtOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/elementAtOrNull.kt");
            }

            @TestMetadata("filterIndexedTo.kt")
            public void testFilterIndexedTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterIndexedTo.kt");
            }

            @TestMetadata("filterIsInstanceTo.kt")
            public void testFilterIsInstanceTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterIsInstanceTo.kt");
            }

            @TestMetadata("filterNotNullTo.kt")
            public void testFilterNotNullTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterNotNullTo.kt");
            }

            @TestMetadata("filterNotTo.kt")
            public void testFilterNotTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterNotTo.kt");
            }

            @TestMetadata("filterTo.kt")
            public void testFilterTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterTo.kt");
            }

            @TestMetadata("find.kt")
            public void testFind() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/find.kt");
            }

            @TestMetadata("findLast.kt")
            public void testFindLast() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/findLast.kt");
            }

            @TestMetadata("first.kt")
            public void testFirst() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/first.kt");
            }

            @TestMetadata("firstNotNullOf.kt")
            public void testFirstNotNullOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/firstNotNullOf.kt");
            }

            @TestMetadata("firstNotNullOfOrNull.kt")
            public void testFirstNotNullOfOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/firstNotNullOfOrNull.kt");
            }

            @TestMetadata("firstOrNull.kt")
            public void testFirstOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/firstOrNull.kt");
            }

            @TestMetadata("fold.kt")
            public void testFold() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/fold.kt");
            }

            @TestMetadata("foldIndexed.kt")
            public void testFoldIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/foldIndexed.kt");
            }

            @TestMetadata("forEach.kt")
            public void testForEach() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/forEach.kt");
            }

            @TestMetadata("forEachIndexed.kt")
            public void testForEachIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/forEachIndexed.kt");
            }

            @TestMetadata("groupBy.kt")
            public void testGroupBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/groupBy.kt");
            }

            @TestMetadata("groupByTo.kt")
            public void testGroupByTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/groupByTo.kt");
            }

            @TestMetadata("groupingBy.kt")
            public void testGroupingBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/groupingBy.kt");
            }

            @TestMetadata("indexOf.kt")
            public void testIndexOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/indexOf.kt");
            }

            @TestMetadata("indexOfFirst.kt")
            public void testIndexOfFirst() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/indexOfFirst.kt");
            }

            @TestMetadata("indexOfLast.kt")
            public void testIndexOfLast() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/indexOfLast.kt");
            }

            @TestMetadata("joinTo.kt")
            public void testJoinTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/joinTo.kt");
            }

            @TestMetadata("joinToString.kt")
            public void testJoinToString() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/joinToString.kt");
            }

            @TestMetadata("last.kt")
            public void testLast() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/last.kt");
            }

            @TestMetadata("lastIndexOf.kt")
            public void testLastIndexOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/lastIndexOf.kt");
            }

            @TestMetadata("lastOrNull.kt")
            public void testLastOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/lastOrNull.kt");
            }

            @TestMetadata("mapIndexedNotNullTo.kt")
            public void testMapIndexedNotNullTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/mapIndexedNotNullTo.kt");
            }

            @TestMetadata("mapIndexedTo.kt")
            public void testMapIndexedTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/mapIndexedTo.kt");
            }

            @TestMetadata("mapNotNullTo.kt")
            public void testMapNotNullTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/mapNotNullTo.kt");
            }

            @TestMetadata("mapTo.kt")
            public void testMapTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/mapTo.kt");
            }

            @TestMetadata("maxByOrNull.kt")
            public void testMaxByOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxByOrNull.kt");
            }

            @TestMetadata("maxOf.kt")
            public void testMaxOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOf.kt");
            }

            @TestMetadata("maxOfOrNull.kt")
            public void testMaxOfOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOfOrNull.kt");
            }

            @TestMetadata("maxOfWith.kt")
            public void testMaxOfWith() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOfWith.kt");
            }

            @TestMetadata("maxOfWithOrNull.kt")
            public void testMaxOfWithOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOfWithOrNull.kt");
            }

            @TestMetadata("maxOrNull.kt")
            public void testMaxOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOrNull.kt");
            }

            @TestMetadata("maxWithOrNull.kt")
            public void testMaxWithOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxWithOrNull.kt");
            }

            @TestMetadata("minByOrNull.kt")
            public void testMinByOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minByOrNull.kt");
            }

            @TestMetadata("minOf.kt")
            public void testMinOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOf.kt");
            }

            @TestMetadata("minOfOrNull.kt")
            public void testMinOfOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOfOrNull.kt");
            }

            @TestMetadata("minOfWith.kt")
            public void testMinOfWith() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOfWith.kt");
            }

            @TestMetadata("minOfWithOrNull.kt")
            public void testMinOfWithOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOfWithOrNull.kt");
            }

            @TestMetadata("minOrNull.kt")
            public void testMinOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOrNull.kt");
            }

            @TestMetadata("minWithOrNull.kt")
            public void testMinWithOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minWithOrNull.kt");
            }

            @TestMetadata("none.kt")
            public void testNone() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/none.kt");
            }

            @TestMetadata("partition.kt")
            public void testPartition() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/partition.kt");
            }

            @TestMetadata("reduce.kt")
            public void testReduce() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/reduce.kt");
            }

            @TestMetadata("reduceIndexed.kt")
            public void testReduceIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/reduceIndexed.kt");
            }

            @TestMetadata("reduceIndexedOrNull.kt")
            public void testReduceIndexedOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/reduceIndexedOrNull.kt");
            }

            @TestMetadata("reduceOrNull.kt")
            public void testReduceOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/reduceOrNull.kt");
            }

            @TestMetadata("runningFold.kt")
            public void testRunningFold() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/runningFold.kt");
            }

            @TestMetadata("runningFoldIndexed.kt")
            public void testRunningFoldIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/runningFoldIndexed.kt");
            }

            @TestMetadata("runningReduce.kt")
            public void testRunningReduce() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/runningReduce.kt");
            }

            @TestMetadata("runningReduceIndexed.kt")
            public void testRunningReduceIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/runningReduceIndexed.kt");
            }

            @TestMetadata("scan.kt")
            public void testScan() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/scan.kt");
            }

            @TestMetadata("scanIndexed.kt")
            public void testScanIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/scanIndexed.kt");
            }

            @TestMetadata("single.kt")
            public void testSingle() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/single.kt");
            }

            @TestMetadata("singleOrNull.kt")
            public void testSingleOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/singleOrNull.kt");
            }

            @TestMetadata("sum.kt")
            public void testSum() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/sum.kt");
            }

            @TestMetadata("sumBy.kt")
            public void testSumBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/sumBy.kt");
            }

            @TestMetadata("sumByDouble.kt")
            public void testSumByDouble() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/sumByDouble.kt");
            }

            @TestMetadata("sumOf.kt")
            public void testSumOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/sumOf.kt");
            }

            @TestMetadata("toCollection.kt")
            public void testToCollection() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toCollection.kt");
            }

            @TestMetadata("toHashSet.kt")
            public void testToHashSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toHashSet.kt");
            }

            @TestMetadata("toList.kt")
            public void testToList() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toList.kt");
            }

            @TestMetadata("toMutableList.kt")
            public void testToMutableList() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toMutableList.kt");
            }

            @TestMetadata("toMutableSet.kt")
            public void testToMutableSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toMutableSet.kt");
            }

            @TestMetadata("toSet.kt")
            public void testToSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toSet.kt");
            }

            @TestMetadata("toSortedSet.kt")
            public void testToSortedSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toSortedSet.kt");
            }

            @TestMetadata("unzip.kt")
            public void testUnzip() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/unzip.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence")
        public static class Uncategorized extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("allTransformations.kt")
            public void testAllTransformations() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/allTransformations.kt");
            }

            @TestMetadata("comment.kt")
            public void testComment() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/comment.kt");
            }

            @TestMetadata("comment2.kt")
            public void testComment2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/comment2.kt");
            }

            @TestMetadata("endsWithGroupingBy.kt")
            public void testEndsWithGroupingBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/endsWithGroupingBy.kt");
            }

            @TestMetadata("flatten.kt")
            public void testFlatten() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/flatten.kt");
            }

            @TestMetadata("flatten2.kt")
            public void testFlatten2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/flatten2.kt");
            }

            @TestMetadata("implicitReceiver.kt")
            public void testImplicitReceiver() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/implicitReceiver.kt");
            }

            @TestMetadata("iterable.kt")
            public void testIterable() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/iterable.kt");
            }

            @TestMetadata("iterable2.kt")
            public void testIterable2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/iterable2.kt");
            }

            @TestMetadata("mutableList.kt")
            public void testMutableList() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/mutableList.kt");
            }

            @TestMetadata("mutableSet.kt")
            public void testMutableSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/mutableSet.kt");
            }

            @TestMetadata("noTargetCallChain.kt")
            public void testNoTargetCallChain() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetCallChain.kt");
            }

            @TestMetadata("noTargetCallChain2.kt")
            public void testNoTargetCallChain2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetCallChain2.kt");
            }

            @TestMetadata("noTargetCallChain3.kt")
            public void testNoTargetCallChain3() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetCallChain3.kt");
            }

            @TestMetadata("noTargetTermination.kt")
            public void testNoTargetTermination() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetTermination.kt");
            }

            @TestMetadata("noTargetTermination2.kt")
            public void testNoTargetTermination2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetTermination2.kt");
            }

            @TestMetadata("nullable.kt")
            public void testNullable() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/nullable.kt");
            }

            @TestMetadata("nullable2.kt")
            public void testNullable2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/nullable2.kt");
            }

            @TestMetadata("return.kt")
            public void testReturn() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/return.kt");
            }

            @TestMetadata("returnAtLabels.kt")
            public void testReturnAtLabels() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/returnAtLabels.kt");
            }

            @TestMetadata("set.kt")
            public void testSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/set.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/simple.kt");
            }

            @TestMetadata("simple2.kt")
            public void testSimple2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/simple2.kt");
            }

            @TestMetadata("simple3.kt")
            public void testSimple3() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/simple3.kt");
            }

            @TestMetadata("simple4.kt")
            public void testSimple4() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/simple4.kt");
            }

            @TestMetadata("startsWithGroupingBy.kt")
            public void testStartsWithGroupingBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/startsWithGroupingBy.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/convertNaNEquality")
    public static class ConvertNaNEquality extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/float.kt");
        }

        @TestMetadata("importedProperty.kt")
        public void testImportedProperty() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/importedProperty.kt");
        }

        @TestMetadata("inequality.kt")
        public void testInequality() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/inequality.kt");
        }

        @TestMetadata("javaDouble.kt")
        public void testJavaDouble() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/javaDouble.kt");
        }

        @TestMetadata("javaFloatNaN.kt")
        public void testJavaFloatNaN() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/javaFloatNaN.kt");
        }

        @TestMetadata("negative.kt")
        public void testNegative() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/negative.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/convertPairConstructorToToFunction")
    public static class ConvertPairConstructorToToFunction extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("invalidArgs.kt")
        public void testInvalidArgs() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertPairConstructorToToFunction/invalidArgs.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertPairConstructorToToFunction/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/copyWithoutNamedArguments")
    public static class CopyWithoutNamedArguments extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/copyWithoutNamedArguments/base.kt");
        }

        @TestMetadata("notAllNamed.kt")
        public void testNotAllNamed() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/copyWithoutNamedArguments/notAllNamed.kt");
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/copyWithoutNamedArguments/this.kt");
        }
    }
}
