// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.completion;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../completion/testData/dumb")
public class FirDumbCompletionTestGenerated extends AbstractFirDumbCompletionTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K2;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("Class.kt")
    public void testClass() throws Exception {
        runTest("../../completion/testData/dumb/Class.kt");
    }

    @TestMetadata("ClassScope.kt")
    public void testClassScope() throws Exception {
        runTest("../../completion/testData/dumb/ClassScope.kt");
    }

    @TestMetadata("ClassScopeMembers.kt")
    public void testClassScopeMembers() throws Exception {
        runTest("../../completion/testData/dumb/ClassScopeMembers.kt");
    }

    @TestMetadata("ClassSecondaryConstructorParametersCanBeUsed.kt")
    public void testClassSecondaryConstructorParametersCanBeUsed() throws Exception {
        runTest("../../completion/testData/dumb/ClassSecondaryConstructorParametersCanBeUsed.kt");
    }

    @TestMetadata("ClassSecondaryConstructorParametersDoNotLeak.kt")
    public void testClassSecondaryConstructorParametersDoNotLeak() throws Exception {
        runTest("../../completion/testData/dumb/ClassSecondaryConstructorParametersDoNotLeak.kt");
    }

    @TestMetadata("ClassValParametersDoNotLeak.kt")
    public void testClassValParametersDoNotLeak() throws Exception {
        runTest("../../completion/testData/dumb/ClassValParametersDoNotLeak.kt");
    }

    @TestMetadata("ClassValParametersExistInClass.kt")
    public void testClassValParametersExistInClass() throws Exception {
        runTest("../../completion/testData/dumb/ClassValParametersExistInClass.kt");
    }

    @TestMetadata("CompanionObjectScopeDoesNotLeak.kt")
    public void testCompanionObjectScopeDoesNotLeak() throws Exception {
        runTest("../../completion/testData/dumb/CompanionObjectScopeDoesNotLeak.kt");
    }

    @TestMetadata("CompanionObjectScopeInside.kt")
    public void testCompanionObjectScopeInside() throws Exception {
        runTest("../../completion/testData/dumb/CompanionObjectScopeInside.kt");
    }

    @TestMetadata("CompanionObjectScopeOutside.kt")
    public void testCompanionObjectScopeOutside() throws Exception {
        runTest("../../completion/testData/dumb/CompanionObjectScopeOutside.kt");
    }

    @TestMetadata("CompanionObjectScopeShouldNotRecordReceiver.kt")
    public void testCompanionObjectScopeShouldNotRecordReceiver() throws Exception {
        runTest("../../completion/testData/dumb/CompanionObjectScopeShouldNotRecordReceiver.kt");
    }

    @TestMetadata("DetectImportedFunction.kt")
    public void testDetectImportedFunction() throws Exception {
        runTest("../../completion/testData/dumb/DetectImportedFunction.kt");
    }

    @TestMetadata("DetectImportedMethod.kt")
    public void testDetectImportedMethod() throws Exception {
        runTest("../../completion/testData/dumb/DetectImportedMethod.kt");
    }

    @TestMetadata("DetectImportedProperty.kt")
    public void testDetectImportedProperty() throws Exception {
        runTest("../../completion/testData/dumb/DetectImportedProperty.kt");
    }

    @TestMetadata("DetectUsedExtensions.kt")
    public void testDetectUsedExtensions() throws Exception {
        runTest("../../completion/testData/dumb/DetectUsedExtensions.kt");
    }

    @TestMetadata("DetectUsedExtensionsWithReceiver.kt")
    public void testDetectUsedExtensionsWithReceiver() throws Exception {
        runTest("../../completion/testData/dumb/DetectUsedExtensionsWithReceiver.kt");
    }

    @TestMetadata("DetectUsedParameterTypes.kt")
    public void testDetectUsedParameterTypes() throws Exception {
        runTest("../../completion/testData/dumb/DetectUsedParameterTypes.kt");
    }

    @TestMetadata("DetectUsedProperty.kt")
    public void testDetectUsedProperty() throws Exception {
        runTest("../../completion/testData/dumb/DetectUsedProperty.kt");
    }

    @TestMetadata("DoNotCompleteInComment.kt")
    public void testDoNotCompleteInComment() throws Exception {
        runTest("../../completion/testData/dumb/DoNotCompleteInComment.kt");
    }

    @TestMetadata("DoNotCompleteInString.kt")
    public void testDoNotCompleteInString() throws Exception {
        runTest("../../completion/testData/dumb/DoNotCompleteInString.kt");
    }

    @TestMetadata("DoNotCompleteNumber.kt")
    public void testDoNotCompleteNumber() throws Exception {
        runTest("../../completion/testData/dumb/DoNotCompleteNumber.kt");
    }

    @TestMetadata("DoNotShowExtensionFunctionWithoutReceiver.kt")
    public void testDoNotShowExtensionFunctionWithoutReceiver() throws Exception {
        runTest("../../completion/testData/dumb/DoNotShowExtensionFunctionWithoutReceiver.kt");
    }

    @TestMetadata("ExtensionProperty.kt")
    public void testExtensionProperty() throws Exception {
        runTest("../../completion/testData/dumb/ExtensionProperty.kt");
    }

    @TestMetadata("ForLoopDeclarationInBody.kt")
    public void testForLoopDeclarationInBody() throws Exception {
        runTest("../../completion/testData/dumb/ForLoopDeclarationInBody.kt");
    }

    @TestMetadata("ForLoopDeclarationShouldNotLeak.kt")
    public void testForLoopDeclarationShouldNotLeak() throws Exception {
        runTest("../../completion/testData/dumb/ForLoopDeclarationShouldNotLeak.kt");
    }

    @TestMetadata("Function.kt")
    public void testFunction() throws Exception {
        runTest("../../completion/testData/dumb/Function.kt");
    }

    @TestMetadata("FunctionType.kt")
    public void testFunctionType() throws Exception {
        runTest("../../completion/testData/dumb/FunctionType.kt");
    }

    @TestMetadata("GlobalScopeIsGlobal.kt")
    public void testGlobalScopeIsGlobal() throws Exception {
        runTest("../../completion/testData/dumb/GlobalScopeIsGlobal.kt");
    }

    @TestMetadata("IgnoreOperators.kt")
    public void testIgnoreOperators() throws Exception {
        runTest("../../completion/testData/dumb/IgnoreOperators.kt");
    }

    @TestMetadata("IgnorePackageImports.kt")
    public void testIgnorePackageImports() throws Exception {
        runTest("../../completion/testData/dumb/IgnorePackageImports.kt");
    }

    @TestMetadata("IgnoreSuperAsName.kt")
    public void testIgnoreSuperAsName() throws Exception {
        runTest("../../completion/testData/dumb/IgnoreSuperAsName.kt");
    }

    @TestMetadata("IgnoreThisAsName.kt")
    public void testIgnoreThisAsName() throws Exception {
        runTest("../../completion/testData/dumb/IgnoreThisAsName.kt");
    }

    @TestMetadata("Keywords.kt")
    public void testKeywords() throws Exception {
        runTest("../../completion/testData/dumb/Keywords.kt");
    }

    @TestMetadata("LocalOrdering.kt")
    public void testLocalOrdering() throws Exception {
        runTest("../../completion/testData/dumb/LocalOrdering.kt");
    }

    @TestMetadata("LocalOrderingMembers.kt")
    public void testLocalOrderingMembers() throws Exception {
        runTest("../../completion/testData/dumb/LocalOrderingMembers.kt");
    }

    @TestMetadata("LocalScopeIsLocal.kt")
    public void testLocalScopeIsLocal() throws Exception {
        runTest("../../completion/testData/dumb/LocalScopeIsLocal.kt");
    }

    @TestMetadata("MemberProperty.kt")
    public void testMemberProperty() throws Exception {
        runTest("../../completion/testData/dumb/MemberProperty.kt");
    }

    @TestMetadata("Method.kt")
    public void testMethod() throws Exception {
        runTest("../../completion/testData/dumb/Method.kt");
    }

    @TestMetadata("ParametersDoNotLeak.kt")
    public void testParametersDoNotLeak() throws Exception {
        runTest("../../completion/testData/dumb/ParametersDoNotLeak.kt");
    }

    @TestMetadata("ReceiverFunctionWithDot.kt")
    public void testReceiverFunctionWithDot() throws Exception {
        runTest("../../completion/testData/dumb/ReceiverFunctionWithDot.kt");
    }

    @TestMetadata("ReceiverFunctionWithoutDot.kt")
    public void testReceiverFunctionWithoutDot() throws Exception {
        runTest("../../completion/testData/dumb/ReceiverFunctionWithoutDot.kt");
    }

    @TestMetadata("Scoping.kt")
    public void testScoping() throws Exception {
        runTest("../../completion/testData/dumb/Scoping.kt");
    }

    @TestMetadata("StdlibDeclarations.kt")
    public void testStdlibDeclarations() throws Exception {
        runTest("../../completion/testData/dumb/StdlibDeclarations.kt");
    }

    @TestMetadata("StringTemplate.kt")
    public void testStringTemplate() throws Exception {
        runTest("../../completion/testData/dumb/StringTemplate.kt");
    }

    @TestMetadata("ValueTypes.kt")
    public void testValueTypes() throws Exception {
        runTest("../../completion/testData/dumb/ValueTypes.kt");
    }
}
