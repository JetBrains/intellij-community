// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.documentation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class FirQuickDocTestGenerated extends AbstractFirQuickDocTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/editor/quickDoc")
    public static class QuickDoc extends AbstractFirQuickDocTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("AbstractCallableInClass.kt")
        public void testAbstractCallableInClass() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AbstractCallableInClass.kt");
        }

        @TestMetadata("AbstractCallableInInterface.kt")
        public void testAbstractCallableInInterface() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AbstractCallableInInterface.kt");
        }

        @TestMetadata("Annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/Annotation.kt");
        }

        @TestMetadata("AnnotationWithUseSite1.kt")
        public void testAnnotationWithUseSite1() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AnnotationWithUseSite1.kt");
        }

        @TestMetadata("AnnotationWithUseSite2.kt")
        public void testAnnotationWithUseSite2() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AnnotationWithUseSite2.kt");
        }

        @TestMetadata("AnonymousObjectLocalVariable.kt")
        public void testAnonymousObjectLocalVariable() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AnonymousObjectLocalVariable.kt");
        }

        @TestMetadata("AtConstantWithUnderscore.kt")
        public void testAtConstantWithUnderscore() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AtConstantWithUnderscore.kt");
        }

        @TestMetadata("AtFunctionParameter.kt")
        public void testAtFunctionParameter() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AtFunctionParameter.kt");
        }

        @TestMetadata("AtImplicitLambdaParametEnd.kt")
        public void testAtImplicitLambdaParametEnd() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AtImplicitLambdaParametEnd.kt");
        }

        @TestMetadata("AtImplicitLambdaParameter.kt")
        public void testAtImplicitLambdaParameter() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AtImplicitLambdaParameter.kt");
        }

        @TestMetadata("AtLocalClass.kt")
        public void testAtLocalClass() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AtLocalClass.kt");
        }

        @TestMetadata("AtLocalFunction.kt")
        public void testAtLocalFunction() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AtLocalFunction.kt");
        }

        @TestMetadata("AtTypeParameter.kt")
        public void testAtTypeParameter() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AtTypeParameter.kt");
        }

        @TestMetadata("AtVariableDeclaration.kt")
        public void testAtVariableDeclaration() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/AtVariableDeclaration.kt");
        }

        @TestMetadata("ClassPropertyWithInitializer.kt")
        public void testClassPropertyWithInitializer() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/ClassPropertyWithInitializer.kt");
        }

        @TestMetadata("ConstDefaultLongParameterValue.kt")
        public void testConstDefaultLongParameterValue() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/ConstDefaultLongParameterValue.kt");
        }

        @TestMetadata("ConstDefaultParameter.kt")
        public void testConstDefaultParameter() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/ConstDefaultParameter.kt");
        }

        @TestMetadata("ConstructorVarParameter.kt")
        public void testConstructorVarParameter() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/ConstructorVarParameter.kt");
        }

        @TestMetadata("ConstructorVarVarargParameter.kt")
        public void testConstructorVarVarargParameter() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/ConstructorVarVarargParameter.kt");
        }

        @TestMetadata("DataClass.kt")
        public void testDataClass() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/DataClass.kt");
        }

        @TestMetadata("DataClassOnConstructor.kt")
        public void testDataClassOnConstructor() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/DataClassOnConstructor.kt");
        }

        @TestMetadata("DefinitelyNonNullType.kt")
        public void testDefinitelyNonNullType() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/DefinitelyNonNullType.kt");
        }

        @TestMetadata("DeprecationWithReplaceInfo.kt")
        public void testDeprecationWithReplaceInfo() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/DeprecationWithReplaceInfo.kt");
        }

        @TestMetadata("EscapeHtmlInsideCodeBlocks.kt")
        public void testEscapeHtmlInsideCodeBlocks() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/EscapeHtmlInsideCodeBlocks.kt");
        }

        @TestMetadata("ExtensionReceiver.kt")
        public void testExtensionReceiver() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/ExtensionReceiver.kt");
        }

        @TestMetadata("ExtensionReceiverEnd.kt")
        public void testExtensionReceiverEnd() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/ExtensionReceiverEnd.kt");
        }

        @TestMetadata("Formatting.kt")
        public void testFormatting() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/Formatting.kt");
        }

        @TestMetadata("FromStdlib.kt")
        public void testFromStdlib() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/FromStdlib.kt");
        }

        @TestMetadata("FunctionTypeParameter.kt")
        public void testFunctionTypeParameter() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/FunctionTypeParameter.kt");
        }

        @TestMetadata("FunctionalReceiver.kt")
        public void testFunctionalReceiver() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/FunctionalReceiver.kt");
        }

        @TestMetadata("IndentedCodeBlock.kt")
        public void testIndentedCodeBlock() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/IndentedCodeBlock.kt");
        }

        @TestMetadata("InlineClass.kt")
        public void testInlineClass() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/InlineClass.kt");
        }

        @TestMetadata("InlineValueClass.kt")
        public void testInlineValueClass() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/InlineValueClass.kt");
        }

        @TestMetadata("JavaClassConstructorUsedInKotlin.kt")
        public void testJavaClassConstructorUsedInKotlin() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/JavaClassConstructorUsedInKotlin.kt");
        }

        @TestMetadata("JavaClassUsedInKotlin.kt")
        public void testJavaClassUsedInKotlin() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/JavaClassUsedInKotlin.kt");
        }

        @TestMetadata("JavaDocFromOverridenClass.kt")
        public void testJavaDocFromOverridenClass() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/JavaDocFromOverridenClass.kt");
        }

        @TestMetadata("JavaDocFromOverridenInterface.kt")
        public void testJavaDocFromOverridenInterface() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/JavaDocFromOverridenInterface.kt");
        }

        @TestMetadata("JavaMethodUsedInKotlin.kt")
        public void testJavaMethodUsedInKotlin() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/JavaMethodUsedInKotlin.kt");
        }

        @TestMetadata("JavaMethodUsedInKotlinInParen.kt")
        public void testJavaMethodUsedInKotlinInParen() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/JavaMethodUsedInKotlinInParen.kt");
        }

        @TestMetadata("JvmFieldAnnotation.kt")
        public void testJvmFieldAnnotation() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/JvmFieldAnnotation.kt");
        }

        @TestMetadata("KotlinClassUsedFromJava.java")
        public void testKotlinClassUsedFromJava() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/KotlinClassUsedFromJava.java");
        }

        @TestMetadata("KotlinPackageClassUsedFromJava.java")
        public void testKotlinPackageClassUsedFromJava() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/KotlinPackageClassUsedFromJava.java");
        }

        @TestMetadata("Lateinit.kt")
        public void testLateinit() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/Lateinit.kt");
        }

        @TestMetadata("LateinitName.kt")
        public void testLateinitName() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/LateinitName.kt");
        }

        @TestMetadata("MethodFromStdLib.kt")
        public void testMethodFromStdLib() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/MethodFromStdLib.kt");
        }

        @TestMetadata("NoDefaultValueForValParameter.kt")
        public void testNoDefaultValueForValParameter() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/NoDefaultValueForValParameter.kt");
        }

        @TestMetadata("ObjectLiteral.kt")
        public void testObjectLiteral() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/ObjectLiteral.kt");
        }

        @TestMetadata("OnActualDeclaration.kt")
        public void testOnActualDeclaration() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnActualDeclaration.kt");
        }

        @TestMetadata("OnActualDeclarationWithInheritedDoc.kt")
        public void testOnActualDeclarationWithInheritedDoc() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnActualDeclarationWithInheritedDoc.kt");
        }

        @TestMetadata("OnActualValueParameterDeclaration.kt")
        public void testOnActualValueParameterDeclaration() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnActualValueParameterDeclaration.kt");
        }

        @TestMetadata("OnClassDeclarationWithComplexKDoc.kt")
        public void testOnClassDeclarationWithComplexKDoc() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnClassDeclarationWithComplexKDoc.kt");
        }

        @TestMetadata("OnClassDeclarationWithNoPackage.kt")
        public void testOnClassDeclarationWithNoPackage() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnClassDeclarationWithNoPackage.kt");
        }

        @TestMetadata("OnCompanionObject.kt")
        public void testOnCompanionObject() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnCompanionObject.kt");
        }

        @TestMetadata("OnEmptySecondaryConstructor.kt")
        public void testOnEmptySecondaryConstructor() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnEmptySecondaryConstructor.kt");
        }

        @TestMetadata("OnEnumClassReference.kt")
        public void testOnEnumClassReference() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnEnumClassReference.kt");
        }

        @TestMetadata("OnEnumDeclaration.kt")
        public void testOnEnumDeclaration() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnEnumDeclaration.kt");
        }

        @TestMetadata("OnEnumEntries.kt")
        public void testOnEnumEntries() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnEnumEntries.kt");
        }

        @TestMetadata("OnEnumEntry.kt")
        public void testOnEnumEntry() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnEnumEntry.kt");
        }

        @TestMetadata("OnEnumEntryUsage.kt")
        public void testOnEnumEntryUsage() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnEnumEntryUsage.kt");
        }

        @TestMetadata("OnEnumUsage.kt")
        public void testOnEnumUsage() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnEnumUsage.kt");
        }

        @TestMetadata("OnEnumValueOfFunction.kt")
        public void testOnEnumValueOfFunction() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnEnumValueOfFunction.kt");
        }

        @TestMetadata("OnEnumValuesFunction.kt")
        public void testOnEnumValuesFunction() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnEnumValuesFunction.kt");
        }

        @TestMetadata("OnFunctionDeclarationWithGFMTable.kt")
        public void testOnFunctionDeclarationWithGFMTable() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnFunctionDeclarationWithGFMTable.kt");
        }

        @TestMetadata("OnFunctionDeclarationWithPackage.kt")
        public void testOnFunctionDeclarationWithPackage() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnFunctionDeclarationWithPackage.kt");
        }

        @TestMetadata("OnInheritedMethodUsage.kt")
        public void testOnInheritedMethodUsage() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnInheritedMethodUsage.kt");
        }

        @TestMetadata("OnInheritedPropertyUsage.kt")
        public void testOnInheritedPropertyUsage() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnInheritedPropertyUsage.kt");
        }

        @TestMetadata("OnMethodUsage.kt")
        public void testOnMethodUsage() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsage.kt");
        }

        @TestMetadata("OnMethodUsageInParen.kt")
        public void testOnMethodUsageInParen() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageInParen.kt");
        }

        @TestMetadata("OnMethodUsageMultiline.kt")
        public void testOnMethodUsageMultiline() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageMultiline.kt");
        }

        @TestMetadata("OnMethodUsageWithBracketsInParam.kt")
        public void testOnMethodUsageWithBracketsInParam() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageWithBracketsInParam.kt");
        }

        @TestMetadata("OnMethodUsageWithCodeBlock.kt")
        public void testOnMethodUsageWithCodeBlock() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageWithCodeBlock.kt");
        }

        @TestMetadata("OnMethodUsageWithMarkdown.kt")
        public void testOnMethodUsageWithMarkdown() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageWithMarkdown.kt");
        }

        @TestMetadata("OnMethodUsageWithMultilineParam.kt")
        public void testOnMethodUsageWithMultilineParam() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageWithMultilineParam.kt");
        }

        @TestMetadata("OnMethodUsageWithReceiver.kt")
        public void testOnMethodUsageWithReceiver() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageWithReceiver.kt");
        }

        @TestMetadata("OnMethodUsageWithReturnAndLink.kt")
        public void testOnMethodUsageWithReturnAndLink() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageWithReturnAndLink.kt");
        }

        @TestMetadata("OnMethodUsageWithReturnAndThrows.kt")
        public void testOnMethodUsageWithReturnAndThrows() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageWithReturnAndThrows.kt");
        }

        @TestMetadata("OnMethodUsageWithSee.kt")
        public void testOnMethodUsageWithSee() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageWithSee.kt");
        }

        @TestMetadata("OnMethodUsageWithTypeParameter.kt")
        public void testOnMethodUsageWithTypeParameter() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnMethodUsageWithTypeParameter.kt");
        }

        @TestMetadata("OnPrimaryConstructorAnnotatedWithConstructorTag.kt")
        public void testOnPrimaryConstructorAnnotatedWithConstructorTag() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnPrimaryConstructorAnnotatedWithConstructorTag.kt");
        }

        @TestMetadata("OnPropertyUsageDocumentedWithPropertyTag.kt")
        public void testOnPropertyUsageDocumentedWithPropertyTag() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/OnPropertyUsageDocumentedWithPropertyTag.kt");
        }

        @TestMetadata("PropertiesInConstructor.kt")
        public void testPropertiesInConstructor() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/PropertiesInConstructor.kt");
        }

        @TestMetadata("QualifiedNameDocLink.kt")
        public void testQualifiedNameDocLink() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/QualifiedNameDocLink.kt");
        }

        @TestMetadata("renderAnnotatedExtensionFunctionType.kt")
        public void testRenderAnnotatedExtensionFunctionType() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/renderAnnotatedExtensionFunctionType.kt");
        }

        @TestMetadata("Samples.kt")
        public void testSamples() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/Samples.kt");
        }

        @TestMetadata("SuperConstructorWithArgs.kt")
        public void testSuperConstructorWithArgs() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/SuperConstructorWithArgs.kt");
        }

        @TestMetadata("Tailrec.kt")
        public void testTailrec() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/Tailrec.kt");
        }

        @TestMetadata("TailrecFunction.kt")
        public void testTailrecFunction() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/TailrecFunction.kt");
        }

        @TestMetadata("TailrecName.kt")
        public void testTailrecName() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/TailrecName.kt");
        }

        @TestMetadata("TopLevelMethodFromJava.java")
        public void testTopLevelMethodFromJava() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/TopLevelMethodFromJava.java");
        }

        @TestMetadata("TypeNamesFromStdLibNavigation.kt")
        public void testTypeNamesFromStdLibNavigation() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/TypeNamesFromStdLibNavigation.kt");
        }

        @TestMetadata("TypeParameterConstraints.kt")
        public void testTypeParameterConstraints() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/TypeParameterConstraints.kt");
        }

        @TestMetadata("UnresolvedAnnotation.kt")
        public void testUnresolvedAnnotation() throws Exception {
            runTest("../../idea/tests/testData/editor/quickDoc/UnresolvedAnnotation.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc")
    public abstract static class Misc extends AbstractFirQuickDocTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/classes")
        public static class Classes extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ClassLocationA.kt")
            public void testClassLocationA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationA.kt");
            }

            @TestMetadata("ClassLocationB.kt")
            public void testClassLocationB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationB.kt");
            }

            @TestMetadata("ClassLocationC.kt")
            public void testClassLocationC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationC.kt");
            }

            @TestMetadata("ClassLocationD.kt")
            public void testClassLocationD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationD.kt");
            }

            @TestMetadata("ClassLocationE.kt")
            public void testClassLocationE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationE.kt");
            }

            @TestMetadata("ClassLocationF.kt")
            public void testClassLocationF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationF.kt");
            }

            @TestMetadata("ClassLocationG.kt")
            public void testClassLocationG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationG.kt");
            }

            @TestMetadata("ClassLocationH.kt")
            public void testClassLocationH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationH.kt");
            }

            @TestMetadata("ClassLocationI.kt")
            public void testClassLocationI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationI.kt");
            }

            @TestMetadata("ClassLocationJ.kt")
            public void testClassLocationJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationJ.kt");
            }

            @TestMetadata("ClassLocationK.kt")
            public void testClassLocationK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationK.kt");
            }

            @TestMetadata("ClassLocationL.kt")
            public void testClassLocationL() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationL.kt");
            }

            @TestMetadata("ClassLocationM.kt")
            public void testClassLocationM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationM.kt");
            }

            @TestMetadata("ClassLocationN.kt")
            public void testClassLocationN() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassLocationN.kt");
            }

            @TestMetadata("ClassModifierAEnum.kt")
            public void testClassModifierAEnum() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierAEnum.kt");
            }

            @TestMetadata("ClassModifierBSealed.kt")
            public void testClassModifierBSealed() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierBSealed.kt");
            }

            @TestMetadata("ClassModifierCAnnotation.kt")
            public void testClassModifierCAnnotation() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierCAnnotation.kt");
            }

            @TestMetadata("ClassModifierContainerA.kt")
            public void testClassModifierContainerA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierContainerA.kt");
            }

            @TestMetadata("ClassModifierDData.kt")
            public void testClassModifierDData() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierDData.kt");
            }

            @TestMetadata("ClassModifierEInline.kt")
            public void testClassModifierEInline() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierEInline.kt");
            }

            @TestMetadata("ClassModifierEValue.kt")
            public void testClassModifierEValue() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierEValue.kt");
            }

            @TestMetadata("ClassModifierF.kt")
            public void testClassModifierF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierF.kt");
            }

            @TestMetadata("ClassModifierG.kt")
            public void testClassModifierG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierG.kt");
            }

            @TestMetadata("ClassModifierH.kt")
            public void testClassModifierH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierH.kt");
            }

            @TestMetadata("ClassModifierI.kt")
            public void testClassModifierI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierI.kt");
            }

            @TestMetadata("ClassModifierJ.kt")
            public void testClassModifierJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierJ.kt");
            }

            @TestMetadata("ClassModifierK.kt")
            public void testClassModifierK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierK.kt");
            }

            @TestMetadata("ClassModifierL.kt")
            public void testClassModifierL() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierL.kt");
            }

            @TestMetadata("ClassModifierM.kt")
            public void testClassModifierM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierM.kt");
            }

            @TestMetadata("ClassModifierN.kt")
            public void testClassModifierN() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierN.kt");
            }

            @TestMetadata("ClassModifierO.kt")
            public void testClassModifierO() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierO.kt");
            }

            @TestMetadata("ClassModifierP.kt")
            public void testClassModifierP() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/ClassModifierP.kt");
            }

            @TestMetadata("DelegationSpecA.kt")
            public void testDelegationSpecA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecA.kt");
            }

            @TestMetadata("DelegationSpecB.kt")
            public void testDelegationSpecB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecB.kt");
            }

            @TestMetadata("DelegationSpecC.kt")
            public void testDelegationSpecC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecC.kt");
            }

            @TestMetadata("DelegationSpecD.kt")
            public void testDelegationSpecD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecD.kt");
            }

            @TestMetadata("DelegationSpecE.kt")
            public void testDelegationSpecE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecE.kt");
            }

            @TestMetadata("DelegationSpecF.kt")
            public void testDelegationSpecF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecF.kt");
            }

            @TestMetadata("DelegationSpecG.kt")
            public void testDelegationSpecG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecG.kt");
            }

            @TestMetadata("DelegationSpecH.kt")
            public void testDelegationSpecH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecH.kt");
            }

            @TestMetadata("DelegationSpecI.kt")
            public void testDelegationSpecI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecI.kt");
            }

            @TestMetadata("DelegationSpecJ.kt")
            public void testDelegationSpecJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecJ.kt");
            }

            @TestMetadata("DelegationSpecK.kt")
            public void testDelegationSpecK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecK.kt");
            }

            @TestMetadata("DelegationSpecL.kt")
            public void testDelegationSpecL() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecL.kt");
            }

            @TestMetadata("DelegationSpecM.kt")
            public void testDelegationSpecM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecM.kt");
            }

            @TestMetadata("DelegationSpecN.kt")
            public void testDelegationSpecN() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecN.kt");
            }

            @TestMetadata("DelegationSpecO.kt")
            public void testDelegationSpecO() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecO.kt");
            }

            @TestMetadata("DelegationSpecP.kt")
            public void testDelegationSpecP() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecP.kt");
            }

            @TestMetadata("DelegationSpecQ.kt")
            public void testDelegationSpecQ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecQ.kt");
            }

            @TestMetadata("DelegationSpecR.kt")
            public void testDelegationSpecR() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecR.kt");
            }

            @TestMetadata("DelegationSpecS.kt")
            public void testDelegationSpecS() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecS.kt");
            }

            @TestMetadata("DelegationSpecT.kt")
            public void testDelegationSpecT() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecT.kt");
            }

            @TestMetadata("DelegationSpecU.kt")
            public void testDelegationSpecU() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecU.kt");
            }

            @TestMetadata("DelegationSpecV.kt")
            public void testDelegationSpecV() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/DelegationSpecV.kt");
            }

            @TestMetadata("FaceModifierA.kt")
            public void testFaceModifierA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/FaceModifierA.kt");
            }

            @TestMetadata("FaceModifierB.kt")
            public void testFaceModifierB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/FaceModifierB.kt");
            }

            @TestMetadata("FaceModifierC.kt")
            public void testFaceModifierC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/FaceModifierC.kt");
            }

            @TestMetadata("FaceModifierD.kt")
            public void testFaceModifierD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/FaceModifierD.kt");
            }

            @TestMetadata("FaceModifierE.kt")
            public void testFaceModifierE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/FaceModifierE.kt");
            }

            @TestMetadata("FaceModifierF.kt")
            public void testFaceModifierF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/FaceModifierF.kt");
            }

            @TestMetadata("FaceModifierG.kt")
            public void testFaceModifierG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/FaceModifierG.kt");
            }

            @TestMetadata("FaceModifierH.kt")
            public void testFaceModifierH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/FaceModifierH.kt");
            }

            @TestMetadata("LocationContainerA.kt")
            public void testLocationContainerA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/LocationContainerA.kt");
            }

            @TestMetadata("LocationContainerB.kt")
            public void testLocationContainerB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/LocationContainerB.kt");
            }

            @TestMetadata("LocationContainerC.kt")
            public void testLocationContainerC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/LocationContainerC.kt");
            }

            @TestMetadata("LocationContainerD.kt")
            public void testLocationContainerD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/LocationContainerD.kt");
            }

            @TestMetadata("TypeParamsA.kt")
            public void testTypeParamsA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsA.kt");
            }

            @TestMetadata("TypeParamsB.kt")
            public void testTypeParamsB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsB.kt");
            }

            @TestMetadata("TypeParamsC.kt")
            public void testTypeParamsC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsC.kt");
            }

            @TestMetadata("TypeParamsD.kt")
            public void testTypeParamsD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsD.kt");
            }

            @TestMetadata("TypeParamsE.kt")
            public void testTypeParamsE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsE.kt");
            }

            @TestMetadata("TypeParamsF.kt")
            public void testTypeParamsF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsF.kt");
            }

            @TestMetadata("TypeParamsG.kt")
            public void testTypeParamsG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsG.kt");
            }

            @TestMetadata("TypeParamsH.kt")
            public void testTypeParamsH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsH.kt");
            }

            @TestMetadata("TypeParamsI.kt")
            public void testTypeParamsI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsI.kt");
            }

            @TestMetadata("TypeParamsJ.kt")
            public void testTypeParamsJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsJ.kt");
            }

            @TestMetadata("TypeParamsK.kt")
            public void testTypeParamsK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsK.kt");
            }

            @TestMetadata("TypeParamsL.kt")
            public void testTypeParamsL() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsL.kt");
            }

            @TestMetadata("TypeParamsM.kt")
            public void testTypeParamsM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsM.kt");
            }

            @TestMetadata("TypeParamsN.kt")
            public void testTypeParamsN() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsN.kt");
            }

            @TestMetadata("TypeParamsO.kt")
            public void testTypeParamsO() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsO.kt");
            }

            @TestMetadata("TypeParamsP.kt")
            public void testTypeParamsP() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsP.kt");
            }

            @TestMetadata("TypeParamsQ.kt")
            public void testTypeParamsQ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsQ.kt");
            }

            @TestMetadata("TypeParamsR.kt")
            public void testTypeParamsR() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsR.kt");
            }

            @TestMetadata("TypeParamsS.kt")
            public void testTypeParamsS() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/classes/TypeParamsS.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/companionObject")
        public static class CompanionObject extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("CompanionContainerA.kt")
            public void testCompanionContainerA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerA.kt");
            }

            @TestMetadata("CompanionContainerB.kt")
            public void testCompanionContainerB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerB.kt");
            }

            @TestMetadata("CompanionContainerC.kt")
            public void testCompanionContainerC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerC.kt");
            }

            @TestMetadata("CompanionContainerD.kt")
            public void testCompanionContainerD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerD.kt");
            }

            @TestMetadata("CompanionContainerE.kt")
            public void testCompanionContainerE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerE.kt");
            }

            @TestMetadata("CompanionContainerF.kt")
            public void testCompanionContainerF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerF.kt");
            }

            @TestMetadata("CompanionContainerH.kt")
            public void testCompanionContainerH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerH.kt");
            }

            @TestMetadata("CompanionContainerI.kt")
            public void testCompanionContainerI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerI.kt");
            }

            @TestMetadata("CompanionContainerJ.kt")
            public void testCompanionContainerJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerJ.kt");
            }

            @TestMetadata("CompanionContainerK.kt")
            public void testCompanionContainerK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerK.kt");
            }

            @TestMetadata("CompanionContainerL.kt")
            public void testCompanionContainerL() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerL.kt");
            }

            @TestMetadata("CompanionContainerM.kt")
            public void testCompanionContainerM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerM.kt");
            }

            @TestMetadata("CompanionContainerN.kt")
            public void testCompanionContainerN() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/companionObject/CompanionContainerN.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/enums")
        public static class Enums extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("EnumA.kt")
            public void testEnumA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/enums/EnumA.kt");
            }

            @TestMetadata("EnumC.kt")
            public void testEnumC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/enums/EnumC.kt");
            }

            @TestMetadata("EnumD.kt")
            public void testEnumD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/enums/EnumD.kt");
            }

            @TestMetadata("EnumE.kt")
            public void testEnumE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/enums/EnumE.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/functions")
        public static class Functions extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("funBodyReturnA.kt")
            public void testFunBodyReturnA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funBodyReturnA.kt");
            }

            @TestMetadata("funBodyReturnD.kt")
            public void testFunBodyReturnD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funBodyReturnD.kt");
            }

            @TestMetadata("funModifierE.kt")
            public void testFunModifierE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funModifierE.kt");
            }

            @TestMetadata("funModifierG.kt")
            public void testFunModifierG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funModifierG.kt");
            }

            @TestMetadata("funModifierI.kt")
            public void testFunModifierI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funModifierI.kt");
            }

            @TestMetadata("funModifierK.kt")
            public void testFunModifierK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funModifierK.kt");
            }

            @TestMetadata("funModifierM.kt")
            public void testFunModifierM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funModifierM.kt");
            }

            @TestMetadata("funModifierQ.kt")
            public void testFunModifierQ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funModifierQ.kt");
            }

            @TestMetadata("funReceiverA.kt")
            public void testFunReceiverA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funReceiverA.kt");
            }

            @TestMetadata("funReceiverF.kt")
            public void testFunReceiverF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funReceiverF.kt");
            }

            @TestMetadata("funTypeParamA.kt")
            public void testFunTypeParamA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funTypeParamA.kt");
            }

            @TestMetadata("funTypeParamD.kt")
            public void testFunTypeParamD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funTypeParamD.kt");
            }

            @TestMetadata("funTypeParamG.kt")
            public void testFunTypeParamG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funTypeParamG.kt");
            }

            @TestMetadata("funTypeParamJ.kt")
            public void testFunTypeParamJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funTypeParamJ.kt");
            }

            @TestMetadata("funTypeParamN.kt")
            public void testFunTypeParamN() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funTypeParamN.kt");
            }

            @TestMetadata("funValParamA.kt")
            public void testFunValParamA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funValParamA.kt");
            }

            @TestMetadata("funValParamE.kt")
            public void testFunValParamE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/funValParamE.kt");
            }

            @TestMetadata("FunctionContainerAfunBodyReturnB.kt")
            public void testFunctionContainerAfunBodyReturnB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunBodyReturnB.kt");
            }

            @TestMetadata("FunctionContainerAfunBodyReturnC.kt")
            public void testFunctionContainerAfunBodyReturnC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunBodyReturnC.kt");
            }

            @TestMetadata("FunctionContainerAfunModifierA.kt")
            public void testFunctionContainerAfunModifierA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunModifierA.kt");
            }

            @TestMetadata("FunctionContainerAfunModifierB.kt")
            public void testFunctionContainerAfunModifierB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunModifierB.kt");
            }

            @TestMetadata("FunctionContainerAfunModifierH.kt")
            public void testFunctionContainerAfunModifierH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunModifierH.kt");
            }

            @TestMetadata("FunctionContainerAfunModifierJ.kt")
            public void testFunctionContainerAfunModifierJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunModifierJ.kt");
            }

            @TestMetadata("FunctionContainerAfunModifierN.kt")
            public void testFunctionContainerAfunModifierN() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunModifierN.kt");
            }

            @TestMetadata("FunctionContainerAfunModifierP.kt")
            public void testFunctionContainerAfunModifierP() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunModifierP.kt");
            }

            @TestMetadata("FunctionContainerAfunReceiverB.kt")
            public void testFunctionContainerAfunReceiverB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunReceiverB.kt");
            }

            @TestMetadata("FunctionContainerAfunTypeParamE.kt")
            public void testFunctionContainerAfunTypeParamE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunTypeParamE.kt");
            }

            @TestMetadata("FunctionContainerAfunTypeParamO.kt")
            public void testFunctionContainerAfunTypeParamO() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunTypeParamO.kt");
            }

            @TestMetadata("FunctionContainerAfunValParamB.kt")
            public void testFunctionContainerAfunValParamB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunValParamB.kt");
            }

            @TestMetadata("FunctionContainerAfunValParamF.kt")
            public void testFunctionContainerAfunValParamF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAfunValParamF.kt");
            }

            @TestMetadata("FunctionContainerAplus.kt")
            public void testFunctionContainerAplus() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerAplus.kt");
            }

            @TestMetadata("FunctionContainerBfunBodyReturnE.kt")
            public void testFunctionContainerBfunBodyReturnE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerBfunBodyReturnE.kt");
            }

            @TestMetadata("FunctionContainerBfunReceiverC.kt")
            public void testFunctionContainerBfunReceiverC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerBfunReceiverC.kt");
            }

            @TestMetadata("FunctionContainerBfunTypeParamB.kt")
            public void testFunctionContainerBfunTypeParamB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerBfunTypeParamB.kt");
            }

            @TestMetadata("FunctionContainerBfunTypeParamH.kt")
            public void testFunctionContainerBfunTypeParamH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerBfunTypeParamH.kt");
            }

            @TestMetadata("FunctionContainerBfunTypeParamK.kt")
            public void testFunctionContainerBfunTypeParamK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerBfunTypeParamK.kt");
            }

            @TestMetadata("FunctionContainerBfunTypeParamP.kt")
            public void testFunctionContainerBfunTypeParamP() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerBfunTypeParamP.kt");
            }

            @TestMetadata("FunctionContainerBfunValParamC.kt")
            public void testFunctionContainerBfunValParamC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerBfunValParamC.kt");
            }

            @TestMetadata("FunctionContainerCfunModifierC.kt")
            public void testFunctionContainerCfunModifierC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerCfunModifierC.kt");
            }

            @TestMetadata("FunctionContainerCfunModifierF.kt")
            public void testFunctionContainerCfunModifierF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerCfunModifierF.kt");
            }

            @TestMetadata("FunctionContainerDfunBodyReturnF.kt")
            public void testFunctionContainerDfunBodyReturnF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerDfunBodyReturnF.kt");
            }

            @TestMetadata("FunctionContainerDfunModifierD.kt")
            public void testFunctionContainerDfunModifierD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerDfunModifierD.kt");
            }

            @TestMetadata("FunctionContainerEfunModifierC.kt")
            public void testFunctionContainerEfunModifierC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerEfunModifierC.kt");
            }

            @TestMetadata("FunctionContainerEfunModifierD.kt")
            public void testFunctionContainerEfunModifierD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerEfunModifierD.kt");
            }

            @TestMetadata("FunctionContainerGfunModifierR.kt")
            public void testFunctionContainerGfunModifierR() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerGfunModifierR.kt");
            }

            @TestMetadata("FunctionContainerHfunReceiverD.kt")
            public void testFunctionContainerHfunReceiverD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerHfunReceiverD.kt");
            }

            @TestMetadata("FunctionContainerHfunReceiverE.kt")
            public void testFunctionContainerHfunReceiverE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerHfunReceiverE.kt");
            }

            @TestMetadata("FunctionContainerHfunTypeParamC.kt")
            public void testFunctionContainerHfunTypeParamC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerHfunTypeParamC.kt");
            }

            @TestMetadata("FunctionContainerHfunTypeParamF.kt")
            public void testFunctionContainerHfunTypeParamF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerHfunTypeParamF.kt");
            }

            @TestMetadata("FunctionContainerHfunTypeParamI.kt")
            public void testFunctionContainerHfunTypeParamI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerHfunTypeParamI.kt");
            }

            @TestMetadata("FunctionContainerHfunTypeParamL.kt")
            public void testFunctionContainerHfunTypeParamL() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerHfunTypeParamL.kt");
            }

            @TestMetadata("FunctionContainerHfunTypeParamM.kt")
            public void testFunctionContainerHfunTypeParamM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerHfunTypeParamM.kt");
            }

            @TestMetadata("FunctionContainerHfunValParamD.kt")
            public void testFunctionContainerHfunValParamD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/functions/FunctionContainerHfunValParamD.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/locals")
        public static class Locals extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("v1.kt")
            public void testV1() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/locals/v1.kt");
            }

            @TestMetadata("v2.kt")
            public void testV2() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/locals/v2.kt");
            }

            @TestMetadata("v3.kt")
            public void testV3() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/locals/v3.kt");
            }

            @TestMetadata("v4.kt")
            public void testV4() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/locals/v4.kt");
            }

            @TestMetadata("v5.kt")
            public void testV5() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/locals/v5.kt");
            }

            @TestMetadata("v6.kt")
            public void testV6() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/locals/v6.kt");
            }

            @TestMetadata("v7.kt")
            public void testV7() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/locals/v7.kt");
            }

            @TestMetadata("v8.kt")
            public void testV8() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/locals/v8.kt");
            }

            @TestMetadata("v9.kt")
            public void testV9() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/locals/v9.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/members")
        public static class Members extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("lclFun.kt")
            public void testLclFun() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/lclFun.kt");
            }

            @TestMetadata("memberLocationA.kt")
            public void testMemberLocationA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationA.kt");
            }

            @TestMetadata("memberLocationB.kt")
            public void testMemberLocationB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationB.kt");
            }

            @TestMetadata("memberLocationC.kt")
            public void testMemberLocationC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationC.kt");
            }

            @TestMetadata("memberLocationD.kt")
            public void testMemberLocationD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationD.kt");
            }

            @TestMetadata("memberLocationE.kt")
            public void testMemberLocationE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationE.kt");
            }

            @TestMetadata("memberLocationF.kt")
            public void testMemberLocationF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationF.kt");
            }

            @TestMetadata("memberLocationG.kt")
            public void testMemberLocationG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationG.kt");
            }

            @TestMetadata("memberLocationH.kt")
            public void testMemberLocationH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationH.kt");
            }

            @TestMetadata("memberLocationI.kt")
            public void testMemberLocationI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationI.kt");
            }

            @TestMetadata("memberLocationJ.kt")
            public void testMemberLocationJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationJ.kt");
            }

            @TestMetadata("memberLocationK.kt")
            public void testMemberLocationK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationK.kt");
            }

            @TestMetadata("memberLocationL.kt")
            public void testMemberLocationL() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationL.kt");
            }

            @TestMetadata("memberLocationM.kt")
            public void testMemberLocationM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationM.kt");
            }

            @TestMetadata("memberLocationN.kt")
            public void testMemberLocationN() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationN.kt");
            }

            @TestMetadata("memberLocationO.kt")
            public void testMemberLocationO() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationO.kt");
            }

            @TestMetadata("memberLocationP.kt")
            public void testMemberLocationP() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/members/memberLocationP.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/objects")
        public static class Objects extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("anonymous.kt")
            public void testAnonymous() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/anonymous.kt");
            }

            @TestMetadata("ObjectA.kt")
            public void testObjectA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectA.kt");
            }

            @TestMetadata("ObjectB.kt")
            public void testObjectB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectB.kt");
            }

            @TestMetadata("ObjectC.kt")
            public void testObjectC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectC.kt");
            }

            @TestMetadata("ObjectD.kt")
            public void testObjectD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectD.kt");
            }

            @TestMetadata("ObjectE.kt")
            public void testObjectE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectE.kt");
            }

            @TestMetadata("ObjectF.kt")
            public void testObjectF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectF.kt");
            }

            @TestMetadata("ObjectG.kt")
            public void testObjectG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectG.kt");
            }

            @TestMetadata("ObjectI.kt")
            public void testObjectI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectI.kt");
            }

            @TestMetadata("ObjectJ.kt")
            public void testObjectJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectJ.kt");
            }

            @TestMetadata("ObjectK.kt")
            public void testObjectK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectK.kt");
            }

            @TestMetadata("ObjectL.kt")
            public void testObjectL() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectL.kt");
            }

            @TestMetadata("ObjectM.kt")
            public void testObjectM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectM.kt");
            }

            @TestMetadata("ObjectN.kt")
            public void testObjectN() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectN.kt");
            }

            @TestMetadata("ObjectO.kt")
            public void testObjectO() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectO.kt");
            }

            @TestMetadata("ObjectP.kt")
            public void testObjectP() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectP.kt");
            }

            @TestMetadata("ObjectQ.kt")
            public void testObjectQ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectQ.kt");
            }

            @TestMetadata("ObjectR.kt")
            public void testObjectR() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/objects/ObjectR.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors")
        public static class PrimaryConstructors extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("PrimeCtorA.kt")
            public void testPrimeCtorA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorA.kt");
            }

            @TestMetadata("PrimeCtorB.kt")
            public void testPrimeCtorB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorB.kt");
            }

            @TestMetadata("PrimeCtorC.kt")
            public void testPrimeCtorC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorC.kt");
            }

            @TestMetadata("PrimeCtorD.kt")
            public void testPrimeCtorD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorD.kt");
            }

            @TestMetadata("PrimeCtorE.kt")
            public void testPrimeCtorE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorE.kt");
            }

            @TestMetadata("PrimeCtorF.kt")
            public void testPrimeCtorF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorF.kt");
            }

            @TestMetadata("PrimeCtorG.kt")
            public void testPrimeCtorG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorG.kt");
            }

            @TestMetadata("PrimeCtorH.kt")
            public void testPrimeCtorH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorH.kt");
            }

            @TestMetadata("PrimeCtorI.kt")
            public void testPrimeCtorI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorI.kt");
            }

            @TestMetadata("PrimeCtorJ.kt")
            public void testPrimeCtorJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/primaryConstructors/PrimeCtorJ.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/properties")
        public static class Properties extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("propInitDelegateA.kt")
            public void testPropInitDelegateA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propInitDelegateA.kt");
            }

            @TestMetadata("propInitDelegateB.kt")
            public void testPropInitDelegateB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propInitDelegateB.kt");
            }

            @TestMetadata("propInitDelegateC.kt")
            public void testPropInitDelegateC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propInitDelegateC.kt");
            }

            @TestMetadata("propModifierA.kt")
            public void testPropModifierA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propModifierA.kt");
            }

            @TestMetadata("propModifierD.kt")
            public void testPropModifierD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propModifierD.kt");
            }

            @TestMetadata("propModifierF.kt")
            public void testPropModifierF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propModifierF.kt");
            }

            @TestMetadata("propModifierH.kt")
            public void testPropModifierH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propModifierH.kt");
            }

            @TestMetadata("propModifierI.kt")
            public void testPropModifierI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propModifierI.kt");
            }

            @TestMetadata("propModifierJ.kt")
            public void testPropModifierJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propModifierJ.kt");
            }

            @TestMetadata("propModifierL.kt")
            public void testPropModifierL() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propModifierL.kt");
            }

            @TestMetadata("propModifierO.kt")
            public void testPropModifierO() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propModifierO.kt");
            }

            @TestMetadata("propModifierP.kt")
            public void testPropModifierP() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propModifierP.kt");
            }

            @TestMetadata("propReceiverE.kt")
            public void testPropReceiverE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propReceiverE.kt");
            }

            @TestMetadata("propReceiverF.kt")
            public void testPropReceiverF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propReceiverF.kt");
            }

            @TestMetadata("propTypeParamB.kt")
            public void testPropTypeParamB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propTypeParamB.kt");
            }

            @TestMetadata("propTypeParamC.kt")
            public void testPropTypeParamC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propTypeParamC.kt");
            }

            @TestMetadata("propTypeParamG.kt")
            public void testPropTypeParamG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propTypeParamG.kt");
            }

            @TestMetadata("propTypeParamH.kt")
            public void testPropTypeParamH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/propTypeParamH.kt");
            }

            @TestMetadata("PropertyContainerApropModifierB.kt")
            public void testPropertyContainerApropModifierB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerApropModifierB.kt");
            }

            @TestMetadata("PropertyContainerApropModifierG.kt")
            public void testPropertyContainerApropModifierG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerApropModifierG.kt");
            }

            @TestMetadata("PropertyContainerApropModifierQ.kt")
            public void testPropertyContainerApropModifierQ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerApropModifierQ.kt");
            }

            @TestMetadata("PropertyContainerBpropModifierC.kt")
            public void testPropertyContainerBpropModifierC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerBpropModifierC.kt");
            }

            @TestMetadata("PropertyContainerCpropModifierB.kt")
            public void testPropertyContainerCpropModifierB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerCpropModifierB.kt");
            }

            @TestMetadata("PropertyContainerCpropModifierC.kt")
            public void testPropertyContainerCpropModifierC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerCpropModifierC.kt");
            }

            @TestMetadata("PropertyContainerCpropModifierE.kt")
            public void testPropertyContainerCpropModifierE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerCpropModifierE.kt");
            }

            @TestMetadata("PropertyContainerCpropModifierK.kt")
            public void testPropertyContainerCpropModifierK() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerCpropModifierK.kt");
            }

            @TestMetadata("PropertyContainerCpropReceiverA.kt")
            public void testPropertyContainerCpropReceiverA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerCpropReceiverA.kt");
            }

            @TestMetadata("PropertyContainerCpropReceiverB.kt")
            public void testPropertyContainerCpropReceiverB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerCpropReceiverB.kt");
            }

            @TestMetadata("PropertyContainerCpropTypeParamD.kt")
            public void testPropertyContainerCpropTypeParamD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerCpropTypeParamD.kt");
            }

            @TestMetadata("PropertyContainerCpropTypeParamI.kt")
            public void testPropertyContainerCpropTypeParamI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerCpropTypeParamI.kt");
            }

            @TestMetadata("PropertyContainerCpropTypeParamJ.kt")
            public void testPropertyContainerCpropTypeParamJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerCpropTypeParamJ.kt");
            }

            @TestMetadata("PropertyContainerDpropModifierM.kt")
            public void testPropertyContainerDpropModifierM() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerDpropModifierM.kt");
            }

            @TestMetadata("PropertyContainerFpropModifierQ.kt")
            public void testPropertyContainerFpropModifierQ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerFpropModifierQ.kt");
            }

            @TestMetadata("PropertyContainerFpropReceiverC.kt")
            public void testPropertyContainerFpropReceiverC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerFpropReceiverC.kt");
            }

            @TestMetadata("PropertyContainerFpropReceiverD.kt")
            public void testPropertyContainerFpropReceiverD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerFpropReceiverD.kt");
            }

            @TestMetadata("PropertyContainerFpropTypeParamA.kt")
            public void testPropertyContainerFpropTypeParamA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerFpropTypeParamA.kt");
            }

            @TestMetadata("PropertyContainerFpropTypeParamE.kt")
            public void testPropertyContainerFpropTypeParamE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerFpropTypeParamE.kt");
            }

            @TestMetadata("PropertyContainerFpropTypeParamF.kt")
            public void testPropertyContainerFpropTypeParamF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/properties/PropertyContainerFpropTypeParamF.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors")
        public static class SecondaryConstructors extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("SecondCtorA.kt")
            public void testSecondCtorA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors/SecondCtorA.kt");
            }

            @TestMetadata("SecondCtorB.kt")
            public void testSecondCtorB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors/SecondCtorB.kt");
            }

            @TestMetadata("SecondCtorC.kt")
            public void testSecondCtorC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors/SecondCtorC.kt");
            }

            @TestMetadata("SecondCtorE.kt")
            public void testSecondCtorE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors/SecondCtorE.kt");
            }

            @TestMetadata("SecondCtorF.kt")
            public void testSecondCtorF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors/SecondCtorF.kt");
            }

            @TestMetadata("SecondCtorG.kt")
            public void testSecondCtorG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors/SecondCtorG.kt");
            }

            @TestMetadata("SecondCtorH.kt")
            public void testSecondCtorH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors/SecondCtorH.kt");
            }

            @TestMetadata("SecondCtorI.kt")
            public void testSecondCtorI() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors/SecondCtorI.kt");
            }

            @TestMetadata("SecondCtorJ.kt")
            public void testSecondCtorJ() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/secondaryConstructors/SecondCtorJ.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/tags")
        public static class Tags extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("AuthorSinceA.kt")
            public void testAuthorSinceA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/AuthorSinceA.kt");
            }

            @TestMetadata("authorSinceB.kt")
            public void testAuthorSinceB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/authorSinceB.kt");
            }

            @TestMetadata("CtorPropA.kt")
            public void testCtorPropA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/CtorPropA.kt");
            }

            @TestMetadata("CtorPropB.kt")
            public void testCtorPropB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/CtorPropB.kt");
            }

            @TestMetadata("CtorPropC.kt")
            public void testCtorPropC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/CtorPropC.kt");
            }

            @TestMetadata("DescriptionA.kt")
            public void testDescriptionA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/DescriptionA.kt");
            }

            @TestMetadata("DescriptionB.kt")
            public void testDescriptionB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/DescriptionB.kt");
            }

            @TestMetadata("InheritanceAinheritanceB.kt")
            public void testInheritanceAinheritanceB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/InheritanceAinheritanceB.kt");
            }

            @TestMetadata("InheritanceAinheritanceC.kt")
            public void testInheritanceAinheritanceC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/InheritanceAinheritanceC.kt");
            }

            @TestMetadata("InheritanceEinheritanceB.kt")
            public void testInheritanceEinheritanceB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/InheritanceEinheritanceB.kt");
            }

            @TestMetadata("InheritanceEinheritanceC.kt")
            public void testInheritanceEinheritanceC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/InheritanceEinheritanceC.kt");
            }

            @TestMetadata("InheritanceInheritanceA.kt")
            public void testInheritanceInheritanceA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/InheritanceInheritanceA.kt");
            }

            @TestMetadata("InheritanceInheritanceE.kt")
            public void testInheritanceInheritanceE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/InheritanceInheritanceE.kt");
            }

            @TestMetadata("ParamA.kt")
            public void testParamA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ParamA.kt");
            }

            @TestMetadata("paramB.kt")
            public void testParamB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/paramB.kt");
            }

            @TestMetadata("ParamC.kt")
            public void testParamC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ParamC.kt");
            }

            @TestMetadata("ParamD.kt")
            public void testParamD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ParamD.kt");
            }

            @TestMetadata("ParamE.kt")
            public void testParamE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ParamE.kt");
            }

            @TestMetadata("ParamFParamF.kt")
            public void testParamFParamF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ParamFParamF.kt");
            }

            @TestMetadata("ParamG.kt")
            public void testParamG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ParamG.kt");
            }

            @TestMetadata("ParamReturnContainerAparamReturnA.kt")
            public void testParamReturnContainerAparamReturnA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ParamReturnContainerAparamReturnA.kt");
            }

            @TestMetadata("ParamReturnContainerAparamReturnB.kt")
            public void testParamReturnContainerAparamReturnB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ParamReturnContainerAparamReturnB.kt");
            }

            @TestMetadata("ParamReturnContainerAparamReturnC.kt")
            public void testParamReturnContainerAparamReturnC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ParamReturnContainerAparamReturnC.kt");
            }

            @TestMetadata("ReceiverA.kt")
            public void testReceiverA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ReceiverA.kt");
            }

            @TestMetadata("receiverB.kt")
            public void testReceiverB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/receiverB.kt");
            }

            @TestMetadata("receiverC.kt")
            public void testReceiverC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/receiverC.kt");
            }

            @TestMetadata("returnA.kt")
            public void testReturnA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/returnA.kt");
            }

            @TestMetadata("returnB.kt")
            public void testReturnB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/returnB.kt");
            }

            @TestMetadata("ReturnContainerCretrunF.kt")
            public void testReturnContainerCretrunF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ReturnContainerCretrunF.kt");
            }

            @TestMetadata("ReturnContainerCreturnD.kt")
            public void testReturnContainerCreturnD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ReturnContainerCreturnD.kt");
            }

            @TestMetadata("ReturnContainerCreturnE.kt")
            public void testReturnContainerCreturnE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/ReturnContainerCreturnE.kt");
            }

            @TestMetadata("SamplessamplesA.kt")
            public void testSamplessamplesA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/SamplessamplesA.kt");
            }

            @TestMetadata("SamplessamplesB.kt")
            public void testSamplessamplesB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/SamplessamplesB.kt");
            }

            @TestMetadata("SeesC.kt")
            public void testSeesC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/SeesC.kt");
            }

            @TestMetadata("seesOverloadedA.kt")
            public void testSeesOverloadedA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/seesOverloadedA.kt");
            }

            @TestMetadata("seesThisA.kt")
            public void testSeesThisA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/seesThisA.kt");
            }

            @TestMetadata("SuppressA.kt")
            public void testSuppressA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/SuppressA.kt");
            }

            @TestMetadata("suppressB.kt")
            public void testSuppressB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/suppressB.kt");
            }

            @TestMetadata("SuppressCsuppressD.kt")
            public void testSuppressCsuppressD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/SuppressCsuppressD.kt");
            }

            @TestMetadata("throwsA.kt")
            public void testThrowsA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/throwsA.kt");
            }

            @TestMetadata("UberInheritanceSeesSuperA.kt")
            public void testUberInheritanceSeesSuperA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/UberInheritanceSeesSuperA.kt");
            }

            @TestMetadata("UberRefSeesA.kt")
            public void testUberRefSeesA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/UberRefSeesA.kt");
            }

            @TestMetadata("UberRefseesB.kt")
            public void testUberRefseesB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/tags/UberRefseesB.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/editor/quickDoc/misc/typeAliases")
        public static class TypeAliases extends AbstractFirQuickDocTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("TypeAliasA.kt")
            public void testTypeAliasA() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/typeAliases/TypeAliasA.kt");
            }

            @TestMetadata("TypeAliasB.kt")
            public void testTypeAliasB() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/typeAliases/TypeAliasB.kt");
            }

            @TestMetadata("TypeAliasC.kt")
            public void testTypeAliasC() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/typeAliases/TypeAliasC.kt");
            }

            @TestMetadata("TypeAliasD.kt")
            public void testTypeAliasD() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/typeAliases/TypeAliasD.kt");
            }

            @TestMetadata("TypeAliasE.kt")
            public void testTypeAliasE() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/typeAliases/TypeAliasE.kt");
            }

            @TestMetadata("TypeAliasF.kt")
            public void testTypeAliasF() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/typeAliases/TypeAliasF.kt");
            }

            @TestMetadata("TypeAliasG.kt")
            public void testTypeAliasG() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/typeAliases/TypeAliasG.kt");
            }

            @TestMetadata("TypeAliasH.kt")
            public void testTypeAliasH() throws Exception {
                runTest("../../idea/tests/testData/editor/quickDoc/misc/typeAliases/TypeAliasH.kt");
            }
        }
    }
}
