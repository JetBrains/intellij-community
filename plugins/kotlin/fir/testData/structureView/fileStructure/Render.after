-Render.kt
 class A1
 -class A2
  a: Int
  b: String = ...
  constructor(a: Int, b: String = ...)
 -class A3
  a: Int
  constructor(a: Int)
  var b: String
 -class A4<T : Any>
  constructor(t: T?)
  t: T?
 -class A5
  class Inner1
  class Inner2
 -class A6
  -companion object
   fun test(): Unit
 -class A7
  <class initializer>
  val a: Int
 class TestWithWhere<T>
 -class WithDefaultArgs
  a: Int = ...
  constructor(a: Int = ..., b: String = ...)
 -enum class Enum1
  FIRST
  SECOND
 fun <T : String> test4(t: T): Unit
 fun <T : String> testWithWhere(): Unit
 fun <T, U> test3(t: T, u: U): Unit
 fun <T> Comparable<T>.extension2(): Unit
 fun String.extension1(): Unit
 fun test1(): Unit
 fun test2(a: String?): Unit
 fun test5(): String
 fun test6(): Comparable<String>
 fun withDefaulArgs(a: Int = ..., b: String = ...): Unit
 interface Trait
 interface Trait1 : Trait
 val <T> Comparable<T>.a: String
 val a: Int
 -val b: Any
  object