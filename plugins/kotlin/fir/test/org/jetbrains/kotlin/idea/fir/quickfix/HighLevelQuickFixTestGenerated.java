// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.quickfix;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class HighLevelQuickFixTestGenerated extends AbstractHighLevelQuickFixTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/abstract")
    public static class Abstract extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractFunctionInNonAbstractClass.kt")
        public void testAbstractFunctionInNonAbstractClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractFunctionInNonAbstractClass.kt");
        }

        @TestMetadata("abstractFunctionWithBody.kt")
        public void testAbstractFunctionWithBody() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractFunctionWithBody.kt");
        }

        @TestMetadata("abstractFunctionWithBody2.kt")
        public void testAbstractFunctionWithBody2() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractFunctionWithBody2.kt");
        }

        @TestMetadata("abstractFunctionWithBody3.kt")
        public void testAbstractFunctionWithBody3() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractFunctionWithBody3.kt");
        }

        @TestMetadata("abstractFunctionWithBodyWithComments.kt")
        public void testAbstractFunctionWithBodyWithComments() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractFunctionWithBodyWithComments.kt");
        }

        @TestMetadata("abstractFunctionWithBodyWithComments2.kt")
        public void testAbstractFunctionWithBodyWithComments2() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractFunctionWithBodyWithComments2.kt");
        }

        @TestMetadata("abstractPropertyInCompanionObject.kt")
        public void testAbstractPropertyInCompanionObject() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyInCompanionObject.kt");
        }

        @TestMetadata("abstractPropertyInNonAbstractClass1.kt")
        public void testAbstractPropertyInNonAbstractClass1() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyInNonAbstractClass1.kt");
        }

        @TestMetadata("abstractPropertyInNonAbstractClass2.kt")
        public void testAbstractPropertyInNonAbstractClass2() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyInNonAbstractClass2.kt");
        }

        @TestMetadata("abstractPropertyInNonAbstractClass3.kt")
        public void testAbstractPropertyInNonAbstractClass3() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyInNonAbstractClass3.kt");
        }

        @TestMetadata("abstractPropertyInPrimaryConstructorParameters.kt")
        public void testAbstractPropertyInPrimaryConstructorParameters() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyInPrimaryConstructorParameters.kt");
        }

        @TestMetadata("abstractPropertyNotInClass.kt")
        public void testAbstractPropertyNotInClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyNotInClass.kt");
        }

        @TestMetadata("abstractPropertyWIthInitializer2.kt")
        public void testAbstractPropertyWIthInitializer2() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyWIthInitializer2.kt");
        }

        @TestMetadata("abstractPropertyWIthInitializer3.kt")
        public void testAbstractPropertyWIthInitializer3() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyWIthInitializer3.kt");
        }

        @TestMetadata("abstractPropertyWithGetter1.kt")
        public void testAbstractPropertyWithGetter1() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyWithGetter1.kt");
        }

        @TestMetadata("abstractPropertyWithGetter2.kt")
        public void testAbstractPropertyWithGetter2() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyWithGetter2.kt");
        }

        @TestMetadata("abstractPropertyWithInitializer1.kt")
        public void testAbstractPropertyWithInitializer1() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyWithInitializer1.kt");
        }

        @TestMetadata("abstractPropertyWithSetter.kt")
        public void testAbstractPropertyWithSetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/abstractPropertyWithSetter.kt");
        }

        @TestMetadata("makeEnumEntryAbstract.kt")
        public void testMakeEnumEntryAbstract() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/makeEnumEntryAbstract.kt");
        }

        @TestMetadata("makeInlineClassAbstract.kt")
        public void testMakeInlineClassAbstract() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/makeInlineClassAbstract.kt");
        }

        @TestMetadata("makeObjectMemberAbstract.kt")
        public void testMakeObjectMemberAbstract() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/makeObjectMemberAbstract.kt");
        }

        @TestMetadata("makeTopLevelAbstract.kt")
        public void testMakeTopLevelAbstract() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/makeTopLevelAbstract.kt");
        }

        @TestMetadata("manyImpl.kt")
        public void testManyImpl() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/manyImpl.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstract.kt")
        public void testMustBeInitializedOrBeAbstract() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstractInFinalClass.kt")
        public void testMustBeInitializedOrBeAbstractInFinalClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstractInFinalClass.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstractInOpenClass.kt")
        public void testMustBeInitializedOrBeAbstractInOpenClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstractInOpenClass.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstractInSealedClass.kt")
        public void testMustBeInitializedOrBeAbstractInSealedClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstractInSealedClass.kt");
        }

        @TestMetadata("nonAbstractFunctionWithNoBody.kt")
        public void testNonAbstractFunctionWithNoBody() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/nonAbstractFunctionWithNoBody.kt");
        }

        @TestMetadata("nonMemberAbstractFunction.kt")
        public void testNonMemberAbstractFunction() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/nonMemberAbstractFunction.kt");
        }

        @TestMetadata("nonMemberFunctionNoBody.kt")
        public void testNonMemberFunctionNoBody() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/nonMemberFunctionNoBody.kt");
        }

        @TestMetadata("notImplementedMember.kt")
        public void testNotImplementedMember() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/notImplementedMember.kt");
        }

        @TestMetadata("notImplementedMemberFromAbstractClass.kt")
        public void testNotImplementedMemberFromAbstractClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/notImplementedMemberFromAbstractClass.kt");
        }

        @TestMetadata("replaceOpen.kt")
        public void testReplaceOpen() throws Exception {
            runTest("../idea/tests/testData/quickfix/abstract/replaceOpen.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/addExclExclCall")
    public abstract static class AddExclExclCall extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch")
        public static class TypeMismatch extends AbstractHighLevelQuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("argumentAfterNullCheck.kt")
            public void testArgumentAfterNullCheck() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/argumentAfterNullCheck.kt");
            }

            @TestMetadata("assignmentRValue.kt")
            public void testAssignmentRValue() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/assignmentRValue.kt");
            }

            @TestMetadata("initializer.kt")
            public void testInitializer() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/initializer.kt");
            }

            @TestMetadata("memberAccessInExtension.kt")
            public void testMemberAccessInExtension() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/memberAccessInExtension.kt");
            }

            @TestMetadata("memberAccessInExtensionAsAssignmentRValue.kt")
            public void testMemberAccessInExtensionAsAssignmentRValue() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/memberAccessInExtensionAsAssignmentRValue.kt");
            }

            @TestMetadata("memberAccessInExtensionAsInitializer.kt")
            public void testMemberAccessInExtensionAsInitializer() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/memberAccessInExtensionAsInitializer.kt");
            }

            @TestMetadata("nullArgument.kt")
            public void testNullArgument() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/nullArgument.kt");
            }

            @TestMetadata("qualifiedArgument.kt")
            public void testQualifiedArgument() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/qualifiedArgument.kt");
            }

            @TestMetadata("removeNullability.kt")
            public void testRemoveNullability() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullability.kt");
            }

            @TestMetadata("removeNullabilityDisabledWhenItCannotHelp.kt")
            public void testRemoveNullabilityDisabledWhenItCannotHelp() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullabilityDisabledWhenItCannotHelp.kt");
            }

            @TestMetadata("removeNullabilityForGeneric.kt")
            public void testRemoveNullabilityForGeneric() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullabilityForGeneric.kt");
            }

            @TestMetadata("removeNullabilityForSubclass.kt")
            public void testRemoveNullabilityForSubclass() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullabilityForSubclass.kt");
            }

            @TestMetadata("smartcastImpossibleForArgument.kt")
            public void testSmartcastImpossibleForArgument() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/smartcastImpossibleForArgument.kt");
            }

            @TestMetadata("smartcastImpossibleForReceiver.kt")
            public void testSmartcastImpossibleForReceiver() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/smartcastImpossibleForReceiver.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/quickfix/addExclExclCall")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/array.kt");
            }

            @TestMetadata("array2.kt")
            public void testArray2() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/array2.kt");
            }

            @TestMetadata("array3.kt")
            public void testArray3() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/array3.kt");
            }

            @TestMetadata("array4.kt")
            public void testArray4() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/array4.kt");
            }

            @TestMetadata("assignment.kt")
            public void testAssignment() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/assignment.kt");
            }

            @TestMetadata("assignmentToUnsafeCallExpression.kt")
            public void testAssignmentToUnsafeCallExpression() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/assignmentToUnsafeCallExpression.kt");
            }

            @TestMetadata("functionReference.kt")
            public void testFunctionReference() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/functionReference.kt");
            }

            @TestMetadata("functionReference2.kt")
            public void testFunctionReference2() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/functionReference2.kt");
            }

            @TestMetadata("functionReference3.kt")
            public void testFunctionReference3() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/functionReference3.kt");
            }

            @TestMetadata("implicit.kt")
            public void testImplicit() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/implicit.kt");
            }

            @TestMetadata("implicit2.kt")
            public void testImplicit2() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/implicit2.kt");
            }

            @TestMetadata("implicit3.kt")
            public void testImplicit3() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/implicit3.kt");
            }

            @TestMetadata("implicitFunctionCall.kt")
            public void testImplicitFunctionCall() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/implicitFunctionCall.kt");
            }

            @TestMetadata("infixCall.kt")
            public void testInfixCall() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/infixCall.kt");
            }

            @TestMetadata("iterable.kt")
            public void testIterable() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/iterable.kt");
            }

            @TestMetadata("iterableDoesNotInheritIterableInterface.kt")
            public void testIterableDoesNotInheritIterableInterface() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/iterableDoesNotInheritIterableInterface.kt");
            }

            @TestMetadata("iterableGeneric.kt")
            public void testIterableGeneric() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/iterableGeneric.kt");
            }

            @TestMetadata("iterableInExtension.kt")
            public void testIterableInExtension() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/iterableInExtension.kt");
            }

            @TestMetadata("iterableWithBadIterator.kt")
            public void testIterableWithBadIterator() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/iterableWithBadIterator.kt");
            }

            @TestMetadata("normal.kt")
            public void testNormal() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/normal.kt");
            }

            @TestMetadata("normal2.kt")
            public void testNormal2() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/normal2.kt");
            }

            @TestMetadata("null.kt")
            public void testNull() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/null.kt");
            }

            @TestMetadata("nullInitializer.kt")
            public void testNullInitializer() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/nullInitializer.kt");
            }

            @TestMetadata("nullInitializerWithUnstableSmartcast.kt")
            public void testNullInitializerWithUnstableSmartcast() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/nullInitializerWithUnstableSmartcast.kt");
            }

            @TestMetadata("nullReceiver.kt")
            public void testNullReceiver() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/nullReceiver.kt");
            }

            @TestMetadata("nullReceiverWithUnstableSmartcast.kt")
            public void testNullReceiverWithUnstableSmartcast() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/nullReceiverWithUnstableSmartcast.kt");
            }

            @TestMetadata("operationBinary.kt")
            public void testOperationBinary() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationBinary.kt");
            }

            @TestMetadata("operationDecrement.kt")
            public void testOperationDecrement() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationDecrement.kt");
            }

            @TestMetadata("operationDivAssign.kt")
            public void testOperationDivAssign() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationDivAssign.kt");
            }

            @TestMetadata("operationIn.kt")
            public void testOperationIn() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationIn.kt");
            }

            @TestMetadata("operationIncrement.kt")
            public void testOperationIncrement() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationIncrement.kt");
            }

            @TestMetadata("operationMinusAssign.kt")
            public void testOperationMinusAssign() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationMinusAssign.kt");
            }

            @TestMetadata("operationPlusAssign.kt")
            public void testOperationPlusAssign() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationPlusAssign.kt");
            }

            @TestMetadata("operationPlusAssignOnMutableMap.kt")
            public void testOperationPlusAssignOnMutableMap() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationPlusAssignOnMutableMap.kt");
            }

            @TestMetadata("operationRemAssign.kt")
            public void testOperationRemAssign() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationRemAssign.kt");
            }

            @TestMetadata("operationTimesAssign.kt")
            public void testOperationTimesAssign() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationTimesAssign.kt");
            }

            @TestMetadata("operationUnary.kt")
            public void testOperationUnary() throws Exception {
                runTest("../idea/tests/testData/quickfix/addExclExclCall/operationUnary.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/addInitializer")
    public static class AddInitializer extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("localVar.kt")
        public void testLocalVar() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/localVar.kt");
        }

        @TestMetadata("memberExtensionProperty.kt")
        public void testMemberExtensionProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/memberExtensionProperty.kt");
        }

        @TestMetadata("memberExtensionPropertyVarGetterOnly.kt")
        public void testMemberExtensionPropertyVarGetterOnly() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/memberExtensionPropertyVarGetterOnly.kt");
        }

        @TestMetadata("memberExtensionPropertyVarSetterOnly.kt")
        public void testMemberExtensionPropertyVarSetterOnly() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/memberExtensionPropertyVarSetterOnly.kt");
        }

        @TestMetadata("memberProperty.kt")
        public void testMemberProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/memberProperty.kt");
        }

        @TestMetadata("memberPropertyVarGetterOnly.kt")
        public void testMemberPropertyVarGetterOnly() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/memberPropertyVarGetterOnly.kt");
        }

        @TestMetadata("memberPropertyVarSetterOnly.kt")
        public void testMemberPropertyVarSetterOnly() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/memberPropertyVarSetterOnly.kt");
        }

        @TestMetadata("memberPropertyWithAccessor.kt")
        public void testMemberPropertyWithAccessor() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/memberPropertyWithAccessor.kt");
        }

        @TestMetadata("memberPropertyWithDelegateRuntime.kt")
        public void testMemberPropertyWithDelegateRuntime() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/memberPropertyWithDelegateRuntime.kt");
        }

        @TestMetadata("topLevelExtensionProperty.kt")
        public void testTopLevelExtensionProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/topLevelExtensionProperty.kt");
        }

        @TestMetadata("topLevelExtensionPropertySetterOnly.kt")
        public void testTopLevelExtensionPropertySetterOnly() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/topLevelExtensionPropertySetterOnly.kt");
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/topLevelProperty.kt");
        }

        @TestMetadata("topLevelPropertyVarClass.kt")
        public void testTopLevelPropertyVarClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/topLevelPropertyVarClass.kt");
        }

        @TestMetadata("topLevelPropertyVarGetterOnly.kt")
        public void testTopLevelPropertyVarGetterOnly() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/topLevelPropertyVarGetterOnly.kt");
        }

        @TestMetadata("topLevelPropertyVarSetterOnly.kt")
        public void testTopLevelPropertyVarSetterOnly() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/topLevelPropertyVarSetterOnly.kt");
        }

        @TestMetadata("topLevelPropertyWithDelegateRuntime.kt")
        public void testTopLevelPropertyWithDelegateRuntime() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/topLevelPropertyWithDelegateRuntime.kt");
        }

        @TestMetadata("topLevelPropertyWithGetter.kt")
        public void testTopLevelPropertyWithGetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/addInitializer/topLevelPropertyWithGetter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/addPropertyAccessors")
    public static class AddPropertyAccessors extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../idea/tests/testData/quickfix/addPropertyAccessors/val.kt");
        }

        @TestMetadata("var.kt")
        public void testVar() throws Exception {
            runTest("../idea/tests/testData/quickfix/addPropertyAccessors/var.kt");
        }

        @TestMetadata("varHasGetter.kt")
        public void testVarHasGetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/addPropertyAccessors/varHasGetter.kt");
        }

        @TestMetadata("varHasSetter.kt")
        public void testVarHasSetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/addPropertyAccessors/varHasSetter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/checkArguments")
    public static class CheckArguments extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("nonVarargSpread.kt")
        public void testNonVarargSpread() throws Exception {
            runTest("../idea/tests/testData/quickfix/checkArguments/nonVarargSpread.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/conflictingImports")
    public static class ConflictingImports extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("removeConflictingImport.kt")
        public void testRemoveConflictingImport() throws Exception {
            runTest("../idea/tests/testData/quickfix/conflictingImports/removeConflictingImport.kt");
        }

        @TestMetadata("removeDuplicateImport.kt")
        public void testRemoveDuplicateImport() throws Exception {
            runTest("../idea/tests/testData/quickfix/conflictingImports/removeDuplicateImport.kt");
        }

        @TestMetadata("removeDuplicateImportWithAlias.kt")
        public void testRemoveDuplicateImportWithAlias() throws Exception {
            runTest("../idea/tests/testData/quickfix/conflictingImports/removeDuplicateImportWithAlias.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/expressions")
    public static class Expressions extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("kt11594.kt")
        public void testKt11594() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/kt11594.kt");
        }

        @TestMetadata("removeUselessCast.kt")
        public void testRemoveUselessCast() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCast.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInNecessaryNestedParens2.kt")
        public void testRemoveUselessCastForLambdaInNecessaryNestedParens2() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInNecessaryNestedParens2.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInNestedParens.kt")
        public void testRemoveUselessCastForLambdaInNestedParens() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInNestedParens.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens1.kt")
        public void testRemoveUselessCastForLambdaInParens1() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens1.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens2.kt")
        public void testRemoveUselessCastForLambdaInParens2() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens2.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens3.kt")
        public void testRemoveUselessCastForLambdaInParens3() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens3.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens4.kt")
        public void testRemoveUselessCastForLambdaInParens4() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens4.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens5.kt")
        public void testRemoveUselessCastForLambdaInParens5() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens5.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens6.kt")
        public void testRemoveUselessCastForLambdaInParens6() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens6.kt");
        }

        @TestMetadata("removeUselessCastInNestedParens.kt")
        public void testRemoveUselessCastInNestedParens() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastInNestedParens.kt");
        }

        @TestMetadata("removeUselessCastInParens.kt")
        public void testRemoveUselessCastInParens() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastInParens.kt");
        }

        @TestMetadata("removeUselessCastUnderSmartCast.kt")
        public void testRemoveUselessCastUnderSmartCast() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessCastUnderSmartCast.kt");
        }

        @TestMetadata("removeUselessIsCheck.kt")
        public void testRemoveUselessIsCheck() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheck.kt");
        }

        @TestMetadata("removeUselessIsCheckForNull.kt")
        public void testRemoveUselessIsCheckForNull() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheckForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhen.kt")
        public void testRemoveUselessIsCheckInWhen() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhen.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionless.kt")
        public void testRemoveUselessIsCheckInWhenExpressionless() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionless.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionlessForNull.kt")
        public void testRemoveUselessIsCheckInWhenExpressionlessForNull() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionlessForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionlessNegate.kt")
        public void testRemoveUselessIsCheckInWhenExpressionlessNegate() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionlessNegate.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionlessNegateForNull.kt")
        public void testRemoveUselessIsCheckInWhenExpressionlessNegateForNull() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionlessNegateForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenNegate.kt")
        public void testRemoveUselessIsCheckInWhenNegate() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenNegate.kt");
        }

        @TestMetadata("removeUselessIsCheckNegate.kt")
        public void testRemoveUselessIsCheckNegate() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheckNegate.kt");
        }

        @TestMetadata("removeUselessIsCheckNegateForNull.kt")
        public void testRemoveUselessIsCheckNegateForNull() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/removeUselessIsCheckNegateForNull.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion1.kt")
        public void testUnnecessaryNonNullAssertion1() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion1.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion2.kt")
        public void testUnnecessaryNonNullAssertion2() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion2.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion3.kt")
        public void testUnnecessaryNonNullAssertion3() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion3.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion4.kt")
        public void testUnnecessaryNonNullAssertion4() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion4.kt");
        }

        @TestMetadata("unnecessarySafeCall1.kt")
        public void testUnnecessarySafeCall1() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unnecessarySafeCall1.kt");
        }

        @TestMetadata("unnecessarySafeCall2.kt")
        public void testUnnecessarySafeCall2() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unnecessarySafeCall2.kt");
        }

        @TestMetadata("unsafeCall1.kt")
        public void testUnsafeCall1() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unsafeCall1.kt");
        }

        @TestMetadata("unsafeCall2.kt")
        public void testUnsafeCall2() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unsafeCall2.kt");
        }

        @TestMetadata("unsafeCall3.kt")
        public void testUnsafeCall3() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unsafeCall3.kt");
        }

        @TestMetadata("unsafeCall4.kt")
        public void testUnsafeCall4() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unsafeCall4.kt");
        }

        @TestMetadata("unsafeCall5.kt")
        public void testUnsafeCall5() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/unsafeCall5.kt");
        }

        @TestMetadata("uselessCastStaticAssertIsFine.kt")
        public void testUselessCastStaticAssertIsFine() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/uselessCastStaticAssertIsFine.kt");
        }

        @TestMetadata("uselessElvis.kt")
        public void testUselessElvis() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/uselessElvis.kt");
        }

        @TestMetadata("uselessElvisForLambdaInNecessaryNestedParens.kt")
        public void testUselessElvisForLambdaInNecessaryNestedParens() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/uselessElvisForLambdaInNecessaryNestedParens.kt");
        }

        @TestMetadata("uselessElvisForLambdaInNestedParens.kt")
        public void testUselessElvisForLambdaInNestedParens() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/uselessElvisForLambdaInNestedParens.kt");
        }

        @TestMetadata("uselessElvisInNestedParens.kt")
        public void testUselessElvisInNestedParens() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/uselessElvisInNestedParens.kt");
        }

        @TestMetadata("uselessElvisRightIsNull.kt")
        public void testUselessElvisRightIsNull() throws Exception {
            runTest("../idea/tests/testData/quickfix/expressions/uselessElvisRightIsNull.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/lateinit")
    public static class Lateinit extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            runTest("../idea/tests/testData/quickfix/lateinit/nullable.kt");
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../idea/tests/testData/quickfix/lateinit/val.kt");
        }

        @TestMetadata("withGetter.kt")
        public void testWithGetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/lateinit/withGetter.kt");
        }

        @TestMetadata("withGetterSetter.kt")
        public void testWithGetterSetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/lateinit/withGetterSetter.kt");
        }

        @TestMetadata("withInitializer.kt")
        public void testWithInitializer() throws Exception {
            runTest("../idea/tests/testData/quickfix/lateinit/withInitializer.kt");
        }

        @TestMetadata("withSetter.kt")
        public void testWithSetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/lateinit/withSetter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/localVariableWithTypeParameters")
    public static class LocalVariableWithTypeParameters extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("removeTypeParametersFromLocalVariable.kt")
        public void testRemoveTypeParametersFromLocalVariable() throws Exception {
            runTest("../idea/tests/testData/quickfix/localVariableWithTypeParameters/removeTypeParametersFromLocalVariable.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/modifiers")
    public static class Modifiers extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractClassMemberNotImplemented.kt")
        public void testAbstractClassMemberNotImplemented() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/abstractClassMemberNotImplemented.kt");
        }

        @TestMetadata("abstractMemberNotImplemented.kt")
        public void testAbstractMemberNotImplemented() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/abstractMemberNotImplemented.kt");
        }

        @TestMetadata("abstractModifierInEnum.kt")
        public void testAbstractModifierInEnum() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/abstractModifierInEnum.kt");
        }

        @TestMetadata("abstractVarWithPrivateSetter.kt")
        public void testAbstractVarWithPrivateSetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/abstractVarWithPrivateSetter.kt");
        }

        @TestMetadata("addLateinit.kt")
        public void testAddLateinit() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addLateinit.kt");
        }

        @TestMetadata("cannotMakeClassAnnotation.kt")
        public void testCannotMakeClassAnnotation() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/cannotMakeClassAnnotation.kt");
        }

        @TestMetadata("finalInterface.kt")
        public void testFinalInterface() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/finalInterface.kt");
        }

        @TestMetadata("illegalEnumAnnotation1.kt")
        public void testIllegalEnumAnnotation1() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/illegalEnumAnnotation1.kt");
        }

        @TestMetadata("illegalEnumAnnotation2.kt")
        public void testIllegalEnumAnnotation2() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/illegalEnumAnnotation2.kt");
        }

        @TestMetadata("infixModifier.kt")
        public void testInfixModifier() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/infixModifier.kt");
        }

        @TestMetadata("kt10409.kt")
        public void testKt10409() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/kt10409.kt");
        }

        @TestMetadata("nestedAbstractClass.kt")
        public void testNestedAbstractClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/nestedAbstractClass.kt");
        }

        @TestMetadata("nestedAnnotationClass.kt")
        public void testNestedAnnotationClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/nestedAnnotationClass.kt");
        }

        @TestMetadata("nestedClassNotAllowed.kt")
        public void testNestedClassNotAllowed() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/nestedClassNotAllowed.kt");
        }

        @TestMetadata("nestedDataClass.kt")
        public void testNestedDataClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/nestedDataClass.kt");
        }

        @TestMetadata("nestedEnumClass.kt")
        public void testNestedEnumClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/nestedEnumClass.kt");
        }

        @TestMetadata("nestedInterface.kt")
        public void testNestedInterface() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/nestedInterface.kt");
        }

        @TestMetadata("nestedObject.kt")
        public void testNestedObject() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/nestedObject.kt");
        }

        @TestMetadata("nestedSealedClass.kt")
        public void testNestedSealedClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/nestedSealedClass.kt");
        }

        @TestMetadata("noAbstractForAnonymousObject.kt")
        public void testNoAbstractForAnonymousObject() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/noAbstractForAnonymousObject.kt");
        }

        @TestMetadata("noAbstractForObject.kt")
        public void testNoAbstractForObject() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/noAbstractForObject.kt");
        }

        @TestMetadata("noLateinitOnNullable.kt")
        public void testNoLateinitOnNullable() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/noLateinitOnNullable.kt");
        }

        @TestMetadata("noLateinitOnPrimitive.kt")
        public void testNoLateinitOnPrimitive() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/noLateinitOnPrimitive.kt");
        }

        @TestMetadata("notAnAnnotationClass.kt")
        public void testNotAnAnnotationClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/notAnAnnotationClass.kt");
        }

        @TestMetadata("openCompanionObject.kt")
        public void testOpenCompanionObject() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openCompanionObject.kt");
        }

        @TestMetadata("openCompanionObject2.kt")
        public void testOpenCompanionObject2() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openCompanionObject2.kt");
        }

        @TestMetadata("openMemberInFinalClass1.kt")
        public void testOpenMemberInFinalClass1() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass1.kt");
        }

        @TestMetadata("openMemberInFinalClass2.kt")
        public void testOpenMemberInFinalClass2() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass2.kt");
        }

        @TestMetadata("openMemberInFinalClass3.kt")
        public void testOpenMemberInFinalClass3() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass3.kt");
        }

        @TestMetadata("openMemberInFinalClass4.kt")
        public void testOpenMemberInFinalClass4() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass4.kt");
        }

        @TestMetadata("openMemberInObject.kt")
        public void testOpenMemberInObject() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openMemberInObject.kt");
        }

        @TestMetadata("openModifierInEnum.kt")
        public void testOpenModifierInEnum() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openModifierInEnum.kt");
        }

        @TestMetadata("openObject.kt")
        public void testOpenObject() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openObject.kt");
        }

        @TestMetadata("openVarWithPrivateSetter1.kt")
        public void testOpenVarWithPrivateSetter1() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openVarWithPrivateSetter1.kt");
        }

        @TestMetadata("openVarWithPrivateSetter2.kt")
        public void testOpenVarWithPrivateSetter2() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/openVarWithPrivateSetter2.kt");
        }

        @TestMetadata("operatorModifier.kt")
        public void testOperatorModifier() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/operatorModifier.kt");
        }

        @TestMetadata("operatorModifierCollection.kt")
        public void testOperatorModifierCollection() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/operatorModifierCollection.kt");
        }

        @TestMetadata("operatorModifierComponent.kt")
        public void testOperatorModifierComponent() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/operatorModifierComponent.kt");
        }

        @TestMetadata("operatorModifierGet.kt")
        public void testOperatorModifierGet() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/operatorModifierGet.kt");
        }

        @TestMetadata("operatorModifierInherited.kt")
        public void testOperatorModifierInherited() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/operatorModifierInherited.kt");
        }

        @TestMetadata("overrideWithPrivateSetter1.kt")
        public void testOverrideWithPrivateSetter1() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/overrideWithPrivateSetter1.kt");
        }

        @TestMetadata("overrideWithPrivateSetter2.kt")
        public void testOverrideWithPrivateSetter2() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/overrideWithPrivateSetter2.kt");
        }

        @TestMetadata("packageMemberCannotBeProtected.kt")
        public void testPackageMemberCannotBeProtected() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/packageMemberCannotBeProtected.kt");
        }

        @TestMetadata("redundantOpenInInterface.kt")
        public void testRedundantOpenInInterface() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/redundantOpenInInterface.kt");
        }

        @TestMetadata("removeAbstractModifier.kt")
        public void testRemoveAbstractModifier() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeAbstractModifier.kt");
        }

        @TestMetadata("removeConst.kt")
        public void testRemoveConst() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeConst.kt");
        }

        @TestMetadata("removeExternalModifier.kt")
        public void testRemoveExternalModifier() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeExternalModifier.kt");
        }

        @TestMetadata("removeIncompatibleModifier.kt")
        public void testRemoveIncompatibleModifier() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeIncompatibleModifier.kt");
        }

        @TestMetadata("removeInnerForClassInInterface.kt")
        public void testRemoveInnerForClassInInterface() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeInnerForClassInInterface.kt");
        }

        @TestMetadata("removeModifierFromForbiddenOperatorMod.kt")
        public void testRemoveModifierFromForbiddenOperatorMod() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeModifierFromForbiddenOperatorMod.kt");
        }

        @TestMetadata("removeModifierFromOperatorMod.kt")
        public void testRemoveModifierFromOperatorMod() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeModifierFromOperatorMod.kt");
        }

        @TestMetadata("removeModifierFromOperatorModAssign.kt")
        public void testRemoveModifierFromOperatorModAssign() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeModifierFromOperatorModAssign.kt");
        }

        @TestMetadata("removeProtectedModifier.kt")
        public void testRemoveProtectedModifier() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeProtectedModifier.kt");
        }

        @TestMetadata("removeRedundantModifier1.kt")
        public void testRemoveRedundantModifier1() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeRedundantModifier1.kt");
        }

        @TestMetadata("removeRedundantModifier2.kt")
        public void testRemoveRedundantModifier2() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeRedundantModifier2.kt");
        }

        @TestMetadata("removeRedundantModifier3.kt")
        public void testRemoveRedundantModifier3() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeRedundantModifier3.kt");
        }

        @TestMetadata("removeSupertype1.kt")
        public void testRemoveSupertype1() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeSupertype1.kt");
        }

        @TestMetadata("removeSupertype2.kt")
        public void testRemoveSupertype2() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeSupertype2.kt");
        }

        @TestMetadata("removeSupertype3.kt")
        public void testRemoveSupertype3() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeSupertype3.kt");
        }

        @TestMetadata("removeSupertype4.kt")
        public void testRemoveSupertype4() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/removeSupertype4.kt");
        }

        @TestMetadata("visibilityModifer1.kt")
        public void testVisibilityModifer1() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/visibilityModifer1.kt");
        }

        @TestMetadata("visibilityModifer2.kt")
        public void testVisibilityModifer2() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/visibilityModifer2.kt");
        }

        @TestMetadata("visibilityModiferOverrideJavaRuntime.kt")
        public void testVisibilityModiferOverrideJavaRuntime() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/visibilityModiferOverrideJavaRuntime.kt");
        }

        @TestMetadata("visibilityModiferParameter.kt")
        public void testVisibilityModiferParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/visibilityModiferParameter.kt");
        }

        @TestMetadata("withAnnotationAndBlockComment.kt")
        public void testWithAnnotationAndBlockComment() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/withAnnotationAndBlockComment.kt");
        }

        @TestMetadata("withAnnotationAndEolComment.kt")
        public void testWithAnnotationAndEolComment() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/withAnnotationAndEolComment.kt");
        }

        @TestMetadata("withAnnotationAndEolComment2.kt")
        public void testWithAnnotationAndEolComment2() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/withAnnotationAndEolComment2.kt");
        }

        @TestMetadata("withAnnotationAndEolComment3.kt")
        public void testWithAnnotationAndEolComment3() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/withAnnotationAndEolComment3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration")
    public static class AddOpenToClassDeclaration extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationSuperType.kt")
        public void testAnnotationSuperType() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/annotationSuperType.kt");
        }

        @TestMetadata("dataSuperType.kt")
        public void testDataSuperType() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/dataSuperType.kt");
        }

        @TestMetadata("enumSupertype.kt")
        public void testEnumSupertype() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/enumSupertype.kt");
        }

        @TestMetadata("enumUpperBound.kt")
        public void testEnumUpperBound() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/enumUpperBound.kt");
        }

        @TestMetadata("explicitlyFinalSupertype.kt")
        public void testExplicitlyFinalSupertype() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/explicitlyFinalSupertype.kt");
        }

        @TestMetadata("explicitlyFinalUpperBound.kt")
        public void testExplicitlyFinalUpperBound() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/explicitlyFinalUpperBound.kt");
        }

        @TestMetadata("finalLibrarySupertype.kt")
        public void testFinalLibrarySupertype() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalLibrarySupertype.kt");
        }

        @TestMetadata("finalLibraryUpperBound.kt")
        public void testFinalLibraryUpperBound() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalLibraryUpperBound.kt");
        }

        @TestMetadata("finalSupertype.kt")
        public void testFinalSupertype() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalSupertype.kt");
        }

        @TestMetadata("finalUpperBound.kt")
        public void testFinalUpperBound() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalUpperBound.kt");
        }

        @TestMetadata("implementInterfaceFinalSupertype.kt")
        public void testImplementInterfaceFinalSupertype() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/implementInterfaceFinalSupertype.kt");
        }

        @TestMetadata("inlineSuperType.kt")
        public void testInlineSuperType() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/inlineSuperType.kt");
        }

        @TestMetadata("nestedFinalClass.kt")
        public void testNestedFinalClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/nestedFinalClass.kt");
        }

        @TestMetadata("openInCompanion.kt")
        public void testOpenInCompanion() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/openInCompanion.kt");
        }

        @TestMetadata("secondaryCtrDelegationInHeader.kt")
        public void testSecondaryCtrDelegationInHeader() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/secondaryCtrDelegationInHeader.kt");
        }

        @TestMetadata("secondaryCtrDelegationInSecondary.kt")
        public void testSecondaryCtrDelegationInSecondary() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/secondaryCtrDelegationInSecondary.kt");
        }

        @TestMetadata("valueSuperType.kt")
        public void testValueSuperType() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/valueSuperType.kt");
        }

        @TestMetadata("withConstructor.kt")
        public void testWithConstructor() throws Exception {
            runTest("../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/withConstructor.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/nullables")
    public abstract static class Nullables extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/quickfix/nullables")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("removeRedundantNullable.kt")
            public void testRemoveRedundantNullable() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/removeRedundantNullable.kt");
            }

            @TestMetadata("removeSupertypeNullable1.kt")
            public void testRemoveSupertypeNullable1() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/removeSupertypeNullable1.kt");
            }

            @TestMetadata("removeSupertypeNullable2.kt")
            public void testRemoveSupertypeNullable2() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/removeSupertypeNullable2.kt");
            }

            @TestMetadata("removeUselessNullable.kt")
            public void testRemoveUselessNullable() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/removeUselessNullable.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/quickfix/nullables/unsafeInfixCall")
        public static class UnsafeInfixCall extends AbstractHighLevelQuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("noComparison.kt")
            public void testNoComparison() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/noComparison.kt");
            }

            @TestMetadata("unsafeComparisonInCondition.kt")
            public void testUnsafeComparisonInCondition() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInCondition.kt");
            }

            @TestMetadata("unsafeComparisonInLogic.kt")
            public void testUnsafeComparisonInLogic() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInLogic.kt");
            }

            @TestMetadata("unsafeComparisonInWhen.kt")
            public void testUnsafeComparisonInWhen() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInWhen.kt");
            }

            @TestMetadata("unsafeComparisonInWhile.kt")
            public void testUnsafeComparisonInWhile() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInWhile.kt");
            }

            @TestMetadata("unsafeGet.kt")
            public void testUnsafeGet() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeGet.kt");
            }

            @TestMetadata("unsafeInfixCall.kt")
            public void testUnsafeInfixCall() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInfixCall.kt");
            }

            @TestMetadata("unsafeInvoke.kt")
            public void testUnsafeInvoke() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInvoke.kt");
            }

            @TestMetadata("unsafeInvokeWithImplicitReceiver.kt")
            public void testUnsafeInvokeWithImplicitReceiver() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInvokeWithImplicitReceiver.kt");
            }

            @TestMetadata("unsafeInvokeWithReceiver.kt")
            public void testUnsafeInvokeWithReceiver() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInvokeWithReceiver.kt");
            }

            @TestMetadata("unsafePlus.kt")
            public void testUnsafePlus() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafePlus.kt");
            }

            @TestMetadata("unsafeSet.kt")
            public void testUnsafeSet() throws Exception {
                runTest("../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeSet.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/override")
    public static class Override extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("changeToInvocation.kt")
        public void testChangeToInvocation() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/changeToInvocation.kt");
        }

        @TestMetadata("dontOfferToImplementMembersForExpectedClass.kt")
        public void testDontOfferToImplementMembersForExpectedClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/dontOfferToImplementMembersForExpectedClass.kt");
        }

        @TestMetadata("implemenAsConstructorParameter.kt")
        public void testImplemenAsConstructorParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/implemenAsConstructorParameter.kt");
        }

        @TestMetadata("implemenAsConstructorParameterFunction.kt")
        public void testImplemenAsConstructorParameterFunction() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/implemenAsConstructorParameterFunction.kt");
        }

        @TestMetadata("implemenAsConstructorParameterInObject.kt")
        public void testImplemenAsConstructorParameterInObject() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/implemenAsConstructorParameterInObject.kt");
        }

        @TestMetadata("implementMember.kt")
        public void testImplementMember() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/implementMember.kt");
        }

        @TestMetadata("implementMemberFromAbstractClass.kt")
        public void testImplementMemberFromAbstractClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/implementMemberFromAbstractClass.kt");
        }

        @TestMetadata("overriddingMultipleFinalMethods.kt")
        public void testOverriddingMultipleFinalMethods() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/overriddingMultipleFinalMethods.kt");
        }

        @TestMetadata("overridingDelegatedMethod.kt")
        public void testOverridingDelegatedMethod() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/overridingDelegatedMethod.kt");
        }

        @TestMetadata("overridingFakeOverride.kt")
        public void testOverridingFakeOverride() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/overridingFakeOverride.kt");
        }

        @TestMetadata("overridingFinalJavaMethod.kt")
        public void testOverridingFinalJavaMethod() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/overridingFinalJavaMethod.kt");
        }

        @TestMetadata("overridingFinalMethod.kt")
        public void testOverridingFinalMethod() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/overridingFinalMethod.kt");
        }

        @TestMetadata("overridingFinalMethodInLocal.kt")
        public void testOverridingFinalMethodInLocal() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/overridingFinalMethodInLocal.kt");
        }

        @TestMetadata("overridingFinalProperty.kt")
        public void testOverridingFinalProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/overridingFinalProperty.kt");
        }

        @TestMetadata("overridingOpenMethodInFinalClass.kt")
        public void testOverridingOpenMethodInFinalClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/overridingOpenMethodInFinalClass.kt");
        }

        @TestMetadata("parameterNameChangedAmbiguousRename.kt")
        public void testParameterNameChangedAmbiguousRename() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/parameterNameChangedAmbiguousRename.kt");
        }

        @TestMetadata("parameterNameChangedMultipleOverrideRenamePossible.kt")
        public void testParameterNameChangedMultipleOverrideRenamePossible() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/parameterNameChangedMultipleOverrideRenamePossible.kt");
        }

        @TestMetadata("parameterNameChangedRenamePossible.kt")
        public void testParameterNameChangedRenamePossible() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/parameterNameChangedRenamePossible.kt");
        }

        @TestMetadata("virtualMethodHidden.kt")
        public void testVirtualMethodHidden() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/virtualMethodHidden.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/override/typeMismatchOnOverride")
    public static class TypeMismatchOnOverride extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cantChangeMultipleOverriddenPropertiesTypes.kt")
        public void testCantChangeMultipleOverriddenPropertiesTypes() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangeMultipleOverriddenPropertiesTypes.kt");
        }

        @TestMetadata("cantChangeOverriddenPropertyTypeToMatchOverridingProperty.kt")
        public void testCantChangeOverriddenPropertyTypeToMatchOverridingProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangeOverriddenPropertyTypeToMatchOverridingProperty.kt");
        }

        @TestMetadata("cantChangePropertyTypeToMatchOverridenProperties.kt")
        public void testCantChangePropertyTypeToMatchOverridenProperties() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangePropertyTypeToMatchOverridenProperties.kt");
        }

        @TestMetadata("cantChangeReturnTypeOfOverriddenFunction.kt")
        public void testCantChangeReturnTypeOfOverriddenFunction() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangeReturnTypeOfOverriddenFunction.kt");
        }

        @TestMetadata("changeOverriddenPropertyType1.kt")
        public void testChangeOverriddenPropertyType1() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverriddenPropertyType1.kt");
        }

        @TestMetadata("changeOverriddenPropertyType2.kt")
        public void testChangeOverriddenPropertyType2() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverriddenPropertyType2.kt");
        }

        @TestMetadata("changeOverriddenPropertyTypeFromCtorParameter.kt")
        public void testChangeOverriddenPropertyTypeFromCtorParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverriddenPropertyTypeFromCtorParameter.kt");
        }

        @TestMetadata("changeOverridingCtorParameterType.kt")
        public void testChangeOverridingCtorParameterType() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverridingCtorParameterType.kt");
        }

        @TestMetadata("changeOverridingPropertyTypeToFunctionType.kt")
        public void testChangeOverridingPropertyTypeToFunctionType() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverridingPropertyTypeToFunctionType.kt");
        }

        @TestMetadata("changeReturnTypeOfOverriddenFunction.kt")
        public void testChangeReturnTypeOfOverriddenFunction() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeReturnTypeOfOverriddenFunction.kt");
        }

        @TestMetadata("namedFunctionReturnOverrideInsideVariableInitializer.kt")
        public void testNamedFunctionReturnOverrideInsideVariableInitializer() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/namedFunctionReturnOverrideInsideVariableInitializer.kt");
        }

        @TestMetadata("objectInsideBody.kt")
        public void testObjectInsideBody() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/objectInsideBody.kt");
        }

        @TestMetadata("propertyReturnTypeMismatchOnOverride.kt")
        public void testPropertyReturnTypeMismatchOnOverride() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/propertyReturnTypeMismatchOnOverride.kt");
        }

        @TestMetadata("propertyTypeMismatchOnOverrideIntLong.kt")
        public void testPropertyTypeMismatchOnOverrideIntLong() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/propertyTypeMismatchOnOverrideIntLong.kt");
        }

        @TestMetadata("propertyTypeMismatchOnOverrideIntUnit.kt")
        public void testPropertyTypeMismatchOnOverrideIntUnit() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/propertyTypeMismatchOnOverrideIntUnit.kt");
        }

        @TestMetadata("returnTypeMismatchOnMultipleOverride.kt")
        public void testReturnTypeMismatchOnMultipleOverride() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnMultipleOverride.kt");
        }

        @TestMetadata("returnTypeMismatchOnMultipleOverrideAmbiguity.kt")
        public void testReturnTypeMismatchOnMultipleOverrideAmbiguity() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnMultipleOverrideAmbiguity.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverrideIntLong.kt")
        public void testReturnTypeMismatchOnOverrideIntLong() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnOverrideIntLong.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverrideIntUnit.kt")
        public void testReturnTypeMismatchOnOverrideIntUnit() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnOverrideIntUnit.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverrideUnitInt.kt")
        public void testReturnTypeMismatchOnOverrideUnitInt() throws Exception {
            runTest("../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnOverrideUnitInt.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/removeRedundantSpreadOperator")
    public static class RemoveRedundantSpreadOperator extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/quickfix/removeRedundantSpreadOperator/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall")
    public static class ReplaceInfixOrOperatorCall extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("array.kt")
        public void testArray() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/array.kt");
        }

        @TestMetadata("arraySet.kt")
        public void testArraySet() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/arraySet.kt");
        }

        @TestMetadata("assignmentArray.kt")
        public void testAssignmentArray() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentArray.kt");
        }

        @TestMetadata("assignmentBinaryOperator.kt")
        public void testAssignmentBinaryOperator() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentBinaryOperator.kt");
        }

        @TestMetadata("assignmentCallExpression.kt")
        public void testAssignmentCallExpression() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentCallExpression.kt");
        }

        @TestMetadata("assignmentList.kt")
        public void testAssignmentList() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentList.kt");
        }

        @TestMetadata("augmentedAssignmentAvailable.kt")
        public void testAugmentedAssignmentAvailable() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/augmentedAssignmentAvailable.kt");
        }

        @TestMetadata("augmentedAssignmentNotAvailable.kt")
        public void testAugmentedAssignmentNotAvailable() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/augmentedAssignmentNotAvailable.kt");
        }

        @TestMetadata("binaryOperator.kt")
        public void testBinaryOperator() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/binaryOperator.kt");
        }

        @TestMetadata("callExpression.kt")
        public void testCallExpression() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/callExpression.kt");
        }

        @TestMetadata("callExpressionInSafeQualified.kt")
        public void testCallExpressionInSafeQualified() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/callExpressionInSafeQualified.kt");
        }

        @TestMetadata("callExpressionInSafeQualified2.kt")
        public void testCallExpressionInSafeQualified2() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/callExpressionInSafeQualified2.kt");
        }

        @TestMetadata("containsBinaryOperator.kt")
        public void testContainsBinaryOperator() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/containsBinaryOperator.kt");
        }

        @TestMetadata("divAssignOnMutableMap.kt")
        public void testDivAssignOnMutableMap() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/divAssignOnMutableMap.kt");
        }

        @TestMetadata("hasElvis.kt")
        public void testHasElvis() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/hasElvis.kt");
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/list.kt");
        }

        @TestMetadata("minusAssignOnMutableMap.kt")
        public void testMinusAssignOnMutableMap() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/minusAssignOnMutableMap.kt");
        }

        @TestMetadata("notContainsBinaryOperator.kt")
        public void testNotContainsBinaryOperator() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/notContainsBinaryOperator.kt");
        }

        @TestMetadata("plusAssignOnMutableMap.kt")
        public void testPlusAssignOnMutableMap() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/plusAssignOnMutableMap.kt");
        }

        @TestMetadata("plusAssignOnMutableMapWithNullableValueType.kt")
        public void testPlusAssignOnMutableMapWithNullableValueType() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/plusAssignOnMutableMapWithNullableValueType.kt");
        }

        @TestMetadata("remAssignOnMutableMap.kt")
        public void testRemAssignOnMutableMap() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/remAssignOnMutableMap.kt");
        }

        @TestMetadata("timesAssignOnMutableMap.kt")
        public void testTimesAssignOnMutableMap() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/timesAssignOnMutableMap.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation")
    public static class ReplaceWithArrayCallInAnnotation extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("emptyLiteral.kt")
        public void testEmptyLiteral() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/emptyLiteral.kt");
        }

        @TestMetadata("literalWithValues.kt")
        public void testLiteralWithValues() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/literalWithValues.kt");
        }

        @TestMetadata("replaceForbiddenAssignmentWithArrayLiteral.kt")
        public void testReplaceForbiddenAssignmentWithArrayLiteral() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/replaceForbiddenAssignmentWithArrayLiteral.kt");
        }

        @TestMetadata("replaceSingleElementInNamedForm.kt")
        public void testReplaceSingleElementInNamedForm() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/replaceSingleElementInNamedForm.kt");
        }

        @TestMetadata("replaceSingleElementInNamedForm_1_2.kt")
        public void testReplaceSingleElementInNamedForm_1_2() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/replaceSingleElementInNamedForm_1_2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/replaceWithDotCall")
    public static class ReplaceWithDotCall extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("callWillChangeNullability.kt")
        public void testCallWillChangeNullability() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithDotCall/callWillChangeNullability.kt");
        }

        @TestMetadata("callWillChangeNullability2.kt")
        public void testCallWillChangeNullability2() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithDotCall/callWillChangeNullability2.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithDotCall/comment.kt");
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithDotCall/functionCall.kt");
        }

        @TestMetadata("lineBreak.kt")
        public void testLineBreak() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithDotCall/lineBreak.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithDotCall/normal.kt");
        }

        @TestMetadata("safeCallChain.kt")
        public void testSafeCallChain() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithDotCall/safeCallChain.kt");
        }

        @TestMetadata("safeCallChain2.kt")
        public void testSafeCallChain2() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithDotCall/safeCallChain2.kt");
        }

        @TestMetadata("safeCallChain3.kt")
        public void testSafeCallChain3() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithDotCall/safeCallChain3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/replaceWithSafeCall")
    public static class ReplaceWithSafeCall extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("apply.kt")
        public void testApply() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/apply.kt");
        }

        @TestMetadata("applyWithImplicitParameter.kt")
        public void testApplyWithImplicitParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/applyWithImplicitParameter.kt");
        }

        @TestMetadata("applyWithImplicitParameterFunctionCall.kt")
        public void testApplyWithImplicitParameterFunctionCall() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/applyWithImplicitParameterFunctionCall.kt");
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/argument.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/assignment.kt");
        }

        @TestMetadata("assignmentFromImplicitParameter.kt")
        public void testAssignmentFromImplicitParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentFromImplicitParameter.kt");
        }

        @TestMetadata("assignmentToNullable.kt")
        public void testAssignmentToNullable() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToNullable.kt");
        }

        @TestMetadata("assignmentToProperty.kt")
        public void testAssignmentToProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToProperty.kt");
        }

        @TestMetadata("assignmentToPropertyWithNoExplicitType.kt")
        public void testAssignmentToPropertyWithNoExplicitType() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToPropertyWithNoExplicitType.kt");
        }

        @TestMetadata("assignmentToUnsafeCallExpression.kt")
        public void testAssignmentToUnsafeCallExpression() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToUnsafeCallExpression.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/comment.kt");
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/expression.kt");
        }

        @TestMetadata("extFunction.kt")
        public void testExtFunction() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/extFunction.kt");
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/functionCall.kt");
        }

        @TestMetadata("functionExpressionBody.kt")
        public void testFunctionExpressionBody() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/functionExpressionBody.kt");
        }

        @TestMetadata("functionExpressionBodyWithNoExplicitType.kt")
        public void testFunctionExpressionBodyWithNoExplicitType() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/functionExpressionBodyWithNoExplicitType.kt");
        }

        @TestMetadata("hasElvis.kt")
        public void testHasElvis() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/hasElvis.kt");
        }

        @TestMetadata("hasElvis2.kt")
        public void testHasElvis2() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/hasElvis2.kt");
        }

        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/invokeOperator.kt");
        }

        @TestMetadata("invokeOperator2.kt")
        public void testInvokeOperator2() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/invokeOperator2.kt");
        }

        @TestMetadata("lastStatementOfLambdaAsArgument.kt")
        public void testLastStatementOfLambdaAsArgument() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/lastStatementOfLambdaAsArgument.kt");
        }

        @TestMetadata("lastStatementOfLambdaAsLocalVariable.kt")
        public void testLastStatementOfLambdaAsLocalVariable() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/lastStatementOfLambdaAsLocalVariable.kt");
        }

        @TestMetadata("lastStatementOfLambdaAsProperty.kt")
        public void testLastStatementOfLambdaAsProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/lastStatementOfLambdaAsProperty.kt");
        }

        @TestMetadata("let.kt")
        public void testLet() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/let.kt");
        }

        @TestMetadata("letWithParameter.kt")
        public void testLetWithParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/letWithParameter.kt");
        }

        @TestMetadata("lineBreak.kt")
        public void testLineBreak() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/lineBreak.kt");
        }

        @TestMetadata("noReplaceWithSafeCallForImplicitReceiver.kt")
        public void testNoReplaceWithSafeCallForImplicitReceiver() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/noReplaceWithSafeCallForImplicitReceiver.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/normal.kt");
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            runTest("../idea/tests/testData/quickfix/replaceWithSafeCall/return.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode")
    public static class SpecifyVisibilityInExplicitApiMode extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/class.kt");
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/companion.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/constructor.kt");
        }

        @TestMetadata("method.kt")
        public void testMethod() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/method.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/property.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/supercalls")
    public static class Supercalls extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("typeArgumentsRedundantInSuperQualifier.kt")
        public void testTypeArgumentsRedundantInSuperQualifier() throws Exception {
            runTest("../idea/tests/testData/quickfix/supercalls/typeArgumentsRedundantInSuperQualifier.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs")
    public static class SurroundWithArrayOfForNamedArgumentsToVarargs extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("onlyShortenInsertedArrayOfCall.kt")
        public void testOnlyShortenInsertedArrayOfCall() throws Exception {
            runTest("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/onlyShortenInsertedArrayOfCall.kt");
        }

        @TestMetadata("replaceForVarargOfAny.kt")
        public void testReplaceForVarargOfAny() throws Exception {
            runTest("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceForVarargOfAny.kt");
        }

        @TestMetadata("replaceForbiddenAssigningIntoArrayCall.kt")
        public void testReplaceForbiddenAssigningIntoArrayCall() throws Exception {
            runTest("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceForbiddenAssigningIntoArrayCall.kt");
        }

        @TestMetadata("replaceToArrayOfPrimitiveTypes.kt")
        public void testReplaceToArrayOfPrimitiveTypes() throws Exception {
            runTest("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceToArrayOfPrimitiveTypes.kt");
        }

        @TestMetadata("replaceToArrayOfPrimitiveTypes_1_2.kt")
        public void testReplaceToArrayOfPrimitiveTypes_1_2() throws Exception {
            runTest("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceToArrayOfPrimitiveTypes_1_2.kt");
        }

        @TestMetadata("simpleNamedArgumentToVararg.kt")
        public void testSimpleNamedArgumentToVararg() throws Exception {
            runTest("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/simpleNamedArgumentToVararg.kt");
        }

        @TestMetadata("simpleNamedArgumentToVararg_1_2.kt")
        public void testSimpleNamedArgumentToVararg_1_2() throws Exception {
            runTest("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/simpleNamedArgumentToVararg_1_2.kt");
        }

        @TestMetadata("surroundWithSpreadForConstructorCall.kt")
        public void testSurroundWithSpreadForConstructorCall() throws Exception {
            runTest("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/surroundWithSpreadForConstructorCall.kt");
        }

        @TestMetadata("surroundWithSpreadForConstructorCall_1_2.kt")
        public void testSurroundWithSpreadForConstructorCall_1_2() throws Exception {
            runTest("../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/surroundWithSpreadForConstructorCall_1_2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/variables/changeMutability")
    public static class ChangeMutability extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("capturedMemberValInitialization.kt")
        public void testCapturedMemberValInitialization() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/capturedMemberValInitialization.kt");
        }

        @TestMetadata("capturedValInitialization.kt")
        public void testCapturedValInitialization() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/capturedValInitialization.kt");
        }

        @TestMetadata("const.kt")
        public void testConst() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/const.kt");
        }

        @TestMetadata("funParameter.kt")
        public void testFunParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/funParameter.kt");
        }

        @TestMetadata("localInGetter.kt")
        public void testLocalInGetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/localInGetter.kt");
        }

        @TestMetadata("valOverrideVar.kt")
        public void testValOverrideVar() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/valOverrideVar.kt");
        }

        @TestMetadata("valOverrideVarConstructorParameter.kt")
        public void testValOverrideVarConstructorParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/valOverrideVarConstructorParameter.kt");
        }

        @TestMetadata("valReassignmentLocal.kt")
        public void testValReassignmentLocal() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentLocal.kt");
        }

        @TestMetadata("valReassignmentOuterDecl.kt")
        public void testValReassignmentOuterDecl() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentOuterDecl.kt");
        }

        @TestMetadata("valReassignmentProperty.kt")
        public void testValReassignmentProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentProperty.kt");
        }

        @TestMetadata("valReassignmentPropertyConstructorParameter.kt")
        public void testValReassignmentPropertyConstructorParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentPropertyConstructorParameter.kt");
        }

        @TestMetadata("valWithSetter.kt")
        public void testValWithSetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/valWithSetter.kt");
        }

        @TestMetadata("varAnnotationParameter.kt")
        public void testVarAnnotationParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/changeMutability/varAnnotationParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/variables/removeValVarFromParameter")
    public static class RemoveValVarFromParameter extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("catchParameter.kt")
        public void testCatchParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/removeValVarFromParameter/catchParameter.kt");
        }

        @TestMetadata("constructorParameter.kt")
        public void testConstructorParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/removeValVarFromParameter/constructorParameter.kt");
        }

        @TestMetadata("funParameter.kt")
        public void testFunParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/removeValVarFromParameter/funParameter.kt");
        }

        @TestMetadata("loopMultiParameter.kt")
        public void testLoopMultiParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/removeValVarFromParameter/loopMultiParameter.kt");
        }

        @TestMetadata("loopParameter.kt")
        public void testLoopParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/removeValVarFromParameter/loopParameter.kt");
        }

        @TestMetadata("parameterWithComment.kt")
        public void testParameterWithComment() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/removeValVarFromParameter/parameterWithComment.kt");
        }

        @TestMetadata("secondaryConstructorParameter.kt")
        public void testSecondaryConstructorParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/variables/removeValVarFromParameter/secondaryConstructorParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/when")
    public static class When extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addElseBranchBooleanWarning.kt")
        public void testAddElseBranchBooleanWarning() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addElseBranchBooleanWarning.kt");
        }

        @TestMetadata("addElseBranchEnumStatement.kt")
        public void testAddElseBranchEnumStatement() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addElseBranchEnumStatement.kt");
        }

        @TestMetadata("addElseBranchSealed.kt")
        public void testAddElseBranchSealed() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addElseBranchSealed.kt");
        }

        @TestMetadata("addElseBranchSealedWarning.kt")
        public void testAddElseBranchSealedWarning() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addElseBranchSealedWarning.kt");
        }

        @TestMetadata("addRemainingBranchesBlankLine.kt")
        public void testAddRemainingBranchesBlankLine() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesBlankLine.kt");
        }

        @TestMetadata("addRemainingBranchesBlankLineWithComment.kt")
        public void testAddRemainingBranchesBlankLineWithComment() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesBlankLineWithComment.kt");
        }

        @TestMetadata("addRemainingBranchesBoolean.kt")
        public void testAddRemainingBranchesBoolean() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesBoolean.kt");
        }

        @TestMetadata("addRemainingBranchesEnum.kt")
        public void testAddRemainingBranchesEnum() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesEnum.kt");
        }

        @TestMetadata("addRemainingBranchesEnumBackTicks.kt")
        public void testAddRemainingBranchesEnumBackTicks() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesEnumBackTicks.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport1.kt")
        public void testAddRemainingBranchesEnumImport1() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport1.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport2.kt")
        public void testAddRemainingBranchesEnumImport2() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport2.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport3.kt")
        public void testAddRemainingBranchesEnumImport3() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport3.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport4.kt")
        public void testAddRemainingBranchesEnumImport4() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport4.kt");
        }

        @TestMetadata("addRemainingBranchesEnumStatement.kt")
        public void testAddRemainingBranchesEnumStatement() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesEnumStatement.kt");
        }

        @TestMetadata("addRemainingBranchesInNonDefaultPackage.kt")
        public void testAddRemainingBranchesInNonDefaultPackage() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesInNonDefaultPackage.kt");
        }

        @TestMetadata("addRemainingBranchesMissingLeftBracket.kt")
        public void testAddRemainingBranchesMissingLeftBracket() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesMissingLeftBracket.kt");
        }

        @TestMetadata("addRemainingBranchesMissingRightBracket.kt")
        public void testAddRemainingBranchesMissingRightBracket() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesMissingRightBracket.kt");
        }

        @TestMetadata("addRemainingBranchesMissingRightParenthesis.kt")
        public void testAddRemainingBranchesMissingRightParenthesis() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesMissingRightParenthesis.kt");
        }

        @TestMetadata("addRemainingBranchesSealed.kt")
        public void testAddRemainingBranchesSealed() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesSealed.kt");
        }

        @TestMetadata("addRemainingBranchesSealedBackTicks.kt")
        public void testAddRemainingBranchesSealedBackTicks() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesSealedBackTicks.kt");
        }

        @TestMetadata("addRemainingBranchesSealedStatement.kt")
        public void testAddRemainingBranchesSealedStatement() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesSealedStatement.kt");
        }

        @TestMetadata("addRemainingBranchesSealedWarning.kt")
        public void testAddRemainingBranchesSealedWarning() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/addRemainingBranchesSealedWarning.kt");
        }

        @TestMetadata("breakInWhen.kt")
        public void testBreakInWhen() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/breakInWhen.kt");
        }

        @TestMetadata("breakInWhenInLabeled.kt")
        public void testBreakInWhenInLabeled() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/breakInWhenInLabeled.kt");
        }

        @TestMetadata("commasInConditionWithNoArguments.kt")
        public void testCommasInConditionWithNoArguments() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/commasInConditionWithNoArguments.kt");
        }

        @TestMetadata("commasInConditionWithNoArguments2.kt")
        public void testCommasInConditionWithNoArguments2() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/commasInConditionWithNoArguments2.kt");
        }

        @TestMetadata("continueInWhen.kt")
        public void testContinueInWhen() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/continueInWhen.kt");
        }

        @TestMetadata("continueInWhenInLabeled.kt")
        public void testContinueInWhenInLabeled() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/continueInWhenInLabeled.kt");
        }

        @TestMetadata("continueInWhenWithLabel.kt")
        public void testContinueInWhenWithLabel() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/continueInWhenWithLabel.kt");
        }

        @TestMetadata("elseNotLastInWhen.kt")
        public void testElseNotLastInWhen() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/elseNotLastInWhen.kt");
        }

        @TestMetadata("noElseInWhenWithBranches.kt")
        public void testNoElseInWhenWithBranches() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/noElseInWhenWithBranches.kt");
        }

        @TestMetadata("noElseInWhenWithoutBranches.kt")
        public void testNoElseInWhenWithoutBranches() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/noElseInWhenWithoutBranches.kt");
        }

        @TestMetadata("notRedundantBranch.kt")
        public void testNotRedundantBranch() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/notRedundantBranch.kt");
        }

        @TestMetadata("removeRedundantBranch.kt")
        public void testRemoveRedundantBranch() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/removeRedundantBranch.kt");
        }

        @TestMetadata("removeRedundantCondition.kt")
        public void testRemoveRedundantCondition() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/removeRedundantCondition.kt");
        }

        @TestMetadata("removeRedundantElse.kt")
        public void testRemoveRedundantElse() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/removeRedundantElse.kt");
        }

        @TestMetadata("twoElseBranchesInWhen.kt")
        public void testTwoElseBranchesInWhen() throws Exception {
            runTest("../idea/tests/testData/quickfix/when/twoElseBranchesInWhen.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/wrapWithSafeLetCall")
    public static class WrapWithSafeLetCall extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argumentNullable.kt")
        public void testArgumentNullable() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/argumentNullable.kt");
        }

        @TestMetadata("callWithLambdaArgument.kt")
        public void testCallWithLambdaArgument() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/callWithLambdaArgument.kt");
        }

        @TestMetadata("chainedCallTypeMismatch.kt")
        public void testChainedCallTypeMismatch() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/chainedCallTypeMismatch.kt");
        }

        @TestMetadata("chainedCallTypeMismatch2.kt")
        public void testChainedCallTypeMismatch2() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/chainedCallTypeMismatch2.kt");
        }

        @TestMetadata("chainedUnsafeCall.kt")
        public void testChainedUnsafeCall() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/chainedUnsafeCall.kt");
        }

        @TestMetadata("elvisArgument.kt")
        public void testElvisArgument() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/elvisArgument.kt");
        }

        @TestMetadata("expressionUnsafeCall.kt")
        public void testExpressionUnsafeCall() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/expressionUnsafeCall.kt");
        }

        @TestMetadata("extensionMethod.kt")
        public void testExtensionMethod() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/extensionMethod.kt");
        }

        @TestMetadata("extentionFunctionCall.kt")
        public void testExtentionFunctionCall() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/extentionFunctionCall.kt");
        }

        @TestMetadata("extentionFunctionCall2.kt")
        public void testExtentionFunctionCall2() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/extentionFunctionCall2.kt");
        }

        @TestMetadata("inOperator.kt")
        public void testInOperator() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/inOperator.kt");
        }

        @TestMetadata("insideLet.kt")
        public void testInsideLet() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/insideLet.kt");
        }

        @TestMetadata("invokeFuncUnsafe.kt")
        public void testInvokeFuncUnsafe() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeFuncUnsafe.kt");
        }

        @TestMetadata("invokeFunctionType.kt")
        public void testInvokeFunctionType() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeFunctionType.kt");
        }

        @TestMetadata("invokeFunctionType2.kt")
        public void testInvokeFunctionType2() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeFunctionType2.kt");
        }

        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeOperator.kt");
        }

        @TestMetadata("invokeOperator2.kt")
        public void testInvokeOperator2() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeOperator2.kt");
        }

        @TestMetadata("invokeUnsafe.kt")
        public void testInvokeUnsafe() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeUnsafe.kt");
        }

        @TestMetadata("nameAlreadyInScope.kt")
        public void testNameAlreadyInScope() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/nameAlreadyInScope.kt");
        }

        @TestMetadata("nullableBinaryExpression.kt")
        public void testNullableBinaryExpression() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/nullableBinaryExpression.kt");
        }

        @TestMetadata("nullableReceiver.kt")
        public void testNullableReceiver() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/nullableReceiver.kt");
        }

        @TestMetadata("objectQualifier.kt")
        public void testObjectQualifier() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/objectQualifier.kt");
        }

        @TestMetadata("refactorNullableFunctionTypeProperty1.kt")
        public void testRefactorNullableFunctionTypeProperty1() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/refactorNullableFunctionTypeProperty1.kt");
        }

        @TestMetadata("refactorNullableFunctionTypeProperty2.kt")
        public void testRefactorNullableFunctionTypeProperty2() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/refactorNullableFunctionTypeProperty2.kt");
        }

        @TestMetadata("unsafe.kt")
        public void testUnsafe() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/unsafe.kt");
        }

        @TestMetadata("unsafe2.kt")
        public void testUnsafe2() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/unsafe2.kt");
        }

        @TestMetadata("unsafeForNullableParameter.kt")
        public void testUnsafeForNullableParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/unsafeForNullableParameter.kt");
        }

        @TestMetadata("unstableValue.kt")
        public void testUnstableValue() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/unstableValue.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions1.kt")
        public void testWrapAllNonNullablePositions1() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions1.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions2.kt")
        public void testWrapAllNonNullablePositions2() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions2.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions3.kt")
        public void testWrapAllNonNullablePositions3() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions3.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions4.kt")
        public void testWrapAllNonNullablePositions4() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions4.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions5.kt")
        public void testWrapAllNonNullablePositions5() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions5.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions6.kt")
        public void testWrapAllNonNullablePositions6() throws Exception {
            runTest("../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions6.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/typeAddition")
    public static class TypeAddition extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("ambiguousFunctionReturnType.kt")
        public void testAmbiguousFunctionReturnType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/ambiguousFunctionReturnType.kt");
        }

        @TestMetadata("ambiguousPropertyReturnType.kt")
        public void testAmbiguousPropertyReturnType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/ambiguousPropertyReturnType.kt");
        }

        @TestMetadata("changeAccessorTypeToFunctionType.kt")
        public void testChangeAccessorTypeToFunctionType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/changeAccessorTypeToFunctionType.kt");
        }

        @TestMetadata("noAddErrorType.kt")
        public void testNoAddErrorType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/noAddErrorType.kt");
        }

        @TestMetadata("noExplicitTypeInApiMode.kt")
        public void testNoExplicitTypeInApiMode() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/noExplicitTypeInApiMode.kt");
        }

        @TestMetadata("propertyHasType.kt")
        public void testPropertyHasType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/propertyHasType.kt");
        }

        @TestMetadata("propertyWithGetterWithBlockBody.kt")
        public void testPropertyWithGetterWithBlockBody() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/propertyWithGetterWithBlockBody.kt");
        }

        @TestMetadata("propertyWithGetterWithInferredType.kt")
        public void testPropertyWithGetterWithInferredType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/propertyWithGetterWithInferredType.kt");
        }

        @TestMetadata("propertyWithGetterWithoutType.kt")
        public void testPropertyWithGetterWithoutType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/propertyWithGetterWithoutType.kt");
        }

        @TestMetadata("propertyWithRecursiveGetter.kt")
        public void testPropertyWithRecursiveGetter() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/propertyWithRecursiveGetter.kt");
        }

        @TestMetadata("propertyWithSetterWithoutType.kt")
        public void testPropertyWithSetterWithoutType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/propertyWithSetterWithoutType.kt");
        }

        @TestMetadata("protectedFunWithoutReturnType.kt")
        public void testProtectedFunWithoutReturnType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/protectedFunWithoutReturnType.kt");
        }

        @TestMetadata("publicFunWithoutBody.kt")
        public void testPublicFunWithoutBody() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/publicFunWithoutBody.kt");
        }

        @TestMetadata("publicFunWithoutReturnType.kt")
        public void testPublicFunWithoutReturnType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/publicFunWithoutReturnType.kt");
        }

        @TestMetadata("publicFunWithoutReturnTypeCaretOnParameter.kt")
        public void testPublicFunWithoutReturnTypeCaretOnParameter() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/publicFunWithoutReturnTypeCaretOnParameter.kt");
        }

        @TestMetadata("publicValWithoutReturnType.kt")
        public void testPublicValWithoutReturnType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/publicValWithoutReturnType.kt");
        }

        @TestMetadata("publicValWithoutReturnTypeCaretOnPublic.kt")
        public void testPublicValWithoutReturnTypeCaretOnPublic() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/publicValWithoutReturnTypeCaretOnPublic.kt");
        }

        @TestMetadata("wrongGetterParameterType.kt")
        public void testWrongGetterParameterType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/wrongGetterParameterType.kt");
        }

        @TestMetadata("wrongGetterParameterTypeLongNameRuntime.kt")
        public void testWrongGetterParameterTypeLongNameRuntime() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/wrongGetterParameterTypeLongNameRuntime.kt");
        }

        @TestMetadata("wrongSetterParameterType.kt")
        public void testWrongSetterParameterType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeAddition/wrongSetterParameterType.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/typeMismatch/casts")
    public static class Casts extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("castQualifiedArgument.kt")
        public void testCastQualifiedArgument() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/castQualifiedArgument.kt");
        }

        @TestMetadata("castToFunctionType.kt")
        public void testCastToFunctionType() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/castToFunctionType.kt");
        }

        @TestMetadata("preferExclExcl.kt")
        public void testPreferExclExcl() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/preferExclExcl.kt");
        }

        @TestMetadata("smartcastImpossible1.kt")
        public void testSmartcastImpossible1() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/smartcastImpossible1.kt");
        }

        @TestMetadata("smartcastImpossible2.kt")
        public void testSmartcastImpossible2() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/smartcastImpossible2.kt");
        }

        @TestMetadata("smartcastImpossible3.kt")
        public void testSmartcastImpossible3() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/smartcastImpossible3.kt");
        }

        @TestMetadata("typeMismatch1.kt")
        public void testTypeMismatch1() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch1.kt");
        }

        @TestMetadata("typeMismatch2.kt")
        public void testTypeMismatch2() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch2.kt");
        }

        @TestMetadata("typeMismatch3.kt")
        public void testTypeMismatch3() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch3.kt");
        }

        @TestMetadata("typeMismatch4.kt")
        public void testTypeMismatch4() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch4.kt");
        }

        @TestMetadata("typeMismatch5.kt")
        public void testTypeMismatch5() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch5.kt");
        }

        @TestMetadata("typeMismatchLongNameRuntime.kt")
        public void testTypeMismatchLongNameRuntime() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatchLongNameRuntime.kt");
        }

        @TestMetadata("unsigned.kt")
        public void testUnsigned() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/casts/unsigned.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch")
    public static class ComponentFunctionReturnTypeMismatch extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("componentFunctionReturnTypeMismatch1.kt")
        public void testComponentFunctionReturnTypeMismatch1() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch1.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch2.kt")
        public void testComponentFunctionReturnTypeMismatch2() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch2.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch3.kt")
        public void testComponentFunctionReturnTypeMismatch3() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch3.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch4.kt")
        public void testComponentFunctionReturnTypeMismatch4() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch4.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch5.kt")
        public void testComponentFunctionReturnTypeMismatch5() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch5.kt");
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            runTest("../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/dataClass.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression")
    public abstract static class TypeMismatchOnReturnedExpression extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn")
        public static class MultiReturn extends AbstractHighLevelQuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("labeledReturn.kt")
            public void testLabeledReturn() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/labeledReturn.kt");
            }

            @TestMetadata("returnDifferentType.kt")
            public void testReturnDifferentType() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnDifferentType.kt");
            }

            @TestMetadata("returnNull.kt")
            public void testReturnNull() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnNull.kt");
            }

            @TestMetadata("returnNull2.kt")
            public void testReturnNull2() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnNull2.kt");
            }

            @TestMetadata("returnNullable.kt")
            public void testReturnNullable() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnNullable.kt");
            }

            @TestMetadata("returnSuperType.kt")
            public void testReturnSuperType() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnSuperType.kt");
            }

            @TestMetadata("unrelatedLabeledReturn.kt")
            public void testUnrelatedLabeledReturn() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/unrelatedLabeledReturn.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("assignmentTypeMismatch.kt")
            public void testAssignmentTypeMismatch() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/assignmentTypeMismatch.kt");
            }

            @TestMetadata("changeFunctionReturnTypeToFunctionType.kt")
            public void testChangeFunctionReturnTypeToFunctionType() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/changeFunctionReturnTypeToFunctionType.kt");
            }

            @TestMetadata("changeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral.kt")
            public void testChangeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/changeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral.kt");
            }

            @TestMetadata("dontChangeFunctionReturnTypeToErrorType.kt")
            public void testDontChangeFunctionReturnTypeToErrorType() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/dontChangeFunctionReturnTypeToErrorType.kt");
            }

            @TestMetadata("inIf.kt")
            public void testInIf() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/inIf.kt");
            }

            @TestMetadata("inWhen.kt")
            public void testInWhen() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/inWhen.kt");
            }

            @TestMetadata("literalPropertyWithGetter.kt")
            public void testLiteralPropertyWithGetter() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/literalPropertyWithGetter.kt");
            }

            @TestMetadata("multiFakeOverride.kt")
            public void testMultiFakeOverride() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiFakeOverride.kt");
            }

            @TestMetadata("multiFakeOverrideForOperatorConvention.kt")
            public void testMultiFakeOverrideForOperatorConvention() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiFakeOverrideForOperatorConvention.kt");
            }

            @TestMetadata("nestedWhenExpression.kt")
            public void testNestedWhenExpression() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/nestedWhenExpression.kt");
            }

            @TestMetadata("nonLocalReturnRuntime.kt")
            public void testNonLocalReturnRuntime() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/nonLocalReturnRuntime.kt");
            }

            @TestMetadata("nonLocalReturnWithLabelRuntime.kt")
            public void testNonLocalReturnWithLabelRuntime() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/nonLocalReturnWithLabelRuntime.kt");
            }

            @TestMetadata("notApplicableToConstructor.kt")
            public void testNotApplicableToConstructor() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/notApplicableToConstructor.kt");
            }

            @TestMetadata("propertyGetterInitializerTypeMismatch.kt")
            public void testPropertyGetterInitializerTypeMismatch() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterInitializerTypeMismatch.kt");
            }

            @TestMetadata("propertyGetterWithIf.kt")
            public void testPropertyGetterWithIf() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterWithIf.kt");
            }

            @TestMetadata("propertyGetterWithIf2.kt")
            public void testPropertyGetterWithIf2() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterWithIf2.kt");
            }

            @TestMetadata("propertyGetterWithIf3.kt")
            public void testPropertyGetterWithIf3() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterWithIf3.kt");
            }

            @TestMetadata("propertyInitializerWithIf.kt")
            public void testPropertyInitializerWithIf() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyInitializerWithIf.kt");
            }

            @TestMetadata("propertyInitializerWithWhen.kt")
            public void testPropertyInitializerWithWhen() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyInitializerWithWhen.kt");
            }

            @TestMetadata("returnedExpressionTypeMismatchFunctionParameterType.kt")
            public void testReturnedExpressionTypeMismatchFunctionParameterType() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/returnedExpressionTypeMismatchFunctionParameterType.kt");
            }

            @TestMetadata("twoDimensionalArray.kt")
            public void testTwoDimensionalArray() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalArray.kt");
            }

            @TestMetadata("twoDimensionalArray2.kt")
            public void testTwoDimensionalArray2() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalArray2.kt");
            }

            @TestMetadata("twoDimensionalArray3.kt")
            public void testTwoDimensionalArray3() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalArray3.kt");
            }

            @TestMetadata("twoDimensionalList.kt")
            public void testTwoDimensionalList() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalList.kt");
            }

            @TestMetadata("twoDimensionalList2.kt")
            public void testTwoDimensionalList2() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalList2.kt");
            }

            @TestMetadata("typeMismatchInIfStatementReturnedByFunction.kt")
            public void testTypeMismatchInIfStatementReturnedByFunction() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInIfStatementReturnedByFunction.kt");
            }

            @TestMetadata("typeMismatchInIfStatementReturnedByLiteral.kt")
            public void testTypeMismatchInIfStatementReturnedByLiteral() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInIfStatementReturnedByLiteral.kt");
            }

            @TestMetadata("typeMismatchInInitializer.kt")
            public void testTypeMismatchInInitializer() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInInitializer.kt");
            }

            @TestMetadata("typeMismatchInReturnStatement.kt")
            public void testTypeMismatchInReturnStatement() throws Exception {
                runTest("../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInReturnStatement.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/toString")
    public static class ToString extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("callArgument.kt")
        public void testCallArgument() throws Exception {
            runTest("../idea/tests/testData/quickfix/toString/callArgument.kt");
        }

        @TestMetadata("notNullableExpectedNullable.kt")
        public void testNotNullableExpectedNullable() throws Exception {
            runTest("../idea/tests/testData/quickfix/toString/notNullableExpectedNullable.kt");
        }

        @TestMetadata("nullableExpectedNotNullable.kt")
        public void testNullableExpectedNotNullable() throws Exception {
            runTest("../idea/tests/testData/quickfix/toString/nullableExpectedNotNullable.kt");
        }

        @TestMetadata("nullableExpectedNullable.kt")
        public void testNullableExpectedNullable() throws Exception {
            runTest("../idea/tests/testData/quickfix/toString/nullableExpectedNullable.kt");
        }

        @TestMetadata("propertyInitializer.kt")
        public void testPropertyInitializer() throws Exception {
            runTest("../idea/tests/testData/quickfix/toString/propertyInitializer.kt");
        }

        @TestMetadata("returnStatement.kt")
        public void testReturnStatement() throws Exception {
            runTest("../idea/tests/testData/quickfix/toString/returnStatement.kt");
        }

        @TestMetadata("variableAssignment.kt")
        public void testVariableAssignment() throws Exception {
            runTest("../idea/tests/testData/quickfix/toString/variableAssignment.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/specifySuperType")
    public static class SpecifySuperType extends AbstractHighLevelQuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("fullyQualifiedSuperType.kt")
        public void testFullyQualifiedSuperType() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/fullyQualifiedSuperType.kt");
        }

        @TestMetadata("fullyQualifiedSuperTypeHasAnnotations.kt")
        public void testFullyQualifiedSuperTypeHasAnnotations() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/fullyQualifiedSuperTypeHasAnnotations.kt");
        }

        @TestMetadata("fullyQualifiedSuperTypeHasTypeArguments.kt")
        public void testFullyQualifiedSuperTypeHasTypeArguments() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/fullyQualifiedSuperTypeHasTypeArguments.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/function.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/property.kt");
        }

        @TestMetadata("superExpressionHasLabel.kt")
        public void testSuperExpressionHasLabel() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/superExpressionHasLabel.kt");
        }

        @TestMetadata("superTypeHasAnnotations.kt")
        public void testSuperTypeHasAnnotations() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/superTypeHasAnnotations.kt");
        }

        @TestMetadata("superTypeHasTypeArguments.kt")
        public void testSuperTypeHasTypeArguments() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/superTypeHasTypeArguments.kt");
        }

        @TestMetadata("superTypeIsExtendedByOtherSuperType.kt")
        public void testSuperTypeIsExtendedByOtherSuperType() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/superTypeIsExtendedByOtherSuperType.kt");
        }

        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() throws Exception {
            runTest("../idea/tests/testData/quickfix/specifySuperType/typeMismatch.kt");
        }
    }
}
