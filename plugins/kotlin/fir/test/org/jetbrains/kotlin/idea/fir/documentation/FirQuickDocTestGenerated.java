// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.documentation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/quickDoc")
public class FirQuickDocTestGenerated extends AbstractFirQuickDocTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("AnonymousObjectLocalVariable.kt")
    public void testAnonymousObjectLocalVariable() throws Exception {
        runTest("testData/quickDoc/AnonymousObjectLocalVariable.kt");
    }

    @TestMetadata("AtConstantWithUnderscore.kt")
    public void testAtConstantWithUnderscore() throws Exception {
        runTest("testData/quickDoc/AtConstantWithUnderscore.kt");
    }

    @TestMetadata("AtFunctionParameter.kt")
    public void testAtFunctionParameter() throws Exception {
        runTest("testData/quickDoc/AtFunctionParameter.kt");
    }

    @TestMetadata("AtImplicitLambdaParametEnd.kt")
    public void testAtImplicitLambdaParametEnd() throws Exception {
        runTest("testData/quickDoc/AtImplicitLambdaParametEnd.kt");
    }

    @TestMetadata("AtImplicitLambdaParameter.kt")
    public void testAtImplicitLambdaParameter() throws Exception {
        runTest("testData/quickDoc/AtImplicitLambdaParameter.kt");
    }

    @TestMetadata("AtLocalFunction.kt")
    public void testAtLocalFunction() throws Exception {
        runTest("testData/quickDoc/AtLocalFunction.kt");
    }

    @TestMetadata("AtTypeParameter.kt")
    public void testAtTypeParameter() throws Exception {
        runTest("testData/quickDoc/AtTypeParameter.kt");
    }

    @TestMetadata("AtVariableDeclaration.kt")
    public void testAtVariableDeclaration() throws Exception {
        runTest("testData/quickDoc/AtVariableDeclaration.kt");
    }

    @TestMetadata("ConstructorVarParameter.kt")
    public void testConstructorVarParameter() throws Exception {
        runTest("testData/quickDoc/ConstructorVarParameter.kt");
    }

    @TestMetadata("DefinitelyNonNullType.kt")
    public void testDefinitelyNonNullType() throws Exception {
        runTest("testData/quickDoc/DefinitelyNonNullType.kt");
    }

    @TestMetadata("DeprecationWithReplaceInfo.kt")
    public void testDeprecationWithReplaceInfo() throws Exception {
        runTest("testData/quickDoc/DeprecationWithReplaceInfo.kt");
    }

    @TestMetadata("EscapeHtmlInsideCodeBlocks.kt")
    public void testEscapeHtmlInsideCodeBlocks() throws Exception {
        runTest("testData/quickDoc/EscapeHtmlInsideCodeBlocks.kt");
    }

    @TestMetadata("ExtensionReceiver.kt")
    public void testExtensionReceiver() throws Exception {
        runTest("testData/quickDoc/ExtensionReceiver.kt");
    }

    @TestMetadata("ExtensionReceiverEnd.kt")
    public void testExtensionReceiverEnd() throws Exception {
        runTest("testData/quickDoc/ExtensionReceiverEnd.kt");
    }

    @TestMetadata("Formatting.kt")
    public void testFormatting() throws Exception {
        runTest("testData/quickDoc/Formatting.kt");
    }

    @TestMetadata("IndentedCodeBlock.kt")
    public void testIndentedCodeBlock() throws Exception {
        runTest("testData/quickDoc/IndentedCodeBlock.kt");
    }

    @TestMetadata("JavaClassConstructorUsedInKotlin.kt")
    public void testJavaClassConstructorUsedInKotlin() throws Exception {
        runTest("testData/quickDoc/JavaClassConstructorUsedInKotlin.kt");
    }

    @TestMetadata("JavaDocFromOverridenClass.kt")
    public void testJavaDocFromOverridenClass() throws Exception {
        runTest("testData/quickDoc/JavaDocFromOverridenClass.kt");
    }

    @TestMetadata("JavaDocFromOverridenInterface.kt")
    public void testJavaDocFromOverridenInterface() throws Exception {
        runTest("testData/quickDoc/JavaDocFromOverridenInterface.kt");
    }

    @TestMetadata("JavaMethodUsedInKotlin.kt")
    public void testJavaMethodUsedInKotlin() throws Exception {
        runTest("testData/quickDoc/JavaMethodUsedInKotlin.kt");
    }

    @TestMetadata("JavaMethodUsedInKotlinInParen.kt")
    public void testJavaMethodUsedInKotlinInParen() throws Exception {
        runTest("testData/quickDoc/JavaMethodUsedInKotlinInParen.kt");
    }

    @TestMetadata("KotlinClassUsedFromJava.java")
    public void testKotlinClassUsedFromJava() throws Exception {
        runTest("testData/quickDoc/KotlinClassUsedFromJava.java");
    }

    @TestMetadata("Lateinit.kt")
    public void testLateinit() throws Exception {
        runTest("testData/quickDoc/Lateinit.kt");
    }

    @TestMetadata("LateinitName.kt")
    public void testLateinitName() throws Exception {
        runTest("testData/quickDoc/LateinitName.kt");
    }

    @TestMetadata("MethodFromStdLib.kt")
    public void testMethodFromStdLib() throws Exception {
        runTest("testData/quickDoc/MethodFromStdLib.kt");
    }

    @TestMetadata("OnClassDeclarationWithComplexKDoc.kt")
    public void testOnClassDeclarationWithComplexKDoc() throws Exception {
        runTest("testData/quickDoc/OnClassDeclarationWithComplexKDoc.kt");
    }

    @TestMetadata("OnClassDeclarationWithNoPackage.kt")
    public void testOnClassDeclarationWithNoPackage() throws Exception {
        runTest("testData/quickDoc/OnClassDeclarationWithNoPackage.kt");
    }

    @TestMetadata("OnEmptySecondaryConstructor.kt")
    public void testOnEmptySecondaryConstructor() throws Exception {
        runTest("testData/quickDoc/OnEmptySecondaryConstructor.kt");
    }

    @TestMetadata("OnEnumClassReference.kt")
    public void testOnEnumClassReference() throws Exception {
        runTest("testData/quickDoc/OnEnumClassReference.kt");
    }

    @TestMetadata("OnEnumDeclaration.kt")
    public void testOnEnumDeclaration() throws Exception {
        runTest("testData/quickDoc/OnEnumDeclaration.kt");
    }

    @TestMetadata("OnEnumEntry.kt")
    public void testOnEnumEntry() throws Exception {
        runTest("testData/quickDoc/OnEnumEntry.kt");
    }

    @TestMetadata("OnEnumEntryUsage.kt")
    public void testOnEnumEntryUsage() throws Exception {
        runTest("testData/quickDoc/OnEnumEntryUsage.kt");
    }

    @TestMetadata("OnEnumUsage.kt")
    public void testOnEnumUsage() throws Exception {
        runTest("testData/quickDoc/OnEnumUsage.kt");
    }

    @TestMetadata("OnEnumValueOfFunction.kt")
    public void testOnEnumValueOfFunction() throws Exception {
        runTest("testData/quickDoc/OnEnumValueOfFunction.kt");
    }

    @TestMetadata("OnEnumValuesFunction.kt")
    public void testOnEnumValuesFunction() throws Exception {
        runTest("testData/quickDoc/OnEnumValuesFunction.kt");
    }

    @TestMetadata("OnFunctionDeclarationWithGFMTable.kt")
    public void testOnFunctionDeclarationWithGFMTable() throws Exception {
        runTest("testData/quickDoc/OnFunctionDeclarationWithGFMTable.kt");
    }

    @TestMetadata("OnFunctionDeclarationWithPackage.kt")
    public void testOnFunctionDeclarationWithPackage() throws Exception {
        runTest("testData/quickDoc/OnFunctionDeclarationWithPackage.kt");
    }

    @TestMetadata("OnInheritedMethodUsage.kt")
    public void testOnInheritedMethodUsage() throws Exception {
        runTest("testData/quickDoc/OnInheritedMethodUsage.kt");
    }

    @TestMetadata("OnInheritedPropertyUsage.kt")
    public void testOnInheritedPropertyUsage() throws Exception {
        runTest("testData/quickDoc/OnInheritedPropertyUsage.kt");
    }

    @TestMetadata("OnMethodUsage.kt")
    public void testOnMethodUsage() throws Exception {
        runTest("testData/quickDoc/OnMethodUsage.kt");
    }

    @TestMetadata("OnMethodUsageInParen.kt")
    public void testOnMethodUsageInParen() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageInParen.kt");
    }

    @TestMetadata("OnMethodUsageMultiline.kt")
    public void testOnMethodUsageMultiline() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageMultiline.kt");
    }

    @TestMetadata("OnMethodUsageWithBracketsInParam.kt")
    public void testOnMethodUsageWithBracketsInParam() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageWithBracketsInParam.kt");
    }

    @TestMetadata("OnMethodUsageWithCodeBlock.kt")
    public void testOnMethodUsageWithCodeBlock() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageWithCodeBlock.kt");
    }

    @TestMetadata("OnMethodUsageWithMarkdown.kt")
    public void testOnMethodUsageWithMarkdown() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageWithMarkdown.kt");
    }

    @TestMetadata("OnMethodUsageWithMultilineParam.kt")
    public void testOnMethodUsageWithMultilineParam() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageWithMultilineParam.kt");
    }

    @TestMetadata("OnMethodUsageWithReceiver.kt")
    public void testOnMethodUsageWithReceiver() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageWithReceiver.kt");
    }

    @TestMetadata("OnMethodUsageWithReturnAndLink.kt")
    public void testOnMethodUsageWithReturnAndLink() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageWithReturnAndLink.kt");
    }

    @TestMetadata("OnMethodUsageWithReturnAndThrows.kt")
    public void testOnMethodUsageWithReturnAndThrows() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageWithReturnAndThrows.kt");
    }

    @TestMetadata("OnMethodUsageWithSee.kt")
    public void testOnMethodUsageWithSee() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageWithSee.kt");
    }

    @TestMetadata("OnMethodUsageWithTypeParameter.kt")
    public void testOnMethodUsageWithTypeParameter() throws Exception {
        runTest("testData/quickDoc/OnMethodUsageWithTypeParameter.kt");
    }

    @TestMetadata("OnPrimaryConstructorAnnotatedWithConstructorTag.kt")
    public void testOnPrimaryConstructorAnnotatedWithConstructorTag() throws Exception {
        runTest("testData/quickDoc/OnPrimaryConstructorAnnotatedWithConstructorTag.kt");
    }

    @TestMetadata("OnPropertyUsageDocumentedWithPropertyTag.kt")
    public void testOnPropertyUsageDocumentedWithPropertyTag() throws Exception {
        runTest("testData/quickDoc/OnPropertyUsageDocumentedWithPropertyTag.kt");
    }

    @TestMetadata("renderAnnotatedExtensionFunctionType.kt")
    public void testRenderAnnotatedExtensionFunctionType() throws Exception {
        runTest("testData/quickDoc/renderAnnotatedExtensionFunctionType.kt");
    }

    @TestMetadata("Samples.kt")
    public void testSamples() throws Exception {
        runTest("testData/quickDoc/Samples.kt");
    }

    @TestMetadata("Tailrec.kt")
    public void testTailrec() throws Exception {
        runTest("testData/quickDoc/Tailrec.kt");
    }

    @TestMetadata("TailrecName.kt")
    public void testTailrecName() throws Exception {
        runTest("testData/quickDoc/TailrecName.kt");
    }

    @TestMetadata("TopLevelMethodFromJava.java")
    public void testTopLevelMethodFromJava() throws Exception {
        runTest("testData/quickDoc/TopLevelMethodFromJava.java");
    }

    @TestMetadata("TypeNamesFromStdLibNavigation.kt")
    public void testTypeNamesFromStdLibNavigation() throws Exception {
        runTest("testData/quickDoc/TypeNamesFromStdLibNavigation.kt");
    }
}
