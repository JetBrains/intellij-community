// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.completion.test.handlers;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class HighLevelBasicCompletionHandlerTestGenerated extends AbstractHighLevelBasicCompletionHandlerTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../completion/testData/handlers/basic")
    public abstract static class Basic extends AbstractHighLevelBasicCompletionHandlerTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/annotation")
        public static class Annotation extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("AnnotationInBrackets.kt")
            public void testAnnotationInBrackets() throws Exception {
                runTest("../completion/testData/handlers/basic/annotation/AnnotationInBrackets.kt");
            }

            @TestMetadata("AnnotationInClassAddImport.kt")
            public void testAnnotationInClassAddImport() throws Exception {
                runTest("../completion/testData/handlers/basic/annotation/AnnotationInClassAddImport.kt");
            }

            @TestMetadata("AnnotationInCompanionObjectAddImport.kt")
            public void testAnnotationInCompanionObjectAddImport() throws Exception {
                runTest("../completion/testData/handlers/basic/annotation/AnnotationInCompanionObjectAddImport.kt");
            }

            @TestMetadata("KT12077.kt")
            public void testKT12077() throws Exception {
                runTest("../completion/testData/handlers/basic/annotation/KT12077.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/backticked")
        public static class Backticked extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ClassifierNameWithSpace.kt")
            public void testClassifierNameWithSpace() throws Exception {
                runTest("../completion/testData/handlers/basic/backticked/ClassifierNameWithSpace.kt");
            }

            @TestMetadata("FunNameWithSpace.kt")
            public void testFunNameWithSpace() throws Exception {
                runTest("../completion/testData/handlers/basic/backticked/FunNameWithSpace.kt");
            }

            @TestMetadata("KT19863.kt")
            public void testKT19863() throws Exception {
                runTest("../completion/testData/handlers/basic/backticked/KT19863.kt");
            }

            @TestMetadata("KT19864.kt")
            public void testKT19864() throws Exception {
                runTest("../completion/testData/handlers/basic/backticked/KT19864.kt");
            }

            @TestMetadata("PreferMatchingKeyword.kt")
            public void testPreferMatchingKeyword() throws Exception {
                runTest("../completion/testData/handlers/basic/backticked/PreferMatchingKeyword.kt");
            }

            @TestMetadata("PropertyAfterBacktick.kt")
            public void testPropertyAfterBacktick() throws Exception {
                runTest("../completion/testData/handlers/basic/backticked/PropertyAfterBacktick.kt");
            }

            @TestMetadata("VariableNameWithSpace.kt")
            public void testVariableNameWithSpace() throws Exception {
                runTest("../completion/testData/handlers/basic/backticked/VariableNameWithSpace.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/callableReference")
        public static class CallableReference extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ClassConstructor.kt")
            public void testClassConstructor() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/ClassConstructor.kt");
            }

            @TestMetadata("ClassProperty.kt")
            public void testClassProperty() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/ClassProperty.kt");
            }

            @TestMetadata("ClassThisProperty.kt")
            public void testClassThisProperty() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/ClassThisProperty.kt");
            }

            @TestMetadata("CompanionObjectClassFunction.kt")
            public void testCompanionObjectClassFunction() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/CompanionObjectClassFunction.kt");
            }

            @TestMetadata("CompanionObjectFunction.kt")
            public void testCompanionObjectFunction() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/CompanionObjectFunction.kt");
            }

            @TestMetadata("EmptyQualifier.kt")
            public void testEmptyQualifier() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/EmptyQualifier.kt");
            }

            @TestMetadata("JavaMethod.kt")
            public void testJavaMethod() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/JavaMethod.kt");
            }

            @TestMetadata("JavaStaticMethod.kt")
            public void testJavaStaticMethod() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/JavaStaticMethod.kt");
            }

            @TestMetadata("NonEmptyQualifier.kt")
            public void testNonEmptyQualifier() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/NonEmptyQualifier.kt");
            }

            @TestMetadata("NotImportedTopLevel.kt")
            public void testNotImportedTopLevel() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/NotImportedTopLevel.kt");
            }

            @TestMetadata("Property.kt")
            public void testProperty() throws Exception {
                runTest("../completion/testData/handlers/basic/callableReference/Property.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/exclChar")
        public static class ExclChar extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("1.kt")
            public void test1() throws Exception {
                runTest("../completion/testData/handlers/basic/exclChar/1.kt");
            }

            @TestMetadata("2.kt")
            public void test2() throws Exception {
                runTest("../completion/testData/handlers/basic/exclChar/2.kt");
            }

            @TestMetadata("3.kt")
            public void test3() throws Exception {
                runTest("../completion/testData/handlers/basic/exclChar/3.kt");
            }

            @TestMetadata("4.kt")
            public void test4() throws Exception {
                runTest("../completion/testData/handlers/basic/exclChar/4.kt");
            }

            @TestMetadata("5.kt")
            public void test5() throws Exception {
                runTest("../completion/testData/handlers/basic/exclChar/5.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/extensionMethodInObject")
        public static class ExtensionMethodInObject extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("CompanionObjectInSameFileExplicitReceiver.kt")
            public void testCompanionObjectInSameFileExplicitReceiver() throws Exception {
                runTest("../completion/testData/handlers/basic/extensionMethodInObject/CompanionObjectInSameFileExplicitReceiver.kt");
            }

            @TestMetadata("CompanionObjectInSameFileImplicitReceiver.kt")
            public void testCompanionObjectInSameFileImplicitReceiver() throws Exception {
                runTest("../completion/testData/handlers/basic/extensionMethodInObject/CompanionObjectInSameFileImplicitReceiver.kt");
            }

            @TestMetadata("NestedCompanionObjectInSameFileExplicitReceiver.kt")
            public void testNestedCompanionObjectInSameFileExplicitReceiver() throws Exception {
                runTest("../completion/testData/handlers/basic/extensionMethodInObject/NestedCompanionObjectInSameFileExplicitReceiver.kt");
            }

            @TestMetadata("NestedCompanionObjectInSameFileImplicitReceiver.kt")
            public void testNestedCompanionObjectInSameFileImplicitReceiver() throws Exception {
                runTest("../completion/testData/handlers/basic/extensionMethodInObject/NestedCompanionObjectInSameFileImplicitReceiver.kt");
            }

            @TestMetadata("NestedObjectInSameFileExplicitReceiver.kt")
            public void testNestedObjectInSameFileExplicitReceiver() throws Exception {
                runTest("../completion/testData/handlers/basic/extensionMethodInObject/NestedObjectInSameFileExplicitReceiver.kt");
            }

            @TestMetadata("NestedObjectInSameFileImplicitReceiver.kt")
            public void testNestedObjectInSameFileImplicitReceiver() throws Exception {
                runTest("../completion/testData/handlers/basic/extensionMethodInObject/NestedObjectInSameFileImplicitReceiver.kt");
            }

            @TestMetadata("ObjectInSameFileExplicitReceiver.kt")
            public void testObjectInSameFileExplicitReceiver() throws Exception {
                runTest("../completion/testData/handlers/basic/extensionMethodInObject/ObjectInSameFileExplicitReceiver.kt");
            }

            @TestMetadata("ObjectInSameFileImplicitReceiver.kt")
            public void testObjectInSameFileImplicitReceiver() throws Exception {
                runTest("../completion/testData/handlers/basic/extensionMethodInObject/ObjectInSameFileImplicitReceiver.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/highOrderFunctions")
        public static class HighOrderFunctions extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ContextVariable.kt")
            public void testContextVariable() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/ContextVariable.kt");
            }

            @TestMetadata("ContextVariableDot.kt")
            public void testContextVariableDot() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/ContextVariableDot.kt");
            }

            @TestMetadata("ContextVariableTypeArgsNeeded.kt")
            public void testContextVariableTypeArgsNeeded() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/ContextVariableTypeArgsNeeded.kt");
            }

            @TestMetadata("ForceParenthesisForTabChar.kt")
            public void testForceParenthesisForTabChar() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/ForceParenthesisForTabChar.kt");
            }

            @TestMetadata("FunctionLiteralInsertOnSpace.kt")
            public void testFunctionLiteralInsertOnSpace() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/FunctionLiteralInsertOnSpace.kt");
            }

            @TestMetadata("FunctionLiteralInsertWhenNoSpacesForBraces.kt")
            public void testFunctionLiteralInsertWhenNoSpacesForBraces() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/FunctionLiteralInsertWhenNoSpacesForBraces.kt");
            }

            @TestMetadata("HigherOrderFunction.kt")
            public void testHigherOrderFunction() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/HigherOrderFunction.kt");
            }

            @TestMetadata("HigherOrderFunctionWithArg.kt")
            public void testHigherOrderFunctionWithArg() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/HigherOrderFunctionWithArg.kt");
            }

            @TestMetadata("HigherOrderFunctionWithArgs1.kt")
            public void testHigherOrderFunctionWithArgs1() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/HigherOrderFunctionWithArgs1.kt");
            }

            @TestMetadata("HigherOrderFunctionWithArgs2.kt")
            public void testHigherOrderFunctionWithArgs2() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/HigherOrderFunctionWithArgs2.kt");
            }

            @TestMetadata("HigherOrderFunctionWithArgs3.kt")
            public void testHigherOrderFunctionWithArgs3() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/HigherOrderFunctionWithArgs3.kt");
            }

            @TestMetadata("HigherOrderSuspendFunctionWithArgs.kt")
            public void testHigherOrderSuspendFunctionWithArgs() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/HigherOrderSuspendFunctionWithArgs.kt");
            }

            @TestMetadata("InsertFunctionLiteralForLocalFunction.kt")
            public void testInsertFunctionLiteralForLocalFunction() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/InsertFunctionLiteralForLocalFunction.kt");
            }

            @TestMetadata("InsertFunctionWithSingleParameterWithBrace.kt")
            public void testInsertFunctionWithSingleParameterWithBrace() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/InsertFunctionWithSingleParameterWithBrace.kt");
            }

            @TestMetadata("InsertFunctionWithSingleParameterWithParenthesis.kt")
            public void testInsertFunctionWithSingleParameterWithParenthesis() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/InsertFunctionWithSingleParameterWithParenthesis.kt");
            }

            @TestMetadata("OptionalParameters1.kt")
            public void testOptionalParameters1() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/OptionalParameters1.kt");
            }

            @TestMetadata("OptionalParameters2.kt")
            public void testOptionalParameters2() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/OptionalParameters2.kt");
            }

            @TestMetadata("OptionalParameters3.kt")
            public void testOptionalParameters3() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/OptionalParameters3.kt");
            }

            @TestMetadata("ParameterTypeIsDerivedFromFunction.kt")
            public void testParameterTypeIsDerivedFromFunction() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/ParameterTypeIsDerivedFromFunction.kt");
            }

            @TestMetadata("ReplaceByLambdaTemplateNoClosingParenth.kt")
            public void testReplaceByLambdaTemplateNoClosingParenth() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/ReplaceByLambdaTemplateNoClosingParenth.kt");
            }

            @TestMetadata("ReplaceFunctionWithSingleParameter.kt")
            public void testReplaceFunctionWithSingleParameter() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/ReplaceFunctionWithSingleParameter.kt");
            }

            @TestMetadata("SameTypeParameters.kt")
            public void testSameTypeParameters() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/SameTypeParameters.kt");
            }

            @TestMetadata("SameTypeParameters2.kt")
            public void testSameTypeParameters2() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/SameTypeParameters2.kt");
            }

            @TestMetadata("SameTypeParameters3.kt")
            public void testSameTypeParameters3() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/SameTypeParameters3.kt");
            }

            @TestMetadata("WithArgsEmptyLambdaAfter.kt")
            public void testWithArgsEmptyLambdaAfter() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/WithArgsEmptyLambdaAfter.kt");
            }

            @TestMetadata("WithArgsNonEmptyLambdaAfter.kt")
            public void testWithArgsNonEmptyLambdaAfter() throws Exception {
                runTest("../completion/testData/handlers/basic/highOrderFunctions/WithArgsNonEmptyLambdaAfter.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/importAliases")
        public static class ImportAliases extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("CompanionObject.kt")
            public void testCompanionObject() throws Exception {
                runTest("../completion/testData/handlers/basic/importAliases/CompanionObject.kt");
            }

            @TestMetadata("ExtensionFun.kt")
            public void testExtensionFun() throws Exception {
                runTest("../completion/testData/handlers/basic/importAliases/ExtensionFun.kt");
            }

            @TestMetadata("ExtensionVal.kt")
            public void testExtensionVal() throws Exception {
                runTest("../completion/testData/handlers/basic/importAliases/ExtensionVal.kt");
            }

            @TestMetadata("KDoc.kt")
            public void testKDoc() throws Exception {
                runTest("../completion/testData/handlers/basic/importAliases/KDoc.kt");
            }

            @TestMetadata("TopLevelFun.kt")
            public void testTopLevelFun() throws Exception {
                runTest("../completion/testData/handlers/basic/importAliases/TopLevelFun.kt");
            }

            @TestMetadata("TopLevelVal.kt")
            public void testTopLevelVal() throws Exception {
                runTest("../completion/testData/handlers/basic/importAliases/TopLevelVal.kt");
            }

            @TestMetadata("Type.kt")
            public void testType() throws Exception {
                runTest("../completion/testData/handlers/basic/importAliases/Type.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/override")
        public static class Override extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("AfterFunKeyword.kt")
            public void testAfterFunKeyword() throws Exception {
                runTest("../completion/testData/handlers/basic/override/AfterFunKeyword.kt");
            }

            @TestMetadata("AfterFunKeywordKeepModifiersBefore.kt")
            public void testAfterFunKeywordKeepModifiersBefore() throws Exception {
                runTest("../completion/testData/handlers/basic/override/AfterFunKeywordKeepModifiersBefore.kt");
            }

            @TestMetadata("AfterValKeyword.kt")
            public void testAfterValKeyword() throws Exception {
                runTest("../completion/testData/handlers/basic/override/AfterValKeyword.kt");
            }

            @TestMetadata("AfterValKeywordInConstructorParameter.kt")
            public void testAfterValKeywordInConstructorParameter() throws Exception {
                runTest("../completion/testData/handlers/basic/override/AfterValKeywordInConstructorParameter.kt");
            }

            @TestMetadata("ExpectClassValOverride.kt")
            public void testExpectClassValOverride() throws Exception {
                runTest("../completion/testData/handlers/basic/override/ExpectClassValOverride.kt");
            }

            @TestMetadata("ImplementFunction.kt")
            public void testImplementFunction() throws Exception {
                runTest("../completion/testData/handlers/basic/override/ImplementFunction.kt");
            }

            @TestMetadata("ImplementVal.kt")
            public void testImplementVal() throws Exception {
                runTest("../completion/testData/handlers/basic/override/ImplementVal.kt");
            }

            @TestMetadata("ImplementVar.kt")
            public void testImplementVar() throws Exception {
                runTest("../completion/testData/handlers/basic/override/ImplementVar.kt");
            }

            @TestMetadata("KeepAnnotationBefore.kt")
            public void testKeepAnnotationBefore() throws Exception {
                runTest("../completion/testData/handlers/basic/override/KeepAnnotationBefore.kt");
            }

            @TestMetadata("KeepComments.kt")
            public void testKeepComments() throws Exception {
                runTest("../completion/testData/handlers/basic/override/KeepComments.kt");
            }

            @TestMetadata("KeepModifiersBefore.kt")
            public void testKeepModifiersBefore() throws Exception {
                runTest("../completion/testData/handlers/basic/override/KeepModifiersBefore.kt");
            }

            @TestMetadata("kt25312.kt")
            public void testKt25312() throws Exception {
                runTest("../completion/testData/handlers/basic/override/kt25312.kt");
            }

            @TestMetadata("OverrideFunction.kt")
            public void testOverrideFunction() throws Exception {
                runTest("../completion/testData/handlers/basic/override/OverrideFunction.kt");
            }

            @TestMetadata("OverrideVar.kt")
            public void testOverrideVar() throws Exception {
                runTest("../completion/testData/handlers/basic/override/OverrideVar.kt");
            }

            @TestMetadata("PublicValInConstructorParameter.kt")
            public void testPublicValInConstructorParameter() throws Exception {
                runTest("../completion/testData/handlers/basic/override/PublicValInConstructorParameter.kt");
            }

            @TestMetadata("Suspend.kt")
            public void testSuspend() throws Exception {
                runTest("../completion/testData/handlers/basic/override/Suspend.kt");
            }

            @TestMetadata("TypeFunctionName.kt")
            public void testTypeFunctionName() throws Exception {
                runTest("../completion/testData/handlers/basic/override/TypeFunctionName.kt");
            }

            @TestMetadata("TypeNameInConstructorParameter.kt")
            public void testTypeNameInConstructorParameter() throws Exception {
                runTest("../completion/testData/handlers/basic/override/TypeNameInConstructorParameter.kt");
            }

            @TestMetadata("ValInConstructorParameter.kt")
            public void testValInConstructorParameter() throws Exception {
                runTest("../completion/testData/handlers/basic/override/ValInConstructorParameter.kt");
            }

            @TestMetadata("ValInConstructorParameter2.kt")
            public void testValInConstructorParameter2() throws Exception {
                runTest("../completion/testData/handlers/basic/override/ValInConstructorParameter2.kt");
            }

            @TestMetadata("ValInConstructorParameter3.kt")
            public void testValInConstructorParameter3() throws Exception {
                runTest("../completion/testData/handlers/basic/override/ValInConstructorParameter3.kt");
            }

            @TestMetadata("ValInConstructorParameter4.kt")
            public void testValInConstructorParameter4() throws Exception {
                runTest("../completion/testData/handlers/basic/override/ValInConstructorParameter4.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/parameterNameAndType")
        public static class ParameterNameAndType extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("CodeStyleSettings.kt")
            public void testCodeStyleSettings() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/CodeStyleSettings.kt");
            }

            @TestMetadata("Comma.kt")
            public void testComma() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/Comma.kt");
            }

            @TestMetadata("InsertImport.kt")
            public void testInsertImport() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/InsertImport.kt");
            }

            @TestMetadata("NoInsertionOnTypingColon.kt")
            public void testNoInsertionOnTypingColon() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/NoInsertionOnTypingColon.kt");
            }

            @TestMetadata("NoInsertionOnTypingSpace.kt")
            public void testNoInsertionOnTypingSpace() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/NoInsertionOnTypingSpace.kt");
            }

            @TestMetadata("ParameterInFile.kt")
            public void testParameterInFile() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/ParameterInFile.kt");
            }

            @TestMetadata("ParameterInFile2.kt")
            public void testParameterInFile2() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/ParameterInFile2.kt");
            }

            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/Simple.kt");
            }

            @TestMetadata("TabReplace1.kt")
            public void testTabReplace1() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/TabReplace1.kt");
            }

            @TestMetadata("TabReplace2.kt")
            public void testTabReplace2() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/TabReplace2.kt");
            }

            @TestMetadata("TabReplace3.kt")
            public void testTabReplace3() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/TabReplace3.kt");
            }

            @TestMetadata("TypeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/TypeAlias.kt");
            }

            @TestMetadata("TypeParameter.kt")
            public void testTypeParameter() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/TypeParameter.kt");
            }

            @TestMetadata("UserPrefix.kt")
            public void testUserPrefix() throws Exception {
                runTest("../completion/testData/handlers/basic/parameterNameAndType/UserPrefix.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/staticMemberOfNotImported")
        public static class StaticMemberOfNotImported extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("AmbigiousExtension.kt")
            public void testAmbigiousExtension() throws Exception {
                runTest("../completion/testData/handlers/basic/staticMemberOfNotImported/AmbigiousExtension.kt");
            }

            @TestMetadata("AmbigiousName.kt")
            public void testAmbigiousName() throws Exception {
                runTest("../completion/testData/handlers/basic/staticMemberOfNotImported/AmbigiousName.kt");
            }

            @TestMetadata("CompanionObjectMember.kt")
            public void testCompanionObjectMember() throws Exception {
                runTest("../completion/testData/handlers/basic/staticMemberOfNotImported/CompanionObjectMember.kt");
            }

            @TestMetadata("EnumEntry.kt")
            public void testEnumEntry() throws Exception {
                runTest("../completion/testData/handlers/basic/staticMemberOfNotImported/EnumEntry.kt");
            }

            @TestMetadata("ObjectMember.kt")
            public void testObjectMember() throws Exception {
                runTest("../completion/testData/handlers/basic/staticMemberOfNotImported/ObjectMember.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/staticMembers")
        public static class StaticMembers extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("classObjectMethod.kt")
            public void testClassObjectMethod() throws Exception {
                runTest("../completion/testData/handlers/basic/staticMembers/classObjectMethod.kt");
            }

            @TestMetadata("ImportFromCompanionObject.kt")
            public void testImportFromCompanionObject() throws Exception {
                runTest("../completion/testData/handlers/basic/staticMembers/ImportFromCompanionObject.kt");
            }

            @TestMetadata("ImportJavaStaticMethod.kt")
            public void testImportJavaStaticMethod() throws Exception {
                runTest("../completion/testData/handlers/basic/staticMembers/ImportJavaStaticMethod.kt");
            }

            @TestMetadata("JavaStaticMethod.kt")
            public void testJavaStaticMethod() throws Exception {
                runTest("../completion/testData/handlers/basic/staticMembers/JavaStaticMethod.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/stringTemplate")
        public static class StringTemplate extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("1.kt")
            public void test1() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/1.kt");
            }

            @TestMetadata("2.kt")
            public void test2() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/2.kt");
            }

            @TestMetadata("3.kt")
            public void test3() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/3.kt");
            }

            @TestMetadata("4.kt")
            public void test4() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/4.kt");
            }

            @TestMetadata("AfterDot1.kt")
            public void testAfterDot1() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/AfterDot1.kt");
            }

            @TestMetadata("AfterDot2.kt")
            public void testAfterDot2() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/AfterDot2.kt");
            }

            @TestMetadata("AfterDot3.kt")
            public void testAfterDot3() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/AfterDot3.kt");
            }

            @TestMetadata("AfterDot4.kt")
            public void testAfterDot4() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/AfterDot4.kt");
            }

            @TestMetadata("AfterThisDot.kt")
            public void testAfterThisDot() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/AfterThisDot.kt");
            }

            @TestMetadata("GlobalVal.kt")
            public void testGlobalVal() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/GlobalVal.kt");
            }

            @TestMetadata("GlobalValInCurlyBraces.kt")
            public void testGlobalValInCurlyBraces() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/GlobalValInCurlyBraces.kt");
            }

            @TestMetadata("InsertCurlyBracesBeforeLetter.kt")
            public void testInsertCurlyBracesBeforeLetter() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/InsertCurlyBracesBeforeLetter.kt");
            }

            @TestMetadata("NotEmptyPrefix.kt")
            public void testNotEmptyPrefix() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/NotEmptyPrefix.kt");
            }

            @TestMetadata("Replace.kt")
            public void testReplace() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/Replace.kt");
            }

            @TestMetadata("ValInObject.kt")
            public void testValInObject() throws Exception {
                runTest("../completion/testData/handlers/basic/stringTemplate/ValInObject.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/typeArgsForCall")
        public static class TypeArgsForCall extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("AfterElse.kt")
            public void testAfterElse() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/AfterElse.kt");
            }

            @TestMetadata("AfterElvis.kt")
            public void testAfterElvis() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/AfterElvis.kt");
            }

            @TestMetadata("ExpectedTypeDoesNotHelp.kt")
            public void testExpectedTypeDoesNotHelp() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/ExpectedTypeDoesNotHelp.kt");
            }

            @TestMetadata("ExpectedTypeDoesNotHelp2.kt")
            public void testExpectedTypeDoesNotHelp2() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/ExpectedTypeDoesNotHelp2.kt");
            }

            @TestMetadata("ExplicitLambdaSignature.kt")
            public void testExplicitLambdaSignature() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/ExplicitLambdaSignature.kt");
            }

            @TestMetadata("FunctionTypeParameter1.kt")
            public void testFunctionTypeParameter1() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/FunctionTypeParameter1.kt");
            }

            @TestMetadata("FunctionTypeParameter2.kt")
            public void testFunctionTypeParameter2() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/FunctionTypeParameter2.kt");
            }

            @TestMetadata("FunctionTypeParameter3.kt")
            public void testFunctionTypeParameter3() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/FunctionTypeParameter3.kt");
            }

            @TestMetadata("HasExpectedType.kt")
            public void testHasExpectedType() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/HasExpectedType.kt");
            }

            @TestMetadata("NotAllTypeArgumentsFromParameters.kt")
            public void testNotAllTypeArgumentsFromParameters() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/NotAllTypeArgumentsFromParameters.kt");
            }

            @TestMetadata("ReplaceByTab1.kt")
            public void testReplaceByTab1() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/ReplaceByTab1.kt");
            }

            @TestMetadata("ReplaceByTab2.kt")
            public void testReplaceByTab2() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/ReplaceByTab2.kt");
            }

            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/Simple.kt");
            }

            @TestMetadata("TypeArgumentsFromParameters.kt")
            public void testTypeArgumentsFromParameters() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/TypeArgumentsFromParameters.kt");
            }

            @TestMetadata("TypeArgumentsFromReturnType.kt")
            public void testTypeArgumentsFromReturnType() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/TypeArgumentsFromReturnType.kt");
            }

            @TestMetadata("TypeArgumentsFromReturnType2.kt")
            public void testTypeArgumentsFromReturnType2() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/TypeArgumentsFromReturnType2.kt");
            }

            @TestMetadata("TypeArgumentsFromReturnType3.kt")
            public void testTypeArgumentsFromReturnType3() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/TypeArgumentsFromReturnType3.kt");
            }

            @TestMetadata("TypeArgumentsFromReturnType4.kt")
            public void testTypeArgumentsFromReturnType4() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForCall/TypeArgumentsFromReturnType4.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/typeArgsForGenericFun")
        public static class TypeArgsForGenericFun extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ChainOfCalls.kt")
            public void testChainOfCalls() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/ChainOfCalls.kt");
            }

            @TestMetadata("ChainOfCallsWithInvoke.kt")
            public void testChainOfCallsWithInvoke() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/ChainOfCallsWithInvoke.kt");
            }

            @TestMetadata("Extension_receiverInsufficient.kt")
            public void testExtension_receiverInsufficient() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/Extension_receiverInsufficient.kt");
            }

            @TestMetadata("Extension_receiverSufficient.kt")
            public void testExtension_receiverSufficient() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/Extension_receiverSufficient.kt");
            }

            @TestMetadata("NoDuplicate.kt")
            public void testNoDuplicate() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/NoDuplicate.kt");
            }

            @TestMetadata("NotGeneric.kt")
            public void testNotGeneric() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/NotGeneric.kt");
            }

            @TestMetadata("WithMultipleParam.kt")
            public void testWithMultipleParam() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithMultipleParam.kt");
            }

            @TestMetadata("WithNoParams.kt")
            public void testWithNoParams() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithNoParams.kt");
            }

            @TestMetadata("WithParamFunc_FunRef.kt")
            public void testWithParamFunc_FunRef() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_FunRef.kt");
            }

            @TestMetadata("WithParamFunc_LambdaDefaultArgument.kt")
            public void testWithParamFunc_LambdaDefaultArgument() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_LambdaDefaultArgument.kt");
            }

            @TestMetadata("WithParamFunc_LambdaDefaultArgument2.kt")
            public void testWithParamFunc_LambdaDefaultArgument2() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_LambdaDefaultArgument2.kt");
            }

            @TestMetadata("WithParamFunc_LambdaDefaultOverriddenArgument.kt")
            public void testWithParamFunc_LambdaDefaultOverriddenArgument() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_LambdaDefaultOverriddenArgument.kt");
            }

            @TestMetadata("WithParamFunc_LambdaDefaultOverriddenArgument2.kt")
            public void testWithParamFunc_LambdaDefaultOverriddenArgument2() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_LambdaDefaultOverriddenArgument2.kt");
            }

            @TestMetadata("WithParamFunc_LambdaExplicitInferrable.kt")
            public void testWithParamFunc_LambdaExplicitInferrable() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_LambdaExplicitInferrable.kt");
            }

            @TestMetadata("WithParamFunc_LambdaExplicitNonInferrable.kt")
            public void testWithParamFunc_LambdaExplicitNonInferrable() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_LambdaExplicitNonInferrable.kt");
            }

            @TestMetadata("WithParamFunc_LambdaSingleExplicitArgument.kt")
            public void testWithParamFunc_LambdaSingleExplicitArgument() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_LambdaSingleExplicitArgument.kt");
            }

            @TestMetadata("WithParamFunc_LambdaSingleTrailing.kt")
            public void testWithParamFunc_LambdaSingleTrailing() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_LambdaSingleTrailing.kt");
            }

            @TestMetadata("WithParamFunc_LambdaTrailing.kt")
            public void testWithParamFunc_LambdaTrailing() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_LambdaTrailing.kt");
            }

            @TestMetadata("WithParamFunc_Variable.kt")
            public void testWithParamFunc_Variable() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamFunc_Variable.kt");
            }

            @TestMetadata("WithParamNonGeneric.kt")
            public void testWithParamNonGeneric() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamNonGeneric.kt");
            }

            @TestMetadata("WithParamSimple.kt")
            public void testWithParamSimple() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamSimple.kt");
            }

            @TestMetadata("WithParamSimple_DefaultArgument.kt")
            public void testWithParamSimple_DefaultArgument() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamSimple_DefaultArgument.kt");
            }

            @TestMetadata("WithParamSimple_DefaultOverriddenArgument.kt")
            public void testWithParamSimple_DefaultOverriddenArgument() throws Exception {
                runTest("../completion/testData/handlers/basic/typeArgsForGenericFun/WithParamSimple_DefaultOverriddenArgument.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic")
        public static class Uncategorized extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("AddLabelToReturn.kt")
            public void testAddLabelToReturn() throws Exception {
                runTest("../completion/testData/handlers/basic/AddLabelToReturn.kt");
            }

            @TestMetadata("AmbiguousSuperMethod.kt")
            public void testAmbiguousSuperMethod() throws Exception {
                runTest("../completion/testData/handlers/basic/AmbiguousSuperMethod.kt");
            }

            @TestMetadata("AmbiguousSuperMethodWithArgument.kt")
            public void testAmbiguousSuperMethodWithArgument() throws Exception {
                runTest("../completion/testData/handlers/basic/AmbiguousSuperMethodWithArgument.kt");
            }

            @TestMetadata("ClassKeywordBeforeName.kt")
            public void testClassKeywordBeforeName() throws Exception {
                runTest("../completion/testData/handlers/basic/ClassKeywordBeforeName.kt");
            }

            @TestMetadata("ClassNameForMethodWithPackageConflict.kt")
            public void testClassNameForMethodWithPackageConflict() throws Exception {
                runTest("../completion/testData/handlers/basic/ClassNameForMethodWithPackageConflict.kt");
            }

            @TestMetadata("ClassNameForMethodWithPackageConflict2.kt")
            public void testClassNameForMethodWithPackageConflict2() throws Exception {
                runTest("../completion/testData/handlers/basic/ClassNameForMethodWithPackageConflict2.kt");
            }

            @TestMetadata("ClassNameWithAliasConfict.kt")
            public void testClassNameWithAliasConfict() throws Exception {
                runTest("../completion/testData/handlers/basic/ClassNameWithAliasConfict.kt");
            }

            @TestMetadata("ClassNameWithPackageConflict.kt")
            public void testClassNameWithPackageConflict() throws Exception {
                runTest("../completion/testData/handlers/basic/ClassNameWithPackageConflict.kt");
            }

            @TestMetadata("ClassWithClassObject.kt")
            public void testClassWithClassObject() throws Exception {
                runTest("../completion/testData/handlers/basic/ClassWithClassObject.kt");
            }

            @TestMetadata("DoNotInsertReceiverCast.kt")
            public void testDoNotInsertReceiverCast() throws Exception {
                runTest("../completion/testData/handlers/basic/DoNotInsertReceiverCast.kt");
            }

            @TestMetadata("DoNotUseParenthesisOnNextLine.kt")
            public void testDoNotUseParenthesisOnNextLine() throws Exception {
                runTest("../completion/testData/handlers/basic/DoNotUseParenthesisOnNextLine.kt");
            }

            @TestMetadata("EA70229.kt")
            public void testEA70229() throws Exception {
                runTest("../completion/testData/handlers/basic/EA70229.kt");
            }

            @TestMetadata("ExtensionFunctionTypeVariable1.kt")
            public void testExtensionFunctionTypeVariable1() throws Exception {
                runTest("../completion/testData/handlers/basic/ExtensionFunctionTypeVariable1.kt");
            }

            @TestMetadata("ExtensionFunctionTypeVariable2.kt")
            public void testExtensionFunctionTypeVariable2() throws Exception {
                runTest("../completion/testData/handlers/basic/ExtensionFunctionTypeVariable2.kt");
            }

            @TestMetadata("ExtensionPropertyFromSameFile.kt")
            public void testExtensionPropertyFromSameFile() throws Exception {
                runTest("../completion/testData/handlers/basic/ExtensionPropertyFromSameFile.kt");
            }

            @TestMetadata("ExtensionReceiverTypeArg.kt")
            public void testExtensionReceiverTypeArg() throws Exception {
                runTest("../completion/testData/handlers/basic/ExtensionReceiverTypeArg.kt");
            }

            @TestMetadata("FirstTypeArgument.kt")
            public void testFirstTypeArgument() throws Exception {
                runTest("../completion/testData/handlers/basic/FirstTypeArgument.kt");
            }

            @TestMetadata("GenericFunctionWithTab.kt")
            public void testGenericFunctionWithTab() throws Exception {
                runTest("../completion/testData/handlers/basic/GenericFunctionWithTab.kt");
            }

            @TestMetadata("GenericFunctionWithTab2.kt")
            public void testGenericFunctionWithTab2() throws Exception {
                runTest("../completion/testData/handlers/basic/GenericFunctionWithTab2.kt");
            }

            @TestMetadata("GetOperator.kt")
            public void testGetOperator() throws Exception {
                runTest("../completion/testData/handlers/basic/GetOperator.kt");
            }

            @TestMetadata("InterfaceNameBeforeRunBug.kt")
            public void testInterfaceNameBeforeRunBug() throws Exception {
                runTest("../completion/testData/handlers/basic/InterfaceNameBeforeRunBug.kt");
            }

            @TestMetadata("JavaClassName.kt")
            public void testJavaClassName() throws Exception {
                runTest("../completion/testData/handlers/basic/JavaClassName.kt");
            }

            @TestMetadata("JavaClassNameWithAliasConfict.kt")
            public void testJavaClassNameWithAliasConfict() throws Exception {
                runTest("../completion/testData/handlers/basic/JavaClassNameWithAliasConfict.kt");
            }

            @TestMetadata("JavaClassNameWithConflict.kt")
            public void testJavaClassNameWithConflict() throws Exception {
                runTest("../completion/testData/handlers/basic/JavaClassNameWithConflict.kt");
            }

            @TestMetadata("JavaClassNameWithConflict2.kt")
            public void testJavaClassNameWithConflict2() throws Exception {
                runTest("../completion/testData/handlers/basic/JavaClassNameWithConflict2.kt");
            }

            @TestMetadata("JavaClassNameWithKotlinNestedClassConflict.kt")
            public void testJavaClassNameWithKotlinNestedClassConflict() throws Exception {
                runTest("../completion/testData/handlers/basic/JavaClassNameWithKotlinNestedClassConflict.kt");
            }

            @TestMetadata("JavaSAM.kt")
            public void testJavaSAM() throws Exception {
                runTest("../completion/testData/handlers/basic/JavaSAM.kt");
            }

            @TestMetadata("KT11633.kt")
            public void testKT11633() throws Exception {
                runTest("../completion/testData/handlers/basic/KT11633.kt");
            }

            @TestMetadata("KT12328.kt")
            public void testKT12328() throws Exception {
                runTest("../completion/testData/handlers/basic/KT12328.kt");
            }

            @TestMetadata("KT14130.kt")
            public void testKT14130() throws Exception {
                runTest("../completion/testData/handlers/basic/KT14130.kt");
            }

            @TestMetadata("KT23627.kt")
            public void testKT23627() throws Exception {
                runTest("../completion/testData/handlers/basic/KT23627.kt");
            }

            @TestMetadata("KT36306.kt")
            public void testKT36306() throws Exception {
                runTest("../completion/testData/handlers/basic/KT36306.kt");
            }

            @TestMetadata("LocalClassNameWithPackageLevelConflict.kt")
            public void testLocalClassNameWithPackageLevelConflict() throws Exception {
                runTest("../completion/testData/handlers/basic/LocalClassNameWithPackageLevelConflict.kt");
            }

            @TestMetadata("LocalFunction.kt")
            public void testLocalFunction() throws Exception {
                runTest("../completion/testData/handlers/basic/LocalFunction.kt");
            }

            @TestMetadata("NestedClassNameWithFileLevelConflict.kt")
            public void testNestedClassNameWithFileLevelConflict() throws Exception {
                runTest("../completion/testData/handlers/basic/NestedClassNameWithFileLevelConflict.kt");
            }

            @TestMetadata("NestedClassNameWithPackageLevelConflict.kt")
            public void testNestedClassNameWithPackageLevelConflict() throws Exception {
                runTest("../completion/testData/handlers/basic/NestedClassNameWithPackageLevelConflict.kt");
            }

            @TestMetadata("NestedTypeArg.kt")
            public void testNestedTypeArg() throws Exception {
                runTest("../completion/testData/handlers/basic/NestedTypeArg.kt");
            }

            @TestMetadata("NestedTypeFromImplicitReceiverClass.kt")
            public void testNestedTypeFromImplicitReceiverClass() throws Exception {
                runTest("../completion/testData/handlers/basic/NestedTypeFromImplicitReceiverClass.kt");
            }

            @TestMetadata("NestedTypeFromImplicitReceiverInterface.kt")
            public void testNestedTypeFromImplicitReceiverInterface() throws Exception {
                runTest("../completion/testData/handlers/basic/NestedTypeFromImplicitReceiverInterface.kt");
            }

            @TestMetadata("NestedTypeFromSupertypeClass.kt")
            public void testNestedTypeFromSupertypeClass() throws Exception {
                runTest("../completion/testData/handlers/basic/NestedTypeFromSupertypeClass.kt");
            }

            @TestMetadata("NestedTypeFromSupertypeInterface.kt")
            public void testNestedTypeFromSupertypeInterface() throws Exception {
                runTest("../completion/testData/handlers/basic/NestedTypeFromSupertypeInterface.kt");
            }

            @TestMetadata("NestedTypeFromSupertypeInterface2.kt")
            public void testNestedTypeFromSupertypeInterface2() throws Exception {
                runTest("../completion/testData/handlers/basic/NestedTypeFromSupertypeInterface2.kt");
            }

            @TestMetadata("NoTailFromSmart.kt")
            public void testNoTailFromSmart() throws Exception {
                runTest("../completion/testData/handlers/basic/NoTailFromSmart.kt");
            }

            @TestMetadata("PreferClassToConstructor.kt")
            public void testPreferClassToConstructor() throws Exception {
                runTest("../completion/testData/handlers/basic/PreferClassToConstructor.kt");
            }

            @TestMetadata("ReceiverParam.kt")
            public void testReceiverParam() throws Exception {
                runTest("../completion/testData/handlers/basic/ReceiverParam.kt");
            }

            @TestMetadata("ReceiverParam2.kt")
            public void testReceiverParam2() throws Exception {
                runTest("../completion/testData/handlers/basic/ReceiverParam2.kt");
            }

            @TestMetadata("ReplaceFunctionCallByProperty.kt")
            public void testReplaceFunctionCallByProperty() throws Exception {
                runTest("../completion/testData/handlers/basic/ReplaceFunctionCallByProperty.kt");
            }

            @TestMetadata("ReplaceFunctionCallByPropertyArgs.kt")
            public void testReplaceFunctionCallByPropertyArgs() throws Exception {
                runTest("../completion/testData/handlers/basic/ReplaceFunctionCallByPropertyArgs.kt");
            }

            @TestMetadata("SecondTypeArg.kt")
            public void testSecondTypeArg() throws Exception {
                runTest("../completion/testData/handlers/basic/SecondTypeArg.kt");
            }

            @TestMetadata("SpaceAfterParenthesisBug.kt")
            public void testSpaceAfterParenthesisBug() throws Exception {
                runTest("../completion/testData/handlers/basic/SpaceAfterParenthesisBug.kt");
            }

            @TestMetadata("StaticFunctionFromJavaWithConflict.kt")
            public void testStaticFunctionFromJavaWithConflict() throws Exception {
                runTest("../completion/testData/handlers/basic/StaticFunctionFromJavaWithConflict.kt");
            }

            @TestMetadata("StringFakeConstructor.kt")
            public void testStringFakeConstructor() throws Exception {
                runTest("../completion/testData/handlers/basic/StringFakeConstructor.kt");
            }

            @TestMetadata("SuperMethod.kt")
            public void testSuperMethod() throws Exception {
                runTest("../completion/testData/handlers/basic/SuperMethod.kt");
            }

            @TestMetadata("SuperMethod2.kt")
            public void testSuperMethod2() throws Exception {
                runTest("../completion/testData/handlers/basic/SuperMethod2.kt");
            }

            @TestMetadata("SuperMethodWithDifferentParameterNames.kt")
            public void testSuperMethodWithDifferentParameterNames() throws Exception {
                runTest("../completion/testData/handlers/basic/SuperMethodWithDifferentParameterNames.kt");
            }

            @TestMetadata("SuperTypeArg.kt")
            public void testSuperTypeArg() throws Exception {
                runTest("../completion/testData/handlers/basic/SuperTypeArg.kt");
            }

            @TestMetadata("SyntheticExtension.kt")
            public void testSyntheticExtension() throws Exception {
                runTest("../completion/testData/handlers/basic/SyntheticExtension.kt");
            }

            @TestMetadata("TypeAliasConfict.kt")
            public void testTypeAliasConfict() throws Exception {
                runTest("../completion/testData/handlers/basic/TypeAliasConfict.kt");
            }

            @TestMetadata("TypeAliasConfict1.kt")
            public void testTypeAliasConfict1() throws Exception {
                runTest("../completion/testData/handlers/basic/TypeAliasConfict1.kt");
            }

            @TestMetadata("TypeAliasConfict2.kt")
            public void testTypeAliasConfict2() throws Exception {
                runTest("../completion/testData/handlers/basic/TypeAliasConfict2.kt");
            }

            @TestMetadata("TypeAliasConfict3.kt")
            public void testTypeAliasConfict3() throws Exception {
                runTest("../completion/testData/handlers/basic/TypeAliasConfict3.kt");
            }

            @TestMetadata("TypeAliasConfict4.kt")
            public void testTypeAliasConfict4() throws Exception {
                runTest("../completion/testData/handlers/basic/TypeAliasConfict4.kt");
            }

            @TestMetadata("TypeInferedFromWrapperType.kt")
            public void testTypeInferedFromWrapperType() throws Exception {
                runTest("../completion/testData/handlers/basic/TypeInferedFromWrapperType.kt");
            }

            @TestMetadata("TypeParameter.kt")
            public void testTypeParameter() throws Exception {
                runTest("../completion/testData/handlers/basic/TypeParameter.kt");
            }

            @TestMetadata("UnstableSmartCast.kt")
            public void testUnstableSmartCast() throws Exception {
                runTest("../completion/testData/handlers/basic/UnstableSmartCast.kt");
            }

            @TestMetadata("UnstableSmartCast_notDenotable.kt")
            public void testUnstableSmartCast_notDenotable() throws Exception {
                runTest("../completion/testData/handlers/basic/UnstableSmartCast_notDenotable.kt");
            }

            @TestMetadata("UnstableSmartCast_typeAlias.kt")
            public void testUnstableSmartCast_typeAlias() throws Exception {
                runTest("../completion/testData/handlers/basic/UnstableSmartCast_typeAlias.kt");
            }

            @TestMetadata("UnstableSmartCast_typeParams.kt")
            public void testUnstableSmartCast_typeParams() throws Exception {
                runTest("../completion/testData/handlers/basic/UnstableSmartCast_typeParams.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../completion/testData/handlers/basic/variableNameAndType")
        public static class VariableNameAndType extends AbstractHighLevelBasicCompletionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("NoTypeInsertion.kt")
            public void testNoTypeInsertion() throws Exception {
                runTest("../completion/testData/handlers/basic/variableNameAndType/NoTypeInsertion.kt");
            }

            @TestMetadata("TypeInsertionOnLateinit.kt")
            public void testTypeInsertionOnLateinit() throws Exception {
                runTest("../completion/testData/handlers/basic/variableNameAndType/TypeInsertionOnLateinit.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../completion/testData/handlers")
    public static class Handlers extends AbstractHighLevelBasicCompletionHandlerTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("AddNameToExistingArgument.kt")
        public void testAddNameToExistingArgument() throws Exception {
            runTest("../completion/testData/handlers/AddNameToExistingArgument.kt");
        }

        @TestMetadata("BasicCompletionWorksAfterLastAllowedArgument.kt")
        public void testBasicCompletionWorksAfterLastAllowedArgument() throws Exception {
            runTest("../completion/testData/handlers/BasicCompletionWorksAfterLastAllowedArgument.kt");
        }

        @TestMetadata("ClassCompletionBeforeName.kt")
        public void testClassCompletionBeforeName() throws Exception {
            runTest("../completion/testData/handlers/ClassCompletionBeforeName.kt");
        }

        @TestMetadata("ClassCompletionImport.kt")
        public void testClassCompletionImport() throws Exception {
            runTest("../completion/testData/handlers/ClassCompletionImport.kt");
        }

        @TestMetadata("ClassCompletionInImport.kt")
        public void testClassCompletionInImport() throws Exception {
            runTest("../completion/testData/handlers/ClassCompletionInImport.kt");
        }

        @TestMetadata("ClassCompletionInLambda.kt")
        public void testClassCompletionInLambda() throws Exception {
            runTest("../completion/testData/handlers/ClassCompletionInLambda.kt");
        }

        @TestMetadata("ClassCompletionInMiddle.kt")
        public void testClassCompletionInMiddle() throws Exception {
            runTest("../completion/testData/handlers/ClassCompletionInMiddle.kt");
        }

        @TestMetadata("ClassFromClassObject.kt")
        public void testClassFromClassObject() throws Exception {
            runTest("../completion/testData/handlers/ClassFromClassObject.kt");
        }

        @TestMetadata("ClassFromClassObjectInPackage.kt")
        public void testClassFromClassObjectInPackage() throws Exception {
            runTest("../completion/testData/handlers/ClassFromClassObjectInPackage.kt");
        }

        @TestMetadata("DoNotInsertDefaultJsImports.kt")
        public void testDoNotInsertDefaultJsImports() throws Exception {
            runTest("../completion/testData/handlers/DoNotInsertDefaultJsImports.kt");
        }

        @TestMetadata("DoNotInsertImportForAlreadyImported.kt")
        public void testDoNotInsertImportForAlreadyImported() throws Exception {
            runTest("../completion/testData/handlers/DoNotInsertImportForAlreadyImported.kt");
        }

        @TestMetadata("DoNotInsertImportIfResolvedIntoJavaConstructor.kt")
        public void testDoNotInsertImportIfResolvedIntoJavaConstructor() throws Exception {
            runTest("../completion/testData/handlers/DoNotInsertImportIfResolvedIntoJavaConstructor.kt");
        }

        @TestMetadata("EnumMember.kt")
        public void testEnumMember() throws Exception {
            runTest("../completion/testData/handlers/EnumMember.kt");
        }

        @TestMetadata("EnumMember1.kt")
        public void testEnumMember1() throws Exception {
            runTest("../completion/testData/handlers/EnumMember1.kt");
        }

        @TestMetadata("ExistingSingleBrackets.kt")
        public void testExistingSingleBrackets() throws Exception {
            runTest("../completion/testData/handlers/ExistingSingleBrackets.kt");
        }

        @TestMetadata("ExtFunction.kt")
        public void testExtFunction() throws Exception {
            runTest("../completion/testData/handlers/ExtFunction.kt");
        }

        @TestMetadata("ImportedEnumMember.kt")
        public void testImportedEnumMember() throws Exception {
            runTest("../completion/testData/handlers/ImportedEnumMember.kt");
        }

        @TestMetadata("InfixCall.kt")
        public void testInfixCall() throws Exception {
            runTest("../completion/testData/handlers/InfixCall.kt");
        }

        @TestMetadata("InfixCallOnSpace.kt")
        public void testInfixCallOnSpace() throws Exception {
            runTest("../completion/testData/handlers/InfixCallOnSpace.kt");
        }

        @TestMetadata("InnerClass.kt")
        public void testInnerClass() throws Exception {
            runTest("../completion/testData/handlers/InnerClass.kt");
        }

        @TestMetadata("InsertFqnForJavaClass.kt")
        public void testInsertFqnForJavaClass() throws Exception {
            runTest("../completion/testData/handlers/InsertFqnForJavaClass.kt");
        }

        @TestMetadata("InsertFunctionWithBothParentheses.kt")
        public void testInsertFunctionWithBothParentheses() throws Exception {
            runTest("../completion/testData/handlers/InsertFunctionWithBothParentheses.kt");
        }

        @TestMetadata("InsertImportOnTab.kt")
        public void testInsertImportOnTab() throws Exception {
            runTest("../completion/testData/handlers/InsertImportOnTab.kt");
        }

        @TestMetadata("InsertJavaClassImport.kt")
        public void testInsertJavaClassImport() throws Exception {
            runTest("../completion/testData/handlers/InsertJavaClassImport.kt");
        }

        @TestMetadata("InsertVoidJavaMethod.kt")
        public void testInsertVoidJavaMethod() throws Exception {
            runTest("../completion/testData/handlers/InsertVoidJavaMethod.kt");
        }

        @TestMetadata("KeywordClassName.kt")
        public void testKeywordClassName() throws Exception {
            runTest("../completion/testData/handlers/KeywordClassName.kt");
        }

        @TestMetadata("KeywordFunctionName.kt")
        public void testKeywordFunctionName() throws Exception {
            runTest("../completion/testData/handlers/KeywordFunctionName.kt");
        }

        @TestMetadata("LocalClassCompletion.kt")
        public void testLocalClassCompletion() throws Exception {
            runTest("../completion/testData/handlers/LocalClassCompletion.kt");
        }

        @TestMetadata("NamedParameterBeforeAnotherNamedParameter.kt")
        public void testNamedParameterBeforeAnotherNamedParameter() throws Exception {
            runTest("../completion/testData/handlers/NamedParameterBeforeAnotherNamedParameter.kt");
        }

        @TestMetadata("NamedParameterCompletionWithLeadingSpace.kt")
        public void testNamedParameterCompletionWithLeadingSpace() throws Exception {
            runTest("../completion/testData/handlers/NamedParameterCompletionWithLeadingSpace.kt");
        }

        @TestMetadata("NamedParameterCompletionWithTrailingCommaAndSpace.kt")
        public void testNamedParameterCompletionWithTrailingCommaAndSpace() throws Exception {
            runTest("../completion/testData/handlers/NamedParameterCompletionWithTrailingCommaAndSpace.kt");
        }

        @TestMetadata("NamedParameterKeywordName.kt")
        public void testNamedParameterKeywordName() throws Exception {
            runTest("../completion/testData/handlers/NamedParameterKeywordName.kt");
        }

        @TestMetadata("NamedParameterManualRenameCompletion.kt")
        public void testNamedParameterManualRenameCompletion() throws Exception {
            runTest("../completion/testData/handlers/NamedParameterManualRenameCompletion.kt");
        }

        @TestMetadata("NamedParameterWithExistingComma.kt")
        public void testNamedParameterWithExistingComma() throws Exception {
            runTest("../completion/testData/handlers/NamedParameterWithExistingComma.kt");
        }

        @TestMetadata("NamedParametersAreNotProperlyOrdered.kt")
        public void testNamedParametersAreNotProperlyOrdered() throws Exception {
            runTest("../completion/testData/handlers/NamedParametersAreNotProperlyOrdered.kt");
        }

        @TestMetadata("NamedParametersCompletion.kt")
        public void testNamedParametersCompletion() throws Exception {
            runTest("../completion/testData/handlers/NamedParametersCompletion.kt");
        }

        @TestMetadata("NamedParametersCompletionOnEqual.kt")
        public void testNamedParametersCompletionOnEqual() throws Exception {
            runTest("../completion/testData/handlers/NamedParametersCompletionOnEqual.kt");
        }

        @TestMetadata("NestedLocalClassCompletion.kt")
        public void testNestedLocalClassCompletion() throws Exception {
            runTest("../completion/testData/handlers/NestedLocalClassCompletion.kt");
        }

        @TestMetadata("NoParamsFunction.kt")
        public void testNoParamsFunction() throws Exception {
            runTest("../completion/testData/handlers/NoParamsFunction.kt");
        }

        @TestMetadata("NonStandardArray.kt")
        public void testNonStandardArray() throws Exception {
            runTest("../completion/testData/handlers/NonStandardArray.kt");
        }

        @TestMetadata("Object.kt")
        public void testObject() throws Exception {
            runTest("../completion/testData/handlers/Object.kt");
        }

        @TestMetadata("ParameterType.kt")
        public void testParameterType() throws Exception {
            runTest("../completion/testData/handlers/ParameterType.kt");
        }

        @TestMetadata("ParamsFunction.kt")
        public void testParamsFunction() throws Exception {
            runTest("../completion/testData/handlers/ParamsFunction.kt");
        }

        @TestMetadata("PropertiesGetter.kt")
        public void testPropertiesGetter() throws Exception {
            runTest("../completion/testData/handlers/PropertiesGetter.kt");
        }

        @TestMetadata("SingleBrackets.kt")
        public void testSingleBrackets() throws Exception {
            runTest("../completion/testData/handlers/SingleBrackets.kt");
        }

        @TestMetadata("TabInsertAtTheFileEnd.kt")
        public void testTabInsertAtTheFileEnd() throws Exception {
            runTest("../completion/testData/handlers/TabInsertAtTheFileEnd.kt");
        }

        @TestMetadata("TabInsertBeforeBraces.kt")
        public void testTabInsertBeforeBraces() throws Exception {
            runTest("../completion/testData/handlers/TabInsertBeforeBraces.kt");
        }

        @TestMetadata("TabInsertBeforeBrackets.kt")
        public void testTabInsertBeforeBrackets() throws Exception {
            runTest("../completion/testData/handlers/TabInsertBeforeBrackets.kt");
        }

        @TestMetadata("TabInsertBeforeOperator.kt")
        public void testTabInsertBeforeOperator() throws Exception {
            runTest("../completion/testData/handlers/TabInsertBeforeOperator.kt");
        }

        @TestMetadata("TabInsertBeforeParentheses.kt")
        public void testTabInsertBeforeParentheses() throws Exception {
            runTest("../completion/testData/handlers/TabInsertBeforeParentheses.kt");
        }

        @TestMetadata("TabInsertInSimpleName.kt")
        public void testTabInsertInSimpleName() throws Exception {
            runTest("../completion/testData/handlers/TabInsertInSimpleName.kt");
        }

        @TestMetadata("TabInsertInsideBraces.kt")
        public void testTabInsertInsideBraces() throws Exception {
            runTest("../completion/testData/handlers/TabInsertInsideBraces.kt");
        }

        @TestMetadata("TabInsertInsideBrackets.kt")
        public void testTabInsertInsideBrackets() throws Exception {
            runTest("../completion/testData/handlers/TabInsertInsideBrackets.kt");
        }

        @TestMetadata("TabInsertInsideEmptyParentheses.kt")
        public void testTabInsertInsideEmptyParentheses() throws Exception {
            runTest("../completion/testData/handlers/TabInsertInsideEmptyParentheses.kt");
        }

        @TestMetadata("TabInsertInsideParentheses.kt")
        public void testTabInsertInsideParentheses() throws Exception {
            runTest("../completion/testData/handlers/TabInsertInsideParentheses.kt");
        }

        @TestMetadata("TabReplaceIdentifier.kt")
        public void testTabReplaceIdentifier() throws Exception {
            runTest("../completion/testData/handlers/TabReplaceIdentifier.kt");
        }

        @TestMetadata("TabReplaceIdentifier2.kt")
        public void testTabReplaceIdentifier2() throws Exception {
            runTest("../completion/testData/handlers/TabReplaceIdentifier2.kt");
        }

        @TestMetadata("TabReplaceNull.kt")
        public void testTabReplaceNull() throws Exception {
            runTest("../completion/testData/handlers/TabReplaceNull.kt");
        }

        @TestMetadata("TabReplaceNumber.kt")
        public void testTabReplaceNumber() throws Exception {
            runTest("../completion/testData/handlers/TabReplaceNumber.kt");
        }

        @TestMetadata("TabReplaceThis.kt")
        public void testTabReplaceThis() throws Exception {
            runTest("../completion/testData/handlers/TabReplaceThis.kt");
        }

        @TestMetadata("TabReplaceTrue.kt")
        public void testTabReplaceTrue() throws Exception {
            runTest("../completion/testData/handlers/TabReplaceTrue.kt");
        }

        @TestMetadata("TypeArgOfSuper.kt")
        public void testTypeArgOfSuper() throws Exception {
            runTest("../completion/testData/handlers/TypeArgOfSuper.kt");
        }
    }
}
