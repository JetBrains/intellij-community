// Copyright 2000-2021 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

package org.jetbrains.kotlin.idea.fir.codeInsight.handlers;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.test.TestRoot;
import org.junit.runner.RunWith;

/*
 * This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/codeInsight/handlers/gotoSuperActionHandler")
public abstract class HLGotoSuperActionHandlerTestGenerated extends AbstractHLGotoSuperActionHandlerTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/codeInsight/handlers/gotoSuperActionHandler/classes")
    public static class Classes extends AbstractHLGotoSuperActionHandlerTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("classImplemeningInterfaces.kt")
        public void testClassImplemeningInterfaces() throws Exception {
            runTest("testData/codeInsight/handlers/gotoSuperActionHandler/classes/classImplemeningInterfaces.kt");
        }

        @TestMetadata("classWithDeepHeiarchy.kt")
        public void testClassWithDeepHeiarchy() throws Exception {
            runTest("testData/codeInsight/handlers/gotoSuperActionHandler/classes/classWithDeepHeiarchy.kt");
        }

        @TestMetadata("singleSuperClass.kt")
        public void testSingleSuperClass() throws Exception {
            runTest("testData/codeInsight/handlers/gotoSuperActionHandler/classes/singleSuperClass.kt");
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/codeInsight/handlers/gotoSuperActionHandler/classes/incorrectCode")
        public static class IncorrectCode extends AbstractHLGotoSuperActionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("extendClassWithoutSuperConstructorCall.kt")
            public void testExtendClassWithoutSuperConstructorCall() throws Exception {
                runTest("testData/codeInsight/handlers/gotoSuperActionHandler/classes/incorrectCode/extendClassWithoutSuperConstructorCall.kt");
            }

            @TestMetadata("extendFinalClass.kt")
            public void testExtendFinalClass() throws Exception {
                runTest("testData/codeInsight/handlers/gotoSuperActionHandler/classes/incorrectCode/extendFinalClass.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/codeInsight/handlers/gotoSuperActionHandler/methods")
    public static class Methods extends AbstractHLGotoSuperActionHandlerTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("intersectionOverrideMethods.kt")
        public void testIntersectionOverrideMethods() throws Exception {
            runTest("testData/codeInsight/handlers/gotoSuperActionHandler/methods/intersectionOverrideMethods.kt");
        }

        @TestMetadata("multipleSuperMethodsFromInterfaces.kt")
        public void testMultipleSuperMethodsFromInterfaces() throws Exception {
            runTest("testData/codeInsight/handlers/gotoSuperActionHandler/methods/multipleSuperMethodsFromInterfaces.kt");
        }

        @TestMetadata("singleSuperMethod.kt")
        public void testSingleSuperMethod() throws Exception {
            runTest("testData/codeInsight/handlers/gotoSuperActionHandler/methods/singleSuperMethod.kt");
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/codeInsight/handlers/gotoSuperActionHandler/methods/incorrectCode")
        public static class IncorrectCode extends AbstractHLGotoSuperActionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("overideMethodWithoutOverrideModifier.kt")
            public void testOverideMethodWithoutOverrideModifier() throws Exception {
                runTest("testData/codeInsight/handlers/gotoSuperActionHandler/methods/incorrectCode/overideMethodWithoutOverrideModifier.kt");
            }

            @TestMetadata("overrideFinalMethod.kt")
            public void testOverrideFinalMethod() throws Exception {
                runTest("testData/codeInsight/handlers/gotoSuperActionHandler/methods/incorrectCode/overrideFinalMethod.kt");
            }

            @TestMetadata("overrideFinalMethodInFinalClass.kt")
            public void testOverrideFinalMethodInFinalClass() throws Exception {
                runTest("testData/codeInsight/handlers/gotoSuperActionHandler/methods/incorrectCode/overrideFinalMethodInFinalClass.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/codeInsight/handlers/gotoSuperActionHandler/properties")
    public static class Properties extends AbstractHLGotoSuperActionHandlerTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("intersectionOverrideProperties.kt")
        public void testIntersectionOverrideProperties() throws Exception {
            runTest("testData/codeInsight/handlers/gotoSuperActionHandler/properties/intersectionOverrideProperties.kt");
        }

        @TestMetadata("multipleSuperPropertiesFromInterfaces.kt")
        public void testMultipleSuperPropertiesFromInterfaces() throws Exception {
            runTest("testData/codeInsight/handlers/gotoSuperActionHandler/properties/multipleSuperPropertiesFromInterfaces.kt");
        }

        @TestMetadata("singleSuperProperty.kt")
        public void testSingleSuperProperty() throws Exception {
            runTest("testData/codeInsight/handlers/gotoSuperActionHandler/properties/singleSuperProperty.kt");
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/codeInsight/handlers/gotoSuperActionHandler/properties/incorrectCode")
        public static class IncorrectCode extends AbstractHLGotoSuperActionHandlerTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("overidePropertyWithoutOverrideModifier.kt")
            public void testOveridePropertyWithoutOverrideModifier() throws Exception {
                runTest("testData/codeInsight/handlers/gotoSuperActionHandler/properties/incorrectCode/overidePropertyWithoutOverrideModifier.kt");
            }

            @TestMetadata("overrideFinalProperty.kt")
            public void testOverrideFinalProperty() throws Exception {
                runTest("testData/codeInsight/handlers/gotoSuperActionHandler/properties/incorrectCode/overrideFinalProperty.kt");
            }

            @TestMetadata("overrideFinalPropertyInFinalClass.kt")
            public void testOverrideFinalPropertyInFinalClass() throws Exception {
                runTest("testData/codeInsight/handlers/gotoSuperActionHandler/properties/incorrectCode/overrideFinalPropertyInFinalClass.kt");
            }
        }
    }
}
