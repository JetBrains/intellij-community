// Copyright 2000-2021 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

package org.jetbrains.kotlin.idea.fir.quickfix;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../idea/tests/testData/quickfix/autoImports")
public class HighLevelQuickFixMultiFileTestGenerated extends AbstractHighLevelQuickFixMultiFileTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTestWithExtraFile, this, testDataFilePath);
    }

    @TestMetadata("ambiguousNamePreferFromJdk.before.Main.kt")
    public void testAmbiguousNamePreferFromJdk() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/ambiguousNamePreferFromJdk.before.Main.kt");
    }

    @TestMetadata("ambiguousNamePreferWithImportsFromPackage.before.Main.kt")
    public void testAmbiguousNamePreferWithImportsFromPackage() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/ambiguousNamePreferWithImportsFromPackage.before.Main.kt");
    }

    @TestMetadata("callWithTrailingComma.before.Main.kt")
    public void testCallWithTrailingComma() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/callWithTrailingComma.before.Main.kt");
    }

    @TestMetadata("callableReferenceExtension.before.Main.kt")
    public void testCallableReferenceExtension() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/callableReferenceExtension.before.Main.kt");
    }

    @TestMetadata("callableReferenceExtension2.before.Main.kt")
    public void testCallableReferenceExtension2() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/callableReferenceExtension2.before.Main.kt");
    }

    @TestMetadata("callableReferenceTopLevel.before.Main.kt")
    public void testCallableReferenceTopLevel() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/callableReferenceTopLevel.before.Main.kt");
    }

    @TestMetadata("classImport.before.Main.kt")
    public void testClassImport() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/classImport.before.Main.kt");
    }

    @TestMetadata("constructorReference.before.Main.kt")
    public void testConstructorReference() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/constructorReference.before.Main.kt");
    }

    @TestMetadata("divOperator.before.Main.kt")
    public void testDivOperator() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/divOperator.before.Main.kt");
    }

    @TestMetadata("dslMarkers.before.Main.kt")
    public void testDslMarkers() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/dslMarkers.before.Main.kt");
    }

    @TestMetadata("dslMarkersOnReceiver.before.Main.kt")
    public void testDslMarkersOnReceiver() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/dslMarkersOnReceiver.before.Main.kt");
    }

    @TestMetadata("extensionFunctionImport.before.Main.kt")
    public void testExtensionFunctionImport() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/extensionFunctionImport.before.Main.kt");
    }

    @TestMetadata("extensionFunctionImportImplicitReceiver.before.Main.kt")
    public void testExtensionFunctionImportImplicitReceiver() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/extensionFunctionImportImplicitReceiver.before.Main.kt");
    }

    @TestMetadata("extensionPropertyImport.before.Main.kt")
    public void testExtensionPropertyImport() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/extensionPropertyImport.before.Main.kt");
    }

    @TestMetadata("extensionPropertyOnTypeAliasFromExpansion.before.Main.kt")
    public void testExtensionPropertyOnTypeAliasFromExpansion() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/extensionPropertyOnTypeAliasFromExpansion.before.Main.kt");
    }

    @TestMetadata("extensionPropertyOnTypeAliasFromOtherTypeAlias.before.Main.kt")
    public void testExtensionPropertyOnTypeAliasFromOtherTypeAlias() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/extensionPropertyOnTypeAliasFromOtherTypeAlias.before.Main.kt");
    }

    @TestMetadata("factoryFunctionFromLambda.before.Main.kt")
    public void testFactoryFunctionFromLambda() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/factoryFunctionFromLambda.before.Main.kt");
    }

    @TestMetadata("falsePostfixOperator.before.Main.kt")
    public void testFalsePostfixOperator() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/falsePostfixOperator.before.Main.kt");
    }

    @TestMetadata("functionImport.before.Main.kt")
    public void testFunctionImport() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/functionImport.before.Main.kt");
    }

    @TestMetadata("importAliasClassAlreadyExists.before.Main.kt")
    public void testImportAliasClassAlreadyExists() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importAliasClassAlreadyExists.before.Main.kt");
    }

    @TestMetadata("importAliasClassAlreadyExistsCollision.before.Main.kt")
    public void testImportAliasClassAlreadyExistsCollision() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importAliasClassAlreadyExistsCollision.before.Main.kt");
    }

    @TestMetadata("importAliasFunctionAlreadyExists.before.Main.kt")
    public void testImportAliasFunctionAlreadyExists() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importAliasFunctionAlreadyExists.before.Main.kt");
    }

    @TestMetadata("importAliasFunctionAlreadyExistsCollision.before.Main.kt")
    public void testImportAliasFunctionAlreadyExistsCollision() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importAliasFunctionAlreadyExistsCollision.before.Main.kt");
    }

    @TestMetadata("importAliasPropertyAlreadyExists.before.Main.kt")
    public void testImportAliasPropertyAlreadyExists() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importAliasPropertyAlreadyExists.before.Main.kt");
    }

    @TestMetadata("importFromRoot.before.Main.kt")
    public void testImportFromRoot() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importFromRoot.before.Main.kt");
    }

    @TestMetadata("importFunctionWithDefinitelyNotNullType.before.Main.kt")
    public void testImportFunctionWithDefinitelyNotNullType() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importFunctionWithDefinitelyNotNullType.before.Main.kt");
    }

    @TestMetadata("importGetValueExtensionForDelegateWithLambda.before.Main.kt")
    public void testImportGetValueExtensionForDelegateWithLambda() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importGetValueExtensionForDelegateWithLambda.before.Main.kt");
    }

    @TestMetadata("importInFirstPartInQualifiedExpression.before.Main.kt")
    public void testImportInFirstPartInQualifiedExpression() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importInFirstPartInQualifiedExpression.before.Main.kt");
    }

    @TestMetadata("importNullableTraitWithGenerics.before.Main.kt")
    public void testImportNullableTraitWithGenerics() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importNullableTraitWithGenerics.before.Main.kt");
    }

    @TestMetadata("ImportOperatorInvokeWithConvention.before.Main.kt")
    public void testImportOperatorInvokeWithConvention() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/ImportOperatorInvokeWithConvention.before.Main.kt");
    }

    @TestMetadata("importTrait.before.Main.kt")
    public void testImportTrait() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/importTrait.before.Main.kt");
    }

    @TestMetadata("infixCall.before.Main.kt")
    public void testInfixCall() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/infixCall.before.Main.kt");
    }

    @TestMetadata("infixCall2.before.Main.kt")
    public void testInfixCall2() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/infixCall2.before.Main.kt");
    }

    @TestMetadata("iteratorOperator.before.Main.kt")
    public void testIteratorOperator() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/iteratorOperator.before.Main.kt");
    }

    @TestMetadata("memberWithTopLevelConflict.before.Main.kt")
    public void testMemberWithTopLevelConflict() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/memberWithTopLevelConflict.before.Main.kt");
    }

    @TestMetadata("minusOperator.before.Main.kt")
    public void testMinusOperator() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/minusOperator.before.Main.kt");
    }

    @TestMetadata("nestedClass.before.Main.kt")
    public void testNestedClass() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/nestedClass.before.Main.kt");
    }

    @TestMetadata("noImportForFunInQualifiedNotFirst.before.Main.kt")
    public void testNoImportForFunInQualifiedNotFirst() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportForFunInQualifiedNotFirst.before.Main.kt");
    }

    @TestMetadata("noImportForNestedInPrivate.before.Main.kt")
    public void testNoImportForNestedInPrivate() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportForNestedInPrivate.before.Main.kt");
    }

    @TestMetadata("noImportForPrivateClass.before.Main.kt")
    public void testNoImportForPrivateClass() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportForPrivateClass.before.Main.kt");
    }

    @TestMetadata("noImportForPrivateFunction.before.Main.kt")
    public void testNoImportForPrivateFunction() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportForPrivateFunction.before.Main.kt");
    }

    @TestMetadata("noImportInImports.before.Main.kt")
    public void testNoImportInImports() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportInImports.before.Main.kt");
    }

    @TestMetadata("noImportInQualifiedExpressionNotFirst.before.Main.kt")
    public void testNoImportInQualifiedExpressionNotFirst() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportInQualifiedExpressionNotFirst.before.Main.kt");
    }

    @TestMetadata("noImportInQualifiedUserTypeNotFirst.before.Main.kt")
    public void testNoImportInQualifiedUserTypeNotFirst() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportInQualifiedUserTypeNotFirst.before.Main.kt");
    }

    @TestMetadata("noImportInSafeQualifiedExpressionNotFirst.before.Main.kt")
    public void testNoImportInSafeQualifiedExpressionNotFirst() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportInSafeQualifiedExpressionNotFirst.before.Main.kt");
    }

    @TestMetadata("noImportInterfaceRefAsConstructor.before.Main.kt")
    public void testNoImportInterfaceRefAsConstructor() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportInterfaceRefAsConstructor.before.Main.kt");
    }

    @TestMetadata("noImportsForClassInExcludedPackage.before.Main.kt")
    public void testNoImportsForClassInExcludedPackage() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportsForClassInExcludedPackage.before.Main.kt");
    }

    @TestMetadata("noImportsForExcludedClass.before.Main.kt")
    public void testNoImportsForExcludedClass() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportsForExcludedClass.before.Main.kt");
    }

    @TestMetadata("noImportsForFunctionInExcludedPackage.before.Main.kt")
    public void testNoImportsForFunctionInExcludedPackage() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noImportsForFunctionInExcludedPackage.before.Main.kt");
    }

    @TestMetadata("noneApplicableFromInstanceButExtension.before.Main.kt")
    public void testNoneApplicableFromInstanceButExtension() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/noneApplicableFromInstanceButExtension.before.Main.kt");
    }

    @TestMetadata("notExcludedClass.before.Main.kt")
    public void testNotExcludedClass() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/notExcludedClass.before.Main.kt");
    }

    @TestMetadata("objectImport.before.Main.kt")
    public void testObjectImport() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/objectImport.before.Main.kt");
    }

    @TestMetadata("objectMemberFunctionImportWhenReceiverPresent.before.Main.kt")
    public void testObjectMemberFunctionImportWhenReceiverPresent() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/objectMemberFunctionImportWhenReceiverPresent.before.Main.kt");
    }

    @TestMetadata("packageClass.before.Main.kt")
    public void testPackageClass() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/packageClass.before.Main.kt");
    }

    @TestMetadata("plusOperator.before.Main.kt")
    public void testPlusOperator() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/plusOperator.before.Main.kt");
    }

    @TestMetadata("plusOperatorWithTypeMismatch.before.Main.kt")
    public void testPlusOperatorWithTypeMismatch() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/plusOperatorWithTypeMismatch.before.Main.kt");
    }

    @TestMetadata("postfixOperator.before.Main.kt")
    public void testPostfixOperator() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/postfixOperator.before.Main.kt");
    }

    @TestMetadata("propertyImport.before.Main.kt")
    public void testPropertyImport() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/propertyImport.before.Main.kt");
    }

    @TestMetadata("sameModuleImportPriority.before.Main.kt")
    public void testSameModuleImportPriority() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/sameModuleImportPriority.before.Main.kt");
    }

    @TestMetadata("timesAssign.before.Main.kt")
    public void testTimesAssign() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/timesAssign.before.Main.kt");
    }

    @TestMetadata("typeAliasExtensionFunction.before.Main.kt")
    public void testTypeAliasExtensionFunction() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/typeAliasExtensionFunction.before.Main.kt");
    }

    @TestMetadata("typeAliasExtensionFunctionInTypeAliasChain.before.Main.kt")
    public void testTypeAliasExtensionFunctionInTypeAliasChain() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/typeAliasExtensionFunctionInTypeAliasChain.before.Main.kt");
    }

    @TestMetadata("typeAliasExtensionProperty.before.Main.kt")
    public void testTypeAliasExtensionProperty() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/typeAliasExtensionProperty.before.Main.kt");
    }

    @TestMetadata("typeAliasImport.before.Main.kt")
    public void testTypeAliasImport() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/typeAliasImport.before.Main.kt");
    }

    @TestMetadata("unaryMinusOperator.before.Main.kt")
    public void testUnaryMinusOperator() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/unaryMinusOperator.before.Main.kt");
    }

    @TestMetadata("unaryPlusOperator.before.Main.kt")
    public void testUnaryPlusOperator() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/unaryPlusOperator.before.Main.kt");
    }

    @TestMetadata("withSmartCastQualifier.before.Main.kt")
    public void testWithSmartCastQualifier() throws Exception {
        runTest("../idea/tests/testData/quickfix/autoImports/withSmartCastQualifier.before.Main.kt");
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/quickfix/autoImports/mismatchingArgs")
    public static class MismatchingArgs extends AbstractHighLevelQuickFixMultiFileTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTestWithExtraFile, this, testDataFilePath);
        }

        @TestMetadata("extensionOperator.before.Main.kt")
        public void testExtensionOperator() throws Exception {
            runTest("../idea/tests/testData/quickfix/autoImports/mismatchingArgs/extensionOperator.before.Main.kt");
        }
    }
}
