// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.navigation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../idea/tests/testData/navigation/gotoTypeDeclaration")
public class FirGotoTypeDeclarationTestGenerated extends AbstractFirGotoTypeDeclarationTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("builtinTypeStdlib.test")
    public void testBuiltinTypeStdlib() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/builtinTypeStdlib.test");
    }

    @TestMetadata("explicitParameterInLambda.test")
    public void testExplicitParameterInLambda() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/explicitParameterInLambda.test");
    }

    @TestMetadata("fromFunctionDeclarationName.test")
    public void testFromFunctionDeclarationName() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/fromFunctionDeclarationName.test");
    }

    @TestMetadata("fromFunctionDeclarationReturn.test")
    public void testFromFunctionDeclarationReturn() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/fromFunctionDeclarationReturn.test");
    }

    @TestMetadata("fromFunctionDeclrationExtension.test")
    public void testFromFunctionDeclrationExtension() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/fromFunctionDeclrationExtension.test");
    }

    @TestMetadata("functionCall.test")
    public void testFunctionCall() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/functionCall.test");
    }

    @TestMetadata("itExtensionLambda.test")
    public void testItExtensionLambda() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/itExtensionLambda.test");
    }

    @TestMetadata("itParameterInLambda.test")
    public void testItParameterInLambda() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/itParameterInLambda.test");
    }

    @TestMetadata("noParametersLambda.test")
    public void testNoParametersLambda() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/noParametersLambda.test");
    }

    @TestMetadata("thisExtensionFunction.test")
    public void testThisExtensionFunction() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/thisExtensionFunction.test");
    }

    @TestMetadata("thisExtensionFunctionWithAnnotationOnReceiver.test")
    public void testThisExtensionFunctionWithAnnotationOnReceiver() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/thisExtensionFunctionWithAnnotationOnReceiver.test");
    }

    @TestMetadata("thisExtensionFunctionWithGenericReceiver.test")
    public void testThisExtensionFunctionWithGenericReceiver() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/thisExtensionFunctionWithGenericReceiver.test");
    }

    @TestMetadata("thisExtensionLambda.test")
    public void testThisExtensionLambda() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/thisExtensionLambda.test");
    }

    @TestMetadata("thisInExtensionPropertyAccessor.test")
    public void testThisInExtensionPropertyAccessor() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/thisInExtensionPropertyAccessor.test");
    }

    @TestMetadata("variableType.test")
    public void testVariableType() throws Exception {
        runTest("../idea/tests/testData/navigation/gotoTypeDeclaration/variableType.test");
    }
}
