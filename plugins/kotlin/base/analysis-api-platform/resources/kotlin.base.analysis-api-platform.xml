<idea-plugin package="org.jetbrains.kotlin.idea.base.analysisApiPlatform">
  <extensions defaultExtensionNs="com.intellij">
    <registryKey
            defaultValue="true"
            description="Enables support for Analysis API-based resolution during dumb mode."
            key="kotlin.analysis.allowRestrictedAnalysis"
            restartRequired="true"
    />

    <applicationService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.permissions.KotlinAnalysisPermissionOptions"
            serviceImplementation="org.jetbrains.kotlin.analysis.api.platform.permissions.KotlinDefaultAnalysisPermissionOptions"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.KotlinPlatformSettings"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinPlatformSettings"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.lifetime.KotlinLifetimeTokenFactory"
            serviceImplementation="org.jetbrains.kotlin.analysis.api.platform.lifetime.KotlinReadActionConfinementLifetimeTokenFactory"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.declarations.KotlinDeclarationProviderFactory"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinDeclarationProviderFactory"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.declarations.KotlinDeclarationProviderMerger"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinDeclarationProviderMerger"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.declarations.KotlinAnnotationsResolverFactory"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinAnnotationsResolverFactory"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.packages.KotlinPackageProviderFactory"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinPackageProviderFactory"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.idea.base.analysisApiPlatform.KotlinModulePackageNamesProvider"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinModulePackageNamesProvider"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.packages.KotlinPackageProviderMerger"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinPackageProviderMerger"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.packages.KotlinPackagePartProviderFactory"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinPackagePartProviderFactory"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.java.KotlinJavaModuleAccessibilityChecker"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.java.IdeKotlinJavaModuleAccessibilityChecker"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.java.KotlinJavaModuleAnnotationsProvider"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.java.IdeKotlinJavaModuleAnnotationsProvider"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.restrictedAnalysis.KotlinRestrictedAnalysisService"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinRestrictedAnalysisService"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.statistics.KotlinOpenTelemetryProvider"
            serviceImplementation="org.jetbrains.kotlin.analysis.api.platform.statistics.KotlinGlobalOpenTelemetryProvider"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.analysis.api.platform.projectStructure.KotlinModuleOutputProvider"
            serviceImplementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.projectStructure.IdeKotlinModuleOutputProvider"/>

    <postStartupActivity
            implementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinStatisticsStartupActivity"/>
  </extensions>

  <extensions defaultExtensionNs="org.jetbrains.kotlin">
    <kotlinContentScopeRefiner implementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.projectStructure.scopes.IdeKotlinResolveScopeEnlargerBridge"/>

    <kotlinGlobalSearchScopeMergeStrategy
            implementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.projectStructure.scopes.IdeKotlinUnionScopeMergeStrategy"
            order="first"/>

    <!-- We merge intersection scopes right after flattening union scopes. This allows the merger to profit from nested union scopes being
         flattened (which may contain intersection scopes), while also cutting down on the number of scopes passed to later mergers. -->
    <kotlinGlobalSearchScopeMergeStrategy
            implementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.projectStructure.scopes.IdeKotlinIntersectionScopeMergeStrategy"
            order="first"/>

    <kotlinGlobalSearchScopeMergeStrategy implementation="org.jetbrains.kotlin.idea.base.analysisApiPlatform.projectStructure.scopes.IdeKotlinCombinableSourceAndClassRootsScopeMergeStrategy"/>
  </extensions>

  <projectListeners>
    <listener
            class="org.jetbrains.kotlin.idea.base.analysisApiPlatform.IdeKotlinModulePackageNamesProvider$ModificationEventListener"
            topic="org.jetbrains.kotlin.analysis.api.platform.modification.KotlinModificationEventListener"/>
  </projectListeners>
</idea-plugin>