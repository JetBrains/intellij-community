// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package org.jetbrains.kotlin.idea.core

import com.intellij.psi.PsiElement
import com.intellij.psi.PsiFile
import org.jetbrains.kotlin.codegen.ClassBuilder
import org.jetbrains.kotlin.codegen.ClassBuilderFactory
import org.jetbrains.kotlin.codegen.DelegatingClassBuilder
import org.jetbrains.kotlin.codegen.DelegatingClassBuilderFactory
import org.jetbrains.kotlin.resolve.jvm.diagnostics.JvmDeclarationOrigin

/**
 * A [ClassBuilderFactory] which maps the file names of generated classes to their original [PsiFile], allowing for example to filter code
 * generation output by class name.
 */
internal class OriginTracingClassBuilderFactory(
    private val delegateFactory: ClassBuilderFactory,
) : DelegatingClassBuilderFactory(delegateFactory) {
    private val origins = mutableMapOf<String, MutableSet<PsiFile>>()

    val classFileOrigins: ClassFileOrigins
        get() = origins

    override fun newClassBuilder(origin: JvmDeclarationOrigin): DelegatingClassBuilder =
        OriginTracingClassBuilder(delegateFactory.newClassBuilder(origin), origin.element?.containingFile)

    private inner class OriginTracingClassBuilder(
        private val delegate: ClassBuilder,
        private val originFile: PsiFile?,
    ) : DelegatingClassBuilder() {
        override fun getDelegate(): ClassBuilder = delegate

        override fun defineClass(
            origin: PsiElement?,
            version: Int,
            access: Int,
            name: String,
            signature: String?,
            superName: String,
            interfaces: Array<out String>?,
        ) {
            if (originFile != null) {
                origins.computeIfAbsent("$name.class") { _ -> mutableSetOf() }.add(originFile)
            }
            super.defineClass(origin, version, access, name, signature, superName, interfaces)
        }
    }
}

/**
 * Maps the file name of each generated class (e.g. `com/example/MyClass.class`) to the [PsiFile] it originated from.
 *
 * The map will not include entries for class files which are generated with [JvmDeclarationOrigin.NO_ORIGIN] and thus have no containing
 * [PsiFile]. For example, inlined anonymous objects generated by the IR backend have no declaration origin.
 */
typealias ClassFileOrigins = Map<String, Set<PsiFile>>
