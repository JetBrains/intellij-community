// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.base.fir.analysisApiPlatform.inheritors;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("base/fir/analysis-api-platform")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/sealedInheritors")
public class SealedInheritorsProviderTestGenerated extends AbstractSealedInheritorsProviderTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K2;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("ambiguousLibrarySealedClass")
    public void testAmbiguousLibrarySealedClass() throws Exception {
        runTest("testData/sealedInheritors/ambiguousLibrarySealedClass/");
    }

    @TestMetadata("ambiguousLibrarySealedInterface")
    public void testAmbiguousLibrarySealedInterface() throws Exception {
        runTest("testData/sealedInheritors/ambiguousLibrarySealedInterface/");
    }

    @TestMetadata("ambiguousSealedClass")
    public void testAmbiguousSealedClass() throws Exception {
        runTest("testData/sealedInheritors/ambiguousSealedClass/");
    }

    @TestMetadata("ambiguousSealedInterface")
    public void testAmbiguousSealedInterface() throws Exception {
        runTest("testData/sealedInheritors/ambiguousSealedInterface/");
    }

    @TestMetadata("ambiguousSimpleNamesInHierarchy")
    public void testAmbiguousSimpleNamesInHierarchy() throws Exception {
        runTest("testData/sealedInheritors/ambiguousSimpleNamesInHierarchy/");
    }

    @TestMetadata("illegalDistributedSealedClass")
    public void testIllegalDistributedSealedClass() throws Exception {
        runTest("testData/sealedInheritors/illegalDistributedSealedClass/");
    }

    @TestMetadata("illegalExtendedLibrarySealedClass")
    public void testIllegalExtendedLibrarySealedClass() throws Exception {
        runTest("testData/sealedInheritors/illegalExtendedLibrarySealedClass/");
    }

    @TestMetadata("indirectInheritorsLibrarySealedClass")
    public void testIndirectInheritorsLibrarySealedClass() throws Exception {
        runTest("testData/sealedInheritors/indirectInheritorsLibrarySealedClass/");
    }

    @TestMetadata("indirectInheritorsLibrarySealedInterface")
    public void testIndirectInheritorsLibrarySealedInterface() throws Exception {
        runTest("testData/sealedInheritors/indirectInheritorsLibrarySealedInterface/");
    }

    @TestMetadata("indirectInheritorsSealedClass")
    public void testIndirectInheritorsSealedClass() throws Exception {
        runTest("testData/sealedInheritors/indirectInheritorsSealedClass/");
    }

    @TestMetadata("indirectInheritorsSealedInterface")
    public void testIndirectInheritorsSealedInterface() throws Exception {
        runTest("testData/sealedInheritors/indirectInheritorsSealedInterface/");
    }

    @TestMetadata("kmpExpectActual")
    public void testKmpExpectActual() throws Exception {
        runTest("testData/sealedInheritors/kmpExpectActual/");
    }

    @TestMetadata("librarySealedClass")
    public void testLibrarySealedClass() throws Exception {
        runTest("testData/sealedInheritors/librarySealedClass/");
    }

    @TestMetadata("librarySealedInterface")
    public void testLibrarySealedInterface() throws Exception {
        runTest("testData/sealedInheritors/librarySealedInterface/");
    }

    @TestMetadata("nestedLibrarySealedClass")
    public void testNestedLibrarySealedClass() throws Exception {
        runTest("testData/sealedInheritors/nestedLibrarySealedClass/");
    }

    @TestMetadata("nestedLibrarySealedInterface")
    public void testNestedLibrarySealedInterface() throws Exception {
        runTest("testData/sealedInheritors/nestedLibrarySealedInterface/");
    }

    @TestMetadata("nestedSealedClass")
    public void testNestedSealedClass() throws Exception {
        runTest("testData/sealedInheritors/nestedSealedClass/");
    }

    @TestMetadata("nestedSealedInterface")
    public void testNestedSealedInterface() throws Exception {
        runTest("testData/sealedInheritors/nestedSealedInterface/");
    }

    @TestMetadata("otherModuleSealedClass")
    public void testOtherModuleSealedClass() throws Exception {
        runTest("testData/sealedInheritors/otherModuleSealedClass/");
    }

    @TestMetadata("otherModuleSealedInterface")
    public void testOtherModuleSealedInterface() throws Exception {
        runTest("testData/sealedInheritors/otherModuleSealedInterface/");
    }

    @TestMetadata("sameModuleSealedClass")
    public void testSameModuleSealedClass() throws Exception {
        runTest("testData/sealedInheritors/sameModuleSealedClass/");
    }

    @TestMetadata("sameModuleSealedClassWithIrregularPackage")
    public void testSameModuleSealedClassWithIrregularPackage() throws Exception {
        runTest("testData/sealedInheritors/sameModuleSealedClassWithIrregularPackage/");
    }

    @TestMetadata("sameModuleSealedInterface")
    public void testSameModuleSealedInterface() throws Exception {
        runTest("testData/sealedInheritors/sameModuleSealedInterface/");
    }
}
