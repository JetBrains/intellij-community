// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.base.fir.analysisApiPlatform.trackers;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("base/fir/analysis-api-platform")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/outOfBlockProjectWide")
public class ProjectWideSourceKotlinModificationTrackerTestGenerated extends AbstractProjectWideSourceKotlinModificationTrackerTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K2;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("backingFieldBigInBlockChange.kt")
    public void testBackingFieldBigInBlockChange() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldBigInBlockChange.kt");
    }

    @TestMetadata("backingFieldBigInBlockChangeWithBackingFieldNear.kt")
    public void testBackingFieldBigInBlockChangeWithBackingFieldNear() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldBigInBlockChangeWithBackingFieldNear.kt");
    }

    @TestMetadata("backingFieldBigInBlockChangeWithBackingFieldNear2.kt")
    public void testBackingFieldBigInBlockChangeWithBackingFieldNear2() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldBigInBlockChangeWithBackingFieldNear2.kt");
    }

    @TestMetadata("backingFieldBigNestedInBlockChange.kt")
    public void testBackingFieldBigNestedInBlockChange() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldBigNestedInBlockChange.kt");
    }

    @TestMetadata("backingFieldBigNestedOutOfBlockChange.kt")
    public void testBackingFieldBigNestedOutOfBlockChange() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldBigNestedOutOfBlockChange.kt");
    }

    @TestMetadata("backingFieldBigOutOfBlockChange.kt")
    public void testBackingFieldBigOutOfBlockChange() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldBigOutOfBlockChange.kt");
    }

    @TestMetadata("backingFieldConflictWithPropertyFromReceiverScope.kt")
    public void testBackingFieldConflictWithPropertyFromReceiverScope() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldConflictWithPropertyFromReceiverScope.kt");
    }

    @TestMetadata("backingFieldExplicitAddition.kt")
    public void testBackingFieldExplicitAddition() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldExplicitAddition.kt");
    }

    @TestMetadata("backingFieldExplicitNestedAddition.kt")
    public void testBackingFieldExplicitNestedAddition() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldExplicitNestedAddition.kt");
    }

    @TestMetadata("backingFieldExplicitNestedInBlockAddition.kt")
    public void testBackingFieldExplicitNestedInBlockAddition() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldExplicitNestedInBlockAddition.kt");
    }

    @TestMetadata("backingFieldExplicitRemoval.kt")
    public void testBackingFieldExplicitRemoval() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldExplicitRemoval.kt");
    }

    @TestMetadata("backingFieldFalseImplicitAddition.kt")
    public void testBackingFieldFalseImplicitAddition() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldFalseImplicitAddition.kt");
    }

    @TestMetadata("backingFieldFalseImplicitRemoval.kt")
    public void testBackingFieldFalseImplicitRemoval() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldFalseImplicitRemoval.kt");
    }

    @TestMetadata("backingFieldImplicitAddition.kt")
    public void testBackingFieldImplicitAddition() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldImplicitAddition.kt");
    }

    @TestMetadata("backingFieldImplicitRemoval.kt")
    public void testBackingFieldImplicitRemoval() throws Exception {
        runTest("testData/outOfBlockProjectWide/backingFieldImplicitRemoval.kt");
    }

    @TestMetadata("contract.kt")
    public void testContract() throws Exception {
        runTest("testData/outOfBlockProjectWide/contract.kt");
    }

    @TestMetadata("contractAddition.kt")
    public void testContractAddition() throws Exception {
        runTest("testData/outOfBlockProjectWide/contractAddition.kt");
    }

    @TestMetadata("contractRemoval.kt")
    public void testContractRemoval() throws Exception {
        runTest("testData/outOfBlockProjectWide/contractRemoval.kt");
    }

    @TestMetadata("contractUnwrapping.kt")
    public void testContractUnwrapping() throws Exception {
        runTest("testData/outOfBlockProjectWide/contractUnwrapping.kt");
    }

    @TestMetadata("contractWrapping.kt")
    public void testContractWrapping() throws Exception {
        runTest("testData/outOfBlockProjectWide/contractWrapping.kt");
    }

    @TestMetadata("funInCompanionObject.kt")
    public void testFunInCompanionObject() throws Exception {
        runTest("testData/outOfBlockProjectWide/funInCompanionObject.kt");
    }

    @TestMetadata("inJavaFile.java")
    public void testInJavaFile() throws Exception {
        runTest("testData/outOfBlockProjectWide/inJavaFile.java");
    }

    @TestMetadata("localFun.kt")
    public void testLocalFun() throws Exception {
        runTest("testData/outOfBlockProjectWide/localFun.kt");
    }

    @TestMetadata("memberFunWithBodyWithType.kt")
    public void testMemberFunWithBodyWithType() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberFunWithBodyWithType.kt");
    }

    @TestMetadata("memberFunWithBodyWithoutType.kt")
    public void testMemberFunWithBodyWithoutType() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberFunWithBodyWithoutType.kt");
    }

    @TestMetadata("memberFunWithTypeInBodyExpression.kt")
    public void testMemberFunWithTypeInBodyExpression() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberFunWithTypeInBodyExpression.kt");
    }

    @TestMetadata("memberFunWithoutTypeInBodyExpression.kt")
    public void testMemberFunWithoutTypeInBodyExpression() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberFunWithoutTypeInBodyExpression.kt");
    }

    @TestMetadata("memberGetterWithTypeWithBody.kt")
    public void testMemberGetterWithTypeWithBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberGetterWithTypeWithBody.kt");
    }

    @TestMetadata("memberGetterWithTypeWithoutBody.kt")
    public void testMemberGetterWithTypeWithoutBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberGetterWithTypeWithoutBody.kt");
    }

    @TestMetadata("memberGetterWithoutTypeWithBody.kt")
    public void testMemberGetterWithoutTypeWithBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberGetterWithoutTypeWithBody.kt");
    }

    @TestMetadata("memberGetterWithoutTypeWithoutBody.kt")
    public void testMemberGetterWithoutTypeWithoutBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberGetterWithoutTypeWithoutBody.kt");
    }

    @TestMetadata("memberPropertyWithTypeInDelegate.kt")
    public void testMemberPropertyWithTypeInDelegate() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberPropertyWithTypeInDelegate.kt");
    }

    @TestMetadata("memberPropertyWithTypeInInitializer.kt")
    public void testMemberPropertyWithTypeInInitializer() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberPropertyWithTypeInInitializer.kt");
    }

    @TestMetadata("memberPropertyWithoutTypeInDelegate.kt")
    public void testMemberPropertyWithoutTypeInDelegate() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberPropertyWithoutTypeInDelegate.kt");
    }

    @TestMetadata("memberPropertyWithoutTypeInInitializer.kt")
    public void testMemberPropertyWithoutTypeInInitializer() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberPropertyWithoutTypeInInitializer.kt");
    }

    @TestMetadata("memberSetterWithTypeWithBody.kt")
    public void testMemberSetterWithTypeWithBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberSetterWithTypeWithBody.kt");
    }

    @TestMetadata("memberSetterWithTypeWithoutBody.kt")
    public void testMemberSetterWithTypeWithoutBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberSetterWithTypeWithoutBody.kt");
    }

    @TestMetadata("memberSetterWithoutTypeWithBody.kt")
    public void testMemberSetterWithoutTypeWithBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberSetterWithoutTypeWithBody.kt");
    }

    @TestMetadata("memberSetterWithoutTypeWithoutBody.kt")
    public void testMemberSetterWithoutTypeWithoutBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/memberSetterWithoutTypeWithoutBody.kt");
    }

    @TestMetadata("topGetterWithTypeWithBody.kt")
    public void testTopGetterWithTypeWithBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/topGetterWithTypeWithBody.kt");
    }

    @TestMetadata("topGetterWithTypeWithoutBody.kt")
    public void testTopGetterWithTypeWithoutBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/topGetterWithTypeWithoutBody.kt");
    }

    @TestMetadata("topGetterWithoutTypeWithBody.kt")
    public void testTopGetterWithoutTypeWithBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/topGetterWithoutTypeWithBody.kt");
    }

    @TestMetadata("topGetterWithoutTypeWithoutBody.kt")
    public void testTopGetterWithoutTypeWithoutBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/topGetterWithoutTypeWithoutBody.kt");
    }

    @TestMetadata("topLevelExpressionBodyFunWithType.kt")
    public void testTopLevelExpressionBodyFunWithType() throws Exception {
        runTest("testData/outOfBlockProjectWide/topLevelExpressionBodyFunWithType.kt");
    }

    @TestMetadata("topLevelExpressionBodyFunWithTypeWithoutBody.kt")
    public void testTopLevelExpressionBodyFunWithTypeWithoutBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/topLevelExpressionBodyFunWithTypeWithoutBody.kt");
    }

    @TestMetadata("topLevelExpressionBodyFunWithoutType.kt")
    public void testTopLevelExpressionBodyFunWithoutType() throws Exception {
        runTest("testData/outOfBlockProjectWide/topLevelExpressionBodyFunWithoutType.kt");
    }

    @TestMetadata("topLevelFunWithBodyWithType.kt")
    public void testTopLevelFunWithBodyWithType() throws Exception {
        runTest("testData/outOfBlockProjectWide/topLevelFunWithBodyWithType.kt");
    }

    @TestMetadata("topLevelFunWithBodyWithoutType.kt")
    public void testTopLevelFunWithBodyWithoutType() throws Exception {
        runTest("testData/outOfBlockProjectWide/topLevelFunWithBodyWithoutType.kt");
    }

    @TestMetadata("topPropertyWithTypeInDelegate.kt")
    public void testTopPropertyWithTypeInDelegate() throws Exception {
        runTest("testData/outOfBlockProjectWide/topPropertyWithTypeInDelegate.kt");
    }

    @TestMetadata("topPropertyWithTypeInGetterOnNextLine.kt")
    public void testTopPropertyWithTypeInGetterOnNextLine() throws Exception {
        runTest("testData/outOfBlockProjectWide/topPropertyWithTypeInGetterOnNextLine.kt");
    }

    @TestMetadata("topPropertyWithTypeInInititalzer.kt")
    public void testTopPropertyWithTypeInInititalzer() throws Exception {
        runTest("testData/outOfBlockProjectWide/topPropertyWithTypeInInititalzer.kt");
    }

    @TestMetadata("topPropertyWithoutTypeInDelegate.kt")
    public void testTopPropertyWithoutTypeInDelegate() throws Exception {
        runTest("testData/outOfBlockProjectWide/topPropertyWithoutTypeInDelegate.kt");
    }

    @TestMetadata("topPropertyWithoutTypeInInititalzer.kt")
    public void testTopPropertyWithoutTypeInInititalzer() throws Exception {
        runTest("testData/outOfBlockProjectWide/topPropertyWithoutTypeInInititalzer.kt");
    }

    @TestMetadata("topSetterWithTypeWithBody.kt")
    public void testTopSetterWithTypeWithBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/topSetterWithTypeWithBody.kt");
    }

    @TestMetadata("topSetterWithTypeWithoutBody.kt")
    public void testTopSetterWithTypeWithoutBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/topSetterWithTypeWithoutBody.kt");
    }

    @TestMetadata("topSetterWithoutTypeWithBody.kt")
    public void testTopSetterWithoutTypeWithBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/topSetterWithoutTypeWithBody.kt");
    }

    @TestMetadata("topSetterWithoutTypeWithoutBody.kt")
    public void testTopSetterWithoutTypeWithoutBody() throws Exception {
        runTest("testData/outOfBlockProjectWide/topSetterWithoutTypeWithoutBody.kt");
    }

    @TestMetadata("typeInFunctionAnnotation.kt")
    public void testTypeInFunctionAnnotation() throws Exception {
        runTest("testData/outOfBlockProjectWide/typeInFunctionAnnotation.kt");
    }

    @TestMetadata("typeInFunctionAnnotationParameter.kt")
    public void testTypeInFunctionAnnotationParameter() throws Exception {
        runTest("testData/outOfBlockProjectWide/typeInFunctionAnnotationParameter.kt");
    }

    @TestMetadata("typeInFunctionModifiers.kt")
    public void testTypeInFunctionModifiers() throws Exception {
        runTest("testData/outOfBlockProjectWide/typeInFunctionModifiers.kt");
    }

    @TestMetadata("typeInFunctionName.kt")
    public void testTypeInFunctionName() throws Exception {
        runTest("testData/outOfBlockProjectWide/typeInFunctionName.kt");
    }

    @TestMetadata("typeInFunctionParams.kt")
    public void testTypeInFunctionParams() throws Exception {
        runTest("testData/outOfBlockProjectWide/typeInFunctionParams.kt");
    }

    @TestMetadata("typeInFunctionParamsType.kt")
    public void testTypeInFunctionParamsType() throws Exception {
        runTest("testData/outOfBlockProjectWide/typeInFunctionParamsType.kt");
    }

    @TestMetadata("typeInFunctionReturnType.kt")
    public void testTypeInFunctionReturnType() throws Exception {
        runTest("testData/outOfBlockProjectWide/typeInFunctionReturnType.kt");
    }

    @TestMetadata("typeInFunctionTypeParams.kt")
    public void testTypeInFunctionTypeParams() throws Exception {
        runTest("testData/outOfBlockProjectWide/typeInFunctionTypeParams.kt");
    }
}
