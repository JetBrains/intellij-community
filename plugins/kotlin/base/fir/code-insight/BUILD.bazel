### auto-generated section `build kotlin.base.fir.code-insight` start
load("//build:compiler-options.bzl", "create_kotlinc_options")
load("@rules_jvm//:jvm.bzl", "jvm_library", "jvm_resources")

create_kotlinc_options(
  name = "custom",
  context_receivers = True,
  opt_in = [
    "org.jetbrains.kotlin.utils.addToStdlib.UnsafeCastFunction",
    "org.jetbrains.kotlin.analysis.api.permissions.KaAllowProhibitedAnalyzeFromWriteAction",
    "org.jetbrains.kotlin.analysis.api.KaIdeApi",
    "org.jetbrains.kotlin.analysis.api.KaNonPublicApi",
  ]
)

jvm_resources(
  name = "code-insight_resources",
  files = glob(["resources/**/*"]),
  strip_prefix = "resources"
)

jvm_library(
  name = "code-insight",
  module_name = "kotlin.base.fir.code-insight",
  visibility = ["//visibility:public"],
  srcs = glob(["src/**/*.kt", "src/**/*.java"], allow_empty = True),
  kotlinc_opts = ":custom",
  deps = [
    "@lib//:kotlin-stdlib",
    "@lib//:kotlinc-kotlin-compiler-common",
    "@lib//:kotlinc-kotlin-compiler-fir",
    "@lib//:kotlinc-kotlin-compiler-ir",
    "@lib//:kotlinc-analysis-api",
    "//platform/core-api:core",
    "//platform/execution-impl",
    "//plugins/kotlin/base/util",
    "//plugins/kotlin/base/psi",
    "//platform/util",
    "//plugins/kotlin/base/indices",
    "//plugins/kotlin/base/platforms",
    "//plugins/kotlin/base/project-structure",
    "//plugins/kotlin/base/analysis-api/analysis-api-utils:kotlin-base-analysis-api-utils",
    "//plugins/kotlin/base/code-insight",
    "//platform/core-impl",
    "//platform/indexing-api:indexing",
    "//java/java-psi-api:psi",
    "//plugins/kotlin/base/facet",
  ],
  runtime_deps = [":code-insight_resources"]
)
### auto-generated section `build kotlin.base.fir.code-insight` end