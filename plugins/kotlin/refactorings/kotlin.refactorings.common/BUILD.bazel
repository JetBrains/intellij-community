### auto-generated section `build kotlin.refactorings.common` start
load("//build:compiler-options.bzl", "create_kotlinc_options")
load("@rules_jvm//:jvm.bzl", "jvm_library")

create_kotlinc_options(
  name = "custom",
  context_receivers = True,
  opt_in = [
    "org.jetbrains.kotlin.utils.addToStdlib.UnsafeCastFunction",
    "org.jetbrains.kotlin.analysis.api.permissions.KaAllowProhibitedAnalyzeFromWriteAction",
  ]
)

jvm_library(
  name = "kotlin-refactorings-common",
  module_name = "kotlin.refactorings.common",
  visibility = ["//visibility:public"],
  srcs = glob(["src/**/*.kt", "src/**/*.java"], allow_empty = True),
  kotlinc_opts = ":custom",
  deps = [
    "//plugins/kotlin/base/psi:kotlin-base-psi",
    "//platform/editor-ui-ex:editor-ex",
    "//plugins/kotlin/base/util:kotlin-base-util",
    "//java/java-psi-api:psi",
    "//platform/core-api:core",
    "//platform/core-impl",
    "//platform/ide-core-impl",
    "//platform/lang-impl",
    "//java/java-impl-refactorings:impl-refactorings",
    "@lib//:kotlinc-analysis-api",
    "@lib//:kotlinc-kotlin-compiler-common",
    "//java/openapi:java",
    "//platform/platform-impl:ide-impl",
    "//platform/usageView",
    "//plugins/kotlin/base/resources:kotlin-base-resources",
    "//platform/core-ui",
    "//plugins/kotlin/base/analysis:kotlin-base-analysis",
    "//plugins/kotlin/base/project-structure:kotlin-base-project-structure",
    "//plugins/kotlin/base/code-insight:kotlin-base-code-insight",
    "//plugins/kotlin/base/kdoc:kotlin-base-kdoc",
    "//java/java-impl:impl",
    "//plugins/kotlin/code-insight/utils:kotlin-code-insight-utils",
    "@lib//:guava",
    "//plugins/kotlin/kotlin.searching/base",
    "//plugins/kotlin/formatter",
  ],
  runtime_deps = ["//plugins/kotlin/base/frontend-agnostic:kotlin-base-frontend-agnostic"]
)
### auto-generated section `build kotlin.refactorings.common` end