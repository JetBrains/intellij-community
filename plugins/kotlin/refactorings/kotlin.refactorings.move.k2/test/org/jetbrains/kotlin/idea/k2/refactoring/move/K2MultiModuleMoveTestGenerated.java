// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.refactoring.move;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("refactorings/kotlin.refactorings.move.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../idea/tests/testData/refactoring/moveMultiModule")
public class K2MultiModuleMoveTestGenerated extends AbstractK2MultiModuleMoveTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K2;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("moveClassWithInternalMemberFromJvmToCommon/moveClassWithInternalMemberFromJvmToCommon.test")
    public void testMoveClassWithInternalMemberFromJvmToCommon_MoveClassWithInternalMemberFromJvmToCommon() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveClassWithInternalMemberFromJvmToCommon/moveClassWithInternalMemberFromJvmToCommon.test");
    }

    @TestMetadata("moveDeclarationActualToCommon/moveDeclarationActual.test")
    public void testMoveDeclarationActualToCommon_MoveDeclarationActual() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveDeclarationActualToCommon/moveDeclarationActual.test");
    }

    @TestMetadata("moveDeclarationActual/moveDeclarationActual.test")
    public void testMoveDeclarationActual_MoveDeclarationActual() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveDeclarationActual/moveDeclarationActual.test");
    }

    @TestMetadata("moveDeclarationExpectedToPlatform/moveDeclarationActual.test")
    public void testMoveDeclarationExpectedToPlatform_MoveDeclarationActual() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveDeclarationExpectedToPlatform/moveDeclarationActual.test");
    }

    @TestMetadata("moveDeclarationExpected/moveDeclarationExpected.test")
    public void testMoveDeclarationExpected_MoveDeclarationExpected() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveDeclarationExpected/moveDeclarationExpected.test");
    }

    @TestMetadata("moveDirectoryKeepPackageDirective/moveDirectoryKeepPackageDirective.test")
    public void testMoveDirectoryKeepPackageDirective_MoveDirectoryKeepPackageDirective() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveDirectoryKeepPackageDirective/moveDirectoryKeepPackageDirective.test");
    }

    @TestMetadata("moveDirectoryToUnrelatedModuleConflict/moveDirectoryToUnrelatedModuleConflict.test")
    public void testMoveDirectoryToUnrelatedModuleConflict_MoveDirectoryToUnrelatedModuleConflict() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveDirectoryToUnrelatedModuleConflict/moveDirectoryToUnrelatedModuleConflict.test");
    }

    @TestMetadata("moveEnumVariableReference/moveEnumVariableReference.test")
    public void testMoveEnumVariableReference_MoveEnumVariableReference() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveEnumVariableReference/moveEnumVariableReference.test");
    }

    @TestMetadata("moveFileToNonSrc/moveFileToNonSrc.test")
    public void testMoveFileToNonSrc_MoveFileToNonSrc() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveFileToNonSrc/moveFileToNonSrc.test");
    }

    @TestMetadata("moveFileWithDeclarationsToUnrelatedModuleConflict/moveFileWithDeclarationsToUnrelatedModuleConflict.test")
    public void testMoveFileWithDeclarationsToUnrelatedModuleConflict_MoveFileWithDeclarationsToUnrelatedModuleConflict() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveFileWithDeclarationsToUnrelatedModuleConflict/moveFileWithDeclarationsToUnrelatedModuleConflict.test");
    }

    @TestMetadata("moveFromJsModuleToJvmModule/moveFromJsModuleToJvmModule.test")
    public void testMoveFromJsModuleToJvmModule_MoveFromJsModuleToJvmModule() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveFromJsModuleToJvmModule/moveFromJsModuleToJvmModule.test");
    }

    @TestMetadata("moveFromJvmModuleToJsModule/moveFromJvmModuleToJsModule.test")
    public void testMoveFromJvmModuleToJsModule_MoveFromJvmModuleToJsModule() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveFromJvmModuleToJsModule/moveFromJvmModuleToJsModule.test");
    }

    @TestMetadata("moveInternalToAnotherModule/moveInternalToAnotherModule.test")
    public void testMoveInternalToAnotherModule_MoveInternalToAnotherModule() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveInternalToAnotherModule/moveInternalToAnotherModule.test");
    }

    @TestMetadata("moveJdkDependentToJsModule/moveJdkDependentToJsModule.test")
    public void testMoveJdkDependentToJsModule_MoveJdkDependentToJsModule() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveJdkDependentToJsModule/moveJdkDependentToJsModule.test");
    }

    @TestMetadata("moveMultipleFilesToUnrelatedModuleConflict/moveMultipleFilesToUnrelatedModuleConflict.test")
    public void testMoveMultipleFilesToUnrelatedModuleConflict_MoveMultipleFilesToUnrelatedModuleConflict() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveMultipleFilesToUnrelatedModuleConflict/moveMultipleFilesToUnrelatedModuleConflict.test");
    }

    @TestMetadata("movePackageToUnrelatedModuleConflict/movePackageToUnrelatedModuleConflict.test")
    public void testMovePackageToUnrelatedModuleConflict_MovePackageToUnrelatedModuleConflict() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/movePackageToUnrelatedModuleConflict/movePackageToUnrelatedModuleConflict.test");
    }

    @TestMetadata("moveRefToLibTypeAliasImplementingLibExpectClass/moveRefToLibTypeAliasImplementingLibExpectClass.test")
    public void testMoveRefToLibTypeAliasImplementingLibExpectClass_MoveRefToLibTypeAliasImplementingLibExpectClass() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveRefToLibTypeAliasImplementingLibExpectClass/moveRefToLibTypeAliasImplementingLibExpectClass.test");
    }

    @TestMetadata("moveSealedCheckEntireHierarchy/moveSealedCheckEntireHierarchy.test")
    public void testMoveSealedCheckEntireHierarchy_MoveSealedCheckEntireHierarchy() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckEntireHierarchy/moveSealedCheckEntireHierarchy.test");
    }

    @TestMetadata("moveSealedCheckNotMember/moveSealedCheckNotMember.test")
    public void testMoveSealedCheckNotMember_MoveSealedCheckNotMember() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckNotMember/moveSealedCheckNotMember.test");
    }

    @TestMetadata("moveSealedCheckOriginalPackageHasMemberCrossModule/moveSealedCheckOriginalPackageHasMemberCrossModule.test")
    public void testMoveSealedCheckOriginalPackageHasMemberCrossModule_MoveSealedCheckOriginalPackageHasMemberCrossModule() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckOriginalPackageHasMemberCrossModule/moveSealedCheckOriginalPackageHasMemberCrossModule.test");
    }

    @TestMetadata("moveSealedCheckOriginalPackageHasMember/moveSealedCheckOriginalPackageHasMember.test")
    public void testMoveSealedCheckOriginalPackageHasMember_MoveSealedCheckOriginalPackageHasMember() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckOriginalPackageHasMember/moveSealedCheckOriginalPackageHasMember.test");
    }

    @TestMetadata("moveSealedCheckSingleSealed/moveSealedCheckSingleSealed.test")
    public void testMoveSealedCheckSingleSealed_MoveSealedCheckSingleSealed() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckSingleSealed/moveSealedCheckSingleSealed.test");
    }

    @TestMetadata("moveSealedCheckTargetPackageHasMemberCrossModule/moveSealedCheckTargetPackageHasMemberCrossModule.test")
    public void testMoveSealedCheckTargetPackageHasMemberCrossModule_MoveSealedCheckTargetPackageHasMemberCrossModule() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckTargetPackageHasMemberCrossModule/moveSealedCheckTargetPackageHasMemberCrossModule.test");
    }

    @TestMetadata("moveSealedCheckTargetPackageHasMember/moveSealedCheckTargetPackageHasMember.test")
    public void testMoveSealedCheckTargetPackageHasMember_MoveSealedCheckTargetPackageHasMember() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckTargetPackageHasMember/moveSealedCheckTargetPackageHasMember.test");
    }

    @TestMetadata("moveSealedCheckTargetPackageHasNoMembersCrossModuleBig/moveSealedCheckTargetPackageHasNoMembersCrossModuleBig.test")
    public void testMoveSealedCheckTargetPackageHasNoMembersCrossModuleBig_MoveSealedCheckTargetPackageHasNoMembersCrossModuleBig() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckTargetPackageHasNoMembersCrossModuleBig/moveSealedCheckTargetPackageHasNoMembersCrossModuleBig.test");
    }

    @TestMetadata("moveSealedCheckTargetPackageHasNoMembersCrossModule/moveSealedCheckTargetPackageHasNoMembersCrossModule.test")
    public void testMoveSealedCheckTargetPackageHasNoMembersCrossModule_MoveSealedCheckTargetPackageHasNoMembersCrossModule() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckTargetPackageHasNoMembersCrossModule/moveSealedCheckTargetPackageHasNoMembersCrossModule.test");
    }

    @TestMetadata("moveSealedCheckTargetPackageHasNoMembers/moveSealedCheckTargetPackageHasNoMembers.test")
    public void testMoveSealedCheckTargetPackageHasNoMembers_MoveSealedCheckTargetPackageHasNoMembers() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckTargetPackageHasNoMembers/moveSealedCheckTargetPackageHasNoMembers.test");
    }

    @TestMetadata("moveSealedCheckWithinPackage/moveSealedCheckWithinPackage.test")
    public void testMoveSealedCheckWithinPackage_MoveSealedCheckWithinPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveSealedCheckWithinPackage/moveSealedCheckWithinPackage.test");
    }

    @TestMetadata("moveToModuleWithoutLibConflict/moveToModuleWithoutLibConflict.test")
    public void testMoveToModuleWithoutLibConflict_MoveToModuleWithoutLibConflict() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveToModuleWithoutLibConflict/moveToModuleWithoutLibConflict.test");
    }

    @TestMetadata("moveToUnrelatedModuleConflict/moveToUnrelatedModuleConflict.test")
    public void testMoveToUnrelatedModuleConflict_MoveToUnrelatedModuleConflict() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/moveToUnrelatedModuleConflict/moveToUnrelatedModuleConflict.test");
    }

    @TestMetadata("visibilityConflictInImport/visibilityConflictInImport.test")
    public void testVisibilityConflictInImport_VisibilityConflictInImport() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveMultiModule/visibilityConflictInImport/visibilityConflictInImport.test");
    }
}
