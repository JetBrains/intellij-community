// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.refactoring.move;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("refactorings/kotlin.refactorings.move.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../idea/tests/testData/refactoring/moveTopLevel")
public class K2MoveTopLevelTestGenerated extends AbstractK2MoveTopLevelTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K2;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("java/moveTopLevelClassToAnotherPackage/moveTopLevelClassToAnotherPackage.test")
    public void testJava_moveTopLevelClassToAnotherPackage_MoveTopLevelClassToAnotherPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/java/moveTopLevelClassToAnotherPackage/moveTopLevelClassToAnotherPackage.test");
    }

    @TestMetadata("kotlin/accessorNames/accessorNames.test")
    public void testKotlin_accessorNames_AccessorNames() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/accessorNames/accessorNames.test");
    }

    @TestMetadata("kotlin/avoidCapturingOuterName/avoidCapturingOuterName.test")
    public void testKotlin_avoidCapturingOuterName_AvoidCapturingOuterName() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/avoidCapturingOuterName/avoidCapturingOuterName.test");
    }

    @TestMetadata("kotlin/avoidCapturingPackageNameNested/avoidCapturingPackageNameNested.test")
    public void testKotlin_avoidCapturingPackageNameNested_AvoidCapturingPackageNameNested() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/avoidCapturingPackageNameNested/avoidCapturingPackageNameNested.test");
    }

    @TestMetadata("kotlin/avoidCapturingPackageNameSafeCall/avoidCapturingPackageNameSafeCall.test")
    public void testKotlin_avoidCapturingPackageNameSafeCall_AvoidCapturingPackageNameSafeCall() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/avoidCapturingPackageNameSafeCall/avoidCapturingPackageNameSafeCall.test");
    }

    @TestMetadata("kotlin/avoidCapturingPackageName/avoidCapturingPackageName.test")
    public void testKotlin_avoidCapturingPackageName_AvoidCapturingPackageName() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/avoidCapturingPackageName/avoidCapturingPackageName.test");
    }

    @TestMetadata("kotlin/callableReference/callableReference.test")
    public void testKotlin_callableReference_CallableReference() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/callableReference/callableReference.test");
    }

    @TestMetadata("kotlin/callsAndCallableRefs/internalUsages/differentSourceAndTargetWithFqNames/differentSourceAndTargetWithFqNames.test")
    public void testKotlin_callsAndCallableRefs_internalUsages_differentSourceAndTargetWithFqNames_DifferentSourceAndTargetWithFqNames() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/callsAndCallableRefs/internalUsages/differentSourceAndTargetWithFqNames/differentSourceAndTargetWithFqNames.test");
    }

    @TestMetadata("kotlin/callsAndCallableRefs/internalUsages/differentSourceAndTargetWithImports/differentSourceAndTargetWithImports.test")
    public void testKotlin_callsAndCallableRefs_internalUsages_differentSourceAndTargetWithImports_DifferentSourceAndTargetWithImports() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/callsAndCallableRefs/internalUsages/differentSourceAndTargetWithImports/differentSourceAndTargetWithImports.test");
    }

    @TestMetadata("kotlin/callsAndCallableRefs/internalUsages/differentSourceWithFqNames/differentSourceWithFqNames.test")
    public void testKotlin_callsAndCallableRefs_internalUsages_differentSourceWithFqNames_DifferentSourceWithFqNames() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/callsAndCallableRefs/internalUsages/differentSourceWithFqNames/differentSourceWithFqNames.test");
    }

    @TestMetadata("kotlin/callsAndCallableRefs/internalUsages/differentSourceWithImports/differentSourceWithImports.test")
    public void testKotlin_callsAndCallableRefs_internalUsages_differentSourceWithImports_DifferentSourceWithImports() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/callsAndCallableRefs/internalUsages/differentSourceWithImports/differentSourceWithImports.test");
    }

    @TestMetadata("kotlin/callsAndCallableRefs/internalUsages/differentTargetWithFqNames/differentTargetWithFqNames.test")
    public void testKotlin_callsAndCallableRefs_internalUsages_differentTargetWithFqNames_DifferentTargetWithFqNames() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/callsAndCallableRefs/internalUsages/differentTargetWithFqNames/differentTargetWithFqNames.test");
    }

    @TestMetadata("kotlin/callsAndCallableRefs/internalUsages/differentTarget/differentTarget.test")
    public void testKotlin_callsAndCallableRefs_internalUsages_differentTarget_DifferentTarget() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/callsAndCallableRefs/internalUsages/differentTarget/differentTarget.test");
    }

    @TestMetadata("kotlin/classAlreadyInaccessible/classAlreadyInaccessible.test")
    public void testKotlin_classAlreadyInaccessible_ClassAlreadyInaccessible() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/classAlreadyInaccessible/classAlreadyInaccessible.test");
    }

    @TestMetadata("kotlin/classFromKtToKts/classFromKtToKts.test")
    public void testKotlin_classFromKtToKts_ClassFromKtToKts() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/classFromKtToKts/classFromKtToKts.test");
    }

    @TestMetadata("kotlin/classFromKtsToKt/classFromKtsToKt.test")
    public void testKotlin_classFromKtsToKt_ClassFromKtsToKt() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/classFromKtsToKt/classFromKtsToKt.test");
    }

    @TestMetadata("kotlin/classFromKtsToKts/classFromKtsToKts.test")
    public void testKotlin_classFromKtsToKts_ClassFromKtsToKts() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/classFromKtsToKts/classFromKtsToKts.test");
    }

    @TestMetadata("kotlin/classWithCopyrightNotice/classWithCopyrightNotice.test")
    public void testKotlin_classWithCopyrightNotice_ClassWithCopyrightNotice() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/classWithCopyrightNotice/classWithCopyrightNotice.test");
    }

    @TestMetadata("kotlin/classWithInitializer/classWithInitializer.test")
    public void testKotlin_classWithInitializer_ClassWithInitializer() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/classWithInitializer/classWithInitializer.test");
    }

    @TestMetadata("kotlin/classWithPrimaryConstructor/classWithPrimaryConstructor.test")
    public void testKotlin_classWithPrimaryConstructor_ClassWithPrimaryConstructor() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/classWithPrimaryConstructor/classWithPrimaryConstructor.test");
    }

    @TestMetadata("kotlin/companionExtensionMemberRef/companionExtensionMemberRef.test")
    public void testKotlin_companionExtensionMemberRef_CompanionExtensionMemberRef() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/companionExtensionMemberRef/companionExtensionMemberRef.test");
    }

    @TestMetadata("kotlin/companionMemberRefDelegation/companionMemberRefDelegation.test")
    public void testKotlin_companionMemberRefDelegation_CompanionMemberRefDelegation() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/companionMemberRefDelegation/companionMemberRefDelegation.test");
    }

    @TestMetadata("kotlin/companionMemberRefFakeOverride/companionMemberRefFakeOverride.test")
    public void testKotlin_companionMemberRefFakeOverride_CompanionMemberRefFakeOverride() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/companionMemberRefFakeOverride/companionMemberRefFakeOverride.test");
    }

    @TestMetadata("kotlin/companionMemberRefWithJavaParent/companionMemberRefWithJavaParent.test")
    public void testKotlin_companionMemberRefWithJavaParent_CompanionMemberRefWithJavaParent() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/companionMemberRefWithJavaParent/companionMemberRefWithJavaParent.test");
    }

    @TestMetadata("kotlin/createDirInProjectNonPkgDirStructure/createDirInProjectNonPkgDirStructure.test")
    public void testKotlin_createDirInProjectNonPkgDirStructure_CreateDirInProjectNonPkgDirStructure() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/createDirInProjectNonPkgDirStructure/createDirInProjectNonPkgDirStructure.test");
    }

    @TestMetadata("kotlin/createDirInProjectPkgDirStructure/createDirInProjectPkgDirStructure.test")
    public void testKotlin_createDirInProjectPkgDirStructure_CreateDirInProjectPkgDirStructure() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/createDirInProjectPkgDirStructure/createDirInProjectPkgDirStructure.test");
    }

    @TestMetadata("kotlin/delegateInObject/delegateInObject.test")
    public void testKotlin_delegateInObject_DelegateInObject() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/delegateInObject/delegateInObject.test");
    }

    @TestMetadata("kotlin/facadeClassChangeInTheSamePackage/facadeClassChangeInTheSamePackage.test")
    public void testKotlin_facadeClassChangeInTheSamePackage_FacadeClassChangeInTheSamePackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/facadeClassChangeInTheSamePackage/facadeClassChangeInTheSamePackage.test");
    }

    @TestMetadata("kotlin/fakeOverrideInObject/fakeOverrideInObject.test")
    public void testKotlin_fakeOverrideInObject_FakeOverrideInObject() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/fakeOverrideInObject/fakeOverrideInObject.test");
    }

    @TestMetadata("kotlin/functionAlreadyInaccessible/functionAlreadyInaccessible.test")
    public void testKotlin_functionAlreadyInaccessible_FunctionAlreadyInaccessible() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/functionAlreadyInaccessible/functionAlreadyInaccessible.test");
    }

    @TestMetadata("kotlin/functionAndPropertyWithSameName/functionAndPropertyWithSameName.test")
    public void testKotlin_functionAndPropertyWithSameName_FunctionAndPropertyWithSameName() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/functionAndPropertyWithSameName/functionAndPropertyWithSameName.test");
    }

    @TestMetadata("kotlin/getOperatorInternalUsage/getOperatorInternalUsage.test")
    public void testKotlin_getOperatorInternalUsage_GetOperatorInternalUsage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/getOperatorInternalUsage/getOperatorInternalUsage.test");
    }

    @TestMetadata("kotlin/implicitInvokeCalls/differentSourceAndTarget/differentSourceAndTarget.test")
    public void testKotlin_implicitInvokeCalls_differentSourceAndTarget_DifferentSourceAndTarget() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/implicitInvokeCalls/differentSourceAndTarget/differentSourceAndTarget.test");
    }

    @TestMetadata("kotlin/implicitInvokeCalls/differentSource/differentSource.test")
    public void testKotlin_implicitInvokeCalls_differentSource_DifferentSource() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/implicitInvokeCalls/differentSource/differentSource.test");
    }

    @TestMetadata("kotlin/implicitInvokeCalls/differentTarget/differentTarget.test")
    public void testKotlin_implicitInvokeCalls_differentTarget_DifferentTarget() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/implicitInvokeCalls/differentTarget/differentTarget.test");
    }

    @TestMetadata("kotlin/innerEnumReferenceWithoutQualifier/innerEnumReferenceWithoutQualifier.test")
    public void testKotlin_innerEnumReferenceWithoutQualifier_InnerEnumReferenceWithoutQualifier() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/innerEnumReferenceWithoutQualifier/innerEnumReferenceWithoutQualifier.test");
    }

    @TestMetadata("kotlin/innerReferenceWithoutQualifier/innerReferenceWithoutQualifier.test")
    public void testKotlin_innerReferenceWithoutQualifier_InnerReferenceWithoutQualifier() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/innerReferenceWithoutQualifier/innerReferenceWithoutQualifier.test");
    }

    @TestMetadata("kotlin/internalReferences/internalReferences.test")
    public void testKotlin_internalReferences_InternalReferences() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/internalReferences/internalReferences.test");
    }

    @TestMetadata("kotlin/invokeOperatorInternalUsage/invokeOperatorInternalUsage.test")
    public void testKotlin_invokeOperatorInternalUsage_InvokeOperatorInternalUsage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/invokeOperatorInternalUsage/invokeOperatorInternalUsage.test");
    }

    @TestMetadata("kotlin/iteratorOperatorInternalUsage/iteratorOperatorInternalUsage.test")
    public void testKotlin_iteratorOperatorInternalUsage_IteratorOperatorInternalUsage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/iteratorOperatorInternalUsage/iteratorOperatorInternalUsage.test");
    }

    @TestMetadata("kotlin/kt17032/kt17032.test")
    public void testKotlin_kt17032_Kt17032() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/kt17032/kt17032.test");
    }

    @TestMetadata("kotlin/leaveNoRootPrefixIfQualifierIsAdded/leaveNoRootPrefixIfQualifierIsAdded.test")
    public void testKotlin_leaveNoRootPrefixIfQualifierIsAdded_LeaveNoRootPrefixIfQualifierIsAdded() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/leaveNoRootPrefixIfQualifierIsAdded/leaveNoRootPrefixIfQualifierIsAdded.test");
    }

    @TestMetadata("kotlin/moveClassFromDefaultPackage/moveClassFromDefaultPackage.test")
    public void testKotlin_moveClassFromDefaultPackage_MoveClassFromDefaultPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassFromDefaultPackage/moveClassFromDefaultPackage.test");
    }

    @TestMetadata("kotlin/moveClassToDefaultPackage/moveClassToDefaultPackage.test")
    public void testKotlin_moveClassToDefaultPackage_MoveClassToDefaultPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassToDefaultPackage/moveClassToDefaultPackage.test");
    }

    @TestMetadata("kotlin/moveClassToFile/moveClassToFile.test")
    public void testKotlin_moveClassToFile_MoveClassToFile() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassToFile/moveClassToFile.test");
    }

    @TestMetadata("kotlin/moveClassToNewFileAndQuotePackage/moveClassToNewFileAndQuotePackage.test")
    public void testKotlin_moveClassToNewFileAndQuotePackage_MoveClassToNewFileAndQuotePackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassToNewFileAndQuotePackage/moveClassToNewFileAndQuotePackage.test");
    }

    @TestMetadata("kotlin/moveClassToPackageFqnConstructor/moveClassToPackageFqnConstructor.test")
    public void testKotlin_moveClassToPackageFqnConstructor_MoveClassToPackageFqnConstructor() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassToPackageFqnConstructor/moveClassToPackageFqnConstructor.test");
    }

    @TestMetadata("kotlin/moveClassToPackage/moveClassToPackage.test")
    public void testKotlin_moveClassToPackage_MoveClassToPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassToPackage/moveClassToPackage.test");
    }

    @TestMetadata("kotlin/moveClassWithImportsRetained/moveClassWithImportsRetained.test")
    public void testKotlin_moveClassWithImportsRetained_MoveClassWithImportsRetained() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassWithImportsRetained/moveClassWithImportsRetained.test");
    }

    @TestMetadata("kotlin/moveClassWithJavaAnnotation/moveClassWithJavaAnnotation.test")
    public void testKotlin_moveClassWithJavaAnnotation_MoveClassWithJavaAnnotation() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassWithJavaAnnotation/moveClassWithJavaAnnotation.test");
    }

    @TestMetadata("kotlin/moveClassWithJavaReference/moveClassWithJavaReference.test")
    public void testKotlin_moveClassWithJavaReference_MoveClassWithJavaReference() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassWithJavaReference/moveClassWithJavaReference.test");
    }

    @TestMetadata("kotlin/moveClassWithLongFunction/moveClassWithLongFunction.test")
    public void testKotlin_moveClassWithLongFunction_MoveClassWithLongFunction() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveClassWithLongFunction/moveClassWithLongFunction.test");
    }

    @TestMetadata("kotlin/moveCollectionLiteralUsage/moveCollectionLiteralUsage.test")
    public void testKotlin_moveCollectionLiteralUsage_MoveCollectionLiteralUsage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveCollectionLiteralUsage/moveCollectionLiteralUsage.test");
    }

    @TestMetadata("kotlin/moveDeleteIfOnlyFileAnnotation/moveDeleteIfOnlyFileAnnotation.test")
    public void testKotlin_moveDeleteIfOnlyFileAnnotation_MoveDeleteIfOnlyFileAnnotation() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveDeleteIfOnlyFileAnnotation/moveDeleteIfOnlyFileAnnotation.test");
    }

    @TestMetadata("kotlin/moveEscapedKeyword/moveEscapedKeyword.test")
    public void testKotlin_moveEscapedKeyword_MoveEscapedKeyword() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveEscapedKeyword/moveEscapedKeyword.test");
    }

    @TestMetadata("kotlin/moveExtensionFunctionToFil/moveExtensionFunctionToFil.test")
    public void testKotlin_moveExtensionFunctionToFil_MoveExtensionFunctionToFil() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveExtensionFunctionToFil/moveExtensionFunctionToFil.test");
    }

    @TestMetadata("kotlin/moveExtensionPropertyToFile/moveExtensionPropertyToFile.test")
    public void testKotlin_moveExtensionPropertyToFile_MoveExtensionPropertyToFile() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveExtensionPropertyToFile/moveExtensionPropertyToFile.test");
    }

    @TestMetadata("kotlin/moveFromDefaultPackage/moveFromDefaultPackage.test")
    public void testKotlin_moveFromDefaultPackage_MoveFromDefaultPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveFromDefaultPackage/moveFromDefaultPackage.test");
    }

    @TestMetadata("kotlin/moveFunctionNameClashErasedTypes/moveFunctionNameClashErasedTypes.test")
    public void testKotlin_moveFunctionNameClashErasedTypes_MoveFunctionNameClashErasedTypes() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveFunctionNameClashErasedTypes/moveFunctionNameClashErasedTypes.test");
    }

    @TestMetadata("kotlin/moveFunctionNameClash/moveFunctionNameClash.test")
    public void testKotlin_moveFunctionNameClash_MoveFunctionNameClash() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveFunctionNameClash/moveFunctionNameClash.test");
    }

    @TestMetadata("kotlin/moveFunctionNoClashDifferentParameterCount/moveFunctionNoClashDifferentParameterCount.test")
    public void testKotlin_moveFunctionNoClashDifferentParameterCount_MoveFunctionNoClashDifferentParameterCount() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveFunctionNoClashDifferentParameterCount/moveFunctionNoClashDifferentParameterCount.test");
    }

    @TestMetadata("kotlin/moveFunctionNoNameClash/moveFunctionNoNameClash.test")
    public void testKotlin_moveFunctionNoNameClash_MoveFunctionNoNameClash() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveFunctionNoNameClash/moveFunctionNoNameClash.test");
    }

    @TestMetadata("kotlin/moveFunctionToFile/moveFunctionToFile.test")
    public void testKotlin_moveFunctionToFile_MoveFunctionToFile() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveFunctionToFile/moveFunctionToFile.test");
    }

    @TestMetadata("kotlin/moveFunctionToPackageUsedInJava/moveFunctionToPackageUsedInJava.test")
    public void testKotlin_moveFunctionToPackageUsedInJava_MoveFunctionToPackageUsedInJava() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveFunctionToPackageUsedInJava/moveFunctionToPackageUsedInJava.test");
    }

    @TestMetadata("kotlin/moveFunctionWithImportsRetained/moveFunctionWithImportsRetained.test")
    public void testKotlin_moveFunctionWithImportsRetained_MoveFunctionWithImportsRetained() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveFunctionWithImportsRetained/moveFunctionWithImportsRetained.test");
    }

    @TestMetadata("kotlin/moveMultipleWithComments/moveMultipleWithComments.test")
    public void testKotlin_moveMultipleWithComments_MoveMultipleWithComments() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveMultipleWithComments/moveMultipleWithComments.test");
    }

    @TestMetadata("kotlin/moveObjectToFile/moveObjectToFile.test")
    public void testKotlin_moveObjectToFile_MoveObjectToFile() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveObjectToFile/moveObjectToFile.test");
    }

    @TestMetadata("kotlin/moveObjectToPackage/moveObjectToPackage.test")
    public void testKotlin_moveObjectToPackage_MoveObjectToPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveObjectToPackage/moveObjectToPackage.test");
    }

    @TestMetadata("kotlin/moveOnlyFunctionToPackageUsedInJava/moveOnlyFunctionToPackageUsedInJava.test")
    public void testKotlin_moveOnlyFunctionToPackageUsedInJava_MoveOnlyFunctionToPackageUsedInJava() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveOnlyFunctionToPackageUsedInJava/moveOnlyFunctionToPackageUsedInJava.test");
    }

    @TestMetadata("kotlin/movePrivateClassWithUsagesInBothAccessors/movePrivateClassWithUsagesInBothAccessors.test")
    public void testKotlin_movePrivateClassWithUsagesInBothAccessors_MovePrivateClassWithUsagesInBothAccessors() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/movePrivateClassWithUsagesInBothAccessors/movePrivateClassWithUsagesInBothAccessors.test");
    }

    @TestMetadata("kotlin/movePrivateFun/movePrivateFun.test")
    public void testKotlin_movePrivateFun_MovePrivateFun() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/movePrivateFun/movePrivateFun.test");
    }

    @TestMetadata("kotlin/movePrivatePropertyWithDefaultAccessors/movePrivatePropertyWithDefaultAccessors.test")
    public void testKotlin_movePrivatePropertyWithDefaultAccessors_MovePrivatePropertyWithDefaultAccessors() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/movePrivatePropertyWithDefaultAccessors/movePrivatePropertyWithDefaultAccessors.test");
    }

    @TestMetadata("kotlin/movePrivateProperty/movePrivateProperty.test")
    public void testKotlin_movePrivateProperty_MovePrivateProperty() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/movePrivateProperty/movePrivateProperty.test");
    }

    @TestMetadata("kotlin/movePropertyToFile/movePropertyToFile.test")
    public void testKotlin_movePropertyToFile_MovePropertyToFile() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/movePropertyToFile/movePropertyToFile.test");
    }

    @TestMetadata("kotlin/movePropertyToPackage/movePropertyToPackage.test")
    public void testKotlin_movePropertyToPackage_MovePropertyToPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/movePropertyToPackage/movePropertyToPackage.test");
    }

    @TestMetadata("kotlin/moveReferenceToImportedJavaStatic/moveReferenceToImportedJavaStatic.test")
    public void testKotlin_moveReferenceToImportedJavaStatic_MoveReferenceToImportedJavaStatic() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveReferenceToImportedJavaStatic/moveReferenceToImportedJavaStatic.test");
    }

    @TestMetadata("kotlin/moveSealedClassInheritorToSamePackage/moveSealedClassInheritorToSamePackage.test")
    public void testKotlin_moveSealedClassInheritorToSamePackage_MoveSealedClassInheritorToSamePackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveSealedClassInheritorToSamePackage/moveSealedClassInheritorToSamePackage.test");
    }

    @TestMetadata("kotlin/moveSealedClassInheritor/moveSealedClassInheritor.test")
    public void testKotlin_moveSealedClassInheritor_MoveSealedClassInheritor() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveSealedClassInheritor/moveSealedClassInheritor.test");
    }

    @TestMetadata("kotlin/moveSealedClassToSamePackage/moveSealedClassToSamePackage.test")
    public void testKotlin_moveSealedClassToSamePackage_MoveSealedClassToSamePackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveSealedClassToSamePackage/moveSealedClassToSamePackage.test");
    }

    @TestMetadata("kotlin/moveSealedClassWithImplsToAnotherPackage/moveSealedClassWithImplsToAnotherPackage.test")
    public void testKotlin_moveSealedClassWithImplsToAnotherPackage_MoveSealedClassWithImplsToAnotherPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveSealedClassWithImplsToAnotherPackage/moveSealedClassWithImplsToAnotherPackage.test");
    }

    @TestMetadata("kotlin/moveSealedClassWithImplsToAnotherPackage/moveSealedClassWithNestedImplsToAnotherPackage.test")
    public void testKotlin_moveSealedClassWithImplsToAnotherPackage_MoveSealedClassWithNestedImplsToAnotherPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveSealedClassWithImplsToAnotherPackage/moveSealedClassWithNestedImplsToAnotherPackage.test");
    }

    @TestMetadata("kotlin/moveSealedClassWithNestedImplsToAnotherPackageConflict/moveSealedClassWithNestedImplsToAnotherPackageConflict.test")
    public void testKotlin_moveSealedClassWithNestedImplsToAnotherPackageConflict_MoveSealedClassWithNestedImplsToAnotherPackageConflict() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveSealedClassWithNestedImplsToAnotherPackageConflict/moveSealedClassWithNestedImplsToAnotherPackageConflict.test");
    }

    @TestMetadata("kotlin/moveSealedClassWithNestedImplsToAnotherPackage/moveSealedClassWithNestedImplsToAnotherPackage.test")
    public void testKotlin_moveSealedClassWithNestedImplsToAnotherPackage_MoveSealedClassWithNestedImplsToAnotherPackage() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveSealedClassWithNestedImplsToAnotherPackage/moveSealedClassWithNestedImplsToAnotherPackage.test");
    }

    @TestMetadata("kotlin/moveSealedClass/moveSealedClass.test")
    public void testKotlin_moveSealedClass_MoveSealedClass() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveSealedClass/moveSealedClass.test");
    }

    @TestMetadata("kotlin/moveTypealiasToFile/moveTypealiasToFile.test")
    public void testKotlin_moveTypealiasToFile_MoveTypealiasToFile() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/moveTypealiasToFile/moveTypealiasToFile.test");
    }

    @TestMetadata("kotlin/mutualDependency/mutualDependency.test")
    public void testKotlin_mutualDependency_MutualDependency() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/mutualDependency/mutualDependency.test");
    }

    @TestMetadata("kotlin/nonCodeUsagesWithJavaFacadeMethod/nonCodeUsagesWithJavaFacadeMethod.test")
    public void testKotlin_nonCodeUsagesWithJavaFacadeMethod_NonCodeUsagesWithJavaFacadeMethod() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/nonCodeUsagesWithJavaFacadeMethod/nonCodeUsagesWithJavaFacadeMethod.test");
    }

    @TestMetadata("kotlin/nonCodeUsagesWithQuotedName/nonCodeUsagesWithQuotedName.test")
    public void testKotlin_nonCodeUsagesWithQuotedName_NonCodeUsagesWithQuotedName() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/nonCodeUsagesWithQuotedName/nonCodeUsagesWithQuotedName.test");
    }

    @TestMetadata("kotlin/objectAlreadyInaccessible/objectAlreadyInaccessible.test")
    public void testKotlin_objectAlreadyInaccessible_ObjectAlreadyInaccessible() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/objectAlreadyInaccessible/objectAlreadyInaccessible.test");
    }

    @TestMetadata("kotlin/objectMemberImport/objectMemberImport.test")
    public void testKotlin_objectMemberImport_ObjectMemberImport() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/objectMemberImport/objectMemberImport.test");
    }

    @TestMetadata("kotlin/operationReference/operationReference.test")
    public void testKotlin_operationReference_OperationReference() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/operationReference/operationReference.test");
    }

    @TestMetadata("kotlin/propertyAlreadyInaccessible/propertyAlreadyInaccessible.test")
    public void testKotlin_propertyAlreadyInaccessible_PropertyAlreadyInaccessible() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/propertyAlreadyInaccessible/propertyAlreadyInaccessible.test");
    }

    @TestMetadata("kotlin/protectedConstructorRefInSuperListEntry/protectedConstructorRefInSuperListEntry.test")
    public void testKotlin_protectedConstructorRefInSuperListEntry_ProtectedConstructorRefInSuperListEntry() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/protectedConstructorRefInSuperListEntry/protectedConstructorRefInSuperListEntry.test");
    }

    @TestMetadata("kotlin/protectedJavaClassReference/protectedJavaClassReference.test")
    public void testKotlin_protectedJavaClassReference_ProtectedJavaClassReference() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/protectedJavaClassReference/protectedJavaClassReference.test");
    }

    @TestMetadata("kotlin/protectedMemberFromJavaSuperClass/protectedMemberFromJavaSuperClass.test")
    public void testKotlin_protectedMemberFromJavaSuperClass_ProtectedMemberFromJavaSuperClass() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/protectedMemberFromJavaSuperClass/protectedMemberFromJavaSuperClass.test");
    }

    @TestMetadata("kotlin/protectedMemberUsageWithSuper/protectedMemberUsageWithSuper.test")
    public void testKotlin_protectedMemberUsageWithSuper_ProtectedMemberUsageWithSuper() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/protectedMemberUsageWithSuper/protectedMemberUsageWithSuper.test");
    }

    @TestMetadata("kotlin/protectedMemberUsageWithThis/protectedMemberUsageWithThis.test")
    public void testKotlin_protectedMemberUsageWithThis_ProtectedMemberUsageWithThis() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/protectedMemberUsageWithThis/protectedMemberUsageWithThis.test");
    }

    @TestMetadata("kotlin/protectedMembersExternalJavaRefs/protectedMembersExternalJavaRefs.test")
    public void testKotlin_protectedMembersExternalJavaRefs_ProtectedMembersExternalJavaRefs() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/protectedMembersExternalJavaRefs/protectedMembersExternalJavaRefs.test");
    }

    @TestMetadata("kotlin/protectedMembersExternalRefs/protectedMembersExternalRefs.test")
    public void testKotlin_protectedMembersExternalRefs_ProtectedMembersExternalRefs() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/protectedMembersExternalRefs/protectedMembersExternalRefs.test");
    }

    @TestMetadata("kotlin/protectedMembersInternalRefs/protectedMembersInternalRefs.test")
    public void testKotlin_protectedMembersInternalRefs_ProtectedMembersInternalRefs() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/protectedMembersInternalRefs/protectedMembersInternalRefs.test");
    }

    @TestMetadata("kotlin/sealedClassWithAllSubclasses/sealedClassWithAllSubclasses.test")
    public void testKotlin_sealedClassWithAllSubclasses_SealedClassWithAllSubclasses() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/sealedClassWithAllSubclasses/sealedClassWithAllSubclasses.test");
    }

    @TestMetadata("kotlin/sealedClassWithSkippedSubclasses/sealedClassWithSkippedSubclasses.test")
    public void testKotlin_sealedClassWithSkippedSubclasses_SealedClassWithSkippedSubclasses() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/sealedClassWithSkippedSubclasses/sealedClassWithSkippedSubclasses.test");
    }

    @TestMetadata("kotlin/sealedSubclassWithSkippedRoot/sealedSubclassWithSkippedRoot.test")
    public void testKotlin_sealedSubclassWithSkippedRoot_SealedSubclassWithSkippedRoot() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/sealedSubclassWithSkippedRoot/sealedSubclassWithSkippedRoot.test");
    }

    @TestMetadata("kotlin/selfReferences/selfReferences.test")
    public void testKotlin_selfReferences_SelfReferences() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/selfReferences/selfReferences.test");
    }

    @TestMetadata("kotlin/shortenCompanionObject2/shortenCompanionObject2.test")
    public void testKotlin_shortenCompanionObject2_ShortenCompanionObject2() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/shortenCompanionObject2/shortenCompanionObject2.test");
    }

    @TestMetadata("kotlin/shortenStringTemplateEntry/shortenStringTemplateEntry.test")
    public void testKotlin_shortenStringTemplateEntry_ShortenStringTemplateEntry() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/shortenStringTemplateEntry/shortenStringTemplateEntry.test");
    }

    @TestMetadata("kotlin/singletonsAndStatics/singletonsAndStatics.test")
    public void testKotlin_singletonsAndStatics_SingletonsAndStatics() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/singletonsAndStatics/singletonsAndStatics.test");
    }

    @TestMetadata("kotlin/staticUsageFromSuperClass/staticUsageFromSuperClass.test")
    public void testKotlin_staticUsageFromSuperClass_StaticUsageFromSuperClass() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/staticUsageFromSuperClass/staticUsageFromSuperClass.test");
    }

    @TestMetadata("kotlin/superReferences/superReferences.test")
    public void testKotlin_superReferences_SuperReferences() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/superReferences/superReferences.test");
    }

    @TestMetadata("kotlin/syntheticMembers/syntheticMembers.test")
    public void testKotlin_syntheticMembers_SyntheticMembers() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/syntheticMembers/syntheticMembers.test");
    }

    @TestMetadata("kotlin/unaffectedQualifiedReferences/unaffectedQualifiedReferences.test")
    public void testKotlin_unaffectedQualifiedReferences_UnaffectedQualifiedReferences() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/unaffectedQualifiedReferences/unaffectedQualifiedReferences.test");
    }

    @TestMetadata("kotlin/unaryOperatorReference/unaryOperatorReference.test")
    public void testKotlin_unaryOperatorReference_UnaryOperatorReference() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/unaryOperatorReference/unaryOperatorReference.test");
    }

    @TestMetadata("kotlin/usageInJavaExtendsList/usageInJavaExtendsList.test")
    public void testKotlin_usageInJavaExtendsList_UsageInJavaExtendsList() throws Exception {
        runTest("../../idea/tests/testData/refactoring/moveTopLevel/kotlin/usageInJavaExtendsList/usageInJavaExtendsList.test");
    }
}
