// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.refactoring.introduce.introduceVariable;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("refactorings/kotlin.refactorings.tests.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../idea/tests/testData/refactoring/introduceVariable")
public abstract class K2IntroduceVariableTestGenerated extends AbstractK2IntroduceVariableTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/introduceVariable/collectionElement")
    public static class CollectionElement extends AbstractK2IntroduceVariableTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doIntroduceVariableTest, this, testDataFilePath);
        }

        @TestMetadata("errorType.kt")
        public void testErrorType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/collectionElement/errorType.kt");
        }

        @TestMetadata("flexibleType.kt")
        public void testFlexibleType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/collectionElement/flexibleType.kt");
        }

        @TestMetadata("flexibleType2.kt")
        public void testFlexibleType2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/collectionElement/flexibleType2.kt");
        }

        @TestMetadata("typeParameterType.kt")
        public void testTypeParameterType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/collectionElement/typeParameterType.kt");
        }

        @TestMetadata("typeParameterType2.kt")
        public void testTypeParameterType2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/collectionElement/typeParameterType2.kt");
        }

        @TestMetadata("typeParameterType3.kt")
        public void testTypeParameterType3() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/collectionElement/typeParameterType3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/introduceVariable/explicateTypeArguments")
    public static class ExplicateTypeArguments extends AbstractK2IntroduceVariableTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doIntroduceVariableTest, this, testDataFilePath);
        }

        @TestMetadata("DeeperNestedCall.kt")
        public void testDeeperNestedCall() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/explicateTypeArguments/DeeperNestedCall.kt");
        }

        @TestMetadata("NestedCall.kt")
        public void testNestedCall() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/explicateTypeArguments/NestedCall.kt");
        }

        @TestMetadata("Parenthesized.kt")
        public void testParenthesized() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/explicateTypeArguments/Parenthesized.kt");
        }

        @TestMetadata("Qualified.kt")
        public void testQualified() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/explicateTypeArguments/Qualified.kt");
        }

        @TestMetadata("Simple.kt")
        public void testSimple() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/explicateTypeArguments/Simple.kt");
        }

        @TestMetadata("UnmatchedOccurrences.kt")
        public void testUnmatchedOccurrences() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/explicateTypeArguments/UnmatchedOccurrences.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/introduceVariable/extractToScope")
    public static class ExtractToScope extends AbstractK2IntroduceVariableTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doIntroduceVariableTest, this, testDataFilePath);
        }

        @TestMetadata("implicitOuterThisInsideNestedLamba.kt")
        public void testImplicitOuterThisInsideNestedLamba() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/implicitOuterThisInsideNestedLamba.kt");
        }

        @TestMetadata("implicitThisInsideNestedLamba.kt")
        public void testImplicitThisInsideNestedLamba() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/implicitThisInsideNestedLamba.kt");
        }

        @TestMetadata("insideFunExpression.kt")
        public void testInsideFunExpression() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/insideFunExpression.kt");
        }

        @TestMetadata("insideFunExpressionWithBlock.kt")
        public void testInsideFunExpressionWithBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/insideFunExpressionWithBlock.kt");
        }

        @TestMetadata("insideLamba.kt")
        public void testInsideLamba() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/insideLamba.kt");
        }

        @TestMetadata("insideNestedFunExpression.kt")
        public void testInsideNestedFunExpression() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/insideNestedFunExpression.kt");
        }

        @TestMetadata("insideNestedFunExpressionInLambda.kt")
        public void testInsideNestedFunExpressionInLambda() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/insideNestedFunExpressionInLambda.kt");
        }

        @TestMetadata("insideNestedLamba.kt")
        public void testInsideNestedLamba() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/insideNestedLamba.kt");
        }

        @TestMetadata("insideNestedLambdaInFunExpression.kt")
        public void testInsideNestedLambdaInFunExpression() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/insideNestedLambdaInFunExpression.kt");
        }

        @TestMetadata("itInsideNestedLamba.kt")
        public void testItInsideNestedLamba() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/itInsideNestedLamba.kt");
        }

        @TestMetadata("outerItInsideNestedLamba.kt")
        public void testOuterItInsideNestedLamba() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/outerItInsideNestedLamba.kt");
        }

        @TestMetadata("parameterInsideNestedLamba.kt")
        public void testParameterInsideNestedLamba() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/parameterInsideNestedLamba.kt");
        }

        @TestMetadata("unresolvedInsideNestedLamba.kt")
        public void testUnresolvedInsideNestedLamba() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/unresolvedInsideNestedLamba.kt");
        }

        @TestMetadata("variableInsideNestedLambda.kt")
        public void testVariableInsideNestedLambda() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/extractToScope/variableInsideNestedLambda.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations")
    public static class MultiDeclarations extends AbstractK2IntroduceVariableTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doIntroduceVariableTest, this, testDataFilePath);
        }

        @TestMetadata("array.kt")
        public void testArray() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations/array.kt");
        }

        @TestMetadata("intArray.kt")
        public void testIntArray() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations/intArray.kt");
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations/list.kt");
        }

        @TestMetadata("notOperators.kt")
        public void testNotOperators() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations/notOperators.kt");
        }

        @TestMetadata("singleComponent.kt")
        public void testSingleComponent() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations/singleComponent.kt");
        }

        @TestMetadata("unresolvedComponent3.kt")
        public void testUnresolvedComponent3() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations/unresolvedComponent3.kt");
        }

        @TestMetadata("unusedExpr.kt")
        public void testUnusedExpr() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations/unusedExpr.kt");
        }

        @TestMetadata("usedExpr.kt")
        public void testUsedExpr() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations/usedExpr.kt");
        }

        @TestMetadata("userDataClass.kt")
        public void testUserDataClass() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multiDeclarations/userDataClass.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/introduceVariable/script")
    public static class Script extends AbstractK2IntroduceVariableTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doIntroduceVariableTest, this, testDataFilePath);
        }

        @TestMetadata("ExpressionPart.kts")
        public void testExpressionPart() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/script/ExpressionPart.kts");
        }

        @TestMetadata("NotExpression.kts")
        public void testNotExpression() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/script/NotExpression.kts");
        }

        @TestMetadata("TopLevelExpression.kts")
        public void testTopLevelExpression() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/script/TopLevelExpression.kts");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates")
    public static class StringTemplates extends AbstractK2IntroduceVariableTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doIntroduceVariableTest, this, testDataFilePath);
        }

        @TestMetadata("brokenEntryWithBlockExpr.kt")
        public void testBrokenEntryWithBlockExpr() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/brokenEntryWithBlockExpr.kt");
        }

        @TestMetadata("brokenEntryWithExpr.kt")
        public void testBrokenEntryWithExpr() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/brokenEntryWithExpr.kt");
        }

        @TestMetadata("brokenEscapeEntry.kt")
        public void testBrokenEscapeEntry() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/brokenEscapeEntry.kt");
        }

        @TestMetadata("duplicateOutsideTheBlock.kt")
        public void testDuplicateOutsideTheBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/duplicateOutsideTheBlock.kt");
        }

        @TestMetadata("extractFalse.kt")
        public void testExtractFalse() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/extractFalse.kt");
        }

        @TestMetadata("extractIntegerLiteral.kt")
        public void testExtractIntegerLiteral() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/extractIntegerLiteral.kt");
        }

        @TestMetadata("extractTrue.kt")
        public void testExtractTrue() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/extractTrue.kt");
        }

        @TestMetadata("extractTrueWithSpaces.kt")
        public void testExtractTrueWithSpaces() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/extractTrueWithSpaces.kt");
        }

        @TestMetadata("fullContent.kt")
        public void testFullContent() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/fullContent.kt");
        }

        @TestMetadata("fullEntryWithBlockExpr.kt")
        public void testFullEntryWithBlockExpr() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/fullEntryWithBlockExpr.kt");
        }

        @TestMetadata("fullEntryWithSimpleName.kt")
        public void testFullEntryWithSimpleName() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/fullEntryWithSimpleName.kt");
        }

        @TestMetadata("multipleEntriesWithPrefix.kt")
        public void testMultipleEntriesWithPrefix() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/multipleEntriesWithPrefix.kt");
        }

        @TestMetadata("multipleEntriesWithSubstring.kt")
        public void testMultipleEntriesWithSubstring() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/multipleEntriesWithSubstring.kt");
        }

        @TestMetadata("multipleEntriesWithSuffix.kt")
        public void testMultipleEntriesWithSuffix() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/multipleEntriesWithSuffix.kt");
        }

        @TestMetadata("newBlock.kt")
        public void testNewBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/newBlock.kt");
        }

        @TestMetadata("rawTemplateWithSubstring.kt")
        public void testRawTemplateWithSubstring() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/rawTemplateWithSubstring.kt");
        }

        @TestMetadata("singleEntryPrefix.kt")
        public void testSingleEntryPrefix() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/singleEntryPrefix.kt");
        }

        @TestMetadata("singleEntrySubstring.kt")
        public void testSingleEntrySubstring() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/singleEntrySubstring.kt");
        }

        @TestMetadata("singleEntrySuffix.kt")
        public void testSingleEntrySuffix() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/singleEntrySuffix.kt");
        }

        @TestMetadata("singleOccurence.kt")
        public void testSingleOccurence() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/stringTemplates/singleOccurence.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/introduceVariable")
    public static class Uncategorized extends AbstractK2IntroduceVariableTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doIntroduceVariableTest, this, testDataFilePath);
        }

        @TestMetadata("AnonymousType.kt")
        public void testAnonymousType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/AnonymousType.kt");
        }

        @TestMetadata("ArrayAccessExpr.kt")
        public void testArrayAccessExpr() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/ArrayAccessExpr.kt");
        }

        @TestMetadata("arrayAssignment.kt")
        public void testArrayAssignment() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/arrayAssignment.kt");
        }

        @TestMetadata("callUnderSmartCast.kt")
        public void testCallUnderSmartCast() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/callUnderSmartCast.kt");
        }

        @TestMetadata("capturedType.kt")
        public void testCapturedType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/capturedType.kt");
        }

        @TestMetadata("commentSkipping.kt")
        public void testCommentSkipping() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/commentSkipping.kt");
        }

        @TestMetadata("ComplexCallee.kt")
        public void testComplexCallee() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/ComplexCallee.kt");
        }

        @TestMetadata("ConstructorDelegationCall.kt")
        public void testConstructorDelegationCall() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/ConstructorDelegationCall.kt");
        }

        @TestMetadata("DelegatorByExpressionInDelegate.kt")
        public void testDelegatorByExpressionInDelegate() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/DelegatorByExpressionInDelegate.kt");
        }

        @TestMetadata("DelegatorByExpressionInType.kt")
        public void testDelegatorByExpressionInType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/DelegatorByExpressionInType.kt");
        }

        @TestMetadata("DelegatorToSuperCallInArgument.kt")
        public void testDelegatorToSuperCallInArgument() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/DelegatorToSuperCallInArgument.kt");
        }

        @TestMetadata("DelegatorToSuperCallInType.kt")
        public void testDelegatorToSuperCallInType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/DelegatorToSuperCallInType.kt");
        }

        @TestMetadata("DelegatorToSuperClass.kt")
        public void testDelegatorToSuperClass() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/DelegatorToSuperClass.kt");
        }

        @TestMetadata("DoWhileAddBlock.kt")
        public void testDoWhileAddBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/DoWhileAddBlock.kt");
        }

        @TestMetadata("DoWhileAddBlockInner.kt")
        public void testDoWhileAddBlockInner() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/DoWhileAddBlockInner.kt");
        }

        @TestMetadata("dynamicType.kt")
        public void testDynamicType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/dynamicType.kt");
        }

        @TestMetadata("expressionBodyErrorType.kt")
        public void testExpressionBodyErrorType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/expressionBodyErrorType.kt");
        }

        @TestMetadata("FewOccurrences.kt")
        public void testFewOccurrences() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/FewOccurrences.kt");
        }

        @TestMetadata("FromLambda.kt")
        public void testFromLambda() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/FromLambda.kt");
        }

        @TestMetadata("FunctionAddBlock.kt")
        public void testFunctionAddBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/FunctionAddBlock.kt");
        }

        @TestMetadata("FunctionAddBlockInner.kt")
        public void testFunctionAddBlockInner() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/FunctionAddBlockInner.kt");
        }

        @TestMetadata("FunctionLiteral.kt")
        public void testFunctionLiteral() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/FunctionLiteral.kt");
        }

        @TestMetadata("FunctionLiteralFromExpected.kt")
        public void testFunctionLiteralFromExpected() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/FunctionLiteralFromExpected.kt");
        }

        @TestMetadata("FunctionLiteralWithExtraArgs.kt")
        public void testFunctionLiteralWithExtraArgs() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/FunctionLiteralWithExtraArgs.kt");
        }

        @TestMetadata("IfCondition.kt")
        public void testIfCondition() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IfCondition.kt");
        }

        @TestMetadata("IfElseAddBlock.kt")
        public void testIfElseAddBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IfElseAddBlock.kt");
        }

        @TestMetadata("IfElseAddBlockInner.kt")
        public void testIfElseAddBlockInner() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IfElseAddBlockInner.kt");
        }

        @TestMetadata("IfThenAddBlock.kt")
        public void testIfThenAddBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IfThenAddBlock.kt");
        }

        @TestMetadata("IfThenAddBlockInner.kt")
        public void testIfThenAddBlockInner() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IfThenAddBlockInner.kt");
        }

        @TestMetadata("IfThenValuedAddBlock.kt")
        public void testIfThenValuedAddBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IfThenValuedAddBlock.kt");
        }

        @TestMetadata("InsideOfInitializerAnnotation.kt")
        public void testInsideOfInitializerAnnotation() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/InsideOfInitializerAnnotation.kt");
        }

        @TestMetadata("IntroduceAndCreateBlock.kt")
        public void testIntroduceAndCreateBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IntroduceAndCreateBlock.kt");
        }

        @TestMetadata("IntroduceDestructuringDeclarationAndCreateBlock.kt")
        public void testIntroduceDestructuringDeclarationAndCreateBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IntroduceDestructuringDeclarationAndCreateBlock.kt");
        }

        @TestMetadata("IntroduceLambdaAndCreateBlock.kt")
        public void testIntroduceLambdaAndCreateBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IntroduceLambdaAndCreateBlock.kt");
        }

        @TestMetadata("IntroduceLambdaAndCreateBlock2.kt")
        public void testIntroduceLambdaAndCreateBlock2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/IntroduceLambdaAndCreateBlock2.kt");
        }

        @TestMetadata("introduceToClass.kt")
        public void testIntroduceToClass() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/introduceToClass.kt");
        }

        @TestMetadata("introduceToFile.kt")
        public void testIntroduceToFile() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/introduceToFile.kt");
        }

        @TestMetadata("invalidInplaceName.kt")
        public void testInvalidInplaceName() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/invalidInplaceName.kt");
        }

        @TestMetadata("It.kt")
        public void testIt() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/It.kt");
        }

        @TestMetadata("javaInnerClassQualifier.kt")
        public void testJavaInnerClassQualifier() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/javaInnerClassQualifier.kt");
        }

        @TestMetadata("kt10808.kt")
        public void testKt10808() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/kt10808.kt");
        }

        @TestMetadata("kt21530_withConstructorParam.kt")
        public void testKt21530_withConstructorParam() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/kt21530_withConstructorParam.kt");
        }

        @TestMetadata("kt21530_withGlobal.kt")
        public void testKt21530_withGlobal() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/kt21530_withGlobal.kt");
        }

        @TestMetadata("kt21530_withParam.kt")
        public void testKt21530_withParam() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/kt21530_withParam.kt");
        }

        @TestMetadata("kt38449_int.kt")
        public void testKt38449_int() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/kt38449_int.kt");
        }

        @TestMetadata("kt38449_substring.kt")
        public void testKt38449_substring() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/kt38449_substring.kt");
        }

        @TestMetadata("kt38449_substrings.kt")
        public void testKt38449_substrings() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/kt38449_substrings.kt");
        }

        @TestMetadata("kt38449_unit.kt")
        public void testKt38449_unit() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/kt38449_unit.kt");
        }

        @TestMetadata("ktij817.kt")
        public void testKtij817() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/ktij817.kt");
        }

        @TestMetadata("LoopRange.kt")
        public void testLoopRange() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/LoopRange.kt");
        }

        @TestMetadata("ManyInnerOccurences.kt")
        public void testManyInnerOccurences() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/ManyInnerOccurences.kt");
        }

        @TestMetadata("ManyOccurrences.kt")
        public void testManyOccurrences() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/ManyOccurrences.kt");
        }

        @TestMetadata("ManyOccurrencesInSingleContainer.kt")
        public void testManyOccurrencesInSingleContainer() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/ManyOccurrencesInSingleContainer.kt");
        }

        @TestMetadata("multilineBinaryExpression.kt")
        public void testMultilineBinaryExpression() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multilineBinaryExpression.kt");
        }

        @TestMetadata("multilineBinaryExpressionWithComments.kt")
        public void testMultilineBinaryExpressionWithComments() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multilineBinaryExpressionWithComments.kt");
        }

        @TestMetadata("multilineNestedBinaryExpression1.kt")
        public void testMultilineNestedBinaryExpression1() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multilineNestedBinaryExpression1.kt");
        }

        @TestMetadata("multilineNestedBinaryExpression2.kt")
        public void testMultilineNestedBinaryExpression2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/multilineNestedBinaryExpression2.kt");
        }

        @TestMetadata("NameSuggestionBug1.kt")
        public void testNameSuggestionBug1() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/NameSuggestionBug1.kt");
        }

        @TestMetadata("NameSuggestionBug2.kt")
        public void testNameSuggestionBug2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/NameSuggestionBug2.kt");
        }

        @TestMetadata("NameSuggestionCheckVisibility.kt")
        public void testNameSuggestionCheckVisibility() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/NameSuggestionCheckVisibility.kt");
        }

        @TestMetadata("noConflictWithInnerVariableK1.kt")
        public void testNoConflictWithInnerVariableK1() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/noConflictWithInnerVariableK1.kt");
        }

        @TestMetadata("noConflictWithInnerVariableK2.kt")
        public void testNoConflictWithInnerVariableK2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/noConflictWithInnerVariableK2.kt");
        }

        @TestMetadata("NoExplicitReceivers.kt")
        public void testNoExplicitReceivers() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/NoExplicitReceivers.kt");
        }

        @TestMetadata("NoExplicitReceiversUnresolved.kt")
        public void testNoExplicitReceiversUnresolved() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/NoExplicitReceiversUnresolved.kt");
        }

        @TestMetadata("NoNewLinesInBetween.kt")
        public void testNoNewLinesInBetween() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/NoNewLinesInBetween.kt");
        }

        @TestMetadata("NoNewLinesInBetweenNoBraces.kt")
        public void testNoNewLinesInBetweenNoBraces() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/NoNewLinesInBetweenNoBraces.kt");
        }

        @TestMetadata("nonEquivalentReceivers.kt")
        public void testNonEquivalentReceivers() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/nonEquivalentReceivers.kt");
        }

        @TestMetadata("notNullAssertion.kt")
        public void testNotNullAssertion() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/notNullAssertion.kt");
        }

        @TestMetadata("OccurrencesInStringTemplate.kt")
        public void testOccurrencesInStringTemplate() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/OccurrencesInStringTemplate.kt");
        }

        @TestMetadata("onAssignmentLHS.kt")
        public void testOnAssignmentLHS() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/onAssignmentLHS.kt");
        }

        @TestMetadata("OneExplicitReceiver.kt")
        public void testOneExplicitReceiver() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/OneExplicitReceiver.kt");
        }

        @TestMetadata("PropertyAccessorAddBlock.kt")
        public void testPropertyAccessorAddBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/PropertyAccessorAddBlock.kt");
        }

        @TestMetadata("PropertyAccessorAddBlockInner.kt")
        public void testPropertyAccessorAddBlockInner() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/PropertyAccessorAddBlockInner.kt");
        }

        @TestMetadata("propertyBasedQualifier.kt")
        public void testPropertyBasedQualifier() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/propertyBasedQualifier.kt");
        }

        @TestMetadata("qualifier.kt")
        public void testQualifier() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/qualifier.kt");
        }

        @TestMetadata("ReplaceOccurence.kt")
        public void testReplaceOccurence() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/ReplaceOccurence.kt");
        }

        @TestMetadata("selectorAssignment.kt")
        public void testSelectorAssignment() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/selectorAssignment.kt");
        }

        @TestMetadata("Simple.kt")
        public void testSimple() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/Simple.kt");
        }

        @TestMetadata("SimpleCreateValue.kt")
        public void testSimpleCreateValue() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/SimpleCreateValue.kt");
        }

        @TestMetadata("skipClassReference.kt")
        public void testSkipClassReference() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/skipClassReference.kt");
        }

        @TestMetadata("skipUsageInAssignmentLHS.kt")
        public void testSkipUsageInAssignmentLHS() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/skipUsageInAssignmentLHS.kt");
        }

        @TestMetadata("StringInjection.kt")
        public void testStringInjection() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/StringInjection.kt");
        }

        @TestMetadata("SuperReference.kt")
        public void testSuperReference() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/SuperReference.kt");
        }

        @TestMetadata("thisAsCallee.kt")
        public void testThisAsCallee() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/thisAsCallee.kt");
        }

        @TestMetadata("ThisReference.kt")
        public void testThisReference() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/ThisReference.kt");
        }

        @TestMetadata("TwoExplicitReceivers.kt")
        public void testTwoExplicitReceivers() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/TwoExplicitReceivers.kt");
        }

        @TestMetadata("TypeElement.kt")
        public void testTypeElement() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/TypeElement.kt");
        }

        @TestMetadata("UnresolvedOccurrences.kt")
        public void testUnresolvedOccurrences() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/UnresolvedOccurrences.kt");
        }

        @TestMetadata("UsedAndUnusedExpressions1.kt")
        public void testUsedAndUnusedExpressions1() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/UsedAndUnusedExpressions1.kt");
        }

        @TestMetadata("UsedAndUnusedExpressions2.kt")
        public void testUsedAndUnusedExpressions2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/UsedAndUnusedExpressions2.kt");
        }

        @TestMetadata("WhenAddBlock.kt")
        public void testWhenAddBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/WhenAddBlock.kt");
        }

        @TestMetadata("WhenAddBlockInner.kt")
        public void testWhenAddBlockInner() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/WhenAddBlockInner.kt");
        }

        @TestMetadata("WhenEntryCondition.kt")
        public void testWhenEntryCondition() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/WhenEntryCondition.kt");
        }

        @TestMetadata("WhenParts.kt")
        public void testWhenParts() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/WhenParts.kt");
        }

        @TestMetadata("WhenValuedAddBlock.kt")
        public void testWhenValuedAddBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/WhenValuedAddBlock.kt");
        }

        @TestMetadata("WhileAddBlock.kt")
        public void testWhileAddBlock() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/WhileAddBlock.kt");
        }

        @TestMetadata("WhileAddBlockInner.kt")
        public void testWhileAddBlockInner() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/WhileAddBlockInner.kt");
        }

        @TestMetadata("WhileCondition.kt")
        public void testWhileCondition() throws Exception {
            runTest("../../idea/tests/testData/refactoring/introduceVariable/WhileCondition.kt");
        }
    }
}
