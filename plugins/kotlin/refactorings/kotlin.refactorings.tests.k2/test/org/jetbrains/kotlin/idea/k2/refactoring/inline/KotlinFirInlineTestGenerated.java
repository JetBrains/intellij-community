// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.refactoring.inline;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("refactorings/kotlin.refactorings.tests.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class KotlinFirInlineTestGenerated extends AbstractKotlinFirInlineTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty")
    public static class InlineVariableOrProperty extends AbstractKotlinFirInlineTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("AppendToCollection.kt")
        public void testAppendToCollection() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/AppendToCollection.kt");
        }

        @TestMetadata("Basic.kt")
        public void testBasic() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/Basic.kt");
        }

        @TestMetadata("BasicCaretOnDeclaration.kt")
        public void testBasicCaretOnDeclaration() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/BasicCaretOnDeclaration.kt");
        }

        @TestMetadata("CommentAfterProperty.kt")
        public void testCommentAfterProperty() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/CommentAfterProperty.kt");
        }

        @TestMetadata("CommentsInGetter.kt")
        public void testCommentsInGetter() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/CommentsInGetter.kt");
        }

        @TestMetadata("companionWithSuperType.kt")
        public void testCompanionWithSuperType() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/companionWithSuperType.kt");
        }

        @TestMetadata("ifInQualifiedExpression.kt")
        public void testIfInQualifiedExpression() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/ifInQualifiedExpression.kt");
        }

        @TestMetadata("InAnnotation.kt")
        public void testInAnnotation() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/InAnnotation.kt");
        }

        @TestMetadata("InFunctionLiteral.kt")
        public void testInFunctionLiteral() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/InFunctionLiteral.kt");
        }

        @TestMetadata("intMax.kt")
        public void testIntMax() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/intMax.kt");
        }

        @TestMetadata("lessAndGreaterInCallArgs.kt")
        public void testLessAndGreaterInCallArgs() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/lessAndGreaterInCallArgs.kt");
        }

        @TestMetadata("localVariableOnDeclaration.kt")
        public void testLocalVariableOnDeclaration() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/localVariableOnDeclaration.kt");
        }

        @TestMetadata("localVariableOnDeclaration2.kt")
        public void testLocalVariableOnDeclaration2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/localVariableOnDeclaration2.kt");
        }

        @TestMetadata("localVariableOnDeclarationWithPropertyKeep.kt")
        public void testLocalVariableOnDeclarationWithPropertyKeep() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/localVariableOnDeclarationWithPropertyKeep.kt");
        }

        @TestMetadata("localVariableOnDeclarationWithPropertyKeep2.kt")
        public void testLocalVariableOnDeclarationWithPropertyKeep2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/localVariableOnDeclarationWithPropertyKeep2.kt");
        }

        @TestMetadata("localVariableWithPropertyKeep.kt")
        public void testLocalVariableWithPropertyKeep() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/localVariableWithPropertyKeep.kt");
        }

        @TestMetadata("MethodReference.kt")
        public void testMethodReference() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/MethodReference.kt");
        }

        @TestMetadata("MultipleInitializers.kt")
        public void testMultipleInitializers() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/MultipleInitializers.kt");
        }

        @TestMetadata("MultipleUsages.kt")
        public void testMultipleUsages() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/MultipleUsages.kt");
        }

        @TestMetadata("noUsages.kt")
        public void testNoUsages() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/noUsages.kt");
        }

        @TestMetadata("Parameter.kt")
        public void testParameter() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/Parameter.kt");
        }

        @TestMetadata("PropertyReference.kt")
        public void testPropertyReference() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/PropertyReference.kt");
        }

        @TestMetadata("propertyReference2.kt")
        public void testPropertyReference2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/propertyReference2.kt");
        }

        @TestMetadata("semicolon.kt")
        public void testSemicolon() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/semicolon.kt");
        }

        @TestMetadata("semicolonWithSpacesAndComments.kt")
        public void testSemicolonWithSpacesAndComments() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/semicolonWithSpacesAndComments.kt");
        }

        @TestMetadata("SeparateInitializer.kt")
        public void testSeparateInitializer() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/SeparateInitializer.kt");
        }

        @TestMetadata("SeparateInitializerInTry.kt")
        public void testSeparateInitializerInTry() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/SeparateInitializerInTry.kt");
        }

        @TestMetadata("UsedInAssignment.kt")
        public void testUsedInAssignment() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/UsedInAssignment.kt");
        }

        @TestMetadata("ValWithoutInitializer.kt")
        public void testValWithoutInitializer() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/ValWithoutInitializer.kt");
        }

        @TestMetadata("varNoWrite.kt")
        public void testVarNoWrite() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/varNoWrite.kt");
        }

        @TestMetadata("varWithAssignment.kt")
        public void testVarWithAssignment() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/varWithAssignment.kt");
        }

        @TestMetadata("varWithInc.kt")
        public void testVarWithInc() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/varWithInc.kt");
        }

        @TestMetadata("whenSubject.kt")
        public void testWhenSubject() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/whenSubject.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis")
    public static class AddParenthesis extends AbstractKotlinFirInlineTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("ArrayAccess.kt")
        public void testArrayAccess() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/ArrayAccess.kt");
        }

        @TestMetadata("ArrayAccessDontAdd.kt")
        public void testArrayAccessDontAdd() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/ArrayAccessDontAdd.kt");
        }

        @TestMetadata("Binary.kt")
        public void testBinary() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/Binary.kt");
        }

        @TestMetadata("BinaryDontAdd.kt")
        public void testBinaryDontAdd() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/BinaryDontAdd.kt");
        }

        @TestMetadata("Call.kt")
        public void testCall() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/Call.kt");
        }

        @TestMetadata("CallCorrected.kt")
        public void testCallCorrected() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/CallCorrected.kt");
        }

        @TestMetadata("CallDontAdd.kt")
        public void testCallDontAdd() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/CallDontAdd.kt");
        }

        @TestMetadata("Callee.kt")
        public void testCallee() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/Callee.kt");
        }

        @TestMetadata("ColonDontAdd.kt")
        public void testColonDontAdd() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/ColonDontAdd.kt");
        }

        @TestMetadata("If.kt")
        public void testIf() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/If.kt");
        }

        @TestMetadata("IfIntoArrayAccess.kt")
        public void testIfIntoArrayAccess() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IfIntoArrayAccess.kt");
        }

        @TestMetadata("IfIntoArrayAccessBrackets.kt")
        public void testIfIntoArrayAccessBrackets() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IfIntoArrayAccessBrackets.kt");
        }

        @TestMetadata("IfIntoBinaryLeft.kt")
        public void testIfIntoBinaryLeft() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IfIntoBinaryLeft.kt");
        }

        @TestMetadata("IfIntoBinaryRight.kt")
        public void testIfIntoBinaryRight() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IfIntoBinaryRight.kt");
        }

        @TestMetadata("IfIntoBinaryRightLeft.kt")
        public void testIfIntoBinaryRightLeft() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IfIntoBinaryRightLeft.kt");
        }

        @TestMetadata("IfIntoBinaryRightLeftDontAdd.kt")
        public void testIfIntoBinaryRightLeftDontAdd() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IfIntoBinaryRightLeftDontAdd.kt");
        }

        @TestMetadata("IfIntoPostfix.kt")
        public void testIfIntoPostfix() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IfIntoPostfix.kt");
        }

        @TestMetadata("IfIntoPrefix.kt")
        public void testIfIntoPrefix() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IfIntoPrefix.kt");
        }

        @TestMetadata("IndexedCorrected.kt")
        public void testIndexedCorrected() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IndexedCorrected.kt");
        }

        @TestMetadata("IsDontAdd.kt")
        public void testIsDontAdd() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IsDontAdd.kt");
        }

        @TestMetadata("IsIntoCall.kt")
        public void testIsIntoCall() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/IsIntoCall.kt");
        }

        @TestMetadata("LeftAssociative.kt")
        public void testLeftAssociative() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/LeftAssociative.kt");
        }

        @TestMetadata("LeftAssociativeBoolean.kt")
        public void testLeftAssociativeBoolean() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/LeftAssociativeBoolean.kt");
        }

        @TestMetadata("LeftAssociativeDontAdd.kt")
        public void testLeftAssociativeDontAdd() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/LeftAssociativeDontAdd.kt");
        }

        @TestMetadata("PostfixIntoPrefix.kt")
        public void testPostfixIntoPrefix() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/PostfixIntoPrefix.kt");
        }

        @TestMetadata("PrefixIntoPostfix.kt")
        public void testPrefixIntoPostfix() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/PrefixIntoPostfix.kt");
        }

        @TestMetadata("Qualified.kt")
        public void testQualified() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/Qualified.kt");
        }

        @TestMetadata("QualifiedDontAdd.kt")
        public void testQualifiedDontAdd() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/QualifiedDontAdd.kt");
        }

        @TestMetadata("StringTemplate.kt")
        public void testStringTemplate() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/StringTemplate.kt");
        }

        @TestMetadata("StringTemplateAlreadyInBraces.kt")
        public void testStringTemplateAlreadyInBraces() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/StringTemplateAlreadyInBraces.kt");
        }

        @TestMetadata("StringTemplateDontAdd.kt")
        public void testStringTemplateDontAdd() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/StringTemplateDontAdd.kt");
        }

        @TestMetadata("UnaryIntoBinary.kt")
        public void testUnaryIntoBinary() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/addParenthesis/UnaryIntoBinary.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateParameterTypes")
    public static class ExplicateParameterTypes extends AbstractKotlinFirInlineTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("EnoughDontExplicate.kt")
        public void testEnoughDontExplicate() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateParameterTypes/EnoughDontExplicate.kt");
        }

        @TestMetadata("ErrorTypes.kt")
        public void testErrorTypes() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateParameterTypes/ErrorTypes.kt");
        }

        @TestMetadata("It.kt")
        public void testIt() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateParameterTypes/It.kt");
        }

        @TestMetadata("ItMultiLine.kt")
        public void testItMultiLine() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateParameterTypes/ItMultiLine.kt");
        }

        @TestMetadata("Parenthesized.kt")
        public void testParenthesized() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateParameterTypes/Parenthesized.kt");
        }

        @TestMetadata("Simplest.kt")
        public void testSimplest() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateParameterTypes/Simplest.kt");
        }

        @TestMetadata("TrivialDontExplicate.kt")
        public void testTrivialDontExplicate() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateParameterTypes/TrivialDontExplicate.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument")
    public static class ExplicateTypeArgument extends AbstractKotlinFirInlineTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("DeeperNestedCall.kt")
        public void testDeeperNestedCall() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/DeeperNestedCall.kt");
        }

        @TestMetadata("DeeperNestedCall2.kt")
        public void testDeeperNestedCall2() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/DeeperNestedCall2.kt");
        }

        @TestMetadata("EnoughDontExplicate.kt")
        public void testEnoughDontExplicate() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/EnoughDontExplicate.kt");
        }

        @TestMetadata("ExplicateForSome.kt")
        public void testExplicateForSome() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/ExplicateForSome.kt");
        }

        @TestMetadata("InStringTemplate.kt")
        public void testInStringTemplate() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/InStringTemplate.kt");
        }

        @TestMetadata("NestedCall.kt")
        public void testNestedCall() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/NestedCall.kt");
        }

        @TestMetadata("Parenthesized.kt")
        public void testParenthesized() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/Parenthesized.kt");
        }

        @TestMetadata("Qualified.kt")
        public void testQualified() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/Qualified.kt");
        }

        @TestMetadata("Simplest.kt")
        public void testSimplest() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/Simplest.kt");
        }

        @TestMetadata("TrivialDontExplicate.kt")
        public void testTrivialDontExplicate() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/explicateTypeArgument/TrivialDontExplicate.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property")
    public abstract static class Property extends AbstractKotlinFirInlineTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/accessors")
        public static class Accessors extends AbstractKotlinFirInlineTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("BlockBody.kt")
            public void testBlockBody() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/accessors/BlockBody.kt");
            }

            @TestMetadata("ExpressionBody.kt")
            public void testExpressionBody() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/accessors/ExpressionBody.kt");
            }

            @TestMetadata("ExtensionProperty.kt")
            public void testExtensionProperty() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/accessors/ExtensionProperty.kt");
            }

            @TestMetadata("GetterAndSetter.kt")
            public void testGetterAndSetter() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/accessors/GetterAndSetter.kt");
            }

            @TestMetadata("PlusPlus.kt")
            public void testPlusPlus() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/accessors/PlusPlus.kt");
            }

            @TestMetadata("WithInitializer.kt")
            public void testWithInitializer() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/accessors/WithInitializer.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property")
        public static class Uncategorized extends AbstractKotlinFirInlineTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstract.kt")
            public void testAbstract() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/abstract.kt");
            }

            @TestMetadata("abstract2.kt")
            public void testAbstract2() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/abstract2.kt");
            }

            @TestMetadata("Basic.kt")
            public void testBasic() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/Basic.kt");
            }

            @TestMetadata("callableReference.kt")
            public void testCallableReference() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/callableReference.kt");
            }

            @TestMetadata("ClassObjectProperty.kt")
            public void testClassObjectProperty() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/ClassObjectProperty.kt");
            }

            @TestMetadata("expect.kt")
            public void testExpect() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/expect.kt");
            }

            @TestMetadata("inheritance.kt")
            public void testInheritance() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/inheritance.kt");
            }

            @TestMetadata("InstanceProperty.kt")
            public void testInstanceProperty() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/InstanceProperty.kt");
            }

            @TestMetadata("KT17489.kt")
            public void testKT17489() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/KT17489.kt");
            }

            @TestMetadata("keepImport.kt")
            public void testKeepImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/keepImport.kt");
            }

            @TestMetadata("Library.kt")
            public void testLibrary() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/Library.kt");
            }

            @TestMetadata("methodReference.kt")
            public void testMethodReference() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/methodReference.kt");
            }

            @TestMetadata("methodReference2.kt")
            public void testMethodReference2() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/methodReference2.kt");
            }

            @TestMetadata("multiplePackages.kt")
            public void testMultiplePackages() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/multiplePackages.kt");
            }

            @TestMetadata("ObjectProperty.kt")
            public void testObjectProperty() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/ObjectProperty.kt");
            }

            @TestMetadata("PrivateSet.kt")
            public void testPrivateSet() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/PrivateSet.kt");
            }

            @TestMetadata("QualifiedUsage.kt")
            public void testQualifiedUsage() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/QualifiedUsage.kt");
            }

            @TestMetadata("removeImport.kt")
            public void testRemoveImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/removeImport.kt");
            }

            @TestMetadata("removeOverrideInChild.kt")
            public void testRemoveOverrideInChild() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/removeOverrideInChild.kt");
            }

            @TestMetadata("returnNull.kt")
            public void testReturnNull() throws Exception {
                runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/property/returnNull.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/stringTemplates")
    public static class StringTemplates extends AbstractKotlinFirInlineTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addBraces.kt")
        public void testAddBraces() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/stringTemplates/addBraces.kt");
        }

        @TestMetadata("addBracesToPrevEntry.kt")
        public void testAddBracesToPrevEntry() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/stringTemplates/addBracesToPrevEntry.kt");
        }

        @TestMetadata("blockEntry.kt")
        public void testBlockEntry() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/stringTemplates/blockEntry.kt");
        }

        @TestMetadata("empty.kt")
        public void testEmpty() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/stringTemplates/empty.kt");
        }

        @TestMetadata("nonEmpty.kt")
        public void testNonEmpty() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/stringTemplates/nonEmpty.kt");
        }

        @TestMetadata("nonRawToRaw.kt")
        public void testNonRawToRaw() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/stringTemplates/nonRawToRaw.kt");
        }

        @TestMetadata("rawString.kt")
        public void testRawString() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/stringTemplates/rawString.kt");
        }

        @TestMetadata("rawToNonRaw.kt")
        public void testRawToNonRaw() throws Exception {
            runTest("../../idea/tests/testData/refactoring/inline/inlineVariableOrProperty/stringTemplates/rawToNonRaw.kt");
        }
    }
}
