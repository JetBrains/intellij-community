// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.refactoring.bindToElement;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("refactorings/kotlin.refactorings.tests.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2BindToElementTestGenerated extends AbstractK2BindToElementTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn")
    public abstract static class BindToFqn extends AbstractK2BindToElementTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/annotationCall")
        public static class AnnotationCall extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/annotationCall/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/annotationCall/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/annotationCall/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/annotationReference")
        public static class AnnotationReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/annotationReference/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/annotationReference/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/annotationReference/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/callOnCompanionObject")
        public static class CallOnCompanionObject extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/callOnCompanionObject/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/callOnCompanionObject/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/callOnCompanionObject/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/callOnObject")
        public static class CallOnObject extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/callOnObject/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/callOnObject/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/callOnObject/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/constructorCall")
        public static class ConstructorCall extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ChangeImport.kt")
            public void testChangeImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/constructorCall/ChangeImport.kt");
            }

            @TestMetadata("ChangeImportToRootPkg.kt")
            public void testChangeImportToRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/constructorCall/ChangeImportToRootPkg.kt");
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/constructorCall/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/constructorCall/RootPkg.kt");
            }

            @TestMetadata("TypeArgument.kt")
            public void testTypeArgument() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/constructorCall/TypeArgument.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/constructorCall/UnQualified.kt");
            }

            @TestMetadata("UnQualifiedInCallChain.kt")
            public void testUnQualifiedInCallChain() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/constructorCall/UnQualifiedInCallChain.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/delegatedSuperTypeReference")
        public static class DelegatedSuperTypeReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/delegatedSuperTypeReference/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/delegatedSuperTypeReference/RootPkg.kt");
            }

            @TestMetadata("Unqualified.kt")
            public void testUnqualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/delegatedSuperTypeReference/Unqualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/importReference")
        public static class ImportReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ImportReference.kt")
            public void testImportReference() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/importReference/ImportReference.kt");
            }

            @TestMetadata("ImportReferenceWithAlias.kt")
            public void testImportReferenceWithAlias() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/importReference/ImportReferenceWithAlias.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/objectProperty")
        public static class ObjectProperty extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/objectProperty/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/objectProperty/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/objectProperty/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/packageVsDeclarationCollision")
        public static class PackageVsDeclarationCollision extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("PackageVsPropertyOnCallableReference.kt")
            public void testPackageVsPropertyOnCallableReference() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/packageVsDeclarationCollision/PackageVsPropertyOnCallableReference.kt");
            }

            @TestMetadata("PackageVsPropertyOnFunctionCall.kt")
            public void testPackageVsPropertyOnFunctionCall() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/packageVsDeclarationCollision/PackageVsPropertyOnFunctionCall.kt");
            }

            @TestMetadata("PackageVsPropertyOnNameReference.kt")
            public void testPackageVsPropertyOnNameReference() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/packageVsDeclarationCollision/PackageVsPropertyOnNameReference.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/propertyTypeReference")
        public static class PropertyTypeReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/propertyTypeReference/FullyQualified.kt");
            }

            @TestMetadata("FullyQualifiedWithLongerFqn.kt")
            public void testFullyQualifiedWithLongerFqn() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/propertyTypeReference/FullyQualifiedWithLongerFqn.kt");
            }

            @TestMetadata("FullyQualifiedWithShorterFqn.kt")
            public void testFullyQualifiedWithShorterFqn() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/propertyTypeReference/FullyQualifiedWithShorterFqn.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/propertyTypeReference/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/propertyTypeReference/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/returnTypeReference")
        public static class ReturnTypeReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/returnTypeReference/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/returnTypeReference/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/returnTypeReference/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/superTypeCall")
        public static class SuperTypeCall extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/superTypeCall/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/superTypeCall/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/superTypeCall/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/superTypeReference")
        public static class SuperTypeReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/superTypeReference/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/superTypeReference/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/superTypeReference/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/topLevelFunctionCall")
        public static class TopLevelFunctionCall extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("Qualified.kt")
            public void testQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/topLevelFunctionCall/Qualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/topLevelFunctionCall/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/topLevelFunctionCall/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/topLevelProperty")
        public static class TopLevelProperty extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ChangeImportToRootPkg.kt")
            public void testChangeImportToRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/topLevelProperty/ChangeImportToRootPkg.kt");
            }

            @TestMetadata("Qualified.kt")
            public void testQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/topLevelProperty/Qualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/topLevelProperty/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/topLevelProperty/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToFqn/typeArgs")
        public static class TypeArgs extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("AllTypeArguments.kt")
            public void testAllTypeArguments() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/typeArgs/AllTypeArguments.kt");
            }

            @TestMetadata("FirstLastTypeArguments.kt")
            public void testFirstLastTypeArguments() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/typeArgs/FirstLastTypeArguments.kt");
            }

            @TestMetadata("SingleRef.kt")
            public void testSingleRef() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToFqn/typeArgs/SingleRef.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/refactoring/bindToElement")
    public abstract static class BindToElement extends AbstractK2BindToElementTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/arrayAccessReference")
        public static class ArrayAccessReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ConflictingImport.kt")
            public void testConflictingImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/arrayAccessReference/ConflictingImport.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/callableMemberReference")
        public static class CallableMemberReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableMemberReference/FullyQualified.kt");
            }

            @TestMetadata("FullyQualifiedToTopLevel.kt")
            public void testFullyQualifiedToTopLevel() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableMemberReference/FullyQualifiedToTopLevel.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableMemberReference/RootPkg.kt");
            }

            @TestMetadata("RootPkgToTopLevel.kt")
            public void testRootPkgToTopLevel() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableMemberReference/RootPkgToTopLevel.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableMemberReference/UnQualified.kt");
            }

            @TestMetadata("UnQualifiedToTopLevel.kt")
            public void testUnQualifiedToTopLevel() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableMemberReference/UnQualifiedToTopLevel.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/callableTopLevelReference")
        public static class CallableTopLevelReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ConflictingImport.kt")
            public void testConflictingImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableTopLevelReference/ConflictingImport.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableTopLevelReference/RootPkg.kt");
            }

            @TestMetadata("RootPkgToMember.kt")
            public void testRootPkgToMember() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableTopLevelReference/RootPkgToMember.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableTopLevelReference/UnQualified.kt");
            }

            @TestMetadata("UnQualifiedToMember.kt")
            public void testUnQualifiedToMember() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/callableTopLevelReference/UnQualifiedToMember.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/docReference")
        public static class DocReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/docReference/FullyQualified.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/docReference/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/docReference/UnQualified.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/extensionFunctionCall")
        public static class ExtensionFunctionCall extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ChangeImport.kt")
            public void testChangeImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionFunctionCall/ChangeImport.kt");
            }

            @TestMetadata("ConflictingImport.kt")
            public void testConflictingImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionFunctionCall/ConflictingImport.kt");
            }

            @TestMetadata("ExtensionOverload.kt")
            public void testExtensionOverload() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionFunctionCall/ExtensionOverload.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionFunctionCall/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionFunctionCall/UnQualified.kt");
            }

            @TestMetadata("UnQualifiedToTopLevel.kt")
            public void testUnQualifiedToTopLevel() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionFunctionCall/UnQualifiedToTopLevel.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/extensionProperty")
        public static class ExtensionProperty extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ChangeImport.kt")
            public void testChangeImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionProperty/ChangeImport.kt");
            }

            @TestMetadata("ConflictingImport.kt")
            public void testConflictingImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionProperty/ConflictingImport.kt");
            }

            @TestMetadata("ExtensionOverload.kt")
            public void testExtensionOverload() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionProperty/ExtensionOverload.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionProperty/RootPkg.kt");
            }

            @TestMetadata("SafeAccess.kt")
            public void testSafeAccess() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionProperty/SafeAccess.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionProperty/UnQualified.kt");
            }

            @TestMetadata("UnQualifiedToTopLevel.kt")
            public void testUnQualifiedToTopLevel() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionProperty/UnQualifiedToTopLevel.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/extensionVariableAccessCall")
        public static class ExtensionVariableAccessCall extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ChangeImport.kt")
            public void testChangeImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionVariableAccessCall/ChangeImport.kt");
            }

            @TestMetadata("ConflictingImport.kt")
            public void testConflictingImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionVariableAccessCall/ConflictingImport.kt");
            }

            @TestMetadata("ExtensionOverload.kt")
            public void testExtensionOverload() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionVariableAccessCall/ExtensionOverload.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionVariableAccessCall/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionVariableAccessCall/UnQualified.kt");
            }

            @TestMetadata("UnQualifiedWithoutExplicitType.kt")
            public void testUnQualifiedWithoutExplicitType() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/extensionVariableAccessCall/UnQualifiedWithoutExplicitType.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/invokeReference")
        public static class InvokeReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ConflictingImport.kt")
            public void testConflictingImport() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/invokeReference/ConflictingImport.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/operationReference")
        public static class OperationReference extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("Operator.kt")
            public void testOperator() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/operationReference/Operator.kt");
            }

            @TestMetadata("OperatorOverride.kt")
            public void testOperatorOverride() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/operationReference/OperatorOverride.kt");
            }

            @TestMetadata("Override.kt")
            public void testOverride() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/operationReference/Override.kt");
            }

            @TestMetadata("RootPkg.kt")
            public void testRootPkg() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/operationReference/RootPkg.kt");
            }

            @TestMetadata("UnQualified.kt")
            public void testUnQualified() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/operationReference/UnQualified.kt");
            }

            @TestMetadata("UnaryOperator.kt")
            public void testUnaryOperator() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/operationReference/UnaryOperator.kt");
            }

            @TestMetadata("WithRegularCall.kt")
            public void testWithRegularCall() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/operationReference/WithRegularCall.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/refactoring/bindToElement/topLevelFunctionCall")
        public static class TopLevelFunctionCall extends AbstractK2BindToElementTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("UnQualifiedToExtensionFunction.kt")
            public void testUnQualifiedToExtensionFunction() throws Exception {
                runTest("../../idea/tests/testData/refactoring/bindToElement/topLevelFunctionCall/UnQualifiedToExtensionFunction.kt");
            }
        }
    }
}
