// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.refactoring.introduce;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("refactorings/kotlin.refactorings.tests.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../idea/tests/testData/refactoring/extractFunctionInplace")
public class K2InplaceIntroduceFunctionTestGenerated extends AbstractK2InplaceIntroduceFunctionTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K2;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("ConflictDefaultName.kt")
    public void testConflictDefaultName() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/ConflictDefaultName.kt");
    }

    @TestMetadata("ConflictNameNotAccepted.kt")
    public void testConflictNameNotAccepted() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/ConflictNameNotAccepted.kt");
    }

    @TestMetadata("ConsecutiveDuplicates.kt")
    public void testConsecutiveDuplicates() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/ConsecutiveDuplicates.kt");
    }

    @TestMetadata("DontSkipWhitespacesBefore.kt")
    public void testDontSkipWhitespacesBefore() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/DontSkipWhitespacesBefore.kt");
    }

    @TestMetadata("EmptySpaces.kt")
    public void testEmptySpaces() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/EmptySpaces.kt");
    }

    @TestMetadata("ExposedAssignment.kt")
    public void testExposedAssignment() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/ExposedAssignment.kt");
    }

    @TestMetadata("ExtractLocal.kt")
    public void testExtractLocal() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/ExtractLocal.kt");
    }

    @TestMetadata("ExtractLocalWithLambda.kt")
    public void testExtractLocalWithLambda() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/ExtractLocalWithLambda.kt");
    }

    @TestMetadata("ExtractNearCommentLocal.kt")
    public void testExtractNearCommentLocal() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/ExtractNearCommentLocal.kt");
    }

    @TestMetadata("MoveLambdaOutsideParenthesis.kt")
    public void testMoveLambdaOutsideParenthesis() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/MoveLambdaOutsideParenthesis.kt");
    }

    @TestMetadata("MoveLambdaOutsideParenthesis1.kt")
    public void testMoveLambdaOutsideParenthesis1() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/MoveLambdaOutsideParenthesis1.kt");
    }

    @TestMetadata("SearchForCallAfter.kt")
    public void testSearchForCallAfter() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/SearchForCallAfter.kt");
    }

    @TestMetadata("SkipCommentsBefore.kt")
    public void testSkipCommentsBefore() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/SkipCommentsBefore.kt");
    }

    @TestMetadata("StringTemplate.kt")
    public void testStringTemplate() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/StringTemplate.kt");
    }

    @TestMetadata("StringTemplateWithNameConflict.kt")
    public void testStringTemplateWithNameConflict() throws Exception {
        runTest("../../idea/tests/testData/refactoring/extractFunctionInplace/StringTemplateWithNameConflict.kt");
    }
}
