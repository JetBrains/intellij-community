// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.refactoring.rename;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("refactorings/rename.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../idea/tests/testData/refactoring/rename/inplace")
public class K2InplaceRenameTestGenerated extends AbstractK2InplaceRenameTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("AddQuotes.kt")
    public void testAddQuotes() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/AddQuotes.kt");
    }

    @TestMetadata("AddThis.kt")
    public void testAddThis() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/AddThis.kt");
    }

    @TestMetadata("BacktickedWithAccessors.kt")
    public void testBacktickedWithAccessors() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/BacktickedWithAccessors.kt");
    }

    @TestMetadata("EraseCompanionName.kt")
    public void testEraseCompanionName() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/EraseCompanionName.kt");
    }

    @TestMetadata("ExtensionAndNoReceiver.kt")
    public void testExtensionAndNoReceiver() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/ExtensionAndNoReceiver.kt");
    }

    @TestMetadata("ForLoop.kt")
    public void testForLoop() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/ForLoop.kt");
    }

    @TestMetadata("FunctionLiteral.kt")
    public void testFunctionLiteral() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/FunctionLiteral.kt");
    }

    @TestMetadata("FunctionLiteralIt.kt")
    public void testFunctionLiteralIt() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/FunctionLiteralIt.kt");
    }

    @TestMetadata("FunctionLiteralItEndCaret.kt")
    public void testFunctionLiteralItEndCaret() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/FunctionLiteralItEndCaret.kt");
    }

    @TestMetadata("FunctionLiteralParenthesis.kt")
    public void testFunctionLiteralParenthesis() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/FunctionLiteralParenthesis.kt");
    }

    @TestMetadata("FunctionParameterNotInplace.kt")
    public void testFunctionParameterNotInplace() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/FunctionParameterNotInplace.kt");
    }

    @TestMetadata("GetToFoo.kt")
    public void testGetToFoo() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/GetToFoo.kt");
    }

    @TestMetadata("GetToInvoke.kt")
    public void testGetToInvoke() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/GetToInvoke.kt");
    }

    @TestMetadata("GetToInvokeWithQualifiedExpr.kt")
    public void testGetToInvokeWithQualifiedExpr() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/GetToInvokeWithQualifiedExpr.kt");
    }

    @TestMetadata("GetToInvokeWithSafeQualifiedExpr.kt")
    public void testGetToInvokeWithSafeQualifiedExpr() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/GetToInvokeWithSafeQualifiedExpr.kt");
    }

    @TestMetadata("GetToPlus.kt")
    public void testGetToPlus() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/GetToPlus.kt");
    }

    @TestMetadata("GlobalFunctionNotInplace.kt")
    public void testGlobalFunctionNotInplace() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/GlobalFunctionNotInplace.kt");
    }

    @TestMetadata("InvokeToFoo.kt")
    public void testInvokeToFoo() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/InvokeToFoo.kt");
    }

    @TestMetadata("InvokeToGet.kt")
    public void testInvokeToGet() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/InvokeToGet.kt");
    }

    @TestMetadata("InvokeToGetWithQualifiedExpr.kt")
    public void testInvokeToGetWithQualifiedExpr() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/InvokeToGetWithQualifiedExpr.kt");
    }

    @TestMetadata("InvokeToGetWithSafeQualifiedExpr.kt")
    public void testInvokeToGetWithSafeQualifiedExpr() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/InvokeToGetWithSafeQualifiedExpr.kt");
    }

    @TestMetadata("InvokeToPlus.kt")
    public void testInvokeToPlus() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/InvokeToPlus.kt");
    }

    @TestMetadata("LabelFromFunction.kt")
    public void testLabelFromFunction() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/LabelFromFunction.kt");
    }

    @TestMetadata("LibraryFunction.kt")
    public void testLibraryFunction() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/LibraryFunction.kt");
    }

    @TestMetadata("LocalClassRedeclaration.kt")
    public void testLocalClassRedeclaration() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/LocalClassRedeclaration.kt");
    }

    @TestMetadata("LocalFunRedeclaration.kt")
    public void testLocalFunRedeclaration() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/LocalFunRedeclaration.kt");
    }

    @TestMetadata("LocalFunction.kt")
    public void testLocalFunction() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/LocalFunction.kt");
    }

    @TestMetadata("LocalVal.kt")
    public void testLocalVal() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/LocalVal.kt");
    }

    @TestMetadata("LocalVarRedeclaration.kt")
    public void testLocalVarRedeclaration() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/LocalVarRedeclaration.kt");
    }

    @TestMetadata("LocalVarShadowingMemberProperty.kt")
    public void testLocalVarShadowingMemberProperty() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/LocalVarShadowingMemberProperty.kt");
    }

    @TestMetadata("MultiDeclaration.kt")
    public void testMultiDeclaration() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/MultiDeclaration.kt");
    }

    @TestMetadata("NoReformat.kt")
    public void testNoReformat() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/NoReformat.kt");
    }

    @TestMetadata("NoTextUsagesForLocalVar.kt")
    public void testNoTextUsagesForLocalVar() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/NoTextUsagesForLocalVar.kt");
    }

    @TestMetadata("QuotedLocalVar.kt")
    public void testQuotedLocalVar() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/QuotedLocalVar.kt");
    }

    @TestMetadata("QuotedParameter.kt")
    public void testQuotedParameter() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/QuotedParameter.kt");
    }

    @TestMetadata("TopLevelValNotInplace.kt")
    public void testTopLevelValNotInplace() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/TopLevelValNotInplace.kt");
    }

    @TestMetadata("TryCatch.kt")
    public void testTryCatch() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/TryCatch.kt");
    }

    @TestMetadata("TwoExtensions.kt")
    public void testTwoExtensions() throws Exception {
        runTest("../../idea/tests/testData/refactoring/rename/inplace/TwoExtensions.kt");
    }
}
