// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.internal;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class BytecodeToolWindowMultiplatformTestGenerated extends AbstractBytecodeToolWindowMultiplatformTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/internal/toolWindowMultiplatform")
    public static class WithIRCommon extends AbstractBytecodeToolWindowMultiplatformTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTestWithIrCommon, this, testDataFilePath);
        }

        @TestMetadata("abstractClass")
        public void testAbstractClass() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/abstractClass/");
        }

        @TestMetadata("classWithConstructor")
        public void testClassWithConstructor() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/classWithConstructor/");
        }

        @TestMetadata("clazz")
        public void testClazz() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/clazz/");
        }

        @TestMetadata("funWithParam")
        public void testFunWithParam() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/funWithParam/");
        }

        @TestMetadata("function")
        public void testFunction() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/function/");
        }

        @TestMetadata("generic")
        public void testGeneric() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/generic/");
        }

        @TestMetadata("interfaceDeclaration")
        public void testInterfaceDeclaration() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/interfaceDeclaration/");
        }

        @TestMetadata("obj")
        public void testObj() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/obj/");
        }

        @TestMetadata("propertyVal")
        public void testPropertyVal() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/propertyVal/");
        }

        @TestMetadata("propertyVar")
        public void testPropertyVar() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/propertyVar/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/internal/toolWindowMultiplatform")
    public static class WithoutIRCommon extends AbstractBytecodeToolWindowMultiplatformTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTestWithoutIrCommon, this, testDataFilePath);
        }

        @TestMetadata("abstractClass")
        public void testAbstractClass() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/abstractClass/");
        }

        @TestMetadata("classWithConstructor")
        public void testClassWithConstructor() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/classWithConstructor/");
        }

        @TestMetadata("clazz")
        public void testClazz() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/clazz/");
        }

        @TestMetadata("funWithParam")
        public void testFunWithParam() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/funWithParam/");
        }

        @TestMetadata("function")
        public void testFunction() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/function/");
        }

        @TestMetadata("generic")
        public void testGeneric() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/generic/");
        }

        @TestMetadata("interfaceDeclaration")
        public void testInterfaceDeclaration() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/interfaceDeclaration/");
        }

        @TestMetadata("obj")
        public void testObj() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/obj/");
        }

        @TestMetadata("propertyVal")
        public void testPropertyVal() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/propertyVal/");
        }

        @TestMetadata("propertyVar")
        public void testPropertyVar() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/propertyVar/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/internal/toolWindowMultiplatform")
    public static class WithIRJvm extends AbstractBytecodeToolWindowMultiplatformTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTestWithIrJvm, this, testDataFilePath);
        }

        @TestMetadata("abstractClass")
        public void testAbstractClass() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/abstractClass/");
        }

        @TestMetadata("classWithConstructor")
        public void testClassWithConstructor() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/classWithConstructor/");
        }

        @TestMetadata("clazz")
        public void testClazz() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/clazz/");
        }

        @TestMetadata("funWithParam")
        public void testFunWithParam() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/funWithParam/");
        }

        @TestMetadata("function")
        public void testFunction() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/function/");
        }

        @TestMetadata("generic")
        public void testGeneric() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/generic/");
        }

        @TestMetadata("interfaceDeclaration")
        public void testInterfaceDeclaration() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/interfaceDeclaration/");
        }

        @TestMetadata("obj")
        public void testObj() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/obj/");
        }

        @TestMetadata("propertyVal")
        public void testPropertyVal() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/propertyVal/");
        }

        @TestMetadata("propertyVar")
        public void testPropertyVar() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/propertyVar/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/internal/toolWindowMultiplatform")
    public static class WithoutIRJvm extends AbstractBytecodeToolWindowMultiplatformTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTestWithoutIrJvm, this, testDataFilePath);
        }

        @TestMetadata("abstractClass")
        public void testAbstractClass() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/abstractClass/");
        }

        @TestMetadata("classWithConstructor")
        public void testClassWithConstructor() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/classWithConstructor/");
        }

        @TestMetadata("clazz")
        public void testClazz() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/clazz/");
        }

        @TestMetadata("funWithParam")
        public void testFunWithParam() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/funWithParam/");
        }

        @TestMetadata("function")
        public void testFunction() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/function/");
        }

        @TestMetadata("generic")
        public void testGeneric() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/generic/");
        }

        @TestMetadata("interfaceDeclaration")
        public void testInterfaceDeclaration() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/interfaceDeclaration/");
        }

        @TestMetadata("obj")
        public void testObj() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/obj/");
        }

        @TestMetadata("propertyVal")
        public void testPropertyVal() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/propertyVal/");
        }

        @TestMetadata("propertyVar")
        public void testPropertyVar() throws Exception {
            runTest("testData/internal/toolWindowMultiplatform/propertyVar/");
        }
    }
}
