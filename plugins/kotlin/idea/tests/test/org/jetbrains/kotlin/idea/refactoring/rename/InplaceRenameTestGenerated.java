// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.refactoring.rename;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/refactoring/rename/inplace")
public class InplaceRenameTestGenerated extends AbstractInplaceRenameTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K1;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("AddQuotes.kt")
    public void testAddQuotes() throws Exception {
        runTest("testData/refactoring/rename/inplace/AddQuotes.kt");
    }

    @TestMetadata("AddThis.kt")
    public void testAddThis() throws Exception {
        runTest("testData/refactoring/rename/inplace/AddThis.kt");
    }

    @TestMetadata("BacktickedWithAccessors.kt")
    public void testBacktickedWithAccessors() throws Exception {
        runTest("testData/refactoring/rename/inplace/BacktickedWithAccessors.kt");
    }

    @TestMetadata("conflicts/classes/ClassWithFunction.kt")
    public void testConflicts_classes_ClassWithFunction() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/classes/ClassWithFunction.kt");
    }

    @TestMetadata("conflicts/classes/ClassWithFunctionSameSignature.kt")
    public void testConflicts_classes_ClassWithFunctionSameSignature() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/classes/ClassWithFunctionSameSignature.kt");
    }

    @TestMetadata("conflicts/classes/ClassWithFunctionTypeParameters.kt")
    public void testConflicts_classes_ClassWithFunctionTypeParameters() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/classes/ClassWithFunctionTypeParameters.kt");
    }

    @TestMetadata("conflicts/classes/ClassWithProperty.kt")
    public void testConflicts_classes_ClassWithProperty() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/classes/ClassWithProperty.kt");
    }

    @TestMetadata("conflicts/classes/ClassWithSecondaryConstructorFunction.kt")
    public void testConflicts_classes_ClassWithSecondaryConstructorFunction() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/classes/ClassWithSecondaryConstructorFunction.kt");
    }

    @TestMetadata("conflicts/classes/FunctionWithClass.kt")
    public void testConflicts_classes_FunctionWithClass() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/classes/FunctionWithClass.kt");
    }

    @TestMetadata("conflicts/classes/FunctionWithClassSameSignature.kt")
    public void testConflicts_classes_FunctionWithClassSameSignature() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/classes/FunctionWithClassSameSignature.kt");
    }

    @TestMetadata("conflicts/classes/FunctionWithClassTypeParameters.kt")
    public void testConflicts_classes_FunctionWithClassTypeParameters() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/classes/FunctionWithClassTypeParameters.kt");
    }

    @TestMetadata("conflicts/functions/ConflictParameterLocalProperty.kt")
    public void testConflicts_functions_ConflictParameterLocalProperty() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/functions/ConflictParameterLocalProperty.kt");
    }

    @TestMetadata("conflicts/functions/DefaultParameter.kt")
    public void testConflicts_functions_DefaultParameter() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/functions/DefaultParameter.kt");
    }

    @TestMetadata("conflicts/functions/DefaultParameterInClass.kt")
    public void testConflicts_functions_DefaultParameterInClass() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/functions/DefaultParameterInClass.kt");
    }

    @TestMetadata("conflicts/functions/DifferentSignatures.kt")
    public void testConflicts_functions_DifferentSignatures() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/functions/DifferentSignatures.kt");
    }

    @TestMetadata("conflicts/functions/FunctionalParameter.kt")
    public void testConflicts_functions_FunctionalParameter() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/functions/FunctionalParameter.kt");
    }

    @TestMetadata("conflicts/functions/NoConflictParameterFunction.kt")
    public void testConflicts_functions_NoConflictParameterFunction() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/functions/NoConflictParameterFunction.kt");
    }

    @TestMetadata("conflicts/functions/NoConflictParameterProperty.kt")
    public void testConflicts_functions_NoConflictParameterProperty() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/functions/NoConflictParameterProperty.kt");
    }

    @TestMetadata("conflicts/functions/SameSignature.kt")
    public void testConflicts_functions_SameSignature() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/functions/SameSignature.kt");
    }

    @TestMetadata("conflicts/functions/SameSignatureDifferentLevels.kt")
    public void testConflicts_functions_SameSignatureDifferentLevels() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/functions/SameSignatureDifferentLevels.kt");
    }

    @TestMetadata("conflicts/typeParameters/HidingClassByTypeParameter.kt")
    public void testConflicts_typeParameters_HidingClassByTypeParameter() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/typeParameters/HidingClassByTypeParameter.kt");
    }

    @TestMetadata("conflicts/typeParameters/HidingClassByTypeParameter1.kt")
    public void testConflicts_typeParameters_HidingClassByTypeParameter1() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/typeParameters/HidingClassByTypeParameter1.kt");
    }

    @TestMetadata("conflicts/typeParameters/TypeParameterInCompanionDontHideOuter.kt")
    public void testConflicts_typeParameters_TypeParameterInCompanionDontHideOuter() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/typeParameters/TypeParameterInCompanionDontHideOuter.kt");
    }

    @TestMetadata("conflicts/typeParameters/TypeParameterInInnerHideOuter.kt")
    public void testConflicts_typeParameters_TypeParameterInInnerHideOuter() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/typeParameters/TypeParameterInInnerHideOuter.kt");
    }

    @TestMetadata("conflicts/typeParameters/TypeParameterInStaticDontHideOuter.kt")
    public void testConflicts_typeParameters_TypeParameterInStaticDontHideOuter() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/typeParameters/TypeParameterInStaticDontHideOuter.kt");
    }

    @TestMetadata("conflicts/typeParameters/TypeParameterVsLocalFunction.kt")
    public void testConflicts_typeParameters_TypeParameterVsLocalFunction() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/typeParameters/TypeParameterVsLocalFunction.kt");
    }

    @TestMetadata("conflicts/typeParameters/TypeParameterVsPropertyInCompanion.kt")
    public void testConflicts_typeParameters_TypeParameterVsPropertyInCompanion() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/typeParameters/TypeParameterVsPropertyInCompanion.kt");
    }

    @TestMetadata("conflicts/typeParameters/TypeParameterVsTypeAlias.kt")
    public void testConflicts_typeParameters_TypeParameterVsTypeAlias() throws Exception {
        runTest("testData/refactoring/rename/inplace/conflicts/typeParameters/TypeParameterVsTypeAlias.kt");
    }

    @TestMetadata("DisableInplaceRenameOnThis.kt")
    public void testDisableInplaceRenameOnThis() throws Exception {
        runTest("testData/refactoring/rename/inplace/DisableInplaceRenameOnThis.kt");
    }

    @TestMetadata("DisableInplaceRenameOnThisExtension.kt")
    public void testDisableInplaceRenameOnThisExtension() throws Exception {
        runTest("testData/refactoring/rename/inplace/DisableInplaceRenameOnThisExtension.kt");
    }

    @TestMetadata("DisableInplaceRenameOnThisWithLabel.kt")
    public void testDisableInplaceRenameOnThisWithLabel() throws Exception {
        runTest("testData/refactoring/rename/inplace/DisableInplaceRenameOnThisWithLabel.kt");
    }

    @TestMetadata("EnumEntries.kt")
    public void testEnumEntries() throws Exception {
        runTest("testData/refactoring/rename/inplace/EnumEntries.kt");
    }

    @TestMetadata("EnumEntryAndProperty.kt")
    public void testEnumEntryAndProperty() throws Exception {
        runTest("testData/refactoring/rename/inplace/EnumEntryAndProperty.kt");
    }

    @TestMetadata("EraseCompanionName.kt")
    public void testEraseCompanionName() throws Exception {
        runTest("testData/refactoring/rename/inplace/EraseCompanionName.kt");
    }

    @TestMetadata("expressionsInRange.kt")
    public void testExpressionsInRange() throws Exception {
        runTest("testData/refactoring/rename/inplace/expressionsInRange.kt");
    }

    @TestMetadata("ExtensionAndNoReceiver.kt")
    public void testExtensionAndNoReceiver() throws Exception {
        runTest("testData/refactoring/rename/inplace/ExtensionAndNoReceiver.kt");
    }

    @TestMetadata("ForLoop.kt")
    public void testForLoop() throws Exception {
        runTest("testData/refactoring/rename/inplace/ForLoop.kt");
    }

    @TestMetadata("FunctionLiteral.kt")
    public void testFunctionLiteral() throws Exception {
        runTest("testData/refactoring/rename/inplace/FunctionLiteral.kt");
    }

    @TestMetadata("FunctionLiteralIt.kt")
    public void testFunctionLiteralIt() throws Exception {
        runTest("testData/refactoring/rename/inplace/FunctionLiteralIt.kt");
    }

    @TestMetadata("FunctionLiteralItEndCaret.kt")
    public void testFunctionLiteralItEndCaret() throws Exception {
        runTest("testData/refactoring/rename/inplace/FunctionLiteralItEndCaret.kt");
    }

    @TestMetadata("FunctionLiteralParenthesis.kt")
    public void testFunctionLiteralParenthesis() throws Exception {
        runTest("testData/refactoring/rename/inplace/FunctionLiteralParenthesis.kt");
    }

    @TestMetadata("FunctionParameterNotInplace.kt")
    public void testFunctionParameterNotInplace() throws Exception {
        runTest("testData/refactoring/rename/inplace/FunctionParameterNotInplace.kt");
    }

    @TestMetadata("GetToFoo.kt")
    public void testGetToFoo() throws Exception {
        runTest("testData/refactoring/rename/inplace/GetToFoo.kt");
    }

    @TestMetadata("GetToInvoke.kt")
    public void testGetToInvoke() throws Exception {
        runTest("testData/refactoring/rename/inplace/GetToInvoke.kt");
    }

    @TestMetadata("GetToInvokeWithQualifiedExpr.kt")
    public void testGetToInvokeWithQualifiedExpr() throws Exception {
        runTest("testData/refactoring/rename/inplace/GetToInvokeWithQualifiedExpr.kt");
    }

    @TestMetadata("GetToInvokeWithSafeQualifiedExpr.kt")
    public void testGetToInvokeWithSafeQualifiedExpr() throws Exception {
        runTest("testData/refactoring/rename/inplace/GetToInvokeWithSafeQualifiedExpr.kt");
    }

    @TestMetadata("GetToPlus.kt")
    public void testGetToPlus() throws Exception {
        runTest("testData/refactoring/rename/inplace/GetToPlus.kt");
    }

    @TestMetadata("GlobalFunctionNotInplace.kt")
    public void testGlobalFunctionNotInplace() throws Exception {
        runTest("testData/refactoring/rename/inplace/GlobalFunctionNotInplace.kt");
    }

    @TestMetadata("HidingClassByInner.kt")
    public void testHidingClassByInner() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingClassByInner.kt");
    }

    @TestMetadata("HidingClassByInnerInCompanionObject.kt")
    public void testHidingClassByInnerInCompanionObject() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingClassByInnerInCompanionObject.kt");
    }

    @TestMetadata("HidingClassFromCompanionObject.kt")
    public void testHidingClassFromCompanionObject() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingClassFromCompanionObject.kt");
    }

    @TestMetadata("HidingClassFromReceiver.kt")
    public void testHidingClassFromReceiver() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingClassFromReceiver.kt");
    }

    @TestMetadata("HidingClassFromReceiver1.kt")
    public void testHidingClassFromReceiver1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingClassFromReceiver1.kt");
    }

    @TestMetadata("HidingClassFromSuper.kt")
    public void testHidingClassFromSuper() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingClassFromSuper.kt");
    }

    @TestMetadata("HidingCompanionMethod.kt")
    public void testHidingCompanionMethod() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingCompanionMethod.kt");
    }

    @TestMetadata("HidingCompanionMethod1.kt")
    public void testHidingCompanionMethod1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingCompanionMethod1.kt");
    }

    @TestMetadata("HidingCompanionProperty.kt")
    public void testHidingCompanionProperty() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingCompanionProperty.kt");
    }

    @TestMetadata("HidingCompanionProperty1.kt")
    public void testHidingCompanionProperty1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingCompanionProperty1.kt");
    }

    @TestMetadata("HidingCompanionProperty2.kt")
    public void testHidingCompanionProperty2() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingCompanionProperty2.kt");
    }

    @TestMetadata("HidingCompanionProperty3.kt")
    public void testHidingCompanionProperty3() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingCompanionProperty3.kt");
    }

    @TestMetadata("HidingCompanionPropertyByEnumEntry.kt")
    public void testHidingCompanionPropertyByEnumEntry() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingCompanionPropertyByEnumEntry.kt");
    }

    @TestMetadata("HidingCompanionPropertyByEnumEntry1.kt")
    public void testHidingCompanionPropertyByEnumEntry1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingCompanionPropertyByEnumEntry1.kt");
    }

    @TestMetadata("HidingEnumEntryByClass.kt")
    public void testHidingEnumEntryByClass() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingEnumEntryByClass.kt");
    }

    @TestMetadata("HidingEnumEntryByClass1.kt")
    public void testHidingEnumEntryByClass1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingEnumEntryByClass1.kt");
    }

    @TestMetadata("HidingExternalCallable.kt")
    public void testHidingExternalCallable() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingExternalCallable.kt");
    }

    @TestMetadata("HidingExternalClass.kt")
    public void testHidingExternalClass() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingExternalClass.kt");
    }

    @TestMetadata("HidingFunctionFromReceiver.kt")
    public void testHidingFunctionFromReceiver() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingFunctionFromReceiver.kt");
    }

    @TestMetadata("HidingFunctionFromReceiver1.kt")
    public void testHidingFunctionFromReceiver1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingFunctionFromReceiver1.kt");
    }

    @TestMetadata("HidingLocalByParameter.kt")
    public void testHidingLocalByParameter() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingLocalByParameter.kt");
    }

    @TestMetadata("HidingLocalClass.kt")
    public void testHidingLocalClass() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingLocalClass.kt");
    }

    @TestMetadata("HidingLocalClass1.kt")
    public void testHidingLocalClass1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingLocalClass1.kt");
    }

    @TestMetadata("HidingLocalClass2.kt")
    public void testHidingLocalClass2() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingLocalClass2.kt");
    }

    @TestMetadata("HidingLocalClass3.kt")
    public void testHidingLocalClass3() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingLocalClass3.kt");
    }

    @TestMetadata("HidingMethodByTopLevel.kt")
    public void testHidingMethodByTopLevel() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingMethodByTopLevel.kt");
    }

    @TestMetadata("HidingMethodByTopLevel1.kt")
    public void testHidingMethodByTopLevel1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingMethodByTopLevel1.kt");
    }

    @TestMetadata("HidingNamedCompanionPropertyByEnumEntry.kt")
    public void testHidingNamedCompanionPropertyByEnumEntry() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingNamedCompanionPropertyByEnumEntry.kt");
    }

    @TestMetadata("HidingNestedMethod.kt")
    public void testHidingNestedMethod() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingNestedMethod.kt");
    }

    @TestMetadata("HidingNestedProperty.kt")
    public void testHidingNestedProperty() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingNestedProperty.kt");
    }

    @TestMetadata("HidingOuterClass.kt")
    public void testHidingOuterClass() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingOuterClass.kt");
    }

    @TestMetadata("HidingOuterMethod.kt")
    public void testHidingOuterMethod() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingOuterMethod.kt");
    }

    @TestMetadata("HidingOuterProperty.kt")
    public void testHidingOuterProperty() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingOuterProperty.kt");
    }

    @TestMetadata("HidingOuterPropertyInSuper.kt")
    public void testHidingOuterPropertyInSuper() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingOuterPropertyInSuper.kt");
    }

    @TestMetadata("HidingParameterByLocal.kt")
    public void testHidingParameterByLocal() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingParameterByLocal.kt");
    }

    @TestMetadata("HidingPropertyByLocal.kt")
    public void testHidingPropertyByLocal() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingPropertyByLocal.kt");
    }

    @TestMetadata("HidingPropertyBySetterParameter.kt")
    public void testHidingPropertyBySetterParameter() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingPropertyBySetterParameter.kt");
    }

    @TestMetadata("HidingPropertyByTopLevel.kt")
    public void testHidingPropertyByTopLevel() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingPropertyByTopLevel.kt");
    }

    @TestMetadata("HidingPropertyByTopLevel1.kt")
    public void testHidingPropertyByTopLevel1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingPropertyByTopLevel1.kt");
    }

    @TestMetadata("HidingPropertyFromReceiver.kt")
    public void testHidingPropertyFromReceiver() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingPropertyFromReceiver.kt");
    }

    @TestMetadata("HidingPropertyFromReceiver1.kt")
    public void testHidingPropertyFromReceiver1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingPropertyFromReceiver1.kt");
    }

    @TestMetadata("HidingTopLevelClass.kt")
    public void testHidingTopLevelClass() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingTopLevelClass.kt");
    }

    @TestMetadata("HidingTopLevelClassByInner.kt")
    public void testHidingTopLevelClassByInner() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingTopLevelClassByInner.kt");
    }

    @TestMetadata("HidingTypeParameterByContainingClassTypeParameter.kt")
    public void testHidingTypeParameterByContainingClassTypeParameter() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingTypeParameterByContainingClassTypeParameter.kt");
    }

    @TestMetadata("HidingTypeParameterByContainingClassTypeParameter1.kt")
    public void testHidingTypeParameterByContainingClassTypeParameter1() throws Exception {
        runTest("testData/refactoring/rename/inplace/HidingTypeParameterByContainingClassTypeParameter1.kt");
    }

    @TestMetadata("InvokeToFoo.kt")
    public void testInvokeToFoo() throws Exception {
        runTest("testData/refactoring/rename/inplace/InvokeToFoo.kt");
    }

    @TestMetadata("InvokeToGet.kt")
    public void testInvokeToGet() throws Exception {
        runTest("testData/refactoring/rename/inplace/InvokeToGet.kt");
    }

    @TestMetadata("InvokeToGetWithQualifiedExpr.kt")
    public void testInvokeToGetWithQualifiedExpr() throws Exception {
        runTest("testData/refactoring/rename/inplace/InvokeToGetWithQualifiedExpr.kt");
    }

    @TestMetadata("InvokeToGetWithSafeQualifiedExpr.kt")
    public void testInvokeToGetWithSafeQualifiedExpr() throws Exception {
        runTest("testData/refactoring/rename/inplace/InvokeToGetWithSafeQualifiedExpr.kt");
    }

    @TestMetadata("InvokeToPlus.kt")
    public void testInvokeToPlus() throws Exception {
        runTest("testData/refactoring/rename/inplace/InvokeToPlus.kt");
    }

    @TestMetadata("JavaInheritor.kt")
    public void testJavaInheritor() throws Exception {
        runTest("testData/refactoring/rename/inplace/JavaInheritor.kt");
    }

    @TestMetadata("LabelFromFunction.kt")
    public void testLabelFromFunction() throws Exception {
        runTest("testData/refactoring/rename/inplace/LabelFromFunction.kt");
    }

    @TestMetadata("LibraryFunction.kt")
    public void testLibraryFunction() throws Exception {
        runTest("testData/refactoring/rename/inplace/LibraryFunction.kt");
    }

    @TestMetadata("LocalClassRedeclaration.kt")
    public void testLocalClassRedeclaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/LocalClassRedeclaration.kt");
    }

    @TestMetadata("LocalFunRedeclaration.kt")
    public void testLocalFunRedeclaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/LocalFunRedeclaration.kt");
    }

    @TestMetadata("LocalFunction.kt")
    public void testLocalFunction() throws Exception {
        runTest("testData/refactoring/rename/inplace/LocalFunction.kt");
    }

    @TestMetadata("LocalVal.kt")
    public void testLocalVal() throws Exception {
        runTest("testData/refactoring/rename/inplace/LocalVal.kt");
    }

    @TestMetadata("LocalVarRedeclaration.kt")
    public void testLocalVarRedeclaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/LocalVarRedeclaration.kt");
    }

    @TestMetadata("LocalVarShadowingMemberProperty.kt")
    public void testLocalVarShadowingMemberProperty() throws Exception {
        runTest("testData/refactoring/rename/inplace/LocalVarShadowingMemberProperty.kt");
    }

    @TestMetadata("MemberFunctionInChildRedeclaration.kt")
    public void testMemberFunctionInChildRedeclaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/MemberFunctionInChildRedeclaration.kt");
    }

    @TestMetadata("MemberFunctionRedeclaration.kt")
    public void testMemberFunctionRedeclaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/MemberFunctionRedeclaration.kt");
    }

    @TestMetadata("MemberPropertyInChildRedeclaration.kt")
    public void testMemberPropertyInChildRedeclaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/MemberPropertyInChildRedeclaration.kt");
    }

    @TestMetadata("MemberPropertyInChildRedeclaration1.kt")
    public void testMemberPropertyInChildRedeclaration1() throws Exception {
        runTest("testData/refactoring/rename/inplace/MemberPropertyInChildRedeclaration1.kt");
    }

    @TestMetadata("MemberPropertyInChildRedeclaration2.kt")
    public void testMemberPropertyInChildRedeclaration2() throws Exception {
        runTest("testData/refactoring/rename/inplace/MemberPropertyInChildRedeclaration2.kt");
    }

    @TestMetadata("MemberPropertyInConstructor.kt")
    public void testMemberPropertyInConstructor() throws Exception {
        runTest("testData/refactoring/rename/inplace/MemberPropertyInConstructor.kt");
    }

    @TestMetadata("MemberPropertyInConstructorRedeclaration.kt")
    public void testMemberPropertyInConstructorRedeclaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/MemberPropertyInConstructorRedeclaration.kt");
    }

    @TestMetadata("MemberPropertyInConstructorRedeclaration1.kt")
    public void testMemberPropertyInConstructorRedeclaration1() throws Exception {
        runTest("testData/refactoring/rename/inplace/MemberPropertyInConstructorRedeclaration1.kt");
    }

    @TestMetadata("MultiDeclaration.kt")
    public void testMultiDeclaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/MultiDeclaration.kt");
    }

    @TestMetadata("NamedArguments.kt")
    public void testNamedArguments() throws Exception {
        runTest("testData/refactoring/rename/inplace/NamedArguments.kt");
    }

    @TestMetadata("NoReformat.kt")
    public void testNoReformat() throws Exception {
        runTest("testData/refactoring/rename/inplace/NoReformat.kt");
    }

    @TestMetadata("NoTextUsagesForLocalVar.kt")
    public void testNoTextUsagesForLocalVar() throws Exception {
        runTest("testData/refactoring/rename/inplace/NoTextUsagesForLocalVar.kt");
    }

    @TestMetadata("OuterPrivatePropertyInSuper.kt")
    public void testOuterPrivatePropertyInSuper() throws Exception {
        runTest("testData/refactoring/rename/inplace/OuterPrivatePropertyInSuper.kt");
    }

    @TestMetadata("OuterPropertyInSuper1.kt")
    public void testOuterPropertyInSuper1() throws Exception {
        runTest("testData/refactoring/rename/inplace/OuterPropertyInSuper1.kt");
    }

    @TestMetadata("ParameterConflicitingWithProperty.kt")
    public void testParameterConflicitingWithProperty() throws Exception {
        runTest("testData/refactoring/rename/inplace/ParameterConflicitingWithProperty.kt");
    }

    @TestMetadata("ParameterRedecklaration.kt")
    public void testParameterRedecklaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/ParameterRedecklaration.kt");
    }

    @TestMetadata("PropertyFunctionConflict.kt")
    public void testPropertyFunctionConflict() throws Exception {
        runTest("testData/refactoring/rename/inplace/PropertyFunctionConflict.kt");
    }

    @TestMetadata("PropertyFunctionConflict1.kt")
    public void testPropertyFunctionConflict1() throws Exception {
        runTest("testData/refactoring/rename/inplace/PropertyFunctionConflict1.kt");
    }

    @TestMetadata("PropertyFunctionNoConflict.kt")
    public void testPropertyFunctionNoConflict() throws Exception {
        runTest("testData/refactoring/rename/inplace/PropertyFunctionNoConflict.kt");
    }

    @TestMetadata("PropertyFunctionNoConflict1.kt")
    public void testPropertyFunctionNoConflict1() throws Exception {
        runTest("testData/refactoring/rename/inplace/PropertyFunctionNoConflict1.kt");
    }

    @TestMetadata("PropertyFunctionNoConflict2.kt")
    public void testPropertyFunctionNoConflict2() throws Exception {
        runTest("testData/refactoring/rename/inplace/PropertyFunctionNoConflict2.kt");
    }

    @TestMetadata("PropertyFunctionNoConflictDifferentReceivers.kt")
    public void testPropertyFunctionNoConflictDifferentReceivers() throws Exception {
        runTest("testData/refactoring/rename/inplace/PropertyFunctionNoConflictDifferentReceivers.kt");
    }

    @TestMetadata("PropertyFunctionNoConflictDifferentReceivers1.kt")
    public void testPropertyFunctionNoConflictDifferentReceivers1() throws Exception {
        runTest("testData/refactoring/rename/inplace/PropertyFunctionNoConflictDifferentReceivers1.kt");
    }

    @TestMetadata("QuotedLocalVar.kt")
    public void testQuotedLocalVar() throws Exception {
        runTest("testData/refactoring/rename/inplace/QuotedLocalVar.kt");
    }

    @TestMetadata("QuotedOuterNames.kt")
    public void testQuotedOuterNames() throws Exception {
        runTest("testData/refactoring/rename/inplace/QuotedOuterNames.kt");
    }

    @TestMetadata("QuotedParameter.kt")
    public void testQuotedParameter() throws Exception {
        runTest("testData/refactoring/rename/inplace/QuotedParameter.kt");
    }

    @TestMetadata("RedundantOverride.kt")
    public void testRedundantOverride() throws Exception {
        runTest("testData/refactoring/rename/inplace/RedundantOverride.kt");
    }

    @TestMetadata("SameNameFunctionByImplicitReceiver.kt")
    public void testSameNameFunctionByImplicitReceiver() throws Exception {
        runTest("testData/refactoring/rename/inplace/SameNameFunctionByImplicitReceiver.kt");
    }

    @TestMetadata("TopLevelFunctionAnotherSignature.kt")
    public void testTopLevelFunctionAnotherSignature() throws Exception {
        runTest("testData/refactoring/rename/inplace/TopLevelFunctionAnotherSignature.kt");
    }

    @TestMetadata("TopLevelFunctionRedeclaration.kt")
    public void testTopLevelFunctionRedeclaration() throws Exception {
        runTest("testData/refactoring/rename/inplace/TopLevelFunctionRedeclaration.kt");
    }

    @TestMetadata("TopLevelValNotInplace.kt")
    public void testTopLevelValNotInplace() throws Exception {
        runTest("testData/refactoring/rename/inplace/TopLevelValNotInplace.kt");
    }

    @TestMetadata("TryCatch.kt")
    public void testTryCatch() throws Exception {
        runTest("testData/refactoring/rename/inplace/TryCatch.kt");
    }

    @TestMetadata("TwoExtensions.kt")
    public void testTwoExtensions() throws Exception {
        runTest("testData/refactoring/rename/inplace/TwoExtensions.kt");
    }

    @TestMetadata("WithJavaSuper.kt")
    public void testWithJavaSuper() throws Exception {
        runTest("testData/refactoring/rename/inplace/WithJavaSuper.kt");
    }
}
