// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.codeInsight.moveUpDown;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/codeInsight/moveLeftRight")
public class MoveLeftRightTestGenerated extends AbstractMoveLeftRightTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("annotationParams.kt")
    public void testAnnotationParams() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/annotationParams.kt");
    }

    @TestMetadata("basesList.kt")
    public void testBasesList() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/basesList.kt");
    }

    @TestMetadata("callArgs1.kt")
    public void testCallArgs1() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/callArgs1.kt");
    }

    @TestMetadata("callArgs2.kt")
    public void testCallArgs2() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/callArgs2.kt");
    }

    @TestMetadata("callArgs3.kt")
    public void testCallArgs3() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/callArgs3.kt");
    }

    @TestMetadata("callArgs4.kt")
    public void testCallArgs4() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/callArgs4.kt");
    }

    @TestMetadata("callArgs5.kt")
    public void testCallArgs5() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/callArgs5.kt");
    }

    @TestMetadata("funParams1.kt")
    public void testFunParams1() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/funParams1.kt");
    }

    @TestMetadata("funParams2.kt")
    public void testFunParams2() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/funParams2.kt");
    }

    @TestMetadata("funParams3.kt")
    public void testFunParams3() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/funParams3.kt");
    }

    @TestMetadata("funParams4.kt")
    public void testFunParams4() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/funParams4.kt");
    }

    @TestMetadata("indexArgs.kt")
    public void testIndexArgs() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/indexArgs.kt");
    }

    @TestMetadata("lambdaParams.kt")
    public void testLambdaParams() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/lambdaParams.kt");
    }

    @TestMetadata("typeArgs.kt")
    public void testTypeArgs() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/typeArgs.kt");
    }

    @TestMetadata("typeConstraints1.kt")
    public void testTypeConstraints1() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/typeConstraints1.kt");
    }

    @TestMetadata("typeConstraints2.kt")
    public void testTypeConstraints2() throws Exception {
        runTest("testData/codeInsight/moveLeftRight/typeConstraints2.kt");
    }
}
