// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/wordSelection")
public class WorkSelectionTestGenerated extends AbstractWorkSelectionTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("ArrayBrackets")
    public void testArrayBrackets() throws Exception {
        runTest("testData/wordSelection/ArrayBrackets/");
    }

    @TestMetadata("Class")
    public void testClass() throws Exception {
        runTest("testData/wordSelection/Class/");
    }

    @TestMetadata("ClassMember1")
    public void testClassMember1() throws Exception {
        runTest("testData/wordSelection/ClassMember1/");
    }

    @TestMetadata("ClassMember2")
    public void testClassMember2() throws Exception {
        runTest("testData/wordSelection/ClassMember2/");
    }

    @TestMetadata("ClassMember3")
    public void testClassMember3() throws Exception {
        runTest("testData/wordSelection/ClassMember3/");
    }

    @TestMetadata("ClassMember4")
    public void testClassMember4() throws Exception {
        runTest("testData/wordSelection/ClassMember4/");
    }

    @TestMetadata("ClassMember5")
    public void testClassMember5() throws Exception {
        runTest("testData/wordSelection/ClassMember5/");
    }

    @TestMetadata("CommentForStatements")
    public void testCommentForStatements() throws Exception {
        runTest("testData/wordSelection/CommentForStatements/");
    }

    @TestMetadata("CommentForStatementsInLambda")
    public void testCommentForStatementsInLambda() throws Exception {
        runTest("testData/wordSelection/CommentForStatementsInLambda/");
    }

    @TestMetadata("DeclarationWithComment1")
    public void testDeclarationWithComment1() throws Exception {
        runTest("testData/wordSelection/DeclarationWithComment1/");
    }

    @TestMetadata("DeclarationWithComment2")
    public void testDeclarationWithComment2() throws Exception {
        runTest("testData/wordSelection/DeclarationWithComment2/");
    }

    @TestMetadata("DeclarationWithComment3")
    public void testDeclarationWithComment3() throws Exception {
        runTest("testData/wordSelection/DeclarationWithComment3/");
    }

    @TestMetadata("DeclarationWithComment4")
    public void testDeclarationWithComment4() throws Exception {
        runTest("testData/wordSelection/DeclarationWithComment4/");
    }

    @TestMetadata("DeclarationWithDocComment")
    public void testDeclarationWithDocComment() throws Exception {
        runTest("testData/wordSelection/DeclarationWithDocComment/");
    }

    @TestMetadata("DefiningMultipleSuperClass")
    public void testDefiningMultipleSuperClass() throws Exception {
        runTest("testData/wordSelection/DefiningMultipleSuperClass/");
    }

    @TestMetadata("DefiningSuperClass")
    public void testDefiningSuperClass() throws Exception {
        runTest("testData/wordSelection/DefiningSuperClass/");
    }

    @TestMetadata("DefiningVariable")
    public void testDefiningVariable() throws Exception {
        runTest("testData/wordSelection/DefiningVariable/");
    }

    @TestMetadata("DocComment")
    public void testDocComment() throws Exception {
        runTest("testData/wordSelection/DocComment/");
    }

    @TestMetadata("DocCommentOneLine")
    public void testDocCommentOneLine() throws Exception {
        runTest("testData/wordSelection/DocCommentOneLine/");
    }

    @TestMetadata("DocCommentTagLink")
    public void testDocCommentTagLink() throws Exception {
        runTest("testData/wordSelection/DocCommentTagLink/");
    }

    @TestMetadata("DocCommentTagName")
    public void testDocCommentTagName() throws Exception {
        runTest("testData/wordSelection/DocCommentTagName/");
    }

    @TestMetadata("DocCommentTagText")
    public void testDocCommentTagText() throws Exception {
        runTest("testData/wordSelection/DocCommentTagText/");
    }

    @TestMetadata("EscapedIdentifier")
    public void testEscapedIdentifier() throws Exception {
        runTest("testData/wordSelection/EscapedIdentifier/");
    }

    @TestMetadata("ForRange")
    public void testForRange() throws Exception {
        runTest("testData/wordSelection/ForRange/");
    }

    @TestMetadata("FunctionWithLineCommentAfter")
    public void testFunctionWithLineCommentAfter() throws Exception {
        runTest("testData/wordSelection/FunctionWithLineCommentAfter/");
    }

    @TestMetadata("FunctionWithLineCommentBefore")
    public void testFunctionWithLineCommentBefore() throws Exception {
        runTest("testData/wordSelection/FunctionWithLineCommentBefore/");
    }

    @TestMetadata("IfBody")
    public void testIfBody() throws Exception {
        runTest("testData/wordSelection/IfBody/");
    }

    @TestMetadata("IfCondition")
    public void testIfCondition() throws Exception {
        runTest("testData/wordSelection/IfCondition/");
    }

    @TestMetadata("InvokedExpression")
    public void testInvokedExpression() throws Exception {
        runTest("testData/wordSelection/InvokedExpression/");
    }

    @TestMetadata("KT13675")
    public void testKT13675() throws Exception {
        runTest("testData/wordSelection/KT13675/");
    }

    @TestMetadata("LabeledReturn")
    public void testLabeledReturn() throws Exception {
        runTest("testData/wordSelection/LabeledReturn/");
    }

    @TestMetadata("LambdaArgument1")
    public void testLambdaArgument1() throws Exception {
        runTest("testData/wordSelection/LambdaArgument1/");
    }

    @TestMetadata("LambdaArgument2")
    public void testLambdaArgument2() throws Exception {
        runTest("testData/wordSelection/LambdaArgument2/");
    }

    @TestMetadata("LambdaArgument3")
    public void testLambdaArgument3() throws Exception {
        runTest("testData/wordSelection/LambdaArgument3/");
    }

    @TestMetadata("LambdaArgument4")
    public void testLambdaArgument4() throws Exception {
        runTest("testData/wordSelection/LambdaArgument4/");
    }

    @TestMetadata("LeftBrace")
    public void testLeftBrace() throws Exception {
        runTest("testData/wordSelection/LeftBrace/");
    }

    @TestMetadata("LineComment")
    public void testLineComment() throws Exception {
        runTest("testData/wordSelection/LineComment/");
    }

    @TestMetadata("MultiDeclaration")
    public void testMultiDeclaration() throws Exception {
        runTest("testData/wordSelection/MultiDeclaration/");
    }

    @TestMetadata("ObjectExpression")
    public void testObjectExpression() throws Exception {
        runTest("testData/wordSelection/ObjectExpression/");
    }

    @TestMetadata("RightBrace")
    public void testRightBrace() throws Exception {
        runTest("testData/wordSelection/RightBrace/");
    }

    @TestMetadata("SimpleComment")
    public void testSimpleComment() throws Exception {
        runTest("testData/wordSelection/SimpleComment/");
    }

    @TestMetadata("SimpleStringLiteral")
    public void testSimpleStringLiteral() throws Exception {
        runTest("testData/wordSelection/SimpleStringLiteral/");
    }

    @TestMetadata("SimpleStringLiteral2")
    public void testSimpleStringLiteral2() throws Exception {
        runTest("testData/wordSelection/SimpleStringLiteral2/");
    }

    @TestMetadata("Statements")
    public void testStatements() throws Exception {
        runTest("testData/wordSelection/Statements/");
    }

    @TestMetadata("TemplateStringLiteral1")
    public void testTemplateStringLiteral1() throws Exception {
        runTest("testData/wordSelection/TemplateStringLiteral1/");
    }

    @TestMetadata("TemplateStringLiteral2")
    public void testTemplateStringLiteral2() throws Exception {
        runTest("testData/wordSelection/TemplateStringLiteral2/");
    }

    @TestMetadata("TemplateStringLiteral3")
    public void testTemplateStringLiteral3() throws Exception {
        runTest("testData/wordSelection/TemplateStringLiteral3/");
    }

    @TestMetadata("TypeArguments")
    public void testTypeArguments() throws Exception {
        runTest("testData/wordSelection/TypeArguments/");
    }

    @TestMetadata("TypeParameters")
    public void testTypeParameters() throws Exception {
        runTest("testData/wordSelection/TypeParameters/");
    }

    @TestMetadata("ValueArguments")
    public void testValueArguments() throws Exception {
        runTest("testData/wordSelection/ValueArguments/");
    }

    @TestMetadata("ValueParameters")
    public void testValueParameters() throws Exception {
        runTest("testData/wordSelection/ValueParameters/");
    }

    @TestMetadata("ValueParameters2")
    public void testValueParameters2() throws Exception {
        runTest("testData/wordSelection/ValueParameters2/");
    }

    @TestMetadata("ValueParametersInLambda")
    public void testValueParametersInLambda() throws Exception {
        runTest("testData/wordSelection/ValueParametersInLambda/");
    }

    @TestMetadata("ValueParametersInLambda2")
    public void testValueParametersInLambda2() throws Exception {
        runTest("testData/wordSelection/ValueParametersInLambda2/");
    }

    @TestMetadata("ValueParametersInLambda3")
    public void testValueParametersInLambda3() throws Exception {
        runTest("testData/wordSelection/ValueParametersInLambda3/");
    }

    @TestMetadata("ValueParametersInLambda4")
    public void testValueParametersInLambda4() throws Exception {
        runTest("testData/wordSelection/ValueParametersInLambda4/");
    }

    @TestMetadata("WhenEntries")
    public void testWhenEntries() throws Exception {
        runTest("testData/wordSelection/WhenEntries/");
    }
}
