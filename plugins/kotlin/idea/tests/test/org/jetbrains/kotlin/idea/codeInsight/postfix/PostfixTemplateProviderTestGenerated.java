// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.codeInsight.postfix;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/codeInsight/postfix")
public abstract class PostfixTemplateProviderTestGenerated extends AbstractPostfixTemplateProviderTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/codeInsight/postfix")
    public static class Uncategorized extends AbstractPostfixTemplateProviderTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("arg.kt")
        public void testArg() throws Exception {
            runTest("testData/codeInsight/postfix/arg.kt");
        }

        @TestMetadata("argWithReturn.kt")
        public void testArgWithReturn() throws Exception {
            runTest("testData/codeInsight/postfix/argWithReturn.kt");
        }

        @TestMetadata("argWithThrow.kt")
        public void testArgWithThrow() throws Exception {
            runTest("testData/codeInsight/postfix/argWithThrow.kt");
        }

        @TestMetadata("assert.kt")
        public void testAssert() throws Exception {
            runTest("testData/codeInsight/postfix/assert.kt");
        }

        @TestMetadata("assertNonTopLevel.kt")
        public void testAssertNonTopLevel() throws Exception {
            runTest("testData/codeInsight/postfix/assertNonTopLevel.kt");
        }

        @TestMetadata("doNotProposeWrappingIncrement.kt")
        public void testDoNotProposeWrappingIncrement() throws Exception {
            runTest("testData/codeInsight/postfix/doNotProposeWrappingIncrement.kt");
        }

        @TestMetadata("else.kt")
        public void testElse() throws Exception {
            runTest("testData/codeInsight/postfix/else.kt");
        }

        @TestMetadata("for.kt")
        public void testFor() throws Exception {
            runTest("testData/codeInsight/postfix/for.kt");
        }

        @TestMetadata("forIndexed.kt")
        public void testForIndexed() throws Exception {
            runTest("testData/codeInsight/postfix/forIndexed.kt");
        }

        @TestMetadata("forIndexed2.kt")
        public void testForIndexed2() throws Exception {
            runTest("testData/codeInsight/postfix/forIndexed2.kt");
        }

        @TestMetadata("forNumber.kt")
        public void testForNumber() throws Exception {
            runTest("testData/codeInsight/postfix/forNumber.kt");
        }

        @TestMetadata("forNumber2.kt")
        public void testForNumber2() throws Exception {
            runTest("testData/codeInsight/postfix/forNumber2.kt");
        }

        @TestMetadata("forNumberInverse.kt")
        public void testForNumberInverse() throws Exception {
            runTest("testData/codeInsight/postfix/forNumberInverse.kt");
        }

        @TestMetadata("forOnMap.kt")
        public void testForOnMap() throws Exception {
            runTest("testData/codeInsight/postfix/forOnMap.kt");
        }

        @TestMetadata("forOnString.kt")
        public void testForOnString() throws Exception {
            runTest("testData/codeInsight/postfix/forOnString.kt");
        }

        @TestMetadata("forReversed.kt")
        public void testForReversed() throws Exception {
            runTest("testData/codeInsight/postfix/forReversed.kt");
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            runTest("testData/codeInsight/postfix/if.kt");
        }

        @TestMetadata("iter.kt")
        public void testIter() throws Exception {
            runTest("testData/codeInsight/postfix/iter.kt");
        }

        @TestMetadata("noParOnLoop.kt")
        public void testNoParOnLoop() throws Exception {
            runTest("testData/codeInsight/postfix/noParOnLoop.kt");
        }

        @TestMetadata("noReturnForNonStatement.kt")
        public void testNoReturnForNonStatement() throws Exception {
            runTest("testData/codeInsight/postfix/noReturnForNonStatement.kt");
        }

        @TestMetadata("notBoolean.kt")
        public void testNotBoolean() throws Exception {
            runTest("testData/codeInsight/postfix/notBoolean.kt");
        }

        @TestMetadata("notString.kt")
        public void testNotString() throws Exception {
            runTest("testData/codeInsight/postfix/notString.kt");
        }

        @TestMetadata("notnull.kt")
        public void testNotnull() throws Exception {
            runTest("testData/codeInsight/postfix/notnull.kt");
        }

        @TestMetadata("null.kt")
        public void testNull() throws Exception {
            runTest("testData/codeInsight/postfix/null.kt");
        }

        @TestMetadata("par.kt")
        public void testPar() throws Exception {
            runTest("testData/codeInsight/postfix/par.kt");
        }

        @TestMetadata("parAfterUserType.kt")
        public void testParAfterUserType() throws Exception {
            runTest("testData/codeInsight/postfix/parAfterUserType.kt");
        }

        @TestMetadata("parAssignment.kt")
        public void testParAssignment() throws Exception {
            runTest("testData/codeInsight/postfix/parAssignment.kt");
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            runTest("testData/codeInsight/postfix/return.kt");
        }

        @TestMetadata("returnFromLoop.kt")
        public void testReturnFromLoop() throws Exception {
            runTest("testData/codeInsight/postfix/returnFromLoop.kt");
        }

        @TestMetadata("sout.kt")
        public void testSout() throws Exception {
            runTest("testData/codeInsight/postfix/sout.kt");
        }

        @TestMetadata("soutCompanionClassLiteral.kt")
        public void testSoutCompanionClassLiteral() throws Exception {
            runTest("testData/codeInsight/postfix/soutCompanionClassLiteral.kt");
        }

        @TestMetadata("soutInIf.kt")
        public void testSoutInIf() throws Exception {
            runTest("testData/codeInsight/postfix/soutInIf.kt");
        }

        @TestMetadata("soutInLoop.kt")
        public void testSoutInLoop() throws Exception {
            runTest("testData/codeInsight/postfix/soutInLoop.kt");
        }

        @TestMetadata("spread.kt")
        public void testSpread() throws Exception {
            runTest("testData/codeInsight/postfix/spread.kt");
        }

        @TestMetadata("spreadIntArray.kt")
        public void testSpreadIntArray() throws Exception {
            runTest("testData/codeInsight/postfix/spreadIntArray.kt");
        }

        @TestMetadata("try.kt")
        public void testTry() throws Exception {
            runTest("testData/codeInsight/postfix/try.kt");
        }

        @TestMetadata("tryInLocalClass.kt")
        public void testTryInLocalClass() throws Exception {
            runTest("testData/codeInsight/postfix/tryInLocalClass.kt");
        }

        @TestMetadata("tryOnFor.kt")
        public void testTryOnFor() throws Exception {
            runTest("testData/codeInsight/postfix/tryOnFor.kt");
        }

        @TestMetadata("tryOnImportStatement.kt")
        public void testTryOnImportStatement() throws Exception {
            runTest("testData/codeInsight/postfix/tryOnImportStatement.kt");
        }

        @TestMetadata("tryOnStatement.kt")
        public void testTryOnStatement() throws Exception {
            runTest("testData/codeInsight/postfix/tryOnStatement.kt");
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("testData/codeInsight/postfix/val.kt");
        }

        @TestMetadata("valAfterReceiver.kt")
        public void testValAfterReceiver() throws Exception {
            runTest("testData/codeInsight/postfix/valAfterReceiver.kt");
        }

        @TestMetadata("valAfterSelector.kt")
        public void testValAfterSelector() throws Exception {
            runTest("testData/codeInsight/postfix/valAfterSelector.kt");
        }

        @TestMetadata("valAtLamba.kt")
        public void testValAtLamba() throws Exception {
            runTest("testData/codeInsight/postfix/valAtLamba.kt");
        }

        @TestMetadata("valAtLambaArgumentInCall.kt")
        public void testValAtLambaArgumentInCall() throws Exception {
            runTest("testData/codeInsight/postfix/valAtLambaArgumentInCall.kt");
        }

        @TestMetadata("var.kt")
        public void testVar() throws Exception {
            runTest("testData/codeInsight/postfix/var.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("testData/codeInsight/postfix/when.kt");
        }

        @TestMetadata("whenExpression.kt")
        public void testWhenExpression() throws Exception {
            runTest("testData/codeInsight/postfix/whenExpression.kt");
        }

        @TestMetadata("whenForEnumClass.kt")
        public void testWhenForEnumClass() throws Exception {
            runTest("testData/codeInsight/postfix/whenForEnumClass.kt");
        }

        @TestMetadata("whenForSealedClass.kt")
        public void testWhenForSealedClass() throws Exception {
            runTest("testData/codeInsight/postfix/whenForSealedClass.kt");
        }

        @TestMetadata("whenOnThis.kt")
        public void testWhenOnThis() throws Exception {
            runTest("testData/codeInsight/postfix/whenOnThis.kt");
        }

        @TestMetadata("whenOnThisInExtension.kt")
        public void testWhenOnThisInExtension() throws Exception {
            runTest("testData/codeInsight/postfix/whenOnThisInExtension.kt");
        }

        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            runTest("testData/codeInsight/postfix/while.kt");
        }

        @TestMetadata("with.kt")
        public void testWith() throws Exception {
            runTest("testData/codeInsight/postfix/with.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/codeInsight/postfix/wrapWithCall")
    public static class WrapWithCall extends AbstractPostfixTemplateProviderTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("arrayOfStatement.kt")
        public void testArrayOfStatement() throws Exception {
            runTest("testData/codeInsight/postfix/wrapWithCall/arrayOfStatement.kt");
        }

        @TestMetadata("listOf.kt")
        public void testListOf() throws Exception {
            runTest("testData/codeInsight/postfix/wrapWithCall/listOf.kt");
        }

        @TestMetadata("returnSequenceOf.kt")
        public void testReturnSequenceOf() throws Exception {
            runTest("testData/codeInsight/postfix/wrapWithCall/returnSequenceOf.kt");
        }

        @TestMetadata("setOf.kt")
        public void testSetOf() throws Exception {
            runTest("testData/codeInsight/postfix/wrapWithCall/setOf.kt");
        }
    }
}
