// Copyright 2000-2021 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

package org.jetbrains.kotlin.formatter;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.test.TestRoot;
import org.junit.runner.RunWith;

/*
 * This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class TypingIndentationTestBaseGenerated extends AbstractTypingIndentationTestBase {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/indentationOnNewline")
    public static class DirectSettings extends AbstractTypingIndentationTestBase {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
        }

        @TestMetadata("AfterCatch.after.kt")
        public void testAfterCatch() throws Exception {
            runTest("testData/indentationOnNewline/AfterCatch.after.kt");
        }

        @TestMetadata("AfterClassNameBeforeFun.after.kt")
        public void testAfterClassNameBeforeFun() throws Exception {
            runTest("testData/indentationOnNewline/AfterClassNameBeforeFun.after.kt");
        }

        @TestMetadata("AfterExtensionPropertyGetter.after.kt")
        public void testAfterExtensionPropertyGetter() throws Exception {
            runTest("testData/indentationOnNewline/AfterExtensionPropertyGetter.after.kt");
        }

        @TestMetadata("AfterExtensionPropertySetter.after.kt")
        public void testAfterExtensionPropertySetter() throws Exception {
            runTest("testData/indentationOnNewline/AfterExtensionPropertySetter.after.kt");
        }

        @TestMetadata("AfterFinally.after.kt")
        public void testAfterFinally() throws Exception {
            runTest("testData/indentationOnNewline/AfterFinally.after.kt");
        }

        @TestMetadata("AfterImport.after.kt")
        public void testAfterImport() throws Exception {
            runTest("testData/indentationOnNewline/AfterImport.after.kt");
        }

        @TestMetadata("AfterPropertyGetter.after.kt")
        public void testAfterPropertyGetter() throws Exception {
            runTest("testData/indentationOnNewline/AfterPropertyGetter.after.kt");
        }

        @TestMetadata("AfterPropertySetter.after.kt")
        public void testAfterPropertySetter() throws Exception {
            runTest("testData/indentationOnNewline/AfterPropertySetter.after.kt");
        }

        @TestMetadata("AfterTry.after.kt")
        public void testAfterTry() throws Exception {
            runTest("testData/indentationOnNewline/AfterTry.after.kt");
        }

        @TestMetadata("Annotation.after.kt")
        public void testAnnotation() throws Exception {
            runTest("testData/indentationOnNewline/Annotation.after.kt");
        }

        @TestMetadata("AnnotationInDeclaration.after.kt")
        public void testAnnotationInDeclaration() throws Exception {
            runTest("testData/indentationOnNewline/AnnotationInDeclaration.after.kt");
        }

        @TestMetadata("ArgumentListNormalIndent.after.kt")
        public void testArgumentListNormalIndent() throws Exception {
            runTest("testData/indentationOnNewline/ArgumentListNormalIndent.after.kt");
        }

        @TestMetadata("ConsecutiveCallsAfterDot.after.kt")
        public void testConsecutiveCallsAfterDot() throws Exception {
            runTest("testData/indentationOnNewline/ConsecutiveCallsAfterDot.after.kt");
        }

        @TestMetadata("ConsecutiveCallsInSaeCallsMiddle.after.kt")
        public void testConsecutiveCallsInSaeCallsMiddle() throws Exception {
            runTest("testData/indentationOnNewline/ConsecutiveCallsInSaeCallsMiddle.after.kt");
        }

        @TestMetadata("ConsecutiveCallsInSafeCallsEnd.after.kt")
        public void testConsecutiveCallsInSafeCallsEnd() throws Exception {
            runTest("testData/indentationOnNewline/ConsecutiveCallsInSafeCallsEnd.after.kt");
        }

        @TestMetadata("FunctionBlock.after.kt")
        public void testFunctionBlock() throws Exception {
            runTest("testData/indentationOnNewline/FunctionBlock.after.kt");
        }

        @TestMetadata("HigherOrderFunction.after.kt")
        public void testHigherOrderFunction() throws Exception {
            runTest("testData/indentationOnNewline/HigherOrderFunction.after.kt");
        }

        @TestMetadata("HigherOrderFunction2.after.kt")
        public void testHigherOrderFunction2() throws Exception {
            runTest("testData/indentationOnNewline/HigherOrderFunction2.after.kt");
        }

        @TestMetadata("HigherOrderFunction3.after.kt")
        public void testHigherOrderFunction3() throws Exception {
            runTest("testData/indentationOnNewline/HigherOrderFunction3.after.kt");
        }

        @TestMetadata("InDelegationListAfterColon.after.kt")
        public void testInDelegationListAfterColon() throws Exception {
            runTest("testData/indentationOnNewline/InDelegationListAfterColon.after.kt");
        }

        @TestMetadata("InDelegationListAfterComma.after.kt")
        public void testInDelegationListAfterComma() throws Exception {
            runTest("testData/indentationOnNewline/InDelegationListAfterComma.after.kt");
        }

        @TestMetadata("InDelegationListNotEmpty.after.kt")
        public void testInDelegationListNotEmpty() throws Exception {
            runTest("testData/indentationOnNewline/InDelegationListNotEmpty.after.kt");
        }

        @TestMetadata("InEnumAfterSemicolon.after.kt")
        public void testInEnumAfterSemicolon() throws Exception {
            runTest("testData/indentationOnNewline/InEnumAfterSemicolon.after.kt");
        }

        @TestMetadata("InEnumInitializerListAfterComma.after.kt")
        public void testInEnumInitializerListAfterComma() throws Exception {
            runTest("testData/indentationOnNewline/InEnumInitializerListAfterComma.after.kt");
        }

        @TestMetadata("InEnumInitializerListNotEmpty.after.kt")
        public void testInEnumInitializerListNotEmpty() throws Exception {
            runTest("testData/indentationOnNewline/InEnumInitializerListNotEmpty.after.kt");
        }

        @TestMetadata("InLabmdaAfterArrow.after.kt")
        public void testInLabmdaAfterArrow() throws Exception {
            runTest("testData/indentationOnNewline/InLabmdaAfterArrow.after.kt");
        }

        @TestMetadata("InLambdaAfterArrowWithSpaces.after.kt")
        public void testInLambdaAfterArrowWithSpaces() throws Exception {
            runTest("testData/indentationOnNewline/InLambdaAfterArrowWithSpaces.after.kt");
        }

        @TestMetadata("InLambdaBeforeParams.after.kt")
        public void testInLambdaBeforeParams() throws Exception {
            runTest("testData/indentationOnNewline/InLambdaBeforeParams.after.kt");
        }

        @TestMetadata("InLambdaInsideChainCallSameLine.after.kt")
        public void testInLambdaInsideChainCallSameLine() throws Exception {
            runTest("testData/indentationOnNewline/InLambdaInsideChainCallSameLine.after.kt");
        }

        @TestMetadata("InLambdaInsideChainCallSameLineWithSpaces.after.kt")
        public void testInLambdaInsideChainCallSameLineWithSpaces() throws Exception {
            runTest("testData/indentationOnNewline/InLambdaInsideChainCallSameLineWithSpaces.after.kt");
        }

        @TestMetadata("InLambdaInsideChainCallWithNewLine.after.kt")
        public void testInLambdaInsideChainCallWithNewLine() throws Exception {
            runTest("testData/indentationOnNewline/InLambdaInsideChainCallWithNewLine.after.kt");
        }

        @TestMetadata("InLambdaInsideChainCallWithNewLineWithSpaces.after.kt")
        public void testInLambdaInsideChainCallWithNewLineWithSpaces() throws Exception {
            runTest("testData/indentationOnNewline/InLambdaInsideChainCallWithNewLineWithSpaces.after.kt");
        }

        @TestMetadata("InMultilineLambdaAfterArrow.after.kt")
        public void testInMultilineLambdaAfterArrow() throws Exception {
            runTest("testData/indentationOnNewline/InMultilineLambdaAfterArrow.after.kt");
        }

        @TestMetadata("KT20783.after.kt")
        public void testKT20783() throws Exception {
            runTest("testData/indentationOnNewline/KT20783.after.kt");
        }

        @TestMetadata("LambdaInArguments.after.kt")
        public void testLambdaInArguments() throws Exception {
            runTest("testData/indentationOnNewline/LambdaInArguments.after.kt");
        }

        @TestMetadata("LambdaInArguments2.after.kt")
        public void testLambdaInArguments2() throws Exception {
            runTest("testData/indentationOnNewline/LambdaInArguments2.after.kt");
        }

        @TestMetadata("LargeFile.after.kt")
        public void testLargeFile() throws Exception {
            runTest("testData/indentationOnNewline/LargeFile.after.kt");
        }

        @TestMetadata("LiteralExpression.after.kt")
        public void testLiteralExpression() throws Exception {
            runTest("testData/indentationOnNewline/LiteralExpression.after.kt");
        }

        @TestMetadata("LiteralExpression2.after.kt")
        public void testLiteralExpression2() throws Exception {
            runTest("testData/indentationOnNewline/LiteralExpression2.after.kt");
        }

        @TestMetadata("LiteralExpression3.after.kt")
        public void testLiteralExpression3() throws Exception {
            runTest("testData/indentationOnNewline/LiteralExpression3.after.kt");
        }

        @TestMetadata("ModifierListInUnfinishedDeclaration.after.kt")
        public void testModifierListInUnfinishedDeclaration() throws Exception {
            runTest("testData/indentationOnNewline/ModifierListInUnfinishedDeclaration.after.kt");
        }

        @TestMetadata("NotFirstParameter.after.kt")
        public void testNotFirstParameter() throws Exception {
            runTest("testData/indentationOnNewline/NotFirstParameter.after.kt");
        }

        @TestMetadata("ReturnContinue.after.kt")
        public void testReturnContinue() throws Exception {
            runTest("testData/indentationOnNewline/ReturnContinue.after.kt");
        }

        @TestMetadata("Semicolon.after.kt")
        public void testSemicolon() throws Exception {
            runTest("testData/indentationOnNewline/Semicolon.after.kt");
        }

        @TestMetadata("Semicolon2.after.kt")
        public void testSemicolon2() throws Exception {
            runTest("testData/indentationOnNewline/Semicolon2.after.kt");
        }

        @TestMetadata("SettingAlignMultilineParametersInCalls.after.kt")
        public void testSettingAlignMultilineParametersInCalls() throws Exception {
            runTest("testData/indentationOnNewline/SettingAlignMultilineParametersInCalls.after.kt");
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/afterUnmatchedBrace")
        public static class AfterUnmatchedBrace extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("LambdaArgumentBeforeFunctionInitializer.after.kt")
            public void testLambdaArgumentBeforeFunctionInitializer() throws Exception {
                runTest("testData/indentationOnNewline/afterUnmatchedBrace/LambdaArgumentBeforeFunctionInitializer.after.kt");
            }

            @TestMetadata("LambdaArgumentBeforeLocalPropertyInitializer.after.kt")
            public void testLambdaArgumentBeforeLocalPropertyInitializer() throws Exception {
                runTest("testData/indentationOnNewline/afterUnmatchedBrace/LambdaArgumentBeforeLocalPropertyInitializer.after.kt");
            }

            @TestMetadata("LambdaArgumentBeforeMemberPropertyInitializer.after.kt")
            public void testLambdaArgumentBeforeMemberPropertyInitializer() throws Exception {
                runTest("testData/indentationOnNewline/afterUnmatchedBrace/LambdaArgumentBeforeMemberPropertyInitializer.after.kt");
            }

            @TestMetadata("LambdaArgumentBeforeTopLevelPropertyInitializer.after.kt")
            public void testLambdaArgumentBeforeTopLevelPropertyInitializer() throws Exception {
                runTest("testData/indentationOnNewline/afterUnmatchedBrace/LambdaArgumentBeforeTopLevelPropertyInitializer.after.kt");
            }

            @TestMetadata("NotApplicableOnInitializer.after.kt")
            public void testNotApplicableOnInitializer() throws Exception {
                runTest("testData/indentationOnNewline/afterUnmatchedBrace/NotApplicableOnInitializer.after.kt");
            }

            @TestMetadata("WhenBeforeLocalPropertyInitializer.after.kt")
            public void testWhenBeforeLocalPropertyInitializer() throws Exception {
                runTest("testData/indentationOnNewline/afterUnmatchedBrace/WhenBeforeLocalPropertyInitializer.after.kt");
            }

            @TestMetadata("WhenBeforeMemberPropertyInitializer.after.kt")
            public void testWhenBeforeMemberPropertyInitializer() throws Exception {
                runTest("testData/indentationOnNewline/afterUnmatchedBrace/WhenBeforeMemberPropertyInitializer.after.kt");
            }

            @TestMetadata("WhenBeforeTopLevelPropertyInitializer.after.kt")
            public void testWhenBeforeTopLevelPropertyInitializer() throws Exception {
                runTest("testData/indentationOnNewline/afterUnmatchedBrace/WhenBeforeTopLevelPropertyInitializer.after.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/arrayAccess")
        public static class ArrayAccess extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("listAccess.after.kt")
            public void testListAccess() throws Exception {
                runTest("testData/indentationOnNewline/arrayAccess/listAccess.after.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/controlFlowConstructions")
        public static class ControlFlowConstructions extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("Catch.after.kt")
            public void testCatch() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Catch.after.kt");
            }

            @TestMetadata("Catch2.after.kt")
            public void testCatch2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Catch2.after.kt");
            }

            @TestMetadata("Catch3.after.kt")
            public void testCatch3() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Catch3.after.kt");
            }

            @TestMetadata("Catch4.after.kt")
            public void testCatch4() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Catch4.after.kt");
            }

            @TestMetadata("Do2.after.kt")
            public void testDo2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Do2.after.kt");
            }

            @TestMetadata("DoInFun.after.kt")
            public void testDoInFun() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoInFun.after.kt");
            }

            @TestMetadata("DoWhile.after.kt")
            public void testDoWhile() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoWhile.after.kt");
            }

            @TestMetadata("DoWhile2.after.kt")
            public void testDoWhile2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoWhile2.after.kt");
            }

            @TestMetadata("DoWhile3.after.kt")
            public void testDoWhile3() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoWhile3.after.kt");
            }

            @TestMetadata("DoWhile4.after.kt")
            public void testDoWhile4() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoWhile4.after.kt");
            }

            @TestMetadata("DoWhile5.after.kt")
            public void testDoWhile5() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoWhile5.after.kt");
            }

            @TestMetadata("DoWhile6.after.kt")
            public void testDoWhile6() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoWhile6.after.kt");
            }

            @TestMetadata("DoWhile7.after.kt")
            public void testDoWhile7() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoWhile7.after.kt");
            }

            @TestMetadata("DoWithBraces.after.kt")
            public void testDoWithBraces() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoWithBraces.after.kt");
            }

            @TestMetadata("DoWithBraces2.after.kt")
            public void testDoWithBraces2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/DoWithBraces2.after.kt");
            }

            @TestMetadata("ElseIf.after.kt")
            public void testElseIf() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ElseIf.after.kt");
            }

            @TestMetadata("ElseInWhenWithOption.after.kt")
            public void testElseInWhenWithOption() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ElseInWhenWithOption.after.kt");
            }

            @TestMetadata("ElseInWhenWithoutOption.after.kt")
            public void testElseInWhenWithoutOption() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ElseInWhenWithoutOption.after.kt");
            }

            @TestMetadata("ElseWithBrace.after.kt")
            public void testElseWithBrace() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ElseWithBrace.after.kt");
            }

            @TestMetadata("ElseWithBraceAndComment.after.kt")
            public void testElseWithBraceAndComment() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ElseWithBraceAndComment.after.kt");
            }

            @TestMetadata("ElseWithBraceAndComment2.after.kt")
            public void testElseWithBraceAndComment2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ElseWithBraceAndComment2.after.kt");
            }

            @TestMetadata("ElseWithoutBrace.after.kt")
            public void testElseWithoutBrace() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ElseWithoutBrace.after.kt");
            }

            @TestMetadata("ElseWithoutBrace2.after.kt")
            public void testElseWithoutBrace2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ElseWithoutBrace2.after.kt");
            }

            @TestMetadata("Finally.after.kt")
            public void testFinally() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Finally.after.kt");
            }

            @TestMetadata("Finally2.after.kt")
            public void testFinally2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Finally2.after.kt");
            }

            @TestMetadata("Finally3.after.kt")
            public void testFinally3() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Finally3.after.kt");
            }

            @TestMetadata("Finally4.after.kt")
            public void testFinally4() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Finally4.after.kt");
            }

            @TestMetadata("For.after.kt")
            public void testFor() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/For.after.kt");
            }

            @TestMetadata("ForWithBlock.after.kt")
            public void testForWithBlock() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ForWithBlock.after.kt");
            }

            @TestMetadata("ForWithCondition.after.kt")
            public void testForWithCondition() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ForWithCondition.after.kt");
            }

            @TestMetadata("ForWithoutCondition.after.kt")
            public void testForWithoutCondition() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/ForWithoutCondition.after.kt");
            }

            @TestMetadata("If.after.kt")
            public void testIf() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/If.after.kt");
            }

            @TestMetadata("IfBeforeCondition.after.kt")
            public void testIfBeforeCondition() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/IfBeforeCondition.after.kt");
            }

            @TestMetadata("IfBeforeCondition2.after.kt")
            public void testIfBeforeCondition2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/IfBeforeCondition2.after.kt");
            }

            @TestMetadata("IfBeforeCondition3.after.kt")
            public void testIfBeforeCondition3() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/IfBeforeCondition3.after.kt");
            }

            @TestMetadata("IfBeforeCondition4.after.kt")
            public void testIfBeforeCondition4() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/IfBeforeCondition4.after.kt");
            }

            @TestMetadata("IfWithBraces.after.kt")
            public void testIfWithBraces() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/IfWithBraces.after.kt");
            }

            @TestMetadata("IfWithBraces2.after.kt")
            public void testIfWithBraces2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/IfWithBraces2.after.kt");
            }

            @TestMetadata("Try.after.kt")
            public void testTry() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Try.after.kt");
            }

            @TestMetadata("Try2.after.kt")
            public void testTry2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/Try2.after.kt");
            }

            @TestMetadata("WhenWithCondition.after.kt")
            public void testWhenWithCondition() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/WhenWithCondition.after.kt");
            }

            @TestMetadata("WhenWithCondition2.after.kt")
            public void testWhenWithCondition2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/WhenWithCondition2.after.kt");
            }

            @TestMetadata("WhenWithoutCondition.after.kt")
            public void testWhenWithoutCondition() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/WhenWithoutCondition.after.kt");
            }

            @TestMetadata("While.after.kt")
            public void testWhile() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/While.after.kt");
            }

            @TestMetadata("While2.after.kt")
            public void testWhile2() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/While2.after.kt");
            }

            @TestMetadata("While3.after.kt")
            public void testWhile3() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/While3.after.kt");
            }

            @TestMetadata("WhileWithBlock.after.kt")
            public void testWhileWithBlock() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/WhileWithBlock.after.kt");
            }

            @TestMetadata("WhileWithCondition.after.kt")
            public void testWhileWithCondition() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/WhileWithCondition.after.kt");
            }

            @TestMetadata("WhileWithoutCondition.after.kt")
            public void testWhileWithoutCondition() throws Exception {
                runTest("testData/indentationOnNewline/controlFlowConstructions/WhileWithoutCondition.after.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/elvis")
        public static class Elvis extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("AfterElvis.after.kt")
            public void testAfterElvis() throws Exception {
                runTest("testData/indentationOnNewline/elvis/AfterElvis.after.kt");
            }

            @TestMetadata("AfterElvis2.after.kt")
            public void testAfterElvis2() throws Exception {
                runTest("testData/indentationOnNewline/elvis/AfterElvis2.after.kt");
            }

            @TestMetadata("AfterElvisInBinaryExpression.after.kt")
            public void testAfterElvisInBinaryExpression() throws Exception {
                runTest("testData/indentationOnNewline/elvis/AfterElvisInBinaryExpression.after.kt");
            }

            @TestMetadata("BeforeElvis.after.kt")
            public void testBeforeElvis() throws Exception {
                runTest("testData/indentationOnNewline/elvis/BeforeElvis.after.kt");
            }

            @TestMetadata("BeforeElvisInBinaryExpression.after.kt")
            public void testBeforeElvisInBinaryExpression() throws Exception {
                runTest("testData/indentationOnNewline/elvis/BeforeElvisInBinaryExpression.after.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/emptyBraces")
        public static class EmptyBraces extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("ClassWithConstructor.after.kt")
            public void testClassWithConstructor() throws Exception {
                runTest("testData/indentationOnNewline/emptyBraces/ClassWithConstructor.after.kt");
            }

            @TestMetadata("ClassWithConstructor2.after.kt")
            public void testClassWithConstructor2() throws Exception {
                runTest("testData/indentationOnNewline/emptyBraces/ClassWithConstructor2.after.kt");
            }

            @TestMetadata("ClassWithoutConstructor.after.kt")
            public void testClassWithoutConstructor() throws Exception {
                runTest("testData/indentationOnNewline/emptyBraces/ClassWithoutConstructor.after.kt");
            }

            @TestMetadata("FunctionBlock.after.kt")
            public void testFunctionBlock() throws Exception {
                runTest("testData/indentationOnNewline/emptyBraces/FunctionBlock.after.kt");
            }

            @TestMetadata("FunctionBlock2.after.kt")
            public void testFunctionBlock2() throws Exception {
                runTest("testData/indentationOnNewline/emptyBraces/FunctionBlock2.after.kt");
            }

            @TestMetadata("FunctionBody3.after.kt")
            public void testFunctionBody3() throws Exception {
                runTest("testData/indentationOnNewline/emptyBraces/FunctionBody3.after.kt");
            }

            @TestMetadata("FunctionBody4.after.kt")
            public void testFunctionBody4() throws Exception {
                runTest("testData/indentationOnNewline/emptyBraces/FunctionBody4.after.kt");
            }

            @TestMetadata("FunctionBodyInsideClass.after.kt")
            public void testFunctionBodyInsideClass() throws Exception {
                runTest("testData/indentationOnNewline/emptyBraces/FunctionBodyInsideClass.after.kt");
            }

            @TestMetadata("FunctionBodyInsideClass2.after.kt")
            public void testFunctionBodyInsideClass2() throws Exception {
                runTest("testData/indentationOnNewline/emptyBraces/FunctionBodyInsideClass2.after.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/emptyParameters")
        public static class EmptyParameters extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("EmptyArgumentInCallByArrayAccess.after.kt")
            public void testEmptyArgumentInCallByArrayAccess() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByArrayAccess.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByArrayAccess2.after.kt")
            public void testEmptyArgumentInCallByArrayAccess2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByArrayAccess2.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByDeclaration.after.kt")
            public void testEmptyArgumentInCallByDeclaration() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByDeclaration.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByDeclaration2.after.kt")
            public void testEmptyArgumentInCallByDeclaration2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByDeclaration2.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByReference.after.kt")
            public void testEmptyArgumentInCallByReference() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByReference.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByReference2.after.kt")
            public void testEmptyArgumentInCallByReference2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByReference2.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByReferenceInSuperType.after.kt")
            public void testEmptyArgumentInCallByReferenceInSuperType() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByReferenceInSuperType.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByReferenceInSuperType2.after.kt")
            public void testEmptyArgumentInCallByReferenceInSuperType2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByReferenceInSuperType2.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments.after.kt")
            public void testEmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments2.after.kt")
            public void testEmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments2.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByReferenceWithTypeArguments.after.kt")
            public void testEmptyArgumentInCallByReferenceWithTypeArguments() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByReferenceWithTypeArguments.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByReferenceWithTypeArguments2.after.kt")
            public void testEmptyArgumentInCallByReferenceWithTypeArguments2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInCallByReferenceWithTypeArguments2.after.kt");
            }

            @TestMetadata("EmptyArgumentInThisAsClassicFunction.after.kt")
            public void testEmptyArgumentInThisAsClassicFunction() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInThisAsClassicFunction.after.kt");
            }

            @TestMetadata("EmptyArgumentInThisAsConstructor.after.kt")
            public void testEmptyArgumentInThisAsConstructor() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInThisAsConstructor.after.kt");
            }

            @TestMetadata("EmptyArgumentInThisAsConstructor2.after.kt")
            public void testEmptyArgumentInThisAsConstructor2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyArgumentInThisAsConstructor2.after.kt");
            }

            @TestMetadata("EmptyConditionInCatch.after.kt")
            public void testEmptyConditionInCatch() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInCatch.after.kt");
            }

            @TestMetadata("EmptyConditionInCatch2.after.kt")
            public void testEmptyConditionInCatch2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInCatch2.after.kt");
            }

            @TestMetadata("EmptyConditionInDoWhile.after.kt")
            public void testEmptyConditionInDoWhile() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInDoWhile.after.kt");
            }

            @TestMetadata("EmptyConditionInFor.after.kt")
            public void testEmptyConditionInFor() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInFor.after.kt");
            }

            @TestMetadata("EmptyConditionInIf.after.kt")
            public void testEmptyConditionInIf() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInIf.after.kt");
            }

            @TestMetadata("EmptyConditionInWhen.after.kt")
            public void testEmptyConditionInWhen() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInWhen.after.kt");
            }

            @TestMetadata("EmptyConditionInWhile.after.kt")
            public void testEmptyConditionInWhile() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInWhile.after.kt");
            }

            @TestMetadata("EmptyParameterInAnnonymousFunction.after.kt")
            public void testEmptyParameterInAnnonymousFunction() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInAnnonymousFunction.after.kt");
            }

            @TestMetadata("EmptyParameterInAnnonymousFunction2.after.kt")
            public void testEmptyParameterInAnnonymousFunction2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInAnnonymousFunction2.after.kt");
            }

            @TestMetadata("EmptyParameterInAnnonymousFunctionWithNullableReceiver.after.kt")
            public void testEmptyParameterInAnnonymousFunctionWithNullableReceiver() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInAnnonymousFunctionWithNullableReceiver.after.kt");
            }

            @TestMetadata("EmptyParameterInAnnonymousFunctionWithNullableReceiver2.after.kt")
            public void testEmptyParameterInAnnonymousFunctionWithNullableReceiver2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInAnnonymousFunctionWithNullableReceiver2.after.kt");
            }

            @TestMetadata("EmptyParameterInAnnonymousFunctionWithReceiver.after.kt")
            public void testEmptyParameterInAnnonymousFunctionWithReceiver() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInAnnonymousFunctionWithReceiver.after.kt");
            }

            @TestMetadata("EmptyParameterInAnnonymousFunctionWithReceiver2.after.kt")
            public void testEmptyParameterInAnnonymousFunctionWithReceiver2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInAnnonymousFunctionWithReceiver2.after.kt");
            }

            @TestMetadata("EmptyParameterInDestructuringDeclaration.after.kt")
            public void testEmptyParameterInDestructuringDeclaration() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInDestructuringDeclaration.after.kt");
            }

            @TestMetadata("EmptyParameterInDestructuringDeclaration2.after.kt")
            public void testEmptyParameterInDestructuringDeclaration2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInDestructuringDeclaration2.after.kt");
            }

            @TestMetadata("EmptyParameterInDestructuringDeclaration3.after.kt")
            public void testEmptyParameterInDestructuringDeclaration3() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInDestructuringDeclaration3.after.kt");
            }

            @TestMetadata("EmptyParameterInExplicitPrimaryConstructor.after.kt")
            public void testEmptyParameterInExplicitPrimaryConstructor() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInExplicitPrimaryConstructor.after.kt");
            }

            @TestMetadata("EmptyParameterInExplicitPrimaryConstructor2.after.kt")
            public void testEmptyParameterInExplicitPrimaryConstructor2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInExplicitPrimaryConstructor2.after.kt");
            }

            @TestMetadata("EmptyParameterInFunction.after.kt")
            public void testEmptyParameterInFunction() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunction.after.kt");
            }

            @TestMetadata("EmptyParameterInFunction2.after.kt")
            public void testEmptyParameterInFunction2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunction2.after.kt");
            }

            @TestMetadata("EmptyParameterInFunctionWithReceiver.after.kt")
            public void testEmptyParameterInFunctionWithReceiver() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunctionWithReceiver.after.kt");
            }

            @TestMetadata("EmptyParameterInFunctionWithReceiver2.after.kt")
            public void testEmptyParameterInFunctionWithReceiver2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunctionWithReceiver2.after.kt");
            }

            @TestMetadata("EmptyParameterInFunctionWithTypeParameters.after.kt")
            public void testEmptyParameterInFunctionWithTypeParameters() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunctionWithTypeParameters.after.kt");
            }

            @TestMetadata("EmptyParameterInFunctionWithTypeParameters2.after.kt")
            public void testEmptyParameterInFunctionWithTypeParameters2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunctionWithTypeParameters2.after.kt");
            }

            @TestMetadata("EmptyParameterInFunctionWithTypeParametersAndReceiver.after.kt")
            public void testEmptyParameterInFunctionWithTypeParametersAndReceiver() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunctionWithTypeParametersAndReceiver.after.kt");
            }

            @TestMetadata("EmptyParameterInFunctionWithTypeParametersAndReceiver2.after.kt")
            public void testEmptyParameterInFunctionWithTypeParametersAndReceiver2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunctionWithTypeParametersAndReceiver2.after.kt");
            }

            @TestMetadata("EmptyParameterInFunctionWithTypeParametersAndReceiver3.after.kt")
            public void testEmptyParameterInFunctionWithTypeParametersAndReceiver3() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunctionWithTypeParametersAndReceiver3.after.kt");
            }

            @TestMetadata("EmptyParameterInFunctionWithTypeParametersAndReceiver4.after.kt")
            public void testEmptyParameterInFunctionWithTypeParametersAndReceiver4() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInFunctionWithTypeParametersAndReceiver4.after.kt");
            }

            @TestMetadata("EmptyParameterInGetter.after.kt")
            public void testEmptyParameterInGetter() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInGetter.after.kt");
            }

            @TestMetadata("EmptyParameterInGetter2.after.kt")
            public void testEmptyParameterInGetter2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInGetter2.after.kt");
            }

            @TestMetadata("EmptyParameterInImplicitPrimaryConstructor.after.kt")
            public void testEmptyParameterInImplicitPrimaryConstructor() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInImplicitPrimaryConstructor.after.kt");
            }

            @TestMetadata("EmptyParameterInImplicitPrimaryConstructor2.after.kt")
            public void testEmptyParameterInImplicitPrimaryConstructor2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInImplicitPrimaryConstructor2.after.kt");
            }

            @TestMetadata("EmptyParameterInImplicitPrimaryConstructorWithTypeParameters.after.kt")
            public void testEmptyParameterInImplicitPrimaryConstructorWithTypeParameters() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInImplicitPrimaryConstructorWithTypeParameters.after.kt");
            }

            @TestMetadata("EmptyParameterInImplicitPrimaryConstructorWithTypeParameters2.after.kt")
            public void testEmptyParameterInImplicitPrimaryConstructorWithTypeParameters2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInImplicitPrimaryConstructorWithTypeParameters2.after.kt");
            }

            @TestMetadata("EmptyParameterInInnerAnnonymousFunction.after.kt")
            public void testEmptyParameterInInnerAnnonymousFunction() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInInnerAnnonymousFunction.after.kt");
            }

            @TestMetadata("EmptyParameterInInnerAnnonymousFunction2.after.kt")
            public void testEmptyParameterInInnerAnnonymousFunction2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInInnerAnnonymousFunction2.after.kt");
            }

            @TestMetadata("EmptyParameterInSecondaryConstructor.after.kt")
            public void testEmptyParameterInSecondaryConstructor() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInSecondaryConstructor.after.kt");
            }

            @TestMetadata("EmptyParameterInSecondaryConstructor2.after.kt")
            public void testEmptyParameterInSecondaryConstructor2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInSecondaryConstructor2.after.kt");
            }

            @TestMetadata("EmptyParameterInSetter.after.kt")
            public void testEmptyParameterInSetter() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInSetter.after.kt");
            }

            @TestMetadata("EmptyParameterInSetter2.after.kt")
            public void testEmptyParameterInSetter2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInSetter2.after.kt");
            }

            @TestMetadata("EmptyParameters.after.kt")
            public void testEmptyParameters() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameters.after.kt");
            }

            @TestMetadata("EmptyParameters2.after.kt")
            public void testEmptyParameters2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameters2.after.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/emptyParenthesisInBinaryExpression")
        public static class EmptyParenthesisInBinaryExpression extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("AssignmentAfterEq.after.kt")
            public void testAssignmentAfterEq() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/AssignmentAfterEq.after.kt");
            }

            @TestMetadata("BinaryWithTypeExpressions.after.kt")
            public void testBinaryWithTypeExpressions() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/BinaryWithTypeExpressions.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByArrayAccess.after.kt")
            public void testEmptyArgumentInCallByArrayAccess() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/EmptyArgumentInCallByArrayAccess.after.kt");
            }

            @TestMetadata("EmptyArgumentInCallByDeclaration.after.kt")
            public void testEmptyArgumentInCallByDeclaration() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/EmptyArgumentInCallByDeclaration.after.kt");
            }

            @TestMetadata("InBinaryExpressionInMiddle.after.kt")
            public void testInBinaryExpressionInMiddle() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InBinaryExpressionInMiddle.after.kt");
            }

            @TestMetadata("InBinaryExpressionUnfinished.after.kt")
            public void testInBinaryExpressionUnfinished() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InBinaryExpressionUnfinished.after.kt");
            }

            @TestMetadata("InBinaryExpressionUnfinishedInIf.after.kt")
            public void testInBinaryExpressionUnfinishedInIf() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InBinaryExpressionUnfinishedInIf.after.kt");
            }

            @TestMetadata("InBinaryExpressionsBeforeCloseParenthesis.after.kt")
            public void testInBinaryExpressionsBeforeCloseParenthesis() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InBinaryExpressionsBeforeCloseParenthesis.after.kt");
            }

            @TestMetadata("InExpressionsParentheses.after.kt")
            public void testInExpressionsParentheses() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InExpressionsParentheses.after.kt");
            }

            @TestMetadata("InExpressionsParentheses2.after.kt")
            public void testInExpressionsParentheses2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InExpressionsParentheses2.after.kt");
            }

            @TestMetadata("InExpressionsParentheses3.after.kt")
            public void testInExpressionsParentheses3() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InExpressionsParentheses3.after.kt");
            }

            @TestMetadata("InExpressionsParentheses4.after.kt")
            public void testInExpressionsParentheses4() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InExpressionsParentheses4.after.kt");
            }

            @TestMetadata("InExpressionsParenthesesBeforeOperand.after.kt")
            public void testInExpressionsParenthesesBeforeOperand() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InExpressionsParenthesesBeforeOperand.after.kt");
            }

            @TestMetadata("IsExpressionAfterIs.after.kt")
            public void testIsExpressionAfterIs() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/IsExpressionAfterIs.after.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/expressionBody")
        public static class ExpressionBody extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("AfterFunctionWithExplicitType.after.kt")
            public void testAfterFunctionWithExplicitType() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterFunctionWithExplicitType.after.kt");
            }

            @TestMetadata("AfterFunctionWithInference.after.kt")
            public void testAfterFunctionWithInference() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterFunctionWithInference.after.kt");
            }

            @TestMetadata("AfterFunctionWithTypeParameter.after.kt")
            public void testAfterFunctionWithTypeParameter() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterFunctionWithTypeParameter.after.kt");
            }

            @TestMetadata("AfterMultideclaration.after.kt")
            public void testAfterMultideclaration() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterMultideclaration.after.kt");
            }

            @TestMetadata("AfterMutableProperty.after.kt")
            public void testAfterMutableProperty() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterMutableProperty.after.kt");
            }

            @TestMetadata("AfterPropertyWithExplicitType.after.kt")
            public void testAfterPropertyWithExplicitType() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterPropertyWithExplicitType.after.kt");
            }

            @TestMetadata("AfterPropertyWithInference.after.kt")
            public void testAfterPropertyWithInference() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterPropertyWithInference.after.kt");
            }

            @TestMetadata("AfterPropertyWithReceiver.after.kt")
            public void testAfterPropertyWithReceiver() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterPropertyWithReceiver.after.kt");
            }

            @TestMetadata("AfterPropertyWithTypeParameterReceiver.after.kt")
            public void testAfterPropertyWithTypeParameterReceiver() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterPropertyWithTypeParameterReceiver.after.kt");
            }

            @TestMetadata("FunctionWithExplicitType.after.kt")
            public void testFunctionWithExplicitType() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/FunctionWithExplicitType.after.kt");
            }

            @TestMetadata("FunctionWithInference.after.kt")
            public void testFunctionWithInference() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/FunctionWithInference.after.kt");
            }

            @TestMetadata("FunctionWithTypeParameter.after.kt")
            public void testFunctionWithTypeParameter() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/FunctionWithTypeParameter.after.kt");
            }

            @TestMetadata("Multideclaration.after.kt")
            public void testMultideclaration() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/Multideclaration.after.kt");
            }

            @TestMetadata("MutableProperty.after.kt")
            public void testMutableProperty() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/MutableProperty.after.kt");
            }

            @TestMetadata("PropertyWithExplicitType.after.kt")
            public void testPropertyWithExplicitType() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/PropertyWithExplicitType.after.kt");
            }

            @TestMetadata("PropertyWithInference.after.kt")
            public void testPropertyWithInference() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/PropertyWithInference.after.kt");
            }

            @TestMetadata("PropertyWithReceiver.after.kt")
            public void testPropertyWithReceiver() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/PropertyWithReceiver.after.kt");
            }

            @TestMetadata("PropertyWithTypeParameterReceiver.after.kt")
            public void testPropertyWithTypeParameterReceiver() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/PropertyWithTypeParameterReceiver.after.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/script")
        public static class Script extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("ScriptAfterClosingBrace.after.kts")
            public void testScriptAfterClosingBrace() throws Exception {
                runTest("testData/indentationOnNewline/script/ScriptAfterClosingBrace.after.kts");
            }

            @TestMetadata("ScriptAfterExpression.after.kts")
            public void testScriptAfterExpression() throws Exception {
                runTest("testData/indentationOnNewline/script/ScriptAfterExpression.after.kts");
            }

            @TestMetadata("ScriptAfterFun.after.kts")
            public void testScriptAfterFun() throws Exception {
                runTest("testData/indentationOnNewline/script/ScriptAfterFun.after.kts");
            }

            @TestMetadata("ScriptAfterImport.after.kts")
            public void testScriptAfterImport() throws Exception {
                runTest("testData/indentationOnNewline/script/ScriptAfterImport.after.kts");
            }

            @TestMetadata("ScriptBetweenFunctionCalls.after.kts")
            public void testScriptBetweenFunctionCalls() throws Exception {
                runTest("testData/indentationOnNewline/script/ScriptBetweenFunctionCalls.after.kts");
            }

            @TestMetadata("ScriptInsideFun.after.kts")
            public void testScriptInsideFun() throws Exception {
                runTest("testData/indentationOnNewline/script/ScriptInsideFun.after.kts");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/templates")
        public static class Templates extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            @TestMetadata("LargeFileWithStringTemplate.after.kt")
            public void testLargeFileWithStringTemplate() throws Exception {
                runTest("testData/indentationOnNewline/templates/LargeFileWithStringTemplate.after.kt");
            }

            @TestMetadata("TemplateEntryClose.after.kt")
            public void testTemplateEntryClose() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryClose.after.kt");
            }

            @TestMetadata("TemplateEntryClose2.after.kt")
            public void testTemplateEntryClose2() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryClose2.after.kt");
            }

            @TestMetadata("TemplateEntryClose3.after.kt")
            public void testTemplateEntryClose3() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryClose3.after.kt");
            }

            @TestMetadata("TemplateEntryClose4.after.kt")
            public void testTemplateEntryClose4() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryClose4.after.kt");
            }

            @TestMetadata("TemplateEntryClose5.after.kt")
            public void testTemplateEntryClose5() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryClose5.after.kt");
            }

            @TestMetadata("TemplateEntryClose6.after.kt")
            public void testTemplateEntryClose6() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryClose6.after.kt");
            }

            @TestMetadata("TemplateEntryClose7.after.kt")
            public void testTemplateEntryClose7() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryClose7.after.kt");
            }

            @TestMetadata("TemplateEntryCloseInMultilineString.after.kt")
            public void testTemplateEntryCloseInMultilineString() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryCloseInMultilineString.after.kt");
            }

            @TestMetadata("TemplateEntryCloseInMultilineString2.after.kt")
            public void testTemplateEntryCloseInMultilineString2() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryCloseInMultilineString2.after.kt");
            }

            @TestMetadata("TemplateEntryCloseInMultilineString3.after.kt")
            public void testTemplateEntryCloseInMultilineString3() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryCloseInMultilineString3.after.kt");
            }

            @TestMetadata("TemplateEntryOpen.after.kt")
            public void testTemplateEntryOpen() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpen.after.kt");
            }

            @TestMetadata("TemplateEntryOpen2.after.kt")
            public void testTemplateEntryOpen2() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpen2.after.kt");
            }

            @TestMetadata("TemplateEntryOpenInMultilineString.after.kt")
            public void testTemplateEntryOpenInMultilineString() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenInMultilineString.after.kt");
            }

            @TestMetadata("TemplateEntryOpenInMultilineString2.after.kt")
            public void testTemplateEntryOpenInMultilineString2() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenInMultilineString2.after.kt");
            }

            @TestMetadata("TemplateEntryOpenInMultilineString3.after.kt")
            public void testTemplateEntryOpenInMultilineString3() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenInMultilineString3.after.kt");
            }

            @TestMetadata("TemplateEntryOpenWithComment.after.kt")
            public void testTemplateEntryOpenWithComment() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenWithComment.after.kt");
            }

            @TestMetadata("TemplateEntryOpenWithComment2.after.kt")
            public void testTemplateEntryOpenWithComment2() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenWithComment2.after.kt");
            }

            @TestMetadata("TemplateEntryOpenWithoutContent.after.kt")
            public void testTemplateEntryOpenWithoutContent() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenWithoutContent.after.kt");
            }

            @TestMetadata("TemplateEntryOpenWithoutContent2.after.kt")
            public void testTemplateEntryOpenWithoutContent2() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenWithoutContent2.after.kt");
            }

            @TestMetadata("TemplateEntryOpenWithoutContent3.after.kt")
            public void testTemplateEntryOpenWithoutContent3() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenWithoutContent3.after.kt");
            }

            @TestMetadata("TemplateEntryOpenWithoutContent4.after.kt")
            public void testTemplateEntryOpenWithoutContent4() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenWithoutContent4.after.kt");
            }

            @TestMetadata("TemplateEntryOpenWithoutContent5.after.kt")
            public void testTemplateEntryOpenWithoutContent5() throws Exception {
                runTest("testData/indentationOnNewline/templates/TemplateEntryOpenWithoutContent5.after.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/indentationOnNewline")
    public static class InvertedSettings extends AbstractTypingIndentationTestBase {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doNewlineTestWithInvert, this, testDataFilePath);
        }

        @TestMetadata("ArgumentListNormalIndent.after.inv.kt")
        public void testArgumentListNormalIndent() throws Exception {
            runTest("testData/indentationOnNewline/ArgumentListNormalIndent.after.inv.kt");
        }

        @TestMetadata("HigherOrderFunction2.after.inv.kt")
        public void testHigherOrderFunction2() throws Exception {
            runTest("testData/indentationOnNewline/HigherOrderFunction2.after.inv.kt");
        }

        @TestMetadata("InDelegationListAfterColon.after.inv.kt")
        public void testInDelegationListAfterColon() throws Exception {
            runTest("testData/indentationOnNewline/InDelegationListAfterColon.after.inv.kt");
        }

        @TestMetadata("InDelegationListAfterComma.after.inv.kt")
        public void testInDelegationListAfterComma() throws Exception {
            runTest("testData/indentationOnNewline/InDelegationListAfterComma.after.inv.kt");
        }

        @TestMetadata("InDelegationListNotEmpty.after.inv.kt")
        public void testInDelegationListNotEmpty() throws Exception {
            runTest("testData/indentationOnNewline/InDelegationListNotEmpty.after.inv.kt");
        }

        @TestMetadata("InEnumAfterSemicolon.after.inv.kt")
        public void testInEnumAfterSemicolon() throws Exception {
            runTest("testData/indentationOnNewline/InEnumAfterSemicolon.after.inv.kt");
        }

        @TestMetadata("InEnumInitializerListAfterComma.after.inv.kt")
        public void testInEnumInitializerListAfterComma() throws Exception {
            runTest("testData/indentationOnNewline/InEnumInitializerListAfterComma.after.inv.kt");
        }

        @TestMetadata("InEnumInitializerListNotEmpty.after.inv.kt")
        public void testInEnumInitializerListNotEmpty() throws Exception {
            runTest("testData/indentationOnNewline/InEnumInitializerListNotEmpty.after.inv.kt");
        }

        @TestMetadata("SettingAlignMultilineParametersInCalls.after.inv.kt")
        public void testSettingAlignMultilineParametersInCalls() throws Exception {
            runTest("testData/indentationOnNewline/SettingAlignMultilineParametersInCalls.after.inv.kt");
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/elvis")
        public static class Elvis extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTestWithInvert, this, testDataFilePath);
            }

            @TestMetadata("AfterElvis.after.inv.kt")
            public void testAfterElvis() throws Exception {
                runTest("testData/indentationOnNewline/elvis/AfterElvis.after.inv.kt");
            }

            @TestMetadata("AfterElvis2.after.inv.kt")
            public void testAfterElvis2() throws Exception {
                runTest("testData/indentationOnNewline/elvis/AfterElvis2.after.inv.kt");
            }

            @TestMetadata("AfterElvisInBinaryExpression.after.inv.kt")
            public void testAfterElvisInBinaryExpression() throws Exception {
                runTest("testData/indentationOnNewline/elvis/AfterElvisInBinaryExpression.after.inv.kt");
            }

            @TestMetadata("BeforeElvis.after.inv.kt")
            public void testBeforeElvis() throws Exception {
                runTest("testData/indentationOnNewline/elvis/BeforeElvis.after.inv.kt");
            }

            @TestMetadata("BeforeElvisInBinaryExpression.after.inv.kt")
            public void testBeforeElvisInBinaryExpression() throws Exception {
                runTest("testData/indentationOnNewline/elvis/BeforeElvisInBinaryExpression.after.inv.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/emptyParameters")
        public static class EmptyParameters extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTestWithInvert, this, testDataFilePath);
            }

            @TestMetadata("EmptyConditionInDoWhile.after.inv.kt")
            public void testEmptyConditionInDoWhile() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInDoWhile.after.inv.kt");
            }

            @TestMetadata("EmptyConditionInFor.after.inv.kt")
            public void testEmptyConditionInFor() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInFor.after.inv.kt");
            }

            @TestMetadata("EmptyConditionInIf.after.inv.kt")
            public void testEmptyConditionInIf() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInIf.after.inv.kt");
            }

            @TestMetadata("EmptyConditionInWhen.after.inv.kt")
            public void testEmptyConditionInWhen() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInWhen.after.inv.kt");
            }

            @TestMetadata("EmptyConditionInWhile.after.inv.kt")
            public void testEmptyConditionInWhile() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyConditionInWhile.after.inv.kt");
            }

            @TestMetadata("EmptyParameterInDestructuringDeclaration.after.inv.kt")
            public void testEmptyParameterInDestructuringDeclaration() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInDestructuringDeclaration.after.inv.kt");
            }

            @TestMetadata("EmptyParameterInDestructuringDeclaration2.after.inv.kt")
            public void testEmptyParameterInDestructuringDeclaration2() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInDestructuringDeclaration2.after.inv.kt");
            }

            @TestMetadata("EmptyParameterInDestructuringDeclaration3.after.inv.kt")
            public void testEmptyParameterInDestructuringDeclaration3() throws Exception {
                runTest("testData/indentationOnNewline/emptyParameters/EmptyParameterInDestructuringDeclaration3.after.inv.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/emptyParenthesisInBinaryExpression")
        public static class EmptyParenthesisInBinaryExpression extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTestWithInvert, this, testDataFilePath);
            }

            @TestMetadata("AssignmentAfterEq.after.inv.kt")
            public void testAssignmentAfterEq() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/AssignmentAfterEq.after.inv.kt");
            }

            @TestMetadata("BinaryWithTypeExpressions.after.inv.kt")
            public void testBinaryWithTypeExpressions() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/BinaryWithTypeExpressions.after.inv.kt");
            }

            @TestMetadata("EmptyArgumentInCallByArrayAccess.after.inv.kt")
            public void testEmptyArgumentInCallByArrayAccess() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/EmptyArgumentInCallByArrayAccess.after.inv.kt");
            }

            @TestMetadata("EmptyArgumentInCallByDeclaration.after.inv.kt")
            public void testEmptyArgumentInCallByDeclaration() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/EmptyArgumentInCallByDeclaration.after.inv.kt");
            }

            @TestMetadata("InBinaryExpressionInMiddle.after.inv.kt")
            public void testInBinaryExpressionInMiddle() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InBinaryExpressionInMiddle.after.inv.kt");
            }

            @TestMetadata("InBinaryExpressionUnfinished.after.inv.kt")
            public void testInBinaryExpressionUnfinished() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InBinaryExpressionUnfinished.after.inv.kt");
            }

            @TestMetadata("InBinaryExpressionUnfinishedInIf.after.inv.kt")
            public void testInBinaryExpressionUnfinishedInIf() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InBinaryExpressionUnfinishedInIf.after.inv.kt");
            }

            @TestMetadata("InBinaryExpressionsBeforeCloseParenthesis.after.inv.kt")
            public void testInBinaryExpressionsBeforeCloseParenthesis() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InBinaryExpressionsBeforeCloseParenthesis.after.inv.kt");
            }

            @TestMetadata("InExpressionsParenthesesBeforeOperand.after.inv.kt")
            public void testInExpressionsParenthesesBeforeOperand() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/InExpressionsParenthesesBeforeOperand.after.inv.kt");
            }

            @TestMetadata("IsExpressionAfterIs.after.inv.kt")
            public void testIsExpressionAfterIs() throws Exception {
                runTest("testData/indentationOnNewline/emptyParenthesisInBinaryExpression/IsExpressionAfterIs.after.inv.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/indentationOnNewline/expressionBody")
        public static class ExpressionBody extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTestWithInvert, this, testDataFilePath);
            }

            @TestMetadata("AfterFunctionWithExplicitType.after.inv.kt")
            public void testAfterFunctionWithExplicitType() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterFunctionWithExplicitType.after.inv.kt");
            }

            @TestMetadata("AfterFunctionWithInference.after.inv.kt")
            public void testAfterFunctionWithInference() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterFunctionWithInference.after.inv.kt");
            }

            @TestMetadata("AfterFunctionWithTypeParameter.after.inv.kt")
            public void testAfterFunctionWithTypeParameter() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterFunctionWithTypeParameter.after.inv.kt");
            }

            @TestMetadata("AfterMultideclaration.after.inv.kt")
            public void testAfterMultideclaration() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterMultideclaration.after.inv.kt");
            }

            @TestMetadata("AfterMutableProperty.after.inv.kt")
            public void testAfterMutableProperty() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterMutableProperty.after.inv.kt");
            }

            @TestMetadata("AfterPropertyWithExplicitType.after.inv.kt")
            public void testAfterPropertyWithExplicitType() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterPropertyWithExplicitType.after.inv.kt");
            }

            @TestMetadata("AfterPropertyWithInference.after.inv.kt")
            public void testAfterPropertyWithInference() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterPropertyWithInference.after.inv.kt");
            }

            @TestMetadata("AfterPropertyWithReceiver.after.inv.kt")
            public void testAfterPropertyWithReceiver() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterPropertyWithReceiver.after.inv.kt");
            }

            @TestMetadata("AfterPropertyWithTypeParameterReceiver.after.inv.kt")
            public void testAfterPropertyWithTypeParameterReceiver() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/AfterPropertyWithTypeParameterReceiver.after.inv.kt");
            }

            @TestMetadata("FunctionWithExplicitType.after.inv.kt")
            public void testFunctionWithExplicitType() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/FunctionWithExplicitType.after.inv.kt");
            }

            @TestMetadata("FunctionWithInference.after.inv.kt")
            public void testFunctionWithInference() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/FunctionWithInference.after.inv.kt");
            }

            @TestMetadata("FunctionWithTypeParameter.after.inv.kt")
            public void testFunctionWithTypeParameter() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/FunctionWithTypeParameter.after.inv.kt");
            }

            @TestMetadata("Multideclaration.after.inv.kt")
            public void testMultideclaration() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/Multideclaration.after.inv.kt");
            }

            @TestMetadata("MutableProperty.after.inv.kt")
            public void testMutableProperty() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/MutableProperty.after.inv.kt");
            }

            @TestMetadata("PropertyWithExplicitType.after.inv.kt")
            public void testPropertyWithExplicitType() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/PropertyWithExplicitType.after.inv.kt");
            }

            @TestMetadata("PropertyWithInference.after.inv.kt")
            public void testPropertyWithInference() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/PropertyWithInference.after.inv.kt");
            }

            @TestMetadata("PropertyWithReceiver.after.inv.kt")
            public void testPropertyWithReceiver() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/PropertyWithReceiver.after.inv.kt");
            }

            @TestMetadata("PropertyWithTypeParameterReceiver.after.inv.kt")
            public void testPropertyWithTypeParameterReceiver() throws Exception {
                runTest("testData/indentationOnNewline/expressionBody/PropertyWithTypeParameterReceiver.after.inv.kt");
            }
        }
    }
}
