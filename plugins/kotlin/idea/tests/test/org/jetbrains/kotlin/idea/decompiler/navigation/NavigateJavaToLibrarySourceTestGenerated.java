// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.decompiler.navigation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/decompiler/navigation/userJavaCode")
public class NavigateJavaToLibrarySourceTestGenerated extends AbstractNavigateJavaToLibrarySourceTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("ClassAndConstuctors.java")
    public void testClassAndConstuctors() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/ClassAndConstuctors.java");
    }

    @TestMetadata("ClassWithConstructor.java")
    public void testClassWithConstructor() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/ClassWithConstructor.java");
    }

    @TestMetadata("EnumElements.java")
    public void testEnumElements() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/EnumElements.java");
    }

    @TestMetadata("ExplicitOverloads.java")
    public void testExplicitOverloads() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/ExplicitOverloads.java");
    }

    @TestMetadata("ExtensionFunction.java")
    public void testExtensionFunction() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/ExtensionFunction.java");
    }

    @TestMetadata("ExtensionProperty.java")
    public void testExtensionProperty() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/ExtensionProperty.java");
    }

    @TestMetadata("FunWithTypeParam.java")
    public void testFunWithTypeParam() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/FunWithTypeParam.java");
    }

    @TestMetadata("GenericFunctionWithArgs.java")
    public void testGenericFunctionWithArgs() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/GenericFunctionWithArgs.java");
    }

    @TestMetadata("GenericFunctionWithInferred.java")
    public void testGenericFunctionWithInferred() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/GenericFunctionWithInferred.java");
    }

    @TestMetadata("GlobalProperty.java")
    public void testGlobalProperty() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/GlobalProperty.java");
    }

    @TestMetadata("NamedObject.java")
    public void testNamedObject() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/NamedObject.java");
    }

    @TestMetadata("OverloadedFun.java")
    public void testOverloadedFun() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/OverloadedFun.java");
    }

    @TestMetadata("RenamedElements.java")
    public void testRenamedElements() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/RenamedElements.java");
    }

    @TestMetadata("WithCompanionObject.java")
    public void testWithCompanionObject() throws Exception {
        runTest("testData/decompiler/navigation/userJavaCode/WithCompanionObject.java");
    }
}
