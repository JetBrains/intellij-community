// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.quickfix;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/multiModuleQuickFix")
public abstract class QuickFixMultiModuleTestGenerated extends AbstractQuickFixMultiModuleTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/accessibilityChecker")
    public static class AccessibilityChecker extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationOnClass")
        public void testAnnotationOnClass() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/annotationOnClass/");
        }

        @TestMetadata("classPrimaryConstructor")
        public void testClassPrimaryConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/classPrimaryConstructor/");
        }

        @TestMetadata("classSecondaryConstructor")
        public void testClassSecondaryConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/classSecondaryConstructor/");
        }

        @TestMetadata("classUpperBounds")
        public void testClassUpperBounds() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/classUpperBounds/");
        }

        @TestMetadata("errorType")
        public void testErrorType() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/errorType/");
        }

        @TestMetadata("memberFunction")
        public void testMemberFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/memberFunction/");
        }

        @TestMetadata("memberFunctionAndNestedClass")
        public void testMemberFunctionAndNestedClass() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/memberFunctionAndNestedClass/");
        }

        @TestMetadata("memberFunctionParentType")
        public void testMemberFunctionParentType() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/memberFunctionParentType/");
        }

        @TestMetadata("memberFunctionParentType2")
        public void testMemberFunctionParentType2() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/memberFunctionParentType2/");
        }

        @TestMetadata("nestedClassWithTypeParam")
        public void testNestedClassWithTypeParam() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/nestedClassWithTypeParam/");
        }

        @TestMetadata("topLevelFunParameter")
        public void testTopLevelFunParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/topLevelFunParameter/");
        }

        @TestMetadata("topLevelFunReturnType")
        public void testTopLevelFunReturnType() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/topLevelFunReturnType/");
        }

        @TestMetadata("topLevelFunTypeParameter")
        public void testTopLevelFunTypeParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/topLevelFunTypeParameter/");
        }

        @TestMetadata("topLevelFunUpperBounds")
        public void testTopLevelFunUpperBounds() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/topLevelFunUpperBounds/");
        }

        @TestMetadata("topLevelFunUpperBounds2")
        public void testTopLevelFunUpperBounds2() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/topLevelFunUpperBounds2/");
        }

        @TestMetadata("topLevelProperty")
        public void testTopLevelProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/topLevelProperty/");
        }

        @TestMetadata("topLevelPropertyTypeParam2")
        public void testTopLevelPropertyTypeParam2() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/topLevelPropertyTypeParam2/");
        }

        @TestMetadata("topLevelPropertyTypeParamBound")
        public void testTopLevelPropertyTypeParamBound() throws Exception {
            runTest("testData/multiModuleQuickFix/accessibilityChecker/topLevelPropertyTypeParamBound/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/addDependency")
    public static class AddDependency extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class")
        public void testClass() throws Exception {
            runTest("testData/multiModuleQuickFix/addDependency/class/");
        }

        @TestMetadata("topLevelFunction")
        public void testTopLevelFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/addDependency/topLevelFunction/");
        }

        @TestMetadata("topLevelFunction2")
        public void testTopLevelFunction2() throws Exception {
            runTest("testData/multiModuleQuickFix/addDependency/topLevelFunction2/");
        }

        @TestMetadata("topLevelProperty")
        public void testTopLevelProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/addDependency/topLevelProperty/");
        }

        @TestMetadata("topLevelProperty2")
        public void testTopLevelProperty2() throws Exception {
            runTest("testData/multiModuleQuickFix/addDependency/topLevelProperty2/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/addMissingActualMembers")
    public static class AddMissingActualMembers extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("classFunction")
        public void testClassFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/classFunction/");
        }

        @TestMetadata("classFunctionSameSignature")
        public void testClassFunctionSameSignature() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/classFunctionSameSignature/");
        }

        @TestMetadata("classFunctionWithConstructor")
        public void testClassFunctionWithConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/classFunctionWithConstructor/");
        }

        @TestMetadata("classFunctionWithConstructorAndParameters")
        public void testClassFunctionWithConstructorAndParameters() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/classFunctionWithConstructorAndParameters/");
        }

        @TestMetadata("classFunctionWithIncompatibleConstructor")
        public void testClassFunctionWithIncompatibleConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/classFunctionWithIncompatibleConstructor/");
        }

        @TestMetadata("classOverloadedFunction")
        public void testClassOverloadedFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/classOverloadedFunction/");
        }

        @TestMetadata("classPropertyInConstructor")
        public void testClassPropertyInConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/classPropertyInConstructor/");
        }

        @TestMetadata("classSomeProperties")
        public void testClassSomeProperties() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/classSomeProperties/");
        }

        @TestMetadata("classWithIncompilableFunction")
        public void testClassWithIncompilableFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/classWithIncompilableFunction/");
        }

        @TestMetadata("companionAbsence")
        public void testCompanionAbsence() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/companionAbsence/");
        }

        @TestMetadata("membersWithIncorrectType")
        public void testMembersWithIncorrectType() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/membersWithIncorrectType/");
        }

        @TestMetadata("primaryConstructorAbsence")
        public void testPrimaryConstructorAbsence() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/primaryConstructorAbsence/");
        }

        @TestMetadata("propertyWithIncorrectType")
        public void testPropertyWithIncorrectType() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/propertyWithIncorrectType/");
        }

        @TestMetadata("secondaryConstructorAbsence")
        public void testSecondaryConstructorAbsence() throws Exception {
            runTest("testData/multiModuleQuickFix/addMissingActualMembers/secondaryConstructorAbsence/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/addThrowAnnotation")
    public static class AddThrowAnnotation extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("common")
        public void testCommon() throws Exception {
            runTest("testData/multiModuleQuickFix/addThrowAnnotation/common/");
        }

        @TestMetadata("js")
        public void testJs() throws Exception {
            runTest("testData/multiModuleQuickFix/addThrowAnnotation/js/");
        }

        @TestMetadata("jvm")
        public void testJvm() throws Exception {
            runTest("testData/multiModuleQuickFix/addThrowAnnotation/jvm/");
        }

        @TestMetadata("jvmWithoutStdlib")
        public void testJvmWithoutStdlib() throws Exception {
            runTest("testData/multiModuleQuickFix/addThrowAnnotation/jvmWithoutStdlib/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/canSealedSubClassBeObject")
    public static class CanSealedSubClassBeObject extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("notConvertActualSubClass")
        public void testNotConvertActualSubClass() throws Exception {
            runTest("testData/multiModuleQuickFix/canSealedSubClassBeObject/notConvertActualSubClass/");
        }

        @TestMetadata("notConvertExpectSubClass")
        public void testNotConvertExpectSubClass() throws Exception {
            runTest("testData/multiModuleQuickFix/canSealedSubClassBeObject/notConvertExpectSubClass/");
        }

        @TestMetadata("notConvertImplicitExpectSubClass")
        public void testNotConvertImplicitExpectSubClass() throws Exception {
            runTest("testData/multiModuleQuickFix/canSealedSubClassBeObject/notConvertImplicitExpectSubClass/");
        }

        @TestMetadata("notGenerateEqualsAndHashCodeForSealedInCommon")
        public void testNotGenerateEqualsAndHashCodeForSealedInCommon() throws Exception {
            runTest("testData/multiModuleQuickFix/canSealedSubClassBeObject/notGenerateEqualsAndHashCodeForSealedInCommon/");
        }

        @TestMetadata("notGenerateEqualsAndHashCodeForSealedInJvmForExpect")
        public void testNotGenerateEqualsAndHashCodeForSealedInJvmForExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/canSealedSubClassBeObject/notGenerateEqualsAndHashCodeForSealedInJvmForExpect/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/changeModifier")
    public static class ChangeModifier extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("internal")
        public void testInternal() throws Exception {
            runTest("testData/multiModuleQuickFix/changeModifier/internal/");
        }

        @TestMetadata("public")
        public void testPublic() throws Exception {
            runTest("testData/multiModuleQuickFix/changeModifier/public/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/changeSignature")
    public static class ChangeSignature extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("actual")
        public void testActual() throws Exception {
            runTest("testData/multiModuleQuickFix/changeSignature/actual/");
        }

        @TestMetadata("expect")
        public void testExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/changeSignature/expect/");
        }

        @TestMetadata("override")
        public void testOverride() throws Exception {
            runTest("testData/multiModuleQuickFix/changeSignature/override/");
        }

        @TestMetadata("override2")
        public void testOverride2() throws Exception {
            runTest("testData/multiModuleQuickFix/changeSignature/override2/");
        }

        @TestMetadata("override3")
        public void testOverride3() throws Exception {
            runTest("testData/multiModuleQuickFix/changeSignature/override3/");
        }

        @TestMetadata("override4")
        public void testOverride4() throws Exception {
            runTest("testData/multiModuleQuickFix/changeSignature/override4/");
        }

        @TestMetadata("override5")
        public void testOverride5() throws Exception {
            runTest("testData/multiModuleQuickFix/changeSignature/override5/");
        }

        @TestMetadata("override6")
        public void testOverride6() throws Exception {
            runTest("testData/multiModuleQuickFix/changeSignature/override6/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/createActual")
    public static class CreateActual extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstract")
        public void testAbstract() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/abstract/");
        }

        @TestMetadata("abstractClassWithJdk")
        public void testAbstractClassWithJdk() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/abstractClassWithJdk/");
        }

        @TestMetadata("annotation")
        public void testAnnotation() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/annotation/");
        }

        @TestMetadata("annotationOptionalExpectation")
        public void testAnnotationOptionalExpectation() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/annotationOptionalExpectation/");
        }

        @TestMetadata("annotationOptionalExpectationNoDir")
        public void testAnnotationOptionalExpectationNoDir() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/annotationOptionalExpectationNoDir/");
        }

        @TestMetadata("annotationWithComment")
        public void testAnnotationWithComment() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/annotationWithComment/");
        }

        @TestMetadata("class")
        public void testClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/class/");
        }

        @TestMetadata("classWithBase")
        public void testClassWithBase() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/classWithBase/");
        }

        @TestMetadata("classWithJdk")
        public void testClassWithJdk() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/classWithJdk/");
        }

        @TestMetadata("classWithSuperTypeFromOtherPackage")
        public void testClassWithSuperTypeFromOtherPackage() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/classWithSuperTypeFromOtherPackage/");
        }

        @TestMetadata("constructorWithDelegation")
        public void testConstructorWithDelegation() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/constructorWithDelegation/");
        }

        @TestMetadata("constructorWithJdk")
        public void testConstructorWithJdk() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/constructorWithJdk/");
        }

        @TestMetadata("createWithImport")
        public void testCreateWithImport() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/createWithImport/");
        }

        @TestMetadata("defaultParameterInExpected")
        public void testDefaultParameterInExpected() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/defaultParameterInExpected/");
        }

        @TestMetadata("defaultParameterInExpectedClass")
        public void testDefaultParameterInExpectedClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/defaultParameterInExpectedClass/");
        }

        @TestMetadata("defaultParameterInExpectedConstructor")
        public void testDefaultParameterInExpectedConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/defaultParameterInExpectedConstructor/");
        }

        @TestMetadata("enum")
        public void testEnum() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/enum/");
        }

        @TestMetadata("expectSealedInCommonWhen")
        public void testExpectSealedInCommonWhen() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/expectSealedInCommonWhen/");
        }

        @TestMetadata("function")
        public void testFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/function/");
        }

        @TestMetadata("functionSameFile")
        public void testFunctionSameFile() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/functionSameFile/");
        }

        @TestMetadata("inlineClass")
        public void testInlineClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/inlineClass/");
        }

        @TestMetadata("interface")
        public void testInterface() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/interface/");
        }

        @TestMetadata("nested")
        public void testNested() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/nested/");
        }

        @TestMetadata("object")
        public void testObject() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/object/");
        }

        @TestMetadata("package")
        public void testPackage() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/package/");
        }

        @TestMetadata("packageIncorrect")
        public void testPackageIncorrect() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/packageIncorrect/");
        }

        @TestMetadata("packageIncorrectEmpty")
        public void testPackageIncorrectEmpty() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/packageIncorrectEmpty/");
        }

        @TestMetadata("primaryConstructor")
        public void testPrimaryConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/primaryConstructor/");
        }

        @TestMetadata("property")
        public void testProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/property/");
        }

        @TestMetadata("sealed")
        public void testSealed() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/sealed/");
        }

        @TestMetadata("sealedInCommonWhen")
        public void testSealedInCommonWhen() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/sealedInCommonWhen/");
        }

        @TestMetadata("sealedSubclass")
        public void testSealedSubclass() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/sealedSubclass/");
        }

        @TestMetadata("valueClass")
        public void testValueClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/valueClass/");
        }

        @TestMetadata("valueClassWithGenerics")
        public void testValueClassWithGenerics() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/valueClassWithGenerics/");
        }

        @TestMetadata("withFakeJvm")
        public void testWithFakeJvm() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/withFakeJvm/");
        }

        @TestMetadata("withRootPackage")
        public void testWithRootPackage() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/withRootPackage/");
        }

        @TestMetadata("withTest")
        public void testWithTest() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/withTest/");
        }

        @TestMetadata("withTestDummy")
        public void testWithTestDummy() throws Exception {
            runTest("testData/multiModuleQuickFix/createActual/withTestDummy/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/createActualExplicitApi")
    public static class CreateActualExplicitApi extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class")
        public void testClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createActualExplicitApi/class/");
        }

        @TestMetadata("function")
        public void testFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/createActualExplicitApi/function/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/createExpect")
    public static class CreateExpect extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotation")
        public void testAnnotation() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/annotation/");
        }

        @TestMetadata("annotation2")
        public void testAnnotation2() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/annotation2/");
        }

        @TestMetadata("class")
        public void testClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/class/");
        }

        @TestMetadata("classWithAnnotation")
        public void testClassWithAnnotation() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/classWithAnnotation/");
        }

        @TestMetadata("classWithSuperClassAndTypeParameter")
        public void testClassWithSuperClassAndTypeParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/classWithSuperClassAndTypeParameter/");
        }

        @TestMetadata("classWithSuperTypeFromOtherPackage")
        public void testClassWithSuperTypeFromOtherPackage() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/classWithSuperTypeFromOtherPackage/");
        }

        @TestMetadata("commented")
        public void testCommented() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/commented/");
        }

        @TestMetadata("companion")
        public void testCompanion() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/companion/");
        }

        @TestMetadata("createWithImport")
        public void testCreateWithImport() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/createWithImport/");
        }

        @TestMetadata("dataClass")
        public void testDataClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/dataClass/");
        }

        @TestMetadata("dataObject")
        public void testDataObject() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/dataObject/");
        }

        @TestMetadata("enum")
        public void testEnum() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/enum/");
        }

        @TestMetadata("enumComplex")
        public void testEnumComplex() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/enumComplex/");
        }

        @TestMetadata("enumEmpty")
        public void testEnumEmpty() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/enumEmpty/");
        }

        @TestMetadata("funWithAccessibleAlias")
        public void testFunWithAccessibleAlias() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/funWithAccessibleAlias/");
        }

        @TestMetadata("funWithAccessibleExpansion")
        public void testFunWithAccessibleExpansion() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/funWithAccessibleExpansion/");
        }

        @TestMetadata("funWithAccessibleParameter")
        public void testFunWithAccessibleParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/funWithAccessibleParameter/");
        }

        @TestMetadata("funWithAccessibleTypeFromCommon")
        public void testFunWithAccessibleTypeFromCommon() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/funWithAccessibleTypeFromCommon/");
        }

        @TestMetadata("funWithJdk")
        public void testFunWithJdk() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/funWithJdk/");
        }

        @TestMetadata("funWithPrivateModifier")
        public void testFunWithPrivateModifier() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/funWithPrivateModifier/");
        }

        @TestMetadata("function")
        public void testFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/function/");
        }

        @TestMetadata("function2")
        public void testFunction2() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/function2/");
        }

        @TestMetadata("functionInInterface")
        public void testFunctionInInterface() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/functionInInterface/");
        }

        @TestMetadata("functionWithImplementationInInterface")
        public void testFunctionWithImplementationInInterface() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/functionWithImplementationInInterface/");
        }

        @TestMetadata("functionWithImplementationInInterface2")
        public void testFunctionWithImplementationInInterface2() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/functionWithImplementationInInterface2/");
        }

        @TestMetadata("hierarchy")
        public void testHierarchy() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/hierarchy/");
        }

        @TestMetadata("inlineClass")
        public void testInlineClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/inlineClass/");
        }

        @TestMetadata("inlineClass2")
        public void testInlineClass2() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/inlineClass2/");
        }

        @TestMetadata("innerClassWithTypeParam")
        public void testInnerClassWithTypeParam() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/innerClassWithTypeParam/");
        }

        @TestMetadata("innerClassWithTypeParam2")
        public void testInnerClassWithTypeParam2() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/innerClassWithTypeParam2/");
        }

        @TestMetadata("innerEnum")
        public void testInnerEnum() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/innerEnum/");
        }

        @TestMetadata("memberFunctionAndNestedClass")
        public void testMemberFunctionAndNestedClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/memberFunctionAndNestedClass/");
        }

        @TestMetadata("nestedClass")
        public void testNestedClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/nestedClass/");
        }

        @TestMetadata("noAccessOnMember")
        public void testNoAccessOnMember() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/noAccessOnMember/");
        }

        @TestMetadata("onMember")
        public void testOnMember() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/onMember/");
        }

        @TestMetadata("primaryConstructor")
        public void testPrimaryConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/primaryConstructor/");
        }

        @TestMetadata("property")
        public void testProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/property/");
        }

        @TestMetadata("property2")
        public void testProperty2() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/property2/");
        }

        @TestMetadata("propertyInConstructor")
        public void testPropertyInConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/propertyInConstructor/");
        }

        @TestMetadata("propertyWithConstModifier")
        public void testPropertyWithConstModifier() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/propertyWithConstModifier/");
        }

        @TestMetadata("propertyWithLateinitModifier")
        public void testPropertyWithLateinitModifier() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/propertyWithLateinitModifier/");
        }

        @TestMetadata("propertyWithPrivateModifier")
        public void testPropertyWithPrivateModifier() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/propertyWithPrivateModifier/");
        }

        @TestMetadata("sealedClass")
        public void testSealedClass() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/sealedClass/");
        }

        @TestMetadata("stdlibWithJavaAlias")
        public void testStdlibWithJavaAlias() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/stdlibWithJavaAlias/");
        }

        @TestMetadata("superTypeFromStdlib")
        public void testSuperTypeFromStdlib() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/superTypeFromStdlib/");
        }

        @TestMetadata("topLevelFunctionWithAnnotations")
        public void testTopLevelFunctionWithAnnotations() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/topLevelFunctionWithAnnotations/");
        }

        @TestMetadata("topLevelPropertyWithTypeParam")
        public void testTopLevelPropertyWithTypeParam() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/topLevelPropertyWithTypeParam/");
        }

        @TestMetadata("typeAlias")
        public void testTypeAlias() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/typeAlias/");
        }

        @TestMetadata("withAliases")
        public void testWithAliases() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withAliases/");
        }

        @TestMetadata("withAnnotations")
        public void testWithAnnotations() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withAnnotations/");
        }

        @TestMetadata("withConstructorWithParametersWithoutValVar")
        public void testWithConstructorWithParametersWithoutValVar() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withConstructorWithParametersWithoutValVar/");
        }

        @TestMetadata("withInitializer")
        public void testWithInitializer() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withInitializer/");
        }

        @TestMetadata("withPlatformNested")
        public void testWithPlatformNested() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withPlatformNested/");
        }

        @TestMetadata("withRootPackage")
        public void testWithRootPackage() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withRootPackage/");
        }

        @TestMetadata("withSecondaryConstructor")
        public void testWithSecondaryConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withSecondaryConstructor/");
        }

        @TestMetadata("withSecondaryConstructor2")
        public void testWithSecondaryConstructor2() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withSecondaryConstructor2/");
        }

        @TestMetadata("withSupertype")
        public void testWithSupertype() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withSupertype/");
        }

        @TestMetadata("withVararg")
        public void testWithVararg() throws Exception {
            runTest("testData/multiModuleQuickFix/createExpect/withVararg/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/fixNativeThrowsErrors")
    public static class FixNativeThrowsErrors extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addCancellationException1")
        public void testAddCancellationException1() throws Exception {
            runTest("testData/multiModuleQuickFix/fixNativeThrowsErrors/addCancellationException1/");
        }

        @TestMetadata("addCancellationException2")
        public void testAddCancellationException2() throws Exception {
            runTest("testData/multiModuleQuickFix/fixNativeThrowsErrors/addCancellationException2/");
        }

        @TestMetadata("addCancellationException3")
        public void testAddCancellationException3() throws Exception {
            runTest("testData/multiModuleQuickFix/fixNativeThrowsErrors/addCancellationException3/");
        }

        @TestMetadata("addCancellationException4")
        public void testAddCancellationException4() throws Exception {
            runTest("testData/multiModuleQuickFix/fixNativeThrowsErrors/addCancellationException4/");
        }

        @TestMetadata("removeEmptyThrows")
        public void testRemoveEmptyThrows() throws Exception {
            runTest("testData/multiModuleQuickFix/fixNativeThrowsErrors/removeEmptyThrows/");
        }

        @TestMetadata("removeThrowsOnIncompatibleOverride")
        public void testRemoveThrowsOnIncompatibleOverride() throws Exception {
            runTest("testData/multiModuleQuickFix/fixNativeThrowsErrors/removeThrowsOnIncompatibleOverride/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/functionTypeReceiverToParameter")
    public static class FunctionTypeReceiverToParameter extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("classFunctionConstructor")
        public void testClassFunctionConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/classFunctionConstructor/");
        }

        @TestMetadata("classFunctionParameter")
        public void testClassFunctionParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/classFunctionParameter/");
        }

        @TestMetadata("classFunctionReturn")
        public void testClassFunctionReturn() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/classFunctionReturn/");
        }

        @TestMetadata("classProperty")
        public void testClassProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/classProperty/");
        }

        @TestMetadata("functionParameter")
        public void testFunctionParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/functionParameter/");
        }

        @TestMetadata("functionReturn")
        public void testFunctionReturn() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/functionReturn/");
        }

        @TestMetadata("interfaceFunctionParameter")
        public void testInterfaceFunctionParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/interfaceFunctionParameter/");
        }

        @TestMetadata("interfaceFunctionReturn")
        public void testInterfaceFunctionReturn() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/interfaceFunctionReturn/");
        }

        @TestMetadata("interfaceProperty")
        public void testInterfaceProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/interfaceProperty/");
        }

        @TestMetadata("property")
        public void testProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/functionTypeReceiverToParameter/property/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/initializeProperty")
    public static class InitializeProperty extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("notInitializeNonActualParameterWithConstructorParameter")
        public void testNotInitializeNonActualParameterWithConstructorParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/initializeProperty/notInitializeNonActualParameterWithConstructorParameter/");
        }

        @TestMetadata("notInitializeWithConstructorParameter")
        public void testNotInitializeWithConstructorParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/initializeProperty/notInitializeWithConstructorParameter/");
        }

        @TestMetadata("notMoveNonActualParamterToActualConstructor")
        public void testNotMoveNonActualParamterToActualConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/initializeProperty/notMoveNonActualParamterToActualConstructor/");
        }

        @TestMetadata("notMoveToActualConstructor")
        public void testNotMoveToActualConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/initializeProperty/notMoveToActualConstructor/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/inlineToValue")
    public static class InlineToValue extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("commonWithJvm")
        public void testCommonWithJvm() throws Exception {
            runTest("testData/multiModuleQuickFix/inlineToValue/commonWithJvm/");
        }

        @TestMetadata("genericParameter")
        public void testGenericParameter() throws Exception {
            runTest("testData/multiModuleQuickFix/inlineToValue/genericParameter/");
        }

        @TestMetadata("JS")
        public void testJS() throws Exception {
            runTest("testData/multiModuleQuickFix/inlineToValue/JS/");
        }

        @TestMetadata("JVM")
        public void testJVM() throws Exception {
            runTest("testData/multiModuleQuickFix/inlineToValue/JVM/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/makeOverridenMemberOpen")
    public static class MakeOverridenMemberOpen extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("actual")
        public void testActual() throws Exception {
            runTest("testData/multiModuleQuickFix/makeOverridenMemberOpen/actual/");
        }

        @TestMetadata("expect")
        public void testExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/makeOverridenMemberOpen/expect/");
        }

        @TestMetadata("hasAbstract")
        public void testHasAbstract() throws Exception {
            runTest("testData/multiModuleQuickFix/makeOverridenMemberOpen/hasAbstract/");
        }

        @TestMetadata("hasOpen")
        public void testHasOpen() throws Exception {
            runTest("testData/multiModuleQuickFix/makeOverridenMemberOpen/hasOpen/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/other")
    public static class Other extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("actualImplementAsConstructorParam")
        public void testActualImplementAsConstructorParam() throws Exception {
            runTest("testData/multiModuleQuickFix/other/actualImplementAsConstructorParam/");
        }

        @TestMetadata("actualNoImplementAsConstructorParam")
        public void testActualNoImplementAsConstructorParam() throws Exception {
            runTest("testData/multiModuleQuickFix/other/actualNoImplementAsConstructorParam/");
        }

        @TestMetadata("actualWithoutExpect")
        public void testActualWithoutExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/other/actualWithoutExpect/");
        }

        @TestMetadata("addActualToClass")
        public void testAddActualToClass() throws Exception {
            runTest("testData/multiModuleQuickFix/other/addActualToClass/");
        }

        @TestMetadata("addActualToClassMember")
        public void testAddActualToClassMember() throws Exception {
            runTest("testData/multiModuleQuickFix/other/addActualToClassMember/");
        }

        @TestMetadata("addActualToTopLevelMember")
        public void testAddActualToTopLevelMember() throws Exception {
            runTest("testData/multiModuleQuickFix/other/addActualToTopLevelMember/");
        }

        @TestMetadata("addAnnotationTargetToActual")
        public void testAddAnnotationTargetToActual() throws Exception {
            runTest("testData/multiModuleQuickFix/other/addAnnotationTargetToActual/");
        }

        @TestMetadata("addAnnotationTargetToExpect")
        public void testAddAnnotationTargetToExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/other/addAnnotationTargetToExpect/");
        }

        @TestMetadata("addFunctionToCommonClassFromJavaUsage")
        public void testAddFunctionToCommonClassFromJavaUsage() throws Exception {
            runTest("testData/multiModuleQuickFix/other/addFunctionToCommonClassFromJavaUsage/");
        }

        @TestMetadata("addOperatorByActual")
        public void testAddOperatorByActual() throws Exception {
            runTest("testData/multiModuleQuickFix/other/addOperatorByActual/");
        }

        @TestMetadata("addOperatorByExpect")
        public void testAddOperatorByExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/other/addOperatorByExpect/");
        }

        @TestMetadata("cancelMakeAbstractFromActual")
        public void testCancelMakeAbstractFromActual() throws Exception {
            runTest("testData/multiModuleQuickFix/other/cancelMakeAbstractFromActual/");
        }

        @TestMetadata("convertActualEnumToSealedClass")
        public void testConvertActualEnumToSealedClass() throws Exception {
            runTest("testData/multiModuleQuickFix/other/convertActualEnumToSealedClass/");
        }

        @TestMetadata("convertActualSealedClassToEnum")
        public void testConvertActualSealedClassToEnum() throws Exception {
            runTest("testData/multiModuleQuickFix/other/convertActualSealedClassToEnum/");
        }

        @TestMetadata("convertExpectEnumToSealedClass")
        public void testConvertExpectEnumToSealedClass() throws Exception {
            runTest("testData/multiModuleQuickFix/other/convertExpectEnumToSealedClass/");
        }

        @TestMetadata("convertExpectSealedClassToEnum")
        public void testConvertExpectSealedClassToEnum() throws Exception {
            runTest("testData/multiModuleQuickFix/other/convertExpectSealedClassToEnum/");
        }

        @TestMetadata("convertPropertyGetterToInitializer")
        public void testConvertPropertyGetterToInitializer() throws Exception {
            runTest("testData/multiModuleQuickFix/other/convertPropertyGetterToInitializer/");
        }

        @TestMetadata("convertPropertyToFunction")
        public void testConvertPropertyToFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/other/convertPropertyToFunction/");
        }

        @TestMetadata("createClassFromUsageImport")
        public void testCreateClassFromUsageImport() throws Exception {
            runTest("testData/multiModuleQuickFix/other/createClassFromUsageImport/");
        }

        @TestMetadata("createClassFromUsageRef")
        public void testCreateClassFromUsageRef() throws Exception {
            runTest("testData/multiModuleQuickFix/other/createClassFromUsageRef/");
        }

        @TestMetadata("createFunInExpectClass")
        public void testCreateFunInExpectClass() throws Exception {
            runTest("testData/multiModuleQuickFix/other/createFunInExpectClass/");
        }

        @TestMetadata("createTestOnExpect")
        public void testCreateTestOnExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/other/createTestOnExpect/");
        }

        @TestMetadata("createValInExpectClass")
        public void testCreateValInExpectClass() throws Exception {
            runTest("testData/multiModuleQuickFix/other/createValInExpectClass/");
        }

        @TestMetadata("createVarInExpectClass")
        public void testCreateVarInExpectClass() throws Exception {
            runTest("testData/multiModuleQuickFix/other/createVarInExpectClass/");
        }

        @TestMetadata("deprecatedHeader")
        public void testDeprecatedHeader() throws Exception {
            runTest("testData/multiModuleQuickFix/other/deprecatedHeader/");
        }

        @TestMetadata("deprecatedHeaderImpl")
        public void testDeprecatedHeaderImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/deprecatedHeaderImpl/");
        }

        @TestMetadata("deprecatedImpl")
        public void testDeprecatedImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/deprecatedImpl/");
        }

        @TestMetadata("deprecatedImplHeader")
        public void testDeprecatedImplHeader() throws Exception {
            runTest("testData/multiModuleQuickFix/other/deprecatedImplHeader/");
        }

        @TestMetadata("functionTypeParameterToReceiverByHeader")
        public void testFunctionTypeParameterToReceiverByHeader() throws Exception {
            runTest("testData/multiModuleQuickFix/other/functionTypeParameterToReceiverByHeader/");
        }

        @TestMetadata("functionTypeParameterToReceiverByImpl")
        public void testFunctionTypeParameterToReceiverByImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/functionTypeParameterToReceiverByImpl/");
        }

        @TestMetadata("functionTypeReceiverToParameterByHeader")
        public void testFunctionTypeReceiverToParameterByHeader() throws Exception {
            runTest("testData/multiModuleQuickFix/other/functionTypeReceiverToParameterByHeader/");
        }

        @TestMetadata("functionTypeReceiverToParameterByImpl")
        public void testFunctionTypeReceiverToParameterByImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/functionTypeReceiverToParameterByImpl/");
        }

        @TestMetadata("generateEqualsInExpect")
        public void testGenerateEqualsInExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/other/generateEqualsInExpect/");
        }

        @TestMetadata("generateHashCodeInExpect")
        public void testGenerateHashCodeInExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/other/generateHashCodeInExpect/");
        }

        @TestMetadata("implementAbstractExpectMemberInheritedFromInterface")
        public void testImplementAbstractExpectMemberInheritedFromInterface() throws Exception {
            runTest("testData/multiModuleQuickFix/other/implementAbstractExpectMemberInheritedFromInterface/");
        }

        @TestMetadata("implementMembersInActualClassNoExpectMember")
        public void testImplementMembersInActualClassNoExpectMember() throws Exception {
            runTest("testData/multiModuleQuickFix/other/implementMembersInActualClassNoExpectMember/");
        }

        @TestMetadata("implementMembersInImplClassNonImplInheritor")
        public void testImplementMembersInImplClassNonImplInheritor() throws Exception {
            runTest("testData/multiModuleQuickFix/other/implementMembersInImplClassNonImplInheritor/");
        }

        @TestMetadata("importClassInCommon")
        public void testImportClassInCommon() throws Exception {
            runTest("testData/multiModuleQuickFix/other/importClassInCommon/");
        }

        @TestMetadata("importClassInFromProductionInCommonTests")
        public void testImportClassInFromProductionInCommonTests() throws Exception {
            runTest("testData/multiModuleQuickFix/other/importClassInFromProductionInCommonTests/");
        }

        @TestMetadata("importCommonClassInJs")
        public void testImportCommonClassInJs() throws Exception {
            runTest("testData/multiModuleQuickFix/other/importCommonClassInJs/");
        }

        @TestMetadata("importCommonClassInJvm")
        public void testImportCommonClassInJvm() throws Exception {
            runTest("testData/multiModuleQuickFix/other/importCommonClassInJvm/");
        }

        @TestMetadata("importCommonFunInJvm")
        public void testImportCommonFunInJvm() throws Exception {
            runTest("testData/multiModuleQuickFix/other/importCommonFunInJvm/");
        }

        @TestMetadata("importExpectClassWithActualInJvm")
        public void testImportExpectClassWithActualInJvm() throws Exception {
            runTest("testData/multiModuleQuickFix/other/importExpectClassWithActualInJvm/");
        }

        @TestMetadata("importExpectClassWithoutActualInJvm")
        public void testImportExpectClassWithoutActualInJvm() throws Exception {
            runTest("testData/multiModuleQuickFix/other/importExpectClassWithoutActualInJvm/");
        }

        @TestMetadata("importFunInCommon")
        public void testImportFunInCommon() throws Exception {
            runTest("testData/multiModuleQuickFix/other/importFunInCommon/");
        }

        @TestMetadata("makeAbstractFromActual")
        public void testMakeAbstractFromActual() throws Exception {
            runTest("testData/multiModuleQuickFix/other/makeAbstractFromActual/");
        }

        @TestMetadata("makeInlineFromExpect")
        public void testMakeInlineFromExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/other/makeInlineFromExpect/");
        }

        @TestMetadata("makeInternalFromExpect")
        public void testMakeInternalFromExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/other/makeInternalFromExpect/");
        }

        @TestMetadata("makeOpenFromActual")
        public void testMakeOpenFromActual() throws Exception {
            runTest("testData/multiModuleQuickFix/other/makeOpenFromActual/");
        }

        @TestMetadata("makeOpenFromExpect")
        public void testMakeOpenFromExpect() throws Exception {
            runTest("testData/multiModuleQuickFix/other/makeOpenFromExpect/");
        }

        @TestMetadata("mayBeConstantWithActual")
        public void testMayBeConstantWithActual() throws Exception {
            runTest("testData/multiModuleQuickFix/other/mayBeConstantWithActual/");
        }

        @TestMetadata("memberFunParameterToReceiverByHeader")
        public void testMemberFunParameterToReceiverByHeader() throws Exception {
            runTest("testData/multiModuleQuickFix/other/memberFunParameterToReceiverByHeader/");
        }

        @TestMetadata("memberFunParameterToReceiverByImpl")
        public void testMemberFunParameterToReceiverByImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/memberFunParameterToReceiverByImpl/");
        }

        @TestMetadata("memberFunReceiverToParameterByHeader")
        public void testMemberFunReceiverToParameterByHeader() throws Exception {
            runTest("testData/multiModuleQuickFix/other/memberFunReceiverToParameterByHeader/");
        }

        @TestMetadata("memberFunReceiverToParameterByImpl")
        public void testMemberFunReceiverToParameterByImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/memberFunReceiverToParameterByImpl/");
        }

        @TestMetadata("memberFunToExtensionByHeader")
        public void testMemberFunToExtensionByHeader() throws Exception {
            runTest("testData/multiModuleQuickFix/other/memberFunToExtensionByHeader/");
        }

        @TestMetadata("memberFunToExtensionByImpl")
        public void testMemberFunToExtensionByImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/memberFunToExtensionByImpl/");
        }

        @TestMetadata("memberValToExtensionByHeader")
        public void testMemberValToExtensionByHeader() throws Exception {
            runTest("testData/multiModuleQuickFix/other/memberValToExtensionByHeader/");
        }

        @TestMetadata("memberValToExtensionByHeaderWithInapplicableImpl")
        public void testMemberValToExtensionByHeaderWithInapplicableImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/memberValToExtensionByHeaderWithInapplicableImpl/");
        }

        @TestMetadata("memberValToExtensionByImpl")
        public void testMemberValToExtensionByImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/memberValToExtensionByImpl/");
        }

        @TestMetadata("moveActualPropertyToExistentConstructor")
        public void testMoveActualPropertyToExistentConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/other/moveActualPropertyToExistentConstructor/");
        }

        @TestMetadata("movePropertyToConstructor")
        public void testMovePropertyToConstructor() throws Exception {
            runTest("testData/multiModuleQuickFix/other/movePropertyToConstructor/");
        }

        @TestMetadata("notMakeAbstractFromActual")
        public void testNotMakeAbstractFromActual() throws Exception {
            runTest("testData/multiModuleQuickFix/other/notMakeAbstractFromActual/");
        }

        @TestMetadata("orderHeader")
        public void testOrderHeader() throws Exception {
            runTest("testData/multiModuleQuickFix/other/orderHeader/");
        }

        @TestMetadata("orderImpl")
        public void testOrderImpl() throws Exception {
            runTest("testData/multiModuleQuickFix/other/orderImpl/");
        }

        @TestMetadata("safeDeleteForbiddenFromActual")
        public void testSafeDeleteForbiddenFromActual() throws Exception {
            runTest("testData/multiModuleQuickFix/other/safeDeleteForbiddenFromActual/");
        }

        @TestMetadata("safeDeleteFromActual")
        public void testSafeDeleteFromActual() throws Exception {
            runTest("testData/multiModuleQuickFix/other/safeDeleteFromActual/");
        }

        @TestMetadata("safeDeleteUsedInAnotherPlatform")
        public void testSafeDeleteUsedInAnotherPlatform() throws Exception {
            runTest("testData/multiModuleQuickFix/other/safeDeleteUsedInAnotherPlatform/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/packageDirectoryMismatch")
    public static class PackageDirectoryMismatch extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("moveFileToAnotherPackage")
        public void testMoveFileToAnotherPackage() throws Exception {
            runTest("testData/multiModuleQuickFix/packageDirectoryMismatch/moveFileToAnotherPackage/");
        }

        @TestMetadata("moveFileToCommonSourceRoot")
        public void testMoveFileToCommonSourceRoot() throws Exception {
            runTest("testData/multiModuleQuickFix/packageDirectoryMismatch/moveFileToCommonSourceRoot/");
        }

        @TestMetadata("moveFileToJvmSourceRoot")
        public void testMoveFileToJvmSourceRoot() throws Exception {
            runTest("testData/multiModuleQuickFix/packageDirectoryMismatch/moveFileToJvmSourceRoot/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/multiModuleQuickFix/redundantNullableReturnType")
    public static class RedundantNullableReturnType extends AbstractQuickFixMultiModuleTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("actualMethod")
        public void testActualMethod() throws Exception {
            runTest("testData/multiModuleQuickFix/redundantNullableReturnType/actualMethod/");
        }

        @TestMetadata("actualTopLevelFunction")
        public void testActualTopLevelFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/redundantNullableReturnType/actualTopLevelFunction/");
        }

        @TestMetadata("actualTopLevelProperty")
        public void testActualTopLevelProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/redundantNullableReturnType/actualTopLevelProperty/");
        }

        @TestMetadata("expectMemberProperty")
        public void testExpectMemberProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/redundantNullableReturnType/expectMemberProperty/");
        }

        @TestMetadata("expectTopLevelFunction")
        public void testExpectTopLevelFunction() throws Exception {
            runTest("testData/multiModuleQuickFix/redundantNullableReturnType/expectTopLevelFunction/");
        }

        @TestMetadata("expectTopLevelProperty")
        public void testExpectTopLevelProperty() throws Exception {
            runTest("testData/multiModuleQuickFix/redundantNullableReturnType/expectTopLevelProperty/");
        }
    }
}
