// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.actions;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/idea/actions/kotlinAddImportAction")
public class KotlinAddImportActionTestGenerated extends AbstractKotlinAddImportActionTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("Class1.kt")
    public void testClass1() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/Class1.kt");
    }

    @TestMetadata("Class2.kt")
    public void testClass2() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/Class2.kt");
    }

    @TestMetadata("ClassWhenExtIsImported.kt")
    public void testClassWhenExtIsImported() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/ClassWhenExtIsImported.kt");
    }

    @TestMetadata("ConstructorOverloadsPresent.kt")
    public void testConstructorOverloadsPresent() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/ConstructorOverloadsPresent.kt");
    }

    @TestMetadata("ExtReceiver.kt")
    public void testExtReceiver() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/ExtReceiver.kt");
    }

    @TestMetadata("ExtReceiver2.kt")
    public void testExtReceiver2() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/ExtReceiver2.kt");
    }

    @TestMetadata("ExtReceiver3.kt")
    public void testExtReceiver3() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/ExtReceiver3.kt");
    }

    @TestMetadata("ExtReceiver4.kt")
    public void testExtReceiver4() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/ExtReceiver4.kt");
    }

    @TestMetadata("ExtendingClass1.kt")
    public void testExtendingClass1() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/ExtendingClass1.kt");
    }

    @TestMetadata("ExtendingClass2.kt")
    public void testExtendingClass2() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/ExtendingClass2.kt");
    }

    @TestMetadata("KotlinDurations.kt")
    public void testKotlinDurations() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/KotlinDurations.kt");
    }

    @TestMetadata("KotlinDurations2.kt")
    public void testKotlinDurations2() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/KotlinDurations2.kt");
    }

    @TestMetadata("KotlinMinCollections.kt")
    public void testKotlinMinCollections() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/KotlinMinCollections.kt");
    }

    @TestMetadata("KotlinMinInt.kt")
    public void testKotlinMinInt() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/KotlinMinInt.kt");
    }

    @TestMetadata("MultipleMethodsAvailable.kt")
    public void testMultipleMethodsAvailable() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/MultipleMethodsAvailable.kt");
    }

    @TestMetadata("MultipleMethodsAvailable2.kt")
    public void testMultipleMethodsAvailable2() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/MultipleMethodsAvailable2.kt");
    }

    @TestMetadata("Nullable1.kt")
    public void testNullable1() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/Nullable1.kt");
    }

    @TestMetadata("Nullable2.kt")
    public void testNullable2() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/Nullable2.kt");
    }

    @TestMetadata("Nullable3.kt")
    public void testNullable3() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/Nullable3.kt");
    }

    @TestMetadata("OverloadsPresent.kt")
    public void testOverloadsPresent() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/OverloadsPresent.kt");
    }

    @TestMetadata("PlusAssignOperator.kt")
    public void testPlusAssignOperator() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/PlusAssignOperator.kt");
    }

    @TestMetadata("PlusAssignOperator2.kt")
    public void testPlusAssignOperator2() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/PlusAssignOperator2.kt");
    }

    @TestMetadata("PlusAssignOperatorCall.kt")
    public void testPlusAssignOperatorCall() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/PlusAssignOperatorCall.kt");
    }

    @TestMetadata("PlusAssignOperatorCall2.kt")
    public void testPlusAssignOperatorCall2() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/PlusAssignOperatorCall2.kt");
    }

    @TestMetadata("PlusOperator.kt")
    public void testPlusOperator() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/PlusOperator.kt");
    }

    @TestMetadata("PlusOperator1.kt")
    public void testPlusOperator1() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/PlusOperator1.kt");
    }

    @TestMetadata("PlusOperatorCall1.kt")
    public void testPlusOperatorCall1() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/PlusOperatorCall1.kt");
    }

    @TestMetadata("SingleMethodAvailable.kt")
    public void testSingleMethodAvailable() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/SingleMethodAvailable.kt");
    }

    @TestMetadata("Varargs.kt")
    public void testVarargs() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/Varargs.kt");
    }

    @TestMetadata("Varargs2.kt")
    public void testVarargs2() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/Varargs2.kt");
    }

    @TestMetadata("Varargs3.kt")
    public void testVarargs3() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/Varargs3.kt");
    }
}
