// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.actions;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/idea/actions/kotlinAddImportAction")
public class KotlinAddImportActionTestGenerated extends AbstractKotlinAddImportActionTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("ConstructorOverloadsPresent.kt")
    public void testConstructorOverloadsPresent() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/ConstructorOverloadsPresent.kt");
    }

    @TestMetadata("MultipleMethodsAvailable.kt")
    public void testMultipleMethodsAvailable() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/MultipleMethodsAvailable.kt");
    }

    @TestMetadata("OverloadsPresent.kt")
    public void testOverloadsPresent() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/OverloadsPresent.kt");
    }

    @TestMetadata("SingleMethodAvailable.kt")
    public void testSingleMethodAvailable() throws Exception {
        runTest("testData/idea/actions/kotlinAddImportAction/SingleMethodAvailable.kt");
    }
}
