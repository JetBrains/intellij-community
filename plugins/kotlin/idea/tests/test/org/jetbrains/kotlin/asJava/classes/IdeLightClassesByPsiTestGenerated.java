// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.asJava.classes;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;
import static org.jetbrains.kotlin.idea.base.plugin.artifacts.TestKotlinArtifacts.compilerTestData;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../../../out/kotlinc-testdata-2/compiler/testData/asJava/lightClasses/lightClassByPsi")
public abstract class IdeLightClassesByPsiTestGenerated extends AbstractIdeLightClassesByPsiTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../../out/kotlinc-testdata-2/compiler/testData/asJava/lightClasses/lightClassByPsi/facades")
    public static class Facades extends AbstractIdeLightClassesByPsiTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @Override
        protected void setUp() {
            compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades");
            super.setUp();
        }

        @TestMetadata("coroutines.kt")
        public void testCoroutines() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/coroutines.kt"));
        }

        @TestMetadata("importAliases.kt")
        public void testImportAliases() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/importAliases.kt"));
        }

        @TestMetadata("inlineOnly.kt")
        public void testInlineOnly() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/inlineOnly.kt"));
        }

        @TestMetadata("jvmField.kt")
        public void testJvmField() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/jvmField.kt"));
        }

        @TestMetadata("jvmName.kt")
        public void testJvmName() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/jvmName.kt"));
        }

        @TestMetadata("jvmWildcardAnnotations.kt")
        public void testJvmWildcardAnnotations() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/jvmWildcardAnnotations.kt"));
        }

        @TestMetadata("lateinitProperty.kt")
        public void testLateinitProperty() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/lateinitProperty.kt"));
        }

        @TestMetadata("multifileFacade.kt")
        public void testMultifileFacade() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/multifileFacade.kt"));
        }

        @TestMetadata("multifileFacadeJvmName.kt")
        public void testMultifileFacadeJvmName() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/multifileFacadeJvmName.kt"));
        }

        @TestMetadata("properties.kt")
        public void testProperties() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/properties.kt"));
        }

        @TestMetadata("simpleFunctions.kt")
        public void testSimpleFunctions() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/simpleFunctions.kt"));
        }

        @TestMetadata("throwsAnnotation.kt")
        public void testThrowsAnnotation() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/throwsAnnotation.kt"));
        }

        @TestMetadata("valueClassInSignature.kt")
        public void testValueClassInSignature() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/valueClassInSignature.kt"));
        }

        @TestMetadata("wildcardOptimization.kt")
        public void testWildcardOptimization() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/wildcardOptimization.kt"));
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../../out/kotlinc-testdata-2/compiler/testData/asJava/lightClasses/lightClassByPsi/scripts")
    public static class Scripts extends AbstractIdeLightClassesByPsiTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @Override
        protected void setUp() {
            compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts");
            super.setUp();
        }

        @TestMetadata("FunsPropsAndFields.kts")
        public void testFunsPropsAndFields() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts/FunsPropsAndFields.kts"));
        }

        @TestMetadata("HelloWorld.kts")
        public void testHelloWorld() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts/HelloWorld.kts"));
        }

        @TestMetadata("InnerClasses.kts")
        public void testInnerClasses() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts/InnerClasses.kts"));
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../../out/kotlinc-testdata-2/compiler/testData/asJava/lightClasses/lightClassByPsi")
    public static class Uncategorized extends AbstractIdeLightClassesByPsiTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @Override
        protected void setUp() {
            compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi");
            super.setUp();
        }

        @TestMetadata("annotationWithSetParamPropertyModifier.kt")
        public void testAnnotationWithSetParamPropertyModifier() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/annotationWithSetParamPropertyModifier.kt"));
        }

        @TestMetadata("annotations.kt")
        public void testAnnotations() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/annotations.kt"));
        }

        @TestMetadata("AnnotationsOnEnumEntry.kt")
        public void testAnnotationsOnEnumEntry() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/AnnotationsOnEnumEntry.kt"));
        }

        @TestMetadata("AnnotationsWithUnresolvedAnnotations.kt")
        public void testAnnotationsWithUnresolvedAnnotations() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/AnnotationsWithUnresolvedAnnotations.kt"));
        }

        @TestMetadata("classModifiers.kt")
        public void testClassModifiers() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/classModifiers.kt"));
        }

        @TestMetadata("companionDuplication.kt")
        public void testCompanionDuplication() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/companionDuplication.kt"));
        }

        @TestMetadata("constructors.kt")
        public void testConstructors() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/constructors.kt"));
        }

        @TestMetadata("coroutines.kt")
        public void testCoroutines() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/coroutines.kt"));
        }

        @TestMetadata("dataClasses.kt")
        public void testDataClasses() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/dataClasses.kt"));
        }

        @TestMetadata("defaultMethodInKotlinWithSettingAll.kt")
        public void testDefaultMethodInKotlinWithSettingAll() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/defaultMethodInKotlinWithSettingAll.kt"));
        }

        @TestMetadata("defaultMethodInKotlinWithSettingAllCompatibility.kt")
        public void testDefaultMethodInKotlinWithSettingAllCompatibility() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/defaultMethodInKotlinWithSettingAllCompatibility.kt"));
        }

        @TestMetadata("DelegatedProperty.kt")
        public void testDelegatedProperty() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/DelegatedProperty.kt"));
        }

        @TestMetadata("delegatesWithAnnotations.kt")
        public void testDelegatesWithAnnotations() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/delegatesWithAnnotations.kt"));
        }

        @TestMetadata("delegatingToInterfaces.kt")
        public void testDelegatingToInterfaces() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/delegatingToInterfaces.kt"));
        }

        @TestMetadata("dollarsInNameLocal.kt")
        public void testDollarsInNameLocal() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/dollarsInNameLocal.kt"));
        }

        @TestMetadata("enums.kt")
        public void testEnums() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/enums.kt"));
        }

        @TestMetadata("exposedAnonymousType.kt")
        public void testExposedAnonymousType() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/exposedAnonymousType.kt"));
        }

        @TestMetadata("fieldModifiers.kt")
        public void testFieldModifiers() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/fieldModifiers.kt"));
        }

        @TestMetadata("generics.kt")
        public void testGenerics() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/generics.kt"));
        }

        @TestMetadata("implementingKotlinCollections.kt")
        public void testImplementingKotlinCollections() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/implementingKotlinCollections.kt"));
        }

        @TestMetadata("importAliases.kt")
        public void testImportAliases() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/importAliases.kt"));
        }

        @TestMetadata("inferringAnonymousObjectTypes.kt")
        public void testInferringAnonymousObjectTypes() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/inferringAnonymousObjectTypes.kt"));
        }

        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/inheritance.kt"));
        }

        @TestMetadata("inlineClasses.kt")
        public void testInlineClasses() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/inlineClasses.kt"));
        }

        @TestMetadata("inlineOnly.kt")
        public void testInlineOnly() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/inlineOnly.kt"));
        }

        @TestMetadata("inlineReified.kt")
        public void testInlineReified() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/inlineReified.kt"));
        }

        @TestMetadata("jvmField.kt")
        public void testJvmField() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmField.kt"));
        }

        @TestMetadata("jvmName.kt")
        public void testJvmName() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmName.kt"));
        }

        @TestMetadata("jvmOverloads.kt")
        public void testJvmOverloads() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmOverloads.kt"));
        }

        @TestMetadata("jvmRecord.kt")
        public void testJvmRecord() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmRecord.kt"));
        }

        @TestMetadata("jvmStaticOnPropertySetter.kt")
        public void testJvmStaticOnPropertySetter() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmStaticOnPropertySetter.kt"));
        }

        @TestMetadata("jvmSynthetic.kt")
        public void testJvmSynthetic() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmSynthetic.kt"));
        }

        @TestMetadata("jvmSyntheticForAccessors.kt")
        public void testJvmSyntheticForAccessors() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmSyntheticForAccessors.kt"));
        }

        @TestMetadata("jvmWildcardAnnotations.kt")
        public void testJvmWildcardAnnotations() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmWildcardAnnotations.kt"));
        }

        @TestMetadata("LateinitProperties.kt")
        public void testLateinitProperties() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/LateinitProperties.kt"));
        }

        @TestMetadata("lateinitProperty.kt")
        public void testLateinitProperty() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/lateinitProperty.kt"));
        }

        @TestMetadata("localClassDerived.kt")
        public void testLocalClassDerived() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/localClassDerived.kt"));
        }

        @TestMetadata("objects.kt")
        public void testObjects() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/objects.kt"));
        }

        @TestMetadata("properties.kt")
        public void testProperties() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/properties.kt"));
        }

        @TestMetadata("simpleFunctions.kt")
        public void testSimpleFunctions() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/simpleFunctions.kt"));
        }

        @TestMetadata("strangeIdentifiers.kt")
        public void testStrangeIdentifiers() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/strangeIdentifiers.kt"));
        }

        @TestMetadata("targetAnnotation.kt")
        public void testTargetAnnotation() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/targetAnnotation.kt"));
        }

        @TestMetadata("throwsAnnotation.kt")
        public void testThrowsAnnotation() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/throwsAnnotation.kt"));
        }

        @TestMetadata("typeAliases.kt")
        public void testTypeAliases() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/typeAliases.kt"));
        }

        @TestMetadata("typeAnnotations.kt")
        public void testTypeAnnotations() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/typeAnnotations.kt"));
        }

        @TestMetadata("typealiasInAnnotation.kt")
        public void testTypealiasInAnnotation() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/typealiasInAnnotation.kt"));
        }

        @TestMetadata("typealiasInTypeArguments.kt")
        public void testTypealiasInTypeArguments() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/typealiasInTypeArguments.kt"));
        }

        @TestMetadata("unresolvedGenericSupertypes.kt")
        public void testUnresolvedGenericSupertypes() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/unresolvedGenericSupertypes.kt"));
        }

        @TestMetadata("unresolvedWithAliasedImport.kt")
        public void testUnresolvedWithAliasedImport() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/unresolvedWithAliasedImport.kt"));
        }

        @TestMetadata("valueClassInSignature.kt")
        public void testValueClassInSignature() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/valueClassInSignature.kt"));
        }

        @TestMetadata("wildcardOptimization.kt")
        public void testWildcardOptimization() throws Exception {
            runTest(compilerTestData("compiler/testData/asJava/lightClasses/lightClassByPsi/wildcardOptimization.kt"));
        }
    }
}
