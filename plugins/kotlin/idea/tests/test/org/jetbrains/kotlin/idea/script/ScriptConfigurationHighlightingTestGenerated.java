// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.script;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class ScriptConfigurationHighlightingTestGenerated extends AbstractScriptConfigurationHighlightingTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/script/definition/highlighting")
    public static class Highlighting extends AbstractScriptConfigurationHighlightingTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("acceptedAnnotations")
        public void testAcceptedAnnotations() throws Exception {
            runTest("testData/script/definition/highlighting/acceptedAnnotations/");
        }

        @TestMetadata("additionalImports")
        public void testAdditionalImports() throws Exception {
            runTest("testData/script/definition/highlighting/additionalImports/");
        }

        @TestMetadata("asyncResolver")
        public void testAsyncResolver() throws Exception {
            runTest("testData/script/definition/highlighting/asyncResolver/");
        }

        @TestMetadata("conflictingModule")
        public void testConflictingModule() throws Exception {
            runTest("testData/script/definition/highlighting/conflictingModule/");
        }

        @TestMetadata("customBaseClass")
        public void testCustomBaseClass() throws Exception {
            runTest("testData/script/definition/highlighting/customBaseClass/");
        }

        @TestMetadata("customExtension")
        public void testCustomExtension() throws Exception {
            runTest("testData/script/definition/highlighting/customExtension/");
        }

        @TestMetadata("customJavaHome")
        public void testCustomJavaHome() throws Exception {
            runTest("testData/script/definition/highlighting/customJavaHome/");
        }

        @TestMetadata("customLibrary")
        public void testCustomLibrary() throws Exception {
            runTest("testData/script/definition/highlighting/customLibrary/");
        }

        @TestMetadata("customLibraryInModuleDeps")
        public void testCustomLibraryInModuleDeps() throws Exception {
            runTest("testData/script/definition/highlighting/customLibraryInModuleDeps/");
        }

        @TestMetadata("doNotSpeakAboutJava")
        public void testDoNotSpeakAboutJava() throws Exception {
            runTest("testData/script/definition/highlighting/doNotSpeakAboutJava/");
        }

        @TestMetadata("doNotSpeakAboutJavaLegacy")
        public void testDoNotSpeakAboutJavaLegacy() throws Exception {
            runTest("testData/script/definition/highlighting/doNotSpeakAboutJavaLegacy/");
        }

        @TestMetadata("emptyAsyncResolver")
        public void testEmptyAsyncResolver() throws Exception {
            runTest("testData/script/definition/highlighting/emptyAsyncResolver/");
        }

        @TestMetadata("implicitReceiver")
        public void testImplicitReceiver() throws Exception {
            runTest("testData/script/definition/highlighting/implicitReceiver/");
        }

        @TestMetadata("multiModule")
        public void testMultiModule() throws Exception {
            runTest("testData/script/definition/highlighting/multiModule/");
        }

        @TestMetadata("multipleScripts")
        public void testMultipleScripts() throws Exception {
            runTest("testData/script/definition/highlighting/multipleScripts/");
        }

        @TestMetadata("nestedClass")
        public void testNestedClass() throws Exception {
            runTest("testData/script/definition/highlighting/nestedClass/");
        }

        @TestMetadata("noResolver")
        public void testNoResolver() throws Exception {
            runTest("testData/script/definition/highlighting/noResolver/");
        }

        @TestMetadata("propertyAccessor")
        public void testPropertyAccessor() throws Exception {
            runTest("testData/script/definition/highlighting/propertyAccessor/");
        }

        @TestMetadata("propertyAccessorFromModule")
        public void testPropertyAccessorFromModule() throws Exception {
            runTest("testData/script/definition/highlighting/propertyAccessorFromModule/");
        }

        @TestMetadata("simple")
        public void testSimple() throws Exception {
            runTest("testData/script/definition/highlighting/simple/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/script/definition/complex")
    public static class Complex extends AbstractScriptConfigurationHighlightingTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doComplexTest, this, testDataFilePath);
        }

        @TestMetadata("errorResolver")
        public void testErrorResolver() throws Exception {
            runTest("testData/script/definition/complex/errorResolver/");
        }
    }
}
