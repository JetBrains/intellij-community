// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.codeInsight.generate;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("idea/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/codeInsight/generate/toString")
public abstract class GenerateToStringActionTestGenerated extends AbstractGenerateToStringActionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/codeInsight/generate/toString/common")
    public static class Common extends AbstractGenerateToStringActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("testData/codeInsight/generate/toString/common/annotation.kt");
        }

        @TestMetadata("interface.kt")
        public void testInterface() throws Exception {
            runTest("testData/codeInsight/generate/toString/common/interface.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/codeInsight/generate/toString/multipleTemplates")
    public static class MultipleTemplates extends AbstractGenerateToStringActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractSuper.kt")
        public void testAbstractSuper() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/abstractSuper.kt");
        }

        @TestMetadata("arrays.kt")
        public void testArrays() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/arrays.kt");
        }

        @TestMetadata("customAccessors.kt")
        public void testCustomAccessors() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/customAccessors.kt");
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/dataClass.kt");
        }

        @TestMetadata("keepQuotes.kt")
        public void testKeepQuotes() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/keepQuotes.kt");
        }

        @TestMetadata("multipleVars.kt")
        public void testMultipleVars() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/multipleVars.kt");
        }

        @TestMetadata("multipleVarsWithSuperClass.kt")
        public void testMultipleVarsWithSuperClass() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/multipleVarsWithSuperClass.kt");
        }

        @TestMetadata("noVars.kt")
        public void testNoVars() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/noVars.kt");
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/object.kt");
        }

        @TestMetadata("singleVar.kt")
        public void testSingleVar() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/singleVar.kt");
        }

        @TestMetadata("superClassNoVars.kt")
        public void testSuperClassNoVars() throws Exception {
            runTest("testData/codeInsight/generate/toString/multipleTemplates/superClassNoVars.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/codeInsight/generate/toString/singleTemplate")
    public static class SingleTemplate extends AbstractGenerateToStringActionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractSuper.kt")
        public void testAbstractSuper() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/abstractSuper.kt");
        }

        @TestMetadata("arrays.kt")
        public void testArrays() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/arrays.kt");
        }

        @TestMetadata("customAccessors.kt")
        public void testCustomAccessors() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/customAccessors.kt");
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/dataClass.kt");
        }

        @TestMetadata("explicitDefaultAccessors.kt")
        public void testExplicitDefaultAccessors() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/explicitDefaultAccessors.kt");
        }

        @TestMetadata("keepQuotes.kt")
        public void testKeepQuotes() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/keepQuotes.kt");
        }

        @TestMetadata("multipleVars.kt")
        public void testMultipleVars() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/multipleVars.kt");
        }

        @TestMetadata("multipleVarsWithSuperClass.kt")
        public void testMultipleVarsWithSuperClass() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/multipleVarsWithSuperClass.kt");
        }

        @TestMetadata("noVars.kt")
        public void testNoVars() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/noVars.kt");
        }

        @TestMetadata("nullableArrays.kt")
        public void testNullableArrays() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/nullableArrays.kt");
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/object.kt");
        }

        @TestMetadata("singleVar.kt")
        public void testSingleVar() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/singleVar.kt");
        }

        @TestMetadata("superClassNoVars.kt")
        public void testSuperClassNoVars() throws Exception {
            runTest("testData/codeInsight/generate/toString/singleTemplate/superClassNoVars.kt");
        }
    }
}
