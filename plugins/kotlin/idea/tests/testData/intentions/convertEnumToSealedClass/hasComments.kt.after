sealed class Test {
    /**
     * A
     */
    object A : Test() // A2

    /* B */
    object B : Test() /* B2 */ /* B3 */

    // C
    object C : Test() // C2

    /**
     * D
     */
    /* D2 */ /* D3 */
    // D4
    object D : Test() /* D5 */ // D6
    companion object {
        fun values(): Array<Test> {
            return arrayOf(A, B, C, D)
        }

        fun valueOf(value: String): Test {
            return when (value) {
                "A" -> A
                "B" -> B
                "C" -> C
                "D" -> D
                else -> throw IllegalArgumentException("No object Test.$value")
            }
        }
    }
}