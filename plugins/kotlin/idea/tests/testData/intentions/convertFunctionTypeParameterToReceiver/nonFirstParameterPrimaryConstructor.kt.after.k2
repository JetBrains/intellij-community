// AFTER-WARNING: Parameter 'a' is never used
// AFTER-WARNING: Parameter 'a' is never used
// AFTER-WARNING: Parameter 'a' is never used
// AFTER-WARNING: Parameter 'a' is never used
// AFTER-WARNING: Parameter 'a' is never used
// AFTER-WARNING: Parameter 'b' is never used
// AFTER-WARNING: Parameter 'b' is never used
// AFTER-WARNING: Parameter 'b' is never used
// AFTER-WARNING: Parameter 'c' is never used
// AFTER-WARNING: Parameter 'c' is never used
// AFTER-WARNING: Parameter 'f' is never used
// AFTER-WARNING: Parameter 'i' is never used
open class Foo(f: <caret>Boolean.(Int) -> String) {
    constructor(a: Int, f: (Int, Boolean) -> String) : this({ i -> f(i, this) })
    constructor(a: Int) : this({ i -> (::g)(i, this) })
    constructor(a: Int, b: Int, c: Int) : this({ i -> "${i + 1} $this" })

    init {
        false.f(1)
        bar { i, bool -> bool.f(i) }
    }
}

fun bar(f: (Int, Boolean) -> String) {

}

fun lambda(): (Int, Boolean) -> String = { i, b -> "$i $b"}

fun g(i: Int, b: Boolean) = ""

fun baz(f: (Int, Boolean) -> String) {
    Foo { i -> f(i, this) }

    Foo { i -> (::g)(i, this) }

    val lambda = lambda()
    Foo { i -> lambda(i, this) }

    Foo { i -> "${i + 1} $this" }
}

class Baz1(f: (Int, Boolean) -> String) : Foo({ i -> f(i, this) })
class Baz2 : Foo({ i -> (::g)(i, this) })

val lambda = lambda()

class Baz3 : Foo({ i -> lambda(i, this) })
class Baz4 : Foo({ i -> "${i + 1} $this" })

class Baz5 : Foo {
    constructor(f: (Int, Boolean) -> String) : super({ i -> f(i, this) })
    constructor(a: Int) : super({ i -> (::g)(i, this) })
    constructor(a: Int, b: Int, c: Int) : super({ i -> "${i + 1} $this" })
}