Class/object property type 6 var nextServer: Server? = Server()
Companion object 5 class Client(name: String = Server.NAME) : Server() {
Companion object 7 val name = Server.NAME
Function return types 14 fun getNextServer2(): Server? {
Function return types 46 fun Any.asServer(): Server? {
Local variable declaration 10 val server: Server = s
New instance creation 38 fun Client.bar(s: Server = Server()) {
New instance creation 6 var nextServer: Server? = Server()
Parameter type 38 fun Client.bar(s: Server = Server()) {
Parameter type 9 fun foo(s: Server) {
Super type qualifier 19 super<Server>.work()
Supertype 23 companion object : Server() {
Supertype 28 object ClientObject : Server() {
Supertype 5 class Client(name: String = Server.NAME) : Server() {
Target type of 'is' operation 48 is Server -> println("Server!")
Target type of 'is' operation 50 return if (this is Server) this as Server else this as? Server
Type parameter 32 abstract class Servers : Iterator<Server> {
Type parameter 36 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 36 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 36 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Usage in cast target type 50 return if (this is Server) this as Server else this as? Server
Usage in cast target type 50 return if (this is Server) this as Server else this as? Server
Usage in import 3 import server.Server
