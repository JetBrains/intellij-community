Class/object property type 9 var nextServer: Server? = Server()
Companion object 10 val name = Server.NAME
Companion object 5 class Client(name: String = Server.NAME) : Server() {
Function return types 19 fun getNextServer2(): Server? {
Function return types 25 fun withReturningFunctionalType() : (s: Server) -> Unit = {}
Function return types 26 fun withReturningFunctionalType2() : () -> Server = { Server() }
Function return types 32 withFunctionalTypeInParam2(fun(): Server {return Server()})
Function return types 65 fun Any.asServer(): Server? {
Local variable declaration 15 val server: Server = s
Nested class/object 11 val name2 = Server.Companion.NAME
Nested class/object 12 val name3 = Server.Inner()
Nested class/object 47 val c = Server.InnerObject
New instance creation 26 fun withReturningFunctionalType2() : () -> Server = { Server() }
New instance creation 32 withFunctionalTypeInParam2(fun(): Server {return Server()})
New instance creation 57 fun Client.bar(s: Server = Server()) {
New instance creation 9 var nextServer: Server? = Server()
Parameter type 14 fun foo(s: Server) {
Parameter type 23 fun withFunctionalTypeInParam(p: (s: Server) -> Unit) {}
Parameter type 24 fun withFunctionalTypeInParam2(p: () -> Server) {}
Parameter type 29 withFunctionalTypeInParam(fun(s: Server) {})
Parameter type 57 fun Client.bar(s: Server = Server()) {
Parameter type 7 constructor(ctrParam: Server, name: String) : this(name)
Super type qualifier 36 super<Server>.work()
Supertype 40 companion object : Server() {
Supertype 45 object ClientObject : Server() {
Supertype 5 class Client(name: String = Server.NAME) : Server() {
Target type of 'is' operation 67 is Server -> println("Server!")
Target type of 'is' operation 69 return if (this is Server) this as Server else this as? Server
Type parameter 51 abstract class Servers : Iterator<Server> {
Type parameter 55 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 55 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 55 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Usage in cast target type 69 return if (this is Server) this as Server else this as? Server
Usage in cast target type 69 return if (this is Server) this as Server else this as? Server
Usage in import 3 import server.Server
