Class/object property type 9 lateinit var nextServer: Server
Companion object 10 val name = Server.NAME
Companion object 5 class Client(name: String = Server.NAME) : Server {
Function return types 20 fun getNextServer2(): Server? {
Function return types 26 fun withReturningFunctionalType() : (s: Server) -> Unit = {}
Function return types 27 fun withReturningFunctionalType2() : () -> Server = { object : Server {} }
Function return types 33 withFunctionalTypeInParam2(fun(): Server = object : Server {})
Function return types 66 fun Any.asServer(): Server? {
Local variable declaration 16 val server: Server = s
Nested class/object 11 val name2 = Server.Companion.NAME
Nested class/object 12 val name3 = Server.Inner()
Nested class/object 48 val c = Server.InnerObject
Parameter type 15 fun foo(s: Server) {
Parameter type 24 fun withFunctionalTypeInParam(p: (s: Server) -> Unit) {}
Parameter type 25 fun withFunctionalTypeInParam2(p: () -> Server) {}
Parameter type 30 withFunctionalTypeInParam(fun(s: Server) {})
Parameter type 58 fun Client.bar(s: Server = Client()) {
Parameter type 7 constructor(ctrParam: Server, name: String) : this(name)
Super type qualifier 37 super<Server>.work()
Supertype 27 fun withReturningFunctionalType2() : () -> Server = { object : Server {} }
Supertype 33 withFunctionalTypeInParam2(fun(): Server = object : Server {})
Supertype 41 companion object : Server {
Supertype 46 object ClientObject : Server {
Supertype 5 class Client(name: String = Server.NAME) : Server {
Target type of 'is' operation 68 is Server -> println("Server!")
Target type of 'is' operation 70 return if (this is Server) this as Server else this as? Server
Type parameter 52 abstract class Servers : Iterator<Server> {
Type parameter 56 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 56 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 56 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Unclassified 13 val clazz = Server::class.java
Usage in cast target type 70 return if (this is Server) this as Server else this as? Server
Usage in cast target type 70 return if (this is Server) this as Server else this as? Server
Usage in import 3 import server.Server
