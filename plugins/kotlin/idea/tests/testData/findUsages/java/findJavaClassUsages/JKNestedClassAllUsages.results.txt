Class/object property type 2 var next: Outer.A? = Outer.A()
Function return types 15 fun getNextFun(): Outer.A? {
Function return types 36 fun Any.toA(): Outer.A? {
Local variable declaration 11 val aa: Outer.A = a
Nested class/object 1 public class X(bar: String? = Outer.A.BAR) : Outer.A() {
Nested class/object 3 val myBar: String? = Outer.A.BAR
Nested class/object 6 Outer.A.BAR = ""
Nested class/object 7 Outer.A.foos()
New instance creation 2 var next: Outer.A? = Outer.A()
New instance creation 32 fun X.bar(a: Outer.A = Outer.A()) {
Parameter type 10 fun foo(a: Outer.A) {
Parameter type 32 fun X.bar(a: Outer.A = Outer.A()) {
Super type qualifier 20 super<Outer.A>.foo()
Supertype 1 public class X(bar: String? = Outer.A.BAR) : Outer.A() {
Supertype 23 companion object : Outer.A() {
Supertype 28 object O : Outer.A() {
Target type of 'is' operation 37 return if (this is Outer.A) this as Outer.A else null
Usage in cast target type 37 return if (this is Outer.A) this as Outer.A else null
