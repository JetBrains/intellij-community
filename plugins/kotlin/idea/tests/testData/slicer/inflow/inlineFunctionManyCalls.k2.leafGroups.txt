12 with(<bold>456</bold>) { (in String.foo())
4 	fun <bold>Any</bold>.extensionFun() { (in Any.extensionFun())
13 		<bold>this</bold>.extensionFun() (in String.foo())
12 			[LAMBDA CALLS RECEIVER] with(456) <bold>{</bold> (in String.foo())
45 				(INLINE CALL with) [LAMBDA CALLS RECEIVER] inline fun <T, R> with(receiver: T, <bold>block: T.() -> R</bold>): R { (in with(T, T.() -> R))
46 					(INLINE CALL with) val result = <bold>receiver</bold>.block() (in with(T, T.() -> R))
45 						(INLINE CALL with) inline fun <T, R> with(<bold>receiver: T</bold>, block: T.() -> R): R { (in with(T, T.() -> R))
12 							with(<bold>456</bold>) { (in String.foo())

20 withNoInline(<bold>1</bold>) { (in String.foo())
4 	fun <bold>Any</bold>.extensionFun() { (in Any.extensionFun())
20 		[LAMBDA CALLS RECEIVER] withNoInline(1) <bold>{</bold> (in String.foo())
50 			[LAMBDA CALLS RECEIVER] fun <T, R> withNoInline(receiver: T, <bold>block: T.() -> R</bold>): R { (in withNoInline(T, T.() -> R))
51 				val result = <bold>receiver</bold>.block() (in withNoInline(T, T.() -> R))
50 					fun <T, R> withNoInline(<bold>receiver: T</bold>, block: T.() -> R): R { (in withNoInline(T, T.() -> R))
20 						withNoInline(<bold>1</bold>) { (in String.foo())

24 withNoInline(<bold>2</bold>) { (in String.foo())
4 	fun <bold>Any</bold>.extensionFun() { (in Any.extensionFun())
20 		[LAMBDA CALLS RECEIVER] withNoInline(1) <bold>{</bold> (in String.foo())
50 			[LAMBDA CALLS RECEIVER] fun <T, R> withNoInline(receiver: T, <bold>block: T.() -> R</bold>): R { (in withNoInline(T, T.() -> R))
51 				val result = <bold>receiver</bold>.block() (in withNoInline(T, T.() -> R))
50 					fun <T, R> withNoInline(<bold>receiver: T</bold>, block: T.() -> R): R { (in withNoInline(T, T.() -> R))
24 						withNoInline(<bold>2</bold>) { (in String.foo())

28 <bold>"A"</bold>.let { (in String.foo())
4 	fun <bold>Any</bold>.extensionFun() { (in Any.extensionFun())
29 		<bold>it</bold>.extensionFun() (in String.foo())
28 			[LAMBDA CALLS ARGUMENT #0] "A".let <bold>{</bold> (in String.foo())
LIB 				(INLINE CALL let) [LAMBDA CALLS ARGUMENT #0] public inline fun <T, R> T.let(<bold>block: (T) -> R</bold>): R { (in T.let((T) -> R))
LIB 					(INLINE CALL let) return block(<bold>this</bold>) (in T.let((T) -> R))
LIB 						(INLINE CALL let) public inline fun <T, R> <bold>T</bold>.let(block: (T) -> R): R { (in T.let((T) -> R))
28 							<bold>"A"</bold>.let { (in String.foo())

36 <bold>"D"</bold>.letNoInline { (in String.foo())
4 	fun <bold>Any</bold>.extensionFun() { (in Any.extensionFun())
37 		<bold>it</bold>.extensionFun() (in String.foo())
36 			[LAMBDA CALLS ARGUMENT #0] "D".letNoInline <bold>{</bold> (in String.foo())
55 				[LAMBDA CALLS ARGUMENT #0] fun <T, R> T.letNoInline(<bold>block: (T) -> R</bold>): R { (in T.letNoInline((T) -> R))
56 					return block(<bold>this</bold>) (in T.letNoInline((T) -> R))
55 						fun <T, R> <bold>T</bold>.letNoInline(block: (T) -> R): R { (in T.letNoInline((T) -> R))
36 							<bold>"D"</bold>.letNoInline { (in String.foo())

40 <bold>"C"</bold>.letNoInline { (in String.foo())
4 	fun <bold>Any</bold>.extensionFun() { (in Any.extensionFun())
37 		<bold>it</bold>.extensionFun() (in String.foo())
36 			[LAMBDA CALLS ARGUMENT #0] "D".letNoInline <bold>{</bold> (in String.foo())
55 				[LAMBDA CALLS ARGUMENT #0] fun <T, R> T.letNoInline(<bold>block: (T) -> R</bold>): R { (in T.letNoInline((T) -> R))
56 					return block(<bold>this</bold>) (in T.letNoInline((T) -> R))
55 						fun <T, R> <bold>T</bold>.letNoInline(block: (T) -> R): R { (in T.letNoInline((T) -> R))
40 							<bold>"C"</bold>.letNoInline { (in String.foo())

8 with(<bold>123</bold>) { (in String.foo())
4 	fun <bold>Any</bold>.extensionFun() { (in Any.extensionFun())
8 		[LAMBDA CALLS RECEIVER] with(123) <bold>{</bold> (in String.foo())
45 			(INLINE CALL with) [LAMBDA CALLS RECEIVER] inline fun <T, R> with(receiver: T, <bold>block: T.() -> R</bold>): R { (in with(T, T.() -> R))
46 				(INLINE CALL with) val result = <bold>receiver</bold>.block() (in with(T, T.() -> R))
45 					(INLINE CALL with) inline fun <T, R> with(<bold>receiver: T</bold>, block: T.() -> R): R { (in with(T, T.() -> R))
8 						with(<bold>123</bold>) { (in String.foo())
