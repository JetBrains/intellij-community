// FILE: test.before.kt
// "Replace with safe (?.) call" "true"
// ERROR: Operator call corresponds to a dot-qualified call 'y.plus(y)' which is not allowed on a nullable receiver 'y'.
package p;

fun test(x: Foo) {
    val y = x.findAvailable()
    val z = y<caret> + y
}

// FILE: org/jspecify/nullness/Nullable.java
package org.jspecify.nullness;

import static java.lang.annotation.ElementType.TYPE_USE;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

@Target(TYPE_USE)
@Retention(RUNTIME)
public @interface Nullable {}

// FILE: p/Foo.java
package p;

import org.jspecify.nullness.Nullable;

public class Foo {
    public @Nullable Foo plus(Foo other) { return this; }
    public @Nullable Foo findAvailable() { return this; }
}

// FILE: test.after.kt
// "Replace with safe (?.) call" "true"
// ERROR: Operator call corresponds to a dot-qualified call 'y.plus(y)' which is not allowed on a nullable receiver 'y'.
package p;

fun test(x: Foo) {
    val y = x.findAvailable()
    val z = y<caret>?.plus(y)
}
