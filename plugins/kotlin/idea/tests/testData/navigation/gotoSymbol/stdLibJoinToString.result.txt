NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: Array<out T>.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?))
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[org/jetbrains/kotlin/idea/icons/abstract_extension_function.svg, Public])
TargetElement: public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((T) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: Array.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: Array<out T>.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.ArraysKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((T) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.ArraysKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: BooleanArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Boolean) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.ArraysKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.BooleanArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Boolean) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.ArraysKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: BooleanArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Boolean) -> kotlin.CharSequence)?)
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.BooleanArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Boolean) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: BooleanArray.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: ByteArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Byte) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.ArraysKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.ByteArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Byte) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.ArraysKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: ByteArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Byte) -> kotlin.CharSequence)?)
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.ByteArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Byte) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: ByteArray.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: CharArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Char) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.ArraysKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.CharArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Char) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.ArraysKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: CharArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Char) -> kotlin.CharSequence)?)
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.CharArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Char) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: CharArray.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: DoubleArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Double) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.ArraysKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.DoubleArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Double) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.ArraysKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: DoubleArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Double) -> kotlin.CharSequence)?)
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.DoubleArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Double) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: DoubleArray.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: FloatArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Float) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.ArraysKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.FloatArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Float) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.ArraysKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: FloatArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Float) -> kotlin.CharSequence)?)
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.FloatArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Float) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: FloatArray.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: IntArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Int) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.ArraysKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Int) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.ArraysKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: IntArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Int) -> kotlin.CharSequence)?)
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Int) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: IntArray.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: Iterable<T>.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?))
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[org/jetbrains/kotlin/idea/icons/abstract_extension_function.svg, Public])
TargetElement: public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((T) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: Iterable.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: Iterable<T>.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.CollectionsKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((T) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.CollectionsKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: LongArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Long) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.ArraysKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.LongArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Long) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.ArraysKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: LongArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Long) -> kotlin.CharSequence)?)
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.LongArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Long) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: LongArray.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: Sequence<T>.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?))
    locationString: (kotlin.sequences)
    icon: RowIcon(icons=[org/jetbrains/kotlin/idea/icons/abstract_extension_function.svg, Public])
TargetElement: public fun <T> kotlin.sequences.Sequence<T>.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((T) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: Sequence.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: Sequence<T>.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> kotlin.CharSequence)?)
    locationString: (in kotlin.sequences.SequencesKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun <T> kotlin.sequences.Sequence<T>.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((T) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.sequences.SequencesKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: ShortArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Short) -> kotlin.CharSequence)?)
    locationString: (in kotlin.collections.ArraysKt)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.ShortArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Short) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: kotlin.collections.ArraysKt.joinToString

NavigationItem:
    name: joinToString
ItemPresentation:
    presentableText: ShortArray.joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((kotlin.Short) -> kotlin.CharSequence)?)
    locationString: (kotlin.collections)
    icon: RowIcon(icons=[Function, Public])
TargetElement: public fun kotlin.ShortArray.joinToString(separator: kotlin.CharSequence = COMPILED_CODE, prefix: kotlin.CharSequence = COMPILED_CODE, postfix: kotlin.CharSequence = COMPILED_CODE, limit: kotlin.Int = COMPILED_CODE, truncated: kotlin.CharSequence = COMPILED_CODE, transform: ((kotlin.Short) -> kotlin.CharSequence)? = COMPILED_CODE): kotlin.String { /* compiled code */ }
QualifiedName: ShortArray.joinToString