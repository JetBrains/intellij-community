// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.highlighting;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("highlighting/highlighting-k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers")
public class K2ComposeCompilerPluginCheckerTestGenerated extends AbstractK2ComposeCompilerPluginCheckerTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K2;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("CfromNC.kt")
    public void testCfromNC() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CfromNC.kt");
    }

    @TestMetadata("CinCLambdaArg.kt")
    public void testCinCLambdaArg() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinCLambdaArg.kt");
    }

    @TestMetadata("CinCPropGetter.kt")
    public void testCinCPropGetter() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinCPropGetter.kt");
    }

    @TestMetadata("CinCrossinlineNCLambdaArg.kt")
    public void testCinCrossinlineNCLambdaArg() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinCrossinlineNCLambdaArg.kt");
    }

    @TestMetadata("CinInlinedNCLambdaArg.kt")
    public void testCinInlinedNCLambdaArg() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinInlinedNCLambdaArg.kt");
    }

    @TestMetadata("CinLambdaArgOfC.kt")
    public void testCinLambdaArgOfC() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinLambdaArgOfC.kt");
    }

    @TestMetadata("CinLambdaArgOfNC.kt")
    public void testCinLambdaArgOfNC() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinLambdaArgOfNC.kt");
    }

    @TestMetadata("CinNCPropGetter.kt")
    public void testCinNCPropGetter() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinNCPropGetter.kt");
    }

    @TestMetadata("CinNestedInlinedNCLambdaArg.kt")
    public void testCinNestedInlinedNCLambdaArg() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinNestedInlinedNCLambdaArg.kt");
    }

    @TestMetadata("CinNoinlineNCLambdaArg.kt")
    public void testCinNoinlineNCLambdaArg() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinNoinlineNCLambdaArg.kt");
    }

    @TestMetadata("CinTopLevelInitializer.kt")
    public void testCinTopLevelInitializer() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/CinTopLevelInitializer.kt");
    }

    @TestMetadata("ComposableFunctionReferences.kt")
    public void testComposableFunctionReferences() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/ComposableFunctionReferences.kt");
    }

    @TestMetadata("ComposableMainFun.kt")
    public void testComposableMainFun() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/ComposableMainFun.kt");
    }

    @TestMetadata("GenericComposableInference1.kt")
    public void testGenericComposableInference1() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/GenericComposableInference1.kt");
    }

    @TestMetadata("MissingComposableOnOverride.kt")
    public void testMissingComposableOnOverride() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/MissingComposableOnOverride.kt");
    }

    @TestMetadata("MissingOverrideComposableLambda.kt")
    public void testMissingOverrideComposableLambda() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/MissingOverrideComposableLambda.kt");
    }

    @TestMetadata("MultipleOverrideLambda.kt")
    public void testMultipleOverrideLambda() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/MultipleOverrideLambda.kt");
    }

    @TestMetadata("NCfromC.kt")
    public void testNCfromC() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/NCfromC.kt");
    }

    @TestMetadata("NonComposableFunctionReferences.kt")
    public void testNonComposableFunctionReferences() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/NonComposableFunctionReferences.kt");
    }

    @TestMetadata("PropertyWithInitializer.kt")
    public void testPropertyWithInitializer() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/PropertyWithInitializer.kt");
    }

    @TestMetadata("SuspendComposable.kt")
    public void testSuspendComposable() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/SuspendComposable.kt");
    }

    @TestMetadata("WrongOverrideLambda.kt")
    public void testWrongOverrideLambda() throws Exception {
        runTest("../../idea/tests/testData/highlighterMetaInfoWithComposeCompilerCheckers/WrongOverrideLambda.kt");
    }
}
