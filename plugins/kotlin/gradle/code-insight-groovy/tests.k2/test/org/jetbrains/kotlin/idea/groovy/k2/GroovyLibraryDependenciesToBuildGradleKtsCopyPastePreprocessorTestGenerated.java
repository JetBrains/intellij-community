// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.groovy.k2;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("gradle/code-insight-groovy/tests.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/groovyDependencyToKotlinDependency")
public abstract class GroovyLibraryDependenciesToBuildGradleKtsCopyPastePreprocessorTestGenerated extends AbstractGroovyLibraryDependenciesToBuildGradleKtsCopyPastePreprocessorTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/groovyDependencyToKotlinDependency/converted")
    public static class Converted extends AbstractGroovyLibraryDependenciesToBuildGradleKtsCopyPastePreprocessorTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("allConfigurations.groovy")
        public void testAllConfigurations() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/allConfigurations.groovy");
        }

        @TestMetadata("doubleQuotesNoParenthesis.groovy")
        public void testDoubleQuotesNoParenthesis() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/doubleQuotesNoParenthesis.groovy");
        }

        @TestMetadata("fromGradleExamples.groovy")
        public void testFromGradleExamples() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/fromGradleExamples.groovy");
        }

        @TestMetadata("fromGradleExamplesWithComments.groovy")
        public void testFromGradleExamplesWithComments() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/fromGradleExamplesWithComments.groovy");
        }

        @TestMetadata("mixedNameAndString.groovy")
        public void testMixedNameAndString() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/mixedNameAndString.groovy");
        }

        @TestMetadata("multipleNamed.groovy")
        public void testMultipleNamed() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/multipleNamed.groovy");
        }

        @TestMetadata("multipleStrings.groovy")
        public void testMultipleStrings() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/multipleStrings.groovy");
        }

        @TestMetadata("multipleStringsAsArray.groovy")
        public void testMultipleStringsAsArray() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/multipleStringsAsArray.groovy");
        }

        @TestMetadata("namedArgs.groovy")
        public void testNamedArgs() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/namedArgs.groovy");
        }

        @TestMetadata("namedArgsSimpleReference.groovy")
        public void testNamedArgsSimpleReference() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/namedArgsSimpleReference.groovy");
        }

        @TestMetadata("singleString.groovy")
        public void testSingleString() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/singleString.groovy");
        }

        @TestMetadata("singleStringTransitiveClosure.groovy")
        public void testSingleStringTransitiveClosure() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/singleStringTransitiveClosure.groovy");
        }

        @TestMetadata("singleStringVersionSimpleReference.groovy")
        public void testSingleStringVersionSimpleReference() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/singleStringVersionSimpleReference.groovy");
        }

        @TestMetadata("transitiveNamedArgs.groovy")
        public void testTransitiveNamedArgs() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/transitiveNamedArgs.groovy");
        }

        @TestMetadata("transitiveNamedArgsClosure.groovy")
        public void testTransitiveNamedArgsClosure() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/converted/transitiveNamedArgsClosure.groovy");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/groovyDependencyToKotlinDependency/notConverted")
    public static class NotConverted extends AbstractGroovyLibraryDependenciesToBuildGradleKtsCopyPastePreprocessorTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("closure.groovy")
        public void testClosure() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/closure.groovy");
        }

        @TestMetadata("codeBlock.groovy")
        public void testCodeBlock() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/codeBlock.groovy");
        }

        @TestMetadata("comment.groovy")
        public void testComment() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/comment.groovy");
        }

        @TestMetadata("extraNamedArgs.groovy")
        public void testExtraNamedArgs() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/extraNamedArgs.groovy");
        }

        @TestMetadata("incorrectStringCoordinatesNoColonAfterFirst.groovy")
        public void testIncorrectStringCoordinatesNoColonAfterFirst() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/incorrectStringCoordinatesNoColonAfterFirst.groovy");
        }

        @TestMetadata("incorrectStringCoordinatesNoColonAfterMiddle.groovy")
        public void testIncorrectStringCoordinatesNoColonAfterMiddle() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/incorrectStringCoordinatesNoColonAfterMiddle.groovy");
        }

        @TestMetadata("incorrectStringCoordinatesNoColonBeforeLast.groovy")
        public void testIncorrectStringCoordinatesNoColonBeforeLast() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/incorrectStringCoordinatesNoColonBeforeLast.groovy");
        }

        @TestMetadata("incorrectStringCoordinatesNoColonBeforeMiddle.groovy")
        public void testIncorrectStringCoordinatesNoColonBeforeMiddle() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/incorrectStringCoordinatesNoColonBeforeMiddle.groovy");
        }

        @TestMetadata("incorrectStringCoordinatesToManyParts.groovy")
        public void testIncorrectStringCoordinatesToManyParts() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/incorrectStringCoordinatesToManyParts.groovy");
        }

        @TestMetadata("justRandomString.groovy")
        public void testJustRandomString() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/justRandomString.groovy");
        }

        @TestMetadata("justRegularDependencyString.groovy")
        public void testJustRegularDependencyString() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/justRegularDependencyString.groovy");
        }

        @TestMetadata("kotlinInfixFunctionCall.groovy")
        public void testKotlinInfixFunctionCall() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/kotlinInfixFunctionCall.groovy");
        }

        @TestMetadata("oneUnknownConfiguration.groovy")
        public void testOneUnknownConfiguration() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/oneUnknownConfiguration.groovy");
        }

        @TestMetadata("possiblyKotlin.groovy")
        public void testPossiblyKotlin() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/possiblyKotlin.groovy");
        }

        @TestMetadata("someCode.groovy")
        public void testSomeCode() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/someCode.groovy");
        }

        @TestMetadata("transitiveClosureBadName.groovy")
        public void testTransitiveClosureBadName() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/transitiveClosureBadName.groovy");
        }

        @TestMetadata("transitiveClosureIntValue.groovy")
        public void testTransitiveClosureIntValue() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/transitiveClosureIntValue.groovy");
        }

        @TestMetadata("transitiveClosureMoreStatements.groovy")
        public void testTransitiveClosureMoreStatements() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/transitiveClosureMoreStatements.groovy");
        }

        @TestMetadata("transitiveClosureRefValue.groovy")
        public void testTransitiveClosureRefValue() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/transitiveClosureRefValue.groovy");
        }

        @TestMetadata("unknownConfiguration.groovy")
        public void testUnknownConfiguration() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/unknownConfiguration.groovy");
        }

        @TestMetadata("versionMethodCallStringInterpolation.groovy")
        public void testVersionMethodCallStringInterpolation() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/versionMethodCallStringInterpolation.groovy");
        }

        @TestMetadata("versionQualifiedRefStringInterpolation.groovy")
        public void testVersionQualifiedRefStringInterpolation() throws Exception {
            runTest("testData/groovyDependencyToKotlinDependency/notConverted/versionQualifiedRefStringInterpolation.groovy");
        }
    }
}
