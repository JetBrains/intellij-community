/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.fir.low.level.api.trackers;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.test.TestRoot;
import org.junit.runner.RunWith;

/*
 * This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir-low-level-api")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testdata/outOfBlockProjectWide")
public class ProjectWideOutOfBlockKotlinModificationTrackerTestGenerated extends AbstractProjectWideOutOfBlockKotlinModificationTrackerTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("funInCompanionObject.kt")
    public void testFunInCompanionObject() throws Exception {
        runTest("testdata/outOfBlockProjectWide/funInCompanionObject.kt");
    }

    @TestMetadata("localFun.kt")
    public void testLocalFun() throws Exception {
        runTest("testdata/outOfBlockProjectWide/localFun.kt");
    }

    @TestMetadata("topLevelExpressionBodyFunWithType.kt")
    public void testTopLevelExpressionBodyFunWithType() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topLevelExpressionBodyFunWithType.kt");
    }

    @TestMetadata("topLevelExpressionBodyFunWithoutType.kt")
    public void testTopLevelExpressionBodyFunWithoutType() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topLevelExpressionBodyFunWithoutType.kt");
    }

    @TestMetadata("topLevelFunWithType.kt")
    public void testTopLevelFunWithType() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topLevelFunWithType.kt");
    }

    @TestMetadata("topLevelUnitFun.kt")
    public void testTopLevelUnitFun() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topLevelUnitFun.kt");
    }

    @TestMetadata("topPropertyWithTypeInGetter.kt")
    public void testTopPropertyWithTypeInGetter() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topPropertyWithTypeInGetter.kt");
    }

    @TestMetadata("topPropertyWithTypeInGetterOnNextLine.kt")
    public void testTopPropertyWithTypeInGetterOnNextLine() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topPropertyWithTypeInGetterOnNextLine.kt");
    }

    @TestMetadata("topPropertyWithTypeInInititalzer.kt")
    public void testTopPropertyWithTypeInInititalzer() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topPropertyWithTypeInInititalzer.kt");
    }

    @TestMetadata("topPropertyWithTypeInSetter.kt")
    public void testTopPropertyWithTypeInSetter() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topPropertyWithTypeInSetter.kt");
    }

    @TestMetadata("topPropertyWithoutTypeInGetter.kt")
    public void testTopPropertyWithoutTypeInGetter() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topPropertyWithoutTypeInGetter.kt");
    }

    @TestMetadata("topPropertyWithoutTypeInInititalzer.kt")
    public void testTopPropertyWithoutTypeInInititalzer() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topPropertyWithoutTypeInInititalzer.kt");
    }

    @TestMetadata("topPropertyWithoutTypeInSetter.kt")
    public void testTopPropertyWithoutTypeInSetter() throws Exception {
        runTest("testdata/outOfBlockProjectWide/topPropertyWithoutTypeInSetter.kt");
    }

    @TestMetadata("typeInFunctionAnnotation.kt")
    public void testTypeInFunctionAnnotation() throws Exception {
        runTest("testdata/outOfBlockProjectWide/typeInFunctionAnnotation.kt");
    }

    @TestMetadata("typeInFunctionAnnotationParameter.kt")
    public void testTypeInFunctionAnnotationParameter() throws Exception {
        runTest("testdata/outOfBlockProjectWide/typeInFunctionAnnotationParameter.kt");
    }

    @TestMetadata("typeInFunctionModifiers.kt")
    public void testTypeInFunctionModifiers() throws Exception {
        runTest("testdata/outOfBlockProjectWide/typeInFunctionModifiers.kt");
    }

    @TestMetadata("typeInFunctionName.kt")
    public void testTypeInFunctionName() throws Exception {
        runTest("testdata/outOfBlockProjectWide/typeInFunctionName.kt");
    }

    @TestMetadata("typeInFunctionParams.kt")
    public void testTypeInFunctionParams() throws Exception {
        runTest("testdata/outOfBlockProjectWide/typeInFunctionParams.kt");
    }

    @TestMetadata("typeInFunctionParamsType.kt")
    public void testTypeInFunctionParamsType() throws Exception {
        runTest("testdata/outOfBlockProjectWide/typeInFunctionParamsType.kt");
    }

    @TestMetadata("typeInFunctionReturnType.kt")
    public void testTypeInFunctionReturnType() throws Exception {
        runTest("testdata/outOfBlockProjectWide/typeInFunctionReturnType.kt");
    }

    @TestMetadata("typeInFunctionTypeParams.kt")
    public void testTypeInFunctionTypeParams() throws Exception {
        runTest("testdata/outOfBlockProjectWide/typeInFunctionTypeParams.kt");
    }
}
