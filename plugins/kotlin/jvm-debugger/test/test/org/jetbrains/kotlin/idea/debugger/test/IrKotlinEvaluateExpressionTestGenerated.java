// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.debugger.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;
import org.jetbrains.kotlin.test.TargetBackend;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("jvm-debugger/test")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class IrKotlinEvaluateExpressionTestGenerated extends AbstractIrKotlinEvaluateExpressionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/evaluation/singleBreakpoint")
    public abstract static class SingleBreakpoint extends AbstractIrKotlinEvaluateExpressionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/compilingEvaluator")
        public abstract static class CompilingEvaluator extends AbstractIrKotlinEvaluateExpressionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers")
            public static class InaccessibleMembers extends AbstractIrKotlinEvaluateExpressionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
                }

                @TestMetadata("inaccessibleMembers.kt")
                public void testInaccessibleMembers() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/inaccessibleMembers.kt");
                }

                @TestMetadata("inaccessibleMembersNoReflection.kt")
                public void testInaccessibleMembersNoReflection() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/inaccessibleMembersNoReflection.kt");
                }

                @TestMetadata("inaccessibleTypes.kt")
                public void testInaccessibleTypes() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/inaccessibleTypes.kt");
                }

                @TestMetadata("javaFields.kt")
                public void testJavaFields() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/javaFields.kt");
                }

                @TestMetadata("javaMethods.kt")
                public void testJavaMethods() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/javaMethods.kt");
                }

                @TestMetadata("kotlinFields.kt")
                public void testKotlinFields() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/kotlinFields.kt");
                }

                @TestMetadata("kotlinMethods.kt")
                public void testKotlinMethods() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/kotlinMethods.kt");
                }

                @TestMetadata("membersFromLocalClass.kt")
                public void testMembersFromLocalClass() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/membersFromLocalClass.kt");
                }

                @TestMetadata("membersFromLocalClassNoReflection.kt")
                public void testMembersFromLocalClassNoReflection() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/membersFromLocalClassNoReflection.kt");
                }

                @TestMetadata("outerMembers.kt")
                public void testOuterMembers() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/outerMembers.kt");
                }

                @TestMetadata("outerMembersNoReflection.kt")
                public void testOuterMembersNoReflection() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/outerMembersNoReflection.kt");
                }

                @TestMetadata("privateAnnotationCompanionValue.kt")
                public void testPrivateAnnotationCompanionValue() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/privateAnnotationCompanionValue.kt");
                }

                @TestMetadata("selfMembers.kt")
                public void testSelfMembers() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/selfMembers.kt");
                }

                @TestMetadata("selfMembersNoReflection.kt")
                public void testSelfMembersNoReflection() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/selfMembersNoReflection.kt");
                }

                @TestMetadata("superMembers.kt")
                public void testSuperMembers() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/superMembers.kt");
                }

                @TestMetadata("superMembersNoReflection.kt")
                public void testSuperMembersNoReflection() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/inaccessibleMembers/superMembersNoReflection.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/evaluation/singleBreakpoint/compilingEvaluator")
            public static class Uncategorized extends AbstractIrKotlinEvaluateExpressionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
                }

                @TestMetadata("ceAnonymousObject.kt")
                public void testCeAnonymousObject() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/ceAnonymousObject.kt");
                }

                @TestMetadata("ceAnonymousObjectCapturedInClosure.kt")
                public void testCeAnonymousObjectCapturedInClosure() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/ceAnonymousObjectCapturedInClosure.kt");
                }

                @TestMetadata("ceAnonymousObjectThisAsReceiver.kt")
                public void testCeAnonymousObjectThisAsReceiver() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/ceAnonymousObjectThisAsReceiver.kt");
                }

                @TestMetadata("ceLambda.kt")
                public void testCeLambda() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/ceLambda.kt");
                }

                @TestMetadata("ceLocalClass.kt")
                public void testCeLocalClass() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/ceLocalClass.kt");
                }

                @TestMetadata("ceLocalClassWithSuperClass.kt")
                public void testCeLocalClassWithSuperClass() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/ceLocalClassWithSuperClass.kt");
                }

                @TestMetadata("ceObject.kt")
                public void testCeObject() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/ceObject.kt");
                }

                @TestMetadata("ceSeveralLambdas.kt")
                public void testCeSeveralLambdas() throws Exception {
                    runTest("testData/evaluation/singleBreakpoint/compilingEvaluator/ceSeveralLambdas.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/contextReceivers")
        public static class ContextReceivers extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("contextClassAndContextReceiversInMethod.kt")
            public void testContextClassAndContextReceiversInMethod() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/contextClassAndContextReceiversInMethod.kt");
            }

            @TestMetadata("contextClassAndContextReceiversInSuspendMethod.kt")
            public void testContextClassAndContextReceiversInSuspendMethod() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/contextClassAndContextReceiversInSuspendMethod.kt");
            }

            @TestMetadata("contextClassReceiversInMethod.kt")
            public void testContextClassReceiversInMethod() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/contextClassReceiversInMethod.kt");
            }

            @TestMetadata("contextReceiversInFunction.kt")
            public void testContextReceiversInFunction() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/contextReceiversInFunction.kt");
            }

            @TestMetadata("contextReceiversInInlineFunction.kt")
            public void testContextReceiversInInlineFunction() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/contextReceiversInInlineFunction.kt");
            }

            @TestMetadata("contextReceiversInLambdas.kt")
            public void testContextReceiversInLambdas() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/contextReceiversInLambdas.kt");
            }

            @TestMetadata("contextReceiversInSamLambdas.kt")
            public void testContextReceiversInSamLambdas() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/contextReceiversInSamLambdas.kt");
            }

            @TestMetadata("contextReceiversInSuspendFunction.kt")
            public void testContextReceiversInSuspendFunction() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/contextReceiversInSuspendFunction.kt");
            }

            @TestMetadata("functionCallWithImplicitContextClassReceiverCapturing.kt")
            public void testFunctionCallWithImplicitContextClassReceiverCapturing() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/functionCallWithImplicitContextClassReceiverCapturing.kt");
            }

            @TestMetadata("functionCallWithImplicitContextReceiverCapturing.kt")
            public void testFunctionCallWithImplicitContextReceiverCapturing() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/functionCallWithImplicitContextReceiverCapturing.kt");
            }

            @TestMetadata("nestedContextClassReceivers.kt")
            public void testNestedContextClassReceivers() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/contextReceivers/nestedContextClassReceivers.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/coroutines")
        public static class Coroutines extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("accessClassPropertyInSuspendFunction.kt")
            public void testAccessClassPropertyInSuspendFunction() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/accessClassPropertyInSuspendFunction.kt");
            }

            @TestMetadata("anyUpdateInvokeStatic.kt")
            public void testAnyUpdateInvokeStatic() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/anyUpdateInvokeStatic.kt");
            }

            @TestMetadata("anyUpdateVariable.kt")
            public void testAnyUpdateVariable() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/anyUpdateVariable.kt");
            }

            @TestMetadata("capturedReceiverName.kt")
            public void testCapturedReceiverName() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/capturedReceiverName.kt");
            }

            @TestMetadata("coroutineContextExists.kt")
            public void testCoroutineContextExists() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/coroutineContextExists.kt");
            }

            @TestMetadata("coroutineScopeReceiver.kt")
            public void testCoroutineScopeReceiver() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/coroutineScopeReceiver.kt");
            }

            @TestMetadata("functionCallWithSuspendFunctionInside.kt")
            public void testFunctionCallWithSuspendFunctionInside() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/functionCallWithSuspendFunctionInside.kt");
            }

            @TestMetadata("primitivesCoertion.kt")
            public void testPrimitivesCoertion() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/primitivesCoertion.kt");
            }

            @TestMetadata("stringUpdateInvokeStatic.kt")
            public void testStringUpdateInvokeStatic() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/stringUpdateInvokeStatic.kt");
            }

            @TestMetadata("stringUpdateInvokeVirtual.kt")
            public void testStringUpdateInvokeVirtual() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/stringUpdateInvokeVirtual.kt");
            }

            @TestMetadata("stringUpdatePutField.kt")
            public void testStringUpdatePutField() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/stringUpdatePutField.kt");
            }

            @TestMetadata("stringUpdateVariable.kt")
            public void testStringUpdateVariable() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/stringUpdateVariable.kt");
            }

            @TestMetadata("suspendFunctionInClass.kt")
            public void testSuspendFunctionInClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/suspendFunctionInClass.kt");
            }

            @TestMetadata("suspendFunctionWithInlineClass.kt")
            public void testSuspendFunctionWithInlineClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/suspendFunctionWithInlineClass.kt");
            }

            @TestMetadata("suspendFunctionsWithContext.kt")
            public void testSuspendFunctionsWithContext() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/suspendFunctionsWithContext.kt");
            }

            @TestMetadata("suspendFunctionsWithoutContext.kt")
            public void testSuspendFunctionsWithoutContext() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/suspendFunctionsWithoutContext.kt");
            }

            @TestMetadata("suspendFunctionsWithoutKotlinxCoroutines.kt")
            public void testSuspendFunctionsWithoutKotlinxCoroutines() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/suspendFunctionsWithoutKotlinxCoroutines.kt");
            }

            @TestMetadata("uncapturedVariableInSuspendLambda.kt")
            public void testUncapturedVariableInSuspendLambda() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/coroutines/uncapturedVariableInSuspendLambda.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/createExpression")
        public static class CreateExpression extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("createExpressionCastToBuiltIn.kt")
            public void testCreateExpressionCastToBuiltIn() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/createExpression/createExpressionCastToBuiltIn.kt");
            }

            @TestMetadata("createExpressionSimple.kt")
            public void testCreateExpressionSimple() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/createExpression/createExpressionSimple.kt");
            }

            @TestMetadata("createExpressionWithArray.kt")
            public void testCreateExpressionWithArray() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/createExpression/createExpressionWithArray.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/extraVariables")
        public static class ExtraVariables extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("evBreakpointOnPropertyDeclaration.kt")
            public void testEvBreakpointOnPropertyDeclaration() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evBreakpointOnPropertyDeclaration.kt");
            }

            @TestMetadata("evDelegatedProperty.kt")
            public void testEvDelegatedProperty() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evDelegatedProperty.kt");
            }

            @TestMetadata("evDuplicateItems.kt")
            public void testEvDuplicateItems() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evDuplicateItems.kt");
            }

            @TestMetadata("evFinalProperty.kt")
            public void testEvFinalProperty() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evFinalProperty.kt");
            }

            @TestMetadata("evFunctionDeclaration.kt")
            public void testEvFunctionDeclaration() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evFunctionDeclaration.kt");
            }

            @TestMetadata("evLineRange.kt")
            public void testEvLineRange() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evLineRange.kt");
            }

            @TestMetadata("evProperty.kt")
            public void testEvProperty() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evProperty.kt");
            }

            @TestMetadata("evPropertyRefExpr.kt")
            public void testEvPropertyRefExpr() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evPropertyRefExpr.kt");
            }

            @TestMetadata("evSkipAnonymousObject.kt")
            public void testEvSkipAnonymousObject() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evSkipAnonymousObject.kt");
            }

            @TestMetadata("evSkipLambda.kt")
            public void testEvSkipLambda() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evSkipLambda.kt");
            }

            @TestMetadata("evSkipLocalClass.kt")
            public void testEvSkipLocalClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extraVariables/evSkipLocalClass.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/frame")
        public static class Frame extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("annotationsAreNotShown.kt")
            public void testAnnotationsAreNotShown() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/annotationsAreNotShown.kt");
            }

            @TestMetadata("capturedValues1.kt")
            public void testCapturedValues1() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/capturedValues1.kt");
            }

            @TestMetadata("capturedValues2.kt")
            public void testCapturedValues2() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/capturedValues2.kt");
            }

            @TestMetadata("catchVariable.kt")
            public void testCatchVariable() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/catchVariable.kt");
            }

            @TestMetadata("companionObjectGettersAreNotShown.kt")
            public void testCompanionObjectGettersAreNotShown() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/companionObjectGettersAreNotShown.kt");
            }

            @TestMetadata("coroutineContextFun.kt")
            public void testCoroutineContextFun() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/coroutineContextFun.kt");
            }

            @TestMetadata("coroutineContextLambda.kt")
            public void testCoroutineContextLambda() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/coroutineContextLambda.kt");
            }

            @TestMetadata("coroutineContextWithoutSuspend.kt")
            public void testCoroutineContextWithoutSuspend() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/coroutineContextWithoutSuspend.kt");
            }

            @TestMetadata("defaultImplsMangling.kt")
            public void testDefaultImplsMangling() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/defaultImplsMangling.kt");
            }

            @TestMetadata("delegatedPropertyInClass.kt")
            public void testDelegatedPropertyInClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/delegatedPropertyInClass.kt");
            }

            @TestMetadata("delegatedPropertyInClassKotlinVariables.kt")
            public void testDelegatedPropertyInClassKotlinVariables() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/delegatedPropertyInClassKotlinVariables.kt");
            }

            @TestMetadata("delegatedPropertyInClassWithToString.kt")
            public void testDelegatedPropertyInClassWithToString() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/delegatedPropertyInClassWithToString.kt");
            }

            @TestMetadata("delegatedPropertyInClassWoRenderer.kt")
            public void testDelegatedPropertyInClassWoRenderer() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/delegatedPropertyInClassWoRenderer.kt");
            }

            @TestMetadata("frameAnonymousObject.kt")
            public void testFrameAnonymousObject() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameAnonymousObject.kt");
            }

            @TestMetadata("frameClassObject.kt")
            public void testFrameClassObject() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameClassObject.kt");
            }

            @TestMetadata("frameClosingBracket.kt")
            public void testFrameClosingBracket() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameClosingBracket.kt");
            }

            @TestMetadata("frameExtFunExtFun.kt")
            public void testFrameExtFunExtFun() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameExtFunExtFun.kt");
            }

            @TestMetadata("frameExtensionFun.kt")
            public void testFrameExtensionFun() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameExtensionFun.kt");
            }

            @TestMetadata("frameInlineArgument.kt")
            public void testFrameInlineArgument() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameInlineArgument.kt");
            }

            @TestMetadata("frameInlineArgumentInsideInlineFun.kt")
            public void testFrameInlineArgumentInsideInlineFun() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameInlineArgumentInsideInlineFun.kt");
            }

            @TestMetadata("frameInlineFun.kt")
            public void testFrameInlineFun() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameInlineFun.kt");
            }

            @TestMetadata("frameInlineFunCallInsideInlineFun.kt")
            public void testFrameInlineFunCallInsideInlineFun() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameInlineFunCallInsideInlineFun.kt");
            }

            @TestMetadata("frameInlineFunCallInsideInlineFunKotlinVariables.kt")
            public void testFrameInlineFunCallInsideInlineFunKotlinVariables() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameInlineFunCallInsideInlineFunKotlinVariables.kt");
            }

            @TestMetadata("frameInnerClass.kt")
            public void testFrameInnerClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameInnerClass.kt");
            }

            @TestMetadata("frameInnerLambda.kt")
            public void testFrameInnerLambda() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameInnerLambda.kt");
            }

            @TestMetadata("frameLambda.kt")
            public void testFrameLambda() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameLambda.kt");
            }

            @TestMetadata("frameLambdaNotUsed.kt")
            public void testFrameLambdaNotUsed() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameLambdaNotUsed.kt");
            }

            @TestMetadata("frameLocalVariable.kt")
            public void testFrameLocalVariable() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameLocalVariable.kt");
            }

            @TestMetadata("frameObject.kt")
            public void testFrameObject() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameObject.kt");
            }

            @TestMetadata("frameSharedVar.kt")
            public void testFrameSharedVar() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameSharedVar.kt");
            }

            @TestMetadata("frameSharedVarLocalVar.kt")
            public void testFrameSharedVarLocalVar() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameSharedVarLocalVar.kt");
            }

            @TestMetadata("frameSimple.kt")
            public void testFrameSimple() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameSimple.kt");
            }

            @TestMetadata("frameThis0.kt")
            public void testFrameThis0() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameThis0.kt");
            }

            @TestMetadata("frameThis0Ext.kt")
            public void testFrameThis0Ext() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameThis0Ext.kt");
            }

            @TestMetadata("frameThis0This0.kt")
            public void testFrameThis0This0() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/frameThis0This0.kt");
            }

            @TestMetadata("getterOfLateinitVariableIsNotShown.kt")
            public void testGetterOfLateinitVariableIsNotShown() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/getterOfLateinitVariableIsNotShown.kt");
            }

            @TestMetadata("gettersAreNotDuplicated.kt")
            public void testGettersAreNotDuplicated() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/gettersAreNotDuplicated.kt");
            }

            @TestMetadata("hideContinuationThis.kt")
            public void testHideContinuationThis() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/hideContinuationThis.kt");
            }

            @TestMetadata("hideSyntheticThis.kt")
            public void testHideSyntheticThis() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/hideSyntheticThis.kt");
            }

            @TestMetadata("inlineFunThisKotlinVariables.kt")
            public void testInlineFunThisKotlinVariables() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/inlineFunThisKotlinVariables.kt");
            }

            @TestMetadata("inlinedLambdaInsideSam.kt")
            public void testInlinedLambdaInsideSam() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/inlinedLambdaInsideSam.kt");
            }

            @TestMetadata("lambdaAsValueArgument.kt")
            public void testLambdaAsValueArgument() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/lambdaAsValueArgument.kt");
            }

            @TestMetadata("lambdaFun1.kt")
            public void testLambdaFun1() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/lambdaFun1.kt");
            }

            @TestMetadata("lambdaFun2.kt")
            public void testLambdaFun2() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/lambdaFun2.kt");
            }

            @TestMetadata("lambdaFun3.kt")
            public void testLambdaFun3() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/lambdaFun3.kt");
            }

            @TestMetadata("lambdaFun4.kt")
            public void testLambdaFun4() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/lambdaFun4.kt");
            }

            @TestMetadata("lambdaParameterMangling.kt")
            public void testLambdaParameterMangling() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/lambdaParameterMangling.kt");
            }

            @TestMetadata("lambdaThisMangling.kt")
            public void testLambdaThisMangling() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/lambdaThisMangling.kt");
            }

            @TestMetadata("localFunctionMangling.kt")
            public void testLocalFunctionMangling() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/localFunctionMangling.kt");
            }

            @TestMetadata("nestedInlineFun.kt")
            public void testNestedInlineFun() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/nestedInlineFun.kt");
            }

            @TestMetadata("nestedInlineFun2.kt")
            public void testNestedInlineFun2() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/nestedInlineFun2.kt");
            }

            @TestMetadata("objectFields.kt")
            public void testObjectFields() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/objectFields.kt");
            }

            @TestMetadata("remapThis.kt")
            public void testRemapThis() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/remapThis.kt");
            }

            @TestMetadata("showPropertiesFromMethods.kt")
            public void testShowPropertiesFromMethods() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/showPropertiesFromMethods.kt");
            }

            @TestMetadata("sourcePositionForGetter.kt")
            public void testSourcePositionForGetter() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/sourcePositionForGetter.kt");
            }

            @TestMetadata("sourcePositionForGetterWithDelegatedInterface.kt")
            public void testSourcePositionForGetterWithDelegatedInterface() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/sourcePositionForGetterWithDelegatedInterface.kt");
            }

            @TestMetadata("sourcePositionForGetterWithDiamondInterfaces.kt")
            public void testSourcePositionForGetterWithDiamondInterfaces() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/sourcePositionForGetterWithDiamondInterfaces.kt");
            }

            @TestMetadata("suspendContinuation.kt")
            public void testSuspendContinuation() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/frame/suspendContinuation.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/javaContext")
        public static class JavaContext extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("jcBlock.kt")
            public void testJcBlock() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/javaContext/jcBlock.kt");
            }

            @TestMetadata("jcImports.kt")
            public void testJcImports() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/javaContext/jcImports.kt");
            }

            @TestMetadata("jcLocalVariable.kt")
            public void testJcLocalVariable() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/javaContext/jcLocalVariable.kt");
            }

            @TestMetadata("jcMarkedObject.kt")
            public void testJcMarkedObject() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/javaContext/jcMarkedObject.kt");
            }

            @TestMetadata("jcProperty.kt")
            public void testJcProperty() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/javaContext/jcProperty.kt");
            }

            @TestMetadata("jcSimple.kt")
            public void testJcSimple() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/javaContext/jcSimple.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/labels")
        public static class Labels extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("lCallOnLabeledObj.kt")
            public void testLCallOnLabeledObj() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/labels/lCallOnLabeledObj.kt");
            }

            @TestMetadata("lIdentifier.kt")
            public void testLIdentifier() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/labels/lIdentifier.kt");
            }

            @TestMetadata("lSeveralLabels.kt")
            public void testLSeveralLabels() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/labels/lSeveralLabels.kt");
            }

            @TestMetadata("lSimple.kt")
            public void testLSimple() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/labels/lSimple.kt");
            }

            @TestMetadata("ldifferentTypes.kt")
            public void testLdifferentTypes() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/labels/ldifferentTypes.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/lambdas")
        public static class Lambdas extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("destructuringParam.kt")
            public void testDestructuringParam() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/destructuringParam.kt");
            }

            @TestMetadata("inlineFunctionalExpression.kt")
            public void testInlineFunctionalExpression() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/inlineFunctionalExpression.kt");
            }

            @TestMetadata("inlineLambda.kt")
            public void testInlineLambda() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/inlineLambda.kt");
            }

            @TestMetadata("lambdaOnReturn.kt")
            public void testLambdaOnReturn() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/lambdaOnReturn.kt");
            }

            @TestMetadata("lambdaOnSecondLine.kt")
            public void testLambdaOnSecondLine() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/lambdaOnSecondLine.kt");
            }

            @TestMetadata("oneLineFunctionalExpression.kt")
            public void testOneLineFunctionalExpression() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/oneLineFunctionalExpression.kt");
            }

            @TestMetadata("oneLineLambda.kt")
            public void testOneLineLambda() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/oneLineLambda.kt");
            }

            @TestMetadata("twoLambdasOnOneLineFirst.kt")
            public void testTwoLambdasOnOneLineFirst() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/twoLambdasOnOneLineFirst.kt");
            }

            @TestMetadata("twoLambdasOnOneLineSecond.kt")
            public void testTwoLambdasOnOneLineSecond() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/twoLambdasOnOneLineSecond.kt");
            }

            @TestMetadata("underscoreNames.kt")
            public void testUnderscoreNames() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdas/underscoreNames.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/renderer")
        public static class Renderer extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("collectionRenderer.kt")
            public void testCollectionRenderer() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/renderer/collectionRenderer.kt");
            }

            @TestMetadata("mapRenderer.kt")
            public void testMapRenderer() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/renderer/mapRenderer.kt");
            }

            @TestMetadata("toStringRenderer.kt")
            public void testToStringRenderer() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/renderer/toStringRenderer.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/simpleConstructors")
        public static class SimpleConstructors extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleConstructors/property.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/simpleLocals")
        public static class SimpleLocals extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("anonymousObject.kt")
            public void testAnonymousObject() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/anonymousObject.kt");
            }

            @TestMetadata("localClass.kt")
            public void testLocalClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/localClass.kt");
            }

            @TestMetadata("localFunction.kt")
            public void testLocalFunction() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/localFunction.kt");
            }

            @TestMetadata("localFunctionCapturedField.kt")
            public void testLocalFunctionCapturedField() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/localFunctionCapturedField.kt");
            }

            @TestMetadata("localFunctionWithArg.kt")
            public void testLocalFunctionWithArg() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/localFunctionWithArg.kt");
            }

            @TestMetadata("localFunctionWithArgAndCapturedLocalVar.kt")
            public void testLocalFunctionWithArgAndCapturedLocalVar() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/localFunctionWithArgAndCapturedLocalVar.kt");
            }

            @TestMetadata("localFunctionWithCapturedLocalVar.kt")
            public void testLocalFunctionWithCapturedLocalVar() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/localFunctionWithCapturedLocalVar.kt");
            }

            @TestMetadata("localFunctionWithCapturedOuterParameter.kt")
            public void testLocalFunctionWithCapturedOuterParameter() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/localFunctionWithCapturedOuterParameter.kt");
            }

            @TestMetadata("twoLocals.kt")
            public void testTwoLocals() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/twoLocals.kt");
            }

            @TestMetadata("variableFinderShouldNotImplementDynamicScoping.kt")
            public void testVariableFinderShouldNotImplementDynamicScoping() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/variableFinderShouldNotImplementDynamicScoping.kt");
            }

            @TestMetadata("variableFinderShouldNotImplementDynamicScoping2.kt")
            public void testVariableFinderShouldNotImplementDynamicScoping2() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/variableFinderShouldNotImplementDynamicScoping2.kt");
            }

            @TestMetadata("variableFinderShouldNotImplementDynamicScoping3.kt")
            public void testVariableFinderShouldNotImplementDynamicScoping3() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/variableFinderShouldNotImplementDynamicScoping3.kt");
            }

            @TestMetadata("variableFinderShouldNotImplementDynamicScoping4.kt")
            public void testVariableFinderShouldNotImplementDynamicScoping4() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/variableFinderShouldNotImplementDynamicScoping4.kt");
            }

            @TestMetadata("variableFinderShouldNotImplementDynamicScoping5.kt")
            public void testVariableFinderShouldNotImplementDynamicScoping5() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleLocals/variableFinderShouldNotImplementDynamicScoping5.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint/simpleSmartcasts")
        public static class SimpleSmartcasts extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("downcast.kt")
            public void testDowncast() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleSmartcasts/downcast.kt");
            }

            @TestMetadata("downcastFail.kt")
            public void testDowncastFail() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleSmartcasts/downcastFail.kt");
            }

            @TestMetadata("downcastFailSplitLines.kt")
            public void testDowncastFailSplitLines() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleSmartcasts/downcastFailSplitLines.kt");
            }

            @TestMetadata("downcastSplitLines.kt")
            public void testDowncastSplitLines() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleSmartcasts/downcastSplitLines.kt");
            }

            @TestMetadata("notnull.kt")
            public void testNotnull() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleSmartcasts/notnull.kt");
            }

            @TestMetadata("notnullFail.kt")
            public void testNotnullFail() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simpleSmartcasts/notnullFail.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/singleBreakpoint")
        public static class Uncategorized extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doSingleBreakpointTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("abstractFunCall.kt")
            public void testAbstractFunCall() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/abstractFunCall.kt");
            }

            @TestMetadata("accessToOverridenPropertyWithBackingField.kt")
            public void testAccessToOverridenPropertyWithBackingField() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/accessToOverridenPropertyWithBackingField.kt");
            }

            @TestMetadata("annotationValue.kt")
            public void testAnnotationValue() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/annotationValue.kt");
            }

            @TestMetadata("anonymousObjects.kt")
            public void testAnonymousObjects() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/anonymousObjects.kt");
            }

            @TestMetadata("arrayMethods.kt")
            public void testArrayMethods() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/arrayMethods.kt");
            }

            @TestMetadata("arrays.kt")
            public void testArrays() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/arrays.kt");
            }

            @TestMetadata("boxParam.kt")
            public void testBoxParam() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/boxParam.kt");
            }

            @TestMetadata("boxReturnValue.kt")
            public void testBoxReturnValue() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/boxReturnValue.kt");
            }

            @TestMetadata("breakpointInInlineFun.kt")
            public void testBreakpointInInlineFun() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/breakpointInInlineFun.kt");
            }

            @TestMetadata("callableBug.kt")
            public void testCallableBug() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/callableBug.kt");
            }

            @TestMetadata("capturedVariablesInSamLambda.kt")
            public void testCapturedVariablesInSamLambda() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/capturedVariablesInSamLambda.kt");
            }

            @TestMetadata("classFromAnotherPackage.kt")
            public void testClassFromAnotherPackage() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/classFromAnotherPackage.kt");
            }

            @TestMetadata("classObjectVal.kt")
            public void testClassObjectVal() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/classObjectVal.kt");
            }

            @TestMetadata("collections.kt")
            public void testCollections() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/collections.kt");
            }

            @TestMetadata("color.kt")
            public void testColor() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/color.kt");
            }

            @TestMetadata("dataClassCopy.kt")
            public void testDataClassCopy() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/dataClassCopy.kt");
            }

            @TestMetadata("defaultParameterValues.kt")
            public void testDefaultParameterValues() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/defaultParameterValues.kt");
            }

            @TestMetadata("defaultParameterValues2.kt")
            public void testDefaultParameterValues2() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/defaultParameterValues2.kt");
            }

            @TestMetadata("delegatedPropertyInOtherFile.kt")
            public void testDelegatedPropertyInOtherFile() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/delegatedPropertyInOtherFile.kt");
            }

            @TestMetadata("delegatedVariables.kt")
            public void testDelegatedVariables() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/delegatedVariables.kt");
            }

            @TestMetadata("dependentOnFile.kt")
            public void testDependentOnFile() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/dependentOnFile.kt");
            }

            @TestMetadata("distinctSequence.kt")
            public void testDistinctSequence() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/distinctSequence.kt");
            }

            @TestMetadata("doubles.kt")
            public void testDoubles() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/doubles.kt");
            }

            @TestMetadata("enums.kt")
            public void testEnums() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/enums.kt");
            }

            @TestMetadata("errors.kt")
            public void testErrors() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/errors.kt");
            }

            @TestMetadata("escapedNames.kt")
            public void testEscapedNames() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/escapedNames.kt");
            }

            @TestMetadata("experimentalApi.kt")
            public void testExperimentalApi() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/experimentalApi.kt");
            }

            @TestMetadata("extractLocalVariables.kt")
            public void testExtractLocalVariables() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extractLocalVariables.kt");
            }

            @TestMetadata("extractThis.kt")
            public void testExtractThis() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extractThis.kt");
            }

            @TestMetadata("extractThisInInterface.kt")
            public void testExtractThisInInterface() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extractThisInInterface.kt");
            }

            @TestMetadata("extractVariablesFromCall.kt")
            public void testExtractVariablesFromCall() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/extractVariablesFromCall.kt");
            }

            @TestMetadata("fieldGetters.kt")
            public void testFieldGetters() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/fieldGetters.kt");
            }

            @TestMetadata("fileWithError.kt")
            public void testFileWithError() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/fileWithError.kt");
            }

            @TestMetadata("funFromSuperClass.kt")
            public void testFunFromSuperClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/funFromSuperClass.kt");
            }

            @TestMetadata("functionDeclaration.kt")
            public void testFunctionDeclaration() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/functionDeclaration.kt");
            }

            @TestMetadata("functionWithBodyExpression.kt")
            public void testFunctionWithBodyExpression() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/functionWithBodyExpression.kt");
            }

            @TestMetadata("genericCrossinlineArgument.kt")
            public void testGenericCrossinlineArgument() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/genericCrossinlineArgument.kt");
            }

            @TestMetadata("genericWithMultipleUpperBounds.kt")
            public void testGenericWithMultipleUpperBounds() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/genericWithMultipleUpperBounds.kt");
            }

            @TestMetadata("imports.kt")
            public void testImports() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/imports.kt");
            }

            @TestMetadata("importsLambdaContext.kt")
            public void testImportsLambdaContext() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/importsLambdaContext.kt");
            }

            @TestMetadata("inlineFunInMultiFilePackage.kt")
            public void testInlineFunInMultiFilePackage() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/inlineFunInMultiFilePackage.kt");
            }

            @TestMetadata("inlineFunInRootPackage.kt")
            public void testInlineFunInRootPackage() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/inlineFunInRootPackage.kt");
            }

            @TestMetadata("inlineFunction.kt")
            public void testInlineFunction() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/inlineFunction.kt");
            }

            @TestMetadata("inlineFunctionBreakpointAnotherFile.kt")
            public void testInlineFunctionBreakpointAnotherFile() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/inlineFunctionBreakpointAnotherFile.kt");
            }

            @TestMetadata("inlineFunctionBreakpointVariants.kt")
            public void testInlineFunctionBreakpointVariants() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/inlineFunctionBreakpointVariants.kt");
            }

            @TestMetadata("inlineFunctionDeepInlining.kt")
            public void testInlineFunctionDeepInlining() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/inlineFunctionDeepInlining.kt");
            }

            @TestMetadata("inlineFunctionDeepInliningSameFile.kt")
            public void testInlineFunctionDeepInliningSameFile() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/inlineFunctionDeepInliningSameFile.kt");
            }

            @TestMetadata("inlineMethodsInSignature.kt")
            public void testInlineMethodsInSignature() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/inlineMethodsInSignature.kt");
            }

            @TestMetadata("innerClass.kt")
            public void testInnerClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/innerClass.kt");
            }

            @TestMetadata("insertInBlock.kt")
            public void testInsertInBlock() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/insertInBlock.kt");
            }

            @TestMetadata("internalFunctionEvaluate.kt")
            public void testInternalFunctionEvaluate() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/internalFunctionEvaluate.kt");
            }

            @TestMetadata("internalProperty.kt")
            public void testInternalProperty() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/internalProperty.kt");
            }

            @TestMetadata("javaStaticMethods.kt")
            public void testJavaStaticMethods() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/javaStaticMethods.kt");
            }

            @TestMetadata("kClass.kt")
            public void testKClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kClass.kt");
            }

            @TestMetadata("kt12206BasePropertyWithoutBackingField.kt")
            public void testKt12206BasePropertyWithoutBackingField() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt12206BasePropertyWithoutBackingField.kt");
            }

            @TestMetadata("kt15259.kt")
            public void testKt15259() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt15259.kt");
            }

            @TestMetadata("kt17514.kt")
            public void testKt17514() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt17514.kt");
            }

            @TestMetadata("kt22366.kt")
            public void testKt22366() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt22366.kt");
            }

            @TestMetadata("kt25220.kt")
            public void testKt25220() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt25220.kt");
            }

            @TestMetadata("kt25222.kt")
            public void testKt25222() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt25222.kt");
            }

            @TestMetadata("kt28087.kt")
            public void testKt28087() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt28087.kt");
            }

            @TestMetadata("kt29179.kt")
            public void testKt29179() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt29179.kt");
            }

            @TestMetadata("kt31709.kt")
            public void testKt31709() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt31709.kt");
            }

            @TestMetadata("kt36404.kt")
            public void testKt36404() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt36404.kt");
            }

            @TestMetadata("kt5554OnlyIntsShouldBeCoerced.kt")
            public void testKt5554OnlyIntsShouldBeCoerced() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt5554OnlyIntsShouldBeCoerced.kt");
            }

            @TestMetadata("kt7046localVarInInline.kt")
            public void testKt7046localVarInInline() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/kt7046localVarInInline.kt");
            }

            @TestMetadata("ktij21907.kt")
            public void testKtij21907() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/ktij21907.kt");
            }

            @TestMetadata("ktij21963.kt")
            public void testKtij21963() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/ktij21963.kt");
            }

            @TestMetadata("lambdaToString.kt")
            public void testLambdaToString() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdaToString.kt");
            }

            @TestMetadata("lambdaWithDestructuring.kt")
            public void testLambdaWithDestructuring() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/lambdaWithDestructuring.kt");
            }

            @TestMetadata("localClass.kt")
            public void testLocalClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/localClass.kt");
            }

            @TestMetadata("localFunctionCapturedLocalVariable.kt")
            public void testLocalFunctionCapturedLocalVariable() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/localFunctionCapturedLocalVariable.kt");
            }

            @TestMetadata("localFunctionsWithReceivers.kt")
            public void testLocalFunctionsWithReceivers() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/localFunctionsWithReceivers.kt");
            }

            @TestMetadata("localVariables.kt")
            public void testLocalVariables() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/localVariables.kt");
            }

            @TestMetadata("methodWithBreakpoint.kt")
            public void testMethodWithBreakpoint() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/methodWithBreakpoint.kt");
            }

            @TestMetadata("multilineExpressionAtBreakpoint.kt")
            public void testMultilineExpressionAtBreakpoint() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/multilineExpressionAtBreakpoint.kt");
            }

            @TestMetadata("nestedInlineArguments.kt")
            public void testNestedInlineArguments() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/nestedInlineArguments.kt");
            }

            @TestMetadata("nonAssignmentLValue.kt")
            public void testNonAssignmentLValue() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/nonAssignmentLValue.kt");
            }

            @TestMetadata("nothing.kt")
            public void testNothing() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/nothing.kt");
            }

            @TestMetadata("onClassHeader.kt")
            public void testOnClassHeader() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/onClassHeader.kt");
            }

            @TestMetadata("onGetter.kt")
            public void testOnGetter() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/onGetter.kt");
            }

            @TestMetadata("onObjectHeader.kt")
            public void testOnObjectHeader() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/onObjectHeader.kt");
            }

            @TestMetadata("package.kt")
            public void testPackage() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/package.kt");
            }

            @TestMetadata("parametersOfInlineFun.kt")
            public void testParametersOfInlineFun() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/parametersOfInlineFun.kt");
            }

            @TestMetadata("parametersOfInlineFunSeveralOnLine.kt")
            public void testParametersOfInlineFunSeveralOnLine() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/parametersOfInlineFunSeveralOnLine.kt");
            }

            @TestMetadata("privateClass.kt")
            public void testPrivateClass() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/privateClass.kt");
            }

            @TestMetadata("privateFieldInCompanion.kt")
            public void testPrivateFieldInCompanion() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/privateFieldInCompanion.kt");
            }

            @TestMetadata("privateMember.kt")
            public void testPrivateMember() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/privateMember.kt");
            }

            @TestMetadata("privatePropertyWithExplicitDefaultGetter.kt")
            public void testPrivatePropertyWithExplicitDefaultGetter() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/privatePropertyWithExplicitDefaultGetter.kt");
            }

            @TestMetadata("privatePropertyWithNonDefaultAccessor.kt")
            public void testPrivatePropertyWithNonDefaultAccessor() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/privatePropertyWithNonDefaultAccessor.kt");
            }

            @TestMetadata("privateToplevelProperty.kt")
            public void testPrivateToplevelProperty() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/privateToplevelProperty.kt");
            }

            @TestMetadata("protectedMember.kt")
            public void testProtectedMember() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/protectedMember.kt");
            }

            @TestMetadata("rawTypeskt11831.kt")
            public void testRawTypeskt11831() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/rawTypeskt11831.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/simple.kt");
            }

            @TestMetadata("statements.kt")
            public void testStatements() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/statements.kt");
            }

            @TestMetadata("staticField.kt")
            public void testStaticField() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/staticField.kt");
            }

            @TestMetadata("stdlib.kt")
            public void testStdlib() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/stdlib.kt");
            }

            @TestMetadata("superCallsCaptured.kt")
            public void testSuperCallsCaptured() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/superCallsCaptured.kt");
            }

            @TestMetadata("superCallsSimple.kt")
            public void testSuperCallsSimple() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/superCallsSimple.kt");
            }

            @TestMetadata("synchronizedBlock.kt")
            public void testSynchronizedBlock() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/synchronizedBlock.kt");
            }

            @TestMetadata("typeParameterRef.kt")
            public void testTypeParameterRef() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/typeParameterRef.kt");
            }

            @TestMetadata("typedArray.kt")
            public void testTypedArray() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/typedArray.kt");
            }

            @TestMetadata("unboxParam.kt")
            public void testUnboxParam() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/unboxParam.kt");
            }

            @TestMetadata("unsafeCall.kt")
            public void testUnsafeCall() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/unsafeCall.kt");
            }

            @TestMetadata("unusedTransitiveDependencies.kt")
            public void testUnusedTransitiveDependencies() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/unusedTransitiveDependencies.kt");
            }

            @TestMetadata("valueParameterName.kt")
            public void testValueParameterName() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/valueParameterName.kt");
            }

            @TestMetadata("variableAsFunction.kt")
            public void testVariableAsFunction() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/variableAsFunction.kt");
            }

            @TestMetadata("vars.kt")
            public void testVars() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/vars.kt");
            }

            @TestMetadata("whenEvaluation.kt")
            public void testWhenEvaluation() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/whenEvaluation.kt");
            }

            @TestMetadata(".kt.kt")
            public void test_kt() throws Exception {
                runTest("testData/evaluation/singleBreakpoint/.kt.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/evaluation/multipleBreakpoints")
    public abstract static class MultipleBreakpoints extends AbstractIrKotlinEvaluateExpressionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/multipleBreakpoints/library")
        public static class Library extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doMultipleBreakpointsTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("customLibClassName.kt")
            public void testCustomLibClassName() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/library/customLibClassName.kt");
            }

            @TestMetadata("localFunInLibrary.kt")
            public void testLocalFunInLibrary() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/library/localFunInLibrary.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/evaluation/multipleBreakpoints")
        public static class Uncategorized extends AbstractIrKotlinEvaluateExpressionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doMultipleBreakpointsTest, this, TargetBackend.JVM_IR_WITH_OLD_EVALUATOR, testDataFilePath);
            }

            @TestMetadata("clearCache.kt")
            public void testClearCache() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/clearCache.kt");
            }

            @TestMetadata("constructors.kt")
            public void testConstructors() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/constructors.kt");
            }

            @TestMetadata("exceptions.kt")
            public void testExceptions() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/exceptions.kt");
            }

            @TestMetadata("extensionMemberFunction.kt")
            public void testExtensionMemberFunction() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/extensionMemberFunction.kt");
            }

            @TestMetadata("extensionMemberFunctionInObject.kt")
            public void testExtensionMemberFunctionInObject() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/extensionMemberFunctionInObject.kt");
            }

            @TestMetadata("extensionMemberProperty.kt")
            public void testExtensionMemberProperty() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/extensionMemberProperty.kt");
            }

            @TestMetadata("externalReceiverInLambda.kt")
            public void testExternalReceiverInLambda() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/externalReceiverInLambda.kt");
            }

            @TestMetadata("fieldVariable.kt")
            public void testFieldVariable() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/fieldVariable.kt");
            }

            @TestMetadata("funFromOuterClassInLamdba.kt")
            public void testFunFromOuterClassInLamdba() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/funFromOuterClassInLamdba.kt");
            }

            @TestMetadata("initializer.kt")
            public void testInitializer() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/initializer.kt");
            }

            @TestMetadata("inlineStackTrace.kt")
            public void testInlineStackTrace() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/inlineStackTrace.kt");
            }

            @TestMetadata("inlineStackTraceWithApply.kt")
            public void testInlineStackTraceWithApply() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/inlineStackTraceWithApply.kt");
            }

            @TestMetadata("inlineStackTraceWithNestedLambdas.kt")
            public void testInlineStackTraceWithNestedLambdas() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/inlineStackTraceWithNestedLambdas.kt");
            }

            @TestMetadata("invisibleDeclarations.kt")
            public void testInvisibleDeclarations() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/invisibleDeclarations.kt");
            }

            @TestMetadata("isInsideInlineLambda.kt")
            public void testIsInsideInlineLambda() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/isInsideInlineLambda.kt");
            }

            @TestMetadata("kt51755.kt")
            public void testKt51755() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/kt51755.kt");
            }

            @TestMetadata("lambdaParameters.kt")
            public void testLambdaParameters() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/lambdaParameters.kt");
            }

            @TestMetadata("localFun.kt")
            public void testLocalFun() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/localFun.kt");
            }

            @TestMetadata("multipleBreakpointsAtLine.kt")
            public void testMultipleBreakpointsAtLine() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/multipleBreakpointsAtLine.kt");
            }

            @TestMetadata("mutations.kt")
            public void testMutations() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/mutations.kt");
            }

            @TestMetadata("nestedCoroutineContexts.kt")
            public void testNestedCoroutineContexts() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/nestedCoroutineContexts.kt");
            }

            @TestMetadata("noReceiverOnStack.kt")
            public void testNoReceiverOnStack() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/noReceiverOnStack.kt");
            }

            @TestMetadata("nonCapturedVariables.kt")
            public void testNonCapturedVariables() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/nonCapturedVariables.kt");
            }

            @TestMetadata("optimisedVariableEvaluation.kt")
            public void testOptimisedVariableEvaluation() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/optimisedVariableEvaluation.kt");
            }

            @TestMetadata("privateMembersPriority.kt")
            public void testPrivateMembersPriority() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/privateMembersPriority.kt");
            }

            @TestMetadata("remappedParameterInInline.kt")
            public void testRemappedParameterInInline() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/remappedParameterInInline.kt");
            }

            @TestMetadata("smartcasts.kt")
            public void testSmartcasts() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/smartcasts.kt");
            }

            @TestMetadata("thisLabels.kt")
            public void testThisLabels() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/thisLabels.kt");
            }

            @TestMetadata("whenEntry.kt")
            public void testWhenEntry() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/whenEntry.kt");
            }

            @TestMetadata("withoutBodyFunctions.kt")
            public void testWithoutBodyFunctions() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/withoutBodyFunctions.kt");
            }

            @TestMetadata("withoutBodyProperties.kt")
            public void testWithoutBodyProperties() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/withoutBodyProperties.kt");
            }

            @TestMetadata("withoutBodyProperties2.kt")
            public void testWithoutBodyProperties2() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/withoutBodyProperties2.kt");
            }

            @TestMetadata("withoutBodyTypeParameters.kt")
            public void testWithoutBodyTypeParameters() throws Exception {
                runTest("testData/evaluation/multipleBreakpoints/withoutBodyTypeParameters.kt");
            }
        }
    }
}
