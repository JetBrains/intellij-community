// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.debugger.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("jvm-debugger/test")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/asyncStackTrace/coroutines")
public abstract class CoroutineAsyncStackTraceTestGenerated extends AbstractCoroutineAsyncStackTraceTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/asyncStackTrace/coroutines/todo")
    public abstract static class Todo extends AbstractCoroutineAsyncStackTraceTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/asyncStackTrace/coroutines/todo/skipped_suspend_frame")
        public static class Skipped_suspend_frame extends AbstractCoroutineAsyncStackTraceTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K1;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("suspendFramesBeforeLaunch.kt")
            public void testSuspendFramesBeforeLaunch() throws Exception {
                runTest("testData/asyncStackTrace/coroutines/todo/skipped_suspend_frame/suspendFramesBeforeLaunch.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/asyncStackTrace/coroutines")
    public static class Uncategorized extends AbstractCoroutineAsyncStackTraceTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K1;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("channel.kt")
        public void testChannel() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/channel.kt");
        }

        @TestMetadata("framesAboveCoroutineOwner.kt")
        public void testFramesAboveCoroutineOwner() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/framesAboveCoroutineOwner.kt");
        }

        @TestMetadata("nestedLaunches.kt")
        public void testNestedLaunches() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/nestedLaunches.kt");
        }

        @TestMetadata("nestedScopes1.kt")
        public void testNestedScopes1() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/nestedScopes1.kt");
        }

        @TestMetadata("nestedScopesWithSyncFrame.kt")
        public void testNestedScopesWithSyncFrame() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/nestedScopesWithSyncFrame.kt");
        }

        @TestMetadata("nestedWithContexts1.kt")
        public void testNestedWithContexts1() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/nestedWithContexts1.kt");
        }

        @TestMetadata("nestedWithContexts2.kt")
        public void testNestedWithContexts2() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/nestedWithContexts2.kt");
        }

        @TestMetadata("suspendFramesBeforeWithContext.kt")
        public void testSuspendFramesBeforeWithContext() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/suspendFramesBeforeWithContext.kt");
        }

        @TestMetadata("twoWithContextBlocks.kt")
        public void testTwoWithContextBlocks() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/twoWithContextBlocks.kt");
        }

        @TestMetadata("withContextDispatched1.kt")
        public void testWithContextDispatched1() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/withContextDispatched1.kt");
        }

        @TestMetadata("withContextDispatched2.kt")
        public void testWithContextDispatched2() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/withContextDispatched2.kt");
        }

        @TestMetadata("withContextUndispatched1.kt")
        public void testWithContextUndispatched1() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/withContextUndispatched1.kt");
        }

        @TestMetadata("withTimeout.kt")
        public void testWithTimeout() throws Exception {
            runTest("testData/asyncStackTrace/coroutines/withTimeout.kt");
        }
    }
}
