// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.debugger.test.cases;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("jvm-debugger/test/k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../testData/asyncStackTrace/flows")
public class K2FlowAsyncStackTraceTestGenerated extends AbstractK2FlowAsyncStackTraceTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K2;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("sharedFlowComplex.kt")
    public void testSharedFlowComplex() throws Exception {
        runTest("../testData/asyncStackTrace/flows/sharedFlowComplex.kt");
    }

    @TestMetadata("sharedFlowDebounce.kt")
    public void testSharedFlowDebounce() throws Exception {
        runTest("../testData/asyncStackTrace/flows/sharedFlowDebounce.kt");
    }

    @TestMetadata("sharedFlowMerge.kt")
    public void testSharedFlowMerge() throws Exception {
        runTest("../testData/asyncStackTrace/flows/sharedFlowMerge.kt");
    }

    @TestMetadata("sharedFlowMultipleFlowsSameValues.kt")
    public void testSharedFlowMultipleFlowsSameValues() throws Exception {
        runTest("../testData/asyncStackTrace/flows/sharedFlowMultipleFlowsSameValues.kt");
    }

    @TestMetadata("sharedFlowNulls.kt")
    public void testSharedFlowNulls() throws Exception {
        runTest("../testData/asyncStackTrace/flows/sharedFlowNulls.kt");
    }

    @TestMetadata("sharedFlowSimple.kt")
    public void testSharedFlowSimple() throws Exception {
        runTest("../testData/asyncStackTrace/flows/sharedFlowSimple.kt");
    }

    @TestMetadata("stateFlowComplex.kt")
    public void testStateFlowComplex() throws Exception {
        runTest("../testData/asyncStackTrace/flows/stateFlowComplex.kt");
    }

    @TestMetadata("stateFlowDebounce.kt")
    public void testStateFlowDebounce() throws Exception {
        runTest("../testData/asyncStackTrace/flows/stateFlowDebounce.kt");
    }

    @TestMetadata("stateFlowMerge.kt")
    public void testStateFlowMerge() throws Exception {
        runTest("../testData/asyncStackTrace/flows/stateFlowMerge.kt");
    }

    @TestMetadata("stateFlowMultipleFlowsSameValues.kt")
    public void testStateFlowMultipleFlowsSameValues() throws Exception {
        runTest("../testData/asyncStackTrace/flows/stateFlowMultipleFlowsSameValues.kt");
    }

    @TestMetadata("stateFlowNulls.kt")
    public void testStateFlowNulls() throws Exception {
        runTest("../testData/asyncStackTrace/flows/stateFlowNulls.kt");
    }

    @TestMetadata("stateFlowSimple.kt")
    public void testStateFlowSimple() throws Exception {
        runTest("../testData/asyncStackTrace/flows/stateFlowSimple.kt");
    }
}
