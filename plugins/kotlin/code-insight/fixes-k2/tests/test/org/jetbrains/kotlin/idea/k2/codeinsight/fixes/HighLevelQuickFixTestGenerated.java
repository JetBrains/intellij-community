// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.codeinsight.fixes;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/fixes-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class HighLevelQuickFixTestGenerated extends AbstractHighLevelQuickFixTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/abstract")
    public static class Abstract extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractFunctionInNonAbstractClass.kt")
        public void testAbstractFunctionInNonAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionInNonAbstractClass.kt");
        }

        @TestMetadata("abstractFunctionWithBody.kt")
        public void testAbstractFunctionWithBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBody.kt");
        }

        @TestMetadata("abstractFunctionWithBody2.kt")
        public void testAbstractFunctionWithBody2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBody2.kt");
        }

        @TestMetadata("abstractFunctionWithBody3.kt")
        public void testAbstractFunctionWithBody3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBody3.kt");
        }

        @TestMetadata("abstractFunctionWithBodyWithComments.kt")
        public void testAbstractFunctionWithBodyWithComments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBodyWithComments.kt");
        }

        @TestMetadata("abstractFunctionWithBodyWithComments2.kt")
        public void testAbstractFunctionWithBodyWithComments2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBodyWithComments2.kt");
        }

        @TestMetadata("abstractPropertyInCompanionObject.kt")
        public void testAbstractPropertyInCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInCompanionObject.kt");
        }

        @TestMetadata("abstractPropertyInNonAbstractClass1.kt")
        public void testAbstractPropertyInNonAbstractClass1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInNonAbstractClass1.kt");
        }

        @TestMetadata("abstractPropertyInNonAbstractClass2.kt")
        public void testAbstractPropertyInNonAbstractClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInNonAbstractClass2.kt");
        }

        @TestMetadata("abstractPropertyInNonAbstractClass3.kt")
        public void testAbstractPropertyInNonAbstractClass3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInNonAbstractClass3.kt");
        }

        @TestMetadata("abstractPropertyInPrimaryConstructorParameters.kt")
        public void testAbstractPropertyInPrimaryConstructorParameters() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInPrimaryConstructorParameters.kt");
        }

        @TestMetadata("abstractPropertyNotInClass.kt")
        public void testAbstractPropertyNotInClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyNotInClass.kt");
        }

        @TestMetadata("abstractPropertyWIthInitializer2.kt")
        public void testAbstractPropertyWIthInitializer2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWIthInitializer2.kt");
        }

        @TestMetadata("abstractPropertyWIthInitializer3.kt")
        public void testAbstractPropertyWIthInitializer3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWIthInitializer3.kt");
        }

        @TestMetadata("abstractPropertyWithGetter1.kt")
        public void testAbstractPropertyWithGetter1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWithGetter1.kt");
        }

        @TestMetadata("abstractPropertyWithGetter2.kt")
        public void testAbstractPropertyWithGetter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWithGetter2.kt");
        }

        @TestMetadata("abstractPropertyWithInitializer1.kt")
        public void testAbstractPropertyWithInitializer1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWithInitializer1.kt");
        }

        @TestMetadata("abstractPropertyWithSetter.kt")
        public void testAbstractPropertyWithSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWithSetter.kt");
        }

        @TestMetadata("makeEnumEntryAbstract.kt")
        public void testMakeEnumEntryAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/makeEnumEntryAbstract.kt");
        }

        @TestMetadata("makeInlineClassAbstract.kt")
        public void testMakeInlineClassAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/makeInlineClassAbstract.kt");
        }

        @TestMetadata("makeObjectMemberAbstract.kt")
        public void testMakeObjectMemberAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/makeObjectMemberAbstract.kt");
        }

        @TestMetadata("makeTopLevelAbstract.kt")
        public void testMakeTopLevelAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/makeTopLevelAbstract.kt");
        }

        @TestMetadata("manyImpl.kt")
        public void testManyImpl() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/manyImpl.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstract.kt")
        public void testMustBeInitializedOrBeAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstractInFinalClass.kt")
        public void testMustBeInitializedOrBeAbstractInFinalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstractInFinalClass.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstractInOpenClass.kt")
        public void testMustBeInitializedOrBeAbstractInOpenClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstractInOpenClass.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstractInSealedClass.kt")
        public void testMustBeInitializedOrBeAbstractInSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstractInSealedClass.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstract.kt")
        public void testMustBeInitializedOrFinalOrAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrFinalOrAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstractWarning.kt")
        public void testMustBeInitializedOrFinalOrAbstractWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrFinalOrAbstractWarning.kt");
        }

        @TestMetadata("nonAbstractFunctionWithNoBody.kt")
        public void testNonAbstractFunctionWithNoBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/nonAbstractFunctionWithNoBody.kt");
        }

        @TestMetadata("nonMemberAbstractFunction.kt")
        public void testNonMemberAbstractFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/nonMemberAbstractFunction.kt");
        }

        @TestMetadata("nonMemberFunctionNoBody.kt")
        public void testNonMemberFunctionNoBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/nonMemberFunctionNoBody.kt");
        }

        @TestMetadata("notImplementedMember.kt")
        public void testNotImplementedMember() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/notImplementedMember.kt");
        }

        @TestMetadata("notImplementedMemberFromAbstractClass.kt")
        public void testNotImplementedMemberFromAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/notImplementedMemberFromAbstractClass.kt");
        }

        @TestMetadata("replaceOpen.kt")
        public void testReplaceOpen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/replaceOpen.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addExclExclCall")
    public abstract static class AddExclExclCall extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch")
        public static class TypeMismatch extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("argumentAfterNullCheck.kt")
            public void testArgumentAfterNullCheck() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/argumentAfterNullCheck.kt");
            }

            @TestMetadata("assignmentRValue.kt")
            public void testAssignmentRValue() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/assignmentRValue.kt");
            }

            @TestMetadata("initializer.kt")
            public void testInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/initializer.kt");
            }

            @TestMetadata("memberAccessInExtension.kt")
            public void testMemberAccessInExtension() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/memberAccessInExtension.kt");
            }

            @TestMetadata("memberAccessInExtensionAsAssignmentRValue.kt")
            public void testMemberAccessInExtensionAsAssignmentRValue() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/memberAccessInExtensionAsAssignmentRValue.kt");
            }

            @TestMetadata("memberAccessInExtensionAsInitializer.kt")
            public void testMemberAccessInExtensionAsInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/memberAccessInExtensionAsInitializer.kt");
            }

            @TestMetadata("nullArgument.kt")
            public void testNullArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/nullArgument.kt");
            }

            @TestMetadata("qualifiedArgument.kt")
            public void testQualifiedArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/qualifiedArgument.kt");
            }

            @TestMetadata("removeNullability.kt")
            public void testRemoveNullability() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullability.kt");
            }

            @TestMetadata("removeNullabilityDisabledWhenItCannotHelp.kt")
            public void testRemoveNullabilityDisabledWhenItCannotHelp() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullabilityDisabledWhenItCannotHelp.kt");
            }

            @TestMetadata("removeNullabilityForGeneric.kt")
            public void testRemoveNullabilityForGeneric() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullabilityForGeneric.kt");
            }

            @TestMetadata("removeNullabilityForSubclass.kt")
            public void testRemoveNullabilityForSubclass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullabilityForSubclass.kt");
            }

            @TestMetadata("smartcastImpossibleForArgument.kt")
            public void testSmartcastImpossibleForArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/smartcastImpossibleForArgument.kt");
            }

            @TestMetadata("smartcastImpossibleForReceiver.kt")
            public void testSmartcastImpossibleForReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/smartcastImpossibleForReceiver.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addExclExclCall")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/array.kt");
            }

            @TestMetadata("array2.kt")
            public void testArray2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/array2.kt");
            }

            @TestMetadata("array3.kt")
            public void testArray3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/array3.kt");
            }

            @TestMetadata("array4.kt")
            public void testArray4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/array4.kt");
            }

            @TestMetadata("assignment.kt")
            public void testAssignment() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/assignment.kt");
            }

            @TestMetadata("assignmentToUnsafeCallExpression.kt")
            public void testAssignmentToUnsafeCallExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/assignmentToUnsafeCallExpression.kt");
            }

            @TestMetadata("functionReference.kt")
            public void testFunctionReference() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/functionReference.kt");
            }

            @TestMetadata("functionReference2.kt")
            public void testFunctionReference2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/functionReference2.kt");
            }

            @TestMetadata("functionReference3.kt")
            public void testFunctionReference3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/functionReference3.kt");
            }

            @TestMetadata("implicit.kt")
            public void testImplicit() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/implicit.kt");
            }

            @TestMetadata("implicit2.kt")
            public void testImplicit2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/implicit2.kt");
            }

            @TestMetadata("implicit3.kt")
            public void testImplicit3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/implicit3.kt");
            }

            @TestMetadata("implicitFunctionCall.kt")
            public void testImplicitFunctionCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/implicitFunctionCall.kt");
            }

            @TestMetadata("infixCall.kt")
            public void testInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/infixCall.kt");
            }

            @TestMetadata("iterable.kt")
            public void testIterable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterable.kt");
            }

            @TestMetadata("iterableDoesNotInheritIterableInterface.kt")
            public void testIterableDoesNotInheritIterableInterface() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterableDoesNotInheritIterableInterface.kt");
            }

            @TestMetadata("iterableGeneric.kt")
            public void testIterableGeneric() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterableGeneric.kt");
            }

            @TestMetadata("iterableInExtension.kt")
            public void testIterableInExtension() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterableInExtension.kt");
            }

            @TestMetadata("iterableWithBadIterator.kt")
            public void testIterableWithBadIterator() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterableWithBadIterator.kt");
            }

            @TestMetadata("normal.kt")
            public void testNormal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/normal.kt");
            }

            @TestMetadata("normal2.kt")
            public void testNormal2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/normal2.kt");
            }

            @TestMetadata("null.kt")
            public void testNull() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/null.kt");
            }

            @TestMetadata("nullInitializer.kt")
            public void testNullInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/nullInitializer.kt");
            }

            @TestMetadata("nullInitializerWithUnstableSmartcast.kt")
            public void testNullInitializerWithUnstableSmartcast() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/nullInitializerWithUnstableSmartcast.kt");
            }

            @TestMetadata("nullReceiver.kt")
            public void testNullReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/nullReceiver.kt");
            }

            @TestMetadata("nullReceiverWithUnstableSmartcast.kt")
            public void testNullReceiverWithUnstableSmartcast() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/nullReceiverWithUnstableSmartcast.kt");
            }

            @TestMetadata("operationBinary.kt")
            public void testOperationBinary() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationBinary.kt");
            }

            @TestMetadata("operationDecrement.kt")
            public void testOperationDecrement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationDecrement.kt");
            }

            @TestMetadata("operationDivAssign.kt")
            public void testOperationDivAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationDivAssign.kt");
            }

            @TestMetadata("operationIn.kt")
            public void testOperationIn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationIn.kt");
            }

            @TestMetadata("operationIncrement.kt")
            public void testOperationIncrement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationIncrement.kt");
            }

            @TestMetadata("operationMinusAssign.kt")
            public void testOperationMinusAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationMinusAssign.kt");
            }

            @TestMetadata("operationPlusAssign.kt")
            public void testOperationPlusAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationPlusAssign.kt");
            }

            @TestMetadata("operationPlusAssignOnMutableMap.kt")
            public void testOperationPlusAssignOnMutableMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationPlusAssignOnMutableMap.kt");
            }

            @TestMetadata("operationRemAssign.kt")
            public void testOperationRemAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationRemAssign.kt");
            }

            @TestMetadata("operationTimesAssign.kt")
            public void testOperationTimesAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationTimesAssign.kt");
            }

            @TestMetadata("operationUnary.kt")
            public void testOperationUnary() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationUnary.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addInitializer")
    public static class AddInitializer extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("localVar.kt")
        public void testLocalVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/localVar.kt");
        }

        @TestMetadata("memberExtensionProperty.kt")
        public void testMemberExtensionProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberExtensionProperty.kt");
        }

        @TestMetadata("memberExtensionPropertyVarGetterOnly.kt")
        public void testMemberExtensionPropertyVarGetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberExtensionPropertyVarGetterOnly.kt");
        }

        @TestMetadata("memberExtensionPropertyVarSetterOnly.kt")
        public void testMemberExtensionPropertyVarSetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberExtensionPropertyVarSetterOnly.kt");
        }

        @TestMetadata("memberProperty.kt")
        public void testMemberProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberProperty.kt");
        }

        @TestMetadata("memberPropertyVarGetterOnly.kt")
        public void testMemberPropertyVarGetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberPropertyVarGetterOnly.kt");
        }

        @TestMetadata("memberPropertyVarSetterOnly.kt")
        public void testMemberPropertyVarSetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberPropertyVarSetterOnly.kt");
        }

        @TestMetadata("memberPropertyWithAccessor.kt")
        public void testMemberPropertyWithAccessor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberPropertyWithAccessor.kt");
        }

        @TestMetadata("memberPropertyWithDelegateRuntime.kt")
        public void testMemberPropertyWithDelegateRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberPropertyWithDelegateRuntime.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstract.kt")
        public void testMustBeInitializedOrBeAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrBeAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrBeFinal.kt")
        public void testMustBeInitializedOrBeFinal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrBeFinal.kt");
        }

        @TestMetadata("mustBeInitializedOrBeFinalWarning.kt")
        public void testMustBeInitializedOrBeFinalWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrBeFinalWarning.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstract.kt")
        public void testMustBeInitializedOrFinalOrAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrFinalOrAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstractWarning.kt")
        public void testMustBeInitializedOrFinalOrAbstractWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrFinalOrAbstractWarning.kt");
        }

        @TestMetadata("mustBeInitializedWarning.kt")
        public void testMustBeInitializedWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedWarning.kt");
        }

        @TestMetadata("topLevelExtensionProperty.kt")
        public void testTopLevelExtensionProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelExtensionProperty.kt");
        }

        @TestMetadata("topLevelExtensionPropertySetterOnly.kt")
        public void testTopLevelExtensionPropertySetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelExtensionPropertySetterOnly.kt");
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelProperty.kt");
        }

        @TestMetadata("topLevelPropertyVarClass.kt")
        public void testTopLevelPropertyVarClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyVarClass.kt");
        }

        @TestMetadata("topLevelPropertyVarGetterOnly.kt")
        public void testTopLevelPropertyVarGetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyVarGetterOnly.kt");
        }

        @TestMetadata("topLevelPropertyVarSetterOnly.kt")
        public void testTopLevelPropertyVarSetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyVarSetterOnly.kt");
        }

        @TestMetadata("topLevelPropertyWithDelegateRuntime.kt")
        public void testTopLevelPropertyWithDelegateRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyWithDelegateRuntime.kt");
        }

        @TestMetadata("topLevelPropertyWithGetter.kt")
        public void testTopLevelPropertyWithGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyWithGetter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addPropertyAccessors")
    public static class AddPropertyAccessors extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addPropertyAccessors/val.kt");
        }

        @TestMetadata("var.kt")
        public void testVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addPropertyAccessors/var.kt");
        }

        @TestMetadata("varHasGetter.kt")
        public void testVarHasGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addPropertyAccessors/varHasGetter.kt");
        }

        @TestMetadata("varHasSetter.kt")
        public void testVarHasSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addPropertyAccessors/varHasSetter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addValVar")
    public abstract static class AddValVar extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addValVar/inline")
        public static class Inline extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/inline/basic.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/inline/var.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addValVar")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addVal.kt")
            public void testAddVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/addVal.kt");
            }

            @TestMetadata("addValAfterVarArg.kt")
            public void testAddValAfterVarArg() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/addValAfterVarArg.kt");
            }

            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/annotation.kt");
            }

            @TestMetadata("expectAnnotation.kt")
            public void testExpectAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/expectAnnotation.kt");
            }

            @TestMetadata("library.kt")
            public void testLibrary() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/library.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addValVar/value")
        public static class Value extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/value/basic.kt");
            }

            @TestMetadata("genericParameter.kt")
            public void testGenericParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/value/genericParameter.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/value/var.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/autoImports")
    public abstract static class AutoImports extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses")
        public static class CallablesDeclaredInClasses extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstractExtensionSingleImport.kt")
            public void testAbstractExtensionSingleImport() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/abstractExtensionSingleImport.kt");
            }

            @TestMetadata("companionObjectDeepInheritance.kt")
            public void testCompanionObjectDeepInheritance() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectDeepInheritance.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionInClassImportFromChildObject.kt")
            public void testCompanionObjectExtensionFunctionInClassImportFromChildObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionInClassImportFromChildObject.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionInClassImportFromChildObjectNoClassName.kt")
            public void testCompanionObjectExtensionFunctionInClassImportFromChildObjectNoClassName() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionInClassImportFromChildObjectNoClassName.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionInUnrelatedClass.kt")
            public void testCompanionObjectExtensionFunctionInUnrelatedClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionInUnrelatedClass.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionInUnrelatedClassNamedCompanion.kt")
            public void testCompanionObjectExtensionFunctionInUnrelatedClassNamedCompanion() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionInUnrelatedClassNamedCompanion.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionTwoCandidatesA.kt")
            public void testCompanionObjectExtensionFunctionTwoCandidatesA() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionTwoCandidatesA.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionTwoCandidatesB.kt")
            public void testCompanionObjectExtensionFunctionTwoCandidatesB() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionTwoCandidatesB.kt");
            }

            @TestMetadata("genericClassSpecificTypeChild.kt")
            public void testGenericClassSpecificTypeChild() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericClassSpecificTypeChild.kt");
            }

            @TestMetadata("genericExtensionFunction.kt")
            public void testGenericExtensionFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunction.kt");
            }

            @TestMetadata("genericExtensionFunctionSubtype.kt")
            public void testGenericExtensionFunctionSubtype() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunctionSubtype.kt");
            }

            @TestMetadata("genericExtensionFunctionTypeConstraint.kt")
            public void testGenericExtensionFunctionTypeConstraint() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunctionTypeConstraint.kt");
            }

            @TestMetadata("genericExtensionFunctionTypeConstraintVariable.kt")
            public void testGenericExtensionFunctionTypeConstraintVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunctionTypeConstraintVariable.kt");
            }

            @TestMetadata("genericExtensionFunctionVariable.kt")
            public void testGenericExtensionFunctionVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunctionVariable.kt");
            }

            @TestMetadata("genericTypeExtension1.kt")
            public void testGenericTypeExtension1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericTypeExtension1.kt");
            }

            @TestMetadata("genericTypeExtension2.kt")
            public void testGenericTypeExtension2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericTypeExtension2.kt");
            }

            @TestMetadata("intTypeExtensionFunction.kt")
            public void testIntTypeExtensionFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunction.kt");
            }

            @TestMetadata("intTypeExtensionFunctionCallChainVariable.kt")
            public void testIntTypeExtensionFunctionCallChainVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunctionCallChainVariable.kt");
            }

            @TestMetadata("intTypeExtensionFunctionUnnecessaryCallChainLiteral.kt")
            public void testIntTypeExtensionFunctionUnnecessaryCallChainLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunctionUnnecessaryCallChainLiteral.kt");
            }

            @TestMetadata("intTypeExtensionFunctionUnnecessaryCallChainVariable.kt")
            public void testIntTypeExtensionFunctionUnnecessaryCallChainVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunctionUnnecessaryCallChainVariable.kt");
            }

            @TestMetadata("intTypeExtensionFunctionVariable.kt")
            public void testIntTypeExtensionFunctionVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunctionVariable.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidate1.kt")
            public void testMultipleReceiversSingleCandidate1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/multipleReceiversSingleCandidate1.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidate2.kt")
            public void testMultipleReceiversSingleCandidate2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/multipleReceiversSingleCandidate2.kt");
            }

            @TestMetadata("noImportCompanionExtensionFunctionAsClassFunction.kt")
            public void testNoImportCompanionExtensionFunctionAsClassFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportCompanionExtensionFunctionAsClassFunction.kt");
            }

            @TestMetadata("noImportGenericClassSpecificTypeChild.kt")
            public void testNoImportGenericClassSpecificTypeChild() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportGenericClassSpecificTypeChild.kt");
            }

            @TestMetadata("noImportGenericExtensionFunctionTypeConstraintWrongReceiver.kt")
            public void testNoImportGenericExtensionFunctionTypeConstraintWrongReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportGenericExtensionFunctionTypeConstraintWrongReceiver.kt");
            }

            @TestMetadata("noImportGenericExtensionFunctionTypeConstraintWrongReceiver2.kt")
            public void testNoImportGenericExtensionFunctionTypeConstraintWrongReceiver2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportGenericExtensionFunctionTypeConstraintWrongReceiver2.kt");
            }

            @TestMetadata("noImportIntTypeExtensionFunctionVariableWrongReceiver.kt")
            public void testNoImportIntTypeExtensionFunctionVariableWrongReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIntTypeExtensionFunctionVariableWrongReceiver.kt");
            }

            @TestMetadata("noImportIntTypeExtensionFunctionWrongReceiver.kt")
            public void testNoImportIntTypeExtensionFunctionWrongReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIntTypeExtensionFunctionWrongReceiver.kt");
            }

            @TestMetadata("noImportIrrelevantFunctions1.kt")
            public void testNoImportIrrelevantFunctions1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIrrelevantFunctions1.kt");
            }

            @TestMetadata("noImportIrrelevantFunctions2.kt")
            public void testNoImportIrrelevantFunctions2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIrrelevantFunctions2.kt");
            }

            @TestMetadata("noImportIrrelevantFunctions3.kt")
            public void testNoImportIrrelevantFunctions3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIrrelevantFunctions3.kt");
            }

            @TestMetadata("noImportIrrelevantFunctions4.kt")
            public void testNoImportIrrelevantFunctions4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIrrelevantFunctions4.kt");
            }

            @TestMetadata("noImportThisExtensionReceiverWrongType.kt")
            public void testNoImportThisExtensionReceiverWrongType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportThisExtensionReceiverWrongType.kt");
            }

            @TestMetadata("objectExtensionFunctionInClass.kt")
            public void testObjectExtensionFunctionInClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/objectExtensionFunctionInClass.kt");
            }

            @TestMetadata("regularFunction.kt")
            public void testRegularFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/regularFunction.kt");
            }

            @TestMetadata("regularProperty.kt")
            public void testRegularProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/regularProperty.kt");
            }

            @TestMetadata("thisExtensionReceiver.kt")
            public void testThisExtensionReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/thisExtensionReceiver.kt");
            }

            @TestMetadata("twoSupertypes1.kt")
            public void testTwoSupertypes1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/twoSupertypes1.kt");
            }

            @TestMetadata("twoSupertypes2.kt")
            public void testTwoSupertypes2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/twoSupertypes2.kt");
            }

            @TestMetadata("typealiasExtension1.kt")
            public void testTypealiasExtension1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/typealiasExtension1.kt");
            }

            @TestMetadata("typealiasExtension2.kt")
            public void testTypealiasExtension2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/typealiasExtension2.kt");
            }

            @TestMetadata("typealiasExtension3.kt")
            public void testTypealiasExtension3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/typealiasExtension3.kt");
            }

            @TestMetadata("typealiasExtension4.kt")
            public void testTypealiasExtension4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/typealiasExtension4.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/autoImports/kt21515")
        public static class Kt21515 extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("callableReferenceFromDeprecated.kt")
            public void testCallableReferenceFromDeprecated() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/kt21515/callableReferenceFromDeprecated.kt");
            }

            @TestMetadata("classifierFromCompanionObjectDeprecationEnabled.kt")
            public void testClassifierFromCompanionObjectDeprecationEnabled() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/kt21515/classifierFromCompanionObjectDeprecationEnabled.kt");
            }

            @TestMetadata("constructorFromDeprecated.kt")
            public void testConstructorFromDeprecated() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/kt21515/constructorFromDeprecated.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/autoImports")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/annotation.kt");
            }

            @TestMetadata("annotationWithAnotherUnresolvedAnnotation.kt")
            public void testAnnotationWithAnotherUnresolvedAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/annotationWithAnotherUnresolvedAnnotation.kt");
            }

            @TestMetadata("builtInFunction.kt")
            public void testBuiltInFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/builtInFunction.kt");
            }

            @TestMetadata("builtInFunctionAlreadyExists.kt")
            public void testBuiltInFunctionAlreadyExists() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/builtInFunctionAlreadyExists.kt");
            }

            @TestMetadata("checkNoStackOverflowInImportInnerClassInCurrentFile.kt")
            public void testCheckNoStackOverflowInImportInnerClassInCurrentFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/checkNoStackOverflowInImportInnerClassInCurrentFile.kt");
            }

            @TestMetadata("companionObjectMemberExtensionFunctionImportWhenExplicitReceiverPresent.kt")
            public void testCompanionObjectMemberExtensionFunctionImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/companionObjectMemberExtensionFunctionImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("companionObjectMemberExtensionPropertyImportWhenExplicitReceiverPresent.kt")
            public void testCompanionObjectMemberExtensionPropertyImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/companionObjectMemberExtensionPropertyImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("conflictWithClassIdentifier.kt")
            public void testConflictWithClassIdentifier() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/conflictWithClassIdentifier.kt");
            }

            @TestMetadata("conflictWithLocalIdentifier.kt")
            public void testConflictWithLocalIdentifier() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/conflictWithLocalIdentifier.kt");
            }

            @TestMetadata("conflictWithTopLevelIdentifier.kt")
            public void testConflictWithTopLevelIdentifier() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/conflictWithTopLevelIdentifier.kt");
            }

            @TestMetadata("enumEntries.kt")
            public void testEnumEntries() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/enumEntries.kt");
            }

            @TestMetadata("enumEntriesJsRuntime.kt")
            public void testEnumEntriesJsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/enumEntriesJsRuntime.kt");
            }

            @TestMetadata("excludedCoroutineImpl.kt")
            public void testExcludedCoroutineImpl() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/excludedCoroutineImpl.kt");
            }

            @TestMetadata("excludedCoroutineIntrinsics.kt")
            public void testExcludedCoroutineIntrinsics() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/excludedCoroutineIntrinsics.kt");
            }

            @TestMetadata("excludedFromImport.kt")
            public void testExcludedFromImport() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/excludedFromImport.kt");
            }

            @TestMetadata("importAliasLetAlreadyExists.kt")
            public void testImportAliasLetAlreadyExists() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importAliasLetAlreadyExists.kt");
            }

            @TestMetadata("importEnumValueMissingReceiver.kt")
            public void testImportEnumValueMissingReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importEnumValueMissingReceiver.kt");
            }

            @TestMetadata("importFunctionMissingReceiver.kt")
            public void testImportFunctionMissingReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importFunctionMissingReceiver.kt");
            }

            @TestMetadata("importFunctionMissingReceiverWithTypeAlias.kt")
            public void testImportFunctionMissingReceiverWithTypeAlias() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importFunctionMissingReceiverWithTypeAlias.kt");
            }

            @TestMetadata("importFunctionWithMultipleReceivers.kt")
            public void testImportFunctionWithMultipleReceivers() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importFunctionWithMultipleReceivers.kt");
            }

            @TestMetadata("importKClass.kt")
            public void testImportKClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importKClass.kt");
            }

            @TestMetadata("importKProperty.kt")
            public void testImportKProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importKProperty.kt");
            }

            @TestMetadata("importKType.kt")
            public void testImportKType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importKType.kt");
            }

            @TestMetadata("importTypeOf.kt")
            public void testImportTypeOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importTypeOf.kt");
            }

            @TestMetadata("inPrimaryConstructor.kt")
            public void testInPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/inPrimaryConstructor.kt");
            }

            @TestMetadata("infixCallAndObject.kt")
            public void testInfixCallAndObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/infixCallAndObject.kt");
            }

            @TestMetadata("kt17525.kt")
            public void testKt17525() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/kt17525.kt");
            }

            @TestMetadata("libraryPropertyJsRuntime.kt")
            public void testLibraryPropertyJsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/libraryPropertyJsRuntime.kt");
            }

            @TestMetadata("libraryPropertyRuntime.kt")
            public void testLibraryPropertyRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/libraryPropertyRuntime.kt");
            }

            @TestMetadata("libraryTopLevelFunctionImportJsRuntime.kt")
            public void testLibraryTopLevelFunctionImportJsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/libraryTopLevelFunctionImportJsRuntime.kt");
            }

            @TestMetadata("libraryTopLevelFunctionImportRuntime.kt")
            public void testLibraryTopLevelFunctionImportRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/libraryTopLevelFunctionImportRuntime.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidateExtensionInObject1.kt")
            public void testMultipleReceiversSingleCandidateExtensionInObject1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/multipleReceiversSingleCandidateExtensionInObject1.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidateExtensionInObject2.kt")
            public void testMultipleReceiversSingleCandidateExtensionInObject2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/multipleReceiversSingleCandidateExtensionInObject2.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidateExtensionInObject3.kt")
            public void testMultipleReceiversSingleCandidateExtensionInObject3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/multipleReceiversSingleCandidateExtensionInObject3.kt");
            }

            @TestMetadata("namelessClass.kt")
            public void testNamelessClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessClass.kt");
            }

            @TestMetadata("namelessFunction.kt")
            public void testNamelessFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessFunction.kt");
            }

            @TestMetadata("namelessObject.kt")
            public void testNamelessObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessObject.kt");
            }

            @TestMetadata("namelessParameter.kt")
            public void testNamelessParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessParameter.kt");
            }

            @TestMetadata("namelessProperty.kt")
            public void testNamelessProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessProperty.kt");
            }

            @TestMetadata("noImportForAlreadyImported.kt")
            public void testNoImportForAlreadyImported() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/noImportForAlreadyImported.kt");
            }

            @TestMetadata("noImportForIndex.kt")
            public void testNoImportForIndex() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/noImportForIndex.kt");
            }

            @TestMetadata("notExcludedFromImportWhenInternalUse.kt")
            public void testNotExcludedFromImportWhenInternalUse() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/notExcludedFromImportWhenInternalUse.kt");
            }

            @TestMetadata("notForThisLabel.kt")
            public void testNotForThisLabel() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/notForThisLabel.kt");
            }

            @TestMetadata("objectMemberExtensionFunctionImportWhenExplicitReceiverPresent.kt")
            public void testObjectMemberExtensionFunctionImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/objectMemberExtensionFunctionImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("objectMemberExtensionFunctionWithGenericImportWhenExplicitReceiverPresent.kt")
            public void testObjectMemberExtensionFunctionWithGenericImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/objectMemberExtensionFunctionWithGenericImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("objectMemberExtensionPropertyImportWhenExplicitReceiverPresent.kt")
            public void testObjectMemberExtensionPropertyImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/objectMemberExtensionPropertyImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("objectMemberExtensionPropertyWithGenericImportWhenExplicitReceiverPresent.kt")
            public void testObjectMemberExtensionPropertyWithGenericImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/objectMemberExtensionPropertyWithGenericImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("sAMConstructorFromLambda.kt")
            public void testSAMConstructorFromLambda() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/sAMConstructorFromLambda.kt");
            }

            @TestMetadata("unresolvedReferenceInCall.kt")
            public void testUnresolvedReferenceInCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/unresolvedReferenceInCall.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/checkArguments")
    public static class CheckArguments extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("nonVarargSpread.kt")
        public void testNonVarargSpread() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/checkArguments/nonVarargSpread.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/conflictingImports")
    public static class ConflictingImports extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("removeConflictingImport.kt")
        public void testRemoveConflictingImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/conflictingImports/removeConflictingImport.kt");
        }

        @TestMetadata("removeDuplicateImport.kt")
        public void testRemoveDuplicateImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/conflictingImports/removeDuplicateImport.kt");
        }

        @TestMetadata("removeDuplicateImportWithAlias.kt")
        public void testRemoveDuplicateImportWithAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/conflictingImports/removeDuplicateImportWithAlias.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/expressions")
    public static class Expressions extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("kt11594.kt")
        public void testKt11594() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/kt11594.kt");
        }

        @TestMetadata("removeUselessCast.kt")
        public void testRemoveUselessCast() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCast.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInNecessaryNestedParens2.kt")
        public void testRemoveUselessCastForLambdaInNecessaryNestedParens2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInNecessaryNestedParens2.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInNestedParens.kt")
        public void testRemoveUselessCastForLambdaInNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInNestedParens.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens1.kt")
        public void testRemoveUselessCastForLambdaInParens1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens1.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens2.kt")
        public void testRemoveUselessCastForLambdaInParens2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens2.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens3.kt")
        public void testRemoveUselessCastForLambdaInParens3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens3.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens4.kt")
        public void testRemoveUselessCastForLambdaInParens4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens4.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens5.kt")
        public void testRemoveUselessCastForLambdaInParens5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens5.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens6.kt")
        public void testRemoveUselessCastForLambdaInParens6() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens6.kt");
        }

        @TestMetadata("removeUselessCastInNestedParens.kt")
        public void testRemoveUselessCastInNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastInNestedParens.kt");
        }

        @TestMetadata("removeUselessCastInParens.kt")
        public void testRemoveUselessCastInParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastInParens.kt");
        }

        @TestMetadata("removeUselessCastUnderSmartCast.kt")
        public void testRemoveUselessCastUnderSmartCast() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastUnderSmartCast.kt");
        }

        @TestMetadata("removeUselessIsCheck.kt")
        public void testRemoveUselessIsCheck() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheck.kt");
        }

        @TestMetadata("removeUselessIsCheckForNull.kt")
        public void testRemoveUselessIsCheckForNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhen.kt")
        public void testRemoveUselessIsCheckInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhen.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionless.kt")
        public void testRemoveUselessIsCheckInWhenExpressionless() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionless.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionlessForNull.kt")
        public void testRemoveUselessIsCheckInWhenExpressionlessForNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionlessForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionlessNegate.kt")
        public void testRemoveUselessIsCheckInWhenExpressionlessNegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionlessNegate.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionlessNegateForNull.kt")
        public void testRemoveUselessIsCheckInWhenExpressionlessNegateForNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionlessNegateForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenNegate.kt")
        public void testRemoveUselessIsCheckInWhenNegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenNegate.kt");
        }

        @TestMetadata("removeUselessIsCheckNegate.kt")
        public void testRemoveUselessIsCheckNegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckNegate.kt");
        }

        @TestMetadata("removeUselessIsCheckNegateForNull.kt")
        public void testRemoveUselessIsCheckNegateForNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckNegateForNull.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion1.kt")
        public void testUnnecessaryNonNullAssertion1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion1.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion2.kt")
        public void testUnnecessaryNonNullAssertion2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion2.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion3.kt")
        public void testUnnecessaryNonNullAssertion3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion3.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion4.kt")
        public void testUnnecessaryNonNullAssertion4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion4.kt");
        }

        @TestMetadata("unnecessarySafeCall1.kt")
        public void testUnnecessarySafeCall1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessarySafeCall1.kt");
        }

        @TestMetadata("unnecessarySafeCall2.kt")
        public void testUnnecessarySafeCall2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessarySafeCall2.kt");
        }

        @TestMetadata("unsafeCall1.kt")
        public void testUnsafeCall1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall1.kt");
        }

        @TestMetadata("unsafeCall2.kt")
        public void testUnsafeCall2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall2.kt");
        }

        @TestMetadata("unsafeCall3.kt")
        public void testUnsafeCall3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall3.kt");
        }

        @TestMetadata("unsafeCall4.kt")
        public void testUnsafeCall4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall4.kt");
        }

        @TestMetadata("unsafeCall5.kt")
        public void testUnsafeCall5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall5.kt");
        }

        @TestMetadata("uselessCastStaticAssertIsFine.kt")
        public void testUselessCastStaticAssertIsFine() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessCastStaticAssertIsFine.kt");
        }

        @TestMetadata("uselessElvis.kt")
        public void testUselessElvis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvis.kt");
        }

        @TestMetadata("uselessElvisForLambdaInNecessaryNestedParens.kt")
        public void testUselessElvisForLambdaInNecessaryNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvisForLambdaInNecessaryNestedParens.kt");
        }

        @TestMetadata("uselessElvisForLambdaInNestedParens.kt")
        public void testUselessElvisForLambdaInNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvisForLambdaInNestedParens.kt");
        }

        @TestMetadata("uselessElvisInNestedParens.kt")
        public void testUselessElvisInNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvisInNestedParens.kt");
        }

        @TestMetadata("uselessElvisRightIsNull.kt")
        public void testUselessElvisRightIsNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvisRightIsNull.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/lateinit")
    public static class Lateinit extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/nullable.kt");
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/val.kt");
        }

        @TestMetadata("withGetter.kt")
        public void testWithGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/withGetter.kt");
        }

        @TestMetadata("withGetterSetter.kt")
        public void testWithGetterSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/withGetterSetter.kt");
        }

        @TestMetadata("withInitializer.kt")
        public void testWithInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/withInitializer.kt");
        }

        @TestMetadata("withSetter.kt")
        public void testWithSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/withSetter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/localVariableWithTypeParameters")
    public static class LocalVariableWithTypeParameters extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("removeTypeParametersFromLocalVariable.kt")
        public void testRemoveTypeParametersFromLocalVariable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/localVariableWithTypeParameters/removeTypeParametersFromLocalVariable.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/modifiers")
    public static class Modifiers extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractClassMemberNotImplemented.kt")
        public void testAbstractClassMemberNotImplemented() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/abstractClassMemberNotImplemented.kt");
        }

        @TestMetadata("abstractMemberNotImplemented.kt")
        public void testAbstractMemberNotImplemented() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/abstractMemberNotImplemented.kt");
        }

        @TestMetadata("abstractModifierInEnum.kt")
        public void testAbstractModifierInEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/abstractModifierInEnum.kt");
        }

        @TestMetadata("abstractVarWithPrivateSetter.kt")
        public void testAbstractVarWithPrivateSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/abstractVarWithPrivateSetter.kt");
        }

        @TestMetadata("addDataForJvmRecord.kt")
        public void testAddDataForJvmRecord() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addDataForJvmRecord.kt");
        }

        @TestMetadata("addLateinit.kt")
        public void testAddLateinit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addLateinit.kt");
        }

        @TestMetadata("cannotMakeClassAnnotation.kt")
        public void testCannotMakeClassAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/cannotMakeClassAnnotation.kt");
        }

        @TestMetadata("finalInterface.kt")
        public void testFinalInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/finalInterface.kt");
        }

        @TestMetadata("illegalEnumAnnotation1.kt")
        public void testIllegalEnumAnnotation1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/illegalEnumAnnotation1.kt");
        }

        @TestMetadata("illegalEnumAnnotation2.kt")
        public void testIllegalEnumAnnotation2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/illegalEnumAnnotation2.kt");
        }

        @TestMetadata("infixModifier.kt")
        public void testInfixModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/infixModifier.kt");
        }

        @TestMetadata("kt10409.kt")
        public void testKt10409() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/kt10409.kt");
        }

        @TestMetadata("nestedAbstractClass.kt")
        public void testNestedAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedAbstractClass.kt");
        }

        @TestMetadata("nestedAnnotationClass.kt")
        public void testNestedAnnotationClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedAnnotationClass.kt");
        }

        @TestMetadata("nestedClassNotAllowed.kt")
        public void testNestedClassNotAllowed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedClassNotAllowed.kt");
        }

        @TestMetadata("nestedDataClass.kt")
        public void testNestedDataClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedDataClass.kt");
        }

        @TestMetadata("nestedEnumClass.kt")
        public void testNestedEnumClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedEnumClass.kt");
        }

        @TestMetadata("nestedInterface.kt")
        public void testNestedInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedInterface.kt");
        }

        @TestMetadata("nestedObject.kt")
        public void testNestedObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedObject.kt");
        }

        @TestMetadata("nestedSealedClass.kt")
        public void testNestedSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedSealedClass.kt");
        }

        @TestMetadata("noAbstractForAnonymousObject.kt")
        public void testNoAbstractForAnonymousObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/noAbstractForAnonymousObject.kt");
        }

        @TestMetadata("noAbstractForObject.kt")
        public void testNoAbstractForObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/noAbstractForObject.kt");
        }

        @TestMetadata("noLateinitOnNullable.kt")
        public void testNoLateinitOnNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/noLateinitOnNullable.kt");
        }

        @TestMetadata("noLateinitOnPrimitive.kt")
        public void testNoLateinitOnPrimitive() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/noLateinitOnPrimitive.kt");
        }

        @TestMetadata("notAnAnnotationClass.kt")
        public void testNotAnAnnotationClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/notAnAnnotationClass.kt");
        }

        @TestMetadata("openCompanionObject.kt")
        public void testOpenCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openCompanionObject.kt");
        }

        @TestMetadata("openCompanionObject2.kt")
        public void testOpenCompanionObject2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openCompanionObject2.kt");
        }

        @TestMetadata("openMemberInFinalClass1.kt")
        public void testOpenMemberInFinalClass1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass1.kt");
        }

        @TestMetadata("openMemberInFinalClass2.kt")
        public void testOpenMemberInFinalClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass2.kt");
        }

        @TestMetadata("openMemberInFinalClass3.kt")
        public void testOpenMemberInFinalClass3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass3.kt");
        }

        @TestMetadata("openMemberInFinalClass4.kt")
        public void testOpenMemberInFinalClass4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass4.kt");
        }

        @TestMetadata("openMemberInObject.kt")
        public void testOpenMemberInObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInObject.kt");
        }

        @TestMetadata("openModifierInEnum.kt")
        public void testOpenModifierInEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openModifierInEnum.kt");
        }

        @TestMetadata("openObject.kt")
        public void testOpenObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openObject.kt");
        }

        @TestMetadata("openVarWithPrivateSetter1.kt")
        public void testOpenVarWithPrivateSetter1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openVarWithPrivateSetter1.kt");
        }

        @TestMetadata("openVarWithPrivateSetter2.kt")
        public void testOpenVarWithPrivateSetter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openVarWithPrivateSetter2.kt");
        }

        @TestMetadata("operatorModifier.kt")
        public void testOperatorModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifier.kt");
        }

        @TestMetadata("operatorModifierCollection.kt")
        public void testOperatorModifierCollection() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifierCollection.kt");
        }

        @TestMetadata("operatorModifierComponent.kt")
        public void testOperatorModifierComponent() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifierComponent.kt");
        }

        @TestMetadata("operatorModifierGet.kt")
        public void testOperatorModifierGet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifierGet.kt");
        }

        @TestMetadata("operatorModifierInherited.kt")
        public void testOperatorModifierInherited() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifierInherited.kt");
        }

        @TestMetadata("overrideWithPrivateSetter1.kt")
        public void testOverrideWithPrivateSetter1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/overrideWithPrivateSetter1.kt");
        }

        @TestMetadata("overrideWithPrivateSetter2.kt")
        public void testOverrideWithPrivateSetter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/overrideWithPrivateSetter2.kt");
        }

        @TestMetadata("packageMemberCannotBeProtected.kt")
        public void testPackageMemberCannotBeProtected() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/packageMemberCannotBeProtected.kt");
        }

        @TestMetadata("redundantOpenInInterface.kt")
        public void testRedundantOpenInInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/redundantOpenInInterface.kt");
        }

        @TestMetadata("removeAbstractModifier.kt")
        public void testRemoveAbstractModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeAbstractModifier.kt");
        }

        @TestMetadata("removeConst.kt")
        public void testRemoveConst() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeConst.kt");
        }

        @TestMetadata("removeExternalModifier.kt")
        public void testRemoveExternalModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeExternalModifier.kt");
        }

        @TestMetadata("removeIncompatibleModifier.kt")
        public void testRemoveIncompatibleModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeIncompatibleModifier.kt");
        }

        @TestMetadata("removeInnerForClassInInterface.kt")
        public void testRemoveInnerForClassInInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeInnerForClassInInterface.kt");
        }

        @TestMetadata("removeModifierFromForbiddenOperatorMod.kt")
        public void testRemoveModifierFromForbiddenOperatorMod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeModifierFromForbiddenOperatorMod.kt");
        }

        @TestMetadata("removeModifierFromOperatorMod.kt")
        public void testRemoveModifierFromOperatorMod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeModifierFromOperatorMod.kt");
        }

        @TestMetadata("removeModifierFromOperatorModAssign.kt")
        public void testRemoveModifierFromOperatorModAssign() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeModifierFromOperatorModAssign.kt");
        }

        @TestMetadata("removeProtectedModifier.kt")
        public void testRemoveProtectedModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeProtectedModifier.kt");
        }

        @TestMetadata("removeRedundantModifier1.kt")
        public void testRemoveRedundantModifier1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeRedundantModifier1.kt");
        }

        @TestMetadata("removeRedundantModifier2.kt")
        public void testRemoveRedundantModifier2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeRedundantModifier2.kt");
        }

        @TestMetadata("removeRedundantModifier3.kt")
        public void testRemoveRedundantModifier3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeRedundantModifier3.kt");
        }

        @TestMetadata("removeSupertype1.kt")
        public void testRemoveSupertype1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeSupertype1.kt");
        }

        @TestMetadata("removeSupertype2.kt")
        public void testRemoveSupertype2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeSupertype2.kt");
        }

        @TestMetadata("removeSupertype3.kt")
        public void testRemoveSupertype3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeSupertype3.kt");
        }

        @TestMetadata("removeSupertype4.kt")
        public void testRemoveSupertype4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeSupertype4.kt");
        }

        @TestMetadata("visibilityModifer1.kt")
        public void testVisibilityModifer1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/visibilityModifer1.kt");
        }

        @TestMetadata("visibilityModifer2.kt")
        public void testVisibilityModifer2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/visibilityModifer2.kt");
        }

        @TestMetadata("visibilityModiferOverrideJavaRuntime.kt")
        public void testVisibilityModiferOverrideJavaRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/visibilityModiferOverrideJavaRuntime.kt");
        }

        @TestMetadata("visibilityModiferParameter.kt")
        public void testVisibilityModiferParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/visibilityModiferParameter.kt");
        }

        @TestMetadata("withAnnotationAndBlockComment.kt")
        public void testWithAnnotationAndBlockComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/withAnnotationAndBlockComment.kt");
        }

        @TestMetadata("withAnnotationAndEolComment.kt")
        public void testWithAnnotationAndEolComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/withAnnotationAndEolComment.kt");
        }

        @TestMetadata("withAnnotationAndEolComment2.kt")
        public void testWithAnnotationAndEolComment2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/withAnnotationAndEolComment2.kt");
        }

        @TestMetadata("withAnnotationAndEolComment3.kt")
        public void testWithAnnotationAndEolComment3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/withAnnotationAndEolComment3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration")
    public static class AddOpenToClassDeclaration extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationSuperType.kt")
        public void testAnnotationSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/annotationSuperType.kt");
        }

        @TestMetadata("dataSuperType.kt")
        public void testDataSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/dataSuperType.kt");
        }

        @TestMetadata("enumSupertype.kt")
        public void testEnumSupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/enumSupertype.kt");
        }

        @TestMetadata("enumUpperBound.kt")
        public void testEnumUpperBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/enumUpperBound.kt");
        }

        @TestMetadata("explicitlyFinalSupertype.kt")
        public void testExplicitlyFinalSupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/explicitlyFinalSupertype.kt");
        }

        @TestMetadata("explicitlyFinalUpperBound.kt")
        public void testExplicitlyFinalUpperBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/explicitlyFinalUpperBound.kt");
        }

        @TestMetadata("finalLibrarySupertype.kt")
        public void testFinalLibrarySupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalLibrarySupertype.kt");
        }

        @TestMetadata("finalLibraryUpperBound.kt")
        public void testFinalLibraryUpperBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalLibraryUpperBound.kt");
        }

        @TestMetadata("finalSupertype.kt")
        public void testFinalSupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalSupertype.kt");
        }

        @TestMetadata("finalUpperBound.kt")
        public void testFinalUpperBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalUpperBound.kt");
        }

        @TestMetadata("implementInterfaceFinalSupertype.kt")
        public void testImplementInterfaceFinalSupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/implementInterfaceFinalSupertype.kt");
        }

        @TestMetadata("inlineSuperType.kt")
        public void testInlineSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/inlineSuperType.kt");
        }

        @TestMetadata("nestedFinalClass.kt")
        public void testNestedFinalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/nestedFinalClass.kt");
        }

        @TestMetadata("openInCompanion.kt")
        public void testOpenInCompanion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/openInCompanion.kt");
        }

        @TestMetadata("secondaryCtrDelegationInHeader.kt")
        public void testSecondaryCtrDelegationInHeader() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/secondaryCtrDelegationInHeader.kt");
        }

        @TestMetadata("secondaryCtrDelegationInSecondary.kt")
        public void testSecondaryCtrDelegationInSecondary() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/secondaryCtrDelegationInSecondary.kt");
        }

        @TestMetadata("valueSuperType.kt")
        public void testValueSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/valueSuperType.kt");
        }

        @TestMetadata("withConstructor.kt")
        public void testWithConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/withConstructor.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/modifiers/suspend")
    public static class Suspend extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("anonymousFunction.kt")
        public void testAnonymousFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/anonymousFunction.kt");
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/base.kt");
        }

        @TestMetadata("createCoroutine.kt")
        public void testCreateCoroutine() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/createCoroutine.kt");
        }

        @TestMetadata("inLambda.kt")
        public void testInLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/inLambda.kt");
        }

        @TestMetadata("inLambda2.kt")
        public void testInLambda2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/inLambda2.kt");
        }

        @TestMetadata("inLambda3.kt")
        public void testInLambda3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/inLambda3.kt");
        }

        @TestMetadata("init.kt")
        public void testInit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/init.kt");
        }

        @TestMetadata("open.kt")
        public void testOpen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/open.kt");
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/override.kt");
        }

        @TestMetadata("public.kt")
        public void testPublic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/public.kt");
        }

        @TestMetadata("startCoroutine.kt")
        public void testStartCoroutine() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/startCoroutine.kt");
        }

        @TestMetadata("startCoroutineNoImport.kt")
        public void testStartCoroutineNoImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/startCoroutineNoImport.kt");
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/topLevel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/nullables")
    public abstract static class Nullables extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/nullables")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("removeRedundantNullable.kt")
            public void testRemoveRedundantNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/removeRedundantNullable.kt");
            }

            @TestMetadata("removeSupertypeNullable1.kt")
            public void testRemoveSupertypeNullable1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/removeSupertypeNullable1.kt");
            }

            @TestMetadata("removeSupertypeNullable2.kt")
            public void testRemoveSupertypeNullable2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/removeSupertypeNullable2.kt");
            }

            @TestMetadata("removeUselessNullable.kt")
            public void testRemoveUselessNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/removeUselessNullable.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall")
        public static class UnsafeInfixCall extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("noComparison.kt")
            public void testNoComparison() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/noComparison.kt");
            }

            @TestMetadata("unsafeComparisonInCondition.kt")
            public void testUnsafeComparisonInCondition() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInCondition.kt");
            }

            @TestMetadata("unsafeComparisonInLogic.kt")
            public void testUnsafeComparisonInLogic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInLogic.kt");
            }

            @TestMetadata("unsafeComparisonInWhen.kt")
            public void testUnsafeComparisonInWhen() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInWhen.kt");
            }

            @TestMetadata("unsafeComparisonInWhile.kt")
            public void testUnsafeComparisonInWhile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInWhile.kt");
            }

            @TestMetadata("unsafeGet.kt")
            public void testUnsafeGet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeGet.kt");
            }

            @TestMetadata("unsafeInfixCall.kt")
            public void testUnsafeInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInfixCall.kt");
            }

            @TestMetadata("unsafeInvoke.kt")
            public void testUnsafeInvoke() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInvoke.kt");
            }

            @TestMetadata("unsafeInvokeWithImplicitReceiver.kt")
            public void testUnsafeInvokeWithImplicitReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInvokeWithImplicitReceiver.kt");
            }

            @TestMetadata("unsafeInvokeWithReceiver.kt")
            public void testUnsafeInvokeWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInvokeWithReceiver.kt");
            }

            @TestMetadata("unsafePlus.kt")
            public void testUnsafePlus() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafePlus.kt");
            }

            @TestMetadata("unsafeSet.kt")
            public void testUnsafeSet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeSet.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/override")
    public static class Override extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractFakeOverrideInExpectClass.kt")
        public void testAbstractFakeOverrideInExpectClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/abstractFakeOverrideInExpectClass.kt");
        }

        @TestMetadata("changeToInvocation.kt")
        public void testChangeToInvocation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/changeToInvocation.kt");
        }

        @TestMetadata("implemenAsConstructorParameter.kt")
        public void testImplemenAsConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implemenAsConstructorParameter.kt");
        }

        @TestMetadata("implemenAsConstructorParameterFunction.kt")
        public void testImplemenAsConstructorParameterFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implemenAsConstructorParameterFunction.kt");
        }

        @TestMetadata("implemenAsConstructorParameterInObject.kt")
        public void testImplemenAsConstructorParameterInObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implemenAsConstructorParameterInObject.kt");
        }

        @TestMetadata("implementMember.kt")
        public void testImplementMember() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implementMember.kt");
        }

        @TestMetadata("implementMemberByEnumEntry.kt")
        public void testImplementMemberByEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implementMemberByEnumEntry.kt");
        }

        @TestMetadata("implementMemberFromAbstractClass.kt")
        public void testImplementMemberFromAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implementMemberFromAbstractClass.kt");
        }

        @TestMetadata("overriddingMultipleFinalMethods.kt")
        public void testOverriddingMultipleFinalMethods() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overriddingMultipleFinalMethods.kt");
        }

        @TestMetadata("overridingDelegatedMethod.kt")
        public void testOverridingDelegatedMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingDelegatedMethod.kt");
        }

        @TestMetadata("overridingFakeOverride.kt")
        public void testOverridingFakeOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFakeOverride.kt");
        }

        @TestMetadata("overridingFinalJavaMethod.kt")
        public void testOverridingFinalJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalJavaMethod.kt");
        }

        @TestMetadata("overridingFinalMethod.kt")
        public void testOverridingFinalMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalMethod.kt");
        }

        @TestMetadata("overridingFinalMethodInLocal.kt")
        public void testOverridingFinalMethodInLocal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalMethodInLocal.kt");
        }

        @TestMetadata("overridingFinalOverrideMethod.kt")
        public void testOverridingFinalOverrideMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalOverrideMethod.kt");
        }

        @TestMetadata("overridingFinalProperty.kt")
        public void testOverridingFinalProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalProperty.kt");
        }

        @TestMetadata("overridingOpenMethodInFinalClass.kt")
        public void testOverridingOpenMethodInFinalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingOpenMethodInFinalClass.kt");
        }

        @TestMetadata("parameterNameChangedAmbiguousRename.kt")
        public void testParameterNameChangedAmbiguousRename() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/parameterNameChangedAmbiguousRename.kt");
        }

        @TestMetadata("parameterNameChangedMultipleOverrideRenamePossible.kt")
        public void testParameterNameChangedMultipleOverrideRenamePossible() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/parameterNameChangedMultipleOverrideRenamePossible.kt");
        }

        @TestMetadata("parameterNameChangedRenamePossible.kt")
        public void testParameterNameChangedRenamePossible() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/parameterNameChangedRenamePossible.kt");
        }

        @TestMetadata("virtualMethodHidden.kt")
        public void testVirtualMethodHidden() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHidden.kt");
        }

        @TestMetadata("virtualMethodHiddenWithInternalModifier.kt")
        public void testVirtualMethodHiddenWithInternalModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHiddenWithInternalModifier.kt");
        }

        @TestMetadata("virtualMethodHiddenWithPrivateModifier.kt")
        public void testVirtualMethodHiddenWithPrivateModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHiddenWithPrivateModifier.kt");
        }

        @TestMetadata("virtualMethodHiddenWithProtectedModifier.kt")
        public void testVirtualMethodHiddenWithProtectedModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHiddenWithProtectedModifier.kt");
        }

        @TestMetadata("virtualMethodHiddenWithPublicModifier.kt")
        public void testVirtualMethodHiddenWithPublicModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHiddenWithPublicModifier.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride")
    public static class TypeMismatchOnOverride extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cantChangeMultipleOverriddenPropertiesTypes.kt")
        public void testCantChangeMultipleOverriddenPropertiesTypes() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangeMultipleOverriddenPropertiesTypes.kt");
        }

        @TestMetadata("cantChangeOverriddenPropertyTypeToMatchOverridingProperty.kt")
        public void testCantChangeOverriddenPropertyTypeToMatchOverridingProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangeOverriddenPropertyTypeToMatchOverridingProperty.kt");
        }

        @TestMetadata("cantChangePropertyTypeToMatchOverridenProperties.kt")
        public void testCantChangePropertyTypeToMatchOverridenProperties() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangePropertyTypeToMatchOverridenProperties.kt");
        }

        @TestMetadata("cantChangeReturnTypeOfOverriddenFunction.kt")
        public void testCantChangeReturnTypeOfOverriddenFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangeReturnTypeOfOverriddenFunction.kt");
        }

        @TestMetadata("changeOverriddenPropertyType1.kt")
        public void testChangeOverriddenPropertyType1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverriddenPropertyType1.kt");
        }

        @TestMetadata("changeOverriddenPropertyType2.kt")
        public void testChangeOverriddenPropertyType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverriddenPropertyType2.kt");
        }

        @TestMetadata("changeOverriddenPropertyTypeFromCtorParameter.kt")
        public void testChangeOverriddenPropertyTypeFromCtorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverriddenPropertyTypeFromCtorParameter.kt");
        }

        @TestMetadata("changeOverridingCtorParameterType.kt")
        public void testChangeOverridingCtorParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverridingCtorParameterType.kt");
        }

        @TestMetadata("changeOverridingPropertyTypeToFunctionType.kt")
        public void testChangeOverridingPropertyTypeToFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverridingPropertyTypeToFunctionType.kt");
        }

        @TestMetadata("changeReturnTypeOfOverriddenFunction.kt")
        public void testChangeReturnTypeOfOverriddenFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeReturnTypeOfOverriddenFunction.kt");
        }

        @TestMetadata("namedFunctionReturnOverrideInsideVariableInitializer.kt")
        public void testNamedFunctionReturnOverrideInsideVariableInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/namedFunctionReturnOverrideInsideVariableInitializer.kt");
        }

        @TestMetadata("objectInsideBody.kt")
        public void testObjectInsideBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/objectInsideBody.kt");
        }

        @TestMetadata("propertyReturnTypeMismatchOnOverride.kt")
        public void testPropertyReturnTypeMismatchOnOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/propertyReturnTypeMismatchOnOverride.kt");
        }

        @TestMetadata("propertyTypeMismatchOnOverrideIntLong.kt")
        public void testPropertyTypeMismatchOnOverrideIntLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/propertyTypeMismatchOnOverrideIntLong.kt");
        }

        @TestMetadata("propertyTypeMismatchOnOverrideIntUnit.kt")
        public void testPropertyTypeMismatchOnOverrideIntUnit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/propertyTypeMismatchOnOverrideIntUnit.kt");
        }

        @TestMetadata("returnTypeMismatchOnMultipleOverride.kt")
        public void testReturnTypeMismatchOnMultipleOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnMultipleOverride.kt");
        }

        @TestMetadata("returnTypeMismatchOnMultipleOverrideAmbiguity.kt")
        public void testReturnTypeMismatchOnMultipleOverrideAmbiguity() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnMultipleOverrideAmbiguity.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverrideIntLong.kt")
        public void testReturnTypeMismatchOnOverrideIntLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnOverrideIntLong.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverrideIntUnit.kt")
        public void testReturnTypeMismatchOnOverrideIntUnit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnOverrideIntUnit.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverrideUnitInt.kt")
        public void testReturnTypeMismatchOnOverrideUnitInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnOverrideUnitInt.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeRedundantSpreadOperator")
    public static class RemoveRedundantSpreadOperator extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantSpreadOperator/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall")
    public static class ReplaceInfixOrOperatorCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("array.kt")
        public void testArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/array.kt");
        }

        @TestMetadata("arraySet.kt")
        public void testArraySet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/arraySet.kt");
        }

        @TestMetadata("assignmentArray.kt")
        public void testAssignmentArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentArray.kt");
        }

        @TestMetadata("assignmentBinaryOperator.kt")
        public void testAssignmentBinaryOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentBinaryOperator.kt");
        }

        @TestMetadata("assignmentCallExpression.kt")
        public void testAssignmentCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentCallExpression.kt");
        }

        @TestMetadata("assignmentList.kt")
        public void testAssignmentList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentList.kt");
        }

        @TestMetadata("augmentedAssignmentAvailable.kt")
        public void testAugmentedAssignmentAvailable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/augmentedAssignmentAvailable.kt");
        }

        @TestMetadata("augmentedAssignmentNotAvailable.kt")
        public void testAugmentedAssignmentNotAvailable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/augmentedAssignmentNotAvailable.kt");
        }

        @TestMetadata("binaryOperator.kt")
        public void testBinaryOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/binaryOperator.kt");
        }

        @TestMetadata("callExpression.kt")
        public void testCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/callExpression.kt");
        }

        @TestMetadata("callExpressionInSafeQualified.kt")
        public void testCallExpressionInSafeQualified() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/callExpressionInSafeQualified.kt");
        }

        @TestMetadata("callExpressionInSafeQualified2.kt")
        public void testCallExpressionInSafeQualified2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/callExpressionInSafeQualified2.kt");
        }

        @TestMetadata("containsBinaryOperator.kt")
        public void testContainsBinaryOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/containsBinaryOperator.kt");
        }

        @TestMetadata("divAssignOnMutableMap.kt")
        public void testDivAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/divAssignOnMutableMap.kt");
        }

        @TestMetadata("hasElvis.kt")
        public void testHasElvis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/hasElvis.kt");
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/list.kt");
        }

        @TestMetadata("minusAssignOnMutableMap.kt")
        public void testMinusAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/minusAssignOnMutableMap.kt");
        }

        @TestMetadata("notContainsBinaryOperator.kt")
        public void testNotContainsBinaryOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/notContainsBinaryOperator.kt");
        }

        @TestMetadata("plusAssignOnMutableMap.kt")
        public void testPlusAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/plusAssignOnMutableMap.kt");
        }

        @TestMetadata("plusAssignOnMutableMapWithNullableValueType.kt")
        public void testPlusAssignOnMutableMapWithNullableValueType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/plusAssignOnMutableMapWithNullableValueType.kt");
        }

        @TestMetadata("remAssignOnMutableMap.kt")
        public void testRemAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/remAssignOnMutableMap.kt");
        }

        @TestMetadata("timesAssignOnMutableMap.kt")
        public void testTimesAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/timesAssignOnMutableMap.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation")
    public static class ReplaceWithArrayCallInAnnotation extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("emptyLiteral.kt")
        public void testEmptyLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/emptyLiteral.kt");
        }

        @TestMetadata("literalWithValues.kt")
        public void testLiteralWithValues() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/literalWithValues.kt");
        }

        @TestMetadata("replaceForbiddenAssignmentWithArrayLiteral.kt")
        public void testReplaceForbiddenAssignmentWithArrayLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/replaceForbiddenAssignmentWithArrayLiteral.kt");
        }

        @TestMetadata("replaceSingleElementInNamedForm.kt")
        public void testReplaceSingleElementInNamedForm() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/replaceSingleElementInNamedForm.kt");
        }

        @TestMetadata("replaceSingleElementInNamedForm_1_2.kt")
        public void testReplaceSingleElementInNamedForm_1_2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/replaceSingleElementInNamedForm_1_2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceWithDotCall")
    public static class ReplaceWithDotCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("callWillChangeNullability.kt")
        public void testCallWillChangeNullability() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/callWillChangeNullability.kt");
        }

        @TestMetadata("callWillChangeNullability2.kt")
        public void testCallWillChangeNullability2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/callWillChangeNullability2.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/comment.kt");
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/functionCall.kt");
        }

        @TestMetadata("lineBreak.kt")
        public void testLineBreak() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/lineBreak.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/normal.kt");
        }

        @TestMetadata("safeCallChain.kt")
        public void testSafeCallChain() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/safeCallChain.kt");
        }

        @TestMetadata("safeCallChain2.kt")
        public void testSafeCallChain2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/safeCallChain2.kt");
        }

        @TestMetadata("safeCallChain3.kt")
        public void testSafeCallChain3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/safeCallChain3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceWithSafeCall")
    public static class ReplaceWithSafeCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("apply.kt")
        public void testApply() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/apply.kt");
        }

        @TestMetadata("applyWithImplicitParameter.kt")
        public void testApplyWithImplicitParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/applyWithImplicitParameter.kt");
        }

        @TestMetadata("applyWithImplicitParameterFunctionCall.kt")
        public void testApplyWithImplicitParameterFunctionCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/applyWithImplicitParameterFunctionCall.kt");
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/argument.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignment.kt");
        }

        @TestMetadata("assignmentFromImplicitParameter.kt")
        public void testAssignmentFromImplicitParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentFromImplicitParameter.kt");
        }

        @TestMetadata("assignmentToNullable.kt")
        public void testAssignmentToNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToNullable.kt");
        }

        @TestMetadata("assignmentToProperty.kt")
        public void testAssignmentToProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToProperty.kt");
        }

        @TestMetadata("assignmentToPropertyWithNoExplicitType.kt")
        public void testAssignmentToPropertyWithNoExplicitType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToPropertyWithNoExplicitType.kt");
        }

        @TestMetadata("assignmentToUnsafeCallExpression.kt")
        public void testAssignmentToUnsafeCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToUnsafeCallExpression.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/comment.kt");
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/expression.kt");
        }

        @TestMetadata("extFunction.kt")
        public void testExtFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/extFunction.kt");
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/functionCall.kt");
        }

        @TestMetadata("functionExpressionBody.kt")
        public void testFunctionExpressionBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/functionExpressionBody.kt");
        }

        @TestMetadata("functionExpressionBodyWithNoExplicitType.kt")
        public void testFunctionExpressionBodyWithNoExplicitType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/functionExpressionBodyWithNoExplicitType.kt");
        }

        @TestMetadata("hasElvis.kt")
        public void testHasElvis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/hasElvis.kt");
        }

        @TestMetadata("hasElvis2.kt")
        public void testHasElvis2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/hasElvis2.kt");
        }

        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/invokeOperator.kt");
        }

        @TestMetadata("invokeOperator2.kt")
        public void testInvokeOperator2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/invokeOperator2.kt");
        }

        @TestMetadata("lastStatementOfLambdaAsArgument.kt")
        public void testLastStatementOfLambdaAsArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/lastStatementOfLambdaAsArgument.kt");
        }

        @TestMetadata("lastStatementOfLambdaAsLocalVariable.kt")
        public void testLastStatementOfLambdaAsLocalVariable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/lastStatementOfLambdaAsLocalVariable.kt");
        }

        @TestMetadata("lastStatementOfLambdaAsProperty.kt")
        public void testLastStatementOfLambdaAsProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/lastStatementOfLambdaAsProperty.kt");
        }

        @TestMetadata("let.kt")
        public void testLet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/let.kt");
        }

        @TestMetadata("letWithParameter.kt")
        public void testLetWithParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/letWithParameter.kt");
        }

        @TestMetadata("lineBreak.kt")
        public void testLineBreak() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/lineBreak.kt");
        }

        @TestMetadata("noReplaceWithSafeCallForImplicitReceiver.kt")
        public void testNoReplaceWithSafeCallForImplicitReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/noReplaceWithSafeCallForImplicitReceiver.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/normal.kt");
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/return.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode")
    public static class SpecifyVisibilityInExplicitApiMode extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/class.kt");
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/companion.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/constructor.kt");
        }

        @TestMetadata("method.kt")
        public void testMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/method.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/property.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/supercalls")
    public static class Supercalls extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("typeArgumentsRedundantInSuperQualifier.kt")
        public void testTypeArgumentsRedundantInSuperQualifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supercalls/typeArgumentsRedundantInSuperQualifier.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs")
    public static class SurroundWithArrayOfForNamedArgumentsToVarargs extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("onlyShortenInsertedArrayOfCall.kt")
        public void testOnlyShortenInsertedArrayOfCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/onlyShortenInsertedArrayOfCall.kt");
        }

        @TestMetadata("replaceForVarargOfAny.kt")
        public void testReplaceForVarargOfAny() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceForVarargOfAny.kt");
        }

        @TestMetadata("replaceForbiddenAssigningIntoArrayCall.kt")
        public void testReplaceForbiddenAssigningIntoArrayCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceForbiddenAssigningIntoArrayCall.kt");
        }

        @TestMetadata("replaceToArrayOfPrimitiveTypes.kt")
        public void testReplaceToArrayOfPrimitiveTypes() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceToArrayOfPrimitiveTypes.kt");
        }

        @TestMetadata("replaceToArrayOfPrimitiveTypes_1_2.kt")
        public void testReplaceToArrayOfPrimitiveTypes_1_2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceToArrayOfPrimitiveTypes_1_2.kt");
        }

        @TestMetadata("simpleNamedArgumentToVararg.kt")
        public void testSimpleNamedArgumentToVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/simpleNamedArgumentToVararg.kt");
        }

        @TestMetadata("simpleNamedArgumentToVararg_1_2.kt")
        public void testSimpleNamedArgumentToVararg_1_2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/simpleNamedArgumentToVararg_1_2.kt");
        }

        @TestMetadata("surroundWithSpreadForConstructorCall.kt")
        public void testSurroundWithSpreadForConstructorCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/surroundWithSpreadForConstructorCall.kt");
        }

        @TestMetadata("surroundWithSpreadForConstructorCall_1_2.kt")
        public void testSurroundWithSpreadForConstructorCall_1_2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/surroundWithSpreadForConstructorCall_1_2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/variables/changeMutability")
    public static class ChangeMutability extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("capturedMemberValInitialization.kt")
        public void testCapturedMemberValInitialization() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/capturedMemberValInitialization.kt");
        }

        @TestMetadata("capturedValInitialization.kt")
        public void testCapturedValInitialization() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/capturedValInitialization.kt");
        }

        @TestMetadata("const.kt")
        public void testConst() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/const.kt");
        }

        @TestMetadata("funParameter.kt")
        public void testFunParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/funParameter.kt");
        }

        @TestMetadata("localInGetter.kt")
        public void testLocalInGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/localInGetter.kt");
        }

        @TestMetadata("valOverrideVar.kt")
        public void testValOverrideVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valOverrideVar.kt");
        }

        @TestMetadata("valOverrideVarConstructorParameter.kt")
        public void testValOverrideVarConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valOverrideVarConstructorParameter.kt");
        }

        @TestMetadata("valReassignmentLocal.kt")
        public void testValReassignmentLocal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentLocal.kt");
        }

        @TestMetadata("valReassignmentOuterDecl.kt")
        public void testValReassignmentOuterDecl() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentOuterDecl.kt");
        }

        @TestMetadata("valReassignmentProperty.kt")
        public void testValReassignmentProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentProperty.kt");
        }

        @TestMetadata("valReassignmentPropertyConstructorParameter.kt")
        public void testValReassignmentPropertyConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentPropertyConstructorParameter.kt");
        }

        @TestMetadata("valWithSetter.kt")
        public void testValWithSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valWithSetter.kt");
        }

        @TestMetadata("varAnnotationParameter.kt")
        public void testVarAnnotationParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/varAnnotationParameter.kt");
        }

        @TestMetadata("volatileOnValue.kt")
        public void testVolatileOnValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/volatileOnValue.kt");
        }

        @TestMetadata("volatileOnValueLocal.kt")
        public void testVolatileOnValueLocal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/volatileOnValueLocal.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter")
    public static class RemoveValVarFromParameter extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("catchParameter.kt")
        public void testCatchParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/catchParameter.kt");
        }

        @TestMetadata("constructorParameter.kt")
        public void testConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/constructorParameter.kt");
        }

        @TestMetadata("funParameter.kt")
        public void testFunParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/funParameter.kt");
        }

        @TestMetadata("loopMultiParameter.kt")
        public void testLoopMultiParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/loopMultiParameter.kt");
        }

        @TestMetadata("loopParameter.kt")
        public void testLoopParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/loopParameter.kt");
        }

        @TestMetadata("parameterWithComment.kt")
        public void testParameterWithComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/parameterWithComment.kt");
        }

        @TestMetadata("secondaryConstructorParameter.kt")
        public void testSecondaryConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/secondaryConstructorParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/when")
    public static class When extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addElseBranchBooleanWarning.kt")
        public void testAddElseBranchBooleanWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addElseBranchBooleanWarning.kt");
        }

        @TestMetadata("addElseBranchEnumStatement.kt")
        public void testAddElseBranchEnumStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addElseBranchEnumStatement.kt");
        }

        @TestMetadata("addElseBranchSealed.kt")
        public void testAddElseBranchSealed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addElseBranchSealed.kt");
        }

        @TestMetadata("addElseBranchSealedWarning.kt")
        public void testAddElseBranchSealedWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addElseBranchSealedWarning.kt");
        }

        @TestMetadata("addRemainingBranchesBlankLine.kt")
        public void testAddRemainingBranchesBlankLine() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesBlankLine.kt");
        }

        @TestMetadata("addRemainingBranchesBlankLineWithComment.kt")
        public void testAddRemainingBranchesBlankLineWithComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesBlankLineWithComment.kt");
        }

        @TestMetadata("addRemainingBranchesBoolean.kt")
        public void testAddRemainingBranchesBoolean() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesBoolean.kt");
        }

        @TestMetadata("addRemainingBranchesEnum.kt")
        public void testAddRemainingBranchesEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnum.kt");
        }

        @TestMetadata("addRemainingBranchesEnumBackTicks.kt")
        public void testAddRemainingBranchesEnumBackTicks() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumBackTicks.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport1.kt")
        public void testAddRemainingBranchesEnumImport1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport1.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport2.kt")
        public void testAddRemainingBranchesEnumImport2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport2.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport3.kt")
        public void testAddRemainingBranchesEnumImport3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport3.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport4.kt")
        public void testAddRemainingBranchesEnumImport4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport4.kt");
        }

        @TestMetadata("addRemainingBranchesEnumStatement.kt")
        public void testAddRemainingBranchesEnumStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumStatement.kt");
        }

        @TestMetadata("addRemainingBranchesInNonDefaultPackage.kt")
        public void testAddRemainingBranchesInNonDefaultPackage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesInNonDefaultPackage.kt");
        }

        @TestMetadata("addRemainingBranchesMissingLeftBracket.kt")
        public void testAddRemainingBranchesMissingLeftBracket() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesMissingLeftBracket.kt");
        }

        @TestMetadata("addRemainingBranchesMissingRightBracket.kt")
        public void testAddRemainingBranchesMissingRightBracket() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesMissingRightBracket.kt");
        }

        @TestMetadata("addRemainingBranchesMissingRightParenthesis.kt")
        public void testAddRemainingBranchesMissingRightParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesMissingRightParenthesis.kt");
        }

        @TestMetadata("addRemainingBranchesSealed.kt")
        public void testAddRemainingBranchesSealed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesSealed.kt");
        }

        @TestMetadata("addRemainingBranchesSealedBackTicks.kt")
        public void testAddRemainingBranchesSealedBackTicks() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesSealedBackTicks.kt");
        }

        @TestMetadata("addRemainingBranchesSealedStatement.kt")
        public void testAddRemainingBranchesSealedStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesSealedStatement.kt");
        }

        @TestMetadata("addRemainingBranchesSealedWarning.kt")
        public void testAddRemainingBranchesSealedWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesSealedWarning.kt");
        }

        @TestMetadata("breakInWhen.kt")
        public void testBreakInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/breakInWhen.kt");
        }

        @TestMetadata("breakInWhenInLabeled.kt")
        public void testBreakInWhenInLabeled() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/breakInWhenInLabeled.kt");
        }

        @TestMetadata("commasInConditionWithNoArguments.kt")
        public void testCommasInConditionWithNoArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/commasInConditionWithNoArguments.kt");
        }

        @TestMetadata("commasInConditionWithNoArguments2.kt")
        public void testCommasInConditionWithNoArguments2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/commasInConditionWithNoArguments2.kt");
        }

        @TestMetadata("continueInWhen.kt")
        public void testContinueInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/continueInWhen.kt");
        }

        @TestMetadata("continueInWhenInLabeled.kt")
        public void testContinueInWhenInLabeled() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/continueInWhenInLabeled.kt");
        }

        @TestMetadata("continueInWhenWithLabel.kt")
        public void testContinueInWhenWithLabel() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/continueInWhenWithLabel.kt");
        }

        @TestMetadata("elseNotLastInWhen.kt")
        public void testElseNotLastInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/elseNotLastInWhen.kt");
        }

        @TestMetadata("localSealedClassInheritorExhaustive.kt")
        public void testLocalSealedClassInheritorExhaustive() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/localSealedClassInheritorExhaustive.kt");
        }

        @TestMetadata("noElseInWhenWithBranches.kt")
        public void testNoElseInWhenWithBranches() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/noElseInWhenWithBranches.kt");
        }

        @TestMetadata("noElseInWhenWithoutBranches.kt")
        public void testNoElseInWhenWithoutBranches() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/noElseInWhenWithoutBranches.kt");
        }

        @TestMetadata("notRedundantBranch.kt")
        public void testNotRedundantBranch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/notRedundantBranch.kt");
        }

        @TestMetadata("removeRedundantBranch.kt")
        public void testRemoveRedundantBranch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/removeRedundantBranch.kt");
        }

        @TestMetadata("removeRedundantCondition.kt")
        public void testRemoveRedundantCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/removeRedundantCondition.kt");
        }

        @TestMetadata("removeRedundantElse.kt")
        public void testRemoveRedundantElse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/removeRedundantElse.kt");
        }

        @TestMetadata("twoElseBranchesInWhen.kt")
        public void testTwoElseBranchesInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/twoElseBranchesInWhen.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall")
    public static class WrapWithSafeLetCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argumentNullable.kt")
        public void testArgumentNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/argumentNullable.kt");
        }

        @TestMetadata("callWithLambdaArgument.kt")
        public void testCallWithLambdaArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/callWithLambdaArgument.kt");
        }

        @TestMetadata("chainedCallTypeMismatch.kt")
        public void testChainedCallTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/chainedCallTypeMismatch.kt");
        }

        @TestMetadata("chainedCallTypeMismatch2.kt")
        public void testChainedCallTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/chainedCallTypeMismatch2.kt");
        }

        @TestMetadata("chainedUnsafeCall.kt")
        public void testChainedUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/chainedUnsafeCall.kt");
        }

        @TestMetadata("elvisArgument.kt")
        public void testElvisArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/elvisArgument.kt");
        }

        @TestMetadata("expressionUnsafeCall.kt")
        public void testExpressionUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/expressionUnsafeCall.kt");
        }

        @TestMetadata("extensionMethod.kt")
        public void testExtensionMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/extensionMethod.kt");
        }

        @TestMetadata("extentionFunctionCall.kt")
        public void testExtentionFunctionCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/extentionFunctionCall.kt");
        }

        @TestMetadata("extentionFunctionCall2.kt")
        public void testExtentionFunctionCall2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/extentionFunctionCall2.kt");
        }

        @TestMetadata("inOperator.kt")
        public void testInOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/inOperator.kt");
        }

        @TestMetadata("insideLet.kt")
        public void testInsideLet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/insideLet.kt");
        }

        @TestMetadata("invokeFuncUnsafe.kt")
        public void testInvokeFuncUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeFuncUnsafe.kt");
        }

        @TestMetadata("invokeFunctionType.kt")
        public void testInvokeFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeFunctionType.kt");
        }

        @TestMetadata("invokeFunctionType2.kt")
        public void testInvokeFunctionType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeFunctionType2.kt");
        }

        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeOperator.kt");
        }

        @TestMetadata("invokeOperator2.kt")
        public void testInvokeOperator2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeOperator2.kt");
        }

        @TestMetadata("invokeUnsafe.kt")
        public void testInvokeUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeUnsafe.kt");
        }

        @TestMetadata("nameAlreadyInScope.kt")
        public void testNameAlreadyInScope() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/nameAlreadyInScope.kt");
        }

        @TestMetadata("nullableBinaryExpression.kt")
        public void testNullableBinaryExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/nullableBinaryExpression.kt");
        }

        @TestMetadata("nullableReceiver.kt")
        public void testNullableReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/nullableReceiver.kt");
        }

        @TestMetadata("objectQualifier.kt")
        public void testObjectQualifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/objectQualifier.kt");
        }

        @TestMetadata("refactorNullableFunctionTypeProperty1.kt")
        public void testRefactorNullableFunctionTypeProperty1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/refactorNullableFunctionTypeProperty1.kt");
        }

        @TestMetadata("refactorNullableFunctionTypeProperty2.kt")
        public void testRefactorNullableFunctionTypeProperty2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/refactorNullableFunctionTypeProperty2.kt");
        }

        @TestMetadata("unsafe.kt")
        public void testUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/unsafe.kt");
        }

        @TestMetadata("unsafe2.kt")
        public void testUnsafe2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/unsafe2.kt");
        }

        @TestMetadata("unsafeForNullableParameter.kt")
        public void testUnsafeForNullableParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/unsafeForNullableParameter.kt");
        }

        @TestMetadata("unstableValue.kt")
        public void testUnstableValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/unstableValue.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions1.kt")
        public void testWrapAllNonNullablePositions1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions1.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions2.kt")
        public void testWrapAllNonNullablePositions2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions2.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions3.kt")
        public void testWrapAllNonNullablePositions3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions3.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions4.kt")
        public void testWrapAllNonNullablePositions4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions4.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions5.kt")
        public void testWrapAllNonNullablePositions5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions5.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions6.kt")
        public void testWrapAllNonNullablePositions6() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions6.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeAddition")
    public static class TypeAddition extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("ambiguousFunctionReturnType.kt")
        public void testAmbiguousFunctionReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/ambiguousFunctionReturnType.kt");
        }

        @TestMetadata("ambiguousPropertyReturnType.kt")
        public void testAmbiguousPropertyReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/ambiguousPropertyReturnType.kt");
        }

        @TestMetadata("changeAccessorTypeToFunctionType.kt")
        public void testChangeAccessorTypeToFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/changeAccessorTypeToFunctionType.kt");
        }

        @TestMetadata("noAddErrorType.kt")
        public void testNoAddErrorType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/noAddErrorType.kt");
        }

        @TestMetadata("noExplicitTypeInApiMode.kt")
        public void testNoExplicitTypeInApiMode() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/noExplicitTypeInApiMode.kt");
        }

        @TestMetadata("privatePropertyReference.kt")
        public void testPrivatePropertyReference() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/privatePropertyReference.kt");
        }

        @TestMetadata("propertyHasType.kt")
        public void testPropertyHasType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyHasType.kt");
        }

        @TestMetadata("propertyWithGetterWithBlockBody.kt")
        public void testPropertyWithGetterWithBlockBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithGetterWithBlockBody.kt");
        }

        @TestMetadata("propertyWithGetterWithInferredType.kt")
        public void testPropertyWithGetterWithInferredType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithGetterWithInferredType.kt");
        }

        @TestMetadata("propertyWithGetterWithoutType.kt")
        public void testPropertyWithGetterWithoutType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithGetterWithoutType.kt");
        }

        @TestMetadata("propertyWithRecursiveGetter.kt")
        public void testPropertyWithRecursiveGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithRecursiveGetter.kt");
        }

        @TestMetadata("propertyWithSetterWithoutType.kt")
        public void testPropertyWithSetterWithoutType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithSetterWithoutType.kt");
        }

        @TestMetadata("protectedFunWithoutReturnType.kt")
        public void testProtectedFunWithoutReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/protectedFunWithoutReturnType.kt");
        }

        @TestMetadata("publicFunWithoutBody.kt")
        public void testPublicFunWithoutBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicFunWithoutBody.kt");
        }

        @TestMetadata("publicFunWithoutReturnType.kt")
        public void testPublicFunWithoutReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicFunWithoutReturnType.kt");
        }

        @TestMetadata("publicFunWithoutReturnTypeCaretOnParameter.kt")
        public void testPublicFunWithoutReturnTypeCaretOnParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicFunWithoutReturnTypeCaretOnParameter.kt");
        }

        @TestMetadata("publicValWithoutReturnType.kt")
        public void testPublicValWithoutReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicValWithoutReturnType.kt");
        }

        @TestMetadata("publicValWithoutReturnTypeCaretOnPublic.kt")
        public void testPublicValWithoutReturnTypeCaretOnPublic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicValWithoutReturnTypeCaretOnPublic.kt");
        }

        @TestMetadata("wrongGetterParameterType.kt")
        public void testWrongGetterParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/wrongGetterParameterType.kt");
        }

        @TestMetadata("wrongGetterParameterTypeLongNameRuntime.kt")
        public void testWrongGetterParameterTypeLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/wrongGetterParameterTypeLongNameRuntime.kt");
        }

        @TestMetadata("wrongSetterParameterType.kt")
        public void testWrongSetterParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/wrongSetterParameterType.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/casts")
    public static class Casts extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("castQualifiedArgument.kt")
        public void testCastQualifiedArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/castQualifiedArgument.kt");
        }

        @TestMetadata("castToFunctionType.kt")
        public void testCastToFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/castToFunctionType.kt");
        }

        @TestMetadata("preferExclExcl.kt")
        public void testPreferExclExcl() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/preferExclExcl.kt");
        }

        @TestMetadata("smartcastImpossible1.kt")
        public void testSmartcastImpossible1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/smartcastImpossible1.kt");
        }

        @TestMetadata("smartcastImpossible2.kt")
        public void testSmartcastImpossible2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/smartcastImpossible2.kt");
        }

        @TestMetadata("smartcastImpossible3.kt")
        public void testSmartcastImpossible3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/smartcastImpossible3.kt");
        }

        @TestMetadata("typeMismatch1.kt")
        public void testTypeMismatch1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch1.kt");
        }

        @TestMetadata("typeMismatch2.kt")
        public void testTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch2.kt");
        }

        @TestMetadata("typeMismatch3.kt")
        public void testTypeMismatch3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch3.kt");
        }

        @TestMetadata("typeMismatch4.kt")
        public void testTypeMismatch4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch4.kt");
        }

        @TestMetadata("typeMismatch5.kt")
        public void testTypeMismatch5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch5.kt");
        }

        @TestMetadata("typeMismatchLongNameRuntime.kt")
        public void testTypeMismatchLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatchLongNameRuntime.kt");
        }

        @TestMetadata("unsigned.kt")
        public void testUnsigned() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/unsigned.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch")
    public static class ComponentFunctionReturnTypeMismatch extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("componentFunctionReturnTypeMismatch1.kt")
        public void testComponentFunctionReturnTypeMismatch1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch1.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch2.kt")
        public void testComponentFunctionReturnTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch2.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch3.kt")
        public void testComponentFunctionReturnTypeMismatch3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch3.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch4.kt")
        public void testComponentFunctionReturnTypeMismatch4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch4.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch5.kt")
        public void testComponentFunctionReturnTypeMismatch5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch5.kt");
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/dataClass.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes")
    public static class IncompatibleTypes extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("byte.kt")
        public void testByte() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/byte.kt");
        }

        @TestMetadata("changeReturnType.kt")
        public void testChangeReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/changeReturnType.kt");
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/char.kt");
        }

        @TestMetadata("char2.kt")
        public void testChar2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/char2.kt");
        }

        @TestMetadata("int.kt")
        public void testInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/int.kt");
        }

        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/toString.kt");
        }

        @TestMetadata("wrapWithCollectionLiteral.kt")
        public void testWrapWithCollectionLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/wrapWithCollectionLiteral.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion")
    public abstract static class NumberConversion extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar")
        public static class FromChar extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("byte.kt")
            public void testByte() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/byte.kt");
            }

            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/double.kt");
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/float.kt");
            }

            @TestMetadata("int.kt")
            public void testInt() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/int.kt");
            }

            @TestMetadata("intFromCharLiteral.kt")
            public void testIntFromCharLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/intFromCharLiteral.kt");
            }

            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/long.kt");
            }

            @TestMetadata("longFromCharLiteral.kt")
            public void testLongFromCharLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/longFromCharLiteral.kt");
            }

            @TestMetadata("short.kt")
            public void testShort() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/short.kt");
            }

            @TestMetadata("shortWithVer1_4.kt")
            public void testShortWithVer1_4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/shortWithVer1_4.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte")
        public static class ToByte extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/double.kt");
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/float.kt");
            }

            @TestMetadata("floatWithVer1_2.kt")
            public void testFloatWithVer1_2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/floatWithVer1_2.kt");
            }

            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/long.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar")
        public static class ToChar extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("byte.kt")
            public void testByte() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/byte.kt");
            }

            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/double.kt");
            }

            @TestMetadata("doubleLiteral.kt")
            public void testDoubleLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/doubleLiteral.kt");
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/float.kt");
            }

            @TestMetadata("floatLiteral.kt")
            public void testFloatLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/floatLiteral.kt");
            }

            @TestMetadata("int.kt")
            public void testInt() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/int.kt");
            }

            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/long.kt");
            }

            @TestMetadata("longLiteral.kt")
            public void testLongLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/longLiteral.kt");
            }

            @TestMetadata("short.kt")
            public void testShort() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/short.kt");
            }

            @TestMetadata("shortWithVer1_4.kt")
            public void testShortWithVer1_4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/shortWithVer1_4.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort")
        public static class ToShort extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort/double.kt");
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort/float.kt");
            }

            @TestMetadata("floatWithVer1_2.kt")
            public void testFloatWithVer1_2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort/floatWithVer1_2.kt");
            }

            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort/long.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("convertBinaryExpression.kt")
            public void testConvertBinaryExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/convertBinaryExpression.kt");
            }

            @TestMetadata("convertExpression.kt")
            public void testConvertExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/convertExpression.kt");
            }

            @TestMetadata("convertToSigned.kt")
            public void testConvertToSigned() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/convertToSigned.kt");
            }

            @TestMetadata("convertToUnsigned.kt")
            public void testConvertToUnsigned() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/convertToUnsigned.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch")
    public static class ParameterTypeMismatch extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("changeFunctionParameterType1.kt")
        public void testChangeFunctionParameterType1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType1.kt");
        }

        @TestMetadata("changeFunctionParameterType2.kt")
        public void testChangeFunctionParameterType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType2.kt");
        }

        @TestMetadata("changeFunctionParameterType3.kt")
        public void testChangeFunctionParameterType3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType3.kt");
        }

        @TestMetadata("changeFunctionParameterType4.kt")
        public void testChangeFunctionParameterType4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType4.kt");
        }

        @TestMetadata("changeFunctionParameterTypeWithComment.kt")
        public void testChangeFunctionParameterTypeWithComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterTypeWithComment.kt");
        }

        @TestMetadata("changeParameterTypeLongNameRuntime.kt")
        public void testChangeParameterTypeLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeParameterTypeLongNameRuntime.kt");
        }

        @TestMetadata("changePrimaryConstructorParameterType.kt")
        public void testChangePrimaryConstructorParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changePrimaryConstructorParameterType.kt");
        }

        @TestMetadata("changePrimaryConstructorParameterTypeOnPropertyDelegate.kt")
        public void testChangePrimaryConstructorParameterTypeOnPropertyDelegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changePrimaryConstructorParameterTypeOnPropertyDelegate.kt");
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/char.kt");
        }

        @TestMetadata("convertKClassToJavaClass.kt")
        public void testConvertKClassToJavaClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/convertKClassToJavaClass.kt");
        }

        @TestMetadata("convertKClassToJavaClassSubtype.kt")
        public void testConvertKClassToJavaClassSubtype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/convertKClassToJavaClassSubtype.kt");
        }

        @TestMetadata("convertKClassToJavaClassTypeMismatch.kt")
        public void testConvertKClassToJavaClassTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/convertKClassToJavaClassTypeMismatch.kt");
        }

        @TestMetadata("convertKClassToJavaClassVariable.kt")
        public void testConvertKClassToJavaClassVariable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/convertKClassToJavaClassVariable.kt");
        }

        @TestMetadata("genericType.kt")
        public void testGenericType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/genericType.kt");
        }

        @TestMetadata("genericType2.kt")
        public void testGenericType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/genericType2.kt");
        }

        @TestMetadata("multiFakeOverride.kt")
        public void testMultiFakeOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/multiFakeOverride.kt");
        }

        @TestMetadata("stdlibFunction.kt")
        public void testStdlibFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/stdlibFunction.kt");
        }

        @TestMetadata("unsigned.kt")
        public void testUnsigned() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/unsigned.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression")
    public abstract static class TypeMismatchOnReturnedExpression extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn")
        public static class MultiReturn extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("labeledReturn.kt")
            public void testLabeledReturn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/labeledReturn.kt");
            }

            @TestMetadata("returnDifferentType.kt")
            public void testReturnDifferentType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnDifferentType.kt");
            }

            @TestMetadata("returnNull.kt")
            public void testReturnNull() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnNull.kt");
            }

            @TestMetadata("returnNull2.kt")
            public void testReturnNull2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnNull2.kt");
            }

            @TestMetadata("returnNullable.kt")
            public void testReturnNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnNullable.kt");
            }

            @TestMetadata("returnSuperType.kt")
            public void testReturnSuperType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnSuperType.kt");
            }

            @TestMetadata("unrelatedLabeledReturn.kt")
            public void testUnrelatedLabeledReturn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/unrelatedLabeledReturn.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("anonymousFunctionReturnType.kt")
            public void testAnonymousFunctionReturnType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/anonymousFunctionReturnType.kt");
            }

            @TestMetadata("assignmentTypeMismatch.kt")
            public void testAssignmentTypeMismatch() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/assignmentTypeMismatch.kt");
            }

            @TestMetadata("changeFunctionReturnTypeToFunctionType.kt")
            public void testChangeFunctionReturnTypeToFunctionType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/changeFunctionReturnTypeToFunctionType.kt");
            }

            @TestMetadata("changeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral.kt")
            public void testChangeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/changeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral.kt");
            }

            @TestMetadata("dontChangeFunctionReturnTypeToErrorType.kt")
            public void testDontChangeFunctionReturnTypeToErrorType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/dontChangeFunctionReturnTypeToErrorType.kt");
            }

            @TestMetadata("inIf.kt")
            public void testInIf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/inIf.kt");
            }

            @TestMetadata("inWhen.kt")
            public void testInWhen() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/inWhen.kt");
            }

            @TestMetadata("literalPropertyWithGetter.kt")
            public void testLiteralPropertyWithGetter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/literalPropertyWithGetter.kt");
            }

            @TestMetadata("multiFakeOverride.kt")
            public void testMultiFakeOverride() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiFakeOverride.kt");
            }

            @TestMetadata("multiFakeOverrideForOperatorConvention.kt")
            public void testMultiFakeOverrideForOperatorConvention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiFakeOverrideForOperatorConvention.kt");
            }

            @TestMetadata("nestedWhenExpression.kt")
            public void testNestedWhenExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/nestedWhenExpression.kt");
            }

            @TestMetadata("nonLocalReturnRuntime.kt")
            public void testNonLocalReturnRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/nonLocalReturnRuntime.kt");
            }

            @TestMetadata("nonLocalReturnWithLabelRuntime.kt")
            public void testNonLocalReturnWithLabelRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/nonLocalReturnWithLabelRuntime.kt");
            }

            @TestMetadata("notApplicableToConstructor.kt")
            public void testNotApplicableToConstructor() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/notApplicableToConstructor.kt");
            }

            @TestMetadata("propertyGetterInitializerTypeMismatch.kt")
            public void testPropertyGetterInitializerTypeMismatch() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterInitializerTypeMismatch.kt");
            }

            @TestMetadata("propertyGetterWithIf.kt")
            public void testPropertyGetterWithIf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterWithIf.kt");
            }

            @TestMetadata("propertyGetterWithIf2.kt")
            public void testPropertyGetterWithIf2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterWithIf2.kt");
            }

            @TestMetadata("propertyGetterWithIf3.kt")
            public void testPropertyGetterWithIf3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterWithIf3.kt");
            }

            @TestMetadata("propertyInitializerWithIf.kt")
            public void testPropertyInitializerWithIf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyInitializerWithIf.kt");
            }

            @TestMetadata("propertyInitializerWithWhen.kt")
            public void testPropertyInitializerWithWhen() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyInitializerWithWhen.kt");
            }

            @TestMetadata("returnedExpressionTypeMismatchFunctionParameterType.kt")
            public void testReturnedExpressionTypeMismatchFunctionParameterType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/returnedExpressionTypeMismatchFunctionParameterType.kt");
            }

            @TestMetadata("twoDimensionalArray.kt")
            public void testTwoDimensionalArray() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalArray.kt");
            }

            @TestMetadata("twoDimensionalArray2.kt")
            public void testTwoDimensionalArray2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalArray2.kt");
            }

            @TestMetadata("twoDimensionalArray3.kt")
            public void testTwoDimensionalArray3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalArray3.kt");
            }

            @TestMetadata("twoDimensionalList.kt")
            public void testTwoDimensionalList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalList.kt");
            }

            @TestMetadata("twoDimensionalList2.kt")
            public void testTwoDimensionalList2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalList2.kt");
            }

            @TestMetadata("typeMismatchInIfStatementReturnedByFunction.kt")
            public void testTypeMismatchInIfStatementReturnedByFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInIfStatementReturnedByFunction.kt");
            }

            @TestMetadata("typeMismatchInIfStatementReturnedByLiteral.kt")
            public void testTypeMismatchInIfStatementReturnedByLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInIfStatementReturnedByLiteral.kt");
            }

            @TestMetadata("typeMismatchInInitializer.kt")
            public void testTypeMismatchInInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInInitializer.kt");
            }

            @TestMetadata("typeMismatchInReturnStatement.kt")
            public void testTypeMismatchInReturnStatement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInReturnStatement.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive")
    public static class WrongPrimitive extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("doubleToIntDecimalPlaces.kt")
        public void testDoubleToIntDecimalPlaces() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/doubleToIntDecimalPlaces.kt");
        }

        @TestMetadata("doubleToLongNotInRange.kt")
        public void testDoubleToLongNotInRange() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/doubleToLongNotInRange.kt");
        }

        @TestMetadata("doubleToShortNotInRange.kt")
        public void testDoubleToShortNotInRange() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/doubleToShortNotInRange.kt");
        }

        @TestMetadata("floatToDoubleWithDecimal.kt")
        public void testFloatToDoubleWithDecimal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/floatToDoubleWithDecimal.kt");
        }

        @TestMetadata("floatToInt.kt")
        public void testFloatToInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/floatToInt.kt");
        }

        @TestMetadata("floatToInt2.kt")
        public void testFloatToInt2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/floatToInt2.kt");
        }

        @TestMetadata("floatToLong.kt")
        public void testFloatToLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/floatToLong.kt");
        }

        @TestMetadata("hexToFloat.kt")
        public void testHexToFloat() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/hexToFloat.kt");
        }

        @TestMetadata("intToFloat.kt")
        public void testIntToFloat() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/intToFloat.kt");
        }

        @TestMetadata("intToUnsigned.kt")
        public void testIntToUnsigned() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/intToUnsigned.kt");
        }

        @TestMetadata("longToDouble.kt")
        public void testLongToDouble() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/longToDouble.kt");
        }

        @TestMetadata("longToInt.kt")
        public void testLongToInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/longToInt.kt");
        }

        @TestMetadata("longToIntBinary.kt")
        public void testLongToIntBinary() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/longToIntBinary.kt");
        }

        @TestMetadata("unsignedToInt.kt")
        public void testUnsignedToInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/unsignedToInt.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch")
    public static class TypeMismatch extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("accessibleLocalClassInReturn.kt")
        public void testAccessibleLocalClassInReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/accessibleLocalClassInReturn.kt");
        }

        @TestMetadata("addArrayOfType.kt")
        public void testAddArrayOfType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/addArrayOfType.kt");
        }

        @TestMetadata("addArrayOfTypeForNamedParameter.kt")
        public void testAddArrayOfTypeForNamedParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/addArrayOfTypeForNamedParameter.kt");
        }

        @TestMetadata("addIntArrayOf.kt")
        public void testAddIntArrayOf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/addIntArrayOf.kt");
        }

        @TestMetadata("anonymousObjectInCall.kt")
        public void testAnonymousObjectInCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anonymousObjectInCall.kt");
        }

        @TestMetadata("anonymousObjectInInfixCall.kt")
        public void testAnonymousObjectInInfixCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anonymousObjectInInfixCall.kt");
        }

        @TestMetadata("anonymousObjectInInitializer.kt")
        public void testAnonymousObjectInInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anonymousObjectInInitializer.kt");
        }

        @TestMetadata("anonymousObjectInReturn.kt")
        public void testAnonymousObjectInReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anonymousObjectInReturn.kt");
        }

        @TestMetadata("anyInReturn.kt")
        public void testAnyInReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anyInReturn.kt");
        }

        @TestMetadata("cannotConvertStringToCharLiteral.kt")
        public void testCannotConvertStringToCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/cannotConvertStringToCharLiteral.kt");
        }

        @TestMetadata("changeFunctionLiteralParameterTypeToFunctionType.kt")
        public void testChangeFunctionLiteralParameterTypeToFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeFunctionLiteralParameterTypeToFunctionType.kt");
        }

        @TestMetadata("changeFunctionLiteralParameterTypeToFunctionTypeLongNameRuntime.kt")
        public void testChangeFunctionLiteralParameterTypeToFunctionTypeLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeFunctionLiteralParameterTypeToFunctionTypeLongNameRuntime.kt");
        }

        @TestMetadata("changeFunctionReturnTypeToMatchExpectedTypeOfCall.kt")
        public void testChangeFunctionReturnTypeToMatchExpectedTypeOfCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeFunctionReturnTypeToMatchExpectedTypeOfCall.kt");
        }

        @TestMetadata("changeFunctionReturnTypeToMatchExpectedTypeOfCallLongNameRuntime.kt")
        public void testChangeFunctionReturnTypeToMatchExpectedTypeOfCallLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeFunctionReturnTypeToMatchExpectedTypeOfCallLongNameRuntime.kt");
        }

        @TestMetadata("changeReturnTypeForTypeInference.kt")
        public void testChangeReturnTypeForTypeInference() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeForTypeInference.kt");
        }

        @TestMetadata("changeReturnTypeForTypeMismatch.kt")
        public void testChangeReturnTypeForTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeForTypeMismatch.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForAnonymousObject.kt")
        public void testChangeReturnTypeNoFqNameForAnonymousObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForAnonymousObject.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForCompanionObject.kt")
        public void testChangeReturnTypeNoFqNameForCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForCompanionObject.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForLocalClass.kt")
        public void testChangeReturnTypeNoFqNameForLocalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForLocalClass.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForNestedClass.kt")
        public void testChangeReturnTypeNoFqNameForNestedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForNestedClass.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForTopLevelClass.kt")
        public void testChangeReturnTypeNoFqNameForTopLevelClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForTopLevelClass.kt");
        }

        @TestMetadata("changeReturnTypeToSpecificNullable.kt")
        public void testChangeReturnTypeToSpecificNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeToSpecificNullable.kt");
        }

        @TestMetadata("changeReturnTypeWhenFunctionNameIsMissing.kt")
        public void testChangeReturnTypeWhenFunctionNameIsMissing() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeWhenFunctionNameIsMissing.kt");
        }

        @TestMetadata("changeReturnTypeWhenValueParameterListIsAbsent.kt")
        public void testChangeReturnTypeWhenValueParameterListIsAbsent() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeWhenValueParameterListIsAbsent.kt");
        }

        @TestMetadata("compareToTypeMismatch.kt")
        public void testCompareToTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/compareToTypeMismatch.kt");
        }

        @TestMetadata("constantTypeMismatch.kt")
        public void testConstantTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/constantTypeMismatch.kt");
        }

        @TestMetadata("convertAssignedStringToCharLiteral.kt")
        public void testConvertAssignedStringToCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertAssignedStringToCharLiteral.kt");
        }

        @TestMetadata("convertReturnStringToCharLiteral.kt")
        public void testConvertReturnStringToCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertReturnStringToCharLiteral.kt");
        }

        @TestMetadata("convertStringInitializerToCharLiteral.kt")
        public void testConvertStringInitializerToCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertStringInitializerToCharLiteral.kt");
        }

        @TestMetadata("dontChangeOverriddenPropertyTypeToErrorType.kt")
        public void testDontChangeOverriddenPropertyTypeToErrorType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/dontChangeOverriddenPropertyTypeToErrorType.kt");
        }

        @TestMetadata("expectedParameterTypeMismatch.kt")
        public void testExpectedParameterTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/expectedParameterTypeMismatch.kt");
        }

        @TestMetadata("expectedParameterTypeMismatchLongNameRuntime.kt")
        public void testExpectedParameterTypeMismatchLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/expectedParameterTypeMismatchLongNameRuntime.kt");
        }

        @TestMetadata("functionExtensionType.kt")
        public void testFunctionExtensionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionExtensionType.kt");
        }

        @TestMetadata("functionNestedType.kt")
        public void testFunctionNestedType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionNestedType.kt");
        }

        @TestMetadata("functionNestedType2.kt")
        public void testFunctionNestedType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionNestedType2.kt");
        }

        @TestMetadata("functionReflectType.kt")
        public void testFunctionReflectType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionReflectType.kt");
        }

        @TestMetadata("functionReflectTypeFir.kt")
        public void testFunctionReflectTypeFir() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionReflectTypeFir.kt");
        }

        @TestMetadata("functionType.kt")
        public void testFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionType.kt");
        }

        @TestMetadata("hasNextFunctionReturnTypeMismatch.kt")
        public void testHasNextFunctionReturnTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/hasNextFunctionReturnTypeMismatch.kt");
        }

        @TestMetadata("intToShortTypeMismatch.kt")
        public void testIntToShortTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/intToShortTypeMismatch.kt");
        }

        @TestMetadata("kt17404.kt")
        public void testKt17404() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/kt17404.kt");
        }

        @TestMetadata("kt25928.kt")
        public void testKt25928() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/kt25928.kt");
        }

        @TestMetadata("letClassImplementAdditionalInterface.kt")
        public void testLetClassImplementAdditionalInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letClassImplementAdditionalInterface.kt");
        }

        @TestMetadata("letClassImplementGenericInterface.kt")
        public void testLetClassImplementGenericInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letClassImplementGenericInterface.kt");
        }

        @TestMetadata("letClassImplementGenericInterfaceTwice.kt")
        public void testLetClassImplementGenericInterfaceTwice() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letClassImplementGenericInterfaceTwice.kt");
        }

        @TestMetadata("letClassImplementGenericStarInterface.kt")
        public void testLetClassImplementGenericStarInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letClassImplementGenericStarInterface.kt");
        }

        @TestMetadata("letClassImplementIndirectlyInheritedInterface.kt")
        public void testLetClassImplementIndirectlyInheritedInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letClassImplementIndirectlyInheritedInterface.kt");
        }

        @TestMetadata("letClassImplementInterface.kt")
        public void testLetClassImplementInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letClassImplementInterface.kt");
        }

        @TestMetadata("letClassImplementInterfaceNullable.kt")
        public void testLetClassImplementInterfaceNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letClassImplementInterfaceNullable.kt");
        }

        @TestMetadata("letInterfaceExtendInterface.kt")
        public void testLetInterfaceExtendInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letInterfaceExtendInterface.kt");
        }

        @TestMetadata("letObjectImplementAdditionalInterface.kt")
        public void testLetObjectImplementAdditionalInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letObjectImplementAdditionalInterface.kt");
        }

        @TestMetadata("letObjectLiteralImplementInterface.kt")
        public void testLetObjectLiteralImplementInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letObjectLiteralImplementInterface.kt");
        }

        @TestMetadata("letStringImplementInterface.kt")
        public void testLetStringImplementInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letStringImplementInterface.kt");
        }

        @TestMetadata("localClassInReturn1.kt")
        public void testLocalClassInReturn1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/localClassInReturn1.kt");
        }

        @TestMetadata("localClassInReturn2.kt")
        public void testLocalClassInReturn2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/localClassInReturn2.kt");
        }

        @TestMetadata("longToDoubleTypeMismatch.kt")
        public void testLongToDoubleTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/longToDoubleTypeMismatch.kt");
        }

        @TestMetadata("longToIntTypeMismatch.kt")
        public void testLongToIntTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/longToIntTypeMismatch.kt");
        }

        @TestMetadata("makeReturnTypeNullable.kt")
        public void testMakeReturnTypeNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/makeReturnTypeNullable.kt");
        }

        @TestMetadata("noReturnInFunctionWithBlockBody.kt")
        public void testNoReturnInFunctionWithBlockBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/noReturnInFunctionWithBlockBody.kt");
        }

        @TestMetadata("nullArgumentForNonNullParameter.kt")
        public void testNullArgumentForNonNullParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/nullArgumentForNonNullParameter.kt");
        }

        @TestMetadata("paramTypeLambdaMatch.kt")
        public void testParamTypeLambdaMatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/paramTypeLambdaMatch.kt");
        }

        @TestMetadata("paramTypeLambdaMatchInt.kt")
        public void testParamTypeLambdaMatchInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/paramTypeLambdaMatchInt.kt");
        }

        @TestMetadata("paramTypeLambdaMatchNullable.kt")
        public void testParamTypeLambdaMatchNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/paramTypeLambdaMatchNullable.kt");
        }

        @TestMetadata("paramTypeLambdaMatchSubclass.kt")
        public void testParamTypeLambdaMatchSubclass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/paramTypeLambdaMatchSubclass.kt");
        }

        @TestMetadata("paramTypeLambdaMatchSuspend.kt")
        public void testParamTypeLambdaMatchSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/paramTypeLambdaMatchSuspend.kt");
        }

        @TestMetadata("paramTypeLambdaMismatch.kt")
        public void testParamTypeLambdaMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/paramTypeLambdaMismatch.kt");
        }

        @TestMetadata("paramTypeLambdaMismatchNull.kt")
        public void testParamTypeLambdaMismatchNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/paramTypeLambdaMismatchNull.kt");
        }

        @TestMetadata("parameterDefaultValue.kt")
        public void testParameterDefaultValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterDefaultValue.kt");
        }

        @TestMetadata("propertyTypeMismatch.kt")
        public void testPropertyTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/propertyTypeMismatch.kt");
        }

        @TestMetadata("propertyTypeMismatchLongNameRuntime.kt")
        public void testPropertyTypeMismatchLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/propertyTypeMismatchLongNameRuntime.kt");
        }

        @TestMetadata("resolvableTypeParams.kt")
        public void testResolvableTypeParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/resolvableTypeParams.kt");
        }

        @TestMetadata("returnTypeMismatch.kt")
        public void testReturnTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/returnTypeMismatch.kt");
        }

        @TestMetadata("shortToByteTypeMismatch.kt")
        public void testShortToByteTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/shortToByteTypeMismatch.kt");
        }

        @TestMetadata("tooManyArgumentsException.kt")
        public void testTooManyArgumentsException() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/tooManyArgumentsException.kt");
        }

        @TestMetadata("unresolvableTypeParams.kt")
        public void testUnresolvableTypeParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/unresolvableTypeParams.kt");
        }

        @TestMetadata("variableInitializedWithNull.kt")
        public void testVariableInitializedWithNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNull.kt");
        }

        @TestMetadata("variableInitializedWithNull2.kt")
        public void testVariableInitializedWithNull2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNull2.kt");
        }

        @TestMetadata("variableInitializedWithNull3.kt")
        public void testVariableInitializedWithNull3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNull3.kt");
        }

        @TestMetadata("variableInitializedWithNull4.kt")
        public void testVariableInitializedWithNull4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNull4.kt");
        }

        @TestMetadata("variableInitializedWithNullProperty.kt")
        public void testVariableInitializedWithNullProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNullProperty.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/when.kt");
        }

        @TestMetadata("when2.kt")
        public void testWhen2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/when2.kt");
        }

        @TestMetadata("when3.kt")
        public void testWhen3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/when3.kt");
        }

        @TestMetadata("wrapWithArrayLiteral.kt")
        public void testWrapWithArrayLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithArrayLiteral.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/toString")
    public static class ToString extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("callArgument.kt")
        public void testCallArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/callArgument.kt");
        }

        @TestMetadata("notNullableExpectedNullable.kt")
        public void testNotNullableExpectedNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/notNullableExpectedNullable.kt");
        }

        @TestMetadata("nullableExpectedNotNullable.kt")
        public void testNullableExpectedNotNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/nullableExpectedNotNullable.kt");
        }

        @TestMetadata("nullableExpectedNullable.kt")
        public void testNullableExpectedNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/nullableExpectedNullable.kt");
        }

        @TestMetadata("propertyInitializer.kt")
        public void testPropertyInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/propertyInitializer.kt");
        }

        @TestMetadata("returnStatement.kt")
        public void testReturnStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/returnStatement.kt");
        }

        @TestMetadata("variableAssignment.kt")
        public void testVariableAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/variableAssignment.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/specifySuperType")
    public static class SpecifySuperType extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("fullyQualifiedSuperType.kt")
        public void testFullyQualifiedSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/fullyQualifiedSuperType.kt");
        }

        @TestMetadata("fullyQualifiedSuperTypeHasAnnotations.kt")
        public void testFullyQualifiedSuperTypeHasAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/fullyQualifiedSuperTypeHasAnnotations.kt");
        }

        @TestMetadata("fullyQualifiedSuperTypeHasTypeArguments.kt")
        public void testFullyQualifiedSuperTypeHasTypeArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/fullyQualifiedSuperTypeHasTypeArguments.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/function.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/property.kt");
        }

        @TestMetadata("superExpressionHasLabel.kt")
        public void testSuperExpressionHasLabel() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/superExpressionHasLabel.kt");
        }

        @TestMetadata("superTypeHasAnnotations.kt")
        public void testSuperTypeHasAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/superTypeHasAnnotations.kt");
        }

        @TestMetadata("superTypeHasTypeArguments.kt")
        public void testSuperTypeHasTypeArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/superTypeHasTypeArguments.kt");
        }

        @TestMetadata("superTypeIsExtendedByOtherSuperType.kt")
        public void testSuperTypeIsExtendedByOtherSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/superTypeIsExtendedByOtherSuperType.kt");
        }

        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/typeMismatch.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/convertToBlockBody")
    public static class ConvertToBlockBody extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertToBlockBody/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/supertypeInitialization")
    public static class SupertypeInitialization extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addImport.kt")
        public void testAddImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addImport.kt");
        }

        @TestMetadata("addParameters.kt")
        public void testAddParameters() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParameters.kt");
        }

        @TestMetadata("addParenthesis.kt")
        public void testAddParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesis.kt");
        }

        @TestMetadata("addParenthesisDefaultParameters.kt")
        public void testAddParenthesisDefaultParameters() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisDefaultParameters.kt");
        }

        @TestMetadata("addParenthesisEmptyConstructor.kt")
        public void testAddParenthesisEmptyConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisEmptyConstructor.kt");
        }

        @TestMetadata("addParenthesisExpectClass.kt")
        public void testAddParenthesisExpectClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisExpectClass.kt");
        }

        @TestMetadata("addParenthesisForInvalidSealedClass.kt")
        public void testAddParenthesisForInvalidSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForInvalidSealedClass.kt");
        }

        @TestMetadata("addParenthesisForLocalClass.kt")
        public void testAddParenthesisForLocalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForLocalClass.kt");
        }

        @TestMetadata("addParenthesisForObjectExpression.kt")
        public void testAddParenthesisForObjectExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForObjectExpression.kt");
        }

        @TestMetadata("addParenthesisForSealedClass.kt")
        public void testAddParenthesisForSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForSealedClass.kt");
        }

        @TestMetadata("addParenthesisForSealedClass2.kt")
        public void testAddParenthesisForSealedClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForSealedClass2.kt");
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/annotation.kt");
        }

        @TestMetadata("baseConstructorError.kt")
        public void testBaseConstructorError() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/baseConstructorError.kt");
        }

        @TestMetadata("createConstructor.kt")
        public void testCreateConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/createConstructor.kt");
        }

        @TestMetadata("data.kt")
        public void testData() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/data.kt");
        }

        @TestMetadata("displayLongSignatures1.kt")
        public void testDisplayLongSignatures1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/displayLongSignatures1.kt");
        }

        @TestMetadata("displayLongSignatures2.kt")
        public void testDisplayLongSignatures2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/displayLongSignatures2.kt");
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/enum.kt");
        }

        @TestMetadata("genericClass.kt")
        public void testGenericClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/genericClass.kt");
        }

        @TestMetadata("incompleteConstructor.kt")
        public void testIncompleteConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/incompleteConstructor.kt");
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/inline.kt");
        }

        @TestMetadata("keywordName.kt")
        public void testKeywordName() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/keywordName.kt");
        }

        @TestMetadata("multipleConstructors.kt")
        public void testMultipleConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/multipleConstructors.kt");
        }

        @TestMetadata("noAccessibleConstructors.kt")
        public void testNoAccessibleConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/noAccessibleConstructors.kt");
        }

        @TestMetadata("noParameters.kt")
        public void testNoParameters() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/noParameters.kt");
        }

        @TestMetadata("primaryConstructorInaccessible.kt")
        public void testPrimaryConstructorInaccessible() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/primaryConstructorInaccessible.kt");
        }

        @TestMetadata("someParametersAlreadyExist.kt")
        public void testSomeParametersAlreadyExist() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/someParametersAlreadyExist.kt");
        }

        @TestMetadata("value.kt")
        public void testValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/value.kt");
        }

        @TestMetadata("vararg1.kt")
        public void testVararg1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/vararg1.kt");
        }

        @TestMetadata("vararg2.kt")
        public void testVararg2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/vararg2.kt");
        }

        @TestMetadata("vararg3.kt")
        public void testVararg3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/vararg3.kt");
        }

        @TestMetadata("vararg4.kt")
        public void testVararg4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/vararg4.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/dataClassPrivateConstructor")
    public abstract static class DataClassPrivateConstructor extends AbstractHighLevelQuickFixTest {

    }











    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addCrossinline")
    public static class AddCrossinline extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addCrossinline/basic.kt");
        }

        @TestMetadata("suspend.kt")
        public void testSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addCrossinline/suspend.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addDataModifier")
    public static class AddDataModifier extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstract.kt")
        public void testAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/abstract.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/inner.kt");
        }

        @TestMetadata("invisibleParameter.kt")
        public void testInvisibleParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/invisibleParameter.kt");
        }

        @TestMetadata("invisibleParameter2.kt")
        public void testInvisibleParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/invisibleParameter2.kt");
        }

        @TestMetadata("noParameter.kt")
        public void testNoParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/noParameter.kt");
        }

        @TestMetadata("notVarVal.kt")
        public void testNotVarVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/notVarVal.kt");
        }

        @TestMetadata("open.kt")
        public void testOpen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/open.kt");
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/sealed.kt");
        }

        @TestMetadata("test1.kt")
        public void testTest1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test1.kt");
        }

        @TestMetadata("test2.kt")
        public void testTest2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test2.kt");
        }

        @TestMetadata("test3.kt")
        public void testTest3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test3.kt");
        }

        @TestMetadata("test4.kt")
        public void testTest4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test4.kt");
        }

        @TestMetadata("test5.kt")
        public void testTest5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test5.kt");
        }

        @TestMetadata("test6.kt")
        public void testTest6() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test6.kt");
        }

        @TestMetadata("test7.kt")
        public void testTest7() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test7.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/vararg.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addElseBranchToIf")
    public static class AddElseBranchToIf extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("error.kt")
        public void testError() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/error.kt");
        }

        @TestMetadata("errorWithBlock.kt")
        public void testErrorWithBlock() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/errorWithBlock.kt");
        }

        @TestMetadata("inElvis.kt")
        public void testInElvis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/inElvis.kt");
        }

        @TestMetadata("inElvisBlock.kt")
        public void testInElvisBlock() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/inElvisBlock.kt");
        }

        @TestMetadata("inElvisWithoutThen.kt")
        public void testInElvisWithoutThen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/inElvisWithoutThen.kt");
        }

        @TestMetadata("withoutCloseParenthesisInCondition.kt")
        public void testWithoutCloseParenthesisInCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/withoutCloseParenthesisInCondition.kt");
        }

        @TestMetadata("withoutCondition.kt")
        public void testWithoutCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/withoutCondition.kt");
        }
    }





    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addFunModifier")
    public static class AddFunModifier extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("asFirstArgument.kt")
        public void testAsFirstArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/asFirstArgument.kt");
        }

        @TestMetadata("asLastArgument.kt")
        public void testAsLastArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/asLastArgument.kt");
        }

        @TestMetadata("hasArguments.kt")
        public void testHasArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/hasArguments.kt");
        }

        @TestMetadata("hasNoArguments.kt")
        public void testHasNoArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/hasNoArguments.kt");
        }

        @TestMetadata("multipleLambdaArgumentsAreNotMovedOutsideParentheses.kt")
        public void testMultipleLambdaArgumentsAreNotMovedOutsideParentheses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/multipleLambdaArgumentsAreNotMovedOutsideParentheses.kt");
        }

        @TestMetadata("namedLambdaArgumentIsNotMovedOutsideParentheses.kt")
        public void testNamedLambdaArgumentIsNotMovedOutsideParentheses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/namedLambdaArgumentIsNotMovedOutsideParentheses.kt");
        }

        @TestMetadata("nonSource.kt")
        public void testNonSource() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/nonSource.kt");
        }

        @TestMetadata("notSam.kt")
        public void testNotSam() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/notSam.kt");
        }

        @TestMetadata("notSam2.kt")
        public void testNotSam2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/notSam2.kt");
        }

        @TestMetadata("notSam3.kt")
        public void testNotSam3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/notSam3.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/simple.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addInline")
    public static class AddInline extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInline/basic.kt");
        }

        @TestMetadata("local.kt")
        public void testLocal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInline/local.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addInlineToReifiedFunctionFix")
    public static class AddInlineToReifiedFunctionFix extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInlineToReifiedFunctionFix/basic.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addIsToWhenCondition")
    public static class AddIsToWhenCondition extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addIsToWhenCondition/class.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addJvmInline")
    public static class AddJvmInline extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("genericParameter.kt")
        public void testGenericParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addJvmInline/genericParameter.kt");
        }

        @TestMetadata("valueClass.kt")
        public void testValueClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addJvmInline/valueClass.kt");
        }
    }





    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addNoinline")
    public static class AddNoinline extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addNoinline/basic.kt");
        }

        @TestMetadata("extensionCalls.kt")
        public void testExtensionCalls() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addNoinline/extensionCalls.kt");
        }

        @TestMetadata("suspend.kt")
        public void testSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addNoinline/suspend.kt");
        }

        @TestMetadata("withCrossinline.kt")
        public void testWithCrossinline() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addNoinline/withCrossinline.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addReifiedToTypeParameterOfFunctionFix")
    public static class AddReifiedToTypeParameterOfFunctionFix extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("doubleColonClass.kt")
        public void testDoubleColonClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReifiedToTypeParameterOfFunctionFix/doubleColonClass.kt");
        }

        @TestMetadata("secondTypeParameter.kt")
        public void testSecondTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReifiedToTypeParameterOfFunctionFix/secondTypeParameter.kt");
        }

        @TestMetadata("toTypedArray.kt")
        public void testToTypedArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReifiedToTypeParameterOfFunctionFix/toTypedArray.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addReturnExpression")
    public static class AddReturnExpression extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("emptyBody.kt")
        public void testEmptyBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnExpression/emptyBody.kt");
        }

        @TestMetadata("noRightBrace.kt")
        public void testNoRightBrace() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnExpression/noRightBrace.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnExpression/simple.kt");
        }
    }











    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections")
    public abstract static class AddStarProjections extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections/cast")
        public static class Cast extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("changeFunctionalToStarProjection.kt")
            public void testChangeFunctionalToStarProjection() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/changeFunctionalToStarProjection.kt");
            }

            @TestMetadata("changeToStarProjection.kt")
            public void testChangeToStarProjection() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/changeToStarProjection.kt");
            }

            @TestMetadata("changeToStarProjectionNullable.kt")
            public void testChangeToStarProjectionNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/changeToStarProjectionNullable.kt");
            }

            @TestMetadata("extensionReceiver.kt")
            public void testExtensionReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver.kt");
            }

            @TestMetadata("extensionReceiver2.kt")
            public void testExtensionReceiver2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver2.kt");
            }

            @TestMetadata("extensionReceiver3.kt")
            public void testExtensionReceiver3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver3.kt");
            }

            @TestMetadata("extensionReceiver4.kt")
            public void testExtensionReceiver4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver4.kt");
            }

            @TestMetadata("extensionReceiver5.kt")
            public void testExtensionReceiver5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver5.kt");
            }

            @TestMetadata("genericTypeParameter.kt")
            public void testGenericTypeParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter.kt");
            }

            @TestMetadata("genericTypeParameter2.kt")
            public void testGenericTypeParameter2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter2.kt");
            }

            @TestMetadata("genericTypeParameter3.kt")
            public void testGenericTypeParameter3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter3.kt");
            }

            @TestMetadata("genericTypeParameter4.kt")
            public void testGenericTypeParameter4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter4.kt");
            }

            @TestMetadata("genericTypeParameter5.kt")
            public void testGenericTypeParameter5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter5.kt");
            }

            @TestMetadata("genericTypeParameter6.kt")
            public void testGenericTypeParameter6() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter6.kt");
            }

            @TestMetadata("genericTypeParameter7.kt")
            public void testGenericTypeParameter7() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter7.kt");
            }

            @TestMetadata("uncheckedCastOnTypeParameter.kt")
            public void testUncheckedCastOnTypeParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/uncheckedCastOnTypeParameter.kt");
            }

            @TestMetadata("valueArgument.kt")
            public void testValueArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument.kt");
            }

            @TestMetadata("valueArgument2.kt")
            public void testValueArgument2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument2.kt");
            }

            @TestMetadata("valueArgument3.kt")
            public void testValueArgument3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument3.kt");
            }

            @TestMetadata("valueArgument4.kt")
            public void testValueArgument4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument4.kt");
            }

            @TestMetadata("valueArgument5.kt")
            public void testValueArgument5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument5.kt");
            }

            @TestMetadata("valueArgument6.kt")
            public void testValueArgument6() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument6.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections/checkType")
        public static class CheckType extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/array.kt");
            }

            @TestMetadata("arrayInWhen.kt")
            public void testArrayInWhen() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/arrayInWhen.kt");
            }

            @TestMetadata("changeToStarProjectionMultipleParameters.kt")
            public void testChangeToStarProjectionMultipleParameters() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/changeToStarProjectionMultipleParameters.kt");
            }

            @TestMetadata("changeToStarProjectionNullable.kt")
            public void testChangeToStarProjectionNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/changeToStarProjectionNullable.kt");
            }

            @TestMetadata("changeToStarProjectionSingleParameter.kt")
            public void testChangeToStarProjectionSingleParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/changeToStarProjectionSingleParameter.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections/inner")
        public static class Inner extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inner1.kt")
            public void testInner1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner1.kt");
            }

            @TestMetadata("inner2.kt")
            public void testInner2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner2.kt");
            }

            @TestMetadata("inner3.kt")
            public void testInner3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner3.kt");
            }

            @TestMetadata("inner4.kt")
            public void testInner4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner4.kt");
            }

            @TestMetadata("inner5.kt")
            public void testInner5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner5.kt");
            }

            @TestMetadata("inner6.kt")
            public void testInner6() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner6.kt");
            }

            @TestMetadata("inner7.kt")
            public void testInner7() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner7.kt");
            }

            @TestMetadata("inner8.kt")
            public void testInner8() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner8.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("qualifiedArrayList.kt")
            public void testQualifiedArrayList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/qualifiedArrayList.kt");
            }

            @TestMetadata("qualifiedList.kt")
            public void testQualifiedList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/qualifiedList.kt");
            }

            @TestMetadata("qualifiedMap.kt")
            public void testQualifiedMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/qualifiedMap.kt");
            }

            @TestMetadata("unqualifiedList.kt")
            public void testUnqualifiedList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/unqualifiedList.kt");
            }

            @TestMetadata("unqualifiedMap.kt")
            public void testUnqualifiedMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/unqualifiedMap.kt");
            }

            @TestMetadata("unqualifiedMapOneArg.kt")
            public void testUnqualifiedMapOneArg() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/unqualifiedMapOneArg.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections/when")
        public static class When extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("qualifiedArrayList.kt")
            public void testQualifiedArrayList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/qualifiedArrayList.kt");
            }

            @TestMetadata("qualifiedList.kt")
            public void testQualifiedList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/qualifiedList.kt");
            }

            @TestMetadata("qualifiedMap.kt")
            public void testQualifiedMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/qualifiedMap.kt");
            }

            @TestMetadata("unqualifiedList.kt")
            public void testUnqualifiedList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/unqualifiedList.kt");
            }

            @TestMetadata("unqualifiedMap.kt")
            public void testUnqualifiedMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/unqualifiedMap.kt");
            }

            @TestMetadata("unqualifiedMapOneArg.kt")
            public void testUnqualifiedMapOneArg() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/unqualifiedMapOneArg.kt");
            }
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter")
    public static class AddTypeAnnotationToValueParameter extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationWithArrayLiteralDouble.kt")
        public void testAnnotationWithArrayLiteralDouble() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithArrayLiteralDouble.kt");
        }

        @TestMetadata("annotationWithArrayLiteralInt.kt")
        public void testAnnotationWithArrayLiteralInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithArrayLiteralInt.kt");
        }

        @TestMetadata("annotationWithArrayLiteralString.kt")
        public void testAnnotationWithArrayLiteralString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithArrayLiteralString.kt");
        }

        @TestMetadata("annotationWithVarargArrayLiteralDouble.kt")
        public void testAnnotationWithVarargArrayLiteralDouble() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargArrayLiteralDouble.kt");
        }

        @TestMetadata("annotationWithVarargArrayLiteralInt.kt")
        public void testAnnotationWithVarargArrayLiteralInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargArrayLiteralInt.kt");
        }

        @TestMetadata("annotationWithVarargArrayLiteralString.kt")
        public void testAnnotationWithVarargArrayLiteralString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargArrayLiteralString.kt");
        }

        @TestMetadata("annotationWithVarargDoubleArray.kt")
        public void testAnnotationWithVarargDoubleArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargDoubleArray.kt");
        }

        @TestMetadata("annotationWithVarargIntArray.kt")
        public void testAnnotationWithVarargIntArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargIntArray.kt");
        }

        @TestMetadata("noDefaultValue.kt")
        public void testNoDefaultValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/noDefaultValue.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/simple.kt");
        }
    }

















    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/changeObjectToClass")
    public static class ChangeObjectToClass extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("primaryConstructor.kt")
        public void testPrimaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeObjectToClass/primaryConstructor.kt");
        }

        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeObjectToClass/secondaryConstructor.kt");
        }
    }





    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/changeToLabeledReturn")
    public static class ChangeToLabeledReturn extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constantExpectedTypeMismatch.kt")
        public void testConstantExpectedTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/constantExpectedTypeMismatch.kt");
        }

        @TestMetadata("multipleInner.kt")
        public void testMultipleInner() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/multipleInner.kt");
        }

        @TestMetadata("multipleOuter.kt")
        public void testMultipleOuter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/multipleOuter.kt");
        }

        @TestMetadata("noCandidates.kt")
        public void testNoCandidates() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/noCandidates.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/normal.kt");
        }

        @TestMetadata("nullForNonnullType.kt")
        public void testNullForNonnullType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/nullForNonnullType.kt");
        }

        @TestMetadata("nullForNonnullType2.kt")
        public void testNullForNonnullType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/nullForNonnullType2.kt");
        }

        @TestMetadata("returnNotAllowedInClass.kt")
        public void testReturnNotAllowedInClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/returnNotAllowedInClass.kt");
        }

        @TestMetadata("returnNotAllowedInObject.kt")
        public void testReturnNotAllowedInObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/returnNotAllowedInObject.kt");
        }

        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/typeMismatch.kt");
        }

        @TestMetadata("typeMismatch2.kt")
        public void testTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/typeMismatch2.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator")
    public static class ChangeToUseSpreadOperator extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("differentTypeParameter.kt")
        public void testDifferentTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/differentTypeParameter.kt");
        }

        @TestMetadata("differentTypeParameterGeneric.kt")
        public void testDifferentTypeParameterGeneric() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/differentTypeParameterGeneric.kt");
        }

        @TestMetadata("mapOf.kt")
        public void testMapOf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/mapOf.kt");
        }

        @TestMetadata("multipleParams.kt")
        public void testMultipleParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/multipleParams.kt");
        }

        @TestMetadata("nestedGeneric.kt")
        public void testNestedGeneric() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/nestedGeneric.kt");
        }

        @TestMetadata("nonArray.kt")
        public void testNonArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/nonArray.kt");
        }

        @TestMetadata("nonVarArg.kt")
        public void testNonVarArg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/nonVarArg.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/normal.kt");
        }

        @TestMetadata("stdlibMapOf.kt")
        public void testStdlibMapOf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/stdlibMapOf.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/vararg.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf")
    public static class ConvertCollectionLiteralToIntArrayOf extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("companionObject.kt")
        public void testCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf/companionObject.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf/constructor.kt");
        }

        @TestMetadata("NestedClass.kt")
        public void testNestedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf/NestedClass.kt");
        }

        @TestMetadata("NestedObject.kt")
        public void testNestedObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf/NestedObject.kt");
        }
    }





    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate")
    public static class ConvertLateinitPropertyToNotNullDelegate extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/basic.kt");
        }

        @TestMetadata("basic2.kt")
        public void testBasic2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/basic2.kt");
        }

        @TestMetadata("hasInitializer.kt")
        public void testHasInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/hasInitializer.kt");
        }

        @TestMetadata("noType.kt")
        public void testNoType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/noType.kt");
        }

        @TestMetadata("notPrimitive.kt")
        public void testNotPrimitive() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/notPrimitive.kt");
        }

        @TestMetadata("nullablePrimitive.kt")
        public void testNullablePrimitive() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/nullablePrimitive.kt");
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/val.kt");
        }
    }



















    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage")
    public abstract static class DeprecatedSymbolUsage extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects")
        public static class ArgumentSideEffects extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("complexExpressionNotUsed1.kt")
            public void testComplexExpressionNotUsed1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed1.kt");
            }

            @TestMetadata("complexExpressionNotUsed2.kt")
            public void testComplexExpressionNotUsed2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed2.kt");
            }

            @TestMetadata("complexExpressionNotUsed3Runtime.kt")
            public void testComplexExpressionNotUsed3Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed3Runtime.kt");
            }

            @TestMetadata("complexExpressionNotUsed4Runtime.kt")
            public void testComplexExpressionNotUsed4Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed4Runtime.kt");
            }

            @TestMetadata("complexExpressionNotUsed5Runtime.kt")
            public void testComplexExpressionNotUsed5Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed5Runtime.kt");
            }

            @TestMetadata("complexExpressionNotUsedSafeCall.kt")
            public void testComplexExpressionNotUsedSafeCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsedSafeCall.kt");
            }

            @TestMetadata("complexExpressionNotUsedSafeCall2Runtime.kt")
            public void testComplexExpressionNotUsedSafeCall2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsedSafeCall2Runtime.kt");
            }

            @TestMetadata("complexExpressionNotUsedShortenRefsRuntime.kt")
            public void testComplexExpressionNotUsedShortenRefsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsedShortenRefsRuntime.kt");
            }

            @TestMetadata("complexExpressionUsedTwice.kt")
            public void testComplexExpressionUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice.kt");
            }

            @TestMetadata("complexExpressionUsedTwice2.kt")
            public void testComplexExpressionUsedTwice2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice2.kt");
            }

            @TestMetadata("complexExpressionUsedTwice3Runtime.kt")
            public void testComplexExpressionUsedTwice3Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice3Runtime.kt");
            }

            @TestMetadata("complexExpressionUsedTwice4.kt")
            public void testComplexExpressionUsedTwice4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice4.kt");
            }

            @TestMetadata("complexExpressionUsedTwice5Runtime.kt")
            public void testComplexExpressionUsedTwice5Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice5Runtime.kt");
            }

            @TestMetadata("complexExpressionUsedTwice6Runtime.kt")
            public void testComplexExpressionUsedTwice6Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice6Runtime.kt");
            }

            @TestMetadata("simpleExpressionNotUsed.kt")
            public void testSimpleExpressionNotUsed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/simpleExpressionNotUsed.kt");
            }

            @TestMetadata("simpleExpressionUsedTwice.kt")
            public void testSimpleExpressionUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/simpleExpressionUsedTwice.kt");
            }

            @TestMetadata("stringLiteralUsedTwice.kt")
            public void testStringLiteralUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/stringLiteralUsedTwice.kt");
            }

            @TestMetadata("stringTemplateUsedTwice.kt")
            public void testStringTemplateUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/stringTemplateUsedTwice.kt");
            }

            @TestMetadata("stringTemplateUsedTwice2.kt")
            public void testStringTemplateUsedTwice2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/stringTemplateUsedTwice2.kt");
            }

            @TestMetadata("withLiteralAndReference.kt")
            public void testWithLiteralAndReference() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/withLiteralAndReference.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments")
        public static class FunctionLiteralArguments extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("cannotKeepOutside.kt")
            public void testCannotKeepOutside() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/cannotKeepOutside.kt");
            }

            @TestMetadata("keepInside.kt")
            public void testKeepInside() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/keepInside.kt");
            }

            @TestMetadata("keepOutside.kt")
            public void testKeepOutside() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/keepOutside.kt");
            }

            @TestMetadata("keepOutsideWithGeneric.kt")
            public void testKeepOutsideWithGeneric() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/keepOutsideWithGeneric.kt");
            }

            @TestMetadata("keepOutsideWithNamedArgument.kt")
            public void testKeepOutsideWithNamedArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/keepOutsideWithNamedArgument.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments")
        public static class KeepComments extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addArguments.kt")
            public void testAddArguments() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/addArguments.kt");
            }

            @TestMetadata("commentBeforeArgument.kt")
            public void testCommentBeforeArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/commentBeforeArgument.kt");
            }

            @TestMetadata("dropArgument.kt")
            public void testDropArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/dropArgument.kt");
            }

            @TestMetadata("multipleArguments.kt")
            public void testMultipleArguments() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/multipleArguments.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/simple.kt");
            }

            @TestMetadata("usedTwice.kt")
            public void testUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/usedTwice.kt");
            }

            @TestMetadata("variableForArgument.kt")
            public void testVariableForArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/variableForArgument.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepLineBreaks")
        public static class KeepLineBreaks extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addArgument.kt")
            public void testAddArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepLineBreaks/addArgument.kt");
            }

            @TestMetadata("lineBreakAfterReceiverRuntime.kt")
            public void testLineBreakAfterReceiverRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepLineBreaks/lineBreakAfterReceiverRuntime.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepLineBreaks/simple.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls")
        public static class OperatorCalls extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("get.kt")
            public void testGet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/get.kt");
            }

            @TestMetadata("in.kt")
            public void testIn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/in.kt");
            }

            @TestMetadata("invoke.kt")
            public void testInvoke() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/invoke.kt");
            }

            @TestMetadata("invoke2.kt")
            public void testInvoke2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/invoke2.kt");
            }

            @TestMetadata("invoke3.kt")
            public void testInvoke3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/invoke3.kt");
            }

            @TestMetadata("invoke4.kt")
            public void testInvoke4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/invoke4.kt");
            }

            @TestMetadata("plusAssign.kt")
            public void testPlusAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/plusAssign.kt");
            }

            @TestMetadata("set.kt")
            public void testSet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/set.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters")
        public static class OptionalParameters extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("dropAll.kt")
            public void testDropAll() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/dropAll.kt");
            }

            @TestMetadata("functionalLiteralArgument.kt")
            public void testFunctionalLiteralArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/functionalLiteralArgument.kt");
            }

            @TestMetadata("namedArgument.kt")
            public void testNamedArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/namedArgument.kt");
            }

            @TestMetadata("optionalParameterAndLambda.kt")
            public void testOptionalParameterAndLambda() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameterAndLambda.kt");
            }

            @TestMetadata("optionalParameterAndLambdaComplex.kt")
            public void testOptionalParameterAndLambdaComplex() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameterAndLambdaComplex.kt");
            }

            @TestMetadata("optionalParameters1.kt")
            public void testOptionalParameters1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters1.kt");
            }

            @TestMetadata("optionalParameters2.kt")
            public void testOptionalParameters2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters2.kt");
            }

            @TestMetadata("optionalParameters3.kt")
            public void testOptionalParameters3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters3.kt");
            }

            @TestMetadata("optionalParameters4.kt")
            public void testOptionalParameters4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters4.kt");
            }

            @TestMetadata("optionalParameters5.kt")
            public void testOptionalParameters5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters5.kt");
            }

            @TestMetadata("optionalParameters7.kt")
            public void testOptionalParameters7() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters7.kt");
            }

            @TestMetadata("optionalParameters9.kt")
            public void testOptionalParameters9() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters9.kt");
            }

            @TestMetadata("overridingMethod.kt")
            public void testOverridingMethod() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/overridingMethod.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties")
        public static class Properties extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("callInAssignmentToProperty.kt")
            public void testCallInAssignmentToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/callInAssignmentToProperty.kt");
            }

            @TestMetadata("callToCustomProperty.kt")
            public void testCallToCustomProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/callToCustomProperty.kt");
            }

            @TestMetadata("callToProperty.kt")
            public void testCallToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/callToProperty.kt");
            }

            @TestMetadata("extensionPropertyToProperty.kt")
            public void testExtensionPropertyToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/extensionPropertyToProperty.kt");
            }

            @TestMetadata("extensionPropertyWriteToProperty.kt")
            public void testExtensionPropertyWriteToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/extensionPropertyWriteToProperty.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall")
        public static class SafeCall extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("changeThisSafeCall.kt")
            public void testChangeThisSafeCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCall.kt");
            }

            @TestMetadata("changeThisSafeCallWithValue1Runtime.kt")
            public void testChangeThisSafeCallWithValue1Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValue1Runtime.kt");
            }

            @TestMetadata("changeThisSafeCallWithValue2Runtime.kt")
            public void testChangeThisSafeCallWithValue2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValue2Runtime.kt");
            }

            @TestMetadata("changeThisSafeCallWithValue3Runtime.kt")
            public void testChangeThisSafeCallWithValue3Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValue3Runtime.kt");
            }

            @TestMetadata("changeThisSafeCallWithValue4Runtime.kt")
            public void testChangeThisSafeCallWithValue4Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValue4Runtime.kt");
            }

            @TestMetadata("changeThisSafeCallWithValueRuntime.kt")
            public void testChangeThisSafeCallWithValueRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValueRuntime.kt");
            }

            @TestMetadata("dropReceiverSafeCall.kt")
            public void testDropReceiverSafeCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/dropReceiverSafeCall.kt");
            }

            @TestMetadata("safeCall.kt")
            public void testSafeCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/safeCall.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments")
        public static class TypeArguments extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("classConstructor.kt")
            public void testClassConstructor() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/classConstructor.kt");
            }

            @TestMetadata("classLiteral.kt")
            public void testClassLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/classLiteral.kt");
            }

            @TestMetadata("classLiteral2.kt")
            public void testClassLiteral2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/classLiteral2.kt");
            }

            @TestMetadata("emptyVarargRuntime.kt")
            public void testEmptyVarargRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/emptyVarargRuntime.kt");
            }

            @TestMetadata("explicitInPatternImplicitInUsage.kt")
            public void testExplicitInPatternImplicitInUsage() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/explicitInPatternImplicitInUsage.kt");
            }

            @TestMetadata("explicitTypeArg.kt")
            public void testExplicitTypeArg() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/explicitTypeArg.kt");
            }

            @TestMetadata("explicitTypeArg2.kt")
            public void testExplicitTypeArg2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/explicitTypeArg2.kt");
            }

            @TestMetadata("functionReference.kt")
            public void testFunctionReference() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference.kt");
            }

            @TestMetadata("functionReference2.kt")
            public void testFunctionReference2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference2.kt");
            }

            @TestMetadata("functionReference3.kt")
            public void testFunctionReference3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference3.kt");
            }

            @TestMetadata("functionReference4.kt")
            public void testFunctionReference4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference4.kt");
            }

            @TestMetadata("functionReference5.kt")
            public void testFunctionReference5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference5.kt");
            }

            @TestMetadata("implicitToExplicit.kt")
            public void testImplicitToExplicit() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/implicitToExplicit.kt");
            }

            @TestMetadata("keepInUserCodeRuntime.kt")
            public void testKeepInUserCodeRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/keepInUserCodeRuntime.kt");
            }

            @TestMetadata("keepOriginalIfQualified.kt")
            public void testKeepOriginalIfQualified() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/keepOriginalIfQualified.kt");
            }

            @TestMetadata("kt36225.kt")
            public void testKt36225() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/kt36225.kt");
            }

            @TestMetadata("ktij-14750.kt")
            public void testKtij_14750() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/ktij-14750.kt");
            }

            @TestMetadata("noImplicitTypeArgImportRuntime.kt")
            public void testNoImplicitTypeArgImportRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/noImplicitTypeArgImportRuntime.kt");
            }

            @TestMetadata("noImplicitTypeArgInClassWithTypeParam.kt")
            public void testNoImplicitTypeArgInClassWithTypeParam() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/noImplicitTypeArgInClassWithTypeParam.kt");
            }

            @TestMetadata("noImplicitTypeArgInFunWithTypeParam.kt")
            public void testNoImplicitTypeArgInFunWithTypeParam() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/noImplicitTypeArgInFunWithTypeParam.kt");
            }

            @TestMetadata("nonEmptyVarargRuntime.kt")
            public void testNonEmptyVarargRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/nonEmptyVarargRuntime.kt");
            }

            @TestMetadata("propertyReference.kt")
            public void testPropertyReference() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/propertyReference.kt");
            }

            @TestMetadata("propertyReference2.kt")
            public void testPropertyReference2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/propertyReference2.kt");
            }

            @TestMetadata("propertyReference3.kt")
            public void testPropertyReference3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/propertyReference3.kt");
            }

            @TestMetadata("typeReference.kt")
            public void testTypeReference() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/typeReference.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addImplicitReceiverNested.kt")
            public void testAddImplicitReceiverNested() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/addImplicitReceiverNested.kt");
            }

            @TestMetadata("callChainBug.kt")
            public void testCallChainBug() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/callChainBug.kt");
            }

            @TestMetadata("callWithError.kt")
            public void testCallWithError() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/callWithError.kt");
            }

            @TestMetadata("changeThis1.kt")
            public void testChangeThis1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/changeThis1.kt");
            }

            @TestMetadata("changeThis2.kt")
            public void testChangeThis2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/changeThis2.kt");
            }

            @TestMetadata("changeThisToOuterThis.kt")
            public void testChangeThisToOuterThis() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/changeThisToOuterThis.kt");
            }

            @TestMetadata("classLiteralAndTypeArgsRuntime.kt")
            public void testClassLiteralAndTypeArgsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classLiteralAndTypeArgsRuntime.kt");
            }

            @TestMetadata("deprecatedSinceKotlinAndReplaceWith.kt")
            public void testDeprecatedSinceKotlinAndReplaceWith() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/deprecatedSinceKotlinAndReplaceWith.kt");
            }

            @TestMetadata("deprecationLevel.kt")
            public void testDeprecationLevel() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/deprecationLevel.kt");
            }

            @TestMetadata("doNotShortenUserReferences.kt")
            public void testDoNotShortenUserReferences() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/doNotShortenUserReferences.kt");
            }

            @TestMetadata("doNotShortenUsersExplicitThis.kt")
            public void testDoNotShortenUsersExplicitThis() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/doNotShortenUsersExplicitThis.kt");
            }

            @TestMetadata("dropReceiver.kt")
            public void testDropReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/dropReceiver.kt");
            }

            @TestMetadata("enum.kt")
            public void testEnum() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/enum.kt");
            }

            @TestMetadata("extensionForGenericClass.kt")
            public void testExtensionForGenericClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/extensionForGenericClass.kt");
            }

            @TestMetadata("extensionFunCallInLambdaWithReceiver.kt")
            public void testExtensionFunCallInLambdaWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/extensionFunCallInLambdaWithReceiver.kt");
            }

            @TestMetadata("extensionReceiverWithVarianceType.kt")
            public void testExtensionReceiverWithVarianceType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/extensionReceiverWithVarianceType.kt");
            }

            @TestMetadata("implicitCompanionObjectThis.kt")
            public void testImplicitCompanionObjectThis() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/implicitCompanionObjectThis.kt");
            }

            @TestMetadata("implicitQualifiedThisRuntime.kt")
            public void testImplicitQualifiedThisRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/implicitQualifiedThisRuntime.kt");
            }

            @TestMetadata("importedObjectFunction.kt")
            public void testImportedObjectFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/importedObjectFunction.kt");
            }

            @TestMetadata("importedObjectFunctionAddReceiver.kt")
            public void testImportedObjectFunctionAddReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/importedObjectFunctionAddReceiver.kt");
            }

            @TestMetadata("importedObjectProperty.kt")
            public void testImportedObjectProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/importedObjectProperty.kt");
            }

            @TestMetadata("incorrectArgs.kt")
            public void testIncorrectArgs() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/incorrectArgs.kt");
            }

            @TestMetadata("incorrectReplacement.kt")
            public void testIncorrectReplacement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/incorrectReplacement.kt");
            }

            @TestMetadata("infixCall.kt")
            public void testInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/infixCall.kt");
            }

            @TestMetadata("infixCallToNonInfixCall.kt")
            public void testInfixCallToNonInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/infixCallToNonInfixCall.kt");
            }

            @TestMetadata("keepArgumentNamed.kt")
            public void testKeepArgumentNamed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepArgumentNamed.kt");
            }

            @TestMetadata("keepInfixCall.kt")
            public void testKeepInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepInfixCall.kt");
            }

            @TestMetadata("kt35015.kt")
            public void testKt35015() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/kt35015.kt");
            }

            @TestMetadata("localFun.kt")
            public void testLocalFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/localFun.kt");
            }

            @TestMetadata("mailformedExpression.kt")
            public void testMailformedExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/mailformedExpression.kt");
            }

            @TestMetadata("memberFunction.kt")
            public void testMemberFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/memberFunction.kt");
            }

            @TestMetadata("memberFunctionImplicitReceiver.kt")
            public void testMemberFunctionImplicitReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/memberFunctionImplicitReceiver.kt");
            }

            @TestMetadata("memberFunctionInGenericClass.kt")
            public void testMemberFunctionInGenericClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/memberFunctionInGenericClass.kt");
            }

            @TestMetadata("methodToProperty.kt")
            public void testMethodToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/methodToProperty.kt");
            }

            @TestMetadata("noReplacement.kt")
            public void testNoReplacement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/noReplacement.kt");
            }

            @TestMetadata("objects.kt")
            public void testObjects() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/objects.kt");
            }

            @TestMetadata("objectsInQualified.kt")
            public void testObjectsInQualified() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/objectsInQualified.kt");
            }

            @TestMetadata("operatorCall.kt")
            public void testOperatorCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCall.kt");
            }

            @TestMetadata("operatorCall2.kt")
            public void testOperatorCall2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCall2.kt");
            }

            @TestMetadata("parameters.kt")
            public void testParameters() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/parameters.kt");
            }

            @TestMetadata("propertyAssignment.kt")
            public void testPropertyAssignment() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyAssignment.kt");
            }

            @TestMetadata("propertyAssignmentDefaultSetter.kt")
            public void testPropertyAssignmentDefaultSetter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyAssignmentDefaultSetter.kt");
            }

            @TestMetadata("propertyAssignmentNoReceiver.kt")
            public void testPropertyAssignmentNoReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyAssignmentNoReceiver.kt");
            }

            @TestMetadata("propertyAssignmentNoSetter.kt")
            public void testPropertyAssignmentNoSetter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyAssignmentNoSetter.kt");
            }

            @TestMetadata("propertyModification.kt")
            public void testPropertyModification() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyModification.kt");
            }

            @TestMetadata("propertyToMethod.kt")
            public void testPropertyToMethod() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyToMethod.kt");
            }

            @TestMetadata("propertyToSyntheticExtension.kt")
            public void testPropertyToSyntheticExtension() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyToSyntheticExtension.kt");
            }

            @TestMetadata("replaceCallWithArgument.kt")
            public void testReplaceCallWithArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/replaceCallWithArgument.kt");
            }

            @TestMetadata("replaceCallWithReceiver.kt")
            public void testReplaceCallWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/replaceCallWithReceiver.kt");
            }

            @TestMetadata("shortenReferences.kt")
            public void testShortenReferences() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/shortenReferences.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/simple.kt");
            }

            @TestMetadata("stringTemplate.kt")
            public void testStringTemplate() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/stringTemplate.kt");
            }

            @TestMetadata("suspendLambda.kt")
            public void testSuspendLambda() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/suspendLambda.kt");
            }

            @TestMetadata("toOuterClassMethod.kt")
            public void testToOuterClassMethod() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/toOuterClassMethod.kt");
            }

            @TestMetadata("twoValuesCombined.kt")
            public void testTwoValuesCombined() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/twoValuesCombined.kt");
            }

            @TestMetadata("usageInDerivedClass.kt")
            public void testUsageInDerivedClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/usageInDerivedClass.kt");
            }

            @TestMetadata("usageInDerivedClassGeneric.kt")
            public void testUsageInDerivedClassGeneric() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/usageInDerivedClassGeneric.kt");
            }

            @TestMetadata("withInnerFunction.kt")
            public void testWithInnerFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/withInnerFunction.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg")
        public static class Vararg extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addedNamedArgumentAfterRuntime.kt")
            public void testAddedNamedArgumentAfterRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/addedNamedArgumentAfterRuntime.kt");
            }

            @TestMetadata("addedPositionalArgumentAfterRuntime.kt")
            public void testAddedPositionalArgumentAfterRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/addedPositionalArgumentAfterRuntime.kt");
            }

            @TestMetadata("addedSpreadArgumentAfterRuntime.kt")
            public void testAddedSpreadArgumentAfterRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/addedSpreadArgumentAfterRuntime.kt");
            }

            @TestMetadata("booleanArrayRuntime.kt")
            public void testBooleanArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/booleanArrayRuntime.kt");
            }

            @TestMetadata("byteArrayRuntime.kt")
            public void testByteArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/byteArrayRuntime.kt");
            }

            @TestMetadata("doNotShortenUserReferences2Runtime.kt")
            public void testDoNotShortenUserReferences2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/doNotShortenUserReferences2Runtime.kt");
            }

            @TestMetadata("doNotShortenUserReferencesRuntime.kt")
            public void testDoNotShortenUserReferencesRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/doNotShortenUserReferencesRuntime.kt");
            }

            @TestMetadata("doNotSimplifyOriginalCallRuntime.kt")
            public void testDoNotSimplifyOriginalCallRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/doNotSimplifyOriginalCallRuntime.kt");
            }

            @TestMetadata("doubleArrayRuntime.kt")
            public void testDoubleArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/doubleArrayRuntime.kt");
            }

            @TestMetadata("floatArrayRuntime.kt")
            public void testFloatArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/floatArrayRuntime.kt");
            }

            @TestMetadata("longArrayRuntime.kt")
            public void testLongArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/longArrayRuntime.kt");
            }

            @TestMetadata("multipleSpreadArguments2Runtime.kt")
            public void testMultipleSpreadArguments2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/multipleSpreadArguments2Runtime.kt");
            }

            @TestMetadata("multipleSpreadArgumentsRuntime.kt")
            public void testMultipleSpreadArgumentsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/multipleSpreadArgumentsRuntime.kt");
            }

            @TestMetadata("noImportRuntime.kt")
            public void testNoImportRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/noImportRuntime.kt");
            }

            @TestMetadata("shortArrayRuntime.kt")
            public void testShortArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/shortArrayRuntime.kt");
            }

            @TestMetadata("vararg1Runtime.kt")
            public void testVararg1Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg1Runtime.kt");
            }

            @TestMetadata("vararg2Runtime.kt")
            public void testVararg2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg2Runtime.kt");
            }

            @TestMetadata("vararg3Runtime.kt")
            public void testVararg3Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg3Runtime.kt");
            }

            @TestMetadata("vararg4.kt")
            public void testVararg4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg4.kt");
            }

            @TestMetadata("vararg5.kt")
            public void testVararg5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg5.kt");
            }

            @TestMetadata("vararg6Runtime.kt")
            public void testVararg6Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg6Runtime.kt");
            }

            @TestMetadata("vararg7.kt")
            public void testVararg7() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg7.kt");
            }

            @TestMetadata("vararg8Runtime.kt")
            public void testVararg8Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg8Runtime.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/equalityNotApplicable")
    public abstract static class EqualityNotApplicable extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion")
        public static class CharLiteralConversion extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("charEqString.kt")
            public void testCharEqString() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqString.kt");
            }

            @TestMetadata("charEqString2.kt")
            public void testCharEqString2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqString2.kt");
            }

            @TestMetadata("charEqString3.kt")
            public void testCharEqString3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqString3.kt");
            }

            @TestMetadata("charEqString4.kt")
            public void testCharEqString4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqString4.kt");
            }

            @TestMetadata("charEqStringDoubleQuote.kt")
            public void testCharEqStringDoubleQuote() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqStringDoubleQuote.kt");
            }

            @TestMetadata("charEqStringSingleQuote.kt")
            public void testCharEqStringSingleQuote() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqStringSingleQuote.kt");
            }

            @TestMetadata("interpolation.kt")
            public void testInterpolation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/interpolation.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion")
        public static class NumberConversion extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("left.kt")
            public void testLeft() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion/left.kt");
            }

            @TestMetadata("nullableLeft.kt")
            public void testNullableLeft() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion/nullableLeft.kt");
            }

            @TestMetadata("nullableRight.kt")
            public void testNullableRight() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion/nullableRight.kt");
            }

            @TestMetadata("right.kt")
            public void testRight() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion/right.kt");
            }
        }
    }



















    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/insertDelegationCall")
    public static class InsertDelegationCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cyclicCallDefaultParam.kt")
        public void testCyclicCallDefaultParam() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/cyclicCallDefaultParam.kt");
        }

        @TestMetadata("nonApplicableInsertSuper.kt")
        public void testNonApplicableInsertSuper() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/nonApplicableInsertSuper.kt");
        }

        @TestMetadata("nonApplicableInsertThis.kt")
        public void testNonApplicableInsertThis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/nonApplicableInsertThis.kt");
        }

        @TestMetadata("nonApplicableOnEmpty.kt")
        public void testNonApplicableOnEmpty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/nonApplicableOnEmpty.kt");
        }

        @TestMetadata("nonApplicableWithOneConstructor.kt")
        public void testNonApplicableWithOneConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/nonApplicableWithOneConstructor.kt");
        }

        @TestMetadata("primaryRequiredNoSuper.kt")
        public void testPrimaryRequiredNoSuper() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/primaryRequiredNoSuper.kt");
        }

        @TestMetadata("primaryRequiredParameterless.kt")
        public void testPrimaryRequiredParameterless() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/primaryRequiredParameterless.kt");
        }

        @TestMetadata("primaryRequiredWithBody.kt")
        public void testPrimaryRequiredWithBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/primaryRequiredWithBody.kt");
        }

        @TestMetadata("primaryRequiredWithParameter.kt")
        public void testPrimaryRequiredWithParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/primaryRequiredWithParameter.kt");
        }
    }















    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/makeTypeParameterReified")
    public static class MakeTypeParameterReified extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("noTypeParameter.kt")
        public void testNoTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeTypeParameterReified/noTypeParameter.kt");
        }

        @TestMetadata("noTypeParameter2.kt")
        public void testNoTypeParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeTypeParameterReified/noTypeParameter2.kt");
        }

        @TestMetadata("typeParameter.kt")
        public void testTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeTypeParameterReified/typeParameter.kt");
        }
    }

















    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel")
    public static class MoveTypeAliasToTopLevel extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inClass.kt")
        public void testInClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/inClass.kt");
        }

        @TestMetadata("inClass2.kt")
        public void testInClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/inClass2.kt");
        }

        @TestMetadata("inFunction.kt")
        public void testInFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/inFunction.kt");
        }

        @TestMetadata("inFunction2.kt")
        public void testInFunction2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/inFunction2.kt");
        }
    }



































    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeArgument")
    public static class RemoveArgument extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/constructor.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/function.kt");
        }

        @TestMetadata("lambdaArgument.kt")
        public void testLambdaArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/lambdaArgument.kt");
        }

        @TestMetadata("matchedArguments.kt")
        public void testMatchedArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/matchedArguments.kt");
        }

        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/typeMismatch.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeDefaultParameterValue")
    public static class RemoveDefaultParameterValue extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("actualFunctionWithDefaultArguments.kt")
        public void testActualFunctionWithDefaultArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeDefaultParameterValue/actualFunctionWithDefaultArguments.kt");
        }

        @TestMetadata("defaultValueNotAllowedInOverride.kt")
        public void testDefaultValueNotAllowedInOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeDefaultParameterValue/defaultValueNotAllowedInOverride.kt");
        }

        @TestMetadata("hasComment.kt")
        public void testHasComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeDefaultParameterValue/hasComment.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeNoConstructor")
    public static class RemoveNoConstructor extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeNoConstructor/basic.kt");
        }

        @TestMetadata("functionType.kt")
        public void testFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeNoConstructor/functionType.kt");
        }

        @TestMetadata("functionType2.kt")
        public void testFunctionType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeNoConstructor/functionType2.kt");
        }

        @TestMetadata("suspend.kt")
        public void testSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeNoConstructor/suspend.kt");
        }
    }















    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeUnused")
    public static class RemoveUnused extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("companionViaImport3.kt")
        public void testCompanionViaImport3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/companionViaImport3.kt");
        }

        @TestMetadata("deledage.kt")
        public void testDeledage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/deledage.kt");
        }

        @TestMetadata("importEnumValues.kt")
        public void testImportEnumValues() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/importEnumValues.kt");
        }

        @TestMetadata("importObjectFun.kt")
        public void testImportObjectFun() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/importObjectFun.kt");
        }

        @TestMetadata("notTriangle.kt")
        public void testNotTriangle() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/notTriangle.kt");
        }

        @TestMetadata("secondaryLocalClassConstructor.kt")
        public void testSecondaryLocalClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/secondaryLocalClassConstructor.kt");
        }

        @TestMetadata("simpleUnusedEnumEntry.kt")
        public void testSimpleUnusedEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/simpleUnusedEnumEntry.kt");
        }

        @TestMetadata("triangle.kt")
        public void testTriangle() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/triangle.kt");
        }

        @TestMetadata("triangle2.kt")
        public void testTriangle2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/triangle2.kt");
        }

        @TestMetadata("typeAlias2.kt")
        public void testTypeAlias2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/typeAlias2.kt");
        }

        @TestMetadata("unusedClass.kt")
        public void testUnusedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedClass.kt");
        }

        @TestMetadata("unusedConstructor.kt")
        public void testUnusedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedConstructor.kt");
        }

        @TestMetadata("unusedDelegatedConstructor.kt")
        public void testUnusedDelegatedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedDelegatedConstructor.kt");
        }

        @TestMetadata("unusedDelegatedConstructorSuper.kt")
        public void testUnusedDelegatedConstructorSuper() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedDelegatedConstructorSuper.kt");
        }

        @TestMetadata("unusedEnumEntry.kt")
        public void testUnusedEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry.kt");
        }

        @TestMetadata("unusedEnumEntry2.kt")
        public void testUnusedEnumEntry2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry2.kt");
        }

        @TestMetadata("unusedEnumEntry3.kt")
        public void testUnusedEnumEntry3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry3.kt");
        }

        @TestMetadata("unusedEnumEntry4.kt")
        public void testUnusedEnumEntry4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry4.kt");
        }

        @TestMetadata("unusedEnumEntry5.kt")
        public void testUnusedEnumEntry5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry5.kt");
        }

        @TestMetadata("unusedFunction.kt")
        public void testUnusedFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedFunction.kt");
        }

        @TestMetadata("unusedProperty.kt")
        public void testUnusedProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedProperty.kt");
        }

        @TestMetadata("unusedPropertyAsConstructorParameter.kt")
        public void testUnusedPropertyAsConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedPropertyAsConstructorParameter.kt");
        }

        @TestMetadata("unusedPropertyAsConstructorParameter2.kt")
        public void testUnusedPropertyAsConstructorParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedPropertyAsConstructorParameter2.kt");
        }

        @TestMetadata("unusedTypeParameter.kt")
        public void testUnusedTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedTypeParameter.kt");
        }

        @TestMetadata("usedClassAsAlias.kt")
        public void testUsedClassAsAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/usedClassAsAlias.kt");
        }

        @TestMetadata("usedFunAsAlias.kt")
        public void testUsedFunAsAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/usedFunAsAlias.kt");
        }

        @TestMetadata("usedObjectAsAlias.kt")
        public void testUsedObjectAsAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/usedObjectAsAlias.kt");
        }

        @TestMetadata("usedVarAsAlias.kt")
        public void testUsedVarAsAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/usedVarAsAlias.kt");
        }
    }



















    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/simplifyComparison")
    public static class SimplifyComparison extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("doubleNull.kt")
        public void testDoubleNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/doubleNull.kt");
        }

        @TestMetadata("notNull.kt")
        public void testNotNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/notNull.kt");
        }

        @TestMetadata("nullOrNotNull.kt")
        public void testNullOrNotNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/nullOrNotNull.kt");
        }

        @TestMetadata("somethingAndNotNull.kt")
        public void testSomethingAndNotNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/somethingAndNotNull.kt");
        }

        @TestMetadata("withAssertion.kt")
        public void testWithAssertion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/withAssertion.kt");
        }

        @TestMetadata("withAssertion2.kt")
        public void testWithAssertion2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/withAssertion2.kt");
        }

        @TestMetadata("withAssertion3.kt")
        public void testWithAssertion3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/withAssertion3.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly")
    public static class SpecifyOverrideExplicitly extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/base.kt");
        }

        @TestMetadata("global.kt")
        public void testGlobal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/global.kt");
        }

        @TestMetadata("lists.kt")
        public void testLists() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/lists.kt");
        }

        @TestMetadata("lists2.kt")
        public void testLists2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/lists2.kt");
        }

        @TestMetadata("notPossible.kt")
        public void testNotPossible() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/notPossible.kt");
        }

        @TestMetadata("objectDeclaration.kt")
        public void testObjectDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/objectDeclaration.kt");
        }

        @TestMetadata("outer.kt")
        public void testOuter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/outer.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/property.kt");
        }
    }









    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/surroundWithNullCheck")
    public static class SurroundWithNullCheck extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argumentNullable.kt")
        public void testArgumentNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/argumentNullable.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/assignment.kt");
        }

        @TestMetadata("chainedUnsafeCall.kt")
        public void testChainedUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/chainedUnsafeCall.kt");
        }

        @TestMetadata("expressionUnsafeCall.kt")
        public void testExpressionUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/expressionUnsafeCall.kt");
        }

        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/in.kt");
        }

        @TestMetadata("inLambda.kt")
        public void testInLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/inLambda.kt");
        }

        @TestMetadata("inLambda2.kt")
        public void testInLambda2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/inLambda2.kt");
        }

        @TestMetadata("inLambda3.kt")
        public void testInLambda3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/inLambda3.kt");
        }

        @TestMetadata("infixUnsafeCall.kt")
        public void testInfixUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/infixUnsafeCall.kt");
        }

        @TestMetadata("invokeFuncUnsafe.kt")
        public void testInvokeFuncUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/invokeFuncUnsafe.kt");
        }

        @TestMetadata("invokeUnsafe.kt")
        public void testInvokeUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/invokeUnsafe.kt");
        }

        @TestMetadata("iteratorUnsafe.kt")
        public void testIteratorUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/iteratorUnsafe.kt");
        }

        @TestMetadata("nullableInCondition.kt")
        public void testNullableInCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/nullableInCondition.kt");
        }

        @TestMetadata("objectNestedQualifiers.kt")
        public void testObjectNestedQualifiers() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/objectNestedQualifiers.kt");
        }

        @TestMetadata("objectQualifier.kt")
        public void testObjectQualifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/objectQualifier.kt");
        }

        @TestMetadata("simpleUnsafeCall.kt")
        public void testSimpleUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/simpleUnsafeCall.kt");
        }

        @TestMetadata("unsafeCallInBinary.kt")
        public void testUnsafeCallInBinary() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInBinary.kt");
        }

        @TestMetadata("unsafeCallInDeclaration.kt")
        public void testUnsafeCallInDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInDeclaration.kt");
        }

        @TestMetadata("unsafeCallInGetter.kt")
        public void testUnsafeCallInGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInGetter.kt");
        }

        @TestMetadata("unsafeCallInsideAnonymous.kt")
        public void testUnsafeCallInsideAnonymous() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInsideAnonymous.kt");
        }

        @TestMetadata("unsafeCallInsideIf.kt")
        public void testUnsafeCallInsideIf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInsideIf.kt");
        }

        @TestMetadata("unsafeCallInsideWhen.kt")
        public void testUnsafeCallInsideWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInsideWhen.kt");
        }

        @TestMetadata("unsafeCallInsideWhile.kt")
        public void testUnsafeCallInsideWhile() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInsideWhile.kt");
        }

        @TestMetadata("unstableValue.kt")
        public void testUnstableValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unstableValue.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString")
    public static class TooLongCharLiteralToString extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("backslash.kt")
        public void testBackslash() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/backslash.kt");
        }

        @TestMetadata("backslashShouldNotBeEscaped.kt")
        public void testBackslashShouldNotBeEscaped() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/backslashShouldNotBeEscaped.kt");
        }

        @TestMetadata("dollarShouldNotBeEscaped.kt")
        public void testDollarShouldNotBeEscaped() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/dollarShouldNotBeEscaped.kt");
        }

        @TestMetadata("doubleQuotesShouldBeEscaped.kt")
        public void testDoubleQuotesShouldBeEscaped() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/doubleQuotesShouldBeEscaped.kt");
        }

        @TestMetadata("ecapedDoubleQuotesShouldNotBeEscaped.kt")
        public void testEcapedDoubleQuotesShouldNotBeEscaped() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/ecapedDoubleQuotesShouldNotBeEscaped.kt");
        }

        @TestMetadata("startWithBackslash.kt")
        public void testStartWithBackslash() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/startWithBackslash.kt");
        }

        @TestMetadata("startWithBackslashInString.kt")
        public void testStartWithBackslashInString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/startWithBackslashInString.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeImports")
    public static class TypeImports extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("hasThisImport.kt")
        public void testHasThisImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/hasThisImport.kt");
        }

        @TestMetadata("noImportFromTheSameFile.kt")
        public void testNoImportFromTheSameFile() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/noImportFromTheSameFile.kt");
        }

        @TestMetadata("noImportJavaLang.kt")
        public void testNoImportJavaLang() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/noImportJavaLang.kt");
        }

        @TestMetadata("noImportJetStandard.kt")
        public void testNoImportJetStandard() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/noImportJetStandard.kt");
        }

        @TestMetadata("toImport1.kt")
        public void testToImport1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/toImport1.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeOfAnnotationMember")
    public static class TypeOfAnnotationMember extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/boolean.kt");
        }

        @TestMetadata("byte.kt")
        public void testByte() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/byte.kt");
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/char.kt");
        }

        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/float.kt");
        }

        @TestMetadata("int.kt")
        public void testInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/int.kt");
        }

        @TestMetadata("long.kt")
        public void testLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/long.kt");
        }

        @TestMetadata("short.kt")
        public void testShort() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/short.kt");
        }

        @TestMetadata("star.kt")
        public void testStar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/star.kt");
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/string.kt");
        }
    }















    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation")
    public static class ChangeToFunctionInvocation extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("funInvWithoutParentheses.kt")
        public void testFunInvWithoutParentheses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/funInvWithoutParentheses.kt");
        }

        @TestMetadata("genericFunction.kt")
        public void testGenericFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/genericFunction.kt");
        }

        @TestMetadata("inStringTemplate.kt")
        public void testInStringTemplate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate.kt");
        }

        @TestMetadata("inStringTemplate2.kt")
        public void testInStringTemplate2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate2.kt");
        }

        @TestMetadata("inStringTemplate3.kt")
        public void testInStringTemplate3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate3.kt");
        }

        @TestMetadata("inStringTemplate4.kt")
        public void testInStringTemplate4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate4.kt");
        }

        @TestMetadata("inStringTemplate5.kt")
        public void testInStringTemplate5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate5.kt");
        }
    }








}
