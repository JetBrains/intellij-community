// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.codeinsight.fixes;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/fixes-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class HighLevelQuickFixTestGenerated extends AbstractHighLevelQuickFixTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/abstract")
    public static class Abstract extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractFunctionInNonAbstractClass.kt")
        public void testAbstractFunctionInNonAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionInNonAbstractClass.kt");
        }

        @TestMetadata("abstractFunctionWithBody.kt")
        public void testAbstractFunctionWithBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBody.kt");
        }

        @TestMetadata("abstractFunctionWithBody2.kt")
        public void testAbstractFunctionWithBody2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBody2.kt");
        }

        @TestMetadata("abstractFunctionWithBody3.kt")
        public void testAbstractFunctionWithBody3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBody3.kt");
        }

        @TestMetadata("abstractFunctionWithBodyWithComments.kt")
        public void testAbstractFunctionWithBodyWithComments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBodyWithComments.kt");
        }

        @TestMetadata("abstractFunctionWithBodyWithComments2.kt")
        public void testAbstractFunctionWithBodyWithComments2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractFunctionWithBodyWithComments2.kt");
        }

        @TestMetadata("abstractPropertyInCompanionObject.kt")
        public void testAbstractPropertyInCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInCompanionObject.kt");
        }

        @TestMetadata("abstractPropertyInNonAbstractClass1.kt")
        public void testAbstractPropertyInNonAbstractClass1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInNonAbstractClass1.kt");
        }

        @TestMetadata("abstractPropertyInNonAbstractClass2.kt")
        public void testAbstractPropertyInNonAbstractClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInNonAbstractClass2.kt");
        }

        @TestMetadata("abstractPropertyInNonAbstractClass3.kt")
        public void testAbstractPropertyInNonAbstractClass3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInNonAbstractClass3.kt");
        }

        @TestMetadata("abstractPropertyInPrimaryConstructorParameters.kt")
        public void testAbstractPropertyInPrimaryConstructorParameters() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyInPrimaryConstructorParameters.kt");
        }

        @TestMetadata("abstractPropertyNotInClass.kt")
        public void testAbstractPropertyNotInClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyNotInClass.kt");
        }

        @TestMetadata("abstractPropertyWIthInitializer2.kt")
        public void testAbstractPropertyWIthInitializer2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWIthInitializer2.kt");
        }

        @TestMetadata("abstractPropertyWIthInitializer3.kt")
        public void testAbstractPropertyWIthInitializer3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWIthInitializer3.kt");
        }

        @TestMetadata("abstractPropertyWithGetter1.kt")
        public void testAbstractPropertyWithGetter1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWithGetter1.kt");
        }

        @TestMetadata("abstractPropertyWithGetter2.kt")
        public void testAbstractPropertyWithGetter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWithGetter2.kt");
        }

        @TestMetadata("abstractPropertyWithInitializer1.kt")
        public void testAbstractPropertyWithInitializer1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWithInitializer1.kt");
        }

        @TestMetadata("abstractPropertyWithSetter.kt")
        public void testAbstractPropertyWithSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/abstractPropertyWithSetter.kt");
        }

        @TestMetadata("makeEnumEntryAbstract.kt")
        public void testMakeEnumEntryAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/makeEnumEntryAbstract.kt");
        }

        @TestMetadata("makeInlineClassAbstract.kt")
        public void testMakeInlineClassAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/makeInlineClassAbstract.kt");
        }

        @TestMetadata("makeObjectMemberAbstract.kt")
        public void testMakeObjectMemberAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/makeObjectMemberAbstract.kt");
        }

        @TestMetadata("makeTopLevelAbstract.kt")
        public void testMakeTopLevelAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/makeTopLevelAbstract.kt");
        }

        @TestMetadata("manyImpl.kt")
        public void testManyImpl() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/manyImpl.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstract.kt")
        public void testMustBeInitializedOrBeAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstractInFinalClass.kt")
        public void testMustBeInitializedOrBeAbstractInFinalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstractInFinalClass.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstractInOpenClass.kt")
        public void testMustBeInitializedOrBeAbstractInOpenClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstractInOpenClass.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstractInSealedClass.kt")
        public void testMustBeInitializedOrBeAbstractInSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrBeAbstractInSealedClass.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstract.kt")
        public void testMustBeInitializedOrFinalOrAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrFinalOrAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstractWarning.kt")
        public void testMustBeInitializedOrFinalOrAbstractWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/mustBeInitializedOrFinalOrAbstractWarning.kt");
        }

        @TestMetadata("nonAbstractFunctionWithNoBody.kt")
        public void testNonAbstractFunctionWithNoBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/nonAbstractFunctionWithNoBody.kt");
        }

        @TestMetadata("nonMemberAbstractFunction.kt")
        public void testNonMemberAbstractFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/nonMemberAbstractFunction.kt");
        }

        @TestMetadata("nonMemberFunctionNoBody.kt")
        public void testNonMemberFunctionNoBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/nonMemberFunctionNoBody.kt");
        }

        @TestMetadata("notImplementedMember.kt")
        public void testNotImplementedMember() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/notImplementedMember.kt");
        }

        @TestMetadata("notImplementedMemberFromAbstractClass.kt")
        public void testNotImplementedMemberFromAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/notImplementedMemberFromAbstractClass.kt");
        }

        @TestMetadata("replaceOpen.kt")
        public void testReplaceOpen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/abstract/replaceOpen.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addExclExclCall")
    public abstract static class AddExclExclCall extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch")
        public static class TypeMismatch extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("argumentAfterNullCheck.kt")
            public void testArgumentAfterNullCheck() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/argumentAfterNullCheck.kt");
            }

            @TestMetadata("assignmentRValue.kt")
            public void testAssignmentRValue() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/assignmentRValue.kt");
            }

            @TestMetadata("condition.kt")
            public void testCondition() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/condition.kt");
            }

            @TestMetadata("initializer.kt")
            public void testInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/initializer.kt");
            }

            @TestMetadata("memberAccessInExtension.kt")
            public void testMemberAccessInExtension() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/memberAccessInExtension.kt");
            }

            @TestMetadata("memberAccessInExtensionAsAssignmentRValue.kt")
            public void testMemberAccessInExtensionAsAssignmentRValue() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/memberAccessInExtensionAsAssignmentRValue.kt");
            }

            @TestMetadata("memberAccessInExtensionAsInitializer.kt")
            public void testMemberAccessInExtensionAsInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/memberAccessInExtensionAsInitializer.kt");
            }

            @TestMetadata("nullArgument.kt")
            public void testNullArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/nullArgument.kt");
            }

            @TestMetadata("qualifiedArgument.kt")
            public void testQualifiedArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/qualifiedArgument.kt");
            }

            @TestMetadata("removeNullability.kt")
            public void testRemoveNullability() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullability.kt");
            }

            @TestMetadata("removeNullabilityDisabledWhenItCannotHelp.kt")
            public void testRemoveNullabilityDisabledWhenItCannotHelp() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullabilityDisabledWhenItCannotHelp.kt");
            }

            @TestMetadata("removeNullabilityForGeneric.kt")
            public void testRemoveNullabilityForGeneric() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullabilityForGeneric.kt");
            }

            @TestMetadata("removeNullabilityForSubclass.kt")
            public void testRemoveNullabilityForSubclass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/removeNullabilityForSubclass.kt");
            }

            @TestMetadata("smartcastImpossibleForArgument.kt")
            public void testSmartcastImpossibleForArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/smartcastImpossibleForArgument.kt");
            }

            @TestMetadata("smartcastImpossibleForReceiver.kt")
            public void testSmartcastImpossibleForReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/typeMismatch/smartcastImpossibleForReceiver.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addExclExclCall")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/array.kt");
            }

            @TestMetadata("array2.kt")
            public void testArray2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/array2.kt");
            }

            @TestMetadata("array3.kt")
            public void testArray3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/array3.kt");
            }

            @TestMetadata("array4.kt")
            public void testArray4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/array4.kt");
            }

            @TestMetadata("assignment.kt")
            public void testAssignment() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/assignment.kt");
            }

            @TestMetadata("assignmentToUnsafeCallExpression.kt")
            public void testAssignmentToUnsafeCallExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/assignmentToUnsafeCallExpression.kt");
            }

            @TestMetadata("functionReference.kt")
            public void testFunctionReference() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/functionReference.kt");
            }

            @TestMetadata("functionReference2.kt")
            public void testFunctionReference2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/functionReference2.kt");
            }

            @TestMetadata("functionReference3.kt")
            public void testFunctionReference3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/functionReference3.kt");
            }

            @TestMetadata("implicit.kt")
            public void testImplicit() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/implicit.kt");
            }

            @TestMetadata("implicit2.kt")
            public void testImplicit2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/implicit2.kt");
            }

            @TestMetadata("implicit3.kt")
            public void testImplicit3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/implicit3.kt");
            }

            @TestMetadata("implicitFunctionCall.kt")
            public void testImplicitFunctionCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/implicitFunctionCall.kt");
            }

            @TestMetadata("infixCall.kt")
            public void testInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/infixCall.kt");
            }

            @TestMetadata("iterable.kt")
            public void testIterable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterable.kt");
            }

            @TestMetadata("iterableDoesNotInheritIterableInterface.kt")
            public void testIterableDoesNotInheritIterableInterface() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterableDoesNotInheritIterableInterface.kt");
            }

            @TestMetadata("iterableGeneric.kt")
            public void testIterableGeneric() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterableGeneric.kt");
            }

            @TestMetadata("iterableInExtension.kt")
            public void testIterableInExtension() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterableInExtension.kt");
            }

            @TestMetadata("iterableWithBadIterator.kt")
            public void testIterableWithBadIterator() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/iterableWithBadIterator.kt");
            }

            @TestMetadata("normal.kt")
            public void testNormal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/normal.kt");
            }

            @TestMetadata("normal2.kt")
            public void testNormal2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/normal2.kt");
            }

            @TestMetadata("null.kt")
            public void testNull() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/null.kt");
            }

            @TestMetadata("nullInitializer.kt")
            public void testNullInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/nullInitializer.kt");
            }

            @TestMetadata("nullInitializerWithUnstableSmartcast.kt")
            public void testNullInitializerWithUnstableSmartcast() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/nullInitializerWithUnstableSmartcast.kt");
            }

            @TestMetadata("nullReceiver.kt")
            public void testNullReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/nullReceiver.kt");
            }

            @TestMetadata("nullReceiverWithUnstableSmartcast.kt")
            public void testNullReceiverWithUnstableSmartcast() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/nullReceiverWithUnstableSmartcast.kt");
            }

            @TestMetadata("operationBinary.kt")
            public void testOperationBinary() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationBinary.kt");
            }

            @TestMetadata("operationDecrement.kt")
            public void testOperationDecrement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationDecrement.kt");
            }

            @TestMetadata("operationDivAssign.kt")
            public void testOperationDivAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationDivAssign.kt");
            }

            @TestMetadata("operationIn.kt")
            public void testOperationIn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationIn.kt");
            }

            @TestMetadata("operationIncrement.kt")
            public void testOperationIncrement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationIncrement.kt");
            }

            @TestMetadata("operationMinusAssign.kt")
            public void testOperationMinusAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationMinusAssign.kt");
            }

            @TestMetadata("operationPlusAssign.kt")
            public void testOperationPlusAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationPlusAssign.kt");
            }

            @TestMetadata("operationPlusAssignNullableRhs.kt")
            public void testOperationPlusAssignNullableRhs() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationPlusAssignNullableRhs.kt");
            }

            @TestMetadata("operationPlusAssignOnMutableMap.kt")
            public void testOperationPlusAssignOnMutableMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationPlusAssignOnMutableMap.kt");
            }

            @TestMetadata("operationRemAssign.kt")
            public void testOperationRemAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationRemAssign.kt");
            }

            @TestMetadata("operationTimesAssign.kt")
            public void testOperationTimesAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationTimesAssign.kt");
            }

            @TestMetadata("operationUnary.kt")
            public void testOperationUnary() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addExclExclCall/operationUnary.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addInitializer")
    public static class AddInitializer extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("localVar.kt")
        public void testLocalVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/localVar.kt");
        }

        @TestMetadata("memberExtensionProperty.kt")
        public void testMemberExtensionProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberExtensionProperty.kt");
        }

        @TestMetadata("memberExtensionPropertyVarGetterOnly.kt")
        public void testMemberExtensionPropertyVarGetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberExtensionPropertyVarGetterOnly.kt");
        }

        @TestMetadata("memberExtensionPropertyVarSetterOnly.kt")
        public void testMemberExtensionPropertyVarSetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberExtensionPropertyVarSetterOnly.kt");
        }

        @TestMetadata("memberProperty.kt")
        public void testMemberProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberProperty.kt");
        }

        @TestMetadata("memberPropertyVarGetterOnly.kt")
        public void testMemberPropertyVarGetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberPropertyVarGetterOnly.kt");
        }

        @TestMetadata("memberPropertyVarSetterOnly.kt")
        public void testMemberPropertyVarSetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberPropertyVarSetterOnly.kt");
        }

        @TestMetadata("memberPropertyWithAccessor.kt")
        public void testMemberPropertyWithAccessor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberPropertyWithAccessor.kt");
        }

        @TestMetadata("memberPropertyWithDelegateRuntime.kt")
        public void testMemberPropertyWithDelegateRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/memberPropertyWithDelegateRuntime.kt");
        }

        @TestMetadata("mustBeInitializedOrBeAbstract.kt")
        public void testMustBeInitializedOrBeAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrBeAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrBeFinal.kt")
        public void testMustBeInitializedOrBeFinal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrBeFinal.kt");
        }

        @TestMetadata("mustBeInitializedOrBeFinalWarning.kt")
        public void testMustBeInitializedOrBeFinalWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrBeFinalWarning.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstract.kt")
        public void testMustBeInitializedOrFinalOrAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrFinalOrAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstractWarning.kt")
        public void testMustBeInitializedOrFinalOrAbstractWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedOrFinalOrAbstractWarning.kt");
        }

        @TestMetadata("mustBeInitializedWarning.kt")
        public void testMustBeInitializedWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/mustBeInitializedWarning.kt");
        }

        @TestMetadata("topLevelExtensionProperty.kt")
        public void testTopLevelExtensionProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelExtensionProperty.kt");
        }

        @TestMetadata("topLevelExtensionPropertySetterOnly.kt")
        public void testTopLevelExtensionPropertySetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelExtensionPropertySetterOnly.kt");
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelProperty.kt");
        }

        @TestMetadata("topLevelPropertyVarClass.kt")
        public void testTopLevelPropertyVarClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyVarClass.kt");
        }

        @TestMetadata("topLevelPropertyVarGetterOnly.kt")
        public void testTopLevelPropertyVarGetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyVarGetterOnly.kt");
        }

        @TestMetadata("topLevelPropertyVarSetterOnly.kt")
        public void testTopLevelPropertyVarSetterOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyVarSetterOnly.kt");
        }

        @TestMetadata("topLevelPropertyWithDelegateRuntime.kt")
        public void testTopLevelPropertyWithDelegateRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyWithDelegateRuntime.kt");
        }

        @TestMetadata("topLevelPropertyWithGetter.kt")
        public void testTopLevelPropertyWithGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInitializer/topLevelPropertyWithGetter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addPropertyAccessors")
    public static class AddPropertyAccessors extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addPropertyAccessors/val.kt");
        }

        @TestMetadata("var.kt")
        public void testVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addPropertyAccessors/var.kt");
        }

        @TestMetadata("varHasGetter.kt")
        public void testVarHasGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addPropertyAccessors/varHasGetter.kt");
        }

        @TestMetadata("varHasSetter.kt")
        public void testVarHasSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addPropertyAccessors/varHasSetter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addValVar")
    public abstract static class AddValVar extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addValVar/inline")
        public static class Inline extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/inline/basic.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/inline/var.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addValVar")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addVal.kt")
            public void testAddVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/addVal.kt");
            }

            @TestMetadata("addValAfterVarArg.kt")
            public void testAddValAfterVarArg() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/addValAfterVarArg.kt");
            }

            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/annotation.kt");
            }

            @TestMetadata("expectAnnotation.kt")
            public void testExpectAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/expectAnnotation.kt");
            }

            @TestMetadata("library.kt")
            public void testLibrary() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/library.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addValVar/value")
        public static class Value extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/value/basic.kt");
            }

            @TestMetadata("genericParameter.kt")
            public void testGenericParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/value/genericParameter.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addValVar/value/var.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/autoImports")
    public abstract static class AutoImports extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses")
        public static class CallablesDeclaredInClasses extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstractExtensionSingleImport.kt")
            public void testAbstractExtensionSingleImport() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/abstractExtensionSingleImport.kt");
            }

            @TestMetadata("companionObjectDeepInheritance.kt")
            public void testCompanionObjectDeepInheritance() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectDeepInheritance.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionInClassImportFromChildObject.kt")
            public void testCompanionObjectExtensionFunctionInClassImportFromChildObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionInClassImportFromChildObject.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionInClassImportFromChildObjectNoClassName.kt")
            public void testCompanionObjectExtensionFunctionInClassImportFromChildObjectNoClassName() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionInClassImportFromChildObjectNoClassName.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionInUnrelatedClass.kt")
            public void testCompanionObjectExtensionFunctionInUnrelatedClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionInUnrelatedClass.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionInUnrelatedClassNamedCompanion.kt")
            public void testCompanionObjectExtensionFunctionInUnrelatedClassNamedCompanion() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionInUnrelatedClassNamedCompanion.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionTwoCandidatesA.kt")
            public void testCompanionObjectExtensionFunctionTwoCandidatesA() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionTwoCandidatesA.kt");
            }

            @TestMetadata("companionObjectExtensionFunctionTwoCandidatesB.kt")
            public void testCompanionObjectExtensionFunctionTwoCandidatesB() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/companionObjectExtensionFunctionTwoCandidatesB.kt");
            }

            @TestMetadata("genericClassSpecificTypeChild.kt")
            public void testGenericClassSpecificTypeChild() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericClassSpecificTypeChild.kt");
            }

            @TestMetadata("genericExtensionFunction.kt")
            public void testGenericExtensionFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunction.kt");
            }

            @TestMetadata("genericExtensionFunctionSubtype.kt")
            public void testGenericExtensionFunctionSubtype() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunctionSubtype.kt");
            }

            @TestMetadata("genericExtensionFunctionTypeConstraint.kt")
            public void testGenericExtensionFunctionTypeConstraint() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunctionTypeConstraint.kt");
            }

            @TestMetadata("genericExtensionFunctionTypeConstraintVariable.kt")
            public void testGenericExtensionFunctionTypeConstraintVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunctionTypeConstraintVariable.kt");
            }

            @TestMetadata("genericExtensionFunctionVariable.kt")
            public void testGenericExtensionFunctionVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericExtensionFunctionVariable.kt");
            }

            @TestMetadata("genericTypeExtension1.kt")
            public void testGenericTypeExtension1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericTypeExtension1.kt");
            }

            @TestMetadata("genericTypeExtension2.kt")
            public void testGenericTypeExtension2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/genericTypeExtension2.kt");
            }

            @TestMetadata("infixExtensionForInfixCall.kt")
            public void testInfixExtensionForInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/infixExtensionForInfixCall.kt");
            }

            @TestMetadata("intTypeExtensionFunction.kt")
            public void testIntTypeExtensionFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunction.kt");
            }

            @TestMetadata("intTypeExtensionFunctionCallChainVariable.kt")
            public void testIntTypeExtensionFunctionCallChainVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunctionCallChainVariable.kt");
            }

            @TestMetadata("intTypeExtensionFunctionUnnecessaryCallChainLiteral.kt")
            public void testIntTypeExtensionFunctionUnnecessaryCallChainLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunctionUnnecessaryCallChainLiteral.kt");
            }

            @TestMetadata("intTypeExtensionFunctionUnnecessaryCallChainVariable.kt")
            public void testIntTypeExtensionFunctionUnnecessaryCallChainVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunctionUnnecessaryCallChainVariable.kt");
            }

            @TestMetadata("intTypeExtensionFunctionVariable.kt")
            public void testIntTypeExtensionFunctionVariable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/intTypeExtensionFunctionVariable.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidate1.kt")
            public void testMultipleReceiversSingleCandidate1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/multipleReceiversSingleCandidate1.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidate2.kt")
            public void testMultipleReceiversSingleCandidate2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/multipleReceiversSingleCandidate2.kt");
            }

            @TestMetadata("noImportCompanionExtensionFunctionAsClassFunction.kt")
            public void testNoImportCompanionExtensionFunctionAsClassFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportCompanionExtensionFunctionAsClassFunction.kt");
            }

            @TestMetadata("noImportGenericClassSpecificTypeChild.kt")
            public void testNoImportGenericClassSpecificTypeChild() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportGenericClassSpecificTypeChild.kt");
            }

            @TestMetadata("noImportGenericExtensionFunctionTypeConstraintWrongReceiver.kt")
            public void testNoImportGenericExtensionFunctionTypeConstraintWrongReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportGenericExtensionFunctionTypeConstraintWrongReceiver.kt");
            }

            @TestMetadata("noImportGenericExtensionFunctionTypeConstraintWrongReceiver2.kt")
            public void testNoImportGenericExtensionFunctionTypeConstraintWrongReceiver2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportGenericExtensionFunctionTypeConstraintWrongReceiver2.kt");
            }

            @TestMetadata("noImportIntTypeExtensionFunctionVariableWrongReceiver.kt")
            public void testNoImportIntTypeExtensionFunctionVariableWrongReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIntTypeExtensionFunctionVariableWrongReceiver.kt");
            }

            @TestMetadata("noImportIntTypeExtensionFunctionWrongReceiver.kt")
            public void testNoImportIntTypeExtensionFunctionWrongReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIntTypeExtensionFunctionWrongReceiver.kt");
            }

            @TestMetadata("noImportIrrelevantFunctions1.kt")
            public void testNoImportIrrelevantFunctions1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIrrelevantFunctions1.kt");
            }

            @TestMetadata("noImportIrrelevantFunctions2.kt")
            public void testNoImportIrrelevantFunctions2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIrrelevantFunctions2.kt");
            }

            @TestMetadata("noImportIrrelevantFunctions3.kt")
            public void testNoImportIrrelevantFunctions3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIrrelevantFunctions3.kt");
            }

            @TestMetadata("noImportIrrelevantFunctions4.kt")
            public void testNoImportIrrelevantFunctions4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportIrrelevantFunctions4.kt");
            }

            @TestMetadata("noImportRegularExtensionForInfixCall.kt")
            public void testNoImportRegularExtensionForInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportRegularExtensionForInfixCall.kt");
            }

            @TestMetadata("noImportThisExtensionReceiverWrongType.kt")
            public void testNoImportThisExtensionReceiverWrongType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/noImportThisExtensionReceiverWrongType.kt");
            }

            @TestMetadata("objectExtensionFunctionInClass.kt")
            public void testObjectExtensionFunctionInClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/objectExtensionFunctionInClass.kt");
            }

            @TestMetadata("regularFunction.kt")
            public void testRegularFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/regularFunction.kt");
            }

            @TestMetadata("regularProperty.kt")
            public void testRegularProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/regularProperty.kt");
            }

            @TestMetadata("thisExtensionReceiver.kt")
            public void testThisExtensionReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/thisExtensionReceiver.kt");
            }

            @TestMetadata("twoSupertypes1.kt")
            public void testTwoSupertypes1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/twoSupertypes1.kt");
            }

            @TestMetadata("twoSupertypes2.kt")
            public void testTwoSupertypes2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/twoSupertypes2.kt");
            }

            @TestMetadata("typealiasExtension1.kt")
            public void testTypealiasExtension1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/typealiasExtension1.kt");
            }

            @TestMetadata("typealiasExtension2.kt")
            public void testTypealiasExtension2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/typealiasExtension2.kt");
            }

            @TestMetadata("typealiasExtension3.kt")
            public void testTypealiasExtension3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/typealiasExtension3.kt");
            }

            @TestMetadata("typealiasExtension4.kt")
            public void testTypealiasExtension4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/callablesDeclaredInClasses/typealiasExtension4.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/autoImports/kt21515")
        public static class Kt21515 extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("callableReferenceFromDeprecated.kt")
            public void testCallableReferenceFromDeprecated() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/kt21515/callableReferenceFromDeprecated.kt");
            }

            @TestMetadata("classifierFromCompanionObjectDeprecationEnabled.kt")
            public void testClassifierFromCompanionObjectDeprecationEnabled() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/kt21515/classifierFromCompanionObjectDeprecationEnabled.kt");
            }

            @TestMetadata("constructorFromDeprecated.kt")
            public void testConstructorFromDeprecated() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/kt21515/constructorFromDeprecated.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/autoImports")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/annotation.kt");
            }

            @TestMetadata("annotationWithAnotherUnresolvedAnnotation.kt")
            public void testAnnotationWithAnotherUnresolvedAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/annotationWithAnotherUnresolvedAnnotation.kt");
            }

            @TestMetadata("builtInFunction.kt")
            public void testBuiltInFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/builtInFunction.kt");
            }

            @TestMetadata("builtInFunctionAlreadyExists.kt")
            public void testBuiltInFunctionAlreadyExists() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/builtInFunctionAlreadyExists.kt");
            }

            @TestMetadata("checkNoStackOverflowInImportInnerClassInCurrentFile.kt")
            public void testCheckNoStackOverflowInImportInnerClassInCurrentFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/checkNoStackOverflowInImportInnerClassInCurrentFile.kt");
            }

            @TestMetadata("companionObjectMemberExtensionFunctionImportWhenExplicitReceiverPresent.kt")
            public void testCompanionObjectMemberExtensionFunctionImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/companionObjectMemberExtensionFunctionImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("companionObjectMemberExtensionPropertyImportWhenExplicitReceiverPresent.kt")
            public void testCompanionObjectMemberExtensionPropertyImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/companionObjectMemberExtensionPropertyImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("conflictWithClassIdentifier.kt")
            public void testConflictWithClassIdentifier() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/conflictWithClassIdentifier.kt");
            }

            @TestMetadata("conflictWithLocalIdentifier.kt")
            public void testConflictWithLocalIdentifier() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/conflictWithLocalIdentifier.kt");
            }

            @TestMetadata("conflictWithTopLevelIdentifier.kt")
            public void testConflictWithTopLevelIdentifier() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/conflictWithTopLevelIdentifier.kt");
            }

            @TestMetadata("enumEntries.kt")
            public void testEnumEntries() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/enumEntries.kt");
            }

            @TestMetadata("enumEntriesJsRuntime.kt")
            public void testEnumEntriesJsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/enumEntriesJsRuntime.kt");
            }

            @TestMetadata("excludedCoroutineImpl.kt")
            public void testExcludedCoroutineImpl() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/excludedCoroutineImpl.kt");
            }

            @TestMetadata("excludedCoroutineIntrinsics.kt")
            public void testExcludedCoroutineIntrinsics() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/excludedCoroutineIntrinsics.kt");
            }

            @TestMetadata("excludedFromImport.kt")
            public void testExcludedFromImport() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/excludedFromImport.kt");
            }

            @TestMetadata("importAliasLetAlreadyExists.kt")
            public void testImportAliasLetAlreadyExists() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importAliasLetAlreadyExists.kt");
            }

            @TestMetadata("importEnumValueMissingReceiver.kt")
            public void testImportEnumValueMissingReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importEnumValueMissingReceiver.kt");
            }

            @TestMetadata("importFunctionMissingReceiver.kt")
            public void testImportFunctionMissingReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importFunctionMissingReceiver.kt");
            }

            @TestMetadata("importFunctionMissingReceiverWithTypeAlias.kt")
            public void testImportFunctionMissingReceiverWithTypeAlias() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importFunctionMissingReceiverWithTypeAlias.kt");
            }

            @TestMetadata("importFunctionWithMultipleReceivers.kt")
            public void testImportFunctionWithMultipleReceivers() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importFunctionWithMultipleReceivers.kt");
            }

            @TestMetadata("importKClass.kt")
            public void testImportKClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importKClass.kt");
            }

            @TestMetadata("importKProperty.kt")
            public void testImportKProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importKProperty.kt");
            }

            @TestMetadata("importKType.kt")
            public void testImportKType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importKType.kt");
            }

            @TestMetadata("importTypeOf.kt")
            public void testImportTypeOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/importTypeOf.kt");
            }

            @TestMetadata("inPrimaryConstructor.kt")
            public void testInPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/inPrimaryConstructor.kt");
            }

            @TestMetadata("infixCallAndObject.kt")
            public void testInfixCallAndObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/infixCallAndObject.kt");
            }

            @TestMetadata("kt17525.kt")
            public void testKt17525() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/kt17525.kt");
            }

            @TestMetadata("libraryPropertyJsRuntime.kt")
            public void testLibraryPropertyJsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/libraryPropertyJsRuntime.kt");
            }

            @TestMetadata("libraryPropertyRuntime.kt")
            public void testLibraryPropertyRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/libraryPropertyRuntime.kt");
            }

            @TestMetadata("libraryTopLevelFunctionImportJsRuntime.kt")
            public void testLibraryTopLevelFunctionImportJsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/libraryTopLevelFunctionImportJsRuntime.kt");
            }

            @TestMetadata("libraryTopLevelFunctionImportRuntime.kt")
            public void testLibraryTopLevelFunctionImportRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/libraryTopLevelFunctionImportRuntime.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidateExtensionInObject1.kt")
            public void testMultipleReceiversSingleCandidateExtensionInObject1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/multipleReceiversSingleCandidateExtensionInObject1.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidateExtensionInObject2.kt")
            public void testMultipleReceiversSingleCandidateExtensionInObject2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/multipleReceiversSingleCandidateExtensionInObject2.kt");
            }

            @TestMetadata("multipleReceiversSingleCandidateExtensionInObject3.kt")
            public void testMultipleReceiversSingleCandidateExtensionInObject3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/multipleReceiversSingleCandidateExtensionInObject3.kt");
            }

            @TestMetadata("namelessClass.kt")
            public void testNamelessClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessClass.kt");
            }

            @TestMetadata("namelessFunction.kt")
            public void testNamelessFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessFunction.kt");
            }

            @TestMetadata("namelessObject.kt")
            public void testNamelessObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessObject.kt");
            }

            @TestMetadata("namelessParameter.kt")
            public void testNamelessParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessParameter.kt");
            }

            @TestMetadata("namelessProperty.kt")
            public void testNamelessProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/namelessProperty.kt");
            }

            @TestMetadata("noImportForAlreadyImported.kt")
            public void testNoImportForAlreadyImported() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/noImportForAlreadyImported.kt");
            }

            @TestMetadata("noImportForIndex.kt")
            public void testNoImportForIndex() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/noImportForIndex.kt");
            }

            @TestMetadata("notExcludedFromImportWhenInternalUse.kt")
            public void testNotExcludedFromImportWhenInternalUse() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/notExcludedFromImportWhenInternalUse.kt");
            }

            @TestMetadata("notForThisLabel.kt")
            public void testNotForThisLabel() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/notForThisLabel.kt");
            }

            @TestMetadata("objectMemberExtensionFunctionImportWhenExplicitReceiverPresent.kt")
            public void testObjectMemberExtensionFunctionImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/objectMemberExtensionFunctionImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("objectMemberExtensionFunctionWithGenericImportWhenExplicitReceiverPresent.kt")
            public void testObjectMemberExtensionFunctionWithGenericImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/objectMemberExtensionFunctionWithGenericImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("objectMemberExtensionPropertyImportWhenExplicitReceiverPresent.kt")
            public void testObjectMemberExtensionPropertyImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/objectMemberExtensionPropertyImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("objectMemberExtensionPropertyWithGenericImportWhenExplicitReceiverPresent.kt")
            public void testObjectMemberExtensionPropertyWithGenericImportWhenExplicitReceiverPresent() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/objectMemberExtensionPropertyWithGenericImportWhenExplicitReceiverPresent.kt");
            }

            @TestMetadata("sAMConstructorFromLambda.kt")
            public void testSAMConstructorFromLambda() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/sAMConstructorFromLambda.kt");
            }

            @TestMetadata("unresolvedReferenceInCall.kt")
            public void testUnresolvedReferenceInCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/autoImports/unresolvedReferenceInCall.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/changeToMutableCollection")
    public static class ChangeToMutableCollection extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToMutableCollection/list.kt");
        }

        @TestMetadata("list2.kt")
        public void testList2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToMutableCollection/list2.kt");
        }

        @TestMetadata("map.kt")
        public void testMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToMutableCollection/map.kt");
        }

        @TestMetadata("map2.kt")
        public void testMap2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToMutableCollection/map2.kt");
        }

        @TestMetadata("set.kt")
        public void testSet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToMutableCollection/set.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/checkArguments")
    public static class CheckArguments extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("nonVarargSpread.kt")
        public void testNonVarargSpread() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/checkArguments/nonVarargSpread.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/conflictingImports")
    public static class ConflictingImports extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("removeConflictingImport.kt")
        public void testRemoveConflictingImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/conflictingImports/removeConflictingImport.kt");
        }

        @TestMetadata("removeDuplicateImport.kt")
        public void testRemoveDuplicateImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/conflictingImports/removeDuplicateImport.kt");
        }

        @TestMetadata("removeDuplicateImportWithAlias.kt")
        public void testRemoveDuplicateImportWithAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/conflictingImports/removeDuplicateImportWithAlias.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/expressions")
    public static class Expressions extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("kt11594.kt")
        public void testKt11594() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/kt11594.kt");
        }

        @TestMetadata("removeUselessCast.kt")
        public void testRemoveUselessCast() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCast.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInNecessaryNestedParens2.kt")
        public void testRemoveUselessCastForLambdaInNecessaryNestedParens2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInNecessaryNestedParens2.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInNestedParens.kt")
        public void testRemoveUselessCastForLambdaInNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInNestedParens.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens1.kt")
        public void testRemoveUselessCastForLambdaInParens1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens1.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens2.kt")
        public void testRemoveUselessCastForLambdaInParens2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens2.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens3.kt")
        public void testRemoveUselessCastForLambdaInParens3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens3.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens4.kt")
        public void testRemoveUselessCastForLambdaInParens4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens4.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens5.kt")
        public void testRemoveUselessCastForLambdaInParens5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens5.kt");
        }

        @TestMetadata("removeUselessCastForLambdaInParens6.kt")
        public void testRemoveUselessCastForLambdaInParens6() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastForLambdaInParens6.kt");
        }

        @TestMetadata("removeUselessCastInNestedParens.kt")
        public void testRemoveUselessCastInNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastInNestedParens.kt");
        }

        @TestMetadata("removeUselessCastInParens.kt")
        public void testRemoveUselessCastInParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastInParens.kt");
        }

        @TestMetadata("removeUselessCastUnderSmartCast.kt")
        public void testRemoveUselessCastUnderSmartCast() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessCastUnderSmartCast.kt");
        }

        @TestMetadata("removeUselessIsCheck.kt")
        public void testRemoveUselessIsCheck() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheck.kt");
        }

        @TestMetadata("removeUselessIsCheckButFalse.kt")
        public void testRemoveUselessIsCheckButFalse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckButFalse.kt");
        }

        @TestMetadata("removeUselessIsCheckForNull.kt")
        public void testRemoveUselessIsCheckForNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhen.kt")
        public void testRemoveUselessIsCheckInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhen.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenButFalse.kt")
        public void testRemoveUselessIsCheckInWhenButFalse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenButFalse.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionless.kt")
        public void testRemoveUselessIsCheckInWhenExpressionless() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionless.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionlessForNull.kt")
        public void testRemoveUselessIsCheckInWhenExpressionlessForNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionlessForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionlessNegate.kt")
        public void testRemoveUselessIsCheckInWhenExpressionlessNegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionlessNegate.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenExpressionlessNegateForNull.kt")
        public void testRemoveUselessIsCheckInWhenExpressionlessNegateForNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenExpressionlessNegateForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenNegate.kt")
        public void testRemoveUselessIsCheckInWhenNegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenNegate.kt");
        }

        @TestMetadata("removeUselessIsCheckInWhenNegateButTrue.kt")
        public void testRemoveUselessIsCheckInWhenNegateButTrue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckInWhenNegateButTrue.kt");
        }

        @TestMetadata("removeUselessIsCheckNegate.kt")
        public void testRemoveUselessIsCheckNegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckNegate.kt");
        }

        @TestMetadata("removeUselessIsCheckNegateButTrue.kt")
        public void testRemoveUselessIsCheckNegateButTrue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckNegateButTrue.kt");
        }

        @TestMetadata("removeUselessIsCheckNegateForNull.kt")
        public void testRemoveUselessIsCheckNegateForNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckNegateForNull.kt");
        }

        @TestMetadata("removeUselessIsCheckWithWhenGuard.kt")
        public void testRemoveUselessIsCheckWithWhenGuard() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/removeUselessIsCheckWithWhenGuard.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion1.kt")
        public void testUnnecessaryNonNullAssertion1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion1.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion2.kt")
        public void testUnnecessaryNonNullAssertion2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion2.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion3.kt")
        public void testUnnecessaryNonNullAssertion3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion3.kt");
        }

        @TestMetadata("unnecessaryNonNullAssertion4.kt")
        public void testUnnecessaryNonNullAssertion4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessaryNonNullAssertion4.kt");
        }

        @TestMetadata("unnecessarySafeCall1.kt")
        public void testUnnecessarySafeCall1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessarySafeCall1.kt");
        }

        @TestMetadata("unnecessarySafeCall2.kt")
        public void testUnnecessarySafeCall2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unnecessarySafeCall2.kt");
        }

        @TestMetadata("unsafeCall1.kt")
        public void testUnsafeCall1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall1.kt");
        }

        @TestMetadata("unsafeCall2.kt")
        public void testUnsafeCall2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall2.kt");
        }

        @TestMetadata("unsafeCall3.kt")
        public void testUnsafeCall3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall3.kt");
        }

        @TestMetadata("unsafeCall4.kt")
        public void testUnsafeCall4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall4.kt");
        }

        @TestMetadata("unsafeCall5.kt")
        public void testUnsafeCall5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/unsafeCall5.kt");
        }

        @TestMetadata("uselessCastStaticAssertIsFine.kt")
        public void testUselessCastStaticAssertIsFine() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessCastStaticAssertIsFine.kt");
        }

        @TestMetadata("uselessElvis.kt")
        public void testUselessElvis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvis.kt");
        }

        @TestMetadata("uselessElvisForLambdaInNecessaryNestedParens.kt")
        public void testUselessElvisForLambdaInNecessaryNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvisForLambdaInNecessaryNestedParens.kt");
        }

        @TestMetadata("uselessElvisForLambdaInNestedParens.kt")
        public void testUselessElvisForLambdaInNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvisForLambdaInNestedParens.kt");
        }

        @TestMetadata("uselessElvisInNestedParens.kt")
        public void testUselessElvisInNestedParens() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvisInNestedParens.kt");
        }

        @TestMetadata("uselessElvisRightIsNull.kt")
        public void testUselessElvisRightIsNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/expressions/uselessElvisRightIsNull.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/lateinit")
    public static class Lateinit extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/nullable.kt");
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/val.kt");
        }

        @TestMetadata("withGetter.kt")
        public void testWithGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/withGetter.kt");
        }

        @TestMetadata("withGetterSetter.kt")
        public void testWithGetterSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/withGetterSetter.kt");
        }

        @TestMetadata("withInitializer.kt")
        public void testWithInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/withInitializer.kt");
        }

        @TestMetadata("withSetter.kt")
        public void testWithSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/lateinit/withSetter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/localVariableWithTypeParameters")
    public static class LocalVariableWithTypeParameters extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("removeTypeParametersFromLocalVariable.kt")
        public void testRemoveTypeParametersFromLocalVariable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/localVariableWithTypeParameters/removeTypeParametersFromLocalVariable.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/modifiers")
    public static class Modifiers extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractClassMemberNotImplemented.kt")
        public void testAbstractClassMemberNotImplemented() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/abstractClassMemberNotImplemented.kt");
        }

        @TestMetadata("abstractMemberNotImplemented.kt")
        public void testAbstractMemberNotImplemented() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/abstractMemberNotImplemented.kt");
        }

        @TestMetadata("abstractModifierInEnum.kt")
        public void testAbstractModifierInEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/abstractModifierInEnum.kt");
        }

        @TestMetadata("abstractVarWithPrivateSetter.kt")
        public void testAbstractVarWithPrivateSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/abstractVarWithPrivateSetter.kt");
        }

        @TestMetadata("addDataForJvmRecord.kt")
        public void testAddDataForJvmRecord() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addDataForJvmRecord.kt");
        }

        @TestMetadata("addLateinit.kt")
        public void testAddLateinit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addLateinit.kt");
        }

        @TestMetadata("cannotMakeClassAnnotation.kt")
        public void testCannotMakeClassAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/cannotMakeClassAnnotation.kt");
        }

        @TestMetadata("finalInterface.kt")
        public void testFinalInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/finalInterface.kt");
        }

        @TestMetadata("illegalEnumAnnotation1.kt")
        public void testIllegalEnumAnnotation1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/illegalEnumAnnotation1.kt");
        }

        @TestMetadata("illegalEnumAnnotation2.kt")
        public void testIllegalEnumAnnotation2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/illegalEnumAnnotation2.kt");
        }

        @TestMetadata("infixModifier.kt")
        public void testInfixModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/infixModifier.kt");
        }

        @TestMetadata("infixModifierFixAll.kt")
        public void testInfixModifierFixAll() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/infixModifierFixAll.kt");
        }

        @TestMetadata("kt10409.kt")
        public void testKt10409() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/kt10409.kt");
        }

        @TestMetadata("nestedAbstractClass.kt")
        public void testNestedAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedAbstractClass.kt");
        }

        @TestMetadata("nestedAnnotationClass.kt")
        public void testNestedAnnotationClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedAnnotationClass.kt");
        }

        @TestMetadata("nestedClassNotAllowed.kt")
        public void testNestedClassNotAllowed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedClassNotAllowed.kt");
        }

        @TestMetadata("nestedDataClass.kt")
        public void testNestedDataClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedDataClass.kt");
        }

        @TestMetadata("nestedEnumClass.kt")
        public void testNestedEnumClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedEnumClass.kt");
        }

        @TestMetadata("nestedInterface.kt")
        public void testNestedInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedInterface.kt");
        }

        @TestMetadata("nestedObject.kt")
        public void testNestedObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedObject.kt");
        }

        @TestMetadata("nestedSealedClass.kt")
        public void testNestedSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/nestedSealedClass.kt");
        }

        @TestMetadata("noAbstractForAnonymousObject.kt")
        public void testNoAbstractForAnonymousObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/noAbstractForAnonymousObject.kt");
        }

        @TestMetadata("noAbstractForObject.kt")
        public void testNoAbstractForObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/noAbstractForObject.kt");
        }

        @TestMetadata("noLateinitOnNullable.kt")
        public void testNoLateinitOnNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/noLateinitOnNullable.kt");
        }

        @TestMetadata("noLateinitOnPrimitive.kt")
        public void testNoLateinitOnPrimitive() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/noLateinitOnPrimitive.kt");
        }

        @TestMetadata("notAnAnnotationClass.kt")
        public void testNotAnAnnotationClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/notAnAnnotationClass.kt");
        }

        @TestMetadata("openCompanionObject.kt")
        public void testOpenCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openCompanionObject.kt");
        }

        @TestMetadata("openCompanionObject2.kt")
        public void testOpenCompanionObject2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openCompanionObject2.kt");
        }

        @TestMetadata("openMemberInFinalClass1.kt")
        public void testOpenMemberInFinalClass1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass1.kt");
        }

        @TestMetadata("openMemberInFinalClass2.kt")
        public void testOpenMemberInFinalClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass2.kt");
        }

        @TestMetadata("openMemberInFinalClass3.kt")
        public void testOpenMemberInFinalClass3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass3.kt");
        }

        @TestMetadata("openMemberInFinalClass4.kt")
        public void testOpenMemberInFinalClass4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInFinalClass4.kt");
        }

        @TestMetadata("openMemberInObject.kt")
        public void testOpenMemberInObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openMemberInObject.kt");
        }

        @TestMetadata("openModifierInEnum.kt")
        public void testOpenModifierInEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openModifierInEnum.kt");
        }

        @TestMetadata("openObject.kt")
        public void testOpenObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openObject.kt");
        }

        @TestMetadata("openVarWithPrivateSetter1.kt")
        public void testOpenVarWithPrivateSetter1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openVarWithPrivateSetter1.kt");
        }

        @TestMetadata("openVarWithPrivateSetter2.kt")
        public void testOpenVarWithPrivateSetter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/openVarWithPrivateSetter2.kt");
        }

        @TestMetadata("operatorModifier.kt")
        public void testOperatorModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifier.kt");
        }

        @TestMetadata("operatorModifierCollection.kt")
        public void testOperatorModifierCollection() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifierCollection.kt");
        }

        @TestMetadata("operatorModifierComponent.kt")
        public void testOperatorModifierComponent() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifierComponent.kt");
        }

        @TestMetadata("operatorModifierFixAll.kt")
        public void testOperatorModifierFixAll() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifierFixAll.kt");
        }

        @TestMetadata("operatorModifierGet.kt")
        public void testOperatorModifierGet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifierGet.kt");
        }

        @TestMetadata("operatorModifierInherited.kt")
        public void testOperatorModifierInherited() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/operatorModifierInherited.kt");
        }

        @TestMetadata("overrideWithPrivateSetter1.kt")
        public void testOverrideWithPrivateSetter1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/overrideWithPrivateSetter1.kt");
        }

        @TestMetadata("overrideWithPrivateSetter2.kt")
        public void testOverrideWithPrivateSetter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/overrideWithPrivateSetter2.kt");
        }

        @TestMetadata("packageMemberCannotBeProtected.kt")
        public void testPackageMemberCannotBeProtected() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/packageMemberCannotBeProtected.kt");
        }

        @TestMetadata("redundantOpenInInterface.kt")
        public void testRedundantOpenInInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/redundantOpenInInterface.kt");
        }

        @TestMetadata("removeAbstractModifier.kt")
        public void testRemoveAbstractModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeAbstractModifier.kt");
        }

        @TestMetadata("removeConst.kt")
        public void testRemoveConst() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeConst.kt");
        }

        @TestMetadata("removeExternalModifier.kt")
        public void testRemoveExternalModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeExternalModifier.kt");
        }

        @TestMetadata("removeIncompatibleModifier.kt")
        public void testRemoveIncompatibleModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeIncompatibleModifier.kt");
        }

        @TestMetadata("removeInnerForClassInInterface.kt")
        public void testRemoveInnerForClassInInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeInnerForClassInInterface.kt");
        }

        @TestMetadata("removeProtectedModifier.kt")
        public void testRemoveProtectedModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeProtectedModifier.kt");
        }

        @TestMetadata("removeRedundantModifier1.kt")
        public void testRemoveRedundantModifier1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeRedundantModifier1.kt");
        }

        @TestMetadata("removeRedundantModifier2.kt")
        public void testRemoveRedundantModifier2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeRedundantModifier2.kt");
        }

        @TestMetadata("removeRedundantModifier3.kt")
        public void testRemoveRedundantModifier3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeRedundantModifier3.kt");
        }

        @TestMetadata("removeSupertype1.kt")
        public void testRemoveSupertype1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeSupertype1.kt");
        }

        @TestMetadata("removeSupertype2.kt")
        public void testRemoveSupertype2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeSupertype2.kt");
        }

        @TestMetadata("removeSupertype3.kt")
        public void testRemoveSupertype3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeSupertype3.kt");
        }

        @TestMetadata("removeSupertype4.kt")
        public void testRemoveSupertype4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/removeSupertype4.kt");
        }

        @TestMetadata("visibilityModifer1.kt")
        public void testVisibilityModifer1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/visibilityModifer1.kt");
        }

        @TestMetadata("visibilityModifer2.kt")
        public void testVisibilityModifer2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/visibilityModifer2.kt");
        }

        @TestMetadata("visibilityModiferOverrideJavaRuntime.kt")
        public void testVisibilityModiferOverrideJavaRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/visibilityModiferOverrideJavaRuntime.kt");
        }

        @TestMetadata("visibilityModiferParameter.kt")
        public void testVisibilityModiferParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/visibilityModiferParameter.kt");
        }

        @TestMetadata("withAnnotationAndBlockComment.kt")
        public void testWithAnnotationAndBlockComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/withAnnotationAndBlockComment.kt");
        }

        @TestMetadata("withAnnotationAndEolComment.kt")
        public void testWithAnnotationAndEolComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/withAnnotationAndEolComment.kt");
        }

        @TestMetadata("withAnnotationAndEolComment2.kt")
        public void testWithAnnotationAndEolComment2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/withAnnotationAndEolComment2.kt");
        }

        @TestMetadata("withAnnotationAndEolComment3.kt")
        public void testWithAnnotationAndEolComment3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/withAnnotationAndEolComment3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration")
    public static class AddOpenToClassDeclaration extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationSuperType.kt")
        public void testAnnotationSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/annotationSuperType.kt");
        }

        @TestMetadata("dataSuperType.kt")
        public void testDataSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/dataSuperType.kt");
        }

        @TestMetadata("enumSupertype.kt")
        public void testEnumSupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/enumSupertype.kt");
        }

        @TestMetadata("enumUpperBound.kt")
        public void testEnumUpperBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/enumUpperBound.kt");
        }

        @TestMetadata("explicitlyFinalSupertype.kt")
        public void testExplicitlyFinalSupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/explicitlyFinalSupertype.kt");
        }

        @TestMetadata("explicitlyFinalUpperBound.kt")
        public void testExplicitlyFinalUpperBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/explicitlyFinalUpperBound.kt");
        }

        @TestMetadata("finalLibrarySupertype.kt")
        public void testFinalLibrarySupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalLibrarySupertype.kt");
        }

        @TestMetadata("finalLibraryUpperBound.kt")
        public void testFinalLibraryUpperBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalLibraryUpperBound.kt");
        }

        @TestMetadata("finalSupertype.kt")
        public void testFinalSupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalSupertype.kt");
        }

        @TestMetadata("finalUpperBound.kt")
        public void testFinalUpperBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/finalUpperBound.kt");
        }

        @TestMetadata("implementInterfaceFinalSupertype.kt")
        public void testImplementInterfaceFinalSupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/implementInterfaceFinalSupertype.kt");
        }

        @TestMetadata("inlineSuperType.kt")
        public void testInlineSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/inlineSuperType.kt");
        }

        @TestMetadata("nestedFinalClass.kt")
        public void testNestedFinalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/nestedFinalClass.kt");
        }

        @TestMetadata("openInCompanion.kt")
        public void testOpenInCompanion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/openInCompanion.kt");
        }

        @TestMetadata("secondaryCtrDelegationInHeader.kt")
        public void testSecondaryCtrDelegationInHeader() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/secondaryCtrDelegationInHeader.kt");
        }

        @TestMetadata("secondaryCtrDelegationInSecondary.kt")
        public void testSecondaryCtrDelegationInSecondary() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/secondaryCtrDelegationInSecondary.kt");
        }

        @TestMetadata("valueSuperType.kt")
        public void testValueSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/valueSuperType.kt");
        }

        @TestMetadata("withConstructor.kt")
        public void testWithConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/addOpenToClassDeclaration/withConstructor.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/modifiers/suspend")
    public static class Suspend extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("anonymousFunction.kt")
        public void testAnonymousFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/anonymousFunction.kt");
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/base.kt");
        }

        @TestMetadata("createCoroutine.kt")
        public void testCreateCoroutine() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/createCoroutine.kt");
        }

        @TestMetadata("inLambda.kt")
        public void testInLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/inLambda.kt");
        }

        @TestMetadata("inLambda2.kt")
        public void testInLambda2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/inLambda2.kt");
        }

        @TestMetadata("inLambda3.kt")
        public void testInLambda3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/inLambda3.kt");
        }

        @TestMetadata("init.kt")
        public void testInit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/init.kt");
        }

        @TestMetadata("open.kt")
        public void testOpen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/open.kt");
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/override.kt");
        }

        @TestMetadata("public.kt")
        public void testPublic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/public.kt");
        }

        @TestMetadata("startCoroutine.kt")
        public void testStartCoroutine() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/startCoroutine.kt");
        }

        @TestMetadata("startCoroutineNoImport.kt")
        public void testStartCoroutineNoImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/startCoroutineNoImport.kt");
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/modifiers/suspend/topLevel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/nullables")
    public abstract static class Nullables extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/nullables")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("removeRedundantNullable.kt")
            public void testRemoveRedundantNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/removeRedundantNullable.kt");
            }

            @TestMetadata("removeSupertypeNullable1.kt")
            public void testRemoveSupertypeNullable1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/removeSupertypeNullable1.kt");
            }

            @TestMetadata("removeSupertypeNullable2.kt")
            public void testRemoveSupertypeNullable2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/removeSupertypeNullable2.kt");
            }

            @TestMetadata("removeUselessNullable.kt")
            public void testRemoveUselessNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/removeUselessNullable.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall")
        public static class UnsafeInfixCall extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("noComparison.kt")
            public void testNoComparison() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/noComparison.kt");
            }

            @TestMetadata("unsafeComparisonInCondition.kt")
            public void testUnsafeComparisonInCondition() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInCondition.kt");
            }

            @TestMetadata("unsafeComparisonInLogic.kt")
            public void testUnsafeComparisonInLogic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInLogic.kt");
            }

            @TestMetadata("unsafeComparisonInWhen.kt")
            public void testUnsafeComparisonInWhen() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInWhen.kt");
            }

            @TestMetadata("unsafeComparisonInWhile.kt")
            public void testUnsafeComparisonInWhile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeComparisonInWhile.kt");
            }

            @TestMetadata("unsafeGet.kt")
            public void testUnsafeGet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeGet.kt");
            }

            @TestMetadata("unsafeInfixCall.kt")
            public void testUnsafeInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInfixCall.kt");
            }

            @TestMetadata("unsafeInvoke.kt")
            public void testUnsafeInvoke() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInvoke.kt");
            }

            @TestMetadata("unsafeInvokeWithImplicitReceiver.kt")
            public void testUnsafeInvokeWithImplicitReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInvokeWithImplicitReceiver.kt");
            }

            @TestMetadata("unsafeInvokeWithReceiver.kt")
            public void testUnsafeInvokeWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeInvokeWithReceiver.kt");
            }

            @TestMetadata("unsafePlus.kt")
            public void testUnsafePlus() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafePlus.kt");
            }

            @TestMetadata("unsafeSet.kt")
            public void testUnsafeSet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/nullables/unsafeInfixCall/unsafeSet.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/override")
    public static class Override extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractFakeOverrideInExpectClass.kt")
        public void testAbstractFakeOverrideInExpectClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/abstractFakeOverrideInExpectClass.kt");
        }

        @TestMetadata("changeToInvocation.kt")
        public void testChangeToInvocation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/changeToInvocation.kt");
        }

        @TestMetadata("implemenAsConstructorParameter.kt")
        public void testImplemenAsConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implemenAsConstructorParameter.kt");
        }

        @TestMetadata("implemenAsConstructorParameterFunction.kt")
        public void testImplemenAsConstructorParameterFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implemenAsConstructorParameterFunction.kt");
        }

        @TestMetadata("implemenAsConstructorParameterInObject.kt")
        public void testImplemenAsConstructorParameterInObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implemenAsConstructorParameterInObject.kt");
        }

        @TestMetadata("implementMember.kt")
        public void testImplementMember() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implementMember.kt");
        }

        @TestMetadata("implementMemberByEnumEntry.kt")
        public void testImplementMemberByEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implementMemberByEnumEntry.kt");
        }

        @TestMetadata("implementMemberFromAbstractClass.kt")
        public void testImplementMemberFromAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/implementMemberFromAbstractClass.kt");
        }

        @TestMetadata("overriddingMultipleFinalMethods.kt")
        public void testOverriddingMultipleFinalMethods() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overriddingMultipleFinalMethods.kt");
        }

        @TestMetadata("overridingDelegatedMethod.kt")
        public void testOverridingDelegatedMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingDelegatedMethod.kt");
        }

        @TestMetadata("overridingFakeOverride.kt")
        public void testOverridingFakeOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFakeOverride.kt");
        }

        @TestMetadata("overridingFinalJavaMethod.kt")
        public void testOverridingFinalJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalJavaMethod.kt");
        }

        @TestMetadata("overridingFinalMethod.kt")
        public void testOverridingFinalMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalMethod.kt");
        }

        @TestMetadata("overridingFinalMethodInLocal.kt")
        public void testOverridingFinalMethodInLocal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalMethodInLocal.kt");
        }

        @TestMetadata("overridingFinalOverrideMethod.kt")
        public void testOverridingFinalOverrideMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalOverrideMethod.kt");
        }

        @TestMetadata("overridingFinalProperty.kt")
        public void testOverridingFinalProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingFinalProperty.kt");
        }

        @TestMetadata("overridingOpenMethodInFinalClass.kt")
        public void testOverridingOpenMethodInFinalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overridingOpenMethodInFinalClass.kt");
        }

        @TestMetadata("parameterNameChangedAmbiguousRename.kt")
        public void testParameterNameChangedAmbiguousRename() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/parameterNameChangedAmbiguousRename.kt");
        }

        @TestMetadata("parameterNameChangedMultipleOverrideRenamePossible.kt")
        public void testParameterNameChangedMultipleOverrideRenamePossible() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/parameterNameChangedMultipleOverrideRenamePossible.kt");
        }

        @TestMetadata("parameterNameChangedRenamePossible.kt")
        public void testParameterNameChangedRenamePossible() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/parameterNameChangedRenamePossible.kt");
        }

        @TestMetadata("virtualMethodHidden.kt")
        public void testVirtualMethodHidden() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHidden.kt");
        }

        @TestMetadata("virtualMethodHiddenWithInternalModifier.kt")
        public void testVirtualMethodHiddenWithInternalModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHiddenWithInternalModifier.kt");
        }

        @TestMetadata("virtualMethodHiddenWithPrivateModifier.kt")
        public void testVirtualMethodHiddenWithPrivateModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHiddenWithPrivateModifier.kt");
        }

        @TestMetadata("virtualMethodHiddenWithProtectedModifier.kt")
        public void testVirtualMethodHiddenWithProtectedModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHiddenWithProtectedModifier.kt");
        }

        @TestMetadata("virtualMethodHiddenWithPublicModifier.kt")
        public void testVirtualMethodHiddenWithPublicModifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/virtualMethodHiddenWithPublicModifier.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/override/nothingToOverride")
    public static class NothingToOverride extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addFunction.kt")
        public void testAddFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunction.kt");
        }

        @TestMetadata("addFunctionAbstractClass.kt")
        public void testAddFunctionAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionAbstractClass.kt");
        }

        @TestMetadata("addFunctionInLocalDeclaration.kt")
        public void testAddFunctionInLocalDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionInLocalDeclaration.kt");
        }

        @TestMetadata("addFunctionInterface.kt")
        public void testAddFunctionInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionInterface.kt");
        }

        @TestMetadata("addFunctionNoBody.kt")
        public void testAddFunctionNoBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionNoBody.kt");
        }

        @TestMetadata("addFunctionNonUnitReturnType.kt")
        public void testAddFunctionNonUnitReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionNonUnitReturnType.kt");
        }

        @TestMetadata("addFunctionReciever.kt")
        public void testAddFunctionReciever() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionReciever.kt");
        }

        @TestMetadata("addFunctionSealedClass.kt")
        public void testAddFunctionSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionSealedClass.kt");
        }

        @TestMetadata("addFunctionToReadOnlySupertype.kt")
        public void testAddFunctionToReadOnlySupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionToReadOnlySupertype.kt");
        }

        @TestMetadata("addFunctionTwoInterfaces.kt")
        public void testAddFunctionTwoInterfaces() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionTwoInterfaces.kt");
        }

        @TestMetadata("addFunctionTwoSuperclasses.kt")
        public void testAddFunctionTwoSuperclasses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionTwoSuperclasses.kt");
        }

        @TestMetadata("addFunctionWithAnnotations.kt")
        public void testAddFunctionWithAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionWithAnnotations.kt");
        }

        @TestMetadata("addFunctionWithoutDefaultValue.kt")
        public void testAddFunctionWithoutDefaultValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addFunctionWithoutDefaultValue.kt");
        }

        @TestMetadata("addParameter.kt")
        public void testAddParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addParameter.kt");
        }

        @TestMetadata("addParameterGenericClass.kt")
        public void testAddParameterGenericClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addParameterGenericClass.kt");
        }

        @TestMetadata("addParameterMultiple.kt")
        public void testAddParameterMultiple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addParameterMultiple.kt");
        }

        @TestMetadata("addParameterPreserveVisibility.kt")
        public void testAddParameterPreserveVisibility() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addParameterPreserveVisibility.kt");
        }

        @TestMetadata("addParameterTwoSuperinterfaces.kt")
        public void testAddParameterTwoSuperinterfaces() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addParameterTwoSuperinterfaces.kt");
        }

        @TestMetadata("addParameterTwoSupertypes.kt")
        public void testAddParameterTwoSupertypes() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addParameterTwoSupertypes.kt");
        }

        @TestMetadata("addPropertyAbstractClass.kt")
        public void testAddPropertyAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addPropertyAbstractClass.kt");
        }

        @TestMetadata("addPropertyHasAnnotations.kt")
        public void testAddPropertyHasAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addPropertyHasAnnotations.kt");
        }

        @TestMetadata("addPropertyInterface.kt")
        public void testAddPropertyInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addPropertyInterface.kt");
        }

        @TestMetadata("addPropertyOpenClass.kt")
        public void testAddPropertyOpenClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addPropertyOpenClass.kt");
        }

        @TestMetadata("addTypeParameter.kt")
        public void testAddTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addTypeParameter.kt");
        }

        @TestMetadata("addTypeParameter2.kt")
        public void testAddTypeParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/addTypeParameter2.kt");
        }

        @TestMetadata("changeFunctionReciever.kt")
        public void testChangeFunctionReciever() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeFunctionReciever.kt");
        }

        @TestMetadata("changeParameterType.kt")
        public void testChangeParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeParameterType.kt");
        }

        @TestMetadata("changeParameterTypeAbstractSuperclass.kt")
        public void testChangeParameterTypeAbstractSuperclass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeParameterTypeAbstractSuperclass.kt");
        }

        @TestMetadata("changeParameterTypeDefinitelyNotNull.kt")
        public void testChangeParameterTypeDefinitelyNotNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeParameterTypeDefinitelyNotNull.kt");
        }

        @TestMetadata("changeParameterTypeInInterface.kt")
        public void testChangeParameterTypeInInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeParameterTypeInInterface.kt");
        }

        @TestMetadata("changeParameterTypeMatchNames.kt")
        public void testChangeParameterTypeMatchNames() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeParameterTypeMatchNames.kt");
        }

        @TestMetadata("changeParameterTypeModifyOrder.kt")
        public void testChangeParameterTypeModifyOrder() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeParameterTypeModifyOrder.kt");
        }

        @TestMetadata("changeParameterTypeOpenOverride.kt")
        public void testChangeParameterTypeOpenOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeParameterTypeOpenOverride.kt");
        }

        @TestMetadata("changeParameterTypeSingleExpressionFunction.kt")
        public void testChangeParameterTypeSingleExpressionFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeParameterTypeSingleExpressionFunction.kt");
        }

        @TestMetadata("changeParameterTypeSuperInterface.kt")
        public void testChangeParameterTypeSuperInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeParameterTypeSuperInterface.kt");
        }

        @TestMetadata("changeReturnType.kt")
        public void testChangeReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeReturnType.kt");
        }

        @TestMetadata("changeTypeParameter.kt")
        public void testChangeTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/changeTypeParameter.kt");
        }

        @TestMetadata("doNotLooseAnnotations.kt")
        public void testDoNotLooseAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/doNotLooseAnnotations.kt");
        }

        @TestMetadata("noDefaultValuesInOverride.kt")
        public void testNoDefaultValuesInOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/noDefaultValuesInOverride.kt");
        }

        @TestMetadata("noOpenSuperFunction.kt")
        public void testNoOpenSuperFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/noOpenSuperFunction.kt");
        }

        @TestMetadata("overrideJavaMethod.kt")
        public void testOverrideJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/overrideJavaMethod.kt");
        }

        @TestMetadata("removeFunctionReciever.kt")
        public void testRemoveFunctionReciever() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/removeFunctionReciever.kt");
        }

        @TestMetadata("removeOverride.kt")
        public void testRemoveOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/removeOverride.kt");
        }

        @TestMetadata("removeParameter.kt")
        public void testRemoveParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/removeParameter.kt");
        }

        @TestMetadata("removeParameterTwoInterfaces.kt")
        public void testRemoveParameterTwoInterfaces() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/removeParameterTwoInterfaces.kt");
        }

        @TestMetadata("removeTypeParameter.kt")
        public void testRemoveTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/removeTypeParameter.kt");
        }

        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/suspendFunction.kt");
        }

        @TestMetadata("suspendFunction2.kt")
        public void testSuspendFunction2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/suspendFunction2.kt");
        }

        @TestMetadata("swapParametersGenericClass.kt")
        public void testSwapParametersGenericClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/nothingToOverride/swapParametersGenericClass.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/override/overrideDeprecation")
    public static class OverrideDeprecation extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("copyDeprecation1.kt")
        public void testCopyDeprecation1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overrideDeprecation/copyDeprecation1.kt");
        }

        @TestMetadata("copyDeprecation2.kt")
        public void testCopyDeprecation2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overrideDeprecation/copyDeprecation2.kt");
        }

        @TestMetadata("copyDeprecation3.kt")
        public void testCopyDeprecation3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overrideDeprecation/copyDeprecation3.kt");
        }

        @TestMetadata("copyDeprecation4.kt")
        public void testCopyDeprecation4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overrideDeprecation/copyDeprecation4.kt");
        }

        @TestMetadata("copyDeprecationProperty.kt")
        public void testCopyDeprecationProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overrideDeprecation/copyDeprecationProperty.kt");
        }

        @TestMetadata("copyDeprecationWithEscapedMessage.kt")
        public void testCopyDeprecationWithEscapedMessage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overrideDeprecation/copyDeprecationWithEscapedMessage.kt");
        }

        @TestMetadata("suppressWarning.kt")
        public void testSuppressWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/overrideDeprecation/suppressWarning.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride")
    public static class TypeMismatchOnOverride extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cantChangeMultipleOverriddenPropertiesTypes.kt")
        public void testCantChangeMultipleOverriddenPropertiesTypes() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangeMultipleOverriddenPropertiesTypes.kt");
        }

        @TestMetadata("cantChangeOverriddenPropertyTypeToMatchOverridingProperty.kt")
        public void testCantChangeOverriddenPropertyTypeToMatchOverridingProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangeOverriddenPropertyTypeToMatchOverridingProperty.kt");
        }

        @TestMetadata("cantChangePropertyTypeToMatchOverridenProperties.kt")
        public void testCantChangePropertyTypeToMatchOverridenProperties() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangePropertyTypeToMatchOverridenProperties.kt");
        }

        @TestMetadata("cantChangeReturnTypeOfOverriddenFunction.kt")
        public void testCantChangeReturnTypeOfOverriddenFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/cantChangeReturnTypeOfOverriddenFunction.kt");
        }

        @TestMetadata("changeOverriddenPropertyType1.kt")
        public void testChangeOverriddenPropertyType1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverriddenPropertyType1.kt");
        }

        @TestMetadata("changeOverriddenPropertyType2.kt")
        public void testChangeOverriddenPropertyType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverriddenPropertyType2.kt");
        }

        @TestMetadata("changeOverriddenPropertyTypeFromCtorParameter.kt")
        public void testChangeOverriddenPropertyTypeFromCtorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverriddenPropertyTypeFromCtorParameter.kt");
        }

        @TestMetadata("changeOverridingCtorParameterType.kt")
        public void testChangeOverridingCtorParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverridingCtorParameterType.kt");
        }

        @TestMetadata("changeOverridingPropertyTypeToFunctionType.kt")
        public void testChangeOverridingPropertyTypeToFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeOverridingPropertyTypeToFunctionType.kt");
        }

        @TestMetadata("changeReturnTypeOfOverriddenFunction.kt")
        public void testChangeReturnTypeOfOverriddenFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/changeReturnTypeOfOverriddenFunction.kt");
        }

        @TestMetadata("namedFunctionReturnOverrideInsideVariableInitializer.kt")
        public void testNamedFunctionReturnOverrideInsideVariableInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/namedFunctionReturnOverrideInsideVariableInitializer.kt");
        }

        @TestMetadata("objectInsideBody.kt")
        public void testObjectInsideBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/objectInsideBody.kt");
        }

        @TestMetadata("propertyReturnTypeMismatchOnOverride.kt")
        public void testPropertyReturnTypeMismatchOnOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/propertyReturnTypeMismatchOnOverride.kt");
        }

        @TestMetadata("propertyTypeMismatchOnOverrideIntLong.kt")
        public void testPropertyTypeMismatchOnOverrideIntLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/propertyTypeMismatchOnOverrideIntLong.kt");
        }

        @TestMetadata("propertyTypeMismatchOnOverrideIntUnit.kt")
        public void testPropertyTypeMismatchOnOverrideIntUnit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/propertyTypeMismatchOnOverrideIntUnit.kt");
        }

        @TestMetadata("returnTypeMismatchOnMultipleOverride.kt")
        public void testReturnTypeMismatchOnMultipleOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnMultipleOverride.kt");
        }

        @TestMetadata("returnTypeMismatchOnMultipleOverrideAmbiguity.kt")
        public void testReturnTypeMismatchOnMultipleOverrideAmbiguity() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnMultipleOverrideAmbiguity.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverrideIntLong.kt")
        public void testReturnTypeMismatchOnOverrideIntLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnOverrideIntLong.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverrideIntUnit.kt")
        public void testReturnTypeMismatchOnOverrideIntUnit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnOverrideIntUnit.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverrideUnitInt.kt")
        public void testReturnTypeMismatchOnOverrideUnitInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/override/typeMismatchOnOverride/returnTypeMismatchOnOverrideUnitInt.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeRedundantSpreadOperator")
    public static class RemoveRedundantSpreadOperator extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantSpreadOperator/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard")
    public static class ReplaceAndWithWhenGuard extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("alreadyUsingGuard.kt")
        public void testAlreadyUsingGuard() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/alreadyUsingGuard.kt");
        }

        @TestMetadata("else.kt")
        public void testElse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/else.kt");
        }

        @TestMetadata("elseWithAnd.kt")
        public void testElseWithAnd() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/elseWithAnd.kt");
        }

        @TestMetadata("multipleAnds.kt")
        public void testMultipleAnds() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/multipleAnds.kt");
        }

        @TestMetadata("multipleConditions1.kt")
        public void testMultipleConditions1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/multipleConditions1.kt");
        }

        @TestMetadata("multipleConditions2.kt")
        public void testMultipleConditions2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/multipleConditions2.kt");
        }

        @TestMetadata("notAvailableAtWhen.kt")
        public void testNotAvailableAtWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/notAvailableAtWhen.kt");
        }

        @TestMetadata("or.kt")
        public void testOr() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/or.kt");
        }

        @TestMetadata("orAfterAnd.kt")
        public void testOrAfterAnd() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/orAfterAnd.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/simple.kt");
        }

        @TestMetadata("whenWithoutSubject.kt")
        public void testWhenWithoutSubject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceAndWithWhenGuard/whenWithoutSubject.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall")
    public static class ReplaceInfixOrOperatorCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("array.kt")
        public void testArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/array.kt");
        }

        @TestMetadata("arraySet.kt")
        public void testArraySet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/arraySet.kt");
        }

        @TestMetadata("assignmentArray.kt")
        public void testAssignmentArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentArray.kt");
        }

        @TestMetadata("assignmentBinaryOperator.kt")
        public void testAssignmentBinaryOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentBinaryOperator.kt");
        }

        @TestMetadata("assignmentCallExpression.kt")
        public void testAssignmentCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentCallExpression.kt");
        }

        @TestMetadata("assignmentList.kt")
        public void testAssignmentList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/assignmentList.kt");
        }

        @TestMetadata("augmentedAssignmentAvailable.kt")
        public void testAugmentedAssignmentAvailable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/augmentedAssignmentAvailable.kt");
        }

        @TestMetadata("augmentedAssignmentNotAvailable.kt")
        public void testAugmentedAssignmentNotAvailable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/augmentedAssignmentNotAvailable.kt");
        }

        @TestMetadata("binaryOperator.kt")
        public void testBinaryOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/binaryOperator.kt");
        }

        @TestMetadata("callExpression.kt")
        public void testCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/callExpression.kt");
        }

        @TestMetadata("callExpressionInSafeQualified.kt")
        public void testCallExpressionInSafeQualified() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/callExpressionInSafeQualified.kt");
        }

        @TestMetadata("callExpressionInSafeQualified2.kt")
        public void testCallExpressionInSafeQualified2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/callExpressionInSafeQualified2.kt");
        }

        @TestMetadata("containsBinaryOperator.kt")
        public void testContainsBinaryOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/containsBinaryOperator.kt");
        }

        @TestMetadata("divAssignOnMutableMap.kt")
        public void testDivAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/divAssignOnMutableMap.kt");
        }

        @TestMetadata("hasElvis.kt")
        public void testHasElvis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/hasElvis.kt");
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/list.kt");
        }

        @TestMetadata("minusAssignOnMutableMap.kt")
        public void testMinusAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/minusAssignOnMutableMap.kt");
        }

        @TestMetadata("notContainsBinaryOperator.kt")
        public void testNotContainsBinaryOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/notContainsBinaryOperator.kt");
        }

        @TestMetadata("plusAssignOnMutableMap.kt")
        public void testPlusAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/plusAssignOnMutableMap.kt");
        }

        @TestMetadata("plusAssignOnMutableMapWithNullableValueType.kt")
        public void testPlusAssignOnMutableMapWithNullableValueType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/plusAssignOnMutableMapWithNullableValueType.kt");
        }

        @TestMetadata("remAssignOnMutableMap.kt")
        public void testRemAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/remAssignOnMutableMap.kt");
        }

        @TestMetadata("timesAssignOnMutableMap.kt")
        public void testTimesAssignOnMutableMap() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceInfixOrOperatorCall/timesAssignOnMutableMap.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation")
    public static class ReplaceWithArrayCallInAnnotation extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("emptyLiteral.kt")
        public void testEmptyLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/emptyLiteral.kt");
        }

        @TestMetadata("literalWithValues.kt")
        public void testLiteralWithValues() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/literalWithValues.kt");
        }

        @TestMetadata("replaceForbiddenAssignmentWithArrayLiteral.kt")
        public void testReplaceForbiddenAssignmentWithArrayLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/replaceForbiddenAssignmentWithArrayLiteral.kt");
        }

        @TestMetadata("replaceSingleElementInNamedForm.kt")
        public void testReplaceSingleElementInNamedForm() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/replaceSingleElementInNamedForm.kt");
        }

        @TestMetadata("replaceSingleElementInNamedForm_1_2.kt")
        public void testReplaceSingleElementInNamedForm_1_2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithArrayCallInAnnotation/replaceSingleElementInNamedForm_1_2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceWithDotCall")
    public static class ReplaceWithDotCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("callWillChangeNullability.kt")
        public void testCallWillChangeNullability() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/callWillChangeNullability.kt");
        }

        @TestMetadata("callWillChangeNullability2.kt")
        public void testCallWillChangeNullability2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/callWillChangeNullability2.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/comment.kt");
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/functionCall.kt");
        }

        @TestMetadata("lineBreak.kt")
        public void testLineBreak() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/lineBreak.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/normal.kt");
        }

        @TestMetadata("safeCallChain.kt")
        public void testSafeCallChain() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/safeCallChain.kt");
        }

        @TestMetadata("safeCallChain2.kt")
        public void testSafeCallChain2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/safeCallChain2.kt");
        }

        @TestMetadata("safeCallChain3.kt")
        public void testSafeCallChain3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithDotCall/safeCallChain3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceWithSafeCall")
    public static class ReplaceWithSafeCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("apply.kt")
        public void testApply() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/apply.kt");
        }

        @TestMetadata("applyWithImplicitParameter.kt")
        public void testApplyWithImplicitParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/applyWithImplicitParameter.kt");
        }

        @TestMetadata("applyWithImplicitParameterFunctionCall.kt")
        public void testApplyWithImplicitParameterFunctionCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/applyWithImplicitParameterFunctionCall.kt");
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/argument.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignment.kt");
        }

        @TestMetadata("assignmentFromImplicitParameter.kt")
        public void testAssignmentFromImplicitParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentFromImplicitParameter.kt");
        }

        @TestMetadata("assignmentToNullable.kt")
        public void testAssignmentToNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToNullable.kt");
        }

        @TestMetadata("assignmentToProperty.kt")
        public void testAssignmentToProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToProperty.kt");
        }

        @TestMetadata("assignmentToPropertyWithNoExplicitType.kt")
        public void testAssignmentToPropertyWithNoExplicitType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToPropertyWithNoExplicitType.kt");
        }

        @TestMetadata("assignmentToUnsafeCallExpression.kt")
        public void testAssignmentToUnsafeCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/assignmentToUnsafeCallExpression.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/comment.kt");
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/expression.kt");
        }

        @TestMetadata("extFunction.kt")
        public void testExtFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/extFunction.kt");
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/functionCall.kt");
        }

        @TestMetadata("functionExpressionBody.kt")
        public void testFunctionExpressionBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/functionExpressionBody.kt");
        }

        @TestMetadata("functionExpressionBodyWithNoExplicitType.kt")
        public void testFunctionExpressionBodyWithNoExplicitType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/functionExpressionBodyWithNoExplicitType.kt");
        }

        @TestMetadata("hasElvis.kt")
        public void testHasElvis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/hasElvis.kt");
        }

        @TestMetadata("hasElvis2.kt")
        public void testHasElvis2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/hasElvis2.kt");
        }

        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/invokeOperator.kt");
        }

        @TestMetadata("invokeOperator2.kt")
        public void testInvokeOperator2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/invokeOperator2.kt");
        }

        @TestMetadata("lastStatementOfLambdaAsArgument.kt")
        public void testLastStatementOfLambdaAsArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/lastStatementOfLambdaAsArgument.kt");
        }

        @TestMetadata("lastStatementOfLambdaAsLocalVariable.kt")
        public void testLastStatementOfLambdaAsLocalVariable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/lastStatementOfLambdaAsLocalVariable.kt");
        }

        @TestMetadata("lastStatementOfLambdaAsProperty.kt")
        public void testLastStatementOfLambdaAsProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/lastStatementOfLambdaAsProperty.kt");
        }

        @TestMetadata("let.kt")
        public void testLet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/let.kt");
        }

        @TestMetadata("letWithParameter.kt")
        public void testLetWithParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/letWithParameter.kt");
        }

        @TestMetadata("lineBreak.kt")
        public void testLineBreak() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/lineBreak.kt");
        }

        @TestMetadata("noReplaceWithSafeCallForImplicitReceiver.kt")
        public void testNoReplaceWithSafeCallForImplicitReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/noReplaceWithSafeCallForImplicitReceiver.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/normal.kt");
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceWithSafeCall/return.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode")
    public static class SpecifyVisibilityInExplicitApiMode extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/class.kt");
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/companion.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/constructor.kt");
        }

        @TestMetadata("method.kt")
        public void testMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/method.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyVisibilityInExplicitApiMode/property.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/supercalls")
    public static class Supercalls extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("typeArgumentsRedundantInSuperQualifier.kt")
        public void testTypeArgumentsRedundantInSuperQualifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supercalls/typeArgumentsRedundantInSuperQualifier.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs")
    public static class SurroundWithArrayOfForNamedArgumentsToVarargs extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("onlyShortenInsertedArrayOfCall.kt")
        public void testOnlyShortenInsertedArrayOfCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/onlyShortenInsertedArrayOfCall.kt");
        }

        @TestMetadata("replaceForVarargOfAny.kt")
        public void testReplaceForVarargOfAny() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceForVarargOfAny.kt");
        }

        @TestMetadata("replaceForbiddenAssigningIntoArrayCall.kt")
        public void testReplaceForbiddenAssigningIntoArrayCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceForbiddenAssigningIntoArrayCall.kt");
        }

        @TestMetadata("replaceToArrayOfPrimitiveTypes.kt")
        public void testReplaceToArrayOfPrimitiveTypes() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceToArrayOfPrimitiveTypes.kt");
        }

        @TestMetadata("replaceToArrayOfPrimitiveTypes_1_2.kt")
        public void testReplaceToArrayOfPrimitiveTypes_1_2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/replaceToArrayOfPrimitiveTypes_1_2.kt");
        }

        @TestMetadata("simpleNamedArgumentToVararg.kt")
        public void testSimpleNamedArgumentToVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/simpleNamedArgumentToVararg.kt");
        }

        @TestMetadata("simpleNamedArgumentToVararg_1_2.kt")
        public void testSimpleNamedArgumentToVararg_1_2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/simpleNamedArgumentToVararg_1_2.kt");
        }

        @TestMetadata("surroundWithSpreadForConstructorCall.kt")
        public void testSurroundWithSpreadForConstructorCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/surroundWithSpreadForConstructorCall.kt");
        }

        @TestMetadata("surroundWithSpreadForConstructorCall_1_2.kt")
        public void testSurroundWithSpreadForConstructorCall_1_2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithArrayOfForNamedArgumentsToVarargs/surroundWithSpreadForConstructorCall_1_2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/variables/changeMutability")
    public static class ChangeMutability extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("capturedMemberValInitialization.kt")
        public void testCapturedMemberValInitialization() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/capturedMemberValInitialization.kt");
        }

        @TestMetadata("capturedValInitialization.kt")
        public void testCapturedValInitialization() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/capturedValInitialization.kt");
        }

        @TestMetadata("const.kt")
        public void testConst() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/const.kt");
        }

        @TestMetadata("funParameter.kt")
        public void testFunParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/funParameter.kt");
        }

        @TestMetadata("localInGetter.kt")
        public void testLocalInGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/localInGetter.kt");
        }

        @TestMetadata("valOverrideVar.kt")
        public void testValOverrideVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valOverrideVar.kt");
        }

        @TestMetadata("valOverrideVarConstructorParameter.kt")
        public void testValOverrideVarConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valOverrideVarConstructorParameter.kt");
        }

        @TestMetadata("valReassignmentLocal.kt")
        public void testValReassignmentLocal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentLocal.kt");
        }

        @TestMetadata("valReassignmentOuterDecl.kt")
        public void testValReassignmentOuterDecl() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentOuterDecl.kt");
        }

        @TestMetadata("valReassignmentProperty.kt")
        public void testValReassignmentProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentProperty.kt");
        }

        @TestMetadata("valReassignmentPropertyConstructorParameter.kt")
        public void testValReassignmentPropertyConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valReassignmentPropertyConstructorParameter.kt");
        }

        @TestMetadata("valWithSetter.kt")
        public void testValWithSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/valWithSetter.kt");
        }

        @TestMetadata("varAnnotationParameter.kt")
        public void testVarAnnotationParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/varAnnotationParameter.kt");
        }

        @TestMetadata("volatileOnValue.kt")
        public void testVolatileOnValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/volatileOnValue.kt");
        }

        @TestMetadata("volatileOnValueLocal.kt")
        public void testVolatileOnValueLocal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/volatileOnValueLocal.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal")
    public static class CanBeVal extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("const.kt")
        public void testConst() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal/const.kt");
        }

        @TestMetadata("delegatedProperty.kt")
        public void testDelegatedProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal/delegatedProperty.kt");
        }

        @TestMetadata("delegatedProperty2.kt")
        public void testDelegatedProperty2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal/delegatedProperty2.kt");
        }

        @TestMetadata("delegatedProperty3.kt")
        public void testDelegatedProperty3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal/delegatedProperty3.kt");
        }

        @TestMetadata("multiVariable.kt")
        public void testMultiVariable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal/multiVariable.kt");
        }

        @TestMetadata("singleVariable.kt")
        public void testSingleVariable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal/singleVariable.kt");
        }

        @TestMetadata("uninitializedWithGetter.kt")
        public void testUninitializedWithGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal/uninitializedWithGetter.kt");
        }

        @TestMetadata("uninitializedWithGetter2.kt")
        public void testUninitializedWithGetter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal/uninitializedWithGetter2.kt");
        }

        @TestMetadata("uninitializedWithGetter3.kt")
        public void testUninitializedWithGetter3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeMutability/canBeVal/uninitializedWithGetter3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter")
    public static class RemoveValVarFromParameter extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("catchParameter.kt")
        public void testCatchParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/catchParameter.kt");
        }

        @TestMetadata("constructorParameter.kt")
        public void testConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/constructorParameter.kt");
        }

        @TestMetadata("funParameter.kt")
        public void testFunParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/funParameter.kt");
        }

        @TestMetadata("loopMultiParameter.kt")
        public void testLoopMultiParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/loopMultiParameter.kt");
        }

        @TestMetadata("loopParameter.kt")
        public void testLoopParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/loopParameter.kt");
        }

        @TestMetadata("parameterWithComment.kt")
        public void testParameterWithComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/parameterWithComment.kt");
        }

        @TestMetadata("secondaryConstructorParameter.kt")
        public void testSecondaryConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/removeValVarFromParameter/secondaryConstructorParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/when")
    public static class When extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addElseBranchBooleanWarning.kt")
        public void testAddElseBranchBooleanWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addElseBranchBooleanWarning.kt");
        }

        @TestMetadata("addElseBranchEnumStatement.kt")
        public void testAddElseBranchEnumStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addElseBranchEnumStatement.kt");
        }

        @TestMetadata("addElseBranchSealed.kt")
        public void testAddElseBranchSealed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addElseBranchSealed.kt");
        }

        @TestMetadata("addElseBranchSealedWarning.kt")
        public void testAddElseBranchSealedWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addElseBranchSealedWarning.kt");
        }

        @TestMetadata("addRemainingBranchesBlankLine.kt")
        public void testAddRemainingBranchesBlankLine() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesBlankLine.kt");
        }

        @TestMetadata("addRemainingBranchesBlankLineWithComment.kt")
        public void testAddRemainingBranchesBlankLineWithComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesBlankLineWithComment.kt");
        }

        @TestMetadata("addRemainingBranchesBoolean.kt")
        public void testAddRemainingBranchesBoolean() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesBoolean.kt");
        }

        @TestMetadata("addRemainingBranchesEnum.kt")
        public void testAddRemainingBranchesEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnum.kt");
        }

        @TestMetadata("addRemainingBranchesEnumBackTicks.kt")
        public void testAddRemainingBranchesEnumBackTicks() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumBackTicks.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport1.kt")
        public void testAddRemainingBranchesEnumImport1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport1.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport2.kt")
        public void testAddRemainingBranchesEnumImport2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport2.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport3.kt")
        public void testAddRemainingBranchesEnumImport3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport3.kt");
        }

        @TestMetadata("addRemainingBranchesEnumImport4.kt")
        public void testAddRemainingBranchesEnumImport4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumImport4.kt");
        }

        @TestMetadata("addRemainingBranchesEnumStatement.kt")
        public void testAddRemainingBranchesEnumStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesEnumStatement.kt");
        }

        @TestMetadata("addRemainingBranchesGeneric.kt")
        public void testAddRemainingBranchesGeneric() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesGeneric.kt");
        }

        @TestMetadata("addRemainingBranchesGeneric2.kt")
        public void testAddRemainingBranchesGeneric2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesGeneric2.kt");
        }

        @TestMetadata("addRemainingBranchesInNonDefaultPackage.kt")
        public void testAddRemainingBranchesInNonDefaultPackage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesInNonDefaultPackage.kt");
        }

        @TestMetadata("addRemainingBranchesMissingLeftBracket.kt")
        public void testAddRemainingBranchesMissingLeftBracket() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesMissingLeftBracket.kt");
        }

        @TestMetadata("addRemainingBranchesMissingRightBracket.kt")
        public void testAddRemainingBranchesMissingRightBracket() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesMissingRightBracket.kt");
        }

        @TestMetadata("addRemainingBranchesMissingRightParenthesis.kt")
        public void testAddRemainingBranchesMissingRightParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesMissingRightParenthesis.kt");
        }

        @TestMetadata("addRemainingBranchesSealed.kt")
        public void testAddRemainingBranchesSealed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesSealed.kt");
        }

        @TestMetadata("addRemainingBranchesSealedBackTicks.kt")
        public void testAddRemainingBranchesSealedBackTicks() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesSealedBackTicks.kt");
        }

        @TestMetadata("addRemainingBranchesSealedStatement.kt")
        public void testAddRemainingBranchesSealedStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesSealedStatement.kt");
        }

        @TestMetadata("addRemainingBranchesSealedWarning.kt")
        public void testAddRemainingBranchesSealedWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/addRemainingBranchesSealedWarning.kt");
        }

        @TestMetadata("breakInWhen.kt")
        public void testBreakInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/breakInWhen.kt");
        }

        @TestMetadata("breakInWhenInLabeled.kt")
        public void testBreakInWhenInLabeled() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/breakInWhenInLabeled.kt");
        }

        @TestMetadata("commasInConditionWithNoArguments.kt")
        public void testCommasInConditionWithNoArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/commasInConditionWithNoArguments.kt");
        }

        @TestMetadata("commasInConditionWithNoArguments2.kt")
        public void testCommasInConditionWithNoArguments2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/commasInConditionWithNoArguments2.kt");
        }

        @TestMetadata("continueInWhen.kt")
        public void testContinueInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/continueInWhen.kt");
        }

        @TestMetadata("continueInWhenInLabeled.kt")
        public void testContinueInWhenInLabeled() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/continueInWhenInLabeled.kt");
        }

        @TestMetadata("continueInWhenWithLabel.kt")
        public void testContinueInWhenWithLabel() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/continueInWhenWithLabel.kt");
        }

        @TestMetadata("elseNotLastInWhen.kt")
        public void testElseNotLastInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/elseNotLastInWhen.kt");
        }

        @TestMetadata("localSealedClassInheritorExhaustive.kt")
        public void testLocalSealedClassInheritorExhaustive() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/localSealedClassInheritorExhaustive.kt");
        }

        @TestMetadata("noElseInWhenWithBranches.kt")
        public void testNoElseInWhenWithBranches() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/noElseInWhenWithBranches.kt");
        }

        @TestMetadata("noElseInWhenWithoutBranches.kt")
        public void testNoElseInWhenWithoutBranches() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/noElseInWhenWithoutBranches.kt");
        }

        @TestMetadata("notRedundantBranch.kt")
        public void testNotRedundantBranch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/notRedundantBranch.kt");
        }

        @TestMetadata("removeRedundantBranch.kt")
        public void testRemoveRedundantBranch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/removeRedundantBranch.kt");
        }

        @TestMetadata("removeRedundantCondition.kt")
        public void testRemoveRedundantCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/removeRedundantCondition.kt");
        }

        @TestMetadata("removeRedundantElse.kt")
        public void testRemoveRedundantElse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/removeRedundantElse.kt");
        }

        @TestMetadata("removeRedundantElseForSealedClasses.kt")
        public void testRemoveRedundantElseForSealedClasses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/removeRedundantElseForSealedClasses.kt");
        }

        @TestMetadata("twoElseBranchesInWhen.kt")
        public void testTwoElseBranchesInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/when/twoElseBranchesInWhen.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall")
    public static class WrapWithSafeLetCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argumentNullable.kt")
        public void testArgumentNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/argumentNullable.kt");
        }

        @TestMetadata("callWithLambdaArgument.kt")
        public void testCallWithLambdaArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/callWithLambdaArgument.kt");
        }

        @TestMetadata("chainedCallTypeMismatch.kt")
        public void testChainedCallTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/chainedCallTypeMismatch.kt");
        }

        @TestMetadata("chainedCallTypeMismatch2.kt")
        public void testChainedCallTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/chainedCallTypeMismatch2.kt");
        }

        @TestMetadata("chainedUnsafeCall.kt")
        public void testChainedUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/chainedUnsafeCall.kt");
        }

        @TestMetadata("elvisArgument.kt")
        public void testElvisArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/elvisArgument.kt");
        }

        @TestMetadata("expressionUnsafeCall.kt")
        public void testExpressionUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/expressionUnsafeCall.kt");
        }

        @TestMetadata("extensionMethod.kt")
        public void testExtensionMethod() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/extensionMethod.kt");
        }

        @TestMetadata("extentionFunctionCall.kt")
        public void testExtentionFunctionCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/extentionFunctionCall.kt");
        }

        @TestMetadata("extentionFunctionCall2.kt")
        public void testExtentionFunctionCall2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/extentionFunctionCall2.kt");
        }

        @TestMetadata("inOperator.kt")
        public void testInOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/inOperator.kt");
        }

        @TestMetadata("insideLet.kt")
        public void testInsideLet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/insideLet.kt");
        }

        @TestMetadata("invokeFuncUnsafe.kt")
        public void testInvokeFuncUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeFuncUnsafe.kt");
        }

        @TestMetadata("invokeFunctionType.kt")
        public void testInvokeFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeFunctionType.kt");
        }

        @TestMetadata("invokeFunctionType2.kt")
        public void testInvokeFunctionType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeFunctionType2.kt");
        }

        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeOperator.kt");
        }

        @TestMetadata("invokeOperator2.kt")
        public void testInvokeOperator2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeOperator2.kt");
        }

        @TestMetadata("invokeUnsafe.kt")
        public void testInvokeUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/invokeUnsafe.kt");
        }

        @TestMetadata("nameAlreadyInScope.kt")
        public void testNameAlreadyInScope() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/nameAlreadyInScope.kt");
        }

        @TestMetadata("nullableBinaryExpression.kt")
        public void testNullableBinaryExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/nullableBinaryExpression.kt");
        }

        @TestMetadata("nullableReceiver.kt")
        public void testNullableReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/nullableReceiver.kt");
        }

        @TestMetadata("objectQualifier.kt")
        public void testObjectQualifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/objectQualifier.kt");
        }

        @TestMetadata("refactorNullableFunctionTypeProperty1.kt")
        public void testRefactorNullableFunctionTypeProperty1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/refactorNullableFunctionTypeProperty1.kt");
        }

        @TestMetadata("refactorNullableFunctionTypeProperty2.kt")
        public void testRefactorNullableFunctionTypeProperty2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/refactorNullableFunctionTypeProperty2.kt");
        }

        @TestMetadata("unsafe.kt")
        public void testUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/unsafe.kt");
        }

        @TestMetadata("unsafe2.kt")
        public void testUnsafe2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/unsafe2.kt");
        }

        @TestMetadata("unsafeForNullableParameter.kt")
        public void testUnsafeForNullableParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/unsafeForNullableParameter.kt");
        }

        @TestMetadata("unstableValue.kt")
        public void testUnstableValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/unstableValue.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions1.kt")
        public void testWrapAllNonNullablePositions1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions1.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions2.kt")
        public void testWrapAllNonNullablePositions2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions2.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions3.kt")
        public void testWrapAllNonNullablePositions3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions3.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions4.kt")
        public void testWrapAllNonNullablePositions4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions4.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions5.kt")
        public void testWrapAllNonNullablePositions5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions5.kt");
        }

        @TestMetadata("wrapAllNonNullablePositions6.kt")
        public void testWrapAllNonNullablePositions6() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWithSafeLetCall/wrapAllNonNullablePositions6.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeAddition")
    public static class TypeAddition extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("ambiguousFunctionReturnType.kt")
        public void testAmbiguousFunctionReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/ambiguousFunctionReturnType.kt");
        }

        @TestMetadata("ambiguousPropertyReturnType.kt")
        public void testAmbiguousPropertyReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/ambiguousPropertyReturnType.kt");
        }

        @TestMetadata("changeAccessorTypeToFunctionType.kt")
        public void testChangeAccessorTypeToFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/changeAccessorTypeToFunctionType.kt");
        }

        @TestMetadata("dataClasNoParameterType.kt")
        public void testDataClasNoParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/dataClasNoParameterType.kt");
        }

        @TestMetadata("noAddErrorType.kt")
        public void testNoAddErrorType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/noAddErrorType.kt");
        }

        @TestMetadata("noExplicitTypeInApiMode.kt")
        public void testNoExplicitTypeInApiMode() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/noExplicitTypeInApiMode.kt");
        }

        @TestMetadata("privatePropertyReference.kt")
        public void testPrivatePropertyReference() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/privatePropertyReference.kt");
        }

        @TestMetadata("propertyHasType.kt")
        public void testPropertyHasType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyHasType.kt");
        }

        @TestMetadata("propertyWithGetterWithBlockBody.kt")
        public void testPropertyWithGetterWithBlockBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithGetterWithBlockBody.kt");
        }

        @TestMetadata("propertyWithGetterWithInferredType.kt")
        public void testPropertyWithGetterWithInferredType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithGetterWithInferredType.kt");
        }

        @TestMetadata("propertyWithGetterWithoutType.kt")
        public void testPropertyWithGetterWithoutType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithGetterWithoutType.kt");
        }

        @TestMetadata("propertyWithRecursiveGetter.kt")
        public void testPropertyWithRecursiveGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithRecursiveGetter.kt");
        }

        @TestMetadata("propertyWithSetterWithoutType.kt")
        public void testPropertyWithSetterWithoutType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/propertyWithSetterWithoutType.kt");
        }

        @TestMetadata("protectedFunWithoutReturnType.kt")
        public void testProtectedFunWithoutReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/protectedFunWithoutReturnType.kt");
        }

        @TestMetadata("publicFunWithoutBody.kt")
        public void testPublicFunWithoutBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicFunWithoutBody.kt");
        }

        @TestMetadata("publicFunWithoutReturnType.kt")
        public void testPublicFunWithoutReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicFunWithoutReturnType.kt");
        }

        @TestMetadata("publicFunWithoutReturnTypeCaretOnParameter.kt")
        public void testPublicFunWithoutReturnTypeCaretOnParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicFunWithoutReturnTypeCaretOnParameter.kt");
        }

        @TestMetadata("publicValWithoutReturnType.kt")
        public void testPublicValWithoutReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicValWithoutReturnType.kt");
        }

        @TestMetadata("publicValWithoutReturnTypeCaretOnPublic.kt")
        public void testPublicValWithoutReturnTypeCaretOnPublic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/publicValWithoutReturnTypeCaretOnPublic.kt");
        }

        @TestMetadata("typealiasedConstructorCallWithImplicitTypeArguments.kt")
        public void testTypealiasedConstructorCallWithImplicitTypeArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/typealiasedConstructorCallWithImplicitTypeArguments.kt");
        }

        @TestMetadata("wrongGetterParameterType.kt")
        public void testWrongGetterParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/wrongGetterParameterType.kt");
        }

        @TestMetadata("wrongGetterParameterTypeLongNameRuntime.kt")
        public void testWrongGetterParameterTypeLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/wrongGetterParameterTypeLongNameRuntime.kt");
        }

        @TestMetadata("wrongSetterParameterType.kt")
        public void testWrongSetterParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeAddition/wrongSetterParameterType.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/casts")
    public static class Casts extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("castFunctionParameter.kt")
        public void testCastFunctionParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/castFunctionParameter.kt");
        }

        @TestMetadata("castQualifiedArgument.kt")
        public void testCastQualifiedArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/castQualifiedArgument.kt");
        }

        @TestMetadata("castToFunctionType.kt")
        public void testCastToFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/castToFunctionType.kt");
        }

        @TestMetadata("preferExclExcl.kt")
        public void testPreferExclExcl() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/preferExclExcl.kt");
        }

        @TestMetadata("smartcastImpossible1.kt")
        public void testSmartcastImpossible1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/smartcastImpossible1.kt");
        }

        @TestMetadata("smartcastImpossible2.kt")
        public void testSmartcastImpossible2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/smartcastImpossible2.kt");
        }

        @TestMetadata("smartcastImpossible3.kt")
        public void testSmartcastImpossible3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/smartcastImpossible3.kt");
        }

        @TestMetadata("typeMismatch1.kt")
        public void testTypeMismatch1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch1.kt");
        }

        @TestMetadata("typeMismatch2.kt")
        public void testTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch2.kt");
        }

        @TestMetadata("typeMismatch3.kt")
        public void testTypeMismatch3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch3.kt");
        }

        @TestMetadata("typeMismatch4.kt")
        public void testTypeMismatch4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch4.kt");
        }

        @TestMetadata("typeMismatch5.kt")
        public void testTypeMismatch5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatch5.kt");
        }

        @TestMetadata("typeMismatchLongNameRuntime.kt")
        public void testTypeMismatchLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/typeMismatchLongNameRuntime.kt");
        }

        @TestMetadata("unsigned.kt")
        public void testUnsigned() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/casts/unsigned.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch")
    public static class ComponentFunctionReturnTypeMismatch extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("componentFunctionReturnTypeMismatch1.kt")
        public void testComponentFunctionReturnTypeMismatch1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch1.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch2.kt")
        public void testComponentFunctionReturnTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch2.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch3.kt")
        public void testComponentFunctionReturnTypeMismatch3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch3.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch4.kt")
        public void testComponentFunctionReturnTypeMismatch4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch4.kt");
        }

        @TestMetadata("componentFunctionReturnTypeMismatch5.kt")
        public void testComponentFunctionReturnTypeMismatch5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/componentFunctionReturnTypeMismatch5.kt");
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/dataClass.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/convertKClassToJavaClass")
    public static class ConvertKClassToJavaClass extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertKClassToJavaClass/argument.kt");
        }

        @TestMetadata("argumentVariable.kt")
        public void testArgumentVariable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertKClassToJavaClass/argumentVariable.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertKClassToJavaClass/assignment.kt");
        }

        @TestMetadata("initializer.kt")
        public void testInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertKClassToJavaClass/initializer.kt");
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertKClassToJavaClass/return.kt");
        }

        @TestMetadata("subtype.kt")
        public void testSubtype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertKClassToJavaClass/subtype.kt");
        }

        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertKClassToJavaClass/typeMismatch.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes")
    public static class IncompatibleTypes extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("byte.kt")
        public void testByte() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/byte.kt");
        }

        @TestMetadata("changeReturnType.kt")
        public void testChangeReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/changeReturnType.kt");
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/char.kt");
        }

        @TestMetadata("char2.kt")
        public void testChar2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/char2.kt");
        }

        @TestMetadata("int.kt")
        public void testInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/int.kt");
        }

        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/toString.kt");
        }

        @TestMetadata("wrapWithCollectionLiteral.kt")
        public void testWrapWithCollectionLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/incompatibleTypes/wrapWithCollectionLiteral.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface")
    public static class LetImplementInterface extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("kt25928.kt")
        public void testKt25928() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/kt25928.kt");
        }

        @TestMetadata("letClassImplementAdditionalInterface.kt")
        public void testLetClassImplementAdditionalInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letClassImplementAdditionalInterface.kt");
        }

        @TestMetadata("letClassImplementGenericInterface.kt")
        public void testLetClassImplementGenericInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letClassImplementGenericInterface.kt");
        }

        @TestMetadata("letClassImplementGenericInterfaceAssignment.kt")
        public void testLetClassImplementGenericInterfaceAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letClassImplementGenericInterfaceAssignment.kt");
        }

        @TestMetadata("letClassImplementGenericInterfaceTwice.kt")
        public void testLetClassImplementGenericInterfaceTwice() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letClassImplementGenericInterfaceTwice.kt");
        }

        @TestMetadata("letClassImplementGenericStarInterface.kt")
        public void testLetClassImplementGenericStarInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letClassImplementGenericStarInterface.kt");
        }

        @TestMetadata("letClassImplementIndirectlyInheritedInterface.kt")
        public void testLetClassImplementIndirectlyInheritedInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letClassImplementIndirectlyInheritedInterface.kt");
        }

        @TestMetadata("letClassImplementInterface.kt")
        public void testLetClassImplementInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letClassImplementInterface.kt");
        }

        @TestMetadata("letClassImplementInterfaceInitializer.kt")
        public void testLetClassImplementInterfaceInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letClassImplementInterfaceInitializer.kt");
        }

        @TestMetadata("letClassImplementInterfaceNullable.kt")
        public void testLetClassImplementInterfaceNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letClassImplementInterfaceNullable.kt");
        }

        @TestMetadata("letInterfaceExtendInterface.kt")
        public void testLetInterfaceExtendInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letInterfaceExtendInterface.kt");
        }

        @TestMetadata("letObjectImplementAdditionalInterface.kt")
        public void testLetObjectImplementAdditionalInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letObjectImplementAdditionalInterface.kt");
        }

        @TestMetadata("letObjectLiteralImplementInterface.kt")
        public void testLetObjectLiteralImplementInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letObjectLiteralImplementInterface.kt");
        }

        @TestMetadata("letObjectLiteralImplementInterfaceReturn.kt")
        public void testLetObjectLiteralImplementInterfaceReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letObjectLiteralImplementInterfaceReturn.kt");
        }

        @TestMetadata("letStringImplementInterface.kt")
        public void testLetStringImplementInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/letImplementInterface/letStringImplementInterface.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion")
    public abstract static class NumberConversion extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar")
        public static class FromChar extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("byte.kt")
            public void testByte() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/byte.kt");
            }

            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/double.kt");
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/float.kt");
            }

            @TestMetadata("int.kt")
            public void testInt() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/int.kt");
            }

            @TestMetadata("intFromCharLiteral.kt")
            public void testIntFromCharLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/intFromCharLiteral.kt");
            }

            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/long.kt");
            }

            @TestMetadata("longFromCharLiteral.kt")
            public void testLongFromCharLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/longFromCharLiteral.kt");
            }

            @TestMetadata("short.kt")
            public void testShort() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/short.kt");
            }

            @TestMetadata("shortWithVer1_4.kt")
            public void testShortWithVer1_4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/fromChar/shortWithVer1_4.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte")
        public static class ToByte extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/double.kt");
            }

            @TestMetadata("doubleInitializer.kt")
            public void testDoubleInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/doubleInitializer.kt");
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/float.kt");
            }

            @TestMetadata("floatVarAssignment.kt")
            public void testFloatVarAssignment() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/floatVarAssignment.kt");
            }

            @TestMetadata("floatWithVer1_2.kt")
            public void testFloatWithVer1_2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/floatWithVer1_2.kt");
            }

            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/long.kt");
            }

            @TestMetadata("longReturn.kt")
            public void testLongReturn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toByte/longReturn.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar")
        public static class ToChar extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("byte.kt")
            public void testByte() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/byte.kt");
            }

            @TestMetadata("byteReturn.kt")
            public void testByteReturn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/byteReturn.kt");
            }

            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/double.kt");
            }

            @TestMetadata("doubleInitializer.kt")
            public void testDoubleInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/doubleInitializer.kt");
            }

            @TestMetadata("doubleLiteral.kt")
            public void testDoubleLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/doubleLiteral.kt");
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/float.kt");
            }

            @TestMetadata("floatLiteral.kt")
            public void testFloatLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/floatLiteral.kt");
            }

            @TestMetadata("floatLiteralVarAssignment.kt")
            public void testFloatLiteralVarAssignment() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/floatLiteralVarAssignment.kt");
            }

            @TestMetadata("int.kt")
            public void testInt() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/int.kt");
            }

            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/long.kt");
            }

            @TestMetadata("longLiteral.kt")
            public void testLongLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/longLiteral.kt");
            }

            @TestMetadata("short.kt")
            public void testShort() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/short.kt");
            }

            @TestMetadata("shortWithVer1_4.kt")
            public void testShortWithVer1_4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toChar/shortWithVer1_4.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort")
        public static class ToShort extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort/double.kt");
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort/float.kt");
            }

            @TestMetadata("floatWithVer1_2.kt")
            public void testFloatWithVer1_2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort/floatWithVer1_2.kt");
            }

            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/toShort/long.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("convertBinaryExpression.kt")
            public void testConvertBinaryExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/convertBinaryExpression.kt");
            }

            @TestMetadata("convertExpression.kt")
            public void testConvertExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/convertExpression.kt");
            }

            @TestMetadata("convertExpressionValAssignment.kt")
            public void testConvertExpressionValAssignment() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/convertExpressionValAssignment.kt");
            }

            @TestMetadata("convertToSigned.kt")
            public void testConvertToSigned() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/convertToSigned.kt");
            }

            @TestMetadata("convertToUnsigned.kt")
            public void testConvertToUnsigned() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/numberConversion/convertToUnsigned.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch")
    public static class ParameterTypeMismatch extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("changeFunctionParameterType1.kt")
        public void testChangeFunctionParameterType1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType1.kt");
        }

        @TestMetadata("changeFunctionParameterType2.kt")
        public void testChangeFunctionParameterType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType2.kt");
        }

        @TestMetadata("changeFunctionParameterType3.kt")
        public void testChangeFunctionParameterType3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType3.kt");
        }

        @TestMetadata("changeFunctionParameterType4.kt")
        public void testChangeFunctionParameterType4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType4.kt");
        }

        @TestMetadata("changeFunctionParameterType5K1.kt")
        public void testChangeFunctionParameterType5K1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType5K1.kt");
        }

        @TestMetadata("changeFunctionParameterType5K2.kt")
        public void testChangeFunctionParameterType5K2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterType5K2.kt");
        }

        @TestMetadata("changeFunctionParameterTypeParenthesisK1.kt")
        public void testChangeFunctionParameterTypeParenthesisK1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterTypeParenthesisK1.kt");
        }

        @TestMetadata("changeFunctionParameterTypeParenthesisK2.kt")
        public void testChangeFunctionParameterTypeParenthesisK2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterTypeParenthesisK2.kt");
        }

        @TestMetadata("changeFunctionParameterTypeVararg.kt")
        public void testChangeFunctionParameterTypeVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterTypeVararg.kt");
        }

        @TestMetadata("changeFunctionParameterTypeWithComment.kt")
        public void testChangeFunctionParameterTypeWithComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeFunctionParameterTypeWithComment.kt");
        }

        @TestMetadata("changeParameterTypeLongNameRuntime.kt")
        public void testChangeParameterTypeLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changeParameterTypeLongNameRuntime.kt");
        }

        @TestMetadata("changePrimaryConstructorParameterType.kt")
        public void testChangePrimaryConstructorParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changePrimaryConstructorParameterType.kt");
        }

        @TestMetadata("changePrimaryConstructorParameterTypeOnPropertyDelegate.kt")
        public void testChangePrimaryConstructorParameterTypeOnPropertyDelegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changePrimaryConstructorParameterTypeOnPropertyDelegate.kt");
        }

        @TestMetadata("changePrimaryConstructorParameterTypeWhenExplicitThisK1.kt")
        public void testChangePrimaryConstructorParameterTypeWhenExplicitThisK1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changePrimaryConstructorParameterTypeWhenExplicitThisK1.kt");
        }

        @TestMetadata("changePrimaryConstructorParameterTypeWhenExplicitThisK2.kt")
        public void testChangePrimaryConstructorParameterTypeWhenExplicitThisK2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/changePrimaryConstructorParameterTypeWhenExplicitThisK2.kt");
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/char.kt");
        }

        @TestMetadata("genericType.kt")
        public void testGenericType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/genericType.kt");
        }

        @TestMetadata("genericType2.kt")
        public void testGenericType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/genericType2.kt");
        }

        @TestMetadata("multiFakeOverride.kt")
        public void testMultiFakeOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/multiFakeOverride.kt");
        }

        @TestMetadata("stdlibFunction.kt")
        public void testStdlibFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/stdlibFunction.kt");
        }

        @TestMetadata("unsigned.kt")
        public void testUnsigned() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterTypeMismatch/unsigned.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber")
    public static class RoundNumber extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber/assignment.kt");
        }

        @TestMetadata("initializer.kt")
        public void testInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber/initializer.kt");
        }

        @TestMetadata("notApplicable.kt")
        public void testNotApplicable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber/notApplicable.kt");
        }

        @TestMetadata("notApplicable2.kt")
        public void testNotApplicable2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber/notApplicable2.kt");
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber/return.kt");
        }

        @TestMetadata("roundDoubleToInt.kt")
        public void testRoundDoubleToInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber/roundDoubleToInt.kt");
        }

        @TestMetadata("roundDoubleToLong.kt")
        public void testRoundDoubleToLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber/roundDoubleToLong.kt");
        }

        @TestMetadata("roundFloatToInt.kt")
        public void testRoundFloatToInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber/roundFloatToInt.kt");
        }

        @TestMetadata("roundFloatToLong.kt")
        public void testRoundFloatToLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/roundNumber/roundFloatToLong.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda")
    public static class SurroundWithLambda extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/argument.kt");
        }

        @TestMetadata("argumentInt.kt")
        public void testArgumentInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/argumentInt.kt");
        }

        @TestMetadata("argumentMismatch.kt")
        public void testArgumentMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/argumentMismatch.kt");
        }

        @TestMetadata("argumentNull.kt")
        public void testArgumentNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/argumentNull.kt");
        }

        @TestMetadata("argumentNullable.kt")
        public void testArgumentNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/argumentNullable.kt");
        }

        @TestMetadata("argumentSubclass.kt")
        public void testArgumentSubclass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/argumentSubclass.kt");
        }

        @TestMetadata("argumentSuspend.kt")
        public void testArgumentSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/argumentSuspend.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/assignment.kt");
        }

        @TestMetadata("initializer.kt")
        public void testInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/initializer.kt");
        }

        @TestMetadata("lambdaWithParam.kt")
        public void testLambdaWithParam() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/lambdaWithParam.kt");
        }

        @TestMetadata("lambdaWithParams.kt")
        public void testLambdaWithParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/lambdaWithParams.kt");
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/surroundWithLambda/return.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression")
    public abstract static class TypeMismatchOnReturnedExpression extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn")
        public static class MultiReturn extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("labeledReturn.kt")
            public void testLabeledReturn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/labeledReturn.kt");
            }

            @TestMetadata("returnDifferentType.kt")
            public void testReturnDifferentType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnDifferentType.kt");
            }

            @TestMetadata("returnNull.kt")
            public void testReturnNull() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnNull.kt");
            }

            @TestMetadata("returnNull2.kt")
            public void testReturnNull2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnNull2.kt");
            }

            @TestMetadata("returnNullable.kt")
            public void testReturnNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnNullable.kt");
            }

            @TestMetadata("returnSuperType.kt")
            public void testReturnSuperType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/returnSuperType.kt");
            }

            @TestMetadata("unrelatedLabeledReturn.kt")
            public void testUnrelatedLabeledReturn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiReturn/unrelatedLabeledReturn.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("anonymousFunctionReturnType.kt")
            public void testAnonymousFunctionReturnType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/anonymousFunctionReturnType.kt");
            }

            @TestMetadata("assignmentTypeMismatch.kt")
            public void testAssignmentTypeMismatch() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/assignmentTypeMismatch.kt");
            }

            @TestMetadata("changeFunctionReturnTypeToFunctionType.kt")
            public void testChangeFunctionReturnTypeToFunctionType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/changeFunctionReturnTypeToFunctionType.kt");
            }

            @TestMetadata("changeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral.kt")
            public void testChangeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/changeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral.kt");
            }

            @TestMetadata("dontChangeFunctionReturnTypeToErrorType.kt")
            public void testDontChangeFunctionReturnTypeToErrorType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/dontChangeFunctionReturnTypeToErrorType.kt");
            }

            @TestMetadata("inIf.kt")
            public void testInIf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/inIf.kt");
            }

            @TestMetadata("inWhen.kt")
            public void testInWhen() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/inWhen.kt");
            }

            @TestMetadata("literalPropertyWithGetter.kt")
            public void testLiteralPropertyWithGetter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/literalPropertyWithGetter.kt");
            }

            @TestMetadata("multiFakeOverride.kt")
            public void testMultiFakeOverride() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiFakeOverride.kt");
            }

            @TestMetadata("multiFakeOverrideForOperatorConvention.kt")
            public void testMultiFakeOverrideForOperatorConvention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/multiFakeOverrideForOperatorConvention.kt");
            }

            @TestMetadata("nestedWhenExpression.kt")
            public void testNestedWhenExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/nestedWhenExpression.kt");
            }

            @TestMetadata("nonLocalReturnRuntime.kt")
            public void testNonLocalReturnRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/nonLocalReturnRuntime.kt");
            }

            @TestMetadata("nonLocalReturnWithLabelRuntime.kt")
            public void testNonLocalReturnWithLabelRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/nonLocalReturnWithLabelRuntime.kt");
            }

            @TestMetadata("notApplicableToConstructor.kt")
            public void testNotApplicableToConstructor() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/notApplicableToConstructor.kt");
            }

            @TestMetadata("propertyGetterInitializerTypeMismatch.kt")
            public void testPropertyGetterInitializerTypeMismatch() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterInitializerTypeMismatch.kt");
            }

            @TestMetadata("propertyGetterWithIf.kt")
            public void testPropertyGetterWithIf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterWithIf.kt");
            }

            @TestMetadata("propertyGetterWithIf2.kt")
            public void testPropertyGetterWithIf2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterWithIf2.kt");
            }

            @TestMetadata("propertyGetterWithIf3.kt")
            public void testPropertyGetterWithIf3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyGetterWithIf3.kt");
            }

            @TestMetadata("propertyInitializerWithIf.kt")
            public void testPropertyInitializerWithIf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyInitializerWithIf.kt");
            }

            @TestMetadata("propertyInitializerWithWhen.kt")
            public void testPropertyInitializerWithWhen() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/propertyInitializerWithWhen.kt");
            }

            @TestMetadata("returnedExpressionTypeMismatchFunctionParameterType.kt")
            public void testReturnedExpressionTypeMismatchFunctionParameterType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/returnedExpressionTypeMismatchFunctionParameterType.kt");
            }

            @TestMetadata("twoDimensionalArray.kt")
            public void testTwoDimensionalArray() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalArray.kt");
            }

            @TestMetadata("twoDimensionalArray2.kt")
            public void testTwoDimensionalArray2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalArray2.kt");
            }

            @TestMetadata("twoDimensionalArray3.kt")
            public void testTwoDimensionalArray3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalArray3.kt");
            }

            @TestMetadata("twoDimensionalList.kt")
            public void testTwoDimensionalList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalList.kt");
            }

            @TestMetadata("twoDimensionalList2.kt")
            public void testTwoDimensionalList2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/twoDimensionalList2.kt");
            }

            @TestMetadata("typeMismatchInIfStatementReturnedByFunction.kt")
            public void testTypeMismatchInIfStatementReturnedByFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInIfStatementReturnedByFunction.kt");
            }

            @TestMetadata("typeMismatchInIfStatementReturnedByLiteral.kt")
            public void testTypeMismatchInIfStatementReturnedByLiteral() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInIfStatementReturnedByLiteral.kt");
            }

            @TestMetadata("typeMismatchInInitializer.kt")
            public void testTypeMismatchInInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInInitializer.kt");
            }

            @TestMetadata("typeMismatchInReturnStatement.kt")
            public void testTypeMismatchInReturnStatement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/typeMismatchInReturnStatement.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive")
    public static class WrongPrimitive extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("doubleToIntDecimalPlaces.kt")
        public void testDoubleToIntDecimalPlaces() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/doubleToIntDecimalPlaces.kt");
        }

        @TestMetadata("doubleToLongNotInRange.kt")
        public void testDoubleToLongNotInRange() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/doubleToLongNotInRange.kt");
        }

        @TestMetadata("doubleToShortNotInRange.kt")
        public void testDoubleToShortNotInRange() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/doubleToShortNotInRange.kt");
        }

        @TestMetadata("floatToDoubleWithDecimal.kt")
        public void testFloatToDoubleWithDecimal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/floatToDoubleWithDecimal.kt");
        }

        @TestMetadata("floatToInt.kt")
        public void testFloatToInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/floatToInt.kt");
        }

        @TestMetadata("floatToInt2.kt")
        public void testFloatToInt2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/floatToInt2.kt");
        }

        @TestMetadata("floatToIntReturn.kt")
        public void testFloatToIntReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/floatToIntReturn.kt");
        }

        @TestMetadata("floatToLong.kt")
        public void testFloatToLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/floatToLong.kt");
        }

        @TestMetadata("hexToFloat.kt")
        public void testHexToFloat() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/hexToFloat.kt");
        }

        @TestMetadata("intToFloat.kt")
        public void testIntToFloat() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/intToFloat.kt");
        }

        @TestMetadata("intToUnsigned.kt")
        public void testIntToUnsigned() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/intToUnsigned.kt");
        }

        @TestMetadata("intToUnsignedSingleExprFunReturn.kt")
        public void testIntToUnsignedSingleExprFunReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/intToUnsignedSingleExprFunReturn.kt");
        }

        @TestMetadata("longToDouble.kt")
        public void testLongToDouble() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/longToDouble.kt");
        }

        @TestMetadata("longToInt.kt")
        public void testLongToInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/longToInt.kt");
        }

        @TestMetadata("longToIntBinary.kt")
        public void testLongToIntBinary() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/longToIntBinary.kt");
        }

        @TestMetadata("unsignedToInt.kt")
        public void testUnsignedToInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrongPrimitive/unsignedToInt.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes")
    public static class DefinitelyNonNullableTypes extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("changeFunctionParameterType1.kt")
        public void testChangeFunctionParameterType1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/changeFunctionParameterType1.kt");
        }

        @TestMetadata("changeFunctionParameterType2.kt")
        public void testChangeFunctionParameterType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/changeFunctionParameterType2.kt");
        }

        @TestMetadata("changeFunctionParameterTypeOverloadedOperatorWithParenthesis.kt")
        public void testChangeFunctionParameterTypeOverloadedOperatorWithParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/changeFunctionParameterTypeOverloadedOperatorWithParenthesis.kt");
        }

        @TestMetadata("changeFunctionParameterTypeParenthesis.kt")
        public void testChangeFunctionParameterTypeParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/changeFunctionParameterTypeParenthesis.kt");
        }

        @TestMetadata("changePrimaryConstructorParameterType.kt")
        public void testChangePrimaryConstructorParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/changePrimaryConstructorParameterType.kt");
        }

        @TestMetadata("changePrimaryConstructorParameterType2.kt")
        public void testChangePrimaryConstructorParameterType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/changePrimaryConstructorParameterType2.kt");
        }

        @TestMetadata("changePrimaryConstructorParameterTypeWhenExplicitThis.kt")
        public void testChangePrimaryConstructorParameterTypeWhenExplicitThis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/changePrimaryConstructorParameterTypeWhenExplicitThis.kt");
        }

        @TestMetadata("changeVariableType1.kt")
        public void testChangeVariableType1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/changeVariableType1.kt");
        }

        @TestMetadata("changeVariableType2.kt")
        public void testChangeVariableType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/changeVariableType2.kt");
        }

        @TestMetadata("explicitCast1.kt")
        public void testExplicitCast1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/explicitCast1.kt");
        }

        @TestMetadata("explicitCast2.kt")
        public void testExplicitCast2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/definitelyNonNullableTypes/explicitCast2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/fixOverloadedOperator")
    public static class FixOverloadedOperator extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("changeNotFunctionReturnType.kt")
        public void testChangeNotFunctionReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/fixOverloadedOperator/changeNotFunctionReturnType.kt");
        }

        @TestMetadata("changePlusFunctionReturnType.kt")
        public void testChangePlusFunctionReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/fixOverloadedOperator/changePlusFunctionReturnType.kt");
        }

        @TestMetadata("changeTimesFunctionParameterType.kt")
        public void testChangeTimesFunctionParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/fixOverloadedOperator/changeTimesFunctionParameterType.kt");
        }

        @TestMetadata("changeTimesFunctionParameterTypeParenthesis.kt")
        public void testChangeTimesFunctionParameterTypeParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/fixOverloadedOperator/changeTimesFunctionParameterTypeParenthesis.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch")
    public static class TypeMismatch extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("accessibleLocalClassInReturn.kt")
        public void testAccessibleLocalClassInReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/accessibleLocalClassInReturn.kt");
        }

        @TestMetadata("addArrayOfType.kt")
        public void testAddArrayOfType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/addArrayOfType.kt");
        }

        @TestMetadata("addArrayOfTypeForNamedParameter.kt")
        public void testAddArrayOfTypeForNamedParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/addArrayOfTypeForNamedParameter.kt");
        }

        @TestMetadata("addIntArrayOf.kt")
        public void testAddIntArrayOf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/addIntArrayOf.kt");
        }

        @TestMetadata("anonymousObjectInCall.kt")
        public void testAnonymousObjectInCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anonymousObjectInCall.kt");
        }

        @TestMetadata("anonymousObjectInInfixCall.kt")
        public void testAnonymousObjectInInfixCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anonymousObjectInInfixCall.kt");
        }

        @TestMetadata("anonymousObjectInInitializer.kt")
        public void testAnonymousObjectInInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anonymousObjectInInitializer.kt");
        }

        @TestMetadata("anonymousObjectInReturn.kt")
        public void testAnonymousObjectInReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anonymousObjectInReturn.kt");
        }

        @TestMetadata("anyInReturn.kt")
        public void testAnyInReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/anyInReturn.kt");
        }

        @TestMetadata("cannotConvertStringToCharLiteral.kt")
        public void testCannotConvertStringToCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/cannotConvertStringToCharLiteral.kt");
        }

        @TestMetadata("changeFunctionLiteralParameterTypeToFunctionType.kt")
        public void testChangeFunctionLiteralParameterTypeToFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeFunctionLiteralParameterTypeToFunctionType.kt");
        }

        @TestMetadata("changeFunctionLiteralParameterTypeToFunctionTypeLongNameRuntime.kt")
        public void testChangeFunctionLiteralParameterTypeToFunctionTypeLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeFunctionLiteralParameterTypeToFunctionTypeLongNameRuntime.kt");
        }

        @TestMetadata("changeFunctionReturnTypeToMatchExpectedTypeOfCall.kt")
        public void testChangeFunctionReturnTypeToMatchExpectedTypeOfCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeFunctionReturnTypeToMatchExpectedTypeOfCall.kt");
        }

        @TestMetadata("changeFunctionReturnTypeToMatchExpectedTypeOfCallLongNameRuntime.kt")
        public void testChangeFunctionReturnTypeToMatchExpectedTypeOfCallLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeFunctionReturnTypeToMatchExpectedTypeOfCallLongNameRuntime.kt");
        }

        @TestMetadata("changeReturnTypeForErrorType.kt")
        public void testChangeReturnTypeForErrorType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeForErrorType.kt");
        }

        @TestMetadata("changeReturnTypeForTypeInference.kt")
        public void testChangeReturnTypeForTypeInference() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeForTypeInference.kt");
        }

        @TestMetadata("changeReturnTypeForTypeMismatch.kt")
        public void testChangeReturnTypeForTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeForTypeMismatch.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForAnonymousObject.kt")
        public void testChangeReturnTypeNoFqNameForAnonymousObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForAnonymousObject.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForCompanionObject.kt")
        public void testChangeReturnTypeNoFqNameForCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForCompanionObject.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForLocalClass.kt")
        public void testChangeReturnTypeNoFqNameForLocalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForLocalClass.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForNestedClass.kt")
        public void testChangeReturnTypeNoFqNameForNestedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForNestedClass.kt");
        }

        @TestMetadata("changeReturnTypeNoFqNameForTopLevelClass.kt")
        public void testChangeReturnTypeNoFqNameForTopLevelClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeNoFqNameForTopLevelClass.kt");
        }

        @TestMetadata("changeReturnTypeToSpecificNullable.kt")
        public void testChangeReturnTypeToSpecificNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeToSpecificNullable.kt");
        }

        @TestMetadata("changeReturnTypeWhenFunctionNameIsMissing.kt")
        public void testChangeReturnTypeWhenFunctionNameIsMissing() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeWhenFunctionNameIsMissing.kt");
        }

        @TestMetadata("changeReturnTypeWhenValueParameterListIsAbsent.kt")
        public void testChangeReturnTypeWhenValueParameterListIsAbsent() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/changeReturnTypeWhenValueParameterListIsAbsent.kt");
        }

        @TestMetadata("compareToTypeMismatch.kt")
        public void testCompareToTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/compareToTypeMismatch.kt");
        }

        @TestMetadata("constantTypeMismatch.kt")
        public void testConstantTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/constantTypeMismatch.kt");
        }

        @TestMetadata("convertAssignedStringToCharLiteral.kt")
        public void testConvertAssignedStringToCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertAssignedStringToCharLiteral.kt");
        }

        @TestMetadata("convertReturnStringToCharLiteral.kt")
        public void testConvertReturnStringToCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertReturnStringToCharLiteral.kt");
        }

        @TestMetadata("convertStringInitializerToCharLiteral.kt")
        public void testConvertStringInitializerToCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertStringInitializerToCharLiteral.kt");
        }

        @TestMetadata("dontChangeOverriddenPropertyTypeToErrorType.kt")
        public void testDontChangeOverriddenPropertyTypeToErrorType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/dontChangeOverriddenPropertyTypeToErrorType.kt");
        }

        @TestMetadata("expectedParameterTypeMismatch.kt")
        public void testExpectedParameterTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/expectedParameterTypeMismatch.kt");
        }

        @TestMetadata("expectedParameterTypeMismatchLongNameRuntime.kt")
        public void testExpectedParameterTypeMismatchLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/expectedParameterTypeMismatchLongNameRuntime.kt");
        }

        @TestMetadata("functionExtensionType.kt")
        public void testFunctionExtensionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionExtensionType.kt");
        }

        @TestMetadata("functionNestedType.kt")
        public void testFunctionNestedType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionNestedType.kt");
        }

        @TestMetadata("functionNestedType2.kt")
        public void testFunctionNestedType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionNestedType2.kt");
        }

        @TestMetadata("functionReflectType.kt")
        public void testFunctionReflectType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionReflectType.kt");
        }

        @TestMetadata("functionReflectType2.kt")
        public void testFunctionReflectType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionReflectType2.kt");
        }

        @TestMetadata("functionType.kt")
        public void testFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/functionType.kt");
        }

        @TestMetadata("hasNextFunctionReturnTypeMismatch.kt")
        public void testHasNextFunctionReturnTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/hasNextFunctionReturnTypeMismatch.kt");
        }

        @TestMetadata("intToShortTypeMismatch.kt")
        public void testIntToShortTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/intToShortTypeMismatch.kt");
        }

        @TestMetadata("kt17404.kt")
        public void testKt17404() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/kt17404.kt");
        }

        @TestMetadata("localClassInReturn1.kt")
        public void testLocalClassInReturn1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/localClassInReturn1.kt");
        }

        @TestMetadata("localClassInReturn2.kt")
        public void testLocalClassInReturn2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/localClassInReturn2.kt");
        }

        @TestMetadata("longToDoubleTypeMismatch.kt")
        public void testLongToDoubleTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/longToDoubleTypeMismatch.kt");
        }

        @TestMetadata("longToIntTypeMismatch.kt")
        public void testLongToIntTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/longToIntTypeMismatch.kt");
        }

        @TestMetadata("makeReturnTypeNullable.kt")
        public void testMakeReturnTypeNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/makeReturnTypeNullable.kt");
        }

        @TestMetadata("noReturnInFunctionWithBlockBody.kt")
        public void testNoReturnInFunctionWithBlockBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/noReturnInFunctionWithBlockBody.kt");
        }

        @TestMetadata("nullArgumentForNonNullParameter.kt")
        public void testNullArgumentForNonNullParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/nullArgumentForNonNullParameter.kt");
        }

        @TestMetadata("parameterDefaultValue.kt")
        public void testParameterDefaultValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/parameterDefaultValue.kt");
        }

        @TestMetadata("propertyTypeMismatch.kt")
        public void testPropertyTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/propertyTypeMismatch.kt");
        }

        @TestMetadata("propertyTypeMismatchLongNameRuntime.kt")
        public void testPropertyTypeMismatchLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/propertyTypeMismatchLongNameRuntime.kt");
        }

        @TestMetadata("resolvableTypeParams.kt")
        public void testResolvableTypeParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/resolvableTypeParams.kt");
        }

        @TestMetadata("returnTypeMismatch.kt")
        public void testReturnTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/returnTypeMismatch.kt");
        }

        @TestMetadata("shortToByteTypeMismatch.kt")
        public void testShortToByteTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/shortToByteTypeMismatch.kt");
        }

        @TestMetadata("tooManyArgumentsException.kt")
        public void testTooManyArgumentsException() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/tooManyArgumentsException.kt");
        }

        @TestMetadata("unresolvableTypeParams.kt")
        public void testUnresolvableTypeParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/unresolvableTypeParams.kt");
        }

        @TestMetadata("variableInitializedWithNull.kt")
        public void testVariableInitializedWithNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNull.kt");
        }

        @TestMetadata("variableInitializedWithNull2.kt")
        public void testVariableInitializedWithNull2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNull2.kt");
        }

        @TestMetadata("variableInitializedWithNull3.kt")
        public void testVariableInitializedWithNull3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNull3.kt");
        }

        @TestMetadata("variableInitializedWithNull4.kt")
        public void testVariableInitializedWithNull4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNull4.kt");
        }

        @TestMetadata("variableInitializedWithNullProperty.kt")
        public void testVariableInitializedWithNullProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/variableInitializedWithNullProperty.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/when.kt");
        }

        @TestMetadata("when2.kt")
        public void testWhen2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/when2.kt");
        }

        @TestMetadata("when3.kt")
        public void testWhen3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/when3.kt");
        }

        @TestMetadata("wrapWithArrayLiteral.kt")
        public void testWrapWithArrayLiteral() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithArrayLiteral.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/toString")
    public static class ToString extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("callArgument.kt")
        public void testCallArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/callArgument.kt");
        }

        @TestMetadata("notNullableExpectedNullable.kt")
        public void testNotNullableExpectedNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/notNullableExpectedNullable.kt");
        }

        @TestMetadata("nullableExpectedNotNullable.kt")
        public void testNullableExpectedNotNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/nullableExpectedNotNullable.kt");
        }

        @TestMetadata("nullableExpectedNullable.kt")
        public void testNullableExpectedNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/nullableExpectedNullable.kt");
        }

        @TestMetadata("propertyInitializer.kt")
        public void testPropertyInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/propertyInitializer.kt");
        }

        @TestMetadata("returnStatement.kt")
        public void testReturnStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/returnStatement.kt");
        }

        @TestMetadata("variableAssignment.kt")
        public void testVariableAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/toString/variableAssignment.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/specifySuperType")
    public static class SpecifySuperType extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("fullyQualifiedSuperType.kt")
        public void testFullyQualifiedSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/fullyQualifiedSuperType.kt");
        }

        @TestMetadata("fullyQualifiedSuperTypeHasAnnotations.kt")
        public void testFullyQualifiedSuperTypeHasAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/fullyQualifiedSuperTypeHasAnnotations.kt");
        }

        @TestMetadata("fullyQualifiedSuperTypeHasTypeArguments.kt")
        public void testFullyQualifiedSuperTypeHasTypeArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/fullyQualifiedSuperTypeHasTypeArguments.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/function.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/property.kt");
        }

        @TestMetadata("superExpressionHasLabel.kt")
        public void testSuperExpressionHasLabel() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/superExpressionHasLabel.kt");
        }

        @TestMetadata("superTypeHasAnnotations.kt")
        public void testSuperTypeHasAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/superTypeHasAnnotations.kt");
        }

        @TestMetadata("superTypeHasTypeArguments.kt")
        public void testSuperTypeHasTypeArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/superTypeHasTypeArguments.kt");
        }

        @TestMetadata("superTypeIsExtendedByOtherSuperType.kt")
        public void testSuperTypeIsExtendedByOtherSuperType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/superTypeIsExtendedByOtherSuperType.kt");
        }

        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifySuperType/typeMismatch.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/convertToBlockBody")
    public static class ConvertToBlockBody extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertToBlockBody/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/supertypeInitialization")
    public static class SupertypeInitialization extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addImport.kt")
        public void testAddImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addImport.kt");
        }

        @TestMetadata("addParameters.kt")
        public void testAddParameters() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParameters.kt");
        }

        @TestMetadata("addParenthesis.kt")
        public void testAddParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesis.kt");
        }

        @TestMetadata("addParenthesisDefaultParameters.kt")
        public void testAddParenthesisDefaultParameters() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisDefaultParameters.kt");
        }

        @TestMetadata("addParenthesisEmptyConstructor.kt")
        public void testAddParenthesisEmptyConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisEmptyConstructor.kt");
        }

        @TestMetadata("addParenthesisExpectClass.kt")
        public void testAddParenthesisExpectClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisExpectClass.kt");
        }

        @TestMetadata("addParenthesisForInvalidSealedClass.kt")
        public void testAddParenthesisForInvalidSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForInvalidSealedClass.kt");
        }

        @TestMetadata("addParenthesisForLocalClass.kt")
        public void testAddParenthesisForLocalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForLocalClass.kt");
        }

        @TestMetadata("addParenthesisForObjectExpression.kt")
        public void testAddParenthesisForObjectExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForObjectExpression.kt");
        }

        @TestMetadata("addParenthesisForSealedClass.kt")
        public void testAddParenthesisForSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForSealedClass.kt");
        }

        @TestMetadata("addParenthesisForSealedClass2.kt")
        public void testAddParenthesisForSealedClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/addParenthesisForSealedClass2.kt");
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/annotation.kt");
        }

        @TestMetadata("baseConstructorError.kt")
        public void testBaseConstructorError() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/baseConstructorError.kt");
        }

        @TestMetadata("createConstructor.kt")
        public void testCreateConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/createConstructor.kt");
        }

        @TestMetadata("data.kt")
        public void testData() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/data.kt");
        }

        @TestMetadata("displayLongSignatures1.kt")
        public void testDisplayLongSignatures1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/displayLongSignatures1.kt");
        }

        @TestMetadata("displayLongSignatures2.kt")
        public void testDisplayLongSignatures2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/displayLongSignatures2.kt");
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/enum.kt");
        }

        @TestMetadata("genericClass.kt")
        public void testGenericClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/genericClass.kt");
        }

        @TestMetadata("incompleteConstructor.kt")
        public void testIncompleteConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/incompleteConstructor.kt");
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/inline.kt");
        }

        @TestMetadata("keywordName.kt")
        public void testKeywordName() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/keywordName.kt");
        }

        @TestMetadata("multipleConstructors.kt")
        public void testMultipleConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/multipleConstructors.kt");
        }

        @TestMetadata("noAccessibleConstructors.kt")
        public void testNoAccessibleConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/noAccessibleConstructors.kt");
        }

        @TestMetadata("noParameters.kt")
        public void testNoParameters() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/noParameters.kt");
        }

        @TestMetadata("primaryConstructorInaccessible.kt")
        public void testPrimaryConstructorInaccessible() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/primaryConstructorInaccessible.kt");
        }

        @TestMetadata("someParametersAlreadyExist.kt")
        public void testSomeParametersAlreadyExist() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/someParametersAlreadyExist.kt");
        }

        @TestMetadata("someParametersAlreadyExistNoTypeConflicts.kt")
        public void testSomeParametersAlreadyExistNoTypeConflicts() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/someParametersAlreadyExistNoTypeConflicts.kt");
        }

        @TestMetadata("value.kt")
        public void testValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/value.kt");
        }

        @TestMetadata("vararg1.kt")
        public void testVararg1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/vararg1.kt");
        }

        @TestMetadata("vararg2.kt")
        public void testVararg2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/vararg2.kt");
        }

        @TestMetadata("vararg3.kt")
        public void testVararg3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/vararg3.kt");
        }

        @TestMetadata("vararg4.kt")
        public void testVararg4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/vararg4.kt");
        }

        @TestMetadata("vararg5.kt")
        public void testVararg5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/supertypeInitialization/vararg5.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/dataClassConstructorVsCopyVisibility")
    public static class DataClassConstructorVsCopyVisibility extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("AddConsistentCopyVisibilityAnnotation.kt")
        public void testAddConsistentCopyVisibilityAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/dataClassConstructorVsCopyVisibility/AddConsistentCopyVisibilityAnnotation.kt");
        }

        @TestMetadata("DataClassConsistentCopyAndExposedCopyAreIncompatibleAnnotations.kt")
        public void testDataClassConsistentCopyAndExposedCopyAreIncompatibleAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/dataClassConstructorVsCopyVisibility/DataClassConsistentCopyAndExposedCopyAreIncompatibleAnnotations.kt");
        }

        @TestMetadata("DataClassConsistentCopyWrongAnnotationTarget.kt")
        public void testDataClassConsistentCopyWrongAnnotationTarget() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/dataClassConstructorVsCopyVisibility/DataClassConsistentCopyWrongAnnotationTarget.kt");
        }

        @TestMetadata("RemoveRedundantConsistentCopyVisibilityAnnotation.kt")
        public void testRemoveRedundantConsistentCopyVisibilityAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/dataClassConstructorVsCopyVisibility/RemoveRedundantConsistentCopyVisibilityAnnotation.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTarget")
    public static class AddAnnotationUseSiteTarget extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("delegate.kt")
        public void testDelegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTarget/delegate.kt");
        }

        @TestMetadata("get.kt")
        public void testGet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTarget/get.kt");
        }

        @TestMetadata("notApplicable.kt")
        public void testNotApplicable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTarget/notApplicable.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTargetForConstructorParameter")
    public static class AddAnnotationUseSiteTargetForConstructorParameter extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constructorParameterAndFieldChange.kt")
        public void testConstructorParameterAndFieldChange() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTargetForConstructorParameter/constructorParameterAndFieldChange.kt");
        }

        @TestMetadata("constructorParameterAndFieldKeep.kt")
        public void testConstructorParameterAndFieldKeep() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTargetForConstructorParameter/constructorParameterAndFieldKeep.kt");
        }

        @TestMetadata("constructorParameterAndPropertyChange.kt")
        public void testConstructorParameterAndPropertyChange() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTargetForConstructorParameter/constructorParameterAndPropertyChange.kt");
        }

        @TestMetadata("constructorParameterAndPropertyKeep.kt")
        public void testConstructorParameterAndPropertyKeep() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTargetForConstructorParameter/constructorParameterAndPropertyKeep.kt");
        }

        @TestMetadata("inapplicableNoProperty.kt")
        public void testInapplicableNoProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTargetForConstructorParameter/inapplicableNoProperty.kt");
        }

        @TestMetadata("threeTargetsChangeToField.kt")
        public void testThreeTargetsChangeToField() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTargetForConstructorParameter/threeTargetsChangeToField.kt");
        }

        @TestMetadata("threeTargetsChangeToProperty.kt")
        public void testThreeTargetsChangeToProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTargetForConstructorParameter/threeTargetsChangeToProperty.kt");
        }

        @TestMetadata("threeTargetsKeep.kt")
        public void testThreeTargetsKeep() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addAnnotationUseSiteTargetForConstructorParameter/threeTargetsKeep.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall")
    public static class AddConstructorParameterFromSuperTypeCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("backticks.kt")
        public void testBackticks() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/backticks.kt");
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/basic.kt");
        }

        @TestMetadata("basic2.kt")
        public void testBasic2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/basic2.kt");
        }

        @TestMetadata("basic3.kt")
        public void testBasic3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/basic3.kt");
        }

        @TestMetadata("basic4.kt")
        public void testBasic4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/basic4.kt");
        }

        @TestMetadata("fewerArguments.kt")
        public void testFewerArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/fewerArguments.kt");
        }

        @TestMetadata("generics.kt")
        public void testGenerics() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/generics.kt");
        }

        @TestMetadata("hasDifferentNameParameter.kt")
        public void testHasDifferentNameParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/hasDifferentNameParameter.kt");
        }

        @TestMetadata("hasSameNameParameter.kt")
        public void testHasSameNameParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/hasSameNameParameter.kt");
        }

        @TestMetadata("typeParameter.kt")
        public void testTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConstructorParameterFromSuperTypeCall/typeParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addConversionCall")
    public static class AddConversionCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("toByte.kt")
        public void testToByte() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConversionCall/toByte.kt");
        }

        @TestMetadata("toByteExtraParenthesis.kt")
        public void testToByteExtraParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConversionCall/toByteExtraParenthesis.kt");
        }

        @TestMetadata("toShort.kt")
        public void testToShort() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addConversionCall/toShort.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addCrossinline")
    public static class AddCrossinline extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addCrossinline/basic.kt");
        }

        @TestMetadata("suspend.kt")
        public void testSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addCrossinline/suspend.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addDataModifier")
    public static class AddDataModifier extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstract.kt")
        public void testAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/abstract.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/inner.kt");
        }

        @TestMetadata("invisibleParameter.kt")
        public void testInvisibleParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/invisibleParameter.kt");
        }

        @TestMetadata("invisibleParameter2.kt")
        public void testInvisibleParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/invisibleParameter2.kt");
        }

        @TestMetadata("noParameter.kt")
        public void testNoParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/noParameter.kt");
        }

        @TestMetadata("notVarVal.kt")
        public void testNotVarVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/notVarVal.kt");
        }

        @TestMetadata("open.kt")
        public void testOpen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/open.kt");
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/sealed.kt");
        }

        @TestMetadata("test1.kt")
        public void testTest1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test1.kt");
        }

        @TestMetadata("test2.kt")
        public void testTest2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test2.kt");
        }

        @TestMetadata("test3.kt")
        public void testTest3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test3.kt");
        }

        @TestMetadata("test4.kt")
        public void testTest4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test4.kt");
        }

        @TestMetadata("test5.kt")
        public void testTest5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test5.kt");
        }

        @TestMetadata("test6.kt")
        public void testTest6() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test6.kt");
        }

        @TestMetadata("test7.kt")
        public void testTest7() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/test7.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDataModifier/vararg.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addDefaultConstructor")
    public static class AddDefaultConstructor extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("expect.kt")
        public void testExpect() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDefaultConstructor/expect.kt");
        }

        @TestMetadata("expectAnnotation.kt")
        public void testExpectAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDefaultConstructor/expectAnnotation.kt");
        }

        @TestMetadata("expectAnnotation2.kt")
        public void testExpectAnnotation2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDefaultConstructor/expectAnnotation2.kt");
        }

        @TestMetadata("expectAnnotation3.kt")
        public void testExpectAnnotation3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDefaultConstructor/expectAnnotation3.kt");
        }

        @TestMetadata("expectAnnotationWithUnresolvedParams.kt")
        public void testExpectAnnotationWithUnresolvedParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDefaultConstructor/expectAnnotationWithUnresolvedParams.kt");
        }

        @TestMetadata("expectInterface.kt")
        public void testExpectInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDefaultConstructor/expectInterface.kt");
        }

        @TestMetadata("expectWithUnresolvedParams.kt")
        public void testExpectWithUnresolvedParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDefaultConstructor/expectWithUnresolvedParams.kt");
        }

        @TestMetadata("interface.kt")
        public void testInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addDefaultConstructor/interface.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addElseBranchToIf")
    public static class AddElseBranchToIf extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("error.kt")
        public void testError() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/error.kt");
        }

        @TestMetadata("errorWithBlock.kt")
        public void testErrorWithBlock() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/errorWithBlock.kt");
        }

        @TestMetadata("inElvis.kt")
        public void testInElvis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/inElvis.kt");
        }

        @TestMetadata("inElvisBlock.kt")
        public void testInElvisBlock() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/inElvisBlock.kt");
        }

        @TestMetadata("inElvisWithoutThen.kt")
        public void testInElvisWithoutThen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/inElvisWithoutThen.kt");
        }

        @TestMetadata("withoutCloseParenthesisInCondition.kt")
        public void testWithoutCloseParenthesisInCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/withoutCloseParenthesisInCondition.kt");
        }

        @TestMetadata("withoutCondition.kt")
        public void testWithoutCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addElseBranchToIf/withoutCondition.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addEmptyArgumentList")
    public static class AddEmptyArgumentList extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("suspend.kt")
        public void testSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addEmptyArgumentList/suspend.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addEqEqTrue")
    public static class AddEqEqTrue extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addEqEqTrue/argument.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addEqEqTrue/assignment.kt");
        }

        @TestMetadata("condition.kt")
        public void testCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addEqEqTrue/condition.kt");
        }

        @TestMetadata("initializer.kt")
        public void testInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addEqEqTrue/initializer.kt");
        }

        @TestMetadata("notBoolean.kt")
        public void testNotBoolean() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addEqEqTrue/notBoolean.kt");
        }

        @TestMetadata("notBoolean2.kt")
        public void testNotBoolean2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addEqEqTrue/notBoolean2.kt");
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addEqEqTrue/return.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addFunModifier")
    public static class AddFunModifier extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("asFirstArgument.kt")
        public void testAsFirstArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/asFirstArgument.kt");
        }

        @TestMetadata("asLastArgument.kt")
        public void testAsLastArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/asLastArgument.kt");
        }

        @TestMetadata("hasArguments.kt")
        public void testHasArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/hasArguments.kt");
        }

        @TestMetadata("hasNoArguments.kt")
        public void testHasNoArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/hasNoArguments.kt");
        }

        @TestMetadata("multipleLambdaArgumentsAreNotMovedOutsideParentheses.kt")
        public void testMultipleLambdaArgumentsAreNotMovedOutsideParentheses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/multipleLambdaArgumentsAreNotMovedOutsideParentheses.kt");
        }

        @TestMetadata("namedLambdaArgumentIsNotMovedOutsideParentheses.kt")
        public void testNamedLambdaArgumentIsNotMovedOutsideParentheses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/namedLambdaArgumentIsNotMovedOutsideParentheses.kt");
        }

        @TestMetadata("nonSource.kt")
        public void testNonSource() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/nonSource.kt");
        }

        @TestMetadata("notSam.kt")
        public void testNotSam() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/notSam.kt");
        }

        @TestMetadata("notSam2.kt")
        public void testNotSam2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/notSam2.kt");
        }

        @TestMetadata("notSam3.kt")
        public void testNotSam3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/notSam3.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addFunModifier/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addGenericUpperBound")
    public static class AddGenericUpperBound extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addGenericUpperBound/basic.kt");
        }

        @TestMetadata("boundAlreadyExists.kt")
        public void testBoundAlreadyExists() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addGenericUpperBound/boundAlreadyExists.kt");
        }

        @TestMetadata("inferenceTwoParams.kt")
        public void testInferenceTwoParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addGenericUpperBound/inferenceTwoParams.kt");
        }

        @TestMetadata("paramAsBound.kt")
        public void testParamAsBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addGenericUpperBound/paramAsBound.kt");
        }

        @TestMetadata("withinDeclaration.kt")
        public void testWithinDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addGenericUpperBound/withinDeclaration.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addInline")
    public static class AddInline extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInline/basic.kt");
        }

        @TestMetadata("local.kt")
        public void testLocal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInline/local.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addInlineToReifiedFunctionFix")
    public static class AddInlineToReifiedFunctionFix extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addInlineToReifiedFunctionFix/basic.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addIsToWhenCondition")
    public static class AddIsToWhenCondition extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addIsToWhenCondition/class.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addJvmInline")
    public static class AddJvmInline extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("genericParameter.kt")
        public void testGenericParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addJvmInline/genericParameter.kt");
        }

        @TestMetadata("valueClass.kt")
        public void testValueClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addJvmInline/valueClass.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addJvmStaticAnnotation")
    public static class AddJvmStaticAnnotation extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addJvmStaticAnnotation/function.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addJvmStaticAnnotation/property.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addNoinline")
    public static class AddNoinline extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addNoinline/basic.kt");
        }

        @TestMetadata("extensionCalls.kt")
        public void testExtensionCalls() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addNoinline/extensionCalls.kt");
        }

        @TestMetadata("suspend.kt")
        public void testSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addNoinline/suspend.kt");
        }

        @TestMetadata("withCrossinline.kt")
        public void testWithCrossinline() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addNoinline/withCrossinline.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addReifiedToTypeParameterOfFunctionFix")
    public static class AddReifiedToTypeParameterOfFunctionFix extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("doubleColonClass.kt")
        public void testDoubleColonClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReifiedToTypeParameterOfFunctionFix/doubleColonClass.kt");
        }

        @TestMetadata("secondTypeParameter.kt")
        public void testSecondTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReifiedToTypeParameterOfFunctionFix/secondTypeParameter.kt");
        }

        @TestMetadata("toTypedArray.kt")
        public void testToTypedArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReifiedToTypeParameterOfFunctionFix/toTypedArray.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addReturnExpression")
    public static class AddReturnExpression extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("emptyBody.kt")
        public void testEmptyBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnExpression/emptyBody.kt");
        }

        @TestMetadata("noRightBrace.kt")
        public void testNoRightBrace() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnExpression/noRightBrace.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnExpression/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addReturnToLastExpressionInFunction")
    public static class AddReturnToLastExpressionInFunction extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("notSubtype.kt")
        public void testNotSubtype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnToLastExpressionInFunction/notSubtype.kt");
        }

        @TestMetadata("nothing.kt")
        public void testNothing() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnToLastExpressionInFunction/nothing.kt");
        }

        @TestMetadata("simpleBoolean.kt")
        public void testSimpleBoolean() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnToLastExpressionInFunction/simpleBoolean.kt");
        }

        @TestMetadata("subtype.kt")
        public void testSubtype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnToLastExpressionInFunction/subtype.kt");
        }

        @TestMetadata("typeError.kt")
        public void testTypeError() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnToLastExpressionInFunction/typeError.kt");
        }

        @TestMetadata("typeError2.kt")
        public void testTypeError2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addReturnToLastExpressionInFunction/typeError2.kt");
        }
    }









    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections")
    public abstract static class AddStarProjections extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections/cast")
        public static class Cast extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("changeFunctionalToStarProjection.kt")
            public void testChangeFunctionalToStarProjection() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/changeFunctionalToStarProjection.kt");
            }

            @TestMetadata("changeToStarProjection.kt")
            public void testChangeToStarProjection() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/changeToStarProjection.kt");
            }

            @TestMetadata("changeToStarProjectionNullable.kt")
            public void testChangeToStarProjectionNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/changeToStarProjectionNullable.kt");
            }

            @TestMetadata("extensionReceiver.kt")
            public void testExtensionReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver.kt");
            }

            @TestMetadata("extensionReceiver2.kt")
            public void testExtensionReceiver2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver2.kt");
            }

            @TestMetadata("extensionReceiver3.kt")
            public void testExtensionReceiver3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver3.kt");
            }

            @TestMetadata("extensionReceiver4.kt")
            public void testExtensionReceiver4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver4.kt");
            }

            @TestMetadata("extensionReceiver5.kt")
            public void testExtensionReceiver5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/extensionReceiver5.kt");
            }

            @TestMetadata("genericTypeParameter.kt")
            public void testGenericTypeParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter.kt");
            }

            @TestMetadata("genericTypeParameter2.kt")
            public void testGenericTypeParameter2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter2.kt");
            }

            @TestMetadata("genericTypeParameter3.kt")
            public void testGenericTypeParameter3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter3.kt");
            }

            @TestMetadata("genericTypeParameter4.kt")
            public void testGenericTypeParameter4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter4.kt");
            }

            @TestMetadata("genericTypeParameter5.kt")
            public void testGenericTypeParameter5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter5.kt");
            }

            @TestMetadata("genericTypeParameter6.kt")
            public void testGenericTypeParameter6() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter6.kt");
            }

            @TestMetadata("genericTypeParameter7.kt")
            public void testGenericTypeParameter7() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/genericTypeParameter7.kt");
            }

            @TestMetadata("uncheckedCastOnTypeParameter.kt")
            public void testUncheckedCastOnTypeParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/uncheckedCastOnTypeParameter.kt");
            }

            @TestMetadata("valueArgument.kt")
            public void testValueArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument.kt");
            }

            @TestMetadata("valueArgument2.kt")
            public void testValueArgument2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument2.kt");
            }

            @TestMetadata("valueArgument3.kt")
            public void testValueArgument3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument3.kt");
            }

            @TestMetadata("valueArgument4.kt")
            public void testValueArgument4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument4.kt");
            }

            @TestMetadata("valueArgument5.kt")
            public void testValueArgument5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument5.kt");
            }

            @TestMetadata("valueArgument6.kt")
            public void testValueArgument6() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/cast/valueArgument6.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections/checkType")
        public static class CheckType extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/array.kt");
            }

            @TestMetadata("arrayInWhen.kt")
            public void testArrayInWhen() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/arrayInWhen.kt");
            }

            @TestMetadata("changeToStarProjectionMultipleParameters.kt")
            public void testChangeToStarProjectionMultipleParameters() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/changeToStarProjectionMultipleParameters.kt");
            }

            @TestMetadata("changeToStarProjectionNullable.kt")
            public void testChangeToStarProjectionNullable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/changeToStarProjectionNullable.kt");
            }

            @TestMetadata("changeToStarProjectionSingleParameter.kt")
            public void testChangeToStarProjectionSingleParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/checkType/changeToStarProjectionSingleParameter.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections/inner")
        public static class Inner extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inner1.kt")
            public void testInner1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner1.kt");
            }

            @TestMetadata("inner2.kt")
            public void testInner2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner2.kt");
            }

            @TestMetadata("inner3.kt")
            public void testInner3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner3.kt");
            }

            @TestMetadata("inner4.kt")
            public void testInner4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner4.kt");
            }

            @TestMetadata("inner5.kt")
            public void testInner5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner5.kt");
            }

            @TestMetadata("inner6.kt")
            public void testInner6() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner6.kt");
            }

            @TestMetadata("inner7.kt")
            public void testInner7() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner7.kt");
            }

            @TestMetadata("inner8.kt")
            public void testInner8() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/inner/inner8.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("qualifiedArrayList.kt")
            public void testQualifiedArrayList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/qualifiedArrayList.kt");
            }

            @TestMetadata("qualifiedList.kt")
            public void testQualifiedList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/qualifiedList.kt");
            }

            @TestMetadata("qualifiedMap.kt")
            public void testQualifiedMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/qualifiedMap.kt");
            }

            @TestMetadata("unqualifiedList.kt")
            public void testUnqualifiedList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/unqualifiedList.kt");
            }

            @TestMetadata("unqualifiedMap.kt")
            public void testUnqualifiedMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/unqualifiedMap.kt");
            }

            @TestMetadata("unqualifiedMapOneArg.kt")
            public void testUnqualifiedMapOneArg() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/unqualifiedMapOneArg.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/addStarProjections/when")
        public static class When extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("qualifiedArrayList.kt")
            public void testQualifiedArrayList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/qualifiedArrayList.kt");
            }

            @TestMetadata("qualifiedList.kt")
            public void testQualifiedList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/qualifiedList.kt");
            }

            @TestMetadata("qualifiedMap.kt")
            public void testQualifiedMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/qualifiedMap.kt");
            }

            @TestMetadata("unqualifiedList.kt")
            public void testUnqualifiedList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/unqualifiedList.kt");
            }

            @TestMetadata("unqualifiedMap.kt")
            public void testUnqualifiedMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/unqualifiedMap.kt");
            }

            @TestMetadata("unqualifiedMapOneArg.kt")
            public void testUnqualifiedMapOneArg() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/addStarProjections/when/unqualifiedMapOneArg.kt");
            }
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter")
    public static class AddTypeAnnotationToValueParameter extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationWithArrayLiteralDouble.kt")
        public void testAnnotationWithArrayLiteralDouble() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithArrayLiteralDouble.kt");
        }

        @TestMetadata("annotationWithArrayLiteralInt.kt")
        public void testAnnotationWithArrayLiteralInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithArrayLiteralInt.kt");
        }

        @TestMetadata("annotationWithArrayLiteralString.kt")
        public void testAnnotationWithArrayLiteralString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithArrayLiteralString.kt");
        }

        @TestMetadata("annotationWithVarargArrayLiteralDouble.kt")
        public void testAnnotationWithVarargArrayLiteralDouble() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargArrayLiteralDouble.kt");
        }

        @TestMetadata("annotationWithVarargArrayLiteralInt.kt")
        public void testAnnotationWithVarargArrayLiteralInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargArrayLiteralInt.kt");
        }

        @TestMetadata("annotationWithVarargArrayLiteralString.kt")
        public void testAnnotationWithVarargArrayLiteralString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargArrayLiteralString.kt");
        }

        @TestMetadata("annotationWithVarargDoubleArray.kt")
        public void testAnnotationWithVarargDoubleArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargDoubleArray.kt");
        }

        @TestMetadata("annotationWithVarargIntArray.kt")
        public void testAnnotationWithVarargIntArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/annotationWithVarargIntArray.kt");
        }

        @TestMetadata("noDefaultValue.kt")
        public void testNoDefaultValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/noDefaultValue.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addTypeAnnotationToValueParameter/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/addUnsafeVarianceAnnotation")
    public static class AddUnsafeVarianceAnnotation extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("parameterType.kt")
        public void testParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addUnsafeVarianceAnnotation/parameterType.kt");
        }

        @TestMetadata("returnType.kt")
        public void testReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/addUnsafeVarianceAnnotation/returnType.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/assignToProperty")
    public static class AssignToProperty extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("differentNameProperty.kt")
        public void testDifferentNameProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/differentNameProperty.kt");
        }

        @TestMetadata("differentNameProperty2.kt")
        public void testDifferentNameProperty2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/differentNameProperty2.kt");
        }

        @TestMetadata("differentTypeProperty.kt")
        public void testDifferentTypeProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/differentTypeProperty.kt");
        }

        @TestMetadata("differentTypeProperty2.kt")
        public void testDifferentTypeProperty2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/differentTypeProperty2.kt");
        }

        @TestMetadata("inSecondaryConstructor.kt")
        public void testInSecondaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/inSecondaryConstructor.kt");
        }

        @TestMetadata("noProperty.kt")
        public void testNoProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/noProperty.kt");
        }

        @TestMetadata("qualifiedThis.kt")
        public void testQualifiedThis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/qualifiedThis.kt");
        }

        @TestMetadata("sameProperty.kt")
        public void testSameProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/sameProperty.kt");
        }

        @TestMetadata("sameProperty2.kt")
        public void testSameProperty2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/sameProperty2.kt");
        }

        @TestMetadata("sameProperty3.kt")
        public void testSameProperty3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/sameProperty3.kt");
        }

        @TestMetadata("valProperty.kt")
        public void testValProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/valProperty.kt");
        }

        @TestMetadata("valProperty2.kt")
        public void testValProperty2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/assignToProperty/valProperty2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/callFromPublicInline")
    public abstract static class CallFromPublicInline extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/callFromPublicInline/nonPublic")
        public static class NonPublic extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("internalFunction.kt")
            public void testInternalFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/nonPublic/internalFunction.kt");
            }

            @TestMetadata("internalFunction2.kt")
            public void testInternalFunction2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/nonPublic/internalFunction2.kt");
            }

            @TestMetadata("internalFunction3.kt")
            public void testInternalFunction3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/nonPublic/internalFunction3.kt");
            }

            @TestMetadata("privateProperty.kt")
            public void testPrivateProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/nonPublic/privateProperty.kt");
            }

            @TestMetadata("privateProperty2.kt")
            public void testPrivateProperty2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/nonPublic/privateProperty2.kt");
            }

            @TestMetadata("privateProperty3.kt")
            public void testPrivateProperty3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/nonPublic/privateProperty3.kt");
            }

            @TestMetadata("reifiedTypeParameter.kt")
            public void testReifiedTypeParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/nonPublic/reifiedTypeParameter.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/callFromPublicInline/protected")
        public static class Protected extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("infix.kt")
            public void testInfix() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/protected/infix.kt");
            }

            @TestMetadata("protectedFunction.kt")
            public void testProtectedFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/protected/protectedFunction.kt");
            }

            @TestMetadata("protectedFunction2.kt")
            public void testProtectedFunction2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/protected/protectedFunction2.kt");
            }

            @TestMetadata("protectedFunction3.kt")
            public void testProtectedFunction3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/protected/protectedFunction3.kt");
            }

            @TestMetadata("reifiedTypeParameter.kt")
            public void testReifiedTypeParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/protected/reifiedTypeParameter.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/callFromPublicInline/super")
        public static class Super extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("reifiedTypeParameter.kt")
            public void testReifiedTypeParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/super/reifiedTypeParameter.kt");
            }

            @TestMetadata("superFunction.kt")
            public void testSuperFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/super/superFunction.kt");
            }

            @TestMetadata("superFunction2.kt")
            public void testSuperFunction2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/super/superFunction2.kt");
            }

            @TestMetadata("superFunction3.kt")
            public void testSuperFunction3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/callFromPublicInline/super/superFunction3.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/canBeParameter")
    public static class CanBeParameter extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("usedInDerivedClass.kt")
        public void testUsedInDerivedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/canBeParameter/usedInDerivedClass.kt");
        }

        @TestMetadata("usedInProperty.kt")
        public void testUsedInProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/canBeParameter/usedInProperty.kt");
        }

        @TestMetadata("usedPrivateInInitializer.kt")
        public void testUsedPrivateInInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/canBeParameter/usedPrivateInInitializer.kt");
        }

        @TestMetadata("usedVarArg.kt")
        public void testUsedVarArg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/canBeParameter/usedVarArg.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/canBePrimaryConstructorProperty")
    public static class CanBePrimaryConstructorProperty extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("commentAfter.kt")
        public void testCommentAfter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/canBePrimaryConstructorProperty/commentAfter.kt");
        }

        @TestMetadata("commentAhead.kt")
        public void testCommentAhead() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/canBePrimaryConstructorProperty/commentAhead.kt");
        }

        @TestMetadata("protectedOpenVar.kt")
        public void testProtectedOpenVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/canBePrimaryConstructorProperty/protectedOpenVar.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/canBePrimaryConstructorProperty/simple.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/canBePrimaryConstructorProperty/vararg.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/changeObjectToClass")
    public static class ChangeObjectToClass extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("primaryConstructor.kt")
        public void testPrimaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeObjectToClass/primaryConstructor.kt");
        }

        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeObjectToClass/secondaryConstructor.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/changeToLabeledReturn")
    public static class ChangeToLabeledReturn extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constantExpectedTypeMismatch.kt")
        public void testConstantExpectedTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/constantExpectedTypeMismatch.kt");
        }

        @TestMetadata("multipleInner.kt")
        public void testMultipleInner() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/multipleInner.kt");
        }

        @TestMetadata("multipleOuter.kt")
        public void testMultipleOuter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/multipleOuter.kt");
        }

        @TestMetadata("noCandidates.kt")
        public void testNoCandidates() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/noCandidates.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/normal.kt");
        }

        @TestMetadata("nullForNonnullType.kt")
        public void testNullForNonnullType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/nullForNonnullType.kt");
        }

        @TestMetadata("nullForNonnullType2.kt")
        public void testNullForNonnullType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/nullForNonnullType2.kt");
        }

        @TestMetadata("returnNotAllowedInClass.kt")
        public void testReturnNotAllowedInClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/returnNotAllowedInClass.kt");
        }

        @TestMetadata("returnNotAllowedInObject.kt")
        public void testReturnNotAllowedInObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/returnNotAllowedInObject.kt");
        }

        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/typeMismatch.kt");
        }

        @TestMetadata("typeMismatch2.kt")
        public void testTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToLabeledReturn/typeMismatch2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator")
    public static class ChangeToUseSpreadOperator extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("differentTypeParameter.kt")
        public void testDifferentTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/differentTypeParameter.kt");
        }

        @TestMetadata("differentTypeParameterGeneric.kt")
        public void testDifferentTypeParameterGeneric() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/differentTypeParameterGeneric.kt");
        }

        @TestMetadata("mapOf.kt")
        public void testMapOf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/mapOf.kt");
        }

        @TestMetadata("multipleParams.kt")
        public void testMultipleParams() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/multipleParams.kt");
        }

        @TestMetadata("nestedGeneric.kt")
        public void testNestedGeneric() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/nestedGeneric.kt");
        }

        @TestMetadata("nonArray.kt")
        public void testNonArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/nonArray.kt");
        }

        @TestMetadata("nonVarArg.kt")
        public void testNonVarArg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/nonVarArg.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/normal.kt");
        }

        @TestMetadata("stdlibMapOf.kt")
        public void testStdlibMapOf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/stdlibMapOf.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeToUseSpreadOperator/vararg.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/checkArguments/addNameToArgument")
    public static class AddNameToArgument extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("invokeOnString.kt")
        public void testInvokeOnString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/checkArguments/addNameToArgument/invokeOnString.kt");
        }

        @TestMetadata("missingParameterName.kt")
        public void testMissingParameterName() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/checkArguments/addNameToArgument/missingParameterName.kt");
        }

        @TestMetadata("mixedNamedAndPositionalArguments.kt")
        public void testMixedNamedAndPositionalArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/checkArguments/addNameToArgument/mixedNamedAndPositionalArguments.kt");
        }

        @TestMetadata("mixedNamedAndPositionalArgumentsConstructor.kt")
        public void testMixedNamedAndPositionalArgumentsConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/checkArguments/addNameToArgument/mixedNamedAndPositionalArgumentsConstructor.kt");
        }

        @TestMetadata("mixedNamedAndPositionalArgumentsMultiple.kt")
        public void testMixedNamedAndPositionalArgumentsMultiple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/checkArguments/addNameToArgument/mixedNamedAndPositionalArgumentsMultiple.kt");
        }

        @TestMetadata("mixedNamedAndPositionalArgumentsSubtype.kt")
        public void testMixedNamedAndPositionalArgumentsSubtype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/checkArguments/addNameToArgument/mixedNamedAndPositionalArgumentsSubtype.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf")
    public static class ConvertCollectionLiteralToIntArrayOf extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("companionObject.kt")
        public void testCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf/companionObject.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf/constructor.kt");
        }

        @TestMetadata("NestedClass.kt")
        public void testNestedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf/NestedClass.kt");
        }

        @TestMetadata("NestedObject.kt")
        public void testNestedObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertCollectionLiteralToIntArrayOf/NestedObject.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/convertIllegalEscapeToUnicodeEscape")
    public static class ConvertIllegalEscapeToUnicodeEscape extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("formFeed.kt")
        public void testFormFeed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertIllegalEscapeToUnicodeEscape/formFeed.kt");
        }

        @TestMetadata("formFeedInStringTemplate.kt")
        public void testFormFeedInStringTemplate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertIllegalEscapeToUnicodeEscape/formFeedInStringTemplate.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate")
    public static class ConvertLateinitPropertyToNotNullDelegate extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/basic.kt");
        }

        @TestMetadata("basic2.kt")
        public void testBasic2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/basic2.kt");
        }

        @TestMetadata("hasInitializer.kt")
        public void testHasInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/hasInitializer.kt");
        }

        @TestMetadata("noType.kt")
        public void testNoType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/noType.kt");
        }

        @TestMetadata("notPrimitive.kt")
        public void testNotPrimitive() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/notPrimitive.kt");
        }

        @TestMetadata("nullablePrimitive.kt")
        public void testNullablePrimitive() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/nullablePrimitive.kt");
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertLateinitPropertyToNotNullDelegate/val.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/convertPropertyInitializerToGetter")
    public static class ConvertPropertyInitializerToGetter extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertPropertyInitializerToGetter/val.kt");
        }

        @TestMetadata("var.kt")
        public void testVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertPropertyInitializerToGetter/var.kt");
        }

        @TestMetadata("varWithSetter.kt")
        public void testVarWithSetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertPropertyInitializerToGetter/varWithSetter.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/convertToIsArrayOfCall")
    public static class ConvertToIsArrayOfCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("arrayLhs.kt")
        public void testArrayLhs() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertToIsArrayOfCall/arrayLhs.kt");
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertToIsArrayOfCall/basic.kt");
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertToIsArrayOfCall/list.kt");
        }

        @TestMetadata("negatedArrayLhs.kt")
        public void testNegatedArrayLhs() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertToIsArrayOfCall/negatedArrayLhs.kt");
        }

        @TestMetadata("negatedBasic.kt")
        public void testNegatedBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertToIsArrayOfCall/negatedBasic.kt");
        }

        @TestMetadata("negatedNullableArrayLhs.kt")
        public void testNegatedNullableArrayLhs() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertToIsArrayOfCall/negatedNullableArrayLhs.kt");
        }

        @TestMetadata("nullableArrayLhs.kt")
        public void testNullableArrayLhs() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/convertToIsArrayOfCall/nullableArrayLhs.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/createLabel")
    public static class CreateLabel extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("breakInLoop.kt")
        public void testBreakInLoop() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createLabel/breakInLoop.kt");
        }

        @TestMetadata("breakInOuterLoop.kt")
        public void testBreakInOuterLoop() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createLabel/breakInOuterLoop.kt");
        }

        @TestMetadata("breakInlambdaBeforeLoop.kt")
        public void testBreakInlambdaBeforeLoop() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createLabel/breakInlambdaBeforeLoop.kt");
        }

        @TestMetadata("breakNoLoop.kt")
        public void testBreakNoLoop() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createLabel/breakNoLoop.kt");
        }

        @TestMetadata("continueInLoop.kt")
        public void testContinueInLoop() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createLabel/continueInLoop.kt");
        }

        @TestMetadata("continueNoLoop.kt")
        public void testContinueNoLoop() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createLabel/continueNoLoop.kt");
        }

        @TestMetadata("returnInLambda.kt")
        public void testReturnInLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createLabel/returnInLambda.kt");
        }

        @TestMetadata("returnInOuterLambda.kt")
        public void testReturnInOuterLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createLabel/returnInOuterLambda.kt");
        }

        @TestMetadata("returnNoLambda.kt")
        public void testReturnNoLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createLabel/returnNoLambda.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/declarationCantBeInlined")
    public static class DeclarationCantBeInlined extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inClass.kt")
        public void testInClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/declarationCantBeInlined/inClass.kt");
        }

        @TestMetadata("inInterface.kt")
        public void testInInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/declarationCantBeInlined/inInterface.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/decreaseVisibility")
    public static class DecreaseVisibility extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("exposedConstructorParameterType.kt")
        public void testExposedConstructorParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedConstructorParameterType.kt");
        }

        @TestMetadata("exposedConstructorParameterType_privateVal.kt")
        public void testExposedConstructorParameterType_privateVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedConstructorParameterType_privateVal.kt");
        }

        @TestMetadata("exposedConstructorParameterType_val.kt")
        public void testExposedConstructorParameterType_val() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedConstructorParameterType_val.kt");
        }

        @TestMetadata("exposedParameterType.kt")
        public void testExposedParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedParameterType.kt");
        }

        @TestMetadata("exposedParameterType_privateType.kt")
        public void testExposedParameterType_privateType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedParameterType_privateType.kt");
        }

        @TestMetadata("exposedPropertyType.kt")
        public void testExposedPropertyType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedPropertyType.kt");
        }

        @TestMetadata("exposedReceiverType.kt")
        public void testExposedReceiverType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedReceiverType.kt");
        }

        @TestMetadata("exposedReceiverTypeInternal.kt")
        public void testExposedReceiverTypeInternal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedReceiverTypeInternal.kt");
        }

        @TestMetadata("exposedReceiverTypePrivate.kt")
        public void testExposedReceiverTypePrivate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedReceiverTypePrivate.kt");
        }

        @TestMetadata("exposedReturnType.kt")
        public void testExposedReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedReturnType.kt");
        }

        @TestMetadata("exposedSuperClass.kt")
        public void testExposedSuperClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedSuperClass.kt");
        }

        @TestMetadata("exposedSuperClassProtectedBase.kt")
        public void testExposedSuperClassProtectedBase() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedSuperClassProtectedBase.kt");
        }

        @TestMetadata("exposedSuperClassProtectedInAnother.kt")
        public void testExposedSuperClassProtectedInAnother() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedSuperClassProtectedInAnother.kt");
        }

        @TestMetadata("exposedSuperInterface.kt")
        public void testExposedSuperInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedSuperInterface.kt");
        }

        @TestMetadata("exposedSuperInterfacePrivate.kt")
        public void testExposedSuperInterfacePrivate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedSuperInterfacePrivate.kt");
        }

        @TestMetadata("exposedTypeInAnnotation.kt")
        public void testExposedTypeInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedTypeInAnnotation.kt");
        }

        @TestMetadata("exposedTypeParameterBound.kt")
        public void testExposedTypeParameterBound() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedTypeParameterBound.kt");
        }

        @TestMetadata("exposedTypeParameterBoundNested.kt")
        public void testExposedTypeParameterBoundNested() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/decreaseVisibility/exposedTypeParameterBoundNested.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage")
    public abstract static class DeprecatedSymbolUsage extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects")
        public static class ArgumentSideEffects extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("callWithAssignment.kt")
            public void testCallWithAssignment() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/callWithAssignment.kt");
            }

            @TestMetadata("callWithAssignment1.kt")
            public void testCallWithAssignment1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/callWithAssignment1.kt");
            }

            @TestMetadata("callWithAssignment2.kt")
            public void testCallWithAssignment2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/callWithAssignment2.kt");
            }

            @TestMetadata("callWithAssignment3.kt")
            public void testCallWithAssignment3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/callWithAssignment3.kt");
            }

            @TestMetadata("callWithAssignment4.kt")
            public void testCallWithAssignment4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/callWithAssignment4.kt");
            }

            @TestMetadata("callWithAssignment5.kt")
            public void testCallWithAssignment5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/callWithAssignment5.kt");
            }

            @TestMetadata("complexExpressionNotUsed1.kt")
            public void testComplexExpressionNotUsed1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed1.kt");
            }

            @TestMetadata("complexExpressionNotUsed2.kt")
            public void testComplexExpressionNotUsed2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed2.kt");
            }

            @TestMetadata("complexExpressionNotUsed3Runtime.kt")
            public void testComplexExpressionNotUsed3Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed3Runtime.kt");
            }

            @TestMetadata("complexExpressionNotUsed4Runtime.kt")
            public void testComplexExpressionNotUsed4Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed4Runtime.kt");
            }

            @TestMetadata("complexExpressionNotUsed5Runtime.kt")
            public void testComplexExpressionNotUsed5Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsed5Runtime.kt");
            }

            @TestMetadata("complexExpressionNotUsedSafeCall.kt")
            public void testComplexExpressionNotUsedSafeCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsedSafeCall.kt");
            }

            @TestMetadata("complexExpressionNotUsedSafeCall2Runtime.kt")
            public void testComplexExpressionNotUsedSafeCall2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsedSafeCall2Runtime.kt");
            }

            @TestMetadata("complexExpressionNotUsedShortenRefsRuntime.kt")
            public void testComplexExpressionNotUsedShortenRefsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionNotUsedShortenRefsRuntime.kt");
            }

            @TestMetadata("complexExpressionUsedTwice.kt")
            public void testComplexExpressionUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice.kt");
            }

            @TestMetadata("complexExpressionUsedTwice2.kt")
            public void testComplexExpressionUsedTwice2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice2.kt");
            }

            @TestMetadata("complexExpressionUsedTwice3Runtime.kt")
            public void testComplexExpressionUsedTwice3Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice3Runtime.kt");
            }

            @TestMetadata("complexExpressionUsedTwice4.kt")
            public void testComplexExpressionUsedTwice4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice4.kt");
            }

            @TestMetadata("complexExpressionUsedTwice5Runtime.kt")
            public void testComplexExpressionUsedTwice5Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice5Runtime.kt");
            }

            @TestMetadata("complexExpressionUsedTwice6Runtime.kt")
            public void testComplexExpressionUsedTwice6Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/complexExpressionUsedTwice6Runtime.kt");
            }

            @TestMetadata("propertyConstantInitializer.kt")
            public void testPropertyConstantInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/propertyConstantInitializer.kt");
            }

            @TestMetadata("propertyInitializer.kt")
            public void testPropertyInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/propertyInitializer.kt");
            }

            @TestMetadata("simpleExpressionNotUsed.kt")
            public void testSimpleExpressionNotUsed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/simpleExpressionNotUsed.kt");
            }

            @TestMetadata("simpleExpressionUsedTwice.kt")
            public void testSimpleExpressionUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/simpleExpressionUsedTwice.kt");
            }

            @TestMetadata("stringLiteralUsedTwice.kt")
            public void testStringLiteralUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/stringLiteralUsedTwice.kt");
            }

            @TestMetadata("stringTemplateUsedTwice.kt")
            public void testStringTemplateUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/stringTemplateUsedTwice.kt");
            }

            @TestMetadata("stringTemplateUsedTwice2.kt")
            public void testStringTemplateUsedTwice2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/stringTemplateUsedTwice2.kt");
            }

            @TestMetadata("withLiteralAndReference.kt")
            public void testWithLiteralAndReference() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/argumentSideEffects/withLiteralAndReference.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages")
        public abstract static class ClassUsages extends AbstractHighLevelQuickFixTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages")
            public static class Uncategorized extends AbstractHighLevelQuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("annotation1.kt")
                public void testAnnotation1() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotation1.kt");
                }

                @TestMetadata("annotation2.kt")
                public void testAnnotation2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotation2.kt");
                }

                @TestMetadata("annotation3.kt")
                public void testAnnotation3() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotation3.kt");
                }

                @TestMetadata("annotation4.kt")
                public void testAnnotation4() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotation4.kt");
                }

                @TestMetadata("annotationKeepNamedArgs.kt")
                public void testAnnotationKeepNamedArgs() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotationKeepNamedArgs.kt");
                }

                @TestMetadata("annotationWithFileUseSiteTarget1.kt")
                public void testAnnotationWithFileUseSiteTarget1() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotationWithFileUseSiteTarget1.kt");
                }

                @TestMetadata("annotationWithFileUseSiteTarget2.kt")
                public void testAnnotationWithFileUseSiteTarget2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotationWithFileUseSiteTarget2.kt");
                }

                @TestMetadata("annotationWithFileUseSiteTarget3.kt")
                public void testAnnotationWithFileUseSiteTarget3() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotationWithFileUseSiteTarget3.kt");
                }

                @TestMetadata("annotationWithGetUseSiteTarget1.kt")
                public void testAnnotationWithGetUseSiteTarget1() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotationWithGetUseSiteTarget1.kt");
                }

                @TestMetadata("annotationWithGetUseSiteTarget2.kt")
                public void testAnnotationWithGetUseSiteTarget2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotationWithGetUseSiteTarget2.kt");
                }

                @TestMetadata("annotationWithGetUseSiteTarget3.kt")
                public void testAnnotationWithGetUseSiteTarget3() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/annotationWithGetUseSiteTarget3.kt");
                }

                @TestMetadata("constructorUsage1.kt")
                public void testConstructorUsage1() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsage1.kt");
                }

                @TestMetadata("constructorUsage2.kt")
                public void testConstructorUsage2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsage2.kt");
                }

                @TestMetadata("constructorUsage3.kt")
                public void testConstructorUsage3() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsage3.kt");
                }

                @TestMetadata("constructorUsage4.kt")
                public void testConstructorUsage4() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsage4.kt");
                }

                @TestMetadata("constructorUsage5.kt")
                public void testConstructorUsage5() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsage5.kt");
                }

                @TestMetadata("constructorUsage6.kt")
                public void testConstructorUsage6() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsage6.kt");
                }

                @TestMetadata("constructorUsage7.kt")
                public void testConstructorUsage7() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsage7.kt");
                }

                @TestMetadata("constructorUsageWithTypeArgument.kt")
                public void testConstructorUsageWithTypeArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsageWithTypeArgument.kt");
                }

                @TestMetadata("constructorUsageWithTypeArgument2.kt")
                public void testConstructorUsageWithTypeArgument2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsageWithTypeArgument2.kt");
                }

                @TestMetadata("constructorUsageWithTypeArgument3.kt")
                public void testConstructorUsageWithTypeArgument3() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsageWithTypeArgument3.kt");
                }

                @TestMetadata("constructorUsageWithTypeArgument4.kt")
                public void testConstructorUsageWithTypeArgument4() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsageWithTypeArgument4.kt");
                }

                @TestMetadata("constructorUsageWithTypeArgument5.kt")
                public void testConstructorUsageWithTypeArgument5() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsageWithTypeArgument5.kt");
                }

                @TestMetadata("constructorUsageWithTypeArgument6.kt")
                public void testConstructorUsageWithTypeArgument6() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsageWithTypeArgument6.kt");
                }

                @TestMetadata("constructorUsageWithTypeArgument7.kt")
                public void testConstructorUsageWithTypeArgument7() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsageWithTypeArgument7.kt");
                }

                @TestMetadata("constructorUsageWithTypeArgumentWithoutSpecifyType.kt")
                public void testConstructorUsageWithTypeArgumentWithoutSpecifyType() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/constructorUsageWithTypeArgumentWithoutSpecifyType.kt");
                }

                @TestMetadata("imports.kt")
                public void testImports() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/imports.kt");
                }

                @TestMetadata("inAliasSimple.kt")
                public void testInAliasSimple() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/inAliasSimple.kt");
                }

                @TestMetadata("inAliasWithOwnReplaceForConstructorForAliasArguments.kt")
                public void testInAliasWithOwnReplaceForConstructorForAliasArguments() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/inAliasWithOwnReplaceForConstructorForAliasArguments.kt");
                }

                @TestMetadata("inAliasWithOwnReplaceForConstructorUnused.kt")
                public void testInAliasWithOwnReplaceForConstructorUnused() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/inAliasWithOwnReplaceForConstructorUnused.kt");
                }

                @TestMetadata("inAliasWithOwnReplaceForConstructorUsed.kt")
                public void testInAliasWithOwnReplaceForConstructorUsed() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/inAliasWithOwnReplaceForConstructorUsed.kt");
                }

                @TestMetadata("inAliasWithOwnReplaceForSecondaryConstructorUnused.kt")
                public void testInAliasWithOwnReplaceForSecondaryConstructorUnused() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/inAliasWithOwnReplaceForSecondaryConstructorUnused.kt");
                }

                @TestMetadata("inAliasWithOwnReplaceForSecondaryConstructorUsed.kt")
                public void testInAliasWithOwnReplaceForSecondaryConstructorUsed() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/inAliasWithOwnReplaceForSecondaryConstructorUsed.kt");
                }

                @TestMetadata("inTypeArgument.kt")
                public void testInTypeArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/inTypeArgument.kt");
                }

                @TestMetadata("innerType.kt")
                public void testInnerType() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/innerType.kt");
                }

                @TestMetadata("lambdaReplacement.kt")
                public void testLambdaReplacement() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/lambdaReplacement.kt");
                }

                @TestMetadata("nestedClassToNestedClass.kt")
                public void testNestedClassToNestedClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/nestedClassToNestedClass.kt");
                }

                @TestMetadata("noAnnotationConstructorUsage.kt")
                public void testNoAnnotationConstructorUsage() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/noAnnotationConstructorUsage.kt");
                }

                @TestMetadata("noMatchTypeArgument.kt")
                public void testNoMatchTypeArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/noMatchTypeArgument.kt");
                }

                @TestMetadata("noMatchTypeArgument2.kt")
                public void testNoMatchTypeArgument2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/noMatchTypeArgument2.kt");
                }

                @TestMetadata("qualifiedClassName.kt")
                public void testQualifiedClassName() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/qualifiedClassName.kt");
                }

                @TestMetadata("qualifiedClassNameInPattern.kt")
                public void testQualifiedClassNameInPattern() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/qualifiedClassNameInPattern.kt");
                }

                @TestMetadata("secondaryConstructor.kt")
                public void testSecondaryConstructor() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/secondaryConstructor.kt");
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/simple.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/wholeProject")
            public static class WholeProject extends AbstractHighLevelQuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inheritance.kt")
                public void testInheritance() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classUsages/wholeProject/inheritance.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments")
        public abstract static class FunctionLiteralArguments extends AbstractHighLevelQuickFixTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments")
            public static class Uncategorized extends AbstractHighLevelQuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("cannotKeepOutside.kt")
                public void testCannotKeepOutside() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/cannotKeepOutside.kt");
                }

                @TestMetadata("keepInside.kt")
                public void testKeepInside() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/keepInside.kt");
                }

                @TestMetadata("keepOutside.kt")
                public void testKeepOutside() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/keepOutside.kt");
                }

                @TestMetadata("keepOutsideWithGeneric.kt")
                public void testKeepOutsideWithGeneric() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/keepOutsideWithGeneric.kt");
                }

                @TestMetadata("keepOutsideWithNamedArgument.kt")
                public void testKeepOutsideWithNamedArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/keepOutsideWithNamedArgument.kt");
                }

                @TestMetadata("suspendBlock.kt")
                public void testSuspendBlock() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/suspendBlock.kt");
                }

                @TestMetadata("suspendBlockImplicitInvoke.kt")
                public void testSuspendBlockImplicitInvoke() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/suspendBlockImplicitInvoke.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/wholeProject")
            public static class WholeProject extends AbstractHighLevelQuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("explicitLambdaParameter.kt")
                public void testExplicitLambdaParameter() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/wholeProject/explicitLambdaParameter.kt");
                }

                @TestMetadata("explicitLambdaParameterWithoutType.kt")
                public void testExplicitLambdaParameterWithoutType() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/wholeProject/explicitLambdaParameterWithoutType.kt");
                }

                @TestMetadata("implicitLambdaParameter.kt")
                public void testImplicitLambdaParameter() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/wholeProject/implicitLambdaParameter.kt");
                }

                @TestMetadata("implicitLambdaParameterWithPlatformType.kt")
                public void testImplicitLambdaParameterWithPlatformType() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/functionLiteralArguments/wholeProject/implicitLambdaParameterWithPlatformType.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments")
        public static class KeepComments extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addArguments.kt")
            public void testAddArguments() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/addArguments.kt");
            }

            @TestMetadata("commentBeforeArgument.kt")
            public void testCommentBeforeArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/commentBeforeArgument.kt");
            }

            @TestMetadata("dropArgument.kt")
            public void testDropArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/dropArgument.kt");
            }

            @TestMetadata("multipleArguments.kt")
            public void testMultipleArguments() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/multipleArguments.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/simple.kt");
            }

            @TestMetadata("usedTwice.kt")
            public void testUsedTwice() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/usedTwice.kt");
            }

            @TestMetadata("variableForArgument.kt")
            public void testVariableForArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepComments/variableForArgument.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepLineBreaks")
        public static class KeepLineBreaks extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addArgument.kt")
            public void testAddArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepLineBreaks/addArgument.kt");
            }

            @TestMetadata("lineBreakAfterReceiverRuntime.kt")
            public void testLineBreakAfterReceiverRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepLineBreaks/lineBreakAfterReceiverRuntime.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepLineBreaks/simple.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls")
        public static class OperatorCalls extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("get.kt")
            public void testGet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/get.kt");
            }

            @TestMetadata("implicitInvoke.kt")
            public void testImplicitInvoke() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/implicitInvoke.kt");
            }

            @TestMetadata("in.kt")
            public void testIn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/in.kt");
            }

            @TestMetadata("invoke.kt")
            public void testInvoke() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/invoke.kt");
            }

            @TestMetadata("invoke2.kt")
            public void testInvoke2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/invoke2.kt");
            }

            @TestMetadata("invoke3.kt")
            public void testInvoke3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/invoke3.kt");
            }

            @TestMetadata("invoke4.kt")
            public void testInvoke4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/invoke4.kt");
            }

            @TestMetadata("plusAssign.kt")
            public void testPlusAssign() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/plusAssign.kt");
            }

            @TestMetadata("set.kt")
            public void testSet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/set.kt");
            }

            @TestMetadata("unaryPlus.kt")
            public void testUnaryPlus() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCalls/unaryPlus.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters")
        public static class OptionalParameters extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("dropAll.kt")
            public void testDropAll() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/dropAll.kt");
            }

            @TestMetadata("functionalLiteralArgument.kt")
            public void testFunctionalLiteralArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/functionalLiteralArgument.kt");
            }

            @TestMetadata("namedArgument.kt")
            public void testNamedArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/namedArgument.kt");
            }

            @TestMetadata("optionalParameterAndLambda.kt")
            public void testOptionalParameterAndLambda() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameterAndLambda.kt");
            }

            @TestMetadata("optionalParameterAndLambdaComplex.kt")
            public void testOptionalParameterAndLambdaComplex() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameterAndLambdaComplex.kt");
            }

            @TestMetadata("optionalParameters1.kt")
            public void testOptionalParameters1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters1.kt");
            }

            @TestMetadata("optionalParameters2.kt")
            public void testOptionalParameters2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters2.kt");
            }

            @TestMetadata("optionalParameters3.kt")
            public void testOptionalParameters3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters3.kt");
            }

            @TestMetadata("optionalParameters4.kt")
            public void testOptionalParameters4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters4.kt");
            }

            @TestMetadata("optionalParameters5.kt")
            public void testOptionalParameters5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters5.kt");
            }

            @TestMetadata("optionalParameters7.kt")
            public void testOptionalParameters7() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters7.kt");
            }

            @TestMetadata("optionalParameters9.kt")
            public void testOptionalParameters9() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/optionalParameters9.kt");
            }

            @TestMetadata("overridingMethod.kt")
            public void testOverridingMethod() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/optionalParameters/overridingMethod.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties")
        public static class Properties extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("callInAssignmentToProperty.kt")
            public void testCallInAssignmentToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/callInAssignmentToProperty.kt");
            }

            @TestMetadata("callToCustomProperty.kt")
            public void testCallToCustomProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/callToCustomProperty.kt");
            }

            @TestMetadata("callToProperty.kt")
            public void testCallToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/callToProperty.kt");
            }

            @TestMetadata("extensionPropertyToProperty.kt")
            public void testExtensionPropertyToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/extensionPropertyToProperty.kt");
            }

            @TestMetadata("extensionPropertyWriteToProperty.kt")
            public void testExtensionPropertyWriteToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/properties/extensionPropertyWriteToProperty.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi")
        public static class PublishedApi extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("existingStub.kt")
            public void testExistingStub() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/existingStub.kt");
            }

            @TestMetadata("existingStubForVar.kt")
            public void testExistingStubForVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/existingStubForVar.kt");
            }

            @TestMetadata("extension.kt")
            public void testExtension() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/extension.kt");
            }

            @TestMetadata("extensionVar.kt")
            public void testExtensionVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/extensionVar.kt");
            }

            @TestMetadata("generic.kt")
            public void testGeneric() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/generic.kt");
            }

            @TestMetadata("genericDerived.kt")
            public void testGenericDerived() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/genericDerived.kt");
            }

            @TestMetadata("genericFunction.kt")
            public void testGenericFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/genericFunction.kt");
            }

            @TestMetadata("infix.kt")
            public void testInfix() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/infix.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/simple.kt");
            }

            @TestMetadata("simpleVal.kt")
            public void testSimpleVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/simpleVal.kt");
            }

            @TestMetadata("simpleVar.kt")
            public void testSimpleVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/publishedApi/simpleVar.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall")
        public static class SafeCall extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("changeThisSafeCall.kt")
            public void testChangeThisSafeCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCall.kt");
            }

            @TestMetadata("changeThisSafeCallWithValue1Runtime.kt")
            public void testChangeThisSafeCallWithValue1Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValue1Runtime.kt");
            }

            @TestMetadata("changeThisSafeCallWithValue2Runtime.kt")
            public void testChangeThisSafeCallWithValue2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValue2Runtime.kt");
            }

            @TestMetadata("changeThisSafeCallWithValue3Runtime.kt")
            public void testChangeThisSafeCallWithValue3Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValue3Runtime.kt");
            }

            @TestMetadata("changeThisSafeCallWithValue4Runtime.kt")
            public void testChangeThisSafeCallWithValue4Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValue4Runtime.kt");
            }

            @TestMetadata("changeThisSafeCallWithValueRuntime.kt")
            public void testChangeThisSafeCallWithValueRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/changeThisSafeCallWithValueRuntime.kt");
            }

            @TestMetadata("dropReceiverSafeCall.kt")
            public void testDropReceiverSafeCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/dropReceiverSafeCall.kt");
            }

            @TestMetadata("safeCall.kt")
            public void testSafeCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/safeCall/safeCall.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases")
        public static class TypeAliases extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("companionObjectAliased.kt")
            public void testCompanionObjectAliased() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/companionObjectAliased.kt");
            }

            @TestMetadata("compoundWithDeprecatedArgumentsAndConstructor.kt")
            public void testCompoundWithDeprecatedArgumentsAndConstructor() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/compoundWithDeprecatedArgumentsAndConstructor.kt");
            }

            @TestMetadata("conflictOnTypeAndAlias.kt")
            public void testConflictOnTypeAndAlias() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/conflictOnTypeAndAlias.kt");
            }

            @TestMetadata("constructorUsage.kt")
            public void testConstructorUsage() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/constructorUsage.kt");
            }

            @TestMetadata("constructorUsageWithConflict.kt")
            public void testConstructorUsageWithConflict() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/constructorUsageWithConflict.kt");
            }

            @TestMetadata("constructorUsageWithConflict1.kt")
            public void testConstructorUsageWithConflict1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/constructorUsageWithConflict1.kt");
            }

            @TestMetadata("objectAliased.kt")
            public void testObjectAliased() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/objectAliased.kt");
            }

            @TestMetadata("objectAliasedWithPropertyReference.kt")
            public void testObjectAliasedWithPropertyReference() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/objectAliasedWithPropertyReference.kt");
            }

            @TestMetadata("onlyAliasDeprecated.kt")
            public void testOnlyAliasDeprecated() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/onlyAliasDeprecated.kt");
            }

            @TestMetadata("stdlibAliased.kt")
            public void testStdlibAliased() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/stdlibAliased.kt");
            }

            @TestMetadata("transitiveFromClass.kt")
            public void testTransitiveFromClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/transitiveFromClass.kt");
            }

            @TestMetadata("transitiveLong.kt")
            public void testTransitiveLong() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/transitiveLong.kt");
            }

            @TestMetadata("typeAliasWithAllGenericParams.kt")
            public void testTypeAliasWithAllGenericParams() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/typeAliasWithAllGenericParams.kt");
            }

            @TestMetadata("withTypeArgument.kt")
            public void testWithTypeArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeAliases/withTypeArgument.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments")
        public abstract static class TypeArguments extends AbstractHighLevelQuickFixTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments")
            public static class Uncategorized extends AbstractHighLevelQuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("classConstructor.kt")
                public void testClassConstructor() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/classConstructor.kt");
                }

                @TestMetadata("classLiteral.kt")
                public void testClassLiteral() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/classLiteral.kt");
                }

                @TestMetadata("classLiteral2.kt")
                public void testClassLiteral2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/classLiteral2.kt");
                }

                @TestMetadata("emptyVarargRuntime.kt")
                public void testEmptyVarargRuntime() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/emptyVarargRuntime.kt");
                }

                @TestMetadata("explicitInPatternImplicitInUsage.kt")
                public void testExplicitInPatternImplicitInUsage() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/explicitInPatternImplicitInUsage.kt");
                }

                @TestMetadata("explicitTypeArg.kt")
                public void testExplicitTypeArg() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/explicitTypeArg.kt");
                }

                @TestMetadata("explicitTypeArg2.kt")
                public void testExplicitTypeArg2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/explicitTypeArg2.kt");
                }

                @TestMetadata("functionReference.kt")
                public void testFunctionReference() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference.kt");
                }

                @TestMetadata("functionReference2.kt")
                public void testFunctionReference2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference2.kt");
                }

                @TestMetadata("functionReference3.kt")
                public void testFunctionReference3() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference3.kt");
                }

                @TestMetadata("functionReference4.kt")
                public void testFunctionReference4() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference4.kt");
                }

                @TestMetadata("functionReference5.kt")
                public void testFunctionReference5() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/functionReference5.kt");
                }

                @TestMetadata("implicitToExplicit.kt")
                public void testImplicitToExplicit() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/implicitToExplicit.kt");
                }

                @TestMetadata("keepInUserCodeRuntime.kt")
                public void testKeepInUserCodeRuntime() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/keepInUserCodeRuntime.kt");
                }

                @TestMetadata("keepOriginalIfQualified.kt")
                public void testKeepOriginalIfQualified() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/keepOriginalIfQualified.kt");
                }

                @TestMetadata("kt36225.kt")
                public void testKt36225() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/kt36225.kt");
                }

                @TestMetadata("ktij-14750.kt")
                public void testKtij_14750() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/ktij-14750.kt");
                }

                @TestMetadata("noImplicitTypeArgImportRuntime.kt")
                public void testNoImplicitTypeArgImportRuntime() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/noImplicitTypeArgImportRuntime.kt");
                }

                @TestMetadata("noImplicitTypeArgInClassWithTypeParam.kt")
                public void testNoImplicitTypeArgInClassWithTypeParam() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/noImplicitTypeArgInClassWithTypeParam.kt");
                }

                @TestMetadata("noImplicitTypeArgInFunWithTypeParam.kt")
                public void testNoImplicitTypeArgInFunWithTypeParam() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/noImplicitTypeArgInFunWithTypeParam.kt");
                }

                @TestMetadata("nonEmptyVarargRuntime.kt")
                public void testNonEmptyVarargRuntime() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/nonEmptyVarargRuntime.kt");
                }

                @TestMetadata("propertyReference.kt")
                public void testPropertyReference() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/propertyReference.kt");
                }

                @TestMetadata("propertyReference2.kt")
                public void testPropertyReference2() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/propertyReference2.kt");
                }

                @TestMetadata("propertyReference3.kt")
                public void testPropertyReference3() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/propertyReference3.kt");
                }

                @TestMetadata("typeReference.kt")
                public void testTypeReference() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/typeReference.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/wholeProject")
            public static class WholeProject extends AbstractHighLevelQuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("classConstructor.kt")
                public void testClassConstructor() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/typeArguments/wholeProject/classConstructor.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addImplicitReceiverNested.kt")
            public void testAddImplicitReceiverNested() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/addImplicitReceiverNested.kt");
            }

            @TestMetadata("annotationWithErrorReplacement.kt")
            public void testAnnotationWithErrorReplacement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/annotationWithErrorReplacement.kt");
            }

            @TestMetadata("avoidCastingContext.kt")
            public void testAvoidCastingContext() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/avoidCastingContext.kt");
            }

            @TestMetadata("callChainBug.kt")
            public void testCallChainBug() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/callChainBug.kt");
            }

            @TestMetadata("callWithError.kt")
            public void testCallWithError() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/callWithError.kt");
            }

            @TestMetadata("changeThis1.kt")
            public void testChangeThis1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/changeThis1.kt");
            }

            @TestMetadata("changeThis2.kt")
            public void testChangeThis2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/changeThis2.kt");
            }

            @TestMetadata("changeThisToOuterThis.kt")
            public void testChangeThisToOuterThis() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/changeThisToOuterThis.kt");
            }

            @TestMetadata("classLiteralAndTypeArgsRuntime.kt")
            public void testClassLiteralAndTypeArgsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/classLiteralAndTypeArgsRuntime.kt");
            }

            @TestMetadata("deprecatedSinceKotlinAndReplaceWith.kt")
            public void testDeprecatedSinceKotlinAndReplaceWith() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/deprecatedSinceKotlinAndReplaceWith.kt");
            }

            @TestMetadata("deprecationLevel.kt")
            public void testDeprecationLevel() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/deprecationLevel.kt");
            }

            @TestMetadata("doNotShortenUserReferences.kt")
            public void testDoNotShortenUserReferences() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/doNotShortenUserReferences.kt");
            }

            @TestMetadata("doNotShortenUsersExplicitThis.kt")
            public void testDoNotShortenUsersExplicitThis() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/doNotShortenUsersExplicitThis.kt");
            }

            @TestMetadata("dropReceiver.kt")
            public void testDropReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/dropReceiver.kt");
            }

            @TestMetadata("enum.kt")
            public void testEnum() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/enum.kt");
            }

            @TestMetadata("extensionForGenericClass.kt")
            public void testExtensionForGenericClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/extensionForGenericClass.kt");
            }

            @TestMetadata("extensionFunCallInLambdaWithReceiver.kt")
            public void testExtensionFunCallInLambdaWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/extensionFunCallInLambdaWithReceiver.kt");
            }

            @TestMetadata("extensionReceiverWithVarianceType.kt")
            public void testExtensionReceiverWithVarianceType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/extensionReceiverWithVarianceType.kt");
            }

            @TestMetadata("implicitCompanionObjectThis.kt")
            public void testImplicitCompanionObjectThis() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/implicitCompanionObjectThis.kt");
            }

            @TestMetadata("implicitQualifiedThisRuntime.kt")
            public void testImplicitQualifiedThisRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/implicitQualifiedThisRuntime.kt");
            }

            @TestMetadata("importedObjectFunction.kt")
            public void testImportedObjectFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/importedObjectFunction.kt");
            }

            @TestMetadata("importedObjectFunctionAddReceiver.kt")
            public void testImportedObjectFunctionAddReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/importedObjectFunctionAddReceiver.kt");
            }

            @TestMetadata("importedObjectProperty.kt")
            public void testImportedObjectProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/importedObjectProperty.kt");
            }

            @TestMetadata("incorrectArgs.kt")
            public void testIncorrectArgs() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/incorrectArgs.kt");
            }

            @TestMetadata("incorrectReplacement.kt")
            public void testIncorrectReplacement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/incorrectReplacement.kt");
            }

            @TestMetadata("infixCall.kt")
            public void testInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/infixCall.kt");
            }

            @TestMetadata("infixCallToNonInfixCall.kt")
            public void testInfixCallToNonInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/infixCallToNonInfixCall.kt");
            }

            @TestMetadata("keepArgumentNamed.kt")
            public void testKeepArgumentNamed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepArgumentNamed.kt");
            }

            @TestMetadata("keepInfixCall.kt")
            public void testKeepInfixCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/keepInfixCall.kt");
            }

            @TestMetadata("kt35015.kt")
            public void testKt35015() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/kt35015.kt");
            }

            @TestMetadata("localFun.kt")
            public void testLocalFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/localFun.kt");
            }

            @TestMetadata("mailformedExpression.kt")
            public void testMailformedExpression() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/mailformedExpression.kt");
            }

            @TestMetadata("memberFunction.kt")
            public void testMemberFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/memberFunction.kt");
            }

            @TestMetadata("memberFunctionImplicitReceiver.kt")
            public void testMemberFunctionImplicitReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/memberFunctionImplicitReceiver.kt");
            }

            @TestMetadata("memberFunctionInGenericClass.kt")
            public void testMemberFunctionInGenericClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/memberFunctionInGenericClass.kt");
            }

            @TestMetadata("methodToProperty.kt")
            public void testMethodToProperty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/methodToProperty.kt");
            }

            @TestMetadata("noReplacement.kt")
            public void testNoReplacement() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/noReplacement.kt");
            }

            @TestMetadata("objects.kt")
            public void testObjects() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/objects.kt");
            }

            @TestMetadata("objectsInQualified.kt")
            public void testObjectsInQualified() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/objectsInQualified.kt");
            }

            @TestMetadata("operatorCall.kt")
            public void testOperatorCall() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCall.kt");
            }

            @TestMetadata("operatorCall2.kt")
            public void testOperatorCall2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/operatorCall2.kt");
            }

            @TestMetadata("parameters.kt")
            public void testParameters() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/parameters.kt");
            }

            @TestMetadata("propertyAssignment.kt")
            public void testPropertyAssignment() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyAssignment.kt");
            }

            @TestMetadata("propertyAssignmentDefaultSetter.kt")
            public void testPropertyAssignmentDefaultSetter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyAssignmentDefaultSetter.kt");
            }

            @TestMetadata("propertyAssignmentNoReceiver.kt")
            public void testPropertyAssignmentNoReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyAssignmentNoReceiver.kt");
            }

            @TestMetadata("propertyAssignmentNoSetter.kt")
            public void testPropertyAssignmentNoSetter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyAssignmentNoSetter.kt");
            }

            @TestMetadata("propertyModification.kt")
            public void testPropertyModification() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyModification.kt");
            }

            @TestMetadata("propertyToMethod.kt")
            public void testPropertyToMethod() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyToMethod.kt");
            }

            @TestMetadata("propertyToSyntheticExtension.kt")
            public void testPropertyToSyntheticExtension() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/propertyToSyntheticExtension.kt");
            }

            @TestMetadata("qualifiedReference.kt")
            public void testQualifiedReference() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/qualifiedReference.kt");
            }

            @TestMetadata("replaceCallWithArgument.kt")
            public void testReplaceCallWithArgument() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/replaceCallWithArgument.kt");
            }

            @TestMetadata("replaceCallWithReceiver.kt")
            public void testReplaceCallWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/replaceCallWithReceiver.kt");
            }

            @TestMetadata("shortenReferences.kt")
            public void testShortenReferences() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/shortenReferences.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/simple.kt");
            }

            @TestMetadata("stringTemplate.kt")
            public void testStringTemplate() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/stringTemplate.kt");
            }

            @TestMetadata("suspendLambda.kt")
            public void testSuspendLambda() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/suspendLambda.kt");
            }

            @TestMetadata("toOuterClassMethod.kt")
            public void testToOuterClassMethod() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/toOuterClassMethod.kt");
            }

            @TestMetadata("twoValuesCombined.kt")
            public void testTwoValuesCombined() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/twoValuesCombined.kt");
            }

            @TestMetadata("usageInDerivedClass.kt")
            public void testUsageInDerivedClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/usageInDerivedClass.kt");
            }

            @TestMetadata("usageInDerivedClassGeneric.kt")
            public void testUsageInDerivedClassGeneric() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/usageInDerivedClassGeneric.kt");
            }

            @TestMetadata("withInnerFunction.kt")
            public void testWithInnerFunction() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/withInnerFunction.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg")
        public static class Vararg extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("addedNamedArgumentAfterRuntime.kt")
            public void testAddedNamedArgumentAfterRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/addedNamedArgumentAfterRuntime.kt");
            }

            @TestMetadata("addedPositionalArgumentAfterRuntime.kt")
            public void testAddedPositionalArgumentAfterRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/addedPositionalArgumentAfterRuntime.kt");
            }

            @TestMetadata("addedSpreadArgumentAfterRuntime.kt")
            public void testAddedSpreadArgumentAfterRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/addedSpreadArgumentAfterRuntime.kt");
            }

            @TestMetadata("booleanArrayRuntime.kt")
            public void testBooleanArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/booleanArrayRuntime.kt");
            }

            @TestMetadata("byteArrayRuntime.kt")
            public void testByteArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/byteArrayRuntime.kt");
            }

            @TestMetadata("doNotShortenUserReferences2Runtime.kt")
            public void testDoNotShortenUserReferences2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/doNotShortenUserReferences2Runtime.kt");
            }

            @TestMetadata("doNotShortenUserReferencesRuntime.kt")
            public void testDoNotShortenUserReferencesRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/doNotShortenUserReferencesRuntime.kt");
            }

            @TestMetadata("doNotSimplifyOriginalCallRuntime.kt")
            public void testDoNotSimplifyOriginalCallRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/doNotSimplifyOriginalCallRuntime.kt");
            }

            @TestMetadata("doubleArrayRuntime.kt")
            public void testDoubleArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/doubleArrayRuntime.kt");
            }

            @TestMetadata("floatArrayRuntime.kt")
            public void testFloatArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/floatArrayRuntime.kt");
            }

            @TestMetadata("longArrayRuntime.kt")
            public void testLongArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/longArrayRuntime.kt");
            }

            @TestMetadata("multipleSpreadArguments2Runtime.kt")
            public void testMultipleSpreadArguments2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/multipleSpreadArguments2Runtime.kt");
            }

            @TestMetadata("multipleSpreadArgumentsRuntime.kt")
            public void testMultipleSpreadArgumentsRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/multipleSpreadArgumentsRuntime.kt");
            }

            @TestMetadata("noImportRuntime.kt")
            public void testNoImportRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/noImportRuntime.kt");
            }

            @TestMetadata("shortArrayRuntime.kt")
            public void testShortArrayRuntime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/shortArrayRuntime.kt");
            }

            @TestMetadata("vararg1Runtime.kt")
            public void testVararg1Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg1Runtime.kt");
            }

            @TestMetadata("vararg2Runtime.kt")
            public void testVararg2Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg2Runtime.kt");
            }

            @TestMetadata("vararg3Runtime.kt")
            public void testVararg3Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg3Runtime.kt");
            }

            @TestMetadata("vararg4.kt")
            public void testVararg4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg4.kt");
            }

            @TestMetadata("vararg5.kt")
            public void testVararg5() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg5.kt");
            }

            @TestMetadata("vararg6Runtime.kt")
            public void testVararg6Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg6Runtime.kt");
            }

            @TestMetadata("vararg7.kt")
            public void testVararg7() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg7.kt");
            }

            @TestMetadata("vararg8Runtime.kt")
            public void testVararg8Runtime() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/deprecatedSymbolUsage/vararg/vararg8Runtime.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/equalityNotApplicable")
    public abstract static class EqualityNotApplicable extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion")
        public static class CharLiteralConversion extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("charEqString.kt")
            public void testCharEqString() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqString.kt");
            }

            @TestMetadata("charEqString2.kt")
            public void testCharEqString2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqString2.kt");
            }

            @TestMetadata("charEqString3.kt")
            public void testCharEqString3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqString3.kt");
            }

            @TestMetadata("charEqString4.kt")
            public void testCharEqString4() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqString4.kt");
            }

            @TestMetadata("charEqStringDoubleQuote.kt")
            public void testCharEqStringDoubleQuote() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqStringDoubleQuote.kt");
            }

            @TestMetadata("charEqStringSingleQuote.kt")
            public void testCharEqStringSingleQuote() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/charEqStringSingleQuote.kt");
            }

            @TestMetadata("interpolation.kt")
            public void testInterpolation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/charLiteralConversion/interpolation.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion")
        public static class NumberConversion extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("left.kt")
            public void testLeft() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion/left.kt");
            }

            @TestMetadata("nullableLeft.kt")
            public void testNullableLeft() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion/nullableLeft.kt");
            }

            @TestMetadata("nullableRight.kt")
            public void testNullableRight() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion/nullableRight.kt");
            }

            @TestMetadata("right.kt")
            public void testRight() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/equalityNotApplicable/numberConversion/right.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/final")
    public static class Final extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("mustBeInitializedOrBeFinal.kt")
        public void testMustBeInitializedOrBeFinal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/final/mustBeInitializedOrBeFinal.kt");
        }

        @TestMetadata("mustBeInitializedOrBeFinalOverride.kt")
        public void testMustBeInitializedOrBeFinalOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/final/mustBeInitializedOrBeFinalOverride.kt");
        }

        @TestMetadata("mustBeInitializedOrBeFinalWarning.kt")
        public void testMustBeInitializedOrBeFinalWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/final/mustBeInitializedOrBeFinalWarning.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstract.kt")
        public void testMustBeInitializedOrFinalOrAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/final/mustBeInitializedOrFinalOrAbstract.kt");
        }

        @TestMetadata("mustBeInitializedOrFinalOrAbstractWarning.kt")
        public void testMustBeInitializedOrFinalOrAbstractWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/final/mustBeInitializedOrFinalOrAbstractWarning.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/foldTryCatch")
    public static class FoldTryCatch extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("conditional.kt")
        public void testConditional() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/foldTryCatch/conditional.kt");
        }

        @TestMetadata("emptyFinally.kt")
        public void testEmptyFinally() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/foldTryCatch/emptyFinally.kt");
        }

        @TestMetadata("multipleExceptions.kt")
        public void testMultipleExceptions() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/foldTryCatch/multipleExceptions.kt");
        }

        @TestMetadata("shadow.kt")
        public void testShadow() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/foldTryCatch/shadow.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/foldTryCatch/simple.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/implement")
    public static class Implement extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstract.kt")
        public void testAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/abstract.kt");
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/annotation.kt");
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/dataClass.kt");
        }

        @TestMetadata("dataClass2.kt")
        public void testDataClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/dataClass2.kt");
        }

        @TestMetadata("dataClass3.kt")
        public void testDataClass3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/dataClass3.kt");
        }

        @TestMetadata("doNotAddExpectForVal.kt")
        public void testDoNotAddExpectForVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/doNotAddExpectForVal.kt");
        }

        @TestMetadata("doNotAddHeader.kt")
        public void testDoNotAddHeader() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/doNotAddHeader.kt");
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/enum.kt");
        }

        @TestMetadata("fakeOverride.kt")
        public void testFakeOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/fakeOverride.kt");
        }

        @TestMetadata("finalClass.kt")
        public void testFinalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/finalClass.kt");
        }

        @TestMetadata("hasImplementedInPrimaryConstructor.kt")
        public void testHasImplementedInPrimaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/hasImplementedInPrimaryConstructor.kt");
        }

        @TestMetadata("hasImplementedInPrimaryConstructor2.kt")
        public void testHasImplementedInPrimaryConstructor2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/hasImplementedInPrimaryConstructor2.kt");
        }

        @TestMetadata("hasImplementedInPrimaryConstructor3.kt")
        public void testHasImplementedInPrimaryConstructor3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/hasImplementedInPrimaryConstructor3.kt");
        }

        @TestMetadata("inCompanion.kt")
        public void testInCompanion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/inCompanion.kt");
        }

        @TestMetadata("inInternalCompanion.kt")
        public void testInInternalCompanion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/inInternalCompanion.kt");
        }

        @TestMetadata("inPrivateCompanion.kt")
        public void testInPrivateCompanion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/inPrivateCompanion.kt");
        }

        @TestMetadata("inProtectedCompanion.kt")
        public void testInProtectedCompanion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/inProtectedCompanion.kt");
        }

        @TestMetadata("incorrectRange.kt")
        public void testIncorrectRange() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/incorrectRange.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/inner.kt");
        }

        @TestMetadata("interface.kt")
        public void testInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/interface.kt");
        }

        @TestMetadata("local.kt")
        public void testLocal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/local.kt");
        }

        @TestMetadata("manyImplMemberNotImplemented.kt")
        public void testManyImplMemberNotImplemented() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/manyImplMemberNotImplemented.kt");
        }

        @TestMetadata("manyInterfacesMemberNotImplemented.kt")
        public void testManyInterfacesMemberNotImplemented() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/manyInterfacesMemberNotImplemented.kt");
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/nested.kt");
        }

        @TestMetadata("nestedPrivateInterface.kt")
        public void testNestedPrivateInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/nestedPrivateInterface.kt");
        }

        @TestMetadata("noDefaultConstructor.kt")
        public void testNoDefaultConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/noDefaultConstructor.kt");
        }

        @TestMetadata("private.kt")
        public void testPrivate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/private.kt");
        }

        @TestMetadata("privateConstructor.kt")
        public void testPrivateConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/privateConstructor.kt");
        }

        @TestMetadata("privateNested.kt")
        public void testPrivateNested() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/privateNested.kt");
        }

        @TestMetadata("privateNestedWithConflict.kt")
        public void testPrivateNestedWithConflict() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/privateNestedWithConflict.kt");
        }

        @TestMetadata("protected.kt")
        public void testProtected() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/protected.kt");
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/sealed.kt");
        }

        @TestMetadata("sealedAfter15.kt")
        public void testSealedAfter15() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/sealedAfter15.kt");
        }

        @TestMetadata("sealedEmpty.kt")
        public void testSealedEmpty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/sealedEmpty.kt");
        }

        @TestMetadata("sealedEmptyAfter15.kt")
        public void testSealedEmptyAfter15() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/sealedEmptyAfter15.kt");
        }

        @TestMetadata("sealedWithConflict.kt")
        public void testSealedWithConflict() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/sealedWithConflict.kt");
        }

        @TestMetadata("sealedWithConflictAfter15.kt")
        public void testSealedWithConflictAfter15() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/sealedWithConflictAfter15.kt");
        }

        @TestMetadata("typeParameter.kt")
        public void testTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/typeParameter.kt");
        }

        @TestMetadata("typeParameterOut.kt")
        public void testTypeParameterOut() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/typeParameterOut.kt");
        }

        @TestMetadata("typeParameterWhere.kt")
        public void testTypeParameterWhere() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/typeParameterWhere.kt");
        }

        @TestMetadata("typeParametersClass.kt")
        public void testTypeParametersClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/implement/typeParametersClass.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/increaseVisibility")
    public abstract static class IncreaseVisibility extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake")
        public static class InvisibleFake extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("methodToInternal.kt")
            public void testMethodToInternal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/methodToInternal.kt");
            }

            @TestMetadata("methodToNotProtected.kt")
            public void testMethodToNotProtected() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/methodToNotProtected.kt");
            }

            @TestMetadata("methodToProtected.kt")
            public void testMethodToProtected() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/methodToProtected.kt");
            }

            @TestMetadata("methodToProtected2.kt")
            public void testMethodToProtected2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/methodToProtected2.kt");
            }

            @TestMetadata("methodToPublic.kt")
            public void testMethodToPublic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/methodToPublic.kt");
            }

            @TestMetadata("propertyToInternal.kt")
            public void testPropertyToInternal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/propertyToInternal.kt");
            }

            @TestMetadata("propertyToNotProtected.kt")
            public void testPropertyToNotProtected() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/propertyToNotProtected.kt");
            }

            @TestMetadata("propertyToProtected.kt")
            public void testPropertyToProtected() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/propertyToProtected.kt");
            }

            @TestMetadata("propertyToProtected2.kt")
            public void testPropertyToProtected2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/propertyToProtected2.kt");
            }

            @TestMetadata("propertyToPublic.kt")
            public void testPropertyToPublic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invisibleFake/propertyToPublic.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/increaseVisibility")
        public static class Uncategorized extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("exposedParameterType.kt")
            public void testExposedParameterType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedParameterType.kt");
            }

            @TestMetadata("exposedParameterTypePublic.kt")
            public void testExposedParameterTypePublic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedParameterTypePublic.kt");
            }

            @TestMetadata("exposedPropertyType.kt")
            public void testExposedPropertyType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedPropertyType.kt");
            }

            @TestMetadata("exposedReceiverType.kt")
            public void testExposedReceiverType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedReceiverType.kt");
            }

            @TestMetadata("exposedReturnType.kt")
            public void testExposedReturnType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedReturnType.kt");
            }

            @TestMetadata("exposedSuperClass.kt")
            public void testExposedSuperClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedSuperClass.kt");
            }

            @TestMetadata("exposedSuperClassProtectedBase.kt")
            public void testExposedSuperClassProtectedBase() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedSuperClassProtectedBase.kt");
            }

            @TestMetadata("exposedSuperClassProtectedInAnother.kt")
            public void testExposedSuperClassProtectedInAnother() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedSuperClassProtectedInAnother.kt");
            }

            @TestMetadata("exposedSuperClassProtectedInAnotherFromPrivate.kt")
            public void testExposedSuperClassProtectedInAnotherFromPrivate() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedSuperClassProtectedInAnotherFromPrivate.kt");
            }

            @TestMetadata("exposedSuperInterface.kt")
            public void testExposedSuperInterface() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedSuperInterface.kt");
            }

            @TestMetadata("exposedTypeParameterBound.kt")
            public void testExposedTypeParameterBound() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedTypeParameterBound.kt");
            }

            @TestMetadata("exposedTypeParameterBoundNested.kt")
            public void testExposedTypeParameterBoundNested() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/exposedTypeParameterBoundNested.kt");
            }

            @TestMetadata("invalidSealedClassInheritance.kt")
            public void testInvalidSealedClassInheritance() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/invalidSealedClassInheritance.kt");
            }

            @TestMetadata("overriddenProtectedMemberToPublicSingleFile.kt")
            public void testOverriddenProtectedMemberToPublicSingleFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/overriddenProtectedMemberToPublicSingleFile.kt");
            }

            @TestMetadata("overriddenProtectedMemberToPublicSingleFile1.kt")
            public void testOverriddenProtectedMemberToPublicSingleFile1() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/overriddenProtectedMemberToPublicSingleFile1.kt");
            }

            @TestMetadata("privateEmptyPrimaryConstructorToPublic.kt")
            public void testPrivateEmptyPrimaryConstructorToPublic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/privateEmptyPrimaryConstructorToPublic.kt");
            }

            @TestMetadata("privateInFileExposesPrivateInFile.kt")
            public void testPrivateInFileExposesPrivateInFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/privateInFileExposesPrivateInFile.kt");
            }

            @TestMetadata("privateMemberToInternalSingleFile.kt")
            public void testPrivateMemberToInternalSingleFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/privateMemberToInternalSingleFile.kt");
            }

            @TestMetadata("privateMemberToInternalWithExposed.kt")
            public void testPrivateMemberToInternalWithExposed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/privateMemberToInternalWithExposed.kt");
            }

            @TestMetadata("privateMemberToPublicSingleFile.kt")
            public void testPrivateMemberToPublicSingleFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/privateMemberToPublicSingleFile.kt");
            }

            @TestMetadata("privateSealedClassInheritance.kt")
            public void testPrivateSealedClassInheritance() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/privateSealedClassInheritance.kt");
            }

            @TestMetadata("privateSetterToInternal.kt")
            public void testPrivateSetterToInternal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/privateSetterToInternal.kt");
            }

            @TestMetadata("privateSetterToPublic.kt")
            public void testPrivateSetterToPublic() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/privateSetterToPublic.kt");
            }

            @TestMetadata("protectedMemberToPublicSingleFile.kt")
            public void testProtectedMemberToPublicSingleFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/increaseVisibility/protectedMemberToPublicSingleFile.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter")
    public static class InitializeWithConstructorParameter extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constructorWithThisDelegation.kt")
        public void testConstructorWithThisDelegation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/constructorWithThisDelegation.kt");
        }

        @TestMetadata("genericParameterInScope.kt")
        public void testGenericParameterInScope() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/genericParameterInScope.kt");
        }

        @TestMetadata("localVar.kt")
        public void testLocalVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/localVar.kt");
        }

        @TestMetadata("memberPropertyInClassNameClashInPrimaryConstructor.kt")
        public void testMemberPropertyInClassNameClashInPrimaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyInClassNameClashInPrimaryConstructor.kt");
        }

        @TestMetadata("memberPropertyInClassNameClashInPrimaryConstructor2.kt")
        public void testMemberPropertyInClassNameClashInPrimaryConstructor2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyInClassNameClashInPrimaryConstructor2.kt");
        }

        @TestMetadata("memberPropertyInClassNameClashInSecondaryConstructor.kt")
        public void testMemberPropertyInClassNameClashInSecondaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyInClassNameClashInSecondaryConstructor.kt");
        }

        @TestMetadata("memberPropertyInClassNoConstructors.kt")
        public void testMemberPropertyInClassNoConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyInClassNoConstructors.kt");
        }

        @TestMetadata("memberPropertyInClassPrimaryAndSecondaryConstructors.kt")
        public void testMemberPropertyInClassPrimaryAndSecondaryConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyInClassPrimaryAndSecondaryConstructors.kt");
        }

        @TestMetadata("memberPropertyInClassPrimaryConstructorOnly.kt")
        public void testMemberPropertyInClassPrimaryConstructorOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyInClassPrimaryConstructorOnly.kt");
        }

        @TestMetadata("memberPropertyInClassSecondaryConstructorsOnly.kt")
        public void testMemberPropertyInClassSecondaryConstructorsOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyInClassSecondaryConstructorsOnly.kt");
        }

        @TestMetadata("memberPropertyInInterface.kt")
        public void testMemberPropertyInInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyInInterface.kt");
        }

        @TestMetadata("memberPropertyInObject.kt")
        public void testMemberPropertyInObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyInObject.kt");
        }

        @TestMetadata("memberPropertyNoAccessorsInClassNoConstructors.kt")
        public void testMemberPropertyNoAccessorsInClassNoConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyNoAccessorsInClassNoConstructors.kt");
        }

        @TestMetadata("memberPropertyNoAccessorsInClassPrimaryAndSecondaryConstructors.kt")
        public void testMemberPropertyNoAccessorsInClassPrimaryAndSecondaryConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyNoAccessorsInClassPrimaryAndSecondaryConstructors.kt");
        }

        @TestMetadata("memberPropertyNoAccessorsInClassPrimaryConstructorOnly.kt")
        public void testMemberPropertyNoAccessorsInClassPrimaryConstructorOnly() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyNoAccessorsInClassPrimaryConstructorOnly.kt");
        }

        @TestMetadata("memberPropertyWithDelegateRuntime.kt")
        public void testMemberPropertyWithDelegateRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/memberPropertyWithDelegateRuntime.kt");
        }

        @TestMetadata("multipleConstructors.kt")
        public void testMultipleConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/multipleConstructors.kt");
        }

        @TestMetadata("multipleConstructorsClash.kt")
        public void testMultipleConstructorsClash() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/multipleConstructorsClash.kt");
        }

        @TestMetadata("multipleConstructorsClash2.kt")
        public void testMultipleConstructorsClash2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/multipleConstructorsClash2.kt");
        }

        @TestMetadata("namelessProperty.kt")
        public void testNamelessProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/namelessProperty.kt");
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/initializeWithConstructorParameter/topLevelProperty.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/inlineClass")
    public static class InlineClass extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inlineClassDeprecated.kt")
        public void testInlineClassDeprecated() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/inlineClass/inlineClassDeprecated.kt");
        }

        @TestMetadata("inlineClassDeprecated_js.kt")
        public void testInlineClassDeprecated_js() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/inlineClass/inlineClassDeprecated_js.kt");
        }

        @TestMetadata("inlineClassWithGeneric.kt")
        public void testInlineClassWithGeneric() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/inlineClass/inlineClassWithGeneric.kt");
        }

        @TestMetadata("publicInlineClass.kt")
        public void testPublicInlineClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/inlineClass/publicInlineClass.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/inlineTypeParameterFix")
    public static class InlineTypeParameterFix extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/inlineTypeParameterFix/basic.kt");
        }

        @TestMetadata("basicMultipleDef.kt")
        public void testBasicMultipleDef() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/inlineTypeParameterFix/basicMultipleDef.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/inlineTypeParameterFix/function.kt");
        }

        @TestMetadata("typeConstraint.kt")
        public void testTypeConstraint() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/inlineTypeParameterFix/typeConstraint.kt");
        }

        @TestMetadata("typeConstraintMultipleDef.kt")
        public void testTypeConstraintMultipleDef() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/inlineTypeParameterFix/typeConstraintMultipleDef.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/insertDelegationCall")
    public static class InsertDelegationCall extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cyclicCallDefaultParam.kt")
        public void testCyclicCallDefaultParam() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/cyclicCallDefaultParam.kt");
        }

        @TestMetadata("nonApplicableInsertSuper.kt")
        public void testNonApplicableInsertSuper() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/nonApplicableInsertSuper.kt");
        }

        @TestMetadata("nonApplicableInsertThis.kt")
        public void testNonApplicableInsertThis() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/nonApplicableInsertThis.kt");
        }

        @TestMetadata("nonApplicableOnEmpty.kt")
        public void testNonApplicableOnEmpty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/nonApplicableOnEmpty.kt");
        }

        @TestMetadata("nonApplicableWithOneConstructor.kt")
        public void testNonApplicableWithOneConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/nonApplicableWithOneConstructor.kt");
        }

        @TestMetadata("primaryRequiredNoSuper.kt")
        public void testPrimaryRequiredNoSuper() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/primaryRequiredNoSuper.kt");
        }

        @TestMetadata("primaryRequiredParameterless.kt")
        public void testPrimaryRequiredParameterless() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/primaryRequiredParameterless.kt");
        }

        @TestMetadata("primaryRequiredWithBody.kt")
        public void testPrimaryRequiredWithBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/primaryRequiredWithBody.kt");
        }

        @TestMetadata("primaryRequiredWithParameter.kt")
        public void testPrimaryRequiredWithParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/insertDelegationCall/primaryRequiredWithParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/isEnumEntry")
    public static class IsEnumEntry extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/isEnumEntry/is.kt");
        }

        @TestMetadata("isWhenCondition.kt")
        public void testIsWhenCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/isEnumEntry/isWhenCondition.kt");
        }

        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/isEnumEntry/notIs.kt");
        }

        @TestMetadata("notIsWhenCondition.kt")
        public void testNotIsWhenCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/isEnumEntry/notIsWhenCondition.kt");
        }
    }







    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/libraries")
    public static class Libraries extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("junit.kt")
        public void testJunit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/libraries/junit.kt");
        }

        @TestMetadata("testNG.kt")
        public void testTestNG() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/libraries/testNG.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/makeConstructorParameterProperty")
    public static class MakeConstructorParameterProperty extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeConstructorParameterProperty/inner.kt");
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeConstructorParameterProperty/override.kt");
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeConstructorParameterProperty/val.kt");
        }

        @TestMetadata("var.kt")
        public void testVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeConstructorParameterProperty/var.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeConstructorParameterProperty/vararg.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/makeTypeParameterReified")
    public static class MakeTypeParameterReified extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("noTypeParameter.kt")
        public void testNoTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeTypeParameterReified/noTypeParameter.kt");
        }

        @TestMetadata("noTypeParameter2.kt")
        public void testNoTypeParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeTypeParameterReified/noTypeParameter2.kt");
        }

        @TestMetadata("typeParameter.kt")
        public void testTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/makeTypeParameterReified/typeParameter.kt");
        }
    }





    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/migration/commasInWhenWithoutArgument")
    public static class CommasInWhenWithoutArgument extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("commasInConditionWithNoArguments.kt")
        public void testCommasInConditionWithNoArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/migration/commasInWhenWithoutArgument/commasInConditionWithNoArguments.kt");
        }

        @TestMetadata("commasInConditionWithNoArguments2.kt")
        public void testCommasInConditionWithNoArguments2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/migration/commasInWhenWithoutArgument/commasInConditionWithNoArguments2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/migration/missingConstructorKeyword")
    public static class MissingConstructorKeyword extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/migration/missingConstructorKeyword/basic.kt");
        }

        @TestMetadata("noParentheses.kt")
        public void testNoParentheses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/migration/missingConstructorKeyword/noParentheses.kt");
        }

        @TestMetadata("noParenthesesWithAnnotation.kt")
        public void testNoParenthesesWithAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/migration/missingConstructorKeyword/noParenthesesWithAnnotation.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/migration/removeNameFromFunctionExpression")
    public static class RemoveNameFromFunctionExpression extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/migration/removeNameFromFunctionExpression/basic.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/migration/typeParameterList")
    public static class TypeParameterList extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/migration/typeParameterList/basic.kt");
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/migration/typeParameterList/extension.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/missingConstructorBrackets")
    public static class MissingConstructorBrackets extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/missingConstructorBrackets/basic.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/moveReceiverAnnotation")
    public static class MoveReceiverAnnotation extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("fun.kt")
        public void testFun() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveReceiverAnnotation/fun.kt");
        }

        @TestMetadata("notExtensionFun.kt")
        public void testNotExtensionFun() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveReceiverAnnotation/notExtensionFun.kt");
        }

        @TestMetadata("notExtensionVal.kt")
        public void testNotExtensionVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveReceiverAnnotation/notExtensionVal.kt");
        }

        @TestMetadata("val.kt")
        public void testVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveReceiverAnnotation/val.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/moveToConstructorParameters")
    public static class MoveToConstructorParameters extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("localVar.kt")
        public void testLocalVar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/localVar.kt");
        }

        @TestMetadata("memberExtensionProperty.kt")
        public void testMemberExtensionProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/memberExtensionProperty.kt");
        }

        @TestMetadata("memberPropertyInClassNameClash.kt")
        public void testMemberPropertyInClassNameClash() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/memberPropertyInClassNameClash.kt");
        }

        @TestMetadata("memberPropertyInClassNoPrimaryConstructor.kt")
        public void testMemberPropertyInClassNoPrimaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/memberPropertyInClassNoPrimaryConstructor.kt");
        }

        @TestMetadata("memberPropertyInClassWithConstructorDelegatingToSuper.kt")
        public void testMemberPropertyInClassWithConstructorDelegatingToSuper() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/memberPropertyInClassWithConstructorDelegatingToSuper.kt");
        }

        @TestMetadata("memberPropertyInClassWithImplicitlyDelegatingConstructor.kt")
        public void testMemberPropertyInClassWithImplicitlyDelegatingConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/memberPropertyInClassWithImplicitlyDelegatingConstructor.kt");
        }

        @TestMetadata("memberPropertyInClassWithPrimaryConstructor.kt")
        public void testMemberPropertyInClassWithPrimaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/memberPropertyInClassWithPrimaryConstructor.kt");
        }

        @TestMetadata("memberPropertyInInterface.kt")
        public void testMemberPropertyInInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/memberPropertyInInterface.kt");
        }

        @TestMetadata("memberPropertyInObject.kt")
        public void testMemberPropertyInObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/memberPropertyInObject.kt");
        }

        @TestMetadata("memberPropertyWithDelegateRuntime.kt")
        public void testMemberPropertyWithDelegateRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/memberPropertyWithDelegateRuntime.kt");
        }

        @TestMetadata("propertyWithModifiersAndComments.kt")
        public void testPropertyWithModifiersAndComments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/propertyWithModifiersAndComments.kt");
        }

        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveToConstructorParameters/topLevelProperty.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel")
    public static class MoveTypeAliasToTopLevel extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("importList.kt")
        public void testImportList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/importList.kt");
        }

        @TestMetadata("inClass.kt")
        public void testInClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/inClass.kt");
        }

        @TestMetadata("inClass2.kt")
        public void testInClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/inClass2.kt");
        }

        @TestMetadata("inFunction.kt")
        public void testInFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/inFunction.kt");
        }

        @TestMetadata("inFunction2.kt")
        public void testInFunction2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/inFunction2.kt");
        }

        @TestMetadata("package.kt")
        public void testPackage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/moveTypeAliasToTopLevel/package.kt");
        }
    }









    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/primitiveCastToConversion")
    public static class PrimitiveCastToConversion extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/primitiveCastToConversion/boolean.kt");
        }

        @TestMetadata("charToShort.kt")
        public void testCharToShort() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/primitiveCastToConversion/charToShort.kt");
        }

        @TestMetadata("intToByte.kt")
        public void testIntToByte() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/primitiveCastToConversion/intToByte.kt");
        }

        @TestMetadata("longToFloat.kt")
        public void testLongToFloat() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/primitiveCastToConversion/longToFloat.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/properties")
    public abstract static class Properties extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/properties/extensionPropertyInitializerToGetter")
        public static class ExtensionPropertyInitializerToGetter extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("baseCase.kt")
            public void testBaseCase() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/properties/extensionPropertyInitializerToGetter/baseCase.kt");
            }

            @TestMetadata("baseCaseVar.kt")
            public void testBaseCaseVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/properties/extensionPropertyInitializerToGetter/baseCaseVar.kt");
            }

            @TestMetadata("baseCaseWithoutTypeAnnotation.kt")
            public void testBaseCaseWithoutTypeAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/properties/extensionPropertyInitializerToGetter/baseCaseWithoutTypeAnnotation.kt");
            }

            @TestMetadata("dontShowQuickfixOnExistingAccessors.kt")
            public void testDontShowQuickfixOnExistingAccessors() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/properties/extensionPropertyInitializerToGetter/dontShowQuickfixOnExistingAccessors.kt");
            }

            @TestMetadata("insertGetterBeforeExistingSetter.kt")
            public void testInsertGetterBeforeExistingSetter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/properties/extensionPropertyInitializerToGetter/insertGetterBeforeExistingSetter.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/protectedInFinal")
    public static class ProtectedInFinal extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("finalizeNotReal.kt")
        public void testFinalizeNotReal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/finalizeNotReal.kt");
        }

        @TestMetadata("finalizeNotRealImplicitReturnInt.kt")
        public void testFinalizeNotRealImplicitReturnInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/finalizeNotRealImplicitReturnInt.kt");
        }

        @TestMetadata("protected.kt")
        public void testProtected() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/protected.kt");
        }

        @TestMetadata("protected2.kt")
        public void testProtected2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/protected2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantConst")
    public static class RedundantConst extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantConst/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantFun")
    public static class RedundantFun extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantFun/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantInline")
    public static class RedundantInline extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInline/function.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantLateinit")
    public static class RedundantLateinit extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantLateinit/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantModalityModifier")
    public static class RedundantModalityModifier extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("redundantAbstract.kt")
        public void testRedundantAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantModalityModifier/redundantAbstract.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantModalityModifier/simple.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/runBlockingInSuspendFunction")
    public static class RunBlockingInSuspendFunction extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("noContextNoReturnsMultipleStatements.kt")
        public void testNoContextNoReturnsMultipleStatements() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/runBlockingInSuspendFunction/noContextNoReturnsMultipleStatements.kt");
        }

        @TestMetadata("noContextNoReturnsOneStatement.kt")
        public void testNoContextNoReturnsOneStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/runBlockingInSuspendFunction/noContextNoReturnsOneStatement.kt");
        }

        @TestMetadata("noContextWithReturns.kt")
        public void testNoContextWithReturns() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/runBlockingInSuspendFunction/noContextWithReturns.kt");
        }

        @TestMetadata("variableInitializer.kt")
        public void testVariableInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/runBlockingInSuspendFunction/variableInitializer.kt");
        }

        @TestMetadata("withContextNoReturns.kt")
        public void testWithContextNoReturns() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/runBlockingInSuspendFunction/withContextNoReturns.kt");
        }

        @TestMetadata("withContextWithReturns.kt")
        public void testWithContextWithReturns() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/runBlockingInSuspendFunction/withContextWithReturns.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantVisibilityModifier")
    public static class RedundantVisibilityModifier extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("getter.kt")
        public void testGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantVisibilityModifier/getter.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantVisibilityModifier/simple.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeArgument")
    public static class RemoveArgument extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/constructor.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/function.kt");
        }

        @TestMetadata("lambdaArgument.kt")
        public void testLambdaArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/lambdaArgument.kt");
        }

        @TestMetadata("matchedArguments.kt")
        public void testMatchedArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/matchedArguments.kt");
        }

        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeArgument/typeMismatch.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeAtFromAnnotationArgument")
    public static class RemoveAtFromAnnotationArgument extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("arrayParam.kt")
        public void testArrayParam() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAtFromAnnotationArgument/arrayParam.kt");
        }

        @TestMetadata("brokenCode.kt")
        public void testBrokenCode() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAtFromAnnotationArgument/brokenCode.kt");
        }

        @TestMetadata("namedParam.kt")
        public void testNamedParam() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAtFromAnnotationArgument/namedParam.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAtFromAnnotationArgument/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeDefaultParameterValue")
    public static class RemoveDefaultParameterValue extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("actualFunctionWithDefaultArguments.kt")
        public void testActualFunctionWithDefaultArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeDefaultParameterValue/actualFunctionWithDefaultArguments.kt");
        }

        @TestMetadata("defaultValueNotAllowedInOverride.kt")
        public void testDefaultValueNotAllowedInOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeDefaultParameterValue/defaultValueNotAllowedInOverride.kt");
        }

        @TestMetadata("hasComment.kt")
        public void testHasComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeDefaultParameterValue/hasComment.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeFinalUpperBound")
    public static class RemoveFinalUpperBound extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeFinalUpperBound/basic.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeFinalUpperBound/function.kt");
        }

        @TestMetadata("whereClause.kt")
        public void testWhereClause() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeFinalUpperBound/whereClause.kt");
        }

        @TestMetadata("whereClauseMultipleConstraints.kt")
        public void testWhereClauseMultipleConstraints() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeFinalUpperBound/whereClauseMultipleConstraints.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeNoConstructor")
    public static class RemoveNoConstructor extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeNoConstructor/basic.kt");
        }

        @TestMetadata("functionType.kt")
        public void testFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeNoConstructor/functionType.kt");
        }

        @TestMetadata("functionType2.kt")
        public void testFunctionType2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeNoConstructor/functionType2.kt");
        }

        @TestMetadata("suspend.kt")
        public void testSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeNoConstructor/suspend.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeRedundantAssignment")
    public static class RemoveRedundantAssignment extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constant.kt")
        public void testConstant() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantAssignment/constant.kt");
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantAssignment/functionCall.kt");
        }

        @TestMetadata("notRedundant.kt")
        public void testNotRedundant() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantAssignment/notRedundant.kt");
        }

        @TestMetadata("simpleRef.kt")
        public void testSimpleRef() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantAssignment/simpleRef.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeRedundantInitializer")
    public static class RemoveRedundantInitializer extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("brokenFile.kt")
        public void testBrokenFile() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantInitializer/brokenFile.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantInitializer/simple.kt");
        }
    }







    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate")
    public static class RemoveToStringInStringTemplate extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/call.kt");
        }

        @TestMetadata("name.kt")
        public void testName() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/name.kt");
        }

        @TestMetadata("nameWithPostfix.kt")
        public void testNameWithPostfix() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/nameWithPostfix.kt");
        }

        @TestMetadata("necessaryBrackets1.kt")
        public void testNecessaryBrackets1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/necessaryBrackets1.kt");
        }

        @TestMetadata("necessaryBrackets2.kt")
        public void testNecessaryBrackets2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/necessaryBrackets2.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeTypeVariance")
    public static class RemoveTypeVariance extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeTypeVariance/in.kt");
        }

        @TestMetadata("out.kt")
        public void testOut() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeTypeVariance/out.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeUnused")
    public static class RemoveUnused extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("companionViaImport3.kt")
        public void testCompanionViaImport3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/companionViaImport3.kt");
        }

        @TestMetadata("deledage.kt")
        public void testDeledage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/deledage.kt");
        }

        @TestMetadata("importEnumValues.kt")
        public void testImportEnumValues() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/importEnumValues.kt");
        }

        @TestMetadata("importObjectFun.kt")
        public void testImportObjectFun() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/importObjectFun.kt");
        }

        @TestMetadata("notTriangle.kt")
        public void testNotTriangle() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/notTriangle.kt");
        }

        @TestMetadata("secondaryLocalClassConstructor.kt")
        public void testSecondaryLocalClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/secondaryLocalClassConstructor.kt");
        }

        @TestMetadata("simpleUnusedEnumEntry.kt")
        public void testSimpleUnusedEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/simpleUnusedEnumEntry.kt");
        }

        @TestMetadata("triangle.kt")
        public void testTriangle() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/triangle.kt");
        }

        @TestMetadata("triangle2.kt")
        public void testTriangle2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/triangle2.kt");
        }

        @TestMetadata("typeAlias2.kt")
        public void testTypeAlias2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/typeAlias2.kt");
        }

        @TestMetadata("unusedClass.kt")
        public void testUnusedClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedClass.kt");
        }

        @TestMetadata("unusedConstructor.kt")
        public void testUnusedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedConstructor.kt");
        }

        @TestMetadata("unusedDelegatedConstructor.kt")
        public void testUnusedDelegatedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedDelegatedConstructor.kt");
        }

        @TestMetadata("unusedDelegatedConstructorSuper.kt")
        public void testUnusedDelegatedConstructorSuper() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedDelegatedConstructorSuper.kt");
        }

        @TestMetadata("unusedEnumEntry.kt")
        public void testUnusedEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry.kt");
        }

        @TestMetadata("unusedEnumEntry2.kt")
        public void testUnusedEnumEntry2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry2.kt");
        }

        @TestMetadata("unusedEnumEntry3.kt")
        public void testUnusedEnumEntry3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry3.kt");
        }

        @TestMetadata("unusedEnumEntry4.kt")
        public void testUnusedEnumEntry4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry4.kt");
        }

        @TestMetadata("unusedEnumEntry5.kt")
        public void testUnusedEnumEntry5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedEnumEntry5.kt");
        }

        @TestMetadata("unusedFunction.kt")
        public void testUnusedFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedFunction.kt");
        }

        @TestMetadata("unusedProperty.kt")
        public void testUnusedProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedProperty.kt");
        }

        @TestMetadata("unusedPropertyAsConstructorParameter.kt")
        public void testUnusedPropertyAsConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedPropertyAsConstructorParameter.kt");
        }

        @TestMetadata("unusedPropertyAsConstructorParameter2.kt")
        public void testUnusedPropertyAsConstructorParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedPropertyAsConstructorParameter2.kt");
        }

        @TestMetadata("unusedTypeParameter.kt")
        public void testUnusedTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/unusedTypeParameter.kt");
        }

        @TestMetadata("usedClassAsAlias.kt")
        public void testUsedClassAsAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/usedClassAsAlias.kt");
        }

        @TestMetadata("usedFunAsAlias.kt")
        public void testUsedFunAsAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/usedFunAsAlias.kt");
        }

        @TestMetadata("usedObjectAsAlias.kt")
        public void testUsedObjectAsAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/usedObjectAsAlias.kt");
        }

        @TestMetadata("usedVarAsAlias.kt")
        public void testUsedVarAsAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUnused/usedVarAsAlias.kt");
        }
    }





    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeUseSiteTarget")
    public static class RemoveUseSiteTarget extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("setTargetOnGetter.kt")
        public void testSetTargetOnGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/setTargetOnGetter.kt");
        }

        @TestMetadata("useSiteGetDoesntHaveAnyEffect.kt")
        public void testUseSiteGetDoesntHaveAnyEffect() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/useSiteGetDoesntHaveAnyEffect.kt");
        }

        @TestMetadata("useSiteGetOnClass.kt")
        public void testUseSiteGetOnClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/useSiteGetOnClass.kt");
        }

        @TestMetadata("whitespaces.kt")
        public void testWhitespaces() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/whitespaces.kt");
        }
    }





    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/reorderParameters")
    public static class ReorderParameters extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("callParameterAsFunctionInDefaultValue.kt")
        public void testCallParameterAsFunctionInDefaultValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/callParameterAsFunctionInDefaultValue.kt");
        }

        @TestMetadata("cycle.kt")
        public void testCycle() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/cycle.kt");
        }

        @TestMetadata("graph.kt")
        public void testGraph() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/graph.kt");
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/lambda.kt");
        }

        @TestMetadata("nestedFunction.kt")
        public void testNestedFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/nestedFunction.kt");
        }

        @TestMetadata("nestedFunction2.kt")
        public void testNestedFunction2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/nestedFunction2.kt");
        }

        @TestMetadata("noDefaultValue.kt")
        public void testNoDefaultValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/noDefaultValue.kt");
        }

        @TestMetadata("receiver.kt")
        public void testReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/receiver.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/simple.kt");
        }

        @TestMetadata("withUnchangedParameter.kt")
        public void testWithUnchangedParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/withUnchangedParameter.kt");
        }

        @TestMetadata("withUnchangedParameter2.kt")
        public void testWithUnchangedParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/reorderParameters/withUnchangedParameter2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst")
    public static class ReplaceJvmFieldWithConst extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst/class.kt");
        }

        @TestMetadata("companionInInterface.kt")
        public void testCompanionInInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst/companionInInterface.kt");
        }

        @TestMetadata("getter.kt")
        public void testGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst/getter.kt");
        }

        @TestMetadata("nonConstantInitializer.kt")
        public void testNonConstantInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst/nonConstantInitializer.kt");
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst/nullable.kt");
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst/object.kt");
        }

        @TestMetadata("stringTemplateWithConstants.kt")
        public void testStringTemplateWithConstants() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst/stringTemplateWithConstants.kt");
        }

        @TestMetadata("stringTemplateWithVal.kt")
        public void testStringTemplateWithVal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst/stringTemplateWithVal.kt");
        }

        @TestMetadata("toplevel.kt")
        public void testToplevel() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/replaceJvmFieldWithConst/toplevel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation")
    public abstract static class RestrictedRetentionForExpressionAnnotation extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/addSourceRetention")
        public static class AddSourceRetention extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("binaryRetention.kt")
            public void testBinaryRetention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/addSourceRetention/binaryRetention.kt");
            }

            @TestMetadata("emptyRetention.kt")
            public void testEmptyRetention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/addSourceRetention/emptyRetention.kt");
            }

            @TestMetadata("emptyRetention2.kt")
            public void testEmptyRetention2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/addSourceRetention/emptyRetention2.kt");
            }

            @TestMetadata("noRetention.kt")
            public void testNoRetention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/addSourceRetention/noRetention.kt");
            }

            @TestMetadata("noRetention2.kt")
            public void testNoRetention2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/addSourceRetention/noRetention2.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/changeRetentionToSource")
        public static class ChangeRetentionToSource extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("binaryRetention.kt")
            public void testBinaryRetention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/changeRetentionToSource/binaryRetention.kt");
            }

            @TestMetadata("emptyRetention.kt")
            public void testEmptyRetention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/changeRetentionToSource/emptyRetention.kt");
            }

            @TestMetadata("emptyRetention2.kt")
            public void testEmptyRetention2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/changeRetentionToSource/emptyRetention2.kt");
            }

            @TestMetadata("emptyRetention3.kt")
            public void testEmptyRetention3() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/changeRetentionToSource/emptyRetention3.kt");
            }

            @TestMetadata("noRetention.kt")
            public void testNoRetention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/changeRetentionToSource/noRetention.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/removeExpressionTarget")
        public static class RemoveExpressionTarget extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("binaryRetention.kt")
            public void testBinaryRetention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/removeExpressionTarget/binaryRetention.kt");
            }

            @TestMetadata("emptyRetention.kt")
            public void testEmptyRetention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/removeExpressionTarget/emptyRetention.kt");
            }

            @TestMetadata("emptyRetention2.kt")
            public void testEmptyRetention2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/removeExpressionTarget/emptyRetention2.kt");
            }

            @TestMetadata("multipleTargets.kt")
            public void testMultipleTargets() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/removeExpressionTarget/multipleTargets.kt");
            }

            @TestMetadata("multipleTargetsImported.kt")
            public void testMultipleTargetsImported() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/removeExpressionTarget/multipleTargetsImported.kt");
            }

            @TestMetadata("noRetention.kt")
            public void testNoRetention() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/restrictedRetentionForExpressionAnnotation/removeExpressionTarget/noRetention.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/simplifyComparison")
    public static class SimplifyComparison extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("doubleNull.kt")
        public void testDoubleNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/doubleNull.kt");
        }

        @TestMetadata("notNull.kt")
        public void testNotNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/notNull.kt");
        }

        @TestMetadata("nullOrNotNull.kt")
        public void testNullOrNotNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/nullOrNotNull.kt");
        }

        @TestMetadata("somethingAndNotNull.kt")
        public void testSomethingAndNotNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/somethingAndNotNull.kt");
        }

        @TestMetadata("withAssertion.kt")
        public void testWithAssertion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/withAssertion.kt");
        }

        @TestMetadata("withAssertion2.kt")
        public void testWithAssertion2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/withAssertion2.kt");
        }

        @TestMetadata("withAssertion3.kt")
        public void testWithAssertion3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyComparison/withAssertion3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/simplifyExpression")
    public static class SimplifyExpression extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constantFalse.kt")
        public void testConstantFalse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantFalse.kt");
        }

        @TestMetadata("constantFalseIfElseIf.kt")
        public void testConstantFalseIfElseIf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantFalseIfElseIf.kt");
        }

        @TestMetadata("constantFalseIfElseIfElse.kt")
        public void testConstantFalseIfElseIfElse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantFalseIfElseIfElse.kt");
        }

        @TestMetadata("constantFalseIfElseIfElseIfFirstBranch.kt")
        public void testConstantFalseIfElseIfElseIfFirstBranch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantFalseIfElseIfElseIfFirstBranch.kt");
        }

        @TestMetadata("constantFalseIfElseIfElseIfSecondBranch.kt")
        public void testConstantFalseIfElseIfElseIfSecondBranch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantFalseIfElseIfElseIfSecondBranch.kt");
        }

        @TestMetadata("constantNull.kt")
        public void testConstantNull() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantNull.kt");
        }

        @TestMetadata("constantTrue.kt")
        public void testConstantTrue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantTrue.kt");
        }

        @TestMetadata("constantTrueIfElseIf.kt")
        public void testConstantTrueIfElseIf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantTrueIfElseIf.kt");
        }

        @TestMetadata("constantTrueIfElseIfElseIfFirstCondition.kt")
        public void testConstantTrueIfElseIfElseIfFirstCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantTrueIfElseIfElseIfFirstCondition.kt");
        }

        @TestMetadata("constantTrueIfElseIfElseIfSecondCondition.kt")
        public void testConstantTrueIfElseIfElseIfSecondCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantTrueIfElseIfElseIfSecondCondition.kt");
        }

        @TestMetadata("constantTrueIfElseIfFirstCondition.kt")
        public void testConstantTrueIfElseIfFirstCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantTrueIfElseIfFirstCondition.kt");
        }

        @TestMetadata("constantTrueIfElseIfFirstConditionCommentsMultipleStatements.kt")
        public void testConstantTrueIfElseIfFirstConditionCommentsMultipleStatements() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantTrueIfElseIfFirstConditionCommentsMultipleStatements.kt");
        }

        @TestMetadata("constantTrueIfElseIfFirstConditionCommentsSingleStatement.kt")
        public void testConstantTrueIfElseIfFirstConditionCommentsSingleStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantTrueIfElseIfFirstConditionCommentsSingleStatement.kt");
        }

        @TestMetadata("constantZeroListIsEmpty.kt")
        public void testConstantZeroListIsEmpty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantZeroListIsEmpty.kt");
        }

        @TestMetadata("constantZeroListOf.kt")
        public void testConstantZeroListOf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/constantZeroListOf.kt");
        }

        @TestMetadata("notNullSideEffect.kt")
        public void testNotNullSideEffect() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/simplifyExpression/notNullSideEffect.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen")
    public static class SmartCastImpossibleInIfThen extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("ifThen.kt")
        public void testIfThen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThen.kt");
        }

        @TestMetadata("ifThen2.kt")
        public void testIfThen2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThen2.kt");
        }

        @TestMetadata("ifThen3.kt")
        public void testIfThen3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThen3.kt");
        }

        @TestMetadata("ifThen4.kt")
        public void testIfThen4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThen4.kt");
        }

        @TestMetadata("ifThen5.kt")
        public void testIfThen5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThen5.kt");
        }

        @TestMetadata("ifThenElse.kt")
        public void testIfThenElse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThenElse.kt");
        }

        @TestMetadata("ifThenElse2.kt")
        public void testIfThenElse2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThenElse2.kt");
        }

        @TestMetadata("ifThenElse3.kt")
        public void testIfThenElse3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThenElse3.kt");
        }

        @TestMetadata("ifThenElse4.kt")
        public void testIfThenElse4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThenElse4.kt");
        }

        @TestMetadata("ifThenElse5.kt")
        public void testIfThenElse5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThenElse5.kt");
        }

        @TestMetadata("ifThenElseMultiStatement.kt")
        public void testIfThenElseMultiStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThenElseMultiStatement.kt");
        }

        @TestMetadata("ifThenMultiStatement.kt")
        public void testIfThenMultiStatement() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThenMultiStatement.kt");
        }

        @TestMetadata("ifThenNotNullNegateClause.kt")
        public void testIfThenNotNullNegateClause() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/smartCastImpossibleInIfThen/ifThenNotNullNegateClause.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName")
    public static class SpecifyAllRemainingArgumentsByName extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/class.kt");
        }

        @TestMetadata("conflictingSignatures.kt")
        public void testConflictingSignatures() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/conflictingSignatures.kt");
        }

        @TestMetadata("existingNamedArguments.kt")
        public void testExistingNamedArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/existingNamedArguments.kt");
        }

        @TestMetadata("existingNamedArgumentsWithLambda.kt")
        public void testExistingNamedArgumentsWithLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/existingNamedArgumentsWithLambda.kt");
        }

        @TestMetadata("existingNewline.kt")
        public void testExistingNewline() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/existingNewline.kt");
        }

        @TestMetadata("existingNewlineAndArgument.kt")
        public void testExistingNewlineAndArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/existingNewlineAndArgument.kt");
        }

        @TestMetadata("functionOverloadsWithDefaults.kt")
        public void testFunctionOverloadsWithDefaults() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/functionOverloadsWithDefaults.kt");
        }

        @TestMetadata("incorrectSignature.kt")
        public void testIncorrectSignature() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/incorrectSignature.kt");
        }

        @TestMetadata("javaFunction.kt")
        public void testJavaFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/javaFunction.kt");
        }

        @TestMetadata("multipleArguments.kt")
        public void testMultipleArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/multipleArguments.kt");
        }

        @TestMetadata("multipleOverloads.kt")
        public void testMultipleOverloads() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/multipleOverloads.kt");
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/nested.kt");
        }

        @TestMetadata("nestedFullySpecified.kt")
        public void testNestedFullySpecified() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/nestedFullySpecified.kt");
        }

        @TestMetadata("noArguments.kt")
        public void testNoArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/noArguments.kt");
        }

        @TestMetadata("noArgumentsWithReceiver.kt")
        public void testNoArgumentsWithReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/noArgumentsWithReceiver.kt");
        }

        @TestMetadata("noNameProvided.kt")
        public void testNoNameProvided() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/noNameProvided.kt");
        }

        @TestMetadata("onlyVararg.kt")
        public void testOnlyVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/onlyVararg.kt");
        }

        @TestMetadata("partiallySpecified.kt")
        public void testPartiallySpecified() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/partiallySpecified.kt");
        }

        @TestMetadata("quotedName.kt")
        public void testQuotedName() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/quotedName.kt");
        }

        @TestMetadata("receiverArgument.kt")
        public void testReceiverArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/receiverArgument.kt");
        }

        @TestMetadata("sameLineAsArgument.kt")
        public void testSameLineAsArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/sameLineAsArgument.kt");
        }

        @TestMetadata("simpleFunctionOverload.kt")
        public void testSimpleFunctionOverload() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/simpleFunctionOverload.kt");
        }

        @TestMetadata("singleArgument.kt")
        public void testSingleArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/singleArgument.kt");
        }

        @TestMetadata("trailingComma.kt")
        public void testTrailingComma() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/trailingComma.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyAllRemainingArgumentsByName/vararg.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly")
    public static class SpecifyOverrideExplicitly extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/base.kt");
        }

        @TestMetadata("global.kt")
        public void testGlobal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/global.kt");
        }

        @TestMetadata("lists.kt")
        public void testLists() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/lists.kt");
        }

        @TestMetadata("lists2.kt")
        public void testLists2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/lists2.kt");
        }

        @TestMetadata("notPossible.kt")
        public void testNotPossible() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/notPossible.kt");
        }

        @TestMetadata("objectDeclaration.kt")
        public void testObjectDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/objectDeclaration.kt");
        }

        @TestMetadata("outer.kt")
        public void testOuter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/outer.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyOverrideExplicitly/property.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName")
    public static class SpecifyRemainingRequiredArgumentsByName extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("allArgumentsOptional.kt")
        public void testAllArgumentsOptional() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName/allArgumentsOptional.kt");
        }

        @TestMetadata("allArgumentsRequired.kt")
        public void testAllArgumentsRequired() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName/allArgumentsRequired.kt");
        }

        @TestMetadata("conflictingSignatures.kt")
        public void testConflictingSignatures() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName/conflictingSignatures.kt");
        }

        @TestMetadata("functionOverloadsWithDefaults.kt")
        public void testFunctionOverloadsWithDefaults() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName/functionOverloadsWithDefaults.kt");
        }

        @TestMetadata("multipleOptionalArguments.kt")
        public void testMultipleOptionalArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName/multipleOptionalArguments.kt");
        }

        @TestMetadata("simpleFunctionOverload.kt")
        public void testSimpleFunctionOverload() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName/simpleFunctionOverload.kt");
        }

        @TestMetadata("singleArgument.kt")
        public void testSingleArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName/singleArgument.kt");
        }

        @TestMetadata("singleArgumentAndVararg.kt")
        public void testSingleArgumentAndVararg() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName/singleArgumentAndVararg.kt");
        }

        @TestMetadata("singleRequiredArgument.kt")
        public void testSingleRequiredArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyRemainingRequiredArgumentsByName/singleRequiredArgument.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/specifyTypeExplicitly")
    public static class SpecifyTypeExplicitly extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("approximatedLocalTypeWillBecomeNullable.kt")
        public void testApproximatedLocalTypeWillBecomeNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/specifyTypeExplicitly/approximatedLocalTypeWillBecomeNullable.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/superTypeIsExtensionType")
    public static class SuperTypeIsExtensionType extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("typeWith1Argument.kt")
        public void testTypeWith1Argument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/superTypeIsExtensionType/typeWith1Argument.kt");
        }

        @TestMetadata("typeWithAnnotations.kt")
        public void testTypeWithAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/superTypeIsExtensionType/typeWithAnnotations.kt");
        }

        @TestMetadata("typeWithNoArgument.kt")
        public void testTypeWithNoArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/superTypeIsExtensionType/typeWithNoArgument.kt");
        }

        @TestMetadata("typeWithTypeArgument.kt")
        public void testTypeWithTypeArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/superTypeIsExtensionType/typeWithTypeArgument.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/surroundWithNullCheck")
    public static class SurroundWithNullCheck extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argumentNullable.kt")
        public void testArgumentNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/argumentNullable.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/assignment.kt");
        }

        @TestMetadata("chainedUnsafeCall.kt")
        public void testChainedUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/chainedUnsafeCall.kt");
        }

        @TestMetadata("expressionUnsafeCall.kt")
        public void testExpressionUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/expressionUnsafeCall.kt");
        }

        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/in.kt");
        }

        @TestMetadata("inLambda.kt")
        public void testInLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/inLambda.kt");
        }

        @TestMetadata("inLambda2.kt")
        public void testInLambda2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/inLambda2.kt");
        }

        @TestMetadata("inLambda3.kt")
        public void testInLambda3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/inLambda3.kt");
        }

        @TestMetadata("infixUnsafeCall.kt")
        public void testInfixUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/infixUnsafeCall.kt");
        }

        @TestMetadata("invokeFuncUnsafe.kt")
        public void testInvokeFuncUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/invokeFuncUnsafe.kt");
        }

        @TestMetadata("invokeUnsafe.kt")
        public void testInvokeUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/invokeUnsafe.kt");
        }

        @TestMetadata("iteratorUnsafe.kt")
        public void testIteratorUnsafe() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/iteratorUnsafe.kt");
        }

        @TestMetadata("nullableInCondition.kt")
        public void testNullableInCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/nullableInCondition.kt");
        }

        @TestMetadata("objectNestedQualifiers.kt")
        public void testObjectNestedQualifiers() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/objectNestedQualifiers.kt");
        }

        @TestMetadata("objectQualifier.kt")
        public void testObjectQualifier() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/objectQualifier.kt");
        }

        @TestMetadata("simpleUnsafeCall.kt")
        public void testSimpleUnsafeCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/simpleUnsafeCall.kt");
        }

        @TestMetadata("unsafeCallInBinary.kt")
        public void testUnsafeCallInBinary() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInBinary.kt");
        }

        @TestMetadata("unsafeCallInDeclaration.kt")
        public void testUnsafeCallInDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInDeclaration.kt");
        }

        @TestMetadata("unsafeCallInGetter.kt")
        public void testUnsafeCallInGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInGetter.kt");
        }

        @TestMetadata("unsafeCallInsideAnonymous.kt")
        public void testUnsafeCallInsideAnonymous() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInsideAnonymous.kt");
        }

        @TestMetadata("unsafeCallInsideIf.kt")
        public void testUnsafeCallInsideIf() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInsideIf.kt");
        }

        @TestMetadata("unsafeCallInsideWhen.kt")
        public void testUnsafeCallInsideWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInsideWhen.kt");
        }

        @TestMetadata("unsafeCallInsideWhile.kt")
        public void testUnsafeCallInsideWhile() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unsafeCallInsideWhile.kt");
        }

        @TestMetadata("unstableTopLevelValueWithGetter.kt")
        public void testUnstableTopLevelValueWithGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unstableTopLevelValueWithGetter.kt");
        }

        @TestMetadata("unstableTopLevelVariable.kt")
        public void testUnstableTopLevelVariable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unstableTopLevelVariable.kt");
        }

        @TestMetadata("unstableValue.kt")
        public void testUnstableValue() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/surroundWithNullCheck/unstableValue.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment")
    public abstract static class SuspiciousCollectionReassignment extends AbstractHighLevelQuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable")
        public static class ChangeTypeToMutable extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("hasType.kt")
            public void testHasType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/hasType.kt");
            }

            @TestMetadata("hasType2.kt")
            public void testHasType2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/hasType2.kt");
            }

            @TestMetadata("mutableListOf.kt")
            public void testMutableListOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/mutableListOf.kt");
            }

            @TestMetadata("mutableMapOf.kt")
            public void testMutableMapOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/mutableMapOf.kt");
            }

            @TestMetadata("mutableSetOf.kt")
            public void testMutableSetOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/mutableSetOf.kt");
            }

            @TestMetadata("noInitializer.kt")
            public void testNoInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/noInitializer.kt");
            }

            @TestMetadata("notLocal.kt")
            public void testNotLocal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/notLocal.kt");
            }

            @TestMetadata("toMutableList.kt")
            public void testToMutableList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/toMutableList.kt");
            }

            @TestMetadata("toMutableList2.kt")
            public void testToMutableList2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/toMutableList2.kt");
            }

            @TestMetadata("toMutableMap.kt")
            public void testToMutableMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/toMutableMap.kt");
            }

            @TestMetadata("toMutableSet.kt")
            public void testToMutableSet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/toMutableSet.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer")
        public static class JoinWithInitializer extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("noInitializer.kt")
            public void testNoInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer/noInitializer.kt");
            }

            @TestMetadata("notLocal.kt")
            public void testNotLocal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer/notLocal.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer/simple.kt");
            }

            @TestMetadata("used.kt")
            public void testUsed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer/used.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment")
        public static class ReplaceWithAssignment extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("differentType.kt")
            public void testDifferentType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/differentType.kt");
            }

            @TestMetadata("emptyList.kt")
            public void testEmptyList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptyList.kt");
            }

            @TestMetadata("emptyListOf.kt")
            public void testEmptyListOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptyListOf.kt");
            }

            @TestMetadata("emptyMap.kt")
            public void testEmptyMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptyMap.kt");
            }

            @TestMetadata("emptyMapOf.kt")
            public void testEmptyMapOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptyMapOf.kt");
            }

            @TestMetadata("emptySet.kt")
            public void testEmptySet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptySet.kt");
            }

            @TestMetadata("emptySetOf.kt")
            public void testEmptySetOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptySetOf.kt");
            }

            @TestMetadata("listOf.kt")
            public void testListOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/listOf.kt");
            }

            @TestMetadata("mapOf.kt")
            public void testMapOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/mapOf.kt");
            }

            @TestMetadata("minusEq.kt")
            public void testMinusEq() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/minusEq.kt");
            }

            @TestMetadata("noInitializer.kt")
            public void testNoInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/noInitializer.kt");
            }

            @TestMetadata("notEmpty.kt")
            public void testNotEmpty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/notEmpty.kt");
            }

            @TestMetadata("notLocal.kt")
            public void testNotLocal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/notLocal.kt");
            }

            @TestMetadata("setOf.kt")
            public void testSetOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/setOf.kt");
            }

            @TestMetadata("used.kt")
            public void testUsed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/used.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter")
        public static class ReplaceWithFilter extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("map.kt")
            public void testMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter/map.kt");
            }

            @TestMetadata("minusEq.kt")
            public void testMinusEq() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter/minusEq.kt");
            }

            @TestMetadata("notIterable.kt")
            public void testNotIterable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter/notIterable.kt");
            }

            @TestMetadata("plusEq.kt")
            public void testPlusEq() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter/plusEq.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithOrdinaryAssignment")
        public static class ReplaceWithOrdinaryAssignment extends AbstractHighLevelQuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithOrdinaryAssignment/simple.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString")
    public static class TooLongCharLiteralToString extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("backslash.kt")
        public void testBackslash() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/backslash.kt");
        }

        @TestMetadata("backslashShouldNotBeEscaped.kt")
        public void testBackslashShouldNotBeEscaped() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/backslashShouldNotBeEscaped.kt");
        }

        @TestMetadata("dollarShouldNotBeEscaped.kt")
        public void testDollarShouldNotBeEscaped() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/dollarShouldNotBeEscaped.kt");
        }

        @TestMetadata("doubleQuotesShouldBeEscaped.kt")
        public void testDoubleQuotesShouldBeEscaped() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/doubleQuotesShouldBeEscaped.kt");
        }

        @TestMetadata("ecapedDoubleQuotesShouldNotBeEscaped.kt")
        public void testEcapedDoubleQuotesShouldNotBeEscaped() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/ecapedDoubleQuotesShouldNotBeEscaped.kt");
        }

        @TestMetadata("startWithBackslash.kt")
        public void testStartWithBackslash() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/startWithBackslash.kt");
        }

        @TestMetadata("startWithBackslashInString.kt")
        public void testStartWithBackslashInString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/tooLongCharLiteralToString/startWithBackslashInString.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeImports")
    public static class TypeImports extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("hasThisImport.kt")
        public void testHasThisImport() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/hasThisImport.kt");
        }

        @TestMetadata("noImportFromTheSameFile.kt")
        public void testNoImportFromTheSameFile() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/noImportFromTheSameFile.kt");
        }

        @TestMetadata("noImportJavaLang.kt")
        public void testNoImportJavaLang() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/noImportJavaLang.kt");
        }

        @TestMetadata("noImportJetStandard.kt")
        public void testNoImportJetStandard() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/noImportJetStandard.kt");
        }

        @TestMetadata("toImport1.kt")
        public void testToImport1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeImports/toImport1.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeInferenceExpectedTypeMismatch")
    public static class TypeInferenceExpectedTypeMismatch extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeInferenceExpectedTypeMismatch/argument.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeInferenceExpectedTypeMismatch/assignment.kt");
        }

        @TestMetadata("initializer.kt")
        public void testInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeInferenceExpectedTypeMismatch/initializer.kt");
        }

        @TestMetadata("notKClass.kt")
        public void testNotKClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeInferenceExpectedTypeMismatch/notKClass.kt");
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeInferenceExpectedTypeMismatch/return.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeOfAnnotationMember")
    public static class TypeOfAnnotationMember extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/boolean.kt");
        }

        @TestMetadata("byte.kt")
        public void testByte() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/byte.kt");
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/char.kt");
        }

        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/float.kt");
        }

        @TestMetadata("int.kt")
        public void testInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/int.kt");
        }

        @TestMetadata("long.kt")
        public void testLong() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/long.kt");
        }

        @TestMetadata("short.kt")
        public void testShort() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/short.kt");
        }

        @TestMetadata("star.kt")
        public void testStar() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/star.kt");
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeOfAnnotationMember/string.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeParameters")
    public static class TypeParameters extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("misplacedClassTypeParameter.kt")
        public void testMisplacedClassTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeParameters/misplacedClassTypeParameter.kt");
        }

        @TestMetadata("misplacedFunctionTypeParameter.kt")
        public void testMisplacedFunctionTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeParameters/misplacedFunctionTypeParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeProjection")
    public static class TypeProjection extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("conflictingProjection.kt")
        public void testConflictingProjection() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeProjection/conflictingProjection.kt");
        }

        @TestMetadata("projectionInImmediateArgumentToSupertype.kt")
        public void testProjectionInImmediateArgumentToSupertype() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeProjection/projectionInImmediateArgumentToSupertype.kt");
        }

        @TestMetadata("projectionOnNonClassTypeArgument1.kt")
        public void testProjectionOnNonClassTypeArgument1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeProjection/projectionOnNonClassTypeArgument1.kt");
        }

        @TestMetadata("projectionOnNonClassTypeArgument2.kt")
        public void testProjectionOnNonClassTypeArgument2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeProjection/projectionOnNonClassTypeArgument2.kt");
        }

        @TestMetadata("removeRedundantProjection1.kt")
        public void testRemoveRedundantProjection1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeProjection/removeRedundantProjection1.kt");
        }

        @TestMetadata("removeRedundantProjection2.kt")
        public void testRemoveRedundantProjection2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeProjection/removeRedundantProjection2.kt");
        }

        @TestMetadata("removeVariance.kt")
        public void testRemoveVariance() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeProjection/removeVariance.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/renameUnresolvedReference")
    public static class RenameUnresolvedReference extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("qualifiedFunRef.kt")
        public void testQualifiedFunRef() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/renameUnresolvedReference/qualifiedFunRef.kt");
        }

        @TestMetadata("qualifiedPropertyRef.kt")
        public void testQualifiedPropertyRef() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/renameUnresolvedReference/qualifiedPropertyRef.kt");
        }

        @TestMetadata("typeRef.kt")
        public void testTypeRef() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/renameUnresolvedReference/typeRef.kt");
        }

        @TestMetadata("unqualifiedFunRef.kt")
        public void testUnqualifiedFunRef() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/renameUnresolvedReference/unqualifiedFunRef.kt");
        }

        @TestMetadata("unqualifiedPropertyRef.kt")
        public void testUnqualifiedPropertyRef() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/renameUnresolvedReference/unqualifiedPropertyRef.kt");
        }

        @TestMetadata("unqualifiedPropertyRefWithPackageError.kt")
        public void testUnqualifiedPropertyRefWithPackageError() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/renameUnresolvedReference/unqualifiedPropertyRefWithPackageError.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeRedundantLabel")
    public static class RemoveRedundantLabel extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantLabel/simple.kt");
        }

        @TestMetadata("simple2.kt")
        public void testSimple2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantLabel/simple2.kt");
        }

        @TestMetadata("simple3.kt")
        public void testSimple3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeRedundantLabel/simple3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/unnecessaryLateinit")
    public static class UnnecessaryLateinit extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("lateinitWithConstructor.kt")
        public void testLateinitWithConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/unnecessaryLateinit/lateinitWithConstructor.kt");
        }

        @TestMetadata("lateinitWithInit.kt")
        public void testLateinitWithInit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/unnecessaryLateinit/lateinitWithInit.kt");
        }

        @TestMetadata("lateinitWithMultipleConstructors.kt")
        public void testLateinitWithMultipleConstructors() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/unnecessaryLateinit/lateinitWithMultipleConstructors.kt");
        }

        @TestMetadata("lateinitWithMultipleConstructorsAndDelegation.kt")
        public void testLateinitWithMultipleConstructorsAndDelegation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/unnecessaryLateinit/lateinitWithMultipleConstructorsAndDelegation.kt");
        }

        @TestMetadata("lateinitWithMultipleInit.kt")
        public void testLateinitWithMultipleInit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/unnecessaryLateinit/lateinitWithMultipleInit.kt");
        }

        @TestMetadata("secondaryConstructorDelegateItself.kt")
        public void testSecondaryConstructorDelegateItself() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/unnecessaryLateinit/secondaryConstructorDelegateItself.kt");
        }
    }







    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation")
    public static class ChangeToFunctionInvocation extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("funInvWithoutParentheses.kt")
        public void testFunInvWithoutParentheses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/funInvWithoutParentheses.kt");
        }

        @TestMetadata("genericFunction.kt")
        public void testGenericFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/genericFunction.kt");
        }

        @TestMetadata("inStringTemplate.kt")
        public void testInStringTemplate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate.kt");
        }

        @TestMetadata("inStringTemplate2.kt")
        public void testInStringTemplate2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate2.kt");
        }

        @TestMetadata("inStringTemplate3.kt")
        public void testInStringTemplate3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate3.kt");
        }

        @TestMetadata("inStringTemplate4.kt")
        public void testInStringTemplate4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate4.kt");
        }

        @TestMetadata("inStringTemplate5.kt")
        public void testInStringTemplate5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/variables/changeToFunctionInvocation/inStringTemplate5.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/wrapArgumentWithParentheses")
    public static class WrapArgumentWithParentheses extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("ModifierFormForNonBuiltInSuspend.kt")
        public void testModifierFormForNonBuiltInSuspend() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapArgumentWithParentheses/ModifierFormForNonBuiltInSuspend.kt");
        }

        @TestMetadata("ModifierFormForNonBuiltInSuspendFun.kt")
        public void testModifierFormForNonBuiltInSuspendFun() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapArgumentWithParentheses/ModifierFormForNonBuiltInSuspendFun.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/wrapWhenExpressionInParentheses")
    public static class WrapWhenExpressionInParentheses extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("logicalExpressionInWhen.kt")
        public void testLogicalExpressionInWhen() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrapWhenExpressionInParentheses/logicalExpressionInWhen.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/wrongLongSuffix")
    public static class WrongLongSuffix extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/wrongLongSuffix/simple.kt");
        }
    }



    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/changeSuperTypeListEntryTypeArgument")
    public static class ChangeSuperTypeListEntryTypeArgument extends AbstractHighLevelQuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("propertyTypeMismatchOnOverride.kt")
        public void testPropertyTypeMismatchOnOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSuperTypeListEntryTypeArgument/propertyTypeMismatchOnOverride.kt");
        }

        @TestMetadata("propertyTypeMismatchOnOverride2.kt")
        public void testPropertyTypeMismatchOnOverride2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSuperTypeListEntryTypeArgument/propertyTypeMismatchOnOverride2.kt");
        }

        @TestMetadata("propertyTypeMismatchWithNameAmbiguity.kt")
        public void testPropertyTypeMismatchWithNameAmbiguity() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSuperTypeListEntryTypeArgument/propertyTypeMismatchWithNameAmbiguity.kt");
        }

        @TestMetadata("propertyTypeMismatchWithNameCollision.kt")
        public void testPropertyTypeMismatchWithNameCollision() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSuperTypeListEntryTypeArgument/propertyTypeMismatchWithNameCollision.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverride.kt")
        public void testReturnTypeMismatchOnOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSuperTypeListEntryTypeArgument/returnTypeMismatchOnOverride.kt");
        }

        @TestMetadata("returnTypeMismatchOnOverride2.kt")
        public void testReturnTypeMismatchOnOverride2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSuperTypeListEntryTypeArgument/returnTypeMismatchOnOverride2.kt");
        }

        @TestMetadata("returnTypeMismatchWithNameAmbiguity.kt")
        public void testReturnTypeMismatchWithNameAmbiguity() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSuperTypeListEntryTypeArgument/returnTypeMismatchWithNameAmbiguity.kt");
        }

        @TestMetadata("returnTypeMismatchWithNameCollision.kt")
        public void testReturnTypeMismatchWithNameCollision() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSuperTypeListEntryTypeArgument/returnTypeMismatchWithNameCollision.kt");
        }
    }
}
