// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.codeInsight.intentions.shared;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/intentions-shared/tests/k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../testData/intentions")
public abstract class SharedK2IntentionTestGenerated extends AbstractSharedK2IntentionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/intentions/addBraces")
    public static class AddBraces extends AbstractSharedK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addBracesForDoWhile.kt")
        public void testAddBracesForDoWhile() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForDoWhile.kt");
        }

        @TestMetadata("addBracesForElse.kt")
        public void testAddBracesForElse() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForElse.kt");
        }

        @TestMetadata("addBracesForElseWithCommentInsideIf.kt")
        public void testAddBracesForElseWithCommentInsideIf() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForElseWithCommentInsideIf.kt");
        }

        @TestMetadata("addBracesForElseWithCommentInsideWhen.kt")
        public void testAddBracesForElseWithCommentInsideWhen() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForElseWithCommentInsideWhen.kt");
        }

        @TestMetadata("addBracesForFor.kt")
        public void testAddBracesForFor() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForFor.kt");
        }

        @TestMetadata("addBracesForIf.kt")
        public void testAddBracesForIf() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForIf.kt");
        }

        @TestMetadata("addBracesForIfWithIndent.kt")
        public void testAddBracesForIfWithIndent() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForIfWithIndent.kt");
        }

        @TestMetadata("addBracesForIfWithIndent2.kt")
        public void testAddBracesForIfWithIndent2() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForIfWithIndent2.kt");
        }

        @TestMetadata("addBracesForIfWithIndent3.kt")
        public void testAddBracesForIfWithIndent3() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForIfWithIndent3.kt");
        }

        @TestMetadata("addBracesForIfWithNoSpace.kt")
        public void testAddBracesForIfWithNoSpace() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForIfWithNoSpace.kt");
        }

        @TestMetadata("addBracesForIfWithSemicolon.kt")
        public void testAddBracesForIfWithSemicolon() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForIfWithSemicolon.kt");
        }

        @TestMetadata("addBracesForIfWithSemicolonAndExpression.kt")
        public void testAddBracesForIfWithSemicolonAndExpression() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForIfWithSemicolonAndExpression.kt");
        }

        @TestMetadata("addBracesForSingleLineIfWithCommentBeneath.kt")
        public void testAddBracesForSingleLineIfWithCommentBeneath() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForSingleLineIfWithCommentBeneath.kt");
        }

        @TestMetadata("addBracesForSingleLineIfWithCommentBeneath2.kt")
        public void testAddBracesForSingleLineIfWithCommentBeneath2() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForSingleLineIfWithCommentBeneath2.kt");
        }

        @TestMetadata("addBracesForSingleLineIfWithCommentBeneath3.kt")
        public void testAddBracesForSingleLineIfWithCommentBeneath3() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForSingleLineIfWithCommentBeneath3.kt");
        }

        @TestMetadata("addBracesForSingleStatementElseWithCommentBeneath.kt")
        public void testAddBracesForSingleStatementElseWithCommentBeneath() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForSingleStatementElseWithCommentBeneath.kt");
        }

        @TestMetadata("addBracesForSingleStatementIfWithCommentBeneath.kt")
        public void testAddBracesForSingleStatementIfWithCommentBeneath() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForSingleStatementIfWithCommentBeneath.kt");
        }

        @TestMetadata("addBracesForSingleStatementIfWithCommentBeneath2.kt")
        public void testAddBracesForSingleStatementIfWithCommentBeneath2() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForSingleStatementIfWithCommentBeneath2.kt");
        }

        @TestMetadata("addBracesForWhile.kt")
        public void testAddBracesForWhile() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesForWhile.kt");
        }

        @TestMetadata("addBracesWithBraces.kt")
        public void testAddBracesWithBraces() throws Exception {
            runTest("../testData/intentions/addBraces/addBracesWithBraces.kt");
        }

        @TestMetadata("commentInDoWhileCondition.kt")
        public void testCommentInDoWhileCondition() throws Exception {
            runTest("../testData/intentions/addBraces/commentInDoWhileCondition.kt");
        }

        @TestMetadata("commentInForCondition.kt")
        public void testCommentInForCondition() throws Exception {
            runTest("../testData/intentions/addBraces/commentInForCondition.kt");
        }

        @TestMetadata("commentInIfCondition.kt")
        public void testCommentInIfCondition() throws Exception {
            runTest("../testData/intentions/addBraces/commentInIfCondition.kt");
        }

        @TestMetadata("commentInWhenEntryCondition.kt")
        public void testCommentInWhenEntryCondition() throws Exception {
            runTest("../testData/intentions/addBraces/commentInWhenEntryCondition.kt");
        }

        @TestMetadata("commentInWhileCondition.kt")
        public void testCommentInWhileCondition() throws Exception {
            runTest("../testData/intentions/addBraces/commentInWhileCondition.kt");
        }

        @TestMetadata("doWhileWithComment.kt")
        public void testDoWhileWithComment() throws Exception {
            runTest("../testData/intentions/addBraces/doWhileWithComment.kt");
        }

        @TestMetadata("elseWithComment.kt")
        public void testElseWithComment() throws Exception {
            runTest("../testData/intentions/addBraces/elseWithComment.kt");
        }

        @TestMetadata("forWithComment.kt")
        public void testForWithComment() throws Exception {
            runTest("../testData/intentions/addBraces/forWithComment.kt");
        }

        @TestMetadata("hasCommentOnNextLine.kt")
        public void testHasCommentOnNextLine() throws Exception {
            runTest("../testData/intentions/addBraces/hasCommentOnNextLine.kt");
        }

        @TestMetadata("hasCommentOnNextLine2.kt")
        public void testHasCommentOnNextLine2() throws Exception {
            runTest("../testData/intentions/addBraces/hasCommentOnNextLine2.kt");
        }

        @TestMetadata("ifElseWithComment.kt")
        public void testIfElseWithComment() throws Exception {
            runTest("../testData/intentions/addBraces/ifElseWithComment.kt");
        }

        @TestMetadata("ifWithComment.kt")
        public void testIfWithComment() throws Exception {
            runTest("../testData/intentions/addBraces/ifWithComment.kt");
        }

        @TestMetadata("notInsideElseIfBlock.kt")
        public void testNotInsideElseIfBlock() throws Exception {
            runTest("../testData/intentions/addBraces/notInsideElseIfBlock.kt");
        }

        @TestMetadata("whenHasBraces.kt")
        public void testWhenHasBraces() throws Exception {
            runTest("../testData/intentions/addBraces/whenHasBraces.kt");
        }

        @TestMetadata("whenSimple.kt")
        public void testWhenSimple() throws Exception {
            runTest("../testData/intentions/addBraces/whenSimple.kt");
        }

        @TestMetadata("whenWithComment.kt")
        public void testWhenWithComment() throws Exception {
            runTest("../testData/intentions/addBraces/whenWithComment.kt");
        }

        @TestMetadata("whileWithComment.kt")
        public void testWhileWithComment() throws Exception {
            runTest("../testData/intentions/addBraces/whileWithComment.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/intentions/addBracesToAllBranches")
    public static class AddBracesToAllBranches extends AbstractSharedK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("else.kt")
        public void testElse() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/else.kt");
        }

        @TestMetadata("elseIf.kt")
        public void testElseIf() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/elseIf.kt");
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/if.kt");
        }

        @TestMetadata("if2.kt")
        public void testIf2() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/if2.kt");
        }

        @TestMetadata("if3.kt")
        public void testIf3() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/if3.kt");
        }

        @TestMetadata("ifThen.kt")
        public void testIfThen() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/ifThen.kt");
        }

        @TestMetadata("ifWithNoElse.kt")
        public void testIfWithNoElse() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/ifWithNoElse.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/when.kt");
        }

        @TestMetadata("when2.kt")
        public void testWhen2() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/when2.kt");
        }

        @TestMetadata("when3.kt")
        public void testWhen3() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/when3.kt");
        }

        @TestMetadata("whenEntry.kt")
        public void testWhenEntry() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/whenEntry.kt");
        }

        @TestMetadata("whenWithOneEntry.kt")
        public void testWhenWithOneEntry() throws Exception {
            runTest("../testData/intentions/addBracesToAllBranches/whenWithOneEntry.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/intentions/removeBraces")
    public static class RemoveBraces extends AbstractSharedK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            runTest("../testData/intentions/removeBraces/doWhile.kt");
        }

        @TestMetadata("doWhileWithLocalClass.kt")
        public void testDoWhileWithLocalClass() throws Exception {
            runTest("../testData/intentions/removeBraces/doWhileWithLocalClass.kt");
        }

        @TestMetadata("doWhileWithLocalVariable.kt")
        public void testDoWhileWithLocalVariable() throws Exception {
            runTest("../testData/intentions/removeBraces/doWhileWithLocalVariable.kt");
        }

        @TestMetadata("doWhileWithTwoStatements.kt")
        public void testDoWhileWithTwoStatements() throws Exception {
            runTest("../testData/intentions/removeBraces/doWhileWithTwoStatements.kt");
        }

        @TestMetadata("else.kt")
        public void testElse() throws Exception {
            runTest("../testData/intentions/removeBraces/else.kt");
        }

        @TestMetadata("elseInDotQualifiedExpression.kt")
        public void testElseInDotQualifiedExpression() throws Exception {
            runTest("../testData/intentions/removeBraces/elseInDotQualifiedExpression.kt");
        }

        @TestMetadata("elseInPlusAssignExpression.kt")
        public void testElseInPlusAssignExpression() throws Exception {
            runTest("../testData/intentions/removeBraces/elseInPlusAssignExpression.kt");
        }

        @TestMetadata("elseLambda.kt")
        public void testElseLambda() throws Exception {
            runTest("../testData/intentions/removeBraces/elseLambda.kt");
        }

        @TestMetadata("elseLambda2.kt")
        public void testElseLambda2() throws Exception {
            runTest("../testData/intentions/removeBraces/elseLambda2.kt");
        }

        @TestMetadata("for.kt")
        public void testFor() throws Exception {
            runTest("../testData/intentions/removeBraces/for.kt");
        }

        @TestMetadata("forWithLocalClass.kt")
        public void testForWithLocalClass() throws Exception {
            runTest("../testData/intentions/removeBraces/forWithLocalClass.kt");
        }

        @TestMetadata("forWithLocalVariable.kt")
        public void testForWithLocalVariable() throws Exception {
            runTest("../testData/intentions/removeBraces/forWithLocalVariable.kt");
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            runTest("../testData/intentions/removeBraces/if.kt");
        }

        @TestMetadata("ifInDotQualifiedExpression.kt")
        public void testIfInDotQualifiedExpression() throws Exception {
            runTest("../testData/intentions/removeBraces/ifInDotQualifiedExpression.kt");
        }

        @TestMetadata("ifInsideIf.kt")
        public void testIfInsideIf() throws Exception {
            runTest("../testData/intentions/removeBraces/ifInsideIf.kt");
        }

        @TestMetadata("ifInsideIf2.kt")
        public void testIfInsideIf2() throws Exception {
            runTest("../testData/intentions/removeBraces/ifInsideIf2.kt");
        }

        @TestMetadata("ifInsideIf3.kt")
        public void testIfInsideIf3() throws Exception {
            runTest("../testData/intentions/removeBraces/ifInsideIf3.kt");
        }

        @TestMetadata("ifInsideIf4.kt")
        public void testIfInsideIf4() throws Exception {
            runTest("../testData/intentions/removeBraces/ifInsideIf4.kt");
        }

        @TestMetadata("ifInsideIf5.kt")
        public void testIfInsideIf5() throws Exception {
            runTest("../testData/intentions/removeBraces/ifInsideIf5.kt");
        }

        @TestMetadata("ifInsideIf6.kt")
        public void testIfInsideIf6() throws Exception {
            runTest("../testData/intentions/removeBraces/ifInsideIf6.kt");
        }

        @TestMetadata("ifInsideIf7.kt")
        public void testIfInsideIf7() throws Exception {
            runTest("../testData/intentions/removeBraces/ifInsideIf7.kt");
        }

        @TestMetadata("ifLambda.kt")
        public void testIfLambda() throws Exception {
            runTest("../testData/intentions/removeBraces/ifLambda.kt");
        }

        @TestMetadata("ifLambda2.kt")
        public void testIfLambda2() throws Exception {
            runTest("../testData/intentions/removeBraces/ifLambda2.kt");
        }

        @TestMetadata("ifLong.kt")
        public void testIfLong() throws Exception {
            runTest("../testData/intentions/removeBraces/ifLong.kt");
        }

        @TestMetadata("ifWithComment.kt")
        public void testIfWithComment() throws Exception {
            runTest("../testData/intentions/removeBraces/ifWithComment.kt");
        }

        @TestMetadata("ifWithLocalClass.kt")
        public void testIfWithLocalClass() throws Exception {
            runTest("../testData/intentions/removeBraces/ifWithLocalClass.kt");
        }

        @TestMetadata("ifWithLocalVariable.kt")
        public void testIfWithLocalVariable() throws Exception {
            runTest("../testData/intentions/removeBraces/ifWithLocalVariable.kt");
        }

        @TestMetadata("ifWithNoStatement.kt")
        public void testIfWithNoStatement() throws Exception {
            runTest("../testData/intentions/removeBraces/ifWithNoStatement.kt");
        }

        @TestMetadata("ifWithSemicolon.kt")
        public void testIfWithSemicolon() throws Exception {
            runTest("../testData/intentions/removeBraces/ifWithSemicolon.kt");
        }

        @TestMetadata("ifWithTwoStatements.kt")
        public void testIfWithTwoStatements() throws Exception {
            runTest("../testData/intentions/removeBraces/ifWithTwoStatements.kt");
        }

        @TestMetadata("removeBracesFromIfWithCommentedCode.kt")
        public void testRemoveBracesFromIfWithCommentedCode() throws Exception {
            runTest("../testData/intentions/removeBraces/removeBracesFromIfWithCommentedCode.kt");
        }

        @TestMetadata("whenInDotQualifiedExpression.kt")
        public void testWhenInDotQualifiedExpression() throws Exception {
            runTest("../testData/intentions/removeBraces/whenInDotQualifiedExpression.kt");
        }

        @TestMetadata("whenLambda.kt")
        public void testWhenLambda() throws Exception {
            runTest("../testData/intentions/removeBraces/whenLambda.kt");
        }

        @TestMetadata("whenLambda2.kt")
        public void testWhenLambda2() throws Exception {
            runTest("../testData/intentions/removeBraces/whenLambda2.kt");
        }

        @TestMetadata("whenLambda3.kt")
        public void testWhenLambda3() throws Exception {
            runTest("../testData/intentions/removeBraces/whenLambda3.kt");
        }

        @TestMetadata("whenLong.kt")
        public void testWhenLong() throws Exception {
            runTest("../testData/intentions/removeBraces/whenLong.kt");
        }

        @TestMetadata("whenMultiple.kt")
        public void testWhenMultiple() throws Exception {
            runTest("../testData/intentions/removeBraces/whenMultiple.kt");
        }

        @TestMetadata("whenNoBraces.kt")
        public void testWhenNoBraces() throws Exception {
            runTest("../testData/intentions/removeBraces/whenNoBraces.kt");
        }

        @TestMetadata("whenSimple.kt")
        public void testWhenSimple() throws Exception {
            runTest("../testData/intentions/removeBraces/whenSimple.kt");
        }

        @TestMetadata("whenSimpleOutsideBlock.kt")
        public void testWhenSimpleOutsideBlock() throws Exception {
            runTest("../testData/intentions/removeBraces/whenSimpleOutsideBlock.kt");
        }

        @TestMetadata("whenStatement.kt")
        public void testWhenStatement() throws Exception {
            runTest("../testData/intentions/removeBraces/whenStatement.kt");
        }

        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            runTest("../testData/intentions/removeBraces/while.kt");
        }

        @TestMetadata("whileOutsideBlock.kt")
        public void testWhileOutsideBlock() throws Exception {
            runTest("../testData/intentions/removeBraces/whileOutsideBlock.kt");
        }

        @TestMetadata("whileWithLocalClass.kt")
        public void testWhileWithLocalClass() throws Exception {
            runTest("../testData/intentions/removeBraces/whileWithLocalClass.kt");
        }

        @TestMetadata("whileWithLocalVariable.kt")
        public void testWhileWithLocalVariable() throws Exception {
            runTest("../testData/intentions/removeBraces/whileWithLocalVariable.kt");
        }

        @TestMetadata("whileWithTwoStatements.kt")
        public void testWhileWithTwoStatements() throws Exception {
            runTest("../testData/intentions/removeBraces/whileWithTwoStatements.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/intentions/removeBracesFromAllBranches")
    public static class RemoveBracesFromAllBranches extends AbstractSharedK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("else.kt")
        public void testElse() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/else.kt");
        }

        @TestMetadata("elseIf.kt")
        public void testElseIf() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/elseIf.kt");
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/if.kt");
        }

        @TestMetadata("if2.kt")
        public void testIf2() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/if2.kt");
        }

        @TestMetadata("if3.kt")
        public void testIf3() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/if3.kt");
        }

        @TestMetadata("ifThen.kt")
        public void testIfThen() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/ifThen.kt");
        }

        @TestMetadata("ifWithNoElse.kt")
        public void testIfWithNoElse() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/ifWithNoElse.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/when.kt");
        }

        @TestMetadata("when2.kt")
        public void testWhen2() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/when2.kt");
        }

        @TestMetadata("when3.kt")
        public void testWhen3() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/when3.kt");
        }

        @TestMetadata("whenEntry.kt")
        public void testWhenEntry() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/whenEntry.kt");
        }

        @TestMetadata("whenWithOneEntry.kt")
        public void testWhenWithOneEntry() throws Exception {
            runTest("../testData/intentions/removeBracesFromAllBranches/whenWithOneEntry.kt");
        }
    }
}
