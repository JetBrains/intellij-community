// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.codeInsight.postfix.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/postfix-templates")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/expansion")
public abstract class KotlinPostfixTemplateTestGenerated extends AbstractKotlinPostfixTemplateTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/arrayOf")
    public static class ArrayOf extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            performTest();
        }

        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            performTest();
        }

        @TestMetadata("numberExpectedArray.kt")
        public void testNumberExpectedArray() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("uint.kt")
        public void testUint() throws Exception {
            performTest();
        }

        @TestMetadata("ulong.kt")
        public void testUlong() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/assert")
    public static class Assert extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("binary.kt")
        public void testBinary() throws Exception {
            performTest();
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("literal.kt")
        public void testLiteral() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/for")
    public static class For extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("any.kt")
        public void testAny() throws Exception {
            performTest();
        }

        @TestMetadata("forOnMap.kt")
        public void testForOnMap() throws Exception {
            performTest();
        }

        @TestMetadata("forOnString.kt")
        public void testForOnString() throws Exception {
            performTest();
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            performTest();
        }

        @TestMetadata("map.kt")
        public void testMap() throws Exception {
            performTest();
        }

        @TestMetadata("nestedList.kt")
        public void testNestedList() throws Exception {
            performTest();
        }

        @TestMetadata("nestedNestedList.kt")
        public void testNestedNestedList() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("sequence.kt")
        public void testSequence() throws Exception {
            performTest();
        }

        @TestMetadata("stream.kt")
        public void testStream() throws Exception {
            performTest();
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/fori")
    public static class Fori extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("forIndexed.kt")
        public void testForIndexed() throws Exception {
            performTest();
        }

        @TestMetadata("forIndexed2.kt")
        public void testForIndexed2() throws Exception {
            performTest();
        }

        @TestMetadata("forNumber.kt")
        public void testForNumber() throws Exception {
            performTest();
        }

        @TestMetadata("forNumber2.kt")
        public void testForNumber2() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/forr")
    public static class Forr extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("forNumberReverse.kt")
        public void testForNumberReverse() throws Exception {
            performTest();
        }

        @TestMetadata("forReversed.kt")
        public void testForReversed() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/if")
    public static class If extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("inside.kt")
        public void testInside() throws Exception {
            performTest();
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/iter")
    public static class Iter extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/listOf")
    public static class ListOf extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("classLiteral.kt")
        public void testClassLiteral() throws Exception {
            performTest();
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/nn")
    public static class Nn extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/not")
    public static class Not extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("any.kt")
        public void testAny() throws Exception {
            performTest();
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("negated.kt")
        public void testNegated() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/null")
    public static class Null extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("notNull.kt")
        public void testNotNull() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedReceiver.kt")
        public void testQualifiedReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedSelector.kt")
        public void testQualifiedSelector() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/par")
    public static class Par extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("binary.kt")
        public void testBinary() throws Exception {
            performTest();
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("par.kt")
        public void testPar() throws Exception {
            performTest();
        }

        @TestMetadata("par2.kt")
        public void testPar2() throws Exception {
            performTest();
        }

        @TestMetadata("parAfterUserType.kt")
        public void testParAfterUserType() throws Exception {
            performTest();
        }

        @TestMetadata("parAssignment.kt")
        public void testParAssignment() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/return")
    public static class Return extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("expressionBody.kt")
        public void testExpressionBody() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedReceiver.kt")
        public void testQualifiedReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedSelector.kt")
        public void testQualifiedSelector() throws Exception {
            performTest();
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/sequenceOf")
    public static class SequenceOf extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("test.kt")
        public void testTest() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/setOf")
    public static class SetOf extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/sout")
    public static class Sout extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedReceiver.kt")
        public void testQualifiedReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedSelector.kt")
        public void testQualifiedSelector() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("sout.kt")
        public void testSout() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/spread")
    public static class Spread extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("already.kt")
        public void testAlready() throws Exception {
            performTest();
        }

        @TestMetadata("intArray.kt")
        public void testIntArray() throws Exception {
            performTest();
        }

        @TestMetadata("noCall.kt")
        public void testNoCall() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/try")
    public static class Try extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("javaException.kt")
        public void testJavaException() throws Exception {
            performTest();
        }

        @TestMetadata("kotlinException.kt")
        public void testKotlinException() throws Exception {
            performTest();
        }

        @TestMetadata("mixedExceptions.kt")
        public void testMixedExceptions() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/unless")
    public static class Unless extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("inside.kt")
        public void testInside() throws Exception {
            performTest();
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/when")
    public static class When extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("nonSealed.kt")
        public void testNonSealed() throws Exception {
            performTest();
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/while")
    public static class While extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("inside.kt")
        public void testInside() throws Exception {
            performTest();
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            performTest();
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/with")
    public static class With extends AbstractKotlinPostfixTemplateTest {
        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("classLiteral.kt")
        public void testClassLiteral() throws Exception {
            performTest();
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            performTest();
        }

        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            performTest();
        }
    }
}
