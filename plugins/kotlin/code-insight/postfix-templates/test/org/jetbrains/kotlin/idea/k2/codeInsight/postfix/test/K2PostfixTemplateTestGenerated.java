// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.codeInsight.postfix.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import com.intellij.testFramework.TestIndexingModeSupporter;
import org.jetbrains.kotlin.idea.base.test.TestIndexingMode;
import static com.intellij.testFramework.TestIndexingModeSupporter.IndexingMode.DUMB_EMPTY_INDEX;
import static com.intellij.testFramework.TestIndexingModeSupporter.IndexingMode.SMART;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/postfix-templates")
@TestDataPath("$CONTENT_ROOT")
@TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/expansion")
public abstract class K2PostfixTemplateTestGenerated extends AbstractK2PostfixTemplateTest {
    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/arg")
    public static class Arg extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("arg.kt")
        public void testArg() throws Exception {
            performTest();
        }

        @TestMetadata("argWithReturn.kt")
        public void testArgWithReturn() throws Exception {
            performTest();
        }

        @TestMetadata("argWithThrow.kt")
        public void testArgWithThrow() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/arrayOf")
    public static class ArrayOf extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            performTest();
        }

        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            performTest();
        }

        @TestMetadata("numberExpectedArray.kt")
        public void testNumberExpectedArray() throws Exception {
            performTest();
        }

        @TestMetadata("package.kt")
        public void testPackage() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("uint.kt")
        public void testUint() throws Exception {
            performTest();
        }

        @TestMetadata("ulong.kt")
        public void testUlong() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/assert")
    public static class Assert extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("binary.kt")
        public void testBinary() throws Exception {
            performTest();
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("literal.kt")
        public void testLiteral() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/for")
    public static class For extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("any.kt")
        public void testAny() throws Exception {
            performTest();
        }

        @TestMetadata("array.kt")
        public void testArray() throws Exception {
            performTest();
        }

        @TestMetadata("forOnMap.kt")
        public void testForOnMap() throws Exception {
            performTest();
        }

        @TestMetadata("forOnString.kt")
        public void testForOnString() throws Exception {
            performTest();
        }

        @TestMetadata("intArray.kt")
        public void testIntArray() throws Exception {
            performTest();
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            performTest();
        }

        @TestMetadata("map.kt")
        public void testMap() throws Exception {
            performTest();
        }

        @TestMetadata("nestedList.kt")
        public void testNestedList() throws Exception {
            performTest();
        }

        @TestMetadata("nestedNestedList.kt")
        public void testNestedNestedList() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("sequence.kt")
        public void testSequence() throws Exception {
            performTest();
        }

        @TestMetadata("stream.kt")
        public void testStream() throws Exception {
            performTest();
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            performTest();
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/fori")
    public static class Fori extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("forIndexed.kt")
        public void testForIndexed() throws Exception {
            performTest();
        }

        @TestMetadata("forIndexed2.kt")
        public void testForIndexed2() throws Exception {
            performTest();
        }

        @TestMetadata("forNumber.kt")
        public void testForNumber() throws Exception {
            performTest();
        }

        @TestMetadata("forNumber2.kt")
        public void testForNumber2() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/forr")
    public static class Forr extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("forNumberReverse.kt")
        public void testForNumberReverse() throws Exception {
            performTest();
        }

        @TestMetadata("forReversed.kt")
        public void testForReversed() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/if")
    public static class If extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("inside.kt")
        public void testInside() throws Exception {
            performTest();
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/iter")
    public static class Iter extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/itor")
    public static class Itor extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/listOf")
    public static class ListOf extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("classLiteral.kt")
        public void testClassLiteral() throws Exception {
            performTest();
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            performTest();
        }

        @TestMetadata("package.kt")
        public void testPackage() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/nn")
    public static class Nn extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/not")
    public static class Not extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("any.kt")
        public void testAny() throws Exception {
            performTest();
        }

        @TestMetadata("booleanLiteralFalse.kt")
        public void testBooleanLiteralFalse() throws Exception {
            performTest();
        }

        @TestMetadata("booleanLiteralTrue.kt")
        public void testBooleanLiteralTrue() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsAll.kt")
        public void testCollectionsAll() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsAll_implicitReceiver.kt")
        public void testCollectionsAll_implicitReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsIsEmpty.kt")
        public void testCollectionsIsEmpty() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsIsEmpty_implicitReceiver.kt")
        public void testCollectionsIsEmpty_implicitReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsIsEmpty_implicitReceiver_listReceiver.kt")
        public void testCollectionsIsEmpty_implicitReceiver_listReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsIsEmpty_listReceiver.kt")
        public void testCollectionsIsEmpty_listReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsIsNotEmpty.kt")
        public void testCollectionsIsNotEmpty() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsIsNotEmpty_implicitReceiver.kt")
        public void testCollectionsIsNotEmpty_implicitReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsNone.kt")
        public void testCollectionsNone() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsNone_implicitReceiver.kt")
        public void testCollectionsNone_implicitReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("ifExpression.kt")
        public void testIfExpression() throws Exception {
            performTest();
        }

        @TestMetadata("isInstanceCheck.kt")
        public void testIsInstanceCheck() throws Exception {
            performTest();
        }

        @TestMetadata("isNotInstanceCheck.kt")
        public void testIsNotInstanceCheck() throws Exception {
            performTest();
        }

        @TestMetadata("negated.kt")
        public void testNegated() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            performTest();
        }

        @TestMetadata("operatorEQ.kt")
        public void testOperatorEQ() throws Exception {
            performTest();
        }

        @TestMetadata("operatorIN.kt")
        public void testOperatorIN() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedCall.kt")
        public void testQualifiedCall() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("simpleCall.kt")
        public void testSimpleCall() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/null")
    public static class Null extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("notNull.kt")
        public void testNotNull() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedReceiver.kt")
        public void testQualifiedReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedSelector.kt")
        public void testQualifiedSelector() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/oldTestData")
    public abstract static class OldTestData extends AbstractK2PostfixTemplateTest {
        @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/expansion/oldTestData")
        public static class Uncategorized extends AbstractK2PostfixTemplateTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            @TestMetadata("arg.kt")
            public void testArg() throws Exception {
                performTest();
            }

            @TestMetadata("argWithReturn.kt")
            public void testArgWithReturn() throws Exception {
                performTest();
            }

            @TestMetadata("argWithThrow.kt")
            public void testArgWithThrow() throws Exception {
                performTest();
            }

            @TestMetadata("assert.kt")
            public void testAssert() throws Exception {
                performTest();
            }

            @TestMetadata("assertNonTopLevel.kt")
            public void testAssertNonTopLevel() throws Exception {
                performTest();
            }

            @TestMetadata("doNotProposeWrappingIncrement.kt")
            public void testDoNotProposeWrappingIncrement() throws Exception {
                performTest();
            }

            @TestMetadata("else.kt")
            public void testElse() throws Exception {
                performTest();
            }

            @TestMetadata("for.kt")
            public void testFor() throws Exception {
                performTest();
            }

            @TestMetadata("forIndexed.kt")
            public void testForIndexed() throws Exception {
                performTest();
            }

            @TestMetadata("forIndexed2.kt")
            public void testForIndexed2() throws Exception {
                performTest();
            }

            @TestMetadata("forNumber.kt")
            public void testForNumber() throws Exception {
                performTest();
            }

            @TestMetadata("forNumber2.kt")
            public void testForNumber2() throws Exception {
                performTest();
            }

            @TestMetadata("forNumberInverse.kt")
            public void testForNumberInverse() throws Exception {
                performTest();
            }

            @TestMetadata("forOnMap.kt")
            public void testForOnMap() throws Exception {
                performTest();
            }

            @TestMetadata("forOnString.kt")
            public void testForOnString() throws Exception {
                performTest();
            }

            @TestMetadata("forReversed.kt")
            public void testForReversed() throws Exception {
                performTest();
            }

            @TestMetadata("if.kt")
            public void testIf() throws Exception {
                performTest();
            }

            @TestMetadata("iter.kt")
            public void testIter() throws Exception {
                performTest();
            }

            @TestMetadata("noParOnLoop.kt")
            public void testNoParOnLoop() throws Exception {
                performTest();
            }

            @TestMetadata("noReturnForNonStatement.kt")
            public void testNoReturnForNonStatement() throws Exception {
                performTest();
            }

            @TestMetadata("notBoolean.kt")
            public void testNotBoolean() throws Exception {
                performTest();
            }

            @TestMetadata("notString.kt")
            public void testNotString() throws Exception {
                performTest();
            }

            @TestMetadata("notnull.kt")
            public void testNotnull() throws Exception {
                performTest();
            }

            @TestMetadata("null.kt")
            public void testNull() throws Exception {
                performTest();
            }

            @TestMetadata("par.kt")
            public void testPar() throws Exception {
                performTest();
            }

            @TestMetadata("parAfterUserType.kt")
            public void testParAfterUserType() throws Exception {
                performTest();
            }

            @TestMetadata("parAssignment.kt")
            public void testParAssignment() throws Exception {
                performTest();
            }

            @TestMetadata("return.kt")
            public void testReturn() throws Exception {
                performTest();
            }

            @TestMetadata("returnFromLoop.kt")
            public void testReturnFromLoop() throws Exception {
                performTest();
            }

            @TestMetadata("sout.kt")
            public void testSout() throws Exception {
                performTest();
            }

            @TestMetadata("soutCompanionClassLiteral.kt")
            public void testSoutCompanionClassLiteral() throws Exception {
                performTest();
            }

            @TestMetadata("soutInIf.kt")
            public void testSoutInIf() throws Exception {
                performTest();
            }

            @TestMetadata("soutInLoop.kt")
            public void testSoutInLoop() throws Exception {
                performTest();
            }

            @TestMetadata("spread.kt")
            public void testSpread() throws Exception {
                performTest();
            }

            @TestMetadata("spreadIntArray.kt")
            public void testSpreadIntArray() throws Exception {
                performTest();
            }

            @TestMetadata("try.kt")
            public void testTry() throws Exception {
                performTest();
            }

            @TestMetadata("tryInLocalClass.kt")
            public void testTryInLocalClass() throws Exception {
                performTest();
            }

            @TestMetadata("tryOnFor.kt")
            public void testTryOnFor() throws Exception {
                performTest();
            }

            @TestMetadata("tryOnImportStatement.kt")
            public void testTryOnImportStatement() throws Exception {
                performTest();
            }

            @TestMetadata("tryOnStatement.kt")
            public void testTryOnStatement() throws Exception {
                performTest();
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                performTest();
            }

            @TestMetadata("valAfterReceiver.kt")
            public void testValAfterReceiver() throws Exception {
                performTest();
            }

            @TestMetadata("valAfterSelector.kt")
            public void testValAfterSelector() throws Exception {
                performTest();
            }

            @TestMetadata("valAtLamba.kt")
            public void testValAtLamba() throws Exception {
                performTest();
            }

            @TestMetadata("valAtLambaArgumentInCall.kt")
            public void testValAtLambaArgumentInCall() throws Exception {
                performTest();
            }

            @TestMetadata("valInsideLambda.kt")
            public void testValInsideLambda() throws Exception {
                performTest();
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                performTest();
            }

            @TestMetadata("when.kt")
            public void testWhen() throws Exception {
                performTest();
            }

            @TestMetadata("whenExpression.kt")
            public void testWhenExpression() throws Exception {
                performTest();
            }

            @TestMetadata("whenForEnumClass.kt")
            public void testWhenForEnumClass() throws Exception {
                performTest();
            }

            @TestMetadata("whenForSealedClass.kt")
            public void testWhenForSealedClass() throws Exception {
                performTest();
            }

            @TestMetadata("whenOnThis.kt")
            public void testWhenOnThis() throws Exception {
                performTest();
            }

            @TestMetadata("whenOnThisInExtension.kt")
            public void testWhenOnThisInExtension() throws Exception {
                performTest();
            }

            @TestMetadata("while.kt")
            public void testWhile() throws Exception {
                performTest();
            }

            @TestMetadata("with.kt")
            public void testWith() throws Exception {
                performTest();
            }
        }

        @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/expansion/oldTestData/wrapWithCall")
        public static class WrapWithCall extends AbstractK2PostfixTemplateTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            @TestMetadata("arrayOfStatement.kt")
            public void testArrayOfStatement() throws Exception {
                performTest();
            }

            @TestMetadata("listOf.kt")
            public void testListOf() throws Exception {
                performTest();
            }

            @TestMetadata("returnSequenceOf.kt")
            public void testReturnSequenceOf() throws Exception {
                performTest();
            }

            @TestMetadata("setOf.kt")
            public void testSetOf() throws Exception {
                performTest();
            }
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/par")
    public static class Par extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("binary.kt")
        public void testBinary() throws Exception {
            performTest();
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("package.kt")
        public void testPackage() throws Exception {
            performTest();
        }

        @TestMetadata("par.kt")
        public void testPar() throws Exception {
            performTest();
        }

        @TestMetadata("par2.kt")
        public void testPar2() throws Exception {
            performTest();
        }

        @TestMetadata("parAfterUserType.kt")
        public void testParAfterUserType() throws Exception {
            performTest();
        }

        @TestMetadata("parAssignment.kt")
        public void testParAssignment() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/return")
    public static class Return extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("expressionBody.kt")
        public void testExpressionBody() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedReceiver.kt")
        public void testQualifiedReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedSelector.kt")
        public void testQualifiedSelector() throws Exception {
            performTest();
        }

        @TestMetadata("return.kt")
        public void testReturn() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/sequenceOf")
    public static class SequenceOf extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("test.kt")
        public void testTest() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/setOf")
    public static class SetOf extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/sout")
    public static class Sout extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedReceiver.kt")
        public void testQualifiedReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("qualifiedSelector.kt")
        public void testQualifiedSelector() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("sout.kt")
        public void testSout() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/spread")
    public static class Spread extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("already.kt")
        public void testAlready() throws Exception {
            performTest();
        }

        @TestMetadata("intArray.kt")
        public void testIntArray() throws Exception {
            performTest();
        }

        @TestMetadata("noCall.kt")
        public void testNoCall() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/try")
    public static class Try extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("javaException.kt")
        public void testJavaException() throws Exception {
            performTest();
        }

        @TestMetadata("kotlinException.kt")
        public void testKotlinException() throws Exception {
            performTest();
        }

        @TestMetadata("mixedExceptions.kt")
        public void testMixedExceptions() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/unless")
    public static class Unless extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsIsEmpty.kt")
        public void testCollectionsIsEmpty() throws Exception {
            performTest();
        }

        @TestMetadata("collectionsIsEmpty_listReceiver.kt")
        public void testCollectionsIsEmpty_listReceiver() throws Exception {
            performTest();
        }

        @TestMetadata("inside.kt")
        public void testInside() throws Exception {
            performTest();
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/val")
    public static class Val extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("package.kt")
        public void testPackage() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/var")
    public static class Var extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("package.kt")
        public void testPackage() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/when")
    public static class When extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("nonSealed.kt")
        public void testNonSealed() throws Exception {
            performTest();
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/while")
    public static class While extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("inside.kt")
        public void testInside() throws Exception {
            performTest();
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            performTest();
        }
    }

    @TestIndexingMode({DUMB_EMPTY_INDEX, SMART})
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/expansion/with")
    public static class With extends AbstractK2PostfixTemplateTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            performTest();
        }

        @TestMetadata("classLiteral.kt")
        public void testClassLiteral() throws Exception {
            performTest();
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            performTest();
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            performTest();
        }

        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            performTest();
        }

        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() throws Exception {
            performTest();
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            performTest();
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            performTest();
        }
    }
}
