// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.codeInsight.inspections.shared;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;
import org.jetbrains.kotlin.idea.inspections.AbstractCoroutineNonBlockingContextDetectionTest;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-shared/tests/k1")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../testData/inspections/blockingCallsDetection")
public class SharedK1CoroutineNonBlockingContextDetectionTestGenerated extends AbstractCoroutineNonBlockingContextDetectionTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K1;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("ContextCheck.kt")
    public void testContextCheck() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/ContextCheck.kt");
    }

    @TestMetadata("DispatchersTypeCheck.kt")
    public void testDispatchersTypeCheck() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/DispatchersTypeCheck.kt");
    }

    @TestMetadata("DispatchersTypeCheckUnsure.kt")
    public void testDispatchersTypeCheckUnsure() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/DispatchersTypeCheckUnsure.kt");
    }

    @TestMetadata("FlowOn.kt")
    public void testFlowOn() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/FlowOn.kt");
    }

    @TestMetadata("InsideCoroutine.kt")
    public void testInsideCoroutine() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/InsideCoroutine.kt");
    }

    @TestMetadata("InsideCoroutineUnsure.kt")
    public void testInsideCoroutineUnsure() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/InsideCoroutineUnsure.kt");
    }

    @TestMetadata("InsideCoroutine_unknownAsBlocking.kt")
    public void testInsideCoroutine_unknownAsBlocking() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/InsideCoroutine_unknownAsBlocking.kt");
    }

    @TestMetadata("LambdaAssignmentCheck.kt")
    public void testLambdaAssignmentCheck() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/LambdaAssignmentCheck.kt");
    }

    @TestMetadata("LambdaAssignmentCheckUnsure.kt")
    public void testLambdaAssignmentCheckUnsure() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/LambdaAssignmentCheckUnsure.kt");
    }

    @TestMetadata("LambdaReceiverTypeCheck.kt")
    public void testLambdaReceiverTypeCheck() throws Exception {
        runTest("../testData/inspections/blockingCallsDetection/LambdaReceiverTypeCheck.kt");
    }
}
