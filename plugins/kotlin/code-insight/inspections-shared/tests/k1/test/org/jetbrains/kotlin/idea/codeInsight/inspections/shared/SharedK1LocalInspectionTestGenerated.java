// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.codeInsight.inspections.shared;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-shared/tests/k1")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../testData/inspectionsLocal")
public abstract class SharedK1LocalInspectionTestGenerated extends AbstractSharedK1LocalInspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/ambiguousNonLocalJump")
    public static class AmbiguousNonLocalJump extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("alreadyLabeled.kt")
        public void testAlreadyLabeled() throws Exception {
            runTest("../testData/inspectionsLocal/ambiguousNonLocalJump/alreadyLabeled.kt");
        }

        @TestMetadata("atMostOnceContract.kt")
        public void testAtMostOnceContract() throws Exception {
            runTest("../testData/inspectionsLocal/ambiguousNonLocalJump/atMostOnceContract.kt");
        }

        @TestMetadata("exactlyOnceContract.kt")
        public void testExactlyOnceContract() throws Exception {
            runTest("../testData/inspectionsLocal/ambiguousNonLocalJump/exactlyOnceContract.kt");
        }

        @TestMetadata("forEach.kt")
        public void testForEach() throws Exception {
            runTest("../testData/inspectionsLocal/ambiguousNonLocalJump/forEach.kt");
        }

        @TestMetadata("lambdaInsideParentheses.kt")
        public void testLambdaInsideParentheses() throws Exception {
            runTest("../testData/inspectionsLocal/ambiguousNonLocalJump/lambdaInsideParentheses.kt");
        }

        @TestMetadata("loopInsideForEach.kt")
        public void testLoopInsideForEach() throws Exception {
            runTest("../testData/inspectionsLocal/ambiguousNonLocalJump/loopInsideForEach.kt");
        }

        @TestMetadata("namedFunctionSyntaxInsteadOfLambda.kt")
        public void testNamedFunctionSyntaxInsteadOfLambda() throws Exception {
            runTest("../testData/inspectionsLocal/ambiguousNonLocalJump/namedFunctionSyntaxInsteadOfLambda.kt");
        }

        @TestMetadata("whileLoop.kt")
        public void testWhileLoop() throws Exception {
            runTest("../testData/inspectionsLocal/ambiguousNonLocalJump/whileLoop.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/delegationToVarProperty")
    public static class DelegationToVarProperty extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("parameter.kt")
        public void testParameter() throws Exception {
            runTest("../testData/inspectionsLocal/delegationToVarProperty/parameter.kt");
        }

        @TestMetadata("valParameter.kt")
        public void testValParameter() throws Exception {
            runTest("../testData/inspectionsLocal/delegationToVarProperty/valParameter.kt");
        }

        @TestMetadata("varParameter.kt")
        public void testVarParameter() throws Exception {
            runTest("../testData/inspectionsLocal/delegationToVarProperty/varParameter.kt");
        }

        @TestMetadata("varParameter2.kt")
        public void testVarParameter2() throws Exception {
            runTest("../testData/inspectionsLocal/delegationToVarProperty/varParameter2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantConstructorKeyword")
    public static class RedundantConstructorKeyword extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractClass.kt")
        public void testAbstractClass() throws Exception {
            runTest("../testData/inspectionsLocal/redundantConstructorKeyword/abstractClass.kt");
        }

        @TestMetadata("annotatedParam.kt")
        public void testAnnotatedParam() throws Exception {
            runTest("../testData/inspectionsLocal/redundantConstructorKeyword/annotatedParam.kt");
        }

        @TestMetadata("annotationClass.kt")
        public void testAnnotationClass() throws Exception {
            runTest("../testData/inspectionsLocal/redundantConstructorKeyword/annotationClass.kt");
        }

        @TestMetadata("comments.kt")
        public void testComments() throws Exception {
            runTest("../testData/inspectionsLocal/redundantConstructorKeyword/comments.kt");
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            runTest("../testData/inspectionsLocal/redundantConstructorKeyword/dataClass.kt");
        }

        @TestMetadata("inParameters.kt")
        public void testInParameters() throws Exception {
            runTest("../testData/inspectionsLocal/redundantConstructorKeyword/inParameters.kt");
        }

        @TestMetadata("privateConstructor.kt")
        public void testPrivateConstructor() throws Exception {
            runTest("../testData/inspectionsLocal/redundantConstructorKeyword/privateConstructor.kt");
        }

        @TestMetadata("varargVal.kt")
        public void testVarargVal() throws Exception {
            runTest("../testData/inspectionsLocal/redundantConstructorKeyword/varargVal.kt");
        }

        @TestMetadata("withProperties.kt")
        public void testWithProperties() throws Exception {
            runTest("../testData/inspectionsLocal/redundantConstructorKeyword/withProperties.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantEmptyInitializerBlock")
    public static class RedundantEmptyInitializerBlock extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("empty.kt")
        public void testEmpty() throws Exception {
            runTest("../testData/inspectionsLocal/redundantEmptyInitializerBlock/empty.kt");
        }

        @TestMetadata("hasComment.kt")
        public void testHasComment() throws Exception {
            runTest("../testData/inspectionsLocal/redundantEmptyInitializerBlock/hasComment.kt");
        }

        @TestMetadata("notEmpty.kt")
        public void testNotEmpty() throws Exception {
            runTest("../testData/inspectionsLocal/redundantEmptyInitializerBlock/notEmpty.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantGetter")
    public static class RedundantGetter extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/annotation.kt");
        }

        @TestMetadata("default.kt")
        public void testDefault() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/default.kt");
        }

        @TestMetadata("external.kt")
        public void testExternal() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/external.kt");
        }

        @TestMetadata("fieldExpression.kt")
        public void testFieldExpression() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/fieldExpression.kt");
        }

        @TestMetadata("hasType.kt")
        public void testHasType() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/hasType.kt");
        }

        @TestMetadata("hasTypeWithPropertyExplicitType.kt")
        public void testHasTypeWithPropertyExplicitType() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/hasTypeWithPropertyExplicitType.kt");
        }

        @TestMetadata("hasTypeWithPropertyInitializer.kt")
        public void testHasTypeWithPropertyInitializer() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/hasTypeWithPropertyInitializer.kt");
        }

        @TestMetadata("notFieldExpression.kt")
        public void testNotFieldExpression() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/notFieldExpression.kt");
        }

        @TestMetadata("notOnlyReturnFieldBody.kt")
        public void testNotOnlyReturnFieldBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/notOnlyReturnFieldBody.kt");
        }

        @TestMetadata("onlyReturnFieldBody.kt")
        public void testOnlyReturnFieldBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/onlyReturnFieldBody.kt");
        }

        @TestMetadata("withAnnotaionAndNonTrivialBlockBody.kt")
        public void testWithAnnotaionAndNonTrivialBlockBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/withAnnotaionAndNonTrivialBlockBody.kt");
        }

        @TestMetadata("withAnnotaionAndTrivialBlockBody.kt")
        public void testWithAnnotaionAndTrivialBlockBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/withAnnotaionAndTrivialBlockBody.kt");
        }

        @TestMetadata("withAnnotaionAndTrivialExpressionBody.kt")
        public void testWithAnnotaionAndTrivialExpressionBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantGetter/withAnnotaionAndTrivialExpressionBody.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantReturnLabel")
    public static class RedundantReturnLabel extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inAnonymousFunction.kt")
        public void testInAnonymousFunction() throws Exception {
            runTest("../testData/inspectionsLocal/redundantReturnLabel/inAnonymousFunction.kt");
        }

        @TestMetadata("inFunction.kt")
        public void testInFunction() throws Exception {
            runTest("../testData/inspectionsLocal/redundantReturnLabel/inFunction.kt");
        }

        @TestMetadata("inFunction2.kt")
        public void testInFunction2() throws Exception {
            runTest("../testData/inspectionsLocal/redundantReturnLabel/inFunction2.kt");
        }

        @TestMetadata("inLambda.kt")
        public void testInLambda() throws Exception {
            runTest("../testData/inspectionsLocal/redundantReturnLabel/inLambda.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantSemicolon")
    public static class RedundantSemicolon extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("beforeAnnotationAndLambda.kt")
        public void testBeforeAnnotationAndLambda() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/beforeAnnotationAndLambda.kt");
        }

        @TestMetadata("beforeCommentAndLambda.kt")
        public void testBeforeCommentAndLambda() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/beforeCommentAndLambda.kt");
        }

        @TestMetadata("beforeKDocAndLambda.kt")
        public void testBeforeKDocAndLambda() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/beforeKDocAndLambda.kt");
        }

        @TestMetadata("betweenNullableTypeAndNotOperator.kt")
        public void testBetweenNullableTypeAndNotOperator() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenNullableTypeAndNotOperator.kt");
        }

        @TestMetadata("betweenSoftKeywordAndDeclaration.kt")
        public void testBetweenSoftKeywordAndDeclaration() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenSoftKeywordAndDeclaration.kt");
        }

        @TestMetadata("betweenSoftModifierKeywordAndDeclaration.kt")
        public void testBetweenSoftModifierKeywordAndDeclaration() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenSoftModifierKeywordAndDeclaration.kt");
        }

        @TestMetadata("betweenSoftModifierKeywordAndDeclaration2.kt")
        public void testBetweenSoftModifierKeywordAndDeclaration2() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenSoftModifierKeywordAndDeclaration2.kt");
        }

        @TestMetadata("betweenSoftModifierKeywordAndDeclaration3.kt")
        public void testBetweenSoftModifierKeywordAndDeclaration3() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenSoftModifierKeywordAndDeclaration3.kt");
        }

        @TestMetadata("betweenTypeAndNotOperator.kt")
        public void testBetweenTypeAndNotOperator() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/betweenTypeAndNotOperator.kt");
        }

        @TestMetadata("companionBeforeFun.kt")
        public void testCompanionBeforeFun() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionBeforeFun.kt");
        }

        @TestMetadata("companionBeforeInit.kt")
        public void testCompanionBeforeInit() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionBeforeInit.kt");
        }

        @TestMetadata("companionBeforePrivateFun.kt")
        public void testCompanionBeforePrivateFun() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionBeforePrivateFun.kt");
        }

        @TestMetadata("companionBeforeVal.kt")
        public void testCompanionBeforeVal() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionBeforeVal.kt");
        }

        @TestMetadata("companionInLast.kt")
        public void testCompanionInLast() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionInLast.kt");
        }

        @TestMetadata("companionWithBody.kt")
        public void testCompanionWithBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionWithBody.kt");
        }

        @TestMetadata("companionWithName.kt")
        public void testCompanionWithName() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/companionWithName.kt");
        }

        @TestMetadata("ifElse.kt")
        public void testIfElse() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/ifElse.kt");
        }

        @TestMetadata("startOfLine.kt")
        public void testStartOfLine() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/startOfLine.kt");
        }

        @TestMetadata("startOfLine2.kt")
        public void testStartOfLine2() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/startOfLine2.kt");
        }

        @TestMetadata("startOfLineBeforeFunctionReference.kt")
        public void testStartOfLineBeforeFunctionReference() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/startOfLineBeforeFunctionReference.kt");
        }

        @TestMetadata("startOfLineBeforeLambda.kt")
        public void testStartOfLineBeforeLambda() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSemicolon/startOfLineBeforeLambda.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantSetter")
    public static class RedundantSetter extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/annotation.kt");
        }

        @TestMetadata("blankBody.kt")
        public void testBlankBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/blankBody.kt");
        }

        @TestMetadata("default.kt")
        public void testDefault() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/default.kt");
        }

        @TestMetadata("lowerVisibility1.kt")
        public void testLowerVisibility1() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/lowerVisibility1.kt");
        }

        @TestMetadata("lowerVisibility2.kt")
        public void testLowerVisibility2() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/lowerVisibility2.kt");
        }

        @TestMetadata("lowerVisibility3.kt")
        public void testLowerVisibility3() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/lowerVisibility3.kt");
        }

        @TestMetadata("notOnlyFieldSetBody.kt")
        public void testNotOnlyFieldSetBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/notOnlyFieldSetBody.kt");
        }

        @TestMetadata("onlyFieldSetBody.kt")
        public void testOnlyFieldSetBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/onlyFieldSetBody.kt");
        }

        @TestMetadata("overrideBlankBody.kt")
        public void testOverrideBlankBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/overrideBlankBody.kt");
        }

        @TestMetadata("overrideDefault.kt")
        public void testOverrideDefault() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/overrideDefault.kt");
        }

        @TestMetadata("overrideNotOnlyFieldSetBody.kt")
        public void testOverrideNotOnlyFieldSetBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/overrideNotOnlyFieldSetBody.kt");
        }

        @TestMetadata("overrideOnlyFieldSetBody.kt")
        public void testOverrideOnlyFieldSetBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/overrideOnlyFieldSetBody.kt");
        }

        @TestMetadata("sameVisibility1.kt")
        public void testSameVisibility1() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/sameVisibility1.kt");
        }

        @TestMetadata("sameVisibility2.kt")
        public void testSameVisibility2() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/sameVisibility2.kt");
        }

        @TestMetadata("sameVisibility3.kt")
        public void testSameVisibility3() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/sameVisibility3.kt");
        }

        @TestMetadata("withAnnotaionAndNonTrivialBlockBody.kt")
        public void testWithAnnotaionAndNonTrivialBlockBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/withAnnotaionAndNonTrivialBlockBody.kt");
        }

        @TestMetadata("withAnnotaionAndTrivialBlockBody.kt")
        public void testWithAnnotaionAndTrivialBlockBody() throws Exception {
            runTest("../testData/inspectionsLocal/redundantSetter/withAnnotaionAndTrivialBlockBody.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/redundantValueArgument")
    public static class RedundantValueArgument extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constant.kt")
        public void testConstant() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/constant.kt");
        }

        @TestMetadata("constantQualified.kt")
        public void testConstantQualified() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/constantQualified.kt");
        }

        @TestMetadata("constructorCall.kt")
        public void testConstructorCall() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/constructorCall.kt");
        }

        @TestMetadata("differentValue.kt")
        public void testDifferentValue() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/differentValue.kt");
        }

        @TestMetadata("firstArgument.kt")
        public void testFirstArgument() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/firstArgument.kt");
        }

        @TestMetadata("namedArgument.kt")
        public void testNamedArgument() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/namedArgument.kt");
        }

        @TestMetadata("overridden.kt")
        public void testOverridden() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/overridden.kt");
        }

        @TestMetadata("secondArgument.kt")
        public void testSecondArgument() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/secondArgument.kt");
        }

        @TestMetadata("shuffledArguments.kt")
        public void testShuffledArguments() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/shuffledArguments.kt");
        }

        @TestMetadata("singleArgument.kt")
        public void testSingleArgument() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/singleArgument.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/vararg.kt");
        }

        @TestMetadata("varargDoubleSpread.kt")
        public void testVarargDoubleSpread() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/varargDoubleSpread.kt");
        }

        @TestMetadata("varargSpread.kt")
        public void testVarargSpread() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/varargSpread.kt");
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            runTest("../testData/inspectionsLocal/redundantValueArgument/variable.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/removeCurlyBracesFromTemplate")
    public static class RemoveCurlyBracesFromTemplate extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("necessaryBrackets1.kt")
        public void testNecessaryBrackets1() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/necessaryBrackets1.kt");
        }

        @TestMetadata("necessaryBrackets2.kt")
        public void testNecessaryBrackets2() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/necessaryBrackets2.kt");
        }

        @TestMetadata("necessaryBrackets3.kt")
        public void testNecessaryBrackets3() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/necessaryBrackets3.kt");
        }

        @TestMetadata("necessaryBrackets4.kt")
        public void testNecessaryBrackets4() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/necessaryBrackets4.kt");
        }

        @TestMetadata("necessaryBrackets5.kt")
        public void testNecessaryBrackets5() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/necessaryBrackets5.kt");
        }

        @TestMetadata("necessaryBrackets6.kt")
        public void testNecessaryBrackets6() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/necessaryBrackets6.kt");
        }

        @TestMetadata("necessaryBrackets7.kt")
        public void testNecessaryBrackets7() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/necessaryBrackets7.kt");
        }

        @TestMetadata("necessaryBrackets8.kt")
        public void testNecessaryBrackets8() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/necessaryBrackets8.kt");
        }

        @TestMetadata("unnecessaryBrackets1.kt")
        public void testUnnecessaryBrackets1() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/unnecessaryBrackets1.kt");
        }

        @TestMetadata("unnecessaryBrackets2.kt")
        public void testUnnecessaryBrackets2() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/unnecessaryBrackets2.kt");
        }

        @TestMetadata("unnecessaryBrackets3.kt")
        public void testUnnecessaryBrackets3() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/unnecessaryBrackets3.kt");
        }

        @TestMetadata("unnecessaryBrackets4.kt")
        public void testUnnecessaryBrackets4() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/unnecessaryBrackets4.kt");
        }

        @TestMetadata("unnecessaryBrackets5.kt")
        public void testUnnecessaryBrackets5() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/unnecessaryBrackets5.kt");
        }

        @TestMetadata("unnecessaryBrackets6.kt")
        public void testUnnecessaryBrackets6() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/unnecessaryBrackets6.kt");
        }

        @TestMetadata("unnecessaryBrackets7.kt")
        public void testUnnecessaryBrackets7() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/unnecessaryBrackets7.kt");
        }

        @TestMetadata("unnecessaryBrackets8.kt")
        public void testUnnecessaryBrackets8() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/unnecessaryBrackets8.kt");
        }

        @TestMetadata("unnecessaryBrackets9.kt")
        public void testUnnecessaryBrackets9() throws Exception {
            runTest("../testData/inspectionsLocal/removeCurlyBracesFromTemplate/unnecessaryBrackets9.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/removeEmptyClassBody")
    public static class RemoveEmptyClassBody extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("anonymousInterfaceObject.kt")
        public void testAnonymousInterfaceObject() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/anonymousInterfaceObject.kt");
        }

        @TestMetadata("anonymousObject.kt")
        public void testAnonymousObject() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/anonymousObject.kt");
        }

        @TestMetadata("companionBeforeFun.kt")
        public void testCompanionBeforeFun() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/companionBeforeFun.kt");
        }

        @TestMetadata("companionBeforeInit.kt")
        public void testCompanionBeforeInit() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/companionBeforeInit.kt");
        }

        @TestMetadata("companionBeforePrivateFun.kt")
        public void testCompanionBeforePrivateFun() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/companionBeforePrivateFun.kt");
        }

        @TestMetadata("companionBeforeVal.kt")
        public void testCompanionBeforeVal() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/companionBeforeVal.kt");
        }

        @TestMetadata("companionInLast.kt")
        public void testCompanionInLast() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/companionInLast.kt");
        }

        @TestMetadata("companionWithName.kt")
        public void testCompanionWithName() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/companionWithName.kt");
        }

        @TestMetadata("companionWithSemicolon.kt")
        public void testCompanionWithSemicolon() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/companionWithSemicolon.kt");
        }

        @TestMetadata("emptyClass.kt")
        public void testEmptyClass() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/emptyClass.kt");
        }

        @TestMetadata("emptyDataClass.kt")
        public void testEmptyDataClass() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/emptyDataClass.kt");
        }

        @TestMetadata("emptyInterface.kt")
        public void testEmptyInterface() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/emptyInterface.kt");
        }

        @TestMetadata("enumEntry.kt")
        public void testEnumEntry() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/enumEntry.kt");
        }

        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/innerClass.kt");
        }

        @TestMetadata("lastEnumEntry.kt")
        public void testLastEnumEntry() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/lastEnumEntry.kt");
        }

        @TestMetadata("lastEnumEntry2.kt")
        public void testLastEnumEntry2() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/lastEnumEntry2.kt");
        }

        @TestMetadata("lastEnumEntry3.kt")
        public void testLastEnumEntry3() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/lastEnumEntry3.kt");
        }

        @TestMetadata("nestedAnonymous.kt")
        public void testNestedAnonymous() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/nestedAnonymous.kt");
        }

        @TestMetadata("nestedClassFollowedByFunction.kt")
        public void testNestedClassFollowedByFunction() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/nestedClassFollowedByFunction.kt");
        }

        @TestMetadata("nestedClassFollowedByMember.kt")
        public void testNestedClassFollowedByMember() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/nestedClassFollowedByMember.kt");
        }

        @TestMetadata("nestedClassFollowedBySecondaryConstructor.kt")
        public void testNestedClassFollowedBySecondaryConstructor() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/nestedClassFollowedBySecondaryConstructor.kt");
        }

        @TestMetadata("nestedClassFollowedBySecondaryConstructor2.kt")
        public void testNestedClassFollowedBySecondaryConstructor2() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/nestedClassFollowedBySecondaryConstructor2.kt");
        }

        @TestMetadata("noneEmptyClass.kt")
        public void testNoneEmptyClass() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/noneEmptyClass.kt");
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyClassBody/object.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall")
    public static class RemoveEmptyParenthesesFromLambdaCall extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("afterLambda.kt")
        public void testAfterLambda() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall/afterLambda.kt");
        }

        @TestMetadata("afterLambda2.kt")
        public void testAfterLambda2() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall/afterLambda2.kt");
        }

        @TestMetadata("afterLambda3.kt")
        public void testAfterLambda3() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall/afterLambda3.kt");
        }

        @TestMetadata("afterLambda4.kt")
        public void testAfterLambda4() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall/afterLambda4.kt");
        }

        @TestMetadata("afterLambda5.kt")
        public void testAfterLambda5() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall/afterLambda5.kt");
        }

        @TestMetadata("afterLambda6.kt")
        public void testAfterLambda6() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall/afterLambda6.kt");
        }

        @TestMetadata("nextLine.kt")
        public void testNextLine() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall/nextLine.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall/simple.kt");
        }

        @TestMetadata("suspend.kt")
        public void testSuspend() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptyParenthesesFromLambdaCall/suspend.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody")
    public static class RemoveEmptySecondaryConstructorBody extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody/comment.kt");
        }

        @TestMetadata("primaryConstructor.kt")
        public void testPrimaryConstructor() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody/primaryConstructor.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody/simple.kt");
        }

        @TestMetadata("withStatement.kt")
        public void testWithStatement() throws Exception {
            runTest("../testData/inspectionsLocal/removeEmptySecondaryConstructorBody/withStatement.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/removeRedundantBackticks")
    public static class RemoveRedundantBackticks extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("functionArgument.kt")
        public void testFunctionArgument() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/functionArgument.kt");
        }

        @TestMetadata("functionCall.kt")
        public void testFunctionCall() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/functionCall.kt");
        }

        @TestMetadata("identifierContainingSpaces.kt")
        public void testIdentifierContainingSpaces() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/identifierContainingSpaces.kt");
        }

        @TestMetadata("inStringTemplate.kt")
        public void testInStringTemplate() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/inStringTemplate.kt");
        }

        @TestMetadata("inStringTemplate2.kt")
        public void testInStringTemplate2() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/inStringTemplate2.kt");
        }

        @TestMetadata("inStringTemplate3.kt")
        public void testInStringTemplate3() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/inStringTemplate3.kt");
        }

        @TestMetadata("keyword.kt")
        public void testKeyword() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/keyword.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/property.kt");
        }

        @TestMetadata("underscores.kt")
        public void testUnderscores() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/underscores.kt");
        }

        @TestMetadata("underscores2.kt")
        public void testUnderscores2() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/underscores2.kt");
        }

        @TestMetadata("yield.kt")
        public void testYield() throws Exception {
            runTest("../testData/inspectionsLocal/removeRedundantBackticks/yield.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/removeSetterParameterType")
    public static class RemoveSetterParameterType extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("emptyType.kt")
        public void testEmptyType() throws Exception {
            runTest("../testData/inspectionsLocal/removeSetterParameterType/emptyType.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/inspectionsLocal/removeSetterParameterType/simple.kt");
        }

        @TestMetadata("simple2.kt")
        public void testSimple2() throws Exception {
            runTest("../testData/inspectionsLocal/removeSetterParameterType/simple2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/simplifyNegatedBinaryExpression")
    public static class SimplifyNegatedBinaryExpression extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/equals.kt");
        }

        @TestMetadata("greaterThan.kt")
        public void testGreaterThan() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/greaterThan.kt");
        }

        @TestMetadata("greaterThanOrEquals.kt")
        public void testGreaterThanOrEquals() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/greaterThanOrEquals.kt");
        }

        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/in.kt");
        }

        @TestMetadata("inapplicableBinaryOperation.kt")
        public void testInapplicableBinaryOperation() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/inapplicableBinaryOperation.kt");
        }

        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/is.kt");
        }

        @TestMetadata("lessThan.kt")
        public void testLessThan() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/lessThan.kt");
        }

        @TestMetadata("lessThanFloatingPoint.kt")
        public void testLessThanFloatingPoint() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/lessThanFloatingPoint.kt");
        }

        @TestMetadata("lessThanOrEquals.kt")
        public void testLessThanOrEquals() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/lessThanOrEquals.kt");
        }

        @TestMetadata("notEquals.kt")
        public void testNotEquals() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/notEquals.kt");
        }

        @TestMetadata("notIn.kt")
        public void testNotIn() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/notIn.kt");
        }

        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/notIs.kt");
        }

        @TestMetadata("simpleInvert.kt")
        public void testSimpleInvert() throws Exception {
            runTest("../testData/inspectionsLocal/simplifyNegatedBinaryExpression/simpleInvert.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/sortModifiers")
    public static class SortModifiers extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotatedBefore.kt")
        public void testAnnotatedBefore() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotatedBefore.kt");
        }

        @TestMetadata("annotatedBefore2.kt")
        public void testAnnotatedBefore2() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotatedBefore2.kt");
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotation.kt");
        }

        @TestMetadata("annotation2.kt")
        public void testAnnotation2() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotation2.kt");
        }

        @TestMetadata("annotationGroup.kt")
        public void testAnnotationGroup() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotationGroup.kt");
        }

        @TestMetadata("annotationOverrideFinal.kt")
        public void testAnnotationOverrideFinal() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/annotationOverrideFinal.kt");
        }

        @TestMetadata("overrideFinal.kt")
        public void testOverrideFinal() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/overrideFinal.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/inspectionsLocal/sortModifiers/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/trailingComma")
    public static class TrailingComma extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addComma.kt")
        public void testAddComma() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/addComma.kt");
        }

        @TestMetadata("addComma2.kt")
        public void testAddComma2() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/addComma2.kt");
        }

        @TestMetadata("addComma3.kt")
        public void testAddComma3() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/addComma3.kt");
        }

        @TestMetadata("addComma4.kt")
        public void testAddComma4() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/addComma4.kt");
        }

        @TestMetadata("addComma5.kt")
        public void testAddComma5() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/addComma5.kt");
        }

        @TestMetadata("addComma6.kt")
        public void testAddComma6() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/addComma6.kt");
        }

        @TestMetadata("changeCommaPosition.kt")
        public void testChangeCommaPosition() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/changeCommaPosition.kt");
        }

        @TestMetadata("changeCommaPosition2.kt")
        public void testChangeCommaPosition2() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/changeCommaPosition2.kt");
        }

        @TestMetadata("changeCommaPosition3.kt")
        public void testChangeCommaPosition3() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/changeCommaPosition3.kt");
        }

        @TestMetadata("changeCommaPosition4.kt")
        public void testChangeCommaPosition4() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/changeCommaPosition4.kt");
        }

        @TestMetadata("changeCommaPosition5.kt")
        public void testChangeCommaPosition5() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/changeCommaPosition5.kt");
        }

        @TestMetadata("destructuringDeclarations.kt")
        public void testDestructuringDeclarations() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/destructuringDeclarations.kt");
        }

        @TestMetadata("destructuringDeclarationsInLambda.kt")
        public void testDestructuringDeclarationsInLambda() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/destructuringDeclarationsInLambda.kt");
        }

        @TestMetadata("functionArguments.kt")
        public void testFunctionArguments() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/functionArguments.kt");
        }

        @TestMetadata("indices.kt")
        public void testIndices() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/indices.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/inner.kt");
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/lambda.kt");
        }

        @TestMetadata("literal.kt")
        public void testLiteral() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/literal.kt");
        }

        @TestMetadata("missingLineBreak.kt")
        public void testMissingLineBreak() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/missingLineBreak.kt");
        }

        @TestMetadata("missingLineBreak2.kt")
        public void testMissingLineBreak2() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/missingLineBreak2.kt");
        }

        @TestMetadata("missingLineBreak3.kt")
        public void testMissingLineBreak3() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/missingLineBreak3.kt");
        }

        @TestMetadata("removeComma.kt")
        public void testRemoveComma() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/removeComma.kt");
        }

        @TestMetadata("removeComma2.kt")
        public void testRemoveComma2() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/removeComma2.kt");
        }

        @TestMetadata("removeComma3.kt")
        public void testRemoveComma3() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/removeComma3.kt");
        }

        @TestMetadata("removeComma4.kt")
        public void testRemoveComma4() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/removeComma4.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/simple.kt");
        }

        @TestMetadata("typeArguments.kt")
        public void testTypeArguments() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/typeArguments.kt");
        }

        @TestMetadata("typeParameters.kt")
        public void testTypeParameters() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/typeParameters.kt");
        }

        @TestMetadata("whenEntry.kt")
        public void testWhenEntry() throws Exception {
            runTest("../testData/inspectionsLocal/trailingComma/whenEntry.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/inspectionsLocal/wrapUnaryOperator")
    public static class WrapUnaryOperator extends AbstractSharedK1LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/inspectionsLocal/wrapUnaryOperator/simple.kt");
        }
    }
}
