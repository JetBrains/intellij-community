// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/kotlin.code-insight.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../idea/tests/testData/codeInsight/breadcrumbs")
public class KotlinFirBreadcrumbsTestGenerated extends AbstractKotlinFirBreadcrumbsTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("AnonymousObjects.kt")
    public void testAnonymousObjects() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/AnonymousObjects.kt");
    }

    @TestMetadata("Declarations.kt")
    public void testDeclarations() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/Declarations.kt");
    }

    @TestMetadata("For.kt")
    public void testFor() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/For.kt");
    }

    @TestMetadata("FunctionalType.kt")
    public void testFunctionalType() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/FunctionalType.kt");
    }

    @TestMetadata("If.kt")
    public void testIf() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/If.kt");
    }

    @TestMetadata("LabeledStatements.kt")
    public void testLabeledStatements() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/LabeledStatements.kt");
    }

    @TestMetadata("Lambdas.kt")
    public void testLambdas() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/Lambdas.kt");
    }

    @TestMetadata("OnIfCondition.kt")
    public void testOnIfCondition() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/OnIfCondition.kt");
    }

    @TestMetadata("OnWhenEntryCondition.kt")
    public void testOnWhenEntryCondition() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/OnWhenEntryCondition.kt");
    }

    @TestMetadata("PropertyAccessor.kt")
    public void testPropertyAccessor() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/PropertyAccessor.kt");
    }

    @TestMetadata("StarProjection.kt")
    public void testStarProjection() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/StarProjection.kt");
    }

    @TestMetadata("Try.kt")
    public void testTry() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/Try.kt");
    }

    @TestMetadata("When.kt")
    public void testWhen() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/When.kt");
    }

    @TestMetadata("While.kt")
    public void testWhile() throws Exception {
        runTest("../../idea/tests/testData/codeInsight/breadcrumbs/While.kt");
    }
}
