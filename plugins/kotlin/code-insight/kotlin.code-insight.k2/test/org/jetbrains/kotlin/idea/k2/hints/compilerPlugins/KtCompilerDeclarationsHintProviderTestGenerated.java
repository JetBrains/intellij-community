// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.hints.compilerPlugins;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/kotlin.code-insight.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/hints/compilerPlugins/declarations")
public abstract class KtCompilerDeclarationsHintProviderTestGenerated extends AbstractKtCompilerDeclarationsHintProviderTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/hints/compilerPlugins/declarations/serialization")
    public static class Serialization extends AbstractKtCompilerDeclarationsHintProviderTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("differentClassKinds.kt")
        public void testDifferentClassKinds() throws Exception {
            runTest("testData/hints/compilerPlugins/declarations/serialization/differentClassKinds.kt");
        }

        @TestMetadata("formatting.kt")
        public void testFormatting() throws Exception {
            runTest("testData/hints/compilerPlugins/declarations/serialization/formatting.kt");
        }

        @TestMetadata("noBody.kt")
        public void testNoBody() throws Exception {
            runTest("testData/hints/compilerPlugins/declarations/serialization/noBody.kt");
        }

        @TestMetadata("serializer.kt")
        public void testSerializer() throws Exception {
            runTest("testData/hints/compilerPlugins/declarations/serialization/serializer.kt");
        }

        @TestMetadata("withBody.kt")
        public void testWithBody() throws Exception {
            runTest("testData/hints/compilerPlugins/declarations/serialization/withBody.kt");
        }

        @TestMetadata("withBodyOnTheSameLine.kt")
        public void testWithBodyOnTheSameLine() throws Exception {
            runTest("testData/hints/compilerPlugins/declarations/serialization/withBodyOnTheSameLine.kt");
        }

        @TestMetadata("withExistingCompanion.kt")
        public void testWithExistingCompanion() throws Exception {
            runTest("testData/hints/compilerPlugins/declarations/serialization/withExistingCompanion.kt");
        }

        @TestMetadata("withHiddenMembers.kt")
        public void testWithHiddenMembers() throws Exception {
            runTest("testData/hints/compilerPlugins/declarations/serialization/withHiddenMembers.kt");
        }
    }
}
