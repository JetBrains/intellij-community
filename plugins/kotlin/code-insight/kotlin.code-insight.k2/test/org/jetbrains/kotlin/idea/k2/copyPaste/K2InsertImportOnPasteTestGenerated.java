// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.copyPaste;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/kotlin.code-insight.k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2InsertImportOnPasteTestGenerated extends AbstractK2InsertImportOnPasteTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/copyPaste/imports")
    public abstract static class Copy extends AbstractK2InsertImportOnPasteTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/copyPaste/imports")
        public static class Uncategorized extends AbstractK2InsertImportOnPasteTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTestCopy, this, testDataFilePath);
            }

            @TestMetadata("AddStarImport.kt")
            public void testAddStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AddStarImport.kt");
            }

            @TestMetadata("AlreadyImportedExtensions.kt")
            public void testAlreadyImportedExtensions() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AlreadyImportedExtensions.kt");
            }

            @TestMetadata("AlreadyImportedExtensions2.kt")
            public void testAlreadyImportedExtensions2() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AlreadyImportedExtensions2.kt");
            }

            @TestMetadata("AlreadyImportedViaStar.kt")
            public void testAlreadyImportedViaStar() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AlreadyImportedViaStar.kt");
            }

            @TestMetadata("AlreadyImportedViaStarWithOuter.kt")
            public void testAlreadyImportedViaStarWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AlreadyImportedViaStarWithOuter.kt");
            }

            @TestMetadata("AmbiguityError.kt")
            public void testAmbiguityError() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AmbiguityError.kt");
            }

            @TestMetadata("ClassAlreadyImported.kt")
            public void testClassAlreadyImported() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassAlreadyImported.kt");
            }

            @TestMetadata("ClassMember.kt")
            public void testClassMember() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassMember.kt");
            }

            @TestMetadata("ClassObject.kt")
            public void testClassObject() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObject.kt");
            }

            @TestMetadata("ClassObjectAndDropImports.kt")
            public void testClassObjectAndDropImports() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObjectAndDropImports.kt");
            }

            @TestMetadata("ClassObjectFunInsideClass.kt")
            public void testClassObjectFunInsideClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObjectFunInsideClass.kt");
            }

            @TestMetadata("ClassObjectInner.kt")
            public void testClassObjectInner() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObjectInner.kt");
            }

            @TestMetadata("ClassObjectInnerWithOuter.kt")
            public void testClassObjectInnerWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObjectInnerWithOuter.kt");
            }

            @TestMetadata("ClassResolvedToPackage.kt")
            public void testClassResolvedToPackage() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassResolvedToPackage.kt");
            }

            @TestMetadata("ClassType.kt")
            public void testClassType() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassType.kt");
            }

            @TestMetadata("ClassWithDoc.kt")
            public void testClassWithDoc() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassWithDoc.kt");
            }

            @TestMetadata("CodeFragment.kt")
            public void testCodeFragment() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/CodeFragment.kt");
            }

            @TestMetadata("Constructor.kt")
            public void testConstructor() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Constructor.kt");
            }

            @TestMetadata("DeepInnerClasses.kt")
            public void testDeepInnerClasses() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DeepInnerClasses.kt");
            }

            @TestMetadata("DeepInnerClassesWithOuter.kt")
            public void testDeepInnerClassesWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DeepInnerClassesWithOuter.kt");
            }

            @TestMetadata("DefaultPackage.kt")
            public void testDefaultPackage() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DefaultPackage.kt");
            }

            @TestMetadata("DelegatedProperty.kt")
            public void testDelegatedProperty() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DelegatedProperty.kt");
            }

            @TestMetadata("DependenciesNotAccessibleOnPaste.kt")
            public void testDependenciesNotAccessibleOnPaste() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependenciesNotAccessibleOnPaste.kt");
            }

            @TestMetadata("DependencyOnJava.kt")
            public void testDependencyOnJava() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependencyOnJava.kt");
            }

            @TestMetadata("DependencyOnKotlinLibrary.kt")
            public void testDependencyOnKotlinLibrary() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependencyOnKotlinLibrary.kt");
            }

            @TestMetadata("DependencyOnKotlinLibraryWithOuter.kt")
            public void testDependencyOnKotlinLibraryWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependencyOnKotlinLibraryWithOuter.kt");
            }

            @TestMetadata("DependencyOnStdLib.kt")
            public void testDependencyOnStdLib() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependencyOnStdLib.kt");
            }

            @TestMetadata("EntireFile.kt")
            public void testEntireFile() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/EntireFile.kt");
            }

            @TestMetadata("EnumEntries.kt")
            public void testEnumEntries() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/EnumEntries.kt");
            }

            @TestMetadata("EnumEntriesWithOuter.kt")
            public void testEnumEntriesWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/EnumEntriesWithOuter.kt");
            }

            @TestMetadata("EnumMember.kt")
            public void testEnumMember() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/EnumMember.kt");
            }

            @TestMetadata("Extension.kt")
            public void testExtension() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Extension.kt");
            }

            @TestMetadata("ExtensionAndFunctionSameNameTypeArgs.kt")
            public void testExtensionAndFunctionSameNameTypeArgs() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ExtensionAndFunctionSameNameTypeArgs.kt");
            }

            @TestMetadata("ForLoop.kt")
            public void testForLoop() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ForLoop.kt");
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/FullyQualified.kt");
            }

            @TestMetadata("Function.kt")
            public void testFunction() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Function.kt");
            }

            @TestMetadata("FunctionAlreadyImported.kt")
            public void testFunctionAlreadyImported() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/FunctionAlreadyImported.kt");
            }

            @TestMetadata("FunctionParameter.kt")
            public void testFunctionParameter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/FunctionParameter.kt");
            }

            @TestMetadata("FunctionToImportContainsSelectedClass.kt")
            public void testFunctionToImportContainsSelectedClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/FunctionToImportContainsSelectedClass.kt");
            }

            @TestMetadata("GetExpression.kt")
            public void testGetExpression() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/GetExpression.kt");
            }

            @TestMetadata("ImportDependency.kt")
            public void testImportDependency() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportDependency.kt");
            }

            @TestMetadata("ImportDependencyWithOuter.kt")
            public void testImportDependencyWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportDependencyWithOuter.kt");
            }

            @TestMetadata("ImportDirective.kt")
            public void testImportDirective() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportDirective.kt");
            }

            @TestMetadata("ImportDirectiveAndClassBody.kt")
            public void testImportDirectiveAndClassBody() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportDirectiveAndClassBody.kt");
            }

            @TestMetadata("ImportableEntityInExtensionLiteral.kt")
            public void testImportableEntityInExtensionLiteral() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportableEntityInExtensionLiteral.kt");
            }

            @TestMetadata("ImportableEntityInExtensionLiteralWithOuter.kt")
            public void testImportableEntityInExtensionLiteralWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportableEntityInExtensionLiteralWithOuter.kt");
            }

            @TestMetadata("ImportedElementCopied.kt")
            public void testImportedElementCopied() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportedElementCopied.kt");
            }

            @TestMetadata("ImportedInSourceWithStarImport.kt")
            public void testImportedInSourceWithStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportedInSourceWithStarImport.kt");
            }

            @TestMetadata("Inner.kt")
            public void testInner() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Inner.kt");
            }

            @TestMetadata("InnerWithOuter.kt")
            public void testInnerWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/InnerWithOuter.kt");
            }

            @TestMetadata("Interface.kt")
            public void testInterface() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Interface.kt");
            }

            @TestMetadata("Invoke.kt")
            public void testInvoke() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Invoke.kt");
            }

            @TestMetadata("JavaStaticViaClass.kt")
            public void testJavaStaticViaClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/JavaStaticViaClass.kt");
            }

            @TestMetadata("KT10433.kt")
            public void testKT10433() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/KT10433.kt");
            }

            @TestMetadata("KeywordClassName.kt")
            public void testKeywordClassName() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/KeywordClassName.kt");
            }

            @TestMetadata("Local.kt")
            public void testLocal() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Local.kt");
            }

            @TestMetadata("MissingClass.kt")
            public void testMissingClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MissingClass.kt");
            }

            @TestMetadata("MultiCaretSelection.kt")
            public void testMultiCaretSelection() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MultiCaretSelection.kt");
            }

            @TestMetadata("MultiCaretSelectionEntireFile.kt")
            public void testMultiCaretSelectionEntireFile() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MultiCaretSelectionEntireFile.kt");
            }

            @TestMetadata("MultiDeclaration.kt")
            public void testMultiDeclaration() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MultiDeclaration.kt");
            }

            @TestMetadata("MultiReferencePartiallyCopied.kt")
            public void testMultiReferencePartiallyCopied() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MultiReferencePartiallyCopied.kt");
            }

            @TestMetadata("NoImportForBuiltIns.kt")
            public void testNoImportForBuiltIns() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NoImportForBuiltIns.kt");
            }

            @TestMetadata("NoImportForSamePackage.kt")
            public void testNoImportForSamePackage() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NoImportForSamePackage.kt");
            }

            @TestMetadata("NoImportForSamePackageWithOuter.kt")
            public void testNoImportForSamePackageWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NoImportForSamePackageWithOuter.kt");
            }

            @TestMetadata("NotReferencePosition.kt")
            public void testNotReferencePosition() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NotReferencePosition.kt");
            }

            @TestMetadata("NotReferencePosition2.kt")
            public void testNotReferencePosition2() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NotReferencePosition2.kt");
            }

            @TestMetadata("Object.kt")
            public void testObject() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Object.kt");
            }

            @TestMetadata("OnlyKDocReferenced.kt")
            public void testOnlyKDocReferenced() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/OnlyKDocReferenced.kt");
            }

            @TestMetadata("OverloadedExtensionFunction.kt")
            public void testOverloadedExtensionFunction() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/OverloadedExtensionFunction.kt");
            }

            @TestMetadata("PackageView.kt")
            public void testPackageView() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/PackageView.kt");
            }

            @TestMetadata("PartiallyQualified.kt")
            public void testPartiallyQualified() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/PartiallyQualified.kt");
            }

            @TestMetadata("PartiallySelectedBlock.kt")
            public void testPartiallySelectedBlock() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/PartiallySelectedBlock.kt");
            }

            @TestMetadata("ReferencedElementAlsoCopied.kt")
            public void testReferencedElementAlsoCopied() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ReferencedElementAlsoCopied.kt");
            }

            @TestMetadata("StringTemplateKTIJ9042.kt")
            public void testStringTemplateKTIJ9042() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateKTIJ9042.kt");
            }

            @TestMetadata("StringTemplateMultipleImports.kt")
            public void testStringTemplateMultipleImports() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateMultipleImports.kt");
            }

            @TestMetadata("StringTemplateMultipleImportsCurlyBraces.kt")
            public void testStringTemplateMultipleImportsCurlyBraces() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateMultipleImportsCurlyBraces.kt");
            }

            @TestMetadata("StringTemplateMultipleImportsQualified.kt")
            public void testStringTemplateMultipleImportsQualified() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateMultipleImportsQualified.kt");
            }

            @TestMetadata("StringTemplateMultipleWithFunctionCall.kt")
            public void testStringTemplateMultipleWithFunctionCall() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateMultipleWithFunctionCall.kt");
            }

            @TestMetadata("Super.kt")
            public void testSuper() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Super.kt");
            }

            @TestMetadata("ThisReference.kt")
            public void testThisReference() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ThisReference.kt");
            }

            @TestMetadata("TopLevelCallableRef.kt")
            public void testTopLevelCallableRef() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelCallableRef.kt");
            }

            @TestMetadata("TopLevelExtensionCallableRefWithExpressionLHS.kt")
            public void testTopLevelExtensionCallableRefWithExpressionLHS() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelExtensionCallableRefWithExpressionLHS.kt");
            }

            @TestMetadata("TopLevelExtensionCallableRefWithTypeLHS.kt")
            public void testTopLevelExtensionCallableRefWithTypeLHS() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelExtensionCallableRefWithTypeLHS.kt");
            }

            @TestMetadata("TopLevelMemberCallableRefWithExpressionLHS.kt")
            public void testTopLevelMemberCallableRefWithExpressionLHS() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelMemberCallableRefWithExpressionLHS.kt");
            }

            @TestMetadata("TopLevelMemberCallableRefWithTypeLHS.kt")
            public void testTopLevelMemberCallableRefWithTypeLHS() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelMemberCallableRefWithTypeLHS.kt");
            }

            @TestMetadata("TopLevelProperty.kt")
            public void testTopLevelProperty() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelProperty.kt");
            }

            @TestMetadata("TypeArgForUnresolvedCall.kt")
            public void testTypeArgForUnresolvedCall() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TypeArgForUnresolvedCall.kt");
            }

            @TestMetadata("TypeArgNestedClass.kt")
            public void testTypeArgNestedClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TypeArgNestedClass.kt");
            }

            @TestMetadata("TypeArgNestedClassImported.kt")
            public void testTypeArgNestedClassImported() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TypeArgNestedClassImported.kt");
            }

            @TestMetadata("TypeParameter.kt")
            public void testTypeParameter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TypeParameter.kt");
            }

            @TestMetadata("UnresolvedOverload.kt")
            public void testUnresolvedOverload() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/UnresolvedOverload.kt");
            }

            @TestMetadata("VariableCalls.kt")
            public void testVariableCalls() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/VariableCalls.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/copyPaste/imports/withConflict")
        public static class WithConflict extends AbstractK2InsertImportOnPasteTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTestCopy, this, testDataFilePath);
            }

            @TestMetadata("AmbiguityError.kt")
            public void testAmbiguityError() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/AmbiguityError.kt");
            }

            @TestMetadata("ArrayAccess.kt")
            public void testArrayAccess() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ArrayAccess.kt");
            }

            @TestMetadata("ConflictExplicitImport.kt")
            public void testConflictExplicitImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictExplicitImport.kt");
            }

            @TestMetadata("ConflictForTypeWithTypeParameter.kt")
            public void testConflictForTypeWithTypeParameter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictForTypeWithTypeParameter.kt");
            }

            @TestMetadata("ConflictLocal.kt")
            public void testConflictLocal() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictLocal.kt");
            }

            @TestMetadata("ConflictPackageDoNotUseStarImport.kt")
            public void testConflictPackageDoNotUseStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictPackageDoNotUseStarImport.kt");
            }

            @TestMetadata("ConflictWithClass.kt")
            public void testConflictWithClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictWithClass.kt");
            }

            @TestMetadata("ConflictsExplicitImportDoNotUseStarImport.kt")
            public void testConflictsExplicitImportDoNotUseStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictsExplicitImportDoNotUseStarImport.kt");
            }

            @TestMetadata("ConflictsExplicitStarImport.kt")
            public void testConflictsExplicitStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictsExplicitStarImport.kt");
            }

            @TestMetadata("ExtensionAsInfixOrOperator.kt")
            public void testExtensionAsInfixOrOperator() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ExtensionAsInfixOrOperator.kt");
            }

            @TestMetadata("ExtensionCannotBeImportedOrLengthened.kt")
            public void testExtensionCannotBeImportedOrLengthened() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ExtensionCannotBeImportedOrLengthened.kt");
            }

            @TestMetadata("ExtensionConflict.kt")
            public void testExtensionConflict() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ExtensionConflict.kt");
            }

            @TestMetadata("MultiReferenceConflict.kt")
            public void testMultiReferenceConflict() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/MultiReferenceConflict.kt");
            }

            @TestMetadata("OperatorFunction.kt")
            public void testOperatorFunction() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/OperatorFunction.kt");
            }

            @TestMetadata("OperatorFunctionWithOuter.kt")
            public void testOperatorFunctionWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/OperatorFunctionWithOuter.kt");
            }

            @TestMetadata("QualifiedTypeConflict.kt")
            public void testQualifiedTypeConflict() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/QualifiedTypeConflict.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../idea/tests/testData/copyPaste/imports")
    public abstract static class Cut extends AbstractK2InsertImportOnPasteTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/copyPaste/imports")
        public static class Uncategorized extends AbstractK2InsertImportOnPasteTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTestCut, this, testDataFilePath);
            }

            @TestMetadata("AddStarImport.kt")
            public void testAddStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AddStarImport.kt");
            }

            @TestMetadata("AlreadyImportedExtensions.kt")
            public void testAlreadyImportedExtensions() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AlreadyImportedExtensions.kt");
            }

            @TestMetadata("AlreadyImportedExtensions2.kt")
            public void testAlreadyImportedExtensions2() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AlreadyImportedExtensions2.kt");
            }

            @TestMetadata("AlreadyImportedViaStar.kt")
            public void testAlreadyImportedViaStar() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AlreadyImportedViaStar.kt");
            }

            @TestMetadata("AlreadyImportedViaStarWithOuter.kt")
            public void testAlreadyImportedViaStarWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AlreadyImportedViaStarWithOuter.kt");
            }

            @TestMetadata("AmbiguityError.kt")
            public void testAmbiguityError() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/AmbiguityError.kt");
            }

            @TestMetadata("ClassAlreadyImported.kt")
            public void testClassAlreadyImported() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassAlreadyImported.kt");
            }

            @TestMetadata("ClassMember.kt")
            public void testClassMember() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassMember.kt");
            }

            @TestMetadata("ClassObject.kt")
            public void testClassObject() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObject.kt");
            }

            @TestMetadata("ClassObjectAndDropImports.kt")
            public void testClassObjectAndDropImports() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObjectAndDropImports.kt");
            }

            @TestMetadata("ClassObjectFunInsideClass.kt")
            public void testClassObjectFunInsideClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObjectFunInsideClass.kt");
            }

            @TestMetadata("ClassObjectInner.kt")
            public void testClassObjectInner() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObjectInner.kt");
            }

            @TestMetadata("ClassObjectInnerWithOuter.kt")
            public void testClassObjectInnerWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassObjectInnerWithOuter.kt");
            }

            @TestMetadata("ClassResolvedToPackage.kt")
            public void testClassResolvedToPackage() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassResolvedToPackage.kt");
            }

            @TestMetadata("ClassType.kt")
            public void testClassType() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassType.kt");
            }

            @TestMetadata("ClassWithDoc.kt")
            public void testClassWithDoc() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ClassWithDoc.kt");
            }

            @TestMetadata("CodeFragment.kt")
            public void testCodeFragment() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/CodeFragment.kt");
            }

            @TestMetadata("Constructor.kt")
            public void testConstructor() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Constructor.kt");
            }

            @TestMetadata("DeepInnerClasses.kt")
            public void testDeepInnerClasses() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DeepInnerClasses.kt");
            }

            @TestMetadata("DeepInnerClassesWithOuter.kt")
            public void testDeepInnerClassesWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DeepInnerClassesWithOuter.kt");
            }

            @TestMetadata("DefaultPackage.kt")
            public void testDefaultPackage() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DefaultPackage.kt");
            }

            @TestMetadata("DelegatedProperty.kt")
            public void testDelegatedProperty() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DelegatedProperty.kt");
            }

            @TestMetadata("DependenciesNotAccessibleOnPaste.kt")
            public void testDependenciesNotAccessibleOnPaste() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependenciesNotAccessibleOnPaste.kt");
            }

            @TestMetadata("DependencyOnJava.kt")
            public void testDependencyOnJava() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependencyOnJava.kt");
            }

            @TestMetadata("DependencyOnKotlinLibrary.kt")
            public void testDependencyOnKotlinLibrary() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependencyOnKotlinLibrary.kt");
            }

            @TestMetadata("DependencyOnKotlinLibraryWithOuter.kt")
            public void testDependencyOnKotlinLibraryWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependencyOnKotlinLibraryWithOuter.kt");
            }

            @TestMetadata("DependencyOnStdLib.kt")
            public void testDependencyOnStdLib() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/DependencyOnStdLib.kt");
            }

            @TestMetadata("EntireFile.kt")
            public void testEntireFile() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/EntireFile.kt");
            }

            @TestMetadata("EnumEntries.kt")
            public void testEnumEntries() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/EnumEntries.kt");
            }

            @TestMetadata("EnumEntriesWithOuter.kt")
            public void testEnumEntriesWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/EnumEntriesWithOuter.kt");
            }

            @TestMetadata("EnumMember.kt")
            public void testEnumMember() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/EnumMember.kt");
            }

            @TestMetadata("Extension.kt")
            public void testExtension() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Extension.kt");
            }

            @TestMetadata("ExtensionAndFunctionSameNameTypeArgs.kt")
            public void testExtensionAndFunctionSameNameTypeArgs() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ExtensionAndFunctionSameNameTypeArgs.kt");
            }

            @TestMetadata("ForLoop.kt")
            public void testForLoop() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ForLoop.kt");
            }

            @TestMetadata("FullyQualified.kt")
            public void testFullyQualified() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/FullyQualified.kt");
            }

            @TestMetadata("Function.kt")
            public void testFunction() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Function.kt");
            }

            @TestMetadata("FunctionAlreadyImported.kt")
            public void testFunctionAlreadyImported() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/FunctionAlreadyImported.kt");
            }

            @TestMetadata("FunctionParameter.kt")
            public void testFunctionParameter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/FunctionParameter.kt");
            }

            @TestMetadata("FunctionToImportContainsSelectedClass.kt")
            public void testFunctionToImportContainsSelectedClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/FunctionToImportContainsSelectedClass.kt");
            }

            @TestMetadata("GetExpression.kt")
            public void testGetExpression() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/GetExpression.kt");
            }

            @TestMetadata("ImportDependency.kt")
            public void testImportDependency() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportDependency.kt");
            }

            @TestMetadata("ImportDependencyWithOuter.kt")
            public void testImportDependencyWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportDependencyWithOuter.kt");
            }

            @TestMetadata("ImportDirective.kt")
            public void testImportDirective() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportDirective.kt");
            }

            @TestMetadata("ImportDirectiveAndClassBody.kt")
            public void testImportDirectiveAndClassBody() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportDirectiveAndClassBody.kt");
            }

            @TestMetadata("ImportableEntityInExtensionLiteral.kt")
            public void testImportableEntityInExtensionLiteral() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportableEntityInExtensionLiteral.kt");
            }

            @TestMetadata("ImportableEntityInExtensionLiteralWithOuter.kt")
            public void testImportableEntityInExtensionLiteralWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportableEntityInExtensionLiteralWithOuter.kt");
            }

            @TestMetadata("ImportedElementCopied.kt")
            public void testImportedElementCopied() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportedElementCopied.kt");
            }

            @TestMetadata("ImportedInSourceWithStarImport.kt")
            public void testImportedInSourceWithStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ImportedInSourceWithStarImport.kt");
            }

            @TestMetadata("Inner.kt")
            public void testInner() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Inner.kt");
            }

            @TestMetadata("InnerWithOuter.kt")
            public void testInnerWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/InnerWithOuter.kt");
            }

            @TestMetadata("Interface.kt")
            public void testInterface() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Interface.kt");
            }

            @TestMetadata("Invoke.kt")
            public void testInvoke() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Invoke.kt");
            }

            @TestMetadata("JavaStaticViaClass.kt")
            public void testJavaStaticViaClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/JavaStaticViaClass.kt");
            }

            @TestMetadata("KT10433.kt")
            public void testKT10433() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/KT10433.kt");
            }

            @TestMetadata("KeywordClassName.kt")
            public void testKeywordClassName() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/KeywordClassName.kt");
            }

            @TestMetadata("Local.kt")
            public void testLocal() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Local.kt");
            }

            @TestMetadata("MissingClass.kt")
            public void testMissingClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MissingClass.kt");
            }

            @TestMetadata("MultiCaretSelection.kt")
            public void testMultiCaretSelection() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MultiCaretSelection.kt");
            }

            @TestMetadata("MultiCaretSelectionEntireFile.kt")
            public void testMultiCaretSelectionEntireFile() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MultiCaretSelectionEntireFile.kt");
            }

            @TestMetadata("MultiDeclaration.kt")
            public void testMultiDeclaration() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MultiDeclaration.kt");
            }

            @TestMetadata("MultiReferencePartiallyCopied.kt")
            public void testMultiReferencePartiallyCopied() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/MultiReferencePartiallyCopied.kt");
            }

            @TestMetadata("NoImportForBuiltIns.kt")
            public void testNoImportForBuiltIns() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NoImportForBuiltIns.kt");
            }

            @TestMetadata("NoImportForSamePackage.kt")
            public void testNoImportForSamePackage() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NoImportForSamePackage.kt");
            }

            @TestMetadata("NoImportForSamePackageWithOuter.kt")
            public void testNoImportForSamePackageWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NoImportForSamePackageWithOuter.kt");
            }

            @TestMetadata("NotReferencePosition.kt")
            public void testNotReferencePosition() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NotReferencePosition.kt");
            }

            @TestMetadata("NotReferencePosition2.kt")
            public void testNotReferencePosition2() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/NotReferencePosition2.kt");
            }

            @TestMetadata("Object.kt")
            public void testObject() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Object.kt");
            }

            @TestMetadata("OnlyKDocReferenced.kt")
            public void testOnlyKDocReferenced() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/OnlyKDocReferenced.kt");
            }

            @TestMetadata("OverloadedExtensionFunction.kt")
            public void testOverloadedExtensionFunction() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/OverloadedExtensionFunction.kt");
            }

            @TestMetadata("PackageView.kt")
            public void testPackageView() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/PackageView.kt");
            }

            @TestMetadata("PartiallyQualified.kt")
            public void testPartiallyQualified() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/PartiallyQualified.kt");
            }

            @TestMetadata("PartiallySelectedBlock.kt")
            public void testPartiallySelectedBlock() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/PartiallySelectedBlock.kt");
            }

            @TestMetadata("ReferencedElementAlsoCopied.kt")
            public void testReferencedElementAlsoCopied() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ReferencedElementAlsoCopied.kt");
            }

            @TestMetadata("StringTemplateKTIJ9042.kt")
            public void testStringTemplateKTIJ9042() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateKTIJ9042.kt");
            }

            @TestMetadata("StringTemplateMultipleImports.kt")
            public void testStringTemplateMultipleImports() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateMultipleImports.kt");
            }

            @TestMetadata("StringTemplateMultipleImportsCurlyBraces.kt")
            public void testStringTemplateMultipleImportsCurlyBraces() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateMultipleImportsCurlyBraces.kt");
            }

            @TestMetadata("StringTemplateMultipleImportsQualified.kt")
            public void testStringTemplateMultipleImportsQualified() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateMultipleImportsQualified.kt");
            }

            @TestMetadata("StringTemplateMultipleWithFunctionCall.kt")
            public void testStringTemplateMultipleWithFunctionCall() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/StringTemplateMultipleWithFunctionCall.kt");
            }

            @TestMetadata("Super.kt")
            public void testSuper() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/Super.kt");
            }

            @TestMetadata("ThisReference.kt")
            public void testThisReference() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/ThisReference.kt");
            }

            @TestMetadata("TopLevelCallableRef.kt")
            public void testTopLevelCallableRef() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelCallableRef.kt");
            }

            @TestMetadata("TopLevelExtensionCallableRefWithExpressionLHS.kt")
            public void testTopLevelExtensionCallableRefWithExpressionLHS() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelExtensionCallableRefWithExpressionLHS.kt");
            }

            @TestMetadata("TopLevelExtensionCallableRefWithTypeLHS.kt")
            public void testTopLevelExtensionCallableRefWithTypeLHS() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelExtensionCallableRefWithTypeLHS.kt");
            }

            @TestMetadata("TopLevelMemberCallableRefWithExpressionLHS.kt")
            public void testTopLevelMemberCallableRefWithExpressionLHS() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelMemberCallableRefWithExpressionLHS.kt");
            }

            @TestMetadata("TopLevelMemberCallableRefWithTypeLHS.kt")
            public void testTopLevelMemberCallableRefWithTypeLHS() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelMemberCallableRefWithTypeLHS.kt");
            }

            @TestMetadata("TopLevelProperty.kt")
            public void testTopLevelProperty() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TopLevelProperty.kt");
            }

            @TestMetadata("TypeArgForUnresolvedCall.kt")
            public void testTypeArgForUnresolvedCall() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TypeArgForUnresolvedCall.kt");
            }

            @TestMetadata("TypeArgNestedClass.kt")
            public void testTypeArgNestedClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TypeArgNestedClass.kt");
            }

            @TestMetadata("TypeArgNestedClassImported.kt")
            public void testTypeArgNestedClassImported() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TypeArgNestedClassImported.kt");
            }

            @TestMetadata("TypeParameter.kt")
            public void testTypeParameter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/TypeParameter.kt");
            }

            @TestMetadata("UnresolvedOverload.kt")
            public void testUnresolvedOverload() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/UnresolvedOverload.kt");
            }

            @TestMetadata("VariableCalls.kt")
            public void testVariableCalls() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/VariableCalls.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../idea/tests/testData/copyPaste/imports/withConflict")
        public static class WithConflict extends AbstractK2InsertImportOnPasteTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTestCut, this, testDataFilePath);
            }

            @TestMetadata("AmbiguityError.kt")
            public void testAmbiguityError() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/AmbiguityError.kt");
            }

            @TestMetadata("ArrayAccess.kt")
            public void testArrayAccess() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ArrayAccess.kt");
            }

            @TestMetadata("ConflictExplicitImport.kt")
            public void testConflictExplicitImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictExplicitImport.kt");
            }

            @TestMetadata("ConflictForTypeWithTypeParameter.kt")
            public void testConflictForTypeWithTypeParameter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictForTypeWithTypeParameter.kt");
            }

            @TestMetadata("ConflictLocal.kt")
            public void testConflictLocal() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictLocal.kt");
            }

            @TestMetadata("ConflictPackageDoNotUseStarImport.kt")
            public void testConflictPackageDoNotUseStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictPackageDoNotUseStarImport.kt");
            }

            @TestMetadata("ConflictWithClass.kt")
            public void testConflictWithClass() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictWithClass.kt");
            }

            @TestMetadata("ConflictsExplicitImportDoNotUseStarImport.kt")
            public void testConflictsExplicitImportDoNotUseStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictsExplicitImportDoNotUseStarImport.kt");
            }

            @TestMetadata("ConflictsExplicitStarImport.kt")
            public void testConflictsExplicitStarImport() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ConflictsExplicitStarImport.kt");
            }

            @TestMetadata("ExtensionAsInfixOrOperator.kt")
            public void testExtensionAsInfixOrOperator() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ExtensionAsInfixOrOperator.kt");
            }

            @TestMetadata("ExtensionCannotBeImportedOrLengthened.kt")
            public void testExtensionCannotBeImportedOrLengthened() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ExtensionCannotBeImportedOrLengthened.kt");
            }

            @TestMetadata("ExtensionConflict.kt")
            public void testExtensionConflict() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/ExtensionConflict.kt");
            }

            @TestMetadata("MultiReferenceConflict.kt")
            public void testMultiReferenceConflict() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/MultiReferenceConflict.kt");
            }

            @TestMetadata("OperatorFunction.kt")
            public void testOperatorFunction() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/OperatorFunction.kt");
            }

            @TestMetadata("OperatorFunctionWithOuter.kt")
            public void testOperatorFunctionWithOuter() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/OperatorFunctionWithOuter.kt");
            }

            @TestMetadata("QualifiedTypeConflict.kt")
            public void testQualifiedTypeConflict() throws Exception {
                runTest("../../idea/tests/testData/copyPaste/imports/withConflict/QualifiedTypeConflict.kt");
            }
        }
    }
}
