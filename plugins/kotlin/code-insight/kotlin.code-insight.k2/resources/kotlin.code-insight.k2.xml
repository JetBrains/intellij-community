<idea-plugin package="org.jetbrains.kotlin.idea.k2.codeinsight">
  <extensions defaultExtensionNs="org.jetbrains.kotlin">
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinIfConditionFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinMissingIfBranchFixer"/>

    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinWhileConditionFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinForConditionFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinMissingForOrWhileBodyFixer"/>

    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinWhenSubjectCaretFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinMissingWhenBodyFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinMissingWhenEntryBodyFixer"/>

    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinDoWhileFixer"/>

    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinFunctionParametersFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinFunctionDeclarationBodyFixer"/>

    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinPropertySetterParametersFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinPropertyAccessorBodyFixer"/>

    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinTryBodyFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinCatchParameterFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinCatchBodyFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinFinallyBodyFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KtLastLambdaParameterFixer"/>
    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinClassInitializerFixer"/>

    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KtClassBodyFixer"/>

    <smartEnterProcessorFixer
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.codeInsight.handlers.fixers.KotlinValueArgumentListFixer"/>

  </extensions>

  <extensions defaultExtensionNs="com.intellij">

    <structureViewBuilder
            order="first"
            key="CLASS"
            factoryClass="org.jetbrains.kotlin.idea.k2.codeinsight.structureView.KotlinFirDecompiledFileStructureViewBuilderProvider"/>
    <structureViewBuilder
            order="first"
            key="kotlin_builtins"
            factoryClass="org.jetbrains.kotlin.idea.k2.codeinsight.structureView.KotlinFirDecompiledFileStructureViewBuilderProvider"/>
    <structureViewBuilder
            order="first"
            key="KNM"
            factoryClass="org.jetbrains.kotlin.idea.k2.codeinsight.structureView.KotlinFirDecompiledFileStructureViewBuilderProvider"/>

    <lang.psiStructureViewFactory
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.k2.codeinsight.structureView.KotlinFirStructureViewFactory"/>

    <codeInsight.gotoSuper
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.k2.codeinsight.KotlinGoToSuperDeclarationsHandler"/>

    <applicationService
            serviceInterface="org.jetbrains.kotlin.idea.base.codeInsight.KotlinOptimizeImportsFacility"
            serviceImplementation="org.jetbrains.kotlin.idea.k2.codeinsight.K2OptimizeImportsFacility"/>
    <constantExpressionEvaluator
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.k2.codeinsight.KotlinFirConstantExpressionEvaluator"/>

    <platform.backend.documentation.psiTargetProvider id="KotlinDocumentationTargetProvider"
                                                      implementation="org.jetbrains.kotlin.idea.k2.codeinsight.quickDoc.KotlinPsiDocumentationTargetProvider"/>
    <platform.backend.documentation.linkHandler implementation="org.jetbrains.kotlin.idea.k2.codeinsight.quickDoc.KotlinDocumentationLinkHandler"/>
    <platform.backend.documentation.targetProvider id="KotlinDocumentationTargetProvider"
                                                   implementation="org.jetbrains.kotlin.idea.k2.codeinsight.quickDoc.KotlinDocumentationTargetProvider"/>
    <platform.backend.documentation.inlineDocumentationProvider
            implementation="org.jetbrains.kotlin.idea.k2.codeinsight.quickDoc.KotlinInlineDocumentationProvider"/>
    <lang.jvm.actions.jvmElementActionsFactory
            implementation="org.jetbrains.kotlin.idea.k2.codeinsight.quickFixes.createFromUsage.K2ElementActionsFactory"/>

    <codeInsight.unresolvedReferenceQuickFixProvider
            implementation="org.jetbrains.kotlin.idea.k2.codeinsight.quickFixes.createFromUsage.K2CreateFromUsageUnresolvedReferenceQuickFixProvider"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.idea.codeInsight.KotlinReferenceImporterFacility"
                        serviceImplementation="org.jetbrains.kotlin.idea.k2.codeinsight.K2ReferenceImporterFacility"/>

    <registryKey key="kotlin.k2.allow.constant.computation.on.EDT" defaultValue="true" description="When enabled, error about analysis on EDT is disabled"/>

    <!-- inlay hints -->
    <codeInsight.inlayActionHandler implementationClass="org.jetbrains.kotlin.idea.codeInsight.hints.KotlinFqnDeclarativeInlayActionHandler"
                                    handlerId="kotlin.fqn.class"/>

    <codeInsight.declarativeInlayProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.k2.codeinsight.hints.KtReferencesTypeHintsProvider"
            isEnabledByDefault="false"
            group="TYPES_GROUP"
            providerId="kotlin.references.types.hints"
            bundle="messages.KotlinBundle"
            nameKey="hints.settings.types"
            descriptionKey="inlay.kotlin.references.types.hints">
      <option bundle="messages.KotlinBundle"
              optionId="hints.type.property"
              enabledByDefault="false"
              nameKey="hints.settings.types.property"
              descriptionKey="inlay.kotlin.references.types.hints.hints.type.property"/>
      <option bundle="messages.KotlinBundle"
              optionId="hints.type.variable"
              enabledByDefault="false"
              nameKey="hints.settings.types.variable"
              descriptionKey="inlay.kotlin.references.types.hints.hints.type.variable"/>
      <option bundle="messages.KotlinBundle"
              optionId="hints.type.function.return"
              enabledByDefault="false"
              nameKey="hints.settings.types.return"
              descriptionKey="inlay.kotlin.references.types.hints.hints.type.function.return"/>
      <option bundle="messages.KotlinBundle"
              optionId="hints.type.function.parameter"
              enabledByDefault="false"
              nameKey="hints.settings.types.parameter"
              descriptionKey="inlay.kotlin.references.types.hints.hints.type.function.parameter"/>
    </codeInsight.declarativeInlayProvider>

    <codeInsight.declarativeInlayProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.k2.codeinsight.hints.KtLambdasHintsProvider"
            isEnabledByDefault="false"
            group="LAMBDAS_GROUP"
            providerId="kotlin.lambdas.hints"
            bundle="messages.KotlinBundle"
            nameKey="hints.settings.lambdas"
            descriptionKey="inlay.kotlin.lambdas.hints">
      <option bundle="messages.KotlinBundle"
              optionId="hints.lambda.return"
              enabledByDefault="true"
              nameKey="hints.settings.lambda.return"
              descriptionKey="inlay.kotlin.lambdas.hints.hints.lambda.return"/>
      <option bundle="messages.KotlinBundle"
              optionId="hints.lambda.receivers.parameters"
              enabledByDefault="true"
              nameKey="hints.settings.lambda.receivers.parameters"
              descriptionKey="inlay.kotlin.lambdas.hints.hints.lambda.receivers.parameters"/>
    </codeInsight.declarativeInlayProvider>

    <codeInsight.declarativeInlayProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.k2.codeinsight.hints.KtValuesHintsProvider"
            isEnabledByDefault="true"
            group="VALUES_GROUP"
            providerId="kotlin.values.hints"
            bundle="messages.KotlinBundle"
            nameKey="hints.settings.values.ranges"
            descriptionKey="inlay.kotlin.values.hints"/>

    <codeInsight.declarativeInlayProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.k2.codeinsight.hints.KtParameterHintsProvider"
            isEnabledByDefault="false"
            group="PARAMETERS_GROUP"
            providerId="kotlin.parameters.hints"
            bundle="messages.KotlinBundle"
            nameKey="hints.settings.parameters"
            descriptionKey="inlay.kotlin.parameters.hints">
      <!--        <option bundle="messages.KotlinBundle"-->
      <!--              optionId="hints.parameters.blacklisted"-->
      <!--              enabledByDefault="false"-->
      <!--              nameKey="hints.settings.parameters.blacklisted"-->
      <!--              descriptionKey="inlay.kotlin.parameters.hints.blacklisted"/>-->
    </codeInsight.declarativeInlayProvider>

    <codeInsight.declarativeInlayProvider
            language="kotlin"
            implementationClass="org.jetbrains.kotlin.idea.k2.codeinsight.hints.KtCallChainHintsProvider"
            isEnabledByDefault="false"
            group="METHOD_CHAINS_GROUP"
            providerId="kotlin.method.chains"
            bundle="messages.JavaBundle"
            nameKey="java.method.chains.inlay.provider.name"
            descriptionKey="inlay.MethodChainsInlayProvider.description" />

    <vcs.codeVisionLanguageContext language="kotlin"
                                   implementationClass="org.jetbrains.kotlin.idea.codeInsight.hints.KotlinVcsCodeVisionContext"/>
  </extensions>
  <extensions defaultExtensionNs="org.jetbrains.kotlin">
    <codeinsight.quickfix.registrar implementation="org.jetbrains.kotlin.idea.k2.codeinsight.quickFixes.createFromUsage.K2CreateFromUsageQuickFixesRegistrar"/>
  </extensions>
</idea-plugin>