#set($paramName = $helper.getUniqueLocalVarName($baseParamName, $fields, $settings))
override fun equals(${paramName}: Any?): Boolean{
#addEqualsPrologue()
#if ($fields.size() > 0)

    #if (!$checkParameterWithInstanceof)
    #addClassInstance()

    #end
    #foreach($field in $fields)
        #addFieldComparison($field)
    #end

#end
return true
}
##
#macro(addFieldComparison $field)
    if (##
    #if ($field.nestedArray)
    !$field.name##
    .##
    contentDeepEquals(##
    ${paramName}.$field.name))##
    #elseif ($field.array)
    !$field.name##
    .##
    contentEquals(##
    ${paramName}.$field.name))##
    #else
    $field.name != ${paramName}.$field.name)##
    #end
    return false
#end
##
#macro(addClassInstance)
    #set($wildcards = "#generateWildcards()")
$paramName as $classname$wildcards
#end
##
#macro(generateWildcards)
    #if ($class.typeParams > 0)
    <##
        #set( $arr = [1..$class.typeParams] )
        #foreach( $i in $arr )
            #if ($i > 1)
            , ##
            #end
        *##
        #end
    >##
    #end
#end
##
#macro(addEqualsPrologue)
if(this === ${paramName}) return true
    #addInstanceOfToText()
    #if ($superHasEquals)
    if(!super.equals(${paramName})) return false
    #end
#end
##
#macro(addInstanceOfToText)
#if ($checkParameterWithInstanceof)
if ($paramName !is $classname##
#generateWildcards()) return false
#elseif ($isCommon || $isNative || $isWasm)
if ($paramName == null || this::class != $paramName::class) return false
#elseif ($isJs)
if ($paramName == null || this::class.js != $paramName::class.js) return false
#else
if(javaClass != ${paramName}?.javaClass) return false
#end
#end
