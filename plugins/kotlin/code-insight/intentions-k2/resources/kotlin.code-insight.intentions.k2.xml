<idea-plugin package="org.jetbrains.kotlin.idea.k2.codeinsight.intentions">
  <dependencies>
    <module name="kotlin.refactorings.k2"/>
    <module name="kotlin.searching.k2"/>
  </dependencies>

  <extensions defaultExtensionNs="com.intellij">

    <testDiffProvider language="kotlin" implementationClass="com.intellij.execution.testframework.JvmTestDiffProvider"/>
    <testFinder implementation="org.jetbrains.kotlin.idea.k2.codeinsight.intentions.testIntegration.K2TestFinder"/>
    <testCreator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.k2.codeinsight.intentions.testIntegration.K2TestCreator"/>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.testIntegration.KotlinCreateTestIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ReplaceUnderscoreWithTypeArgumentIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.SpecifyTypeExplicitlyIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.SpecifyExplicitLambdaSignatureIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.SafeAccessToIfThenIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddPropertyAccessorsIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddPropertyGetterIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddPropertySetterIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ImportAllMembersIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ImportMemberIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertConcatenationToBuildStringIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertMemberToExtensionIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertStringTemplateToBuildStringIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertToBlockBodyIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddWhenRemainingBranchesIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddNameToArgumentIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddNamesToCallArgumentsIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.EliminateWhenSubjectIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddNamesToFollowingArgumentsIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertToConcatenatedStringIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddOpenModifierIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.RemoveExplicitTypeIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertToStringTemplateIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ElvisToIfThenIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ExtractDeclarationFromCurrentFileIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertForEachToForLoopIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertCallToOppositeIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertAnyToAllAndViceVersaIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertAnyToNoneAndViceVersaIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddNamesInCommentToJavaCallArgumentsIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddFullQualifierIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.InsertExplicitTypeArgumentsIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.RemoveAllArgumentNamesIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.RemoveSingleArgumentNameIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertPropertyGetterToInitializerIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertToRawStringTemplateIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ToRawStringLiteralIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.MovePropertyToConstructorIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.WhenToIfIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertBinaryExpressionWithDemorgansLawIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.SplitPropertyDeclarationIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.InvertIfConditionIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.LambdaToAnonymousFunctionIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertReferenceToLambdaIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertLambdaToReferenceIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertParameterToReceiverIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertPrimaryConstructorToSecondaryIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertObjectLiteralToClassIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertReceiverToParameterIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.IfToWhenIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.FoldIfToReturnAsymmetricallyIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AnonymousFunctionToLambdaIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.FlattenWhenIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ChangeVisibilityModifierIntentionChooser</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddThrowsAnnotationIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ReplaceExplicitFunctionLiteralParamWithItIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.CreateKotlinSubClassIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.DoubleBangToIfThenIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertPropertyInitializerToGetterIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertToMultiDollarStringIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddAnnotationUseSiteTargetIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddValVarToConstructorParameterActionIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ImplementAbstractMemberIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ImplementAbstractMemberAsConstructorParameterIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.IterateExpressionIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.MoveMemberToTopLevelIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.MoveMemberToCompanionObjectIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.MoveMemberOutOfCompanionObjectIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.MovePropertyToClassBodyIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.NullableBooleanEqualityCheckToElvisIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.EvaluateCompileTimeExpressionIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>


    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.CollectionConcatenationToBuildCollectionIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ChangePackageIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

    <intentionAction>
      <language>kotlin</language>
      <className>org.jetbrains.kotlin.idea.k2.codeinsight.intentions.ConvertPropertyToFunctionIntention</className>
      <bundleName>messages.KotlinBundle</bundleName>
      <categoryKey>group.names.kotlin</categoryKey>
    </intentionAction>

  </extensions>
</idea-plugin>
