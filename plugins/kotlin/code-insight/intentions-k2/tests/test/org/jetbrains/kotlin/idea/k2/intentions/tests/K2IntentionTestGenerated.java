// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.intentions.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/intentions-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2IntentionTestGenerated extends AbstractK2IntentionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addFullQualifier")
    public abstract static class AddFullQualifier extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions")
        public static class CallExpressions extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ClassConstructorInRoot.kt")
            public void testClassConstructorInRoot() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions/ClassConstructorInRoot.kt");
            }

            @TestMetadata("FunctionWithReceiver.kt")
            public void testFunctionWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions/FunctionWithReceiver.kt");
            }

            @TestMetadata("ImportedWithAlias.kt")
            public void testImportedWithAlias() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions/ImportedWithAlias.kt");
            }

            @TestMetadata("LocalClass.kt")
            public void testLocalClass() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions/LocalClass.kt");
            }

            @TestMetadata("LocalFunction.kt")
            public void testLocalFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions/LocalFunction.kt");
            }

            @TestMetadata("SimpleClass.kt")
            public void testSimpleClass() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions/SimpleClass.kt");
            }

            @TestMetadata("SimpleClassWithFullQualifier.kt")
            public void testSimpleClassWithFullQualifier() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions/SimpleClassWithFullQualifier.kt");
            }

            @TestMetadata("This.kt")
            public void testThis() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions/This.kt");
            }

            @TestMetadata("ThisWithQualifier.kt")
            public void testThisWithQualifier() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/callExpressions/ThisWithQualifier.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences")
        public static class MethodReferences extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("ClassConstructor.kt")
            public void testClassConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/ClassConstructor.kt");
            }

            @TestMetadata("FunctionWithReceiver.kt")
            public void testFunctionWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/FunctionWithReceiver.kt");
            }

            @TestMetadata("FunctionWithReceiver2.kt")
            public void testFunctionWithReceiver2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/FunctionWithReceiver2.kt");
            }

            @TestMetadata("LocalClass.kt")
            public void testLocalClass() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/LocalClass.kt");
            }

            @TestMetadata("LocalFunction.kt")
            public void testLocalFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/LocalFunction.kt");
            }

            @TestMetadata("LocalMemberFunction.kt")
            public void testLocalMemberFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/LocalMemberFunction.kt");
            }

            @TestMetadata("MemberFunction.kt")
            public void testMemberFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/MemberFunction.kt");
            }

            @TestMetadata("MemberFunction2.kt")
            public void testMemberFunction2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/MemberFunction2.kt");
            }

            @TestMetadata("MemberPropertyInRoot.kt")
            public void testMemberPropertyInRoot() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/MemberPropertyInRoot.kt");
            }

            @TestMetadata("MemberPropertyInRoot2.kt")
            public void testMemberPropertyInRoot2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/MemberPropertyInRoot2.kt");
            }

            @TestMetadata("NestedClassConstructor.kt")
            public void testNestedClassConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/NestedClassConstructor.kt");
            }

            @TestMetadata("SimpleClass.kt")
            public void testSimpleClass() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/SimpleClass.kt");
            }

            @TestMetadata("SimpleClassInRoot.kt")
            public void testSimpleClassInRoot() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/SimpleClassInRoot.kt");
            }

            @TestMetadata("SimpleClassWithFullQualifier.kt")
            public void testSimpleClassWithFullQualifier() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/SimpleClassWithFullQualifier.kt");
            }

            @TestMetadata("This.kt")
            public void testThis() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/This.kt");
            }

            @TestMetadata("TopLevelFunction.kt")
            public void testTopLevelFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/TopLevelFunction.kt");
            }

            @TestMetadata("TopLevelProperty.kt")
            public void testTopLevelProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/TopLevelProperty.kt");
            }

            @TestMetadata("TopLevelPropertyAndFunction.kt")
            public void testTopLevelPropertyAndFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/TopLevelPropertyAndFunction.kt");
            }

            @TestMetadata("TypeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/methodReferences/TypeAlias.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addFullQualifier/references")
        public static class References extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("FunctionWithReceiver.kt")
            public void testFunctionWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/FunctionWithReceiver.kt");
            }

            @TestMetadata("LocalProperty.kt")
            public void testLocalProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/LocalProperty.kt");
            }

            @TestMetadata("ObjectInRoot.kt")
            public void testObjectInRoot() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/ObjectInRoot.kt");
            }

            @TestMetadata("Property.kt")
            public void testProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/Property.kt");
            }

            @TestMetadata("PropertyInRoot.kt")
            public void testPropertyInRoot() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/PropertyInRoot.kt");
            }

            @TestMetadata("PropertyWithQualifier.kt")
            public void testPropertyWithQualifier() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/PropertyWithQualifier.kt");
            }

            @TestMetadata("SimpleClass.kt")
            public void testSimpleClass() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/SimpleClass.kt");
            }

            @TestMetadata("SimpleClassInRoot.kt")
            public void testSimpleClassInRoot() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/SimpleClassInRoot.kt");
            }

            @TestMetadata("SimpleClassWithFullQualifier.kt")
            public void testSimpleClassWithFullQualifier() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/SimpleClassWithFullQualifier.kt");
            }

            @TestMetadata("Super.kt")
            public void testSuper() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/Super.kt");
            }

            @TestMetadata("This.kt")
            public void testThis() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/This.kt");
            }

            @TestMetadata("ThisInQualifier.kt")
            public void testThisInQualifier() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/references/ThisInQualifier.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addFullQualifier")
        public static class Uncategorized extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("Import.kt")
            public void testImport() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/Import.kt");
            }

            @TestMetadata("ImportInRoot.kt")
            public void testImportInRoot() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/ImportInRoot.kt");
            }

            @TestMetadata("Package.kt")
            public void testPackage() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/Package.kt");
            }

            @TestMetadata("Package2.kt")
            public void testPackage2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/Package2.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addFullQualifier/userTypes")
        public static class UserTypes extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("Annotation.kt")
            public void testAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/userTypes/Annotation.kt");
            }

            @TestMetadata("LocalClass.kt")
            public void testLocalClass() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/userTypes/LocalClass.kt");
            }

            @TestMetadata("NullableType.kt")
            public void testNullableType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/userTypes/NullableType.kt");
            }

            @TestMetadata("SimpleClass.kt")
            public void testSimpleClass() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/userTypes/SimpleClass.kt");
            }

            @TestMetadata("SimpleClassInRoot.kt")
            public void testSimpleClassInRoot() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/userTypes/SimpleClassInRoot.kt");
            }

            @TestMetadata("SimpleClassWithFullQualifier.kt")
            public void testSimpleClassWithFullQualifier() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/userTypes/SimpleClassWithFullQualifier.kt");
            }

            @TestMetadata("TypeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addFullQualifier/userTypes/TypeAlias.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addMissingClassKeyword")
    public static class AddMissingClassKeyword extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstract.kt")
        public void testAbstract() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/abstract.kt");
        }

        @TestMetadata("annottion.kt")
        public void testAnnottion() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/annottion.kt");
        }

        @TestMetadata("data.kt")
        public void testData() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/data.kt");
        }

        @TestMetadata("dataHasClassKeyword.kt")
        public void testDataHasClassKeyword() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/dataHasClassKeyword.kt");
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/enum.kt");
        }

        @TestMetadata("enumHasClassKeyword.kt")
        public void testEnumHasClassKeyword() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/enumHasClassKeyword.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/inner.kt");
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/sealed.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addNameToArgument")
    public static class AddNameToArgument extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("alreadyNamed.kt")
        public void testAlreadyNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/alreadyNamed.kt");
        }

        @TestMetadata("ambiguousCall.kt")
        public void testAmbiguousCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/ambiguousCall.kt");
        }

        @TestMetadata("annotationCall.kt")
        public void testAnnotationCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/annotationCall.kt");
        }

        @TestMetadata("backtickedArgument.kt")
        public void testBacktickedArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/backtickedArgument.kt");
        }

        @TestMetadata("backtickedArgument2.kt")
        public void testBacktickedArgument2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/backtickedArgument2.kt");
        }

        @TestMetadata("backtickedArgument3.kt")
        public void testBacktickedArgument3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/backtickedArgument3.kt");
        }

        @TestMetadata("backtickedArgument4.kt")
        public void testBacktickedArgument4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/backtickedArgument4.kt");
        }

        @TestMetadata("beforeOtherNamed.kt")
        public void testBeforeOtherNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/beforeOtherNamed.kt");
        }

        @TestMetadata("delegatedConstructor.kt")
        public void testDelegatedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/delegatedConstructor.kt");
        }

        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/functionLiteralArgument.kt");
        }

        @TestMetadata("genericCall.kt")
        public void testGenericCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/genericCall.kt");
        }

        @TestMetadata("incompleteCall.kt")
        public void testIncompleteCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/incompleteCall.kt");
        }

        @TestMetadata("javaMethod.kt")
        public void testJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/javaMethod.kt");
        }

        @TestMetadata("kt11679.kt")
        public void testKt11679() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/kt11679.kt");
        }

        @TestMetadata("linkedList.kt")
        public void testLinkedList() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/linkedList.kt");
        }

        @TestMetadata("mixingPositionedAndNamed.kt")
        public void testMixingPositionedAndNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/mixingPositionedAndNamed.kt");
        }

        @TestMetadata("mixingPositionedAndNamedDisabled.kt")
        public void testMixingPositionedAndNamedDisabled() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/mixingPositionedAndNamedDisabled.kt");
        }

        @TestMetadata("notInsideIndices.kt")
        public void testNotInsideIndices() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/notInsideIndices.kt");
        }

        @TestMetadata("notInsideNestedArgumentList.kt")
        public void testNotInsideNestedArgumentList() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/notInsideNestedArgumentList.kt");
        }

        @TestMetadata("notInsideNestedArgumentList2.kt")
        public void testNotInsideNestedArgumentList2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/notInsideNestedArgumentList2.kt");
        }

        @TestMetadata("notResolved.kt")
        public void testNotResolved() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/notResolved.kt");
        }

        @TestMetadata("rangeForLambda1.kt")
        public void testRangeForLambda1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/rangeForLambda1.kt");
        }

        @TestMetadata("rangeForLambda2.kt")
        public void testRangeForLambda2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/rangeForLambda2.kt");
        }

        @TestMetadata("rangeForLambda3.kt")
        public void testRangeForLambda3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/rangeForLambda3.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/simple.kt");
        }

        @TestMetadata("superClassConstructor.kt")
        public void testSuperClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/superClassConstructor.kt");
        }

        @TestMetadata("vararg1.kt")
        public void testVararg1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/vararg1.kt");
        }

        @TestMetadata("vararg2.kt")
        public void testVararg2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/vararg2.kt");
        }

        @TestMetadata("vararg3.kt")
        public void testVararg3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/vararg3.kt");
        }

        @TestMetadata("withComment.kt")
        public void testWithComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/withComment.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addNamesToCallArguments")
    public static class AddNamesToCallArguments extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("allNamed.kt")
        public void testAllNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/allNamed.kt");
        }

        @TestMetadata("ambiguousCall.kt")
        public void testAmbiguousCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/ambiguousCall.kt");
        }

        @TestMetadata("annotationCall.kt")
        public void testAnnotationCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/annotationCall.kt");
        }

        @TestMetadata("delegatedConstructor.kt")
        public void testDelegatedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/delegatedConstructor.kt");
        }

        @TestMetadata("extraArguments.kt")
        public void testExtraArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/extraArguments.kt");
        }

        @TestMetadata("genericCall.kt")
        public void testGenericCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/genericCall.kt");
        }

        @TestMetadata("incompleteCall.kt")
        public void testIncompleteCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/incompleteCall.kt");
        }

        @TestMetadata("javaMethod.kt")
        public void testJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/javaMethod.kt");
        }

        @TestMetadata("notResolved.kt")
        public void testNotResolved() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/notResolved.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/simple.kt");
        }

        @TestMetadata("singleArgument.kt")
        public void testSingleArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/singleArgument.kt");
        }

        @TestMetadata("superClassConstructor.kt")
        public void testSuperClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/superClassConstructor.kt");
        }

        @TestMetadata("trailingLambda.kt")
        public void testTrailingLambda() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/trailingLambda.kt");
        }

        @TestMetadata("varargMultiple.kt")
        public void testVarargMultiple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/varargMultiple.kt");
        }

        @TestMetadata("varargSingle.kt")
        public void testVarargSingle() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/varargSingle.kt");
        }

        @TestMetadata("varargSingleWithSpread.kt")
        public void testVarargSingleWithSpread() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/varargSingleWithSpread.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addNamesToFollowingArguments")
    public static class AddNamesToFollowingArguments extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("alreadyNamed.kt")
        public void testAlreadyNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/alreadyNamed.kt");
        }

        @TestMetadata("annotationCall.kt")
        public void testAnnotationCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/annotationCall.kt");
        }

        @TestMetadata("beforeOtherNamed.kt")
        public void testBeforeOtherNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/beforeOtherNamed.kt");
        }

        @TestMetadata("delegatedConstructor.kt")
        public void testDelegatedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/delegatedConstructor.kt");
        }

        @TestMetadata("first.kt")
        public void testFirst() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/first.kt");
        }

        @TestMetadata("last.kt")
        public void testLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/last.kt");
        }

        @TestMetadata("lastUnnamed.kt")
        public void testLastUnnamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/lastUnnamed.kt");
        }

        @TestMetadata("rangeForLambda1.kt")
        public void testRangeForLambda1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/rangeForLambda1.kt");
        }

        @TestMetadata("rangeForLambda2.kt")
        public void testRangeForLambda2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/rangeForLambda2.kt");
        }

        @TestMetadata("rangeForLambda3.kt")
        public void testRangeForLambda3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/rangeForLambda3.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addOpenModifier")
    public static class AddOpenModifier extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractClass.kt")
        public void testAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/abstractClass.kt");
        }

        @TestMetadata("abstractFunction.kt")
        public void testAbstractFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/abstractFunction.kt");
        }

        @TestMetadata("alreadyOpen.kt")
        public void testAlreadyOpen() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/alreadyOpen.kt");
        }

        @TestMetadata("destructuringDeclaration.kt")
        public void testDestructuringDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/destructuringDeclaration.kt");
        }

        @TestMetadata("enumClass.kt")
        public void testEnumClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/enumClass.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/function.kt");
        }

        @TestMetadata("interface.kt")
        public void testInterface() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/interface.kt");
        }

        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/localFunction.kt");
        }

        @TestMetadata("localProperty.kt")
        public void testLocalProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/localProperty.kt");
        }

        @TestMetadata("notOpen.kt")
        public void testNotOpen() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/notOpen.kt");
        }

        @TestMetadata("parameter.kt")
        public void testParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/parameter.kt");
        }

        @TestMetadata("private.kt")
        public void testPrivate() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/private.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/property.kt");
        }

        @TestMetadata("sealedClass.kt")
        public void testSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/sealedClass.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addPropertyAccessors")
    public abstract static class AddPropertyAccessors extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addPropertyAccessors/both")
        public static class Both extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstract.kt")
            public void testAbstract() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/abstract.kt");
            }

            @TestMetadata("caretNotOnName.kt")
            public void testCaretNotOnName() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/caretNotOnName.kt");
            }

            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/delegate.kt");
            }

            @TestMetadata("expect.kt")
            public void testExpect() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/expect.kt");
            }

            @TestMetadata("hasAccessor.kt")
            public void testHasAccessor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/hasAccessor.kt");
            }

            @TestMetadata("hasGetter.kt")
            public void testHasGetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/hasGetter.kt");
            }

            @TestMetadata("hasSetter.kt")
            public void testHasSetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/hasSetter.kt");
            }

            @TestMetadata("jvmField.kt")
            public void testJvmField() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/jvmField.kt");
            }

            @TestMetadata("jvmField2.kt")
            public void testJvmField2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/jvmField2.kt");
            }

            @TestMetadata("lateinit.kt")
            public void testLateinit() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/lateinit.kt");
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/local.kt");
            }

            @TestMetadata("noType.kt")
            public void testNoType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/noType.kt");
            }

            @TestMetadata("top.kt")
            public void testTop() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/top.kt");
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/val.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/var.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addPropertyAccessors/getter")
        public static class Getter extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstract.kt")
            public void testAbstract() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/abstract.kt");
            }

            @TestMetadata("caretNotOnName.kt")
            public void testCaretNotOnName() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/caretNotOnName.kt");
            }

            @TestMetadata("const.kt")
            public void testConst() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/const.kt");
            }

            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/delegate.kt");
            }

            @TestMetadata("expect.kt")
            public void testExpect() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/expect.kt");
            }

            @TestMetadata("hasAccessor.kt")
            public void testHasAccessor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/hasAccessor.kt");
            }

            @TestMetadata("hasGetter.kt")
            public void testHasGetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/hasGetter.kt");
            }

            @TestMetadata("hasSetter.kt")
            public void testHasSetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/hasSetter.kt");
            }

            @TestMetadata("jvmField.kt")
            public void testJvmField() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/jvmField.kt");
            }

            @TestMetadata("jvmField2.kt")
            public void testJvmField2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/jvmField2.kt");
            }

            @TestMetadata("lateinit.kt")
            public void testLateinit() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/lateinit.kt");
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/local.kt");
            }

            @TestMetadata("noType.kt")
            public void testNoType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/noType.kt");
            }

            @TestMetadata("top.kt")
            public void testTop() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/top.kt");
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/val.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/var.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addPropertyAccessors/setter")
        public static class Setter extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstract.kt")
            public void testAbstract() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/abstract.kt");
            }

            @TestMetadata("caretNotOnName.kt")
            public void testCaretNotOnName() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/caretNotOnName.kt");
            }

            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/delegate.kt");
            }

            @TestMetadata("expect.kt")
            public void testExpect() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/expect.kt");
            }

            @TestMetadata("hasAccessor.kt")
            public void testHasAccessor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/hasAccessor.kt");
            }

            @TestMetadata("hasGetter.kt")
            public void testHasGetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/hasGetter.kt");
            }

            @TestMetadata("hasSetter.kt")
            public void testHasSetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/hasSetter.kt");
            }

            @TestMetadata("jvmField.kt")
            public void testJvmField() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/jvmField.kt");
            }

            @TestMetadata("jvmField2.kt")
            public void testJvmField2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/jvmField2.kt");
            }

            @TestMetadata("lateinit.kt")
            public void testLateinit() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/lateinit.kt");
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/local.kt");
            }

            @TestMetadata("noType.kt")
            public void testNoType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/noType.kt");
            }

            @TestMetadata("top.kt")
            public void testTop() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/top.kt");
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/val.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/var.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/specifyTypeExplicitly")
    public static class SpecifyTypeExplicitly extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("anonymousObject.kt")
        public void testAnonymousObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/anonymousObject.kt");
        }

        @TestMetadata("anonymousObjectJavaClass.kt")
        public void testAnonymousObjectJavaClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/anonymousObjectJavaClass.kt");
        }

        @TestMetadata("backticked.kt")
        public void testBackticked() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/backticked.kt");
        }

        @TestMetadata("badCaretPosition.kt")
        public void testBadCaretPosition() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/badCaretPosition.kt");
        }

        @TestMetadata("classNameClashing.kt")
        public void testClassNameClashing() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/classNameClashing.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/constructor.kt");
        }

        @TestMetadata("constructorParameter.kt")
        public void testConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/constructorParameter.kt");
        }

        @TestMetadata("definitelyNonNullType.kt")
        public void testDefinitelyNonNullType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullType.kt");
        }

        @TestMetadata("definitelyNonNullTypeAsReturnFunctionType.kt")
        public void testDefinitelyNonNullTypeAsReturnFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeAsReturnFunctionType.kt");
        }

        @TestMetadata("definitelyNonNullTypeFunctionType.kt")
        public void testDefinitelyNonNullTypeFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeFunctionType.kt");
        }

        @TestMetadata("definitelyNonNullTypeInGenericClass.kt")
        public void testDefinitelyNonNullTypeInGenericClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeInGenericClass.kt");
        }

        @TestMetadata("definitelyNonNullTypeOverrideProperty1.kt")
        public void testDefinitelyNonNullTypeOverrideProperty1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeOverrideProperty1.kt");
        }

        @TestMetadata("definitelyNonNullTypeOverrideProperty2.kt")
        public void testDefinitelyNonNullTypeOverrideProperty2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeOverrideProperty2.kt");
        }

        @TestMetadata("destructuringInLambda.kt")
        public void testDestructuringInLambda() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/destructuringInLambda.kt");
        }

        @TestMetadata("destructuringInLoopParameter.kt")
        public void testDestructuringInLoopParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/destructuringInLoopParameter.kt");
        }

        @TestMetadata("enumType.kt")
        public void testEnumType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/enumType.kt");
        }

        @TestMetadata("forAsExpression.kt")
        public void testForAsExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/forAsExpression.kt");
        }

        @TestMetadata("functionParameter.kt")
        public void testFunctionParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/functionParameter.kt");
        }

        @TestMetadata("functionType.kt")
        public void testFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/functionType.kt");
        }

        @TestMetadata("genericClass.kt")
        public void testGenericClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/genericClass.kt");
        }

        @TestMetadata("genericClassWithTypeParameters.kt")
        public void testGenericClassWithTypeParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/genericClassWithTypeParameters.kt");
        }

        @TestMetadata("genericClassWithTypeParameters2.kt")
        public void testGenericClassWithTypeParameters2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/genericClassWithTypeParameters2.kt");
        }

        @TestMetadata("genericFunction.kt")
        public void testGenericFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/genericFunction.kt");
        }

        @TestMetadata("innerTypeParameter.kt")
        public void testInnerTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/innerTypeParameter.kt");
        }

        @TestMetadata("innerTypeParameter2.kt")
        public void testInnerTypeParameter2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/innerTypeParameter2.kt");
        }

        @TestMetadata("lambdaParam.kt")
        public void testLambdaParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/lambdaParam.kt");
        }

        @TestMetadata("localClass.kt")
        public void testLocalClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClass.kt");
        }

        @TestMetadata("localClassInSecondTypeParameter.kt")
        public void testLocalClassInSecondTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClassInSecondTypeParameter.kt");
        }

        @TestMetadata("localClassInSecondTypeParameter2.kt")
        public void testLocalClassInSecondTypeParameter2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClassInSecondTypeParameter2.kt");
        }

        @TestMetadata("localClassInSecondTypeParameter3.kt")
        public void testLocalClassInSecondTypeParameter3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClassInSecondTypeParameter3.kt");
        }

        @TestMetadata("localClassInTypeParameter.kt")
        public void testLocalClassInTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClassInTypeParameter.kt");
        }

        @TestMetadata("loopParameter.kt")
        public void testLoopParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/loopParameter.kt");
        }

        @TestMetadata("outClass.kt")
        public void testOutClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/outClass.kt");
        }

        @TestMetadata("outClass2.kt")
        public void testOutClass2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/outClass2.kt");
        }

        @TestMetadata("outClass3.kt")
        public void testOutClass3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/outClass3.kt");
        }

        @TestMetadata("overriddenAsNull.kt")
        public void testOverriddenAsNull() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overriddenAsNull.kt");
        }

        @TestMetadata("overrideNotNullFunction.kt")
        public void testOverrideNotNullFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overrideNotNullFunction.kt");
        }

        @TestMetadata("overrideNotNullProperty.kt")
        public void testOverrideNotNullProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overrideNotNullProperty.kt");
        }

        @TestMetadata("overrideNotNullProperty2.kt")
        public void testOverrideNotNullProperty2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overrideNotNullProperty2.kt");
        }

        @TestMetadata("overrideNullableFunction.kt")
        public void testOverrideNullableFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overrideNullableFunction.kt");
        }

        @TestMetadata("overrideNullableProperty.kt")
        public void testOverrideNullableProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overrideNullableProperty.kt");
        }

        @TestMetadata("propertyTypeFromGetter.kt")
        public void testPropertyTypeFromGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/propertyTypeFromGetter.kt");
        }

        @TestMetadata("publicMember.kt")
        public void testPublicMember() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/publicMember.kt");
        }

        @TestMetadata("stringRedefined.kt")
        public void testStringRedefined() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/stringRedefined.kt");
        }

        @TestMetadata("typeAlias.kt")
        public void testTypeAlias() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/typeAlias.kt");
        }

        @TestMetadata("typeAlreadyProvided.kt")
        public void testTypeAlreadyProvided() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/typeAlreadyProvided.kt");
        }

        @TestMetadata("unitType.kt")
        public void testUnitType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/unitType.kt");
        }

        @TestMetadata("variableWithoutInitializer.kt")
        public void testVariableWithoutInitializer() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/variableWithoutInitializer.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/importAllMembers")
    public static class ImportAllMembers extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("AlreadyImported.kt")
        public void testAlreadyImported() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/AlreadyImported.kt");
        }

        @TestMetadata("AlreadyImportedWithStar.kt")
        public void testAlreadyImportedWithStar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/AlreadyImportedWithStar.kt");
        }

        @TestMetadata("AmbiguousCalls.kt")
        public void testAmbiguousCalls() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/AmbiguousCalls.kt");
        }

        @TestMetadata("EnumMembers.kt")
        public void testEnumMembers() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumMembers.kt");
        }

        @TestMetadata("EnumSyntheticMethods.kt")
        public void testEnumSyntheticMethods() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods.kt");
        }

        @TestMetadata("EnumSyntheticMethods10.kt")
        public void testEnumSyntheticMethods10() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods10.kt");
        }

        @TestMetadata("EnumSyntheticMethods11.kt")
        public void testEnumSyntheticMethods11() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods11.kt");
        }

        @TestMetadata("EnumSyntheticMethods12.kt")
        public void testEnumSyntheticMethods12() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods12.kt");
        }

        @TestMetadata("EnumSyntheticMethods13.kt")
        public void testEnumSyntheticMethods13() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods13.kt");
        }

        @TestMetadata("EnumSyntheticMethods2.kt")
        public void testEnumSyntheticMethods2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods2.kt");
        }

        @TestMetadata("EnumSyntheticMethods3.kt")
        public void testEnumSyntheticMethods3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods3.kt");
        }

        @TestMetadata("EnumSyntheticMethods4.kt")
        public void testEnumSyntheticMethods4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods4.kt");
        }

        @TestMetadata("EnumSyntheticMethods5.kt")
        public void testEnumSyntheticMethods5() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods5.kt");
        }

        @TestMetadata("EnumSyntheticMethods6.kt")
        public void testEnumSyntheticMethods6() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods6.kt");
        }

        @TestMetadata("EnumSyntheticMethods7.kt")
        public void testEnumSyntheticMethods7() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods7.kt");
        }

        @TestMetadata("EnumSyntheticMethods8.kt")
        public void testEnumSyntheticMethods8() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods8.kt");
        }

        @TestMetadata("EnumSyntheticMethods9.kt")
        public void testEnumSyntheticMethods9() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods9.kt");
        }

        @TestMetadata("ImportAllMembersInImport.kt")
        public void testImportAllMembersInImport() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/ImportAllMembersInImport.kt");
        }

        @TestMetadata("NotFromCompanionObject.kt")
        public void testNotFromCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/NotFromCompanionObject.kt");
        }

        @TestMetadata("NotFromObject.kt")
        public void testNotFromObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/NotFromObject.kt");
        }

        @TestMetadata("QualifiedName.kt")
        public void testQualifiedName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/QualifiedName.kt");
        }

        @TestMetadata("QualifiedName2.kt")
        public void testQualifiedName2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/QualifiedName2.kt");
        }

        @TestMetadata("RemoveSingleImports.kt")
        public void testRemoveSingleImports() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/RemoveSingleImports.kt");
        }

        @TestMetadata("StaticJavaMembers.kt")
        public void testStaticJavaMembers() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/StaticJavaMembers.kt");
        }

        @TestMetadata("TypeReference.kt")
        public void testTypeReference() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/TypeReference.kt");
        }

        @TestMetadata("TypeReference2.kt")
        public void testTypeReference2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/TypeReference2.kt");
        }

        @TestMetadata("UnresolvedMember.kt")
        public void testUnresolvedMember() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/UnresolvedMember.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/importMember")
    public static class ImportMember extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("AlreadyImportedSameNameClass.kt")
        public void testAlreadyImportedSameNameClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/AlreadyImportedSameNameClass.kt");
        }

        @TestMetadata("AlreadyImportedSameNameClass2.kt")
        public void testAlreadyImportedSameNameClass2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/AlreadyImportedSameNameClass2.kt");
        }

        @TestMetadata("ClassCallChain.kt")
        public void testClassCallChain() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ClassCallChain.kt");
        }

        @TestMetadata("ClassCallChain2.kt")
        public void testClassCallChain2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ClassCallChain2.kt");
        }

        @TestMetadata("ClassCallChain3.kt")
        public void testClassCallChain3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ClassCallChain3.kt");
        }

        @TestMetadata("EnumMember.kt")
        public void testEnumMember() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/EnumMember.kt");
        }

        @TestMetadata("FqReference.kt")
        public void testFqReference() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FqReference.kt");
        }

        @TestMetadata("FqReferenceCall.kt")
        public void testFqReferenceCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FqReferenceCall.kt");
        }

        @TestMetadata("FqReferenceForNestedMember.kt")
        public void testFqReferenceForNestedMember() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FqReferenceForNestedMember.kt");
        }

        @TestMetadata("FqReferenceForNestedMember2.kt")
        public void testFqReferenceForNestedMember2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FqReferenceForNestedMember2.kt");
        }

        @TestMetadata("FromCompanionObject.kt")
        public void testFromCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FromCompanionObject.kt");
        }

        @TestMetadata("ImportMemberInImport.kt")
        public void testImportMemberInImport() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ImportMemberInImport.kt");
        }

        @TestMetadata("ImportMemberInMiddleOfImport.kt")
        public void testImportMemberInMiddleOfImport() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ImportMemberInMiddleOfImport.kt");
        }

        @TestMetadata("NestedClass1.kt")
        public void testNestedClass1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NestedClass1.kt");
        }

        @TestMetadata("NestedClass2.kt")
        public void testNestedClass2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NestedClass2.kt");
        }

        @TestMetadata("NoTarget.kt")
        public void testNoTarget() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NoTarget.kt");
        }

        @TestMetadata("NotApplicablePackage.kt")
        public void testNotApplicablePackage() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NotApplicablePackage.kt");
        }

        @TestMetadata("NotForQualifier.kt")
        public void testNotForQualifier() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NotForQualifier.kt");
        }

        @TestMetadata("ObjectMethod.kt")
        public void testObjectMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ObjectMethod.kt");
        }

        @TestMetadata("StaticJavaField.kt")
        public void testStaticJavaField() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/StaticJavaField.kt");
        }

        @TestMetadata("StaticJavaMethod.kt")
        public void testStaticJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/StaticJavaMethod.kt");
        }

        @TestMetadata("TopLevelFun.kt")
        public void testTopLevelFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/TopLevelFun.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/chop")
    public abstract static class Chop extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/chop/argumentList")
        public static class ArgumentList extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("leftParOnSameLine.kt")
            public void testLeftParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/leftParOnSameLine.kt");
            }

            @TestMetadata("onArgument.kt")
            public void testOnArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onArgument.kt");
            }

            @TestMetadata("onArgumentName.kt")
            public void testOnArgumentName() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onArgumentName.kt");
            }

            @TestMetadata("onNestedArgumentList.kt")
            public void testOnNestedArgumentList() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onNestedArgumentList.kt");
            }

            @TestMetadata("onNestedArgumentList2.kt")
            public void testOnNestedArgumentList2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onNestedArgumentList2.kt");
            }

            @TestMetadata("onNestedArgumentList3.kt")
            public void testOnNestedArgumentList3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onNestedArgumentList3.kt");
            }

            @TestMetadata("onNestedArgumentList4.kt")
            public void testOnNestedArgumentList4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onNestedArgumentList4.kt");
            }

            @TestMetadata("onRightParenthesis.kt")
            public void testOnRightParenthesis() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onRightParenthesis.kt");
            }

            @TestMetadata("parOnSameLine.kt")
            public void testParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/parOnSameLine.kt");
            }

            @TestMetadata("rightParOnSameLine.kt")
            public void testRightParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/rightParOnSameLine.kt");
            }

            @TestMetadata("threeArgs.kt")
            public void testThreeArgs() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/threeArgs.kt");
            }

            @TestMetadata("threeArgsWithTrailingComma.kt")
            public void testThreeArgsWithTrailingComma() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/threeArgsWithTrailingComma.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/chop/parameterList")
        public static class ParameterList extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("hasAllLineBreaks.kt")
            public void testHasAllLineBreaks() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/hasAllLineBreaks.kt");
            }

            @TestMetadata("hasSomeLineBreaks1.kt")
            public void testHasSomeLineBreaks1() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/hasSomeLineBreaks1.kt");
            }

            @TestMetadata("hasSomeLineBreaks1WithTrailingComma.kt")
            public void testHasSomeLineBreaks1WithTrailingComma() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/hasSomeLineBreaks1WithTrailingComma.kt");
            }

            @TestMetadata("hasSomeLineBreaks2.kt")
            public void testHasSomeLineBreaks2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/hasSomeLineBreaks2.kt");
            }

            @TestMetadata("leftParOnSameLine.kt")
            public void testLeftParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/leftParOnSameLine.kt");
            }

            @TestMetadata("oneParameter.kt")
            public void testOneParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/oneParameter.kt");
            }

            @TestMetadata("parOnSameLine.kt")
            public void testParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/parOnSameLine.kt");
            }

            @TestMetadata("rightParOnSameLine.kt")
            public void testRightParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/rightParOnSameLine.kt");
            }

            @TestMetadata("threeParameters.kt")
            public void testThreeParameters() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/threeParameters.kt");
            }

            @TestMetadata("twoParameters.kt")
            public void testTwoParameters() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/twoParameters.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertConcatenationToBuildString")
    public static class ConvertConcatenationToBuildString extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/basic.kt");
        }

        @TestMetadata("inAnnotation.kt")
        public void testInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/inAnnotation.kt");
        }

        @TestMetadata("withComments.kt")
        public void testWithComments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments.kt");
        }

        @TestMetadata("withComments2.kt")
        public void testWithComments2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments2.kt");
        }

        @TestMetadata("withComments3.kt")
        public void testWithComments3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments3.kt");
        }

        @TestMetadata("withComments4.kt")
        public void testWithComments4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments4.kt");
        }

        @TestMetadata("withComments5.kt")
        public void testWithComments5() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments5.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertLambdaToReference")
    public abstract static class ConvertLambdaToReference extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/convertLambdaToReference")
        public static class Uncategorized extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("argumentWithReceiver.kt")
            public void testArgumentWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/argumentWithReceiver.kt");
            }

            @TestMetadata("argumentWithReceiver2.kt")
            public void testArgumentWithReceiver2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/argumentWithReceiver2.kt");
            }

            @TestMetadata("argumentWithReceiver3.kt")
            public void testArgumentWithReceiver3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/argumentWithReceiver3.kt");
            }

            @TestMetadata("argumentWithReceiver4.kt")
            public void testArgumentWithReceiver4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/argumentWithReceiver4.kt");
            }

            @TestMetadata("argumentWithReceiver5.kt")
            public void testArgumentWithReceiver5() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/argumentWithReceiver5.kt");
            }

            @TestMetadata("backtickEscaped.kt")
            public void testBacktickEscaped() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/backtickEscaped.kt");
            }

            @TestMetadata("backtickEscaped2.kt")
            public void testBacktickEscaped2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/backtickEscaped2.kt");
            }

            @TestMetadata("backtickWithBuck.kt")
            public void testBacktickWithBuck() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/backtickWithBuck.kt");
            }

            @TestMetadata("classReference.kt")
            public void testClassReference() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/classReference.kt");
            }

            @TestMetadata("classReference2.kt")
            public void testClassReference2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/classReference2.kt");
            }

            @TestMetadata("companion.kt")
            public void testCompanion() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/companion.kt");
            }

            @TestMetadata("companion2.kt")
            public void testCompanion2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/companion2.kt");
            }

            @TestMetadata("companion3.kt")
            public void testCompanion3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/companion3.kt");
            }

            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/constructor.kt");
            }

            @TestMetadata("constructor2.kt")
            public void testConstructor2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/constructor2.kt");
            }

            @TestMetadata("conversion.kt")
            public void testConversion() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/conversion.kt");
            }

            @TestMetadata("defaultArgument.kt")
            public void testDefaultArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultArgument.kt");
            }

            @TestMetadata("defaultArgument2.kt")
            public void testDefaultArgument2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultArgument2.kt");
            }

            @TestMetadata("defaultArgument3.kt")
            public void testDefaultArgument3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultArgument3.kt");
            }

            @TestMetadata("defaultArgument4.kt")
            public void testDefaultArgument4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultArgument4.kt");
            }

            @TestMetadata("defaultArgument5.kt")
            public void testDefaultArgument5() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultArgument5.kt");
            }

            @TestMetadata("defaultBeforeLambda.kt")
            public void testDefaultBeforeLambda() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultBeforeLambda.kt");
            }

            @TestMetadata("defaultConstructor.kt")
            public void testDefaultConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultConstructor.kt");
            }

            @TestMetadata("defaultNamed.kt")
            public void testDefaultNamed() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultNamed.kt");
            }

            @TestMetadata("defaultNamed2.kt")
            public void testDefaultNamed2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultNamed2.kt");
            }

            @TestMetadata("defaultNamed3.kt")
            public void testDefaultNamed3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultNamed3.kt");
            }

            @TestMetadata("defaultOverridden.kt")
            public void testDefaultOverridden() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultOverridden.kt");
            }

            @TestMetadata("defaultUnnamed.kt")
            public void testDefaultUnnamed() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultUnnamed.kt");
            }

            @TestMetadata("defaultUnnamed2.kt")
            public void testDefaultUnnamed2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultUnnamed2.kt");
            }

            @TestMetadata("defaultUnnamed3.kt")
            public void testDefaultUnnamed3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/defaultUnnamed3.kt");
            }

            @TestMetadata("differentReceiverType.kt")
            public void testDifferentReceiverType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/differentReceiverType.kt");
            }

            @TestMetadata("doubleChained.kt")
            public void testDoubleChained() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/doubleChained.kt");
            }

            @TestMetadata("emptyBrackets.kt")
            public void testEmptyBrackets() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/emptyBrackets.kt");
            }

            @TestMetadata("erasedReceiver.kt")
            public void testErasedReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/erasedReceiver.kt");
            }

            @TestMetadata("extension.kt")
            public void testExtension() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/extension.kt");
            }

            @TestMetadata("extensionOuterScope.kt")
            public void testExtensionOuterScope() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/extensionOuterScope.kt");
            }

            @TestMetadata("extensionProperty.kt")
            public void testExtensionProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/extensionProperty.kt");
            }

            @TestMetadata("extensionWithExplicitThis.kt")
            public void testExtensionWithExplicitThis() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/extensionWithExplicitThis.kt");
            }

            @TestMetadata("fqNameForReceiver.kt")
            public void testFqNameForReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/fqNameForReceiver.kt");
            }

            @TestMetadata("fullyQualifiedConstructorCall.kt")
            public void testFullyQualifiedConstructorCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/fullyQualifiedConstructorCall.kt");
            }

            @TestMetadata("fullyQualifiedFunctionCall.kt")
            public void testFullyQualifiedFunctionCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/fullyQualifiedFunctionCall.kt");
            }

            @TestMetadata("generic.kt")
            public void testGeneric() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/generic.kt");
            }

            @TestMetadata("generic2.kt")
            public void testGeneric2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/generic2.kt");
            }

            @TestMetadata("generic3.kt")
            public void testGeneric3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/generic3.kt");
            }

            @TestMetadata("generic4.kt")
            public void testGeneric4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/generic4.kt");
            }

            @TestMetadata("generic5.kt")
            public void testGeneric5() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/generic5.kt");
            }

            @TestMetadata("genericExtension.kt")
            public void testGenericExtension() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/genericExtension.kt");
            }

            @TestMetadata("genericExtension2.kt")
            public void testGenericExtension2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/genericExtension2.kt");
            }

            @TestMetadata("genericExtension3.kt")
            public void testGenericExtension3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/genericExtension3.kt");
            }

            @TestMetadata("genericExtension4.kt")
            public void testGenericExtension4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/genericExtension4.kt");
            }

            @TestMetadata("genericExtensionWithTypealias.kt")
            public void testGenericExtensionWithTypealias() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/genericExtensionWithTypealias.kt");
            }

            @TestMetadata("genericExtensionWithTypealias2.kt")
            public void testGenericExtensionWithTypealias2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/genericExtensionWithTypealias2.kt");
            }

            @TestMetadata("genericExtensionWithTypealias3.kt")
            public void testGenericExtensionWithTypealias3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/genericExtensionWithTypealias3.kt");
            }

            @TestMetadata("genericExtensionWithTypealias4.kt")
            public void testGenericExtensionWithTypealias4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/genericExtensionWithTypealias4.kt");
            }

            @TestMetadata("genericExtensionWithTypealias5.kt")
            public void testGenericExtensionWithTypealias5() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/genericExtensionWithTypealias5.kt");
            }

            @TestMetadata("globalProperty.kt")
            public void testGlobalProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/globalProperty.kt");
            }

            @TestMetadata("globalPropertyNoArgs.kt")
            public void testGlobalPropertyNoArgs() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/globalPropertyNoArgs.kt");
            }

            @TestMetadata("goodNamedOrder.kt")
            public void testGoodNamedOrder() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/goodNamedOrder.kt");
            }

            @TestMetadata("inAnonymousObject.kt")
            public void testInAnonymousObject() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/inAnonymousObject.kt");
            }

            @TestMetadata("inAnonymousObject2.kt")
            public void testInAnonymousObject2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/inAnonymousObject2.kt");
            }

            @TestMetadata("inner.kt")
            public void testInner() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/inner.kt");
            }

            @TestMetadata("invokeOperatorCall.kt")
            public void testInvokeOperatorCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/invokeOperatorCall.kt");
            }

            @TestMetadata("invokeOperatorCallWithReceiver.kt")
            public void testInvokeOperatorCallWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/invokeOperatorCallWithReceiver.kt");
            }

            @TestMetadata("javaStaticMethod.kt")
            public void testJavaStaticMethod() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/javaStaticMethod.kt");
            }

            @TestMetadata("labeledThis.kt")
            public void testLabeledThis() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/labeledThis.kt");
            }

            @TestMetadata("mapTo.kt")
            public void testMapTo() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/mapTo.kt");
            }

            @TestMetadata("mapToFqName.kt")
            public void testMapToFqName() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/mapToFqName.kt");
            }

            @TestMetadata("member.kt")
            public void testMember() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/member.kt");
            }

            @TestMetadata("memberExplicit.kt")
            public void testMemberExplicit() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/memberExplicit.kt");
            }

            @TestMetadata("memberExtension.kt")
            public void testMemberExtension() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/memberExtension.kt");
            }

            @TestMetadata("memberExternalParameter.kt")
            public void testMemberExternalParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/memberExternalParameter.kt");
            }

            @TestMetadata("memberInLambdaArgument.kt")
            public void testMemberInLambdaArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/memberInLambdaArgument.kt");
            }

            @TestMetadata("memberInScopeFunction.kt")
            public void testMemberInScopeFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/memberInScopeFunction.kt");
            }

            @TestMetadata("memberInScopeFunction2.kt")
            public void testMemberInScopeFunction2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/memberInScopeFunction2.kt");
            }

            @TestMetadata("memberOuterScope.kt")
            public void testMemberOuterScope() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/memberOuterScope.kt");
            }

            @TestMetadata("memberViaThis.kt")
            public void testMemberViaThis() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/memberViaThis.kt");
            }

            @TestMetadata("name.kt")
            public void testName() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/name.kt");
            }

            @TestMetadata("nestedLambda.kt")
            public void testNestedLambda() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/nestedLambda.kt");
            }

            @TestMetadata("nestedLambdaWithReceiver.kt")
            public void testNestedLambdaWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/nestedLambdaWithReceiver.kt");
            }

            @TestMetadata("nullable.kt")
            public void testNullable() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/nullable.kt");
            }

            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/object.kt");
            }

            @TestMetadata("object2.kt")
            public void testObject2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/object2.kt");
            }

            @TestMetadata("object3.kt")
            public void testObject3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/object3.kt");
            }

            @TestMetadata("outerClassFunction.kt")
            public void testOuterClassFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/outerClassFunction.kt");
            }

            @TestMetadata("overloadedFunctions.kt")
            public void testOverloadedFunctions() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/overloadedFunctions.kt");
            }

            @TestMetadata("overloadedFunctions2.kt")
            public void testOverloadedFunctions2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/overloadedFunctions2.kt");
            }

            @TestMetadata("overloadedFunctions3.kt")
            public void testOverloadedFunctions3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/overloadedFunctions3.kt");
            }

            @TestMetadata("overloadedFunctions4.kt")
            public void testOverloadedFunctions4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/overloadedFunctions4.kt");
            }

            @TestMetadata("overloadedFunctions5.kt")
            public void testOverloadedFunctions5() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/overloadedFunctions5.kt");
            }

            @TestMetadata("platformType.kt")
            public void testPlatformType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/platformType.kt");
            }

            @TestMetadata("receiverParameter.kt")
            public void testReceiverParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/receiverParameter.kt");
            }

            @TestMetadata("receiverParameter2.kt")
            public void testReceiverParameter2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/receiverParameter2.kt");
            }

            @TestMetadata("receiverParameter3.kt")
            public void testReceiverParameter3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/receiverParameter3.kt");
            }

            @TestMetadata("receiverParameterReversed.kt")
            public void testReceiverParameterReversed() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/receiverParameterReversed.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/simple.kt");
            }

            @TestMetadata("super.kt")
            public void testSuper() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/super.kt");
            }

            @TestMetadata("suspendFun.kt")
            public void testSuspendFun() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/suspendFun.kt");
            }

            @TestMetadata("suspendFunctionParameter.kt")
            public void testSuspendFunctionParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/suspendFunctionParameter.kt");
            }

            @TestMetadata("suspendFunctionParameter2.kt")
            public void testSuspendFunctionParameter2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/suspendFunctionParameter2.kt");
            }

            @TestMetadata("suspendFunctionParameter3.kt")
            public void testSuspendFunctionParameter3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/suspendFunctionParameter3.kt");
            }

            @TestMetadata("syntheticProperty.kt")
            public void testSyntheticProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/syntheticProperty.kt");
            }

            @TestMetadata("syntheticProperty_1_9.kt")
            public void testSyntheticProperty_1_9() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/syntheticProperty_1_9.kt");
            }

            @TestMetadata("threeParameters.kt")
            public void testThreeParameters() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/threeParameters.kt");
            }

            @TestMetadata("toString.kt")
            public void testToString() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/toString.kt");
            }

            @TestMetadata("typeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeAlias.kt");
            }

            @TestMetadata("typeAliasGenericInstance.kt")
            public void testTypeAliasGenericInstance() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeAliasGenericInstance.kt");
            }

            @TestMetadata("typeFromJava.kt")
            public void testTypeFromJava() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeFromJava.kt");
            }

            @TestMetadata("typeFromJavaFlexibleRecursive.kt")
            public void testTypeFromJavaFlexibleRecursive() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeFromJavaFlexibleRecursive.kt");
            }

            @TestMetadata("typeInferenceFromLambdaParameters.kt")
            public void testTypeInferenceFromLambdaParameters() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeInferenceFromLambdaParameters.kt");
            }

            @TestMetadata("typeInferenceFromLambdaParameters2.kt")
            public void testTypeInferenceFromLambdaParameters2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeInferenceFromLambdaParameters2.kt");
            }

            @TestMetadata("typeInferenceFromLambdaParameters3.kt")
            public void testTypeInferenceFromLambdaParameters3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeInferenceFromLambdaParameters3.kt");
            }

            @TestMetadata("typeInferenceFromLambdaParameters4.kt")
            public void testTypeInferenceFromLambdaParameters4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeInferenceFromLambdaParameters4.kt");
            }

            @TestMetadata("typeInferenceFromLambdaParameters5.kt")
            public void testTypeInferenceFromLambdaParameters5() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeInferenceFromLambdaParameters5.kt");
            }

            @TestMetadata("typeInferenceFromLambdaParameters6.kt")
            public void testTypeInferenceFromLambdaParameters6() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/typeInferenceFromLambdaParameters6.kt");
            }

            @TestMetadata("unit.kt")
            public void testUnit() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/unit.kt");
            }

            @TestMetadata("unit2.kt")
            public void testUnit2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/unit2.kt");
            }

            @TestMetadata("unitWithOverloadedFunctions.kt")
            public void testUnitWithOverloadedFunctions() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/unitWithOverloadedFunctions.kt");
            }

            @TestMetadata("unwrap.kt")
            public void testUnwrap() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/unwrap.kt");
            }

            @TestMetadata("varargFunction.kt")
            public void testVarargFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/varargFunction.kt");
            }

            @TestMetadata("varargFunction2.kt")
            public void testVarargFunction2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/varargFunction2.kt");
            }

            @TestMetadata("variableInvocation.kt")
            public void testVariableInvocation() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/variableInvocation.kt");
            }

            @TestMetadata("variableInvocationWithReceiver.kt")
            public void testVariableInvocationWithReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/variableInvocationWithReceiver.kt");
            }

            @TestMetadata("variableInvocationWithThisReceiver.kt")
            public void testVariableInvocationWithThisReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/variableInvocationWithThisReceiver.kt");
            }

            @TestMetadata("wrongNamedOrder.kt")
            public void testWrongNamedOrder() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/wrongNamedOrder.kt");
            }

            @TestMetadata("wrongParameterNumber.kt")
            public void testWrongParameterNumber() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/wrongParameterNumber.kt");
            }

            @TestMetadata("wrongParameterOrder.kt")
            public void testWrongParameterOrder() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/wrongParameterOrder.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1")
        public static class Version1_1 extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("extension.kt")
            public void testExtension() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/extension.kt");
            }

            @TestMetadata("extensionOuterScope.kt")
            public void testExtensionOuterScope() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/extensionOuterScope.kt");
            }

            @TestMetadata("inAnonymousObject.kt")
            public void testInAnonymousObject() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/inAnonymousObject.kt");
            }

            @TestMetadata("inAnonymousObject2.kt")
            public void testInAnonymousObject2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/inAnonymousObject2.kt");
            }

            @TestMetadata("member.kt")
            public void testMember() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/member.kt");
            }

            @TestMetadata("memberInLambdaArgument.kt")
            public void testMemberInLambdaArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/memberInLambdaArgument.kt");
            }

            @TestMetadata("memberInScopeFunction.kt")
            public void testMemberInScopeFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/memberInScopeFunction.kt");
            }

            @TestMetadata("memberInScopeFunction2.kt")
            public void testMemberInScopeFunction2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/memberInScopeFunction2.kt");
            }

            @TestMetadata("memberOuterScope.kt")
            public void testMemberOuterScope() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/memberOuterScope.kt");
            }

            @TestMetadata("outerClassFunction.kt")
            public void testOuterClassFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertLambdaToReference/version1_1/outerClassFunction.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString")
    public static class ConvertStringTemplateToBuildString extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/argument.kt");
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/basic.kt");
        }

        @TestMetadata("basic2.kt")
        public void testBasic2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/basic2.kt");
        }

        @TestMetadata("basic3.kt")
        public void testBasic3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/basic3.kt");
        }

        @TestMetadata("empty.kt")
        public void testEmpty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/empty.kt");
        }

        @TestMetadata("inAnnotation.kt")
        public void testInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/inAnnotation.kt");
        }

        @TestMetadata("raw.kt")
        public void testRaw() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/raw.kt");
        }

        @TestMetadata("slashBuck.kt")
        public void testSlashBuck() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/slashBuck.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertToBlockBody")
    public static class ConvertToBlockBody extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addSpace.kt")
        public void testAddSpace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/addSpace.kt");
        }

        @TestMetadata("adjustLineIndent.kt")
        public void testAdjustLineIndent() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/adjustLineIndent.kt");
        }

        @TestMetadata("annotatedExpr.kt")
        public void testAnnotatedExpr() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/annotatedExpr.kt");
        }

        @TestMetadata("annotatedExpr2.kt")
        public void testAnnotatedExpr2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/annotatedExpr2.kt");
        }

        @TestMetadata("annotatedExprInParentheses.kt")
        public void testAnnotatedExprInParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/annotatedExprInParentheses.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/comment.kt");
        }

        @TestMetadata("comment2.kt")
        public void testComment2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/comment2.kt");
        }

        @TestMetadata("comment3.kt")
        public void testComment3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/comment3.kt");
        }

        @TestMetadata("comment4.kt")
        public void testComment4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/comment4.kt");
        }

        @TestMetadata("explicitlyNonUnitFun.kt")
        public void testExplicitlyNonUnitFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyNonUnitFun.kt");
        }

        @TestMetadata("explicitlyTypedFunWithUnresolvedExpression.kt")
        public void testExplicitlyTypedFunWithUnresolvedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyTypedFunWithUnresolvedExpression.kt");
        }

        @TestMetadata("explicitlyTypedFunWithUnresolvedType.kt")
        public void testExplicitlyTypedFunWithUnresolvedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyTypedFunWithUnresolvedType.kt");
        }

        @TestMetadata("explicitlyUnitFun.kt")
        public void testExplicitlyUnitFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyUnitFun.kt");
        }

        @TestMetadata("explicitlyUnitFunWithUnresolvedExpression.kt")
        public void testExplicitlyUnitFunWithUnresolvedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyUnitFunWithUnresolvedExpression.kt");
        }

        @TestMetadata("funWithCustomUnitClass.kt")
        public void testFunWithCustomUnitClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/funWithCustomUnitClass.kt");
        }

        @TestMetadata("funWithThrow.kt")
        public void testFunWithThrow() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/funWithThrow.kt");
        }

        @TestMetadata("funWithUnit.kt")
        public void testFunWithUnit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/funWithUnit.kt");
        }

        @TestMetadata("getter.kt")
        public void testGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getter.kt");
        }

        @TestMetadata("getterTypeInferred.kt")
        public void testGetterTypeInferred() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterTypeInferred.kt");
        }

        @TestMetadata("getterWithComment.kt")
        public void testGetterWithComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithComment.kt");
        }

        @TestMetadata("getterWithComment2.kt")
        public void testGetterWithComment2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithComment2.kt");
        }

        @TestMetadata("getterWithComment3.kt")
        public void testGetterWithComment3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithComment3.kt");
        }

        @TestMetadata("getterWithComment4.kt")
        public void testGetterWithComment4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithComment4.kt");
        }

        @TestMetadata("getterWithThrow.kt")
        public void testGetterWithThrow() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithThrow.kt");
        }

        @TestMetadata("ifWhenUnit.kt")
        public void testIfWhenUnit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/ifWhenUnit.kt");
        }

        @TestMetadata("implicitlyNonUnitFun.kt")
        public void testImplicitlyNonUnitFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/implicitlyNonUnitFun.kt");
        }

        @TestMetadata("implicitlyNonUnitFun2.kt")
        public void testImplicitlyNonUnitFun2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/implicitlyNonUnitFun2.kt");
        }

        @TestMetadata("implicitlyTypedFunWithUnresolvedPrimitiveType.kt")
        public void testImplicitlyTypedFunWithUnresolvedPrimitiveType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/implicitlyTypedFunWithUnresolvedPrimitiveType.kt");
        }

        @TestMetadata("implicitlyTypedFunWithUnresolvedType.kt")
        public void testImplicitlyTypedFunWithUnresolvedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/implicitlyTypedFunWithUnresolvedType.kt");
        }

        @TestMetadata("implicitlyUnitFun.kt")
        public void testImplicitlyUnitFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/implicitlyUnitFun.kt");
        }

        @TestMetadata("labeledExpr.kt")
        public void testLabeledExpr() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/labeledExpr.kt");
        }

        @TestMetadata("labeledExprInParentheses.kt")
        public void testLabeledExprInParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/labeledExprInParentheses.kt");
        }

        @TestMetadata("nothingFun.kt")
        public void testNothingFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/nothingFun.kt");
        }

        @TestMetadata("nullableNothing.kt")
        public void testNullableNothing() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/nullableNothing.kt");
        }

        @TestMetadata("overrideWithPlatformType.kt")
        public void testOverrideWithPlatformType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/overrideWithPlatformType.kt");
        }

        @TestMetadata("setter.kt")
        public void testSetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/setter.kt");
        }

        @TestMetadata("valueIsAnonymousObject.kt")
        public void testValueIsAnonymousObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/valueIsAnonymousObject.kt");
        }

        @TestMetadata("valueIsAnonymousObject2.kt")
        public void testValueIsAnonymousObject2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/valueIsAnonymousObject2.kt");
        }

        @TestMetadata("valueIsAnonymousObject3.kt")
        public void testValueIsAnonymousObject3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/valueIsAnonymousObject3.kt");
        }

        @TestMetadata("valueIsAnonymousObject4.kt")
        public void testValueIsAnonymousObject4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/valueIsAnonymousObject4.kt");
        }

        @TestMetadata("whenUnit.kt")
        public void testWhenUnit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/whenUnit.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addWhenRemainingBranches")
    public static class AddWhenRemainingBranches extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("emptyWhen.kt")
        public void testEmptyWhen() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addWhenRemainingBranches/emptyWhen.kt");
        }

        @TestMetadata("noElse.kt")
        public void testNoElse() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addWhenRemainingBranches/noElse.kt");
        }

        @TestMetadata("noRemainingBranches.kt")
        public void testNoRemainingBranches() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addWhenRemainingBranches/noRemainingBranches.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addWhenRemainingBranches/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertToConcatenatedString")
    public static class ConvertToConcatenatedString extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("embeddedIf.kt")
        public void testEmbeddedIf() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/embeddedIf.kt");
        }

        @TestMetadata("embeddedIfBraces.kt")
        public void testEmbeddedIfBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/embeddedIfBraces.kt");
        }

        @TestMetadata("embeddedIfSingle.kt")
        public void testEmbeddedIfSingle() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/embeddedIfSingle.kt");
        }

        @TestMetadata("emptyBraces.kt")
        public void testEmptyBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/emptyBraces.kt");
        }

        @TestMetadata("handlesEscapeString.kt")
        public void testHandlesEscapeString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/handlesEscapeString.kt");
        }

        @TestMetadata("hasEmbeddedConcatenation.kt")
        public void testHasEmbeddedConcatenation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasEmbeddedConcatenation.kt");
        }

        @TestMetadata("hasEmbeddedHigherPrecedence.kt")
        public void testHasEmbeddedHigherPrecedence() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasEmbeddedHigherPrecedence.kt");
        }

        @TestMetadata("hasEmbeddedLowerPrecedence.kt")
        public void testHasEmbeddedLowerPrecedence() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasEmbeddedLowerPrecedence.kt");
        }

        @TestMetadata("hasEmptyTemplateEntry.kt")
        public void testHasEmptyTemplateEntry() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasEmptyTemplateEntry.kt");
        }

        @TestMetadata("hasParenthesesInTemplateEntry.kt")
        public void testHasParenthesesInTemplateEntry() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasParenthesesInTemplateEntry.kt");
        }

        @TestMetadata("hasPlusSign.kt")
        public void testHasPlusSign() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasPlusSign.kt");
        }

        @TestMetadata("hasPlusSignInRawString.kt")
        public void testHasPlusSignInRawString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasPlusSignInRawString.kt");
        }

        @TestMetadata("interpolate2StringConstants.kt")
        public void testInterpolate2StringConstants() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolate2StringConstants.kt");
        }

        @TestMetadata("interpolate3.kt")
        public void testInterpolate3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolate3.kt");
        }

        @TestMetadata("interpolateChar.kt")
        public void testInterpolateChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateChar.kt");
        }

        @TestMetadata("interpolateConstants.kt")
        public void testInterpolateConstants() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateConstants.kt");
        }

        @TestMetadata("interpolateMapAccess.kt")
        public void testInterpolateMapAccess() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateMapAccess.kt");
        }

        @TestMetadata("interpolateMethodInvoke.kt")
        public void testInterpolateMethodInvoke() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateMethodInvoke.kt");
        }

        @TestMetadata("interpolateSimpleWithBraces.kt")
        public void testInterpolateSimpleWithBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateSimpleWithBraces.kt");
        }

        @TestMetadata("interpolateStringWithFloat.kt")
        public void testInterpolateStringWithFloat() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateStringWithFloat.kt");
        }

        @TestMetadata("interpolateStringWithInt.kt")
        public void testInterpolateStringWithInt() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateStringWithInt.kt");
        }

        @TestMetadata("lastExprIsNamedExpression.kt")
        public void testLastExprIsNamedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/lastExprIsNamedExpression.kt");
        }

        @TestMetadata("multilineString.kt")
        public void testMultilineString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/multilineString.kt");
        }

        @TestMetadata("multilineWhenExpr.kt")
        public void testMultilineWhenExpr() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/multilineWhenExpr.kt");
        }

        @TestMetadata("namedExprBetweenConstants.kt")
        public void testNamedExprBetweenConstants() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/namedExprBetweenConstants.kt");
        }

        @TestMetadata("notApplicableForErrorElement.kt")
        public void testNotApplicableForErrorElement() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/notApplicableForErrorElement.kt");
        }

        @TestMetadata("notApplicableForSimple.kt")
        public void testNotApplicableForSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/notApplicableForSimple.kt");
        }

        @TestMetadata("notAvailableForDollarSignLiteral.kt")
        public void testNotAvailableForDollarSignLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/notAvailableForDollarSignLiteral.kt");
        }

        @TestMetadata("singleVar.kt")
        public void testSingleVar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/singleVar.kt");
        }

        @TestMetadata("startsWithAnnotatedExpression.kt")
        public void testStartsWithAnnotatedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithAnnotatedExpression.kt");
        }

        @TestMetadata("startsWithEmbeddedConcatenation.kt")
        public void testStartsWithEmbeddedConcatenation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithEmbeddedConcatenation.kt");
        }

        @TestMetadata("startsWithInt.kt")
        public void testStartsWithInt() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithInt.kt");
        }

        @TestMetadata("startsWithPostfixExpression.kt")
        public void testStartsWithPostfixExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithPostfixExpression.kt");
        }

        @TestMetadata("startsWithStringExpression.kt")
        public void testStartsWithStringExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithStringExpression.kt");
        }

        @TestMetadata("stringTemplateInCurryBraces.kt")
        public void testStringTemplateInCurryBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/stringTemplateInCurryBraces.kt");
        }

        @TestMetadata("tricky.kt")
        public void testTricky() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/tricky.kt");
        }

        @TestMetadata("withAndWithoutBraces.kt")
        public void testWithAndWithoutBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/withAndWithoutBraces.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertToStringTemplate")
    public static class ConvertToStringTemplate extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("backslashNMultilineString.kt")
        public void testBackslashNMultilineString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/backslashNMultilineString.kt");
        }

        @TestMetadata("combineEmptyStrings.kt")
        public void testCombineEmptyStrings() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/combineEmptyStrings.kt");
        }

        @TestMetadata("combinesNonStringsAsStrings.kt")
        public void testCombinesNonStringsAsStrings() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/combinesNonStringsAsStrings.kt");
        }

        @TestMetadata("combinesNonStringsAsStrings2.kt")
        public void testCombinesNonStringsAsStrings2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/combinesNonStringsAsStrings2.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/comment.kt");
        }

        @TestMetadata("consecutiveNewlines.kt")
        public void testConsecutiveNewlines() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/consecutiveNewlines.kt");
        }

        @TestMetadata("doesNotCorruptExistingTemplate.kt")
        public void testDoesNotCorruptExistingTemplate() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/doesNotCorruptExistingTemplate.kt");
        }

        @TestMetadata("doesNotCorruptExistingTemplateWithBraces.kt")
        public void testDoesNotCorruptExistingTemplateWithBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/doesNotCorruptExistingTemplateWithBraces.kt");
        }

        @TestMetadata("dollarSignBeforeLeftBrace.kt")
        public void testDollarSignBeforeLeftBrace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/dollarSignBeforeLeftBrace.kt");
        }

        @TestMetadata("dollarSignBeforeRightBrace.kt")
        public void testDollarSignBeforeRightBrace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/dollarSignBeforeRightBrace.kt");
        }

        @TestMetadata("dollarSignChar.kt")
        public void testDollarSignChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/dollarSignChar.kt");
        }

        @TestMetadata("endOfLineComment.kt")
        public void testEndOfLineComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/endOfLineComment.kt");
        }

        @TestMetadata("escapedQuote.kt")
        public void testEscapedQuote() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/escapedQuote.kt");
        }

        @TestMetadata("escapedQuote2.kt")
        public void testEscapedQuote2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/escapedQuote2.kt");
        }

        @TestMetadata("insertBracesForSimpleNamedExpression.kt")
        public void testInsertBracesForSimpleNamedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/insertBracesForSimpleNamedExpression.kt");
        }

        @TestMetadata("intToString.kt")
        public void testIntToString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/intToString.kt");
        }

        @TestMetadata("interpolate2StringConstants.kt")
        public void testInterpolate2StringConstants() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolate2StringConstants.kt");
        }

        @TestMetadata("interpolate2Vals.kt")
        public void testInterpolate2Vals() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolate2Vals.kt");
        }

        @TestMetadata("interpolate3Left.kt")
        public void testInterpolate3Left() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolate3Left.kt");
        }

        @TestMetadata("interpolate3Right.kt")
        public void testInterpolate3Right() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolate3Right.kt");
        }

        @TestMetadata("interpolateChar.kt")
        public void testInterpolateChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateChar.kt");
        }

        @TestMetadata("interpolateDollarSign.kt")
        public void testInterpolateDollarSign() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateDollarSign.kt");
        }

        @TestMetadata("interpolateMapAccess.kt")
        public void testInterpolateMapAccess() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateMapAccess.kt");
        }

        @TestMetadata("interpolateMethodInvoke.kt")
        public void testInterpolateMethodInvoke() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateMethodInvoke.kt");
        }

        @TestMetadata("interpolateMultiline.kt")
        public void testInterpolateMultiline() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateMultiline.kt");
        }

        @TestMetadata("interpolateStringWithFloat.kt")
        public void testInterpolateStringWithFloat() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateStringWithFloat.kt");
        }

        @TestMetadata("interpolateStringWithInt.kt")
        public void testInterpolateStringWithInt() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateStringWithInt.kt");
        }

        @TestMetadata("invalidChar.kt")
        public void testInvalidChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/invalidChar.kt");
        }

        @TestMetadata("kt11295.kt")
        public void testKt11295() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/kt11295.kt");
        }

        @TestMetadata("lambdaInParentheses.kt")
        public void testLambdaInParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/lambdaInParentheses.kt");
        }

        @TestMetadata("lambdaWithLabel.kt")
        public void testLambdaWithLabel() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/lambdaWithLabel.kt");
        }

        @TestMetadata("lambdaWithLabelInParentheses.kt")
        public void testLambdaWithLabelInParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/lambdaWithLabelInParentheses.kt");
        }

        @TestMetadata("longTemplatePlusStringLiteral.kt")
        public void testLongTemplatePlusStringLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/longTemplatePlusStringLiteral.kt");
        }

        @TestMetadata("multilineString.kt")
        public void testMultilineString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/multilineString.kt");
        }

        @TestMetadata("newLine.kt")
        public void testNewLine() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/newLine.kt");
        }

        @TestMetadata("noBracesForLastSimpleExpression.kt")
        public void testNoBracesForLastSimpleExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/noBracesForLastSimpleExpression.kt");
        }

        @TestMetadata("noBracesSimpleFollowedByDot.kt")
        public void testNoBracesSimpleFollowedByDot() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/noBracesSimpleFollowedByDot.kt");
        }

        @TestMetadata("notApplicableForErrorElement.kt")
        public void testNotApplicableForErrorElement() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/notApplicableForErrorElement.kt");
        }

        @TestMetadata("numberLiterals.kt")
        public void testNumberLiterals() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/numberLiterals.kt");
        }

        @TestMetadata("onMultipleLines.kt")
        public void testOnMultipleLines() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/onMultipleLines.kt");
        }

        @TestMetadata("onlyForConcat.kt")
        public void testOnlyForConcat() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/onlyForConcat.kt");
        }

        @TestMetadata("onlyForStrings.kt")
        public void testOnlyForStrings() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/onlyForStrings.kt");
        }

        @TestMetadata("plusOperatorReturnsString.kt")
        public void testPlusOperatorReturnsString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/plusOperatorReturnsString.kt");
        }

        @TestMetadata("requiresPlusOperator.kt")
        public void testRequiresPlusOperator() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/requiresPlusOperator.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/simple.kt");
        }

        @TestMetadata("specialCharsInCharLiteral.kt")
        public void testSpecialCharsInCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/specialCharsInCharLiteral.kt");
        }

        @TestMetadata("startsWithNullableVariable.kt")
        public void testStartsWithNullableVariable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/startsWithNullableVariable.kt");
        }

        @TestMetadata("stringPlusStringLiteral.kt")
        public void testStringPlusStringLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/stringPlusStringLiteral.kt");
        }

        @TestMetadata("superToString.kt")
        public void testSuperToString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/superToString.kt");
        }

        @TestMetadata("templatePlusStringLiteral.kt")
        public void testTemplatePlusStringLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/templatePlusStringLiteral.kt");
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/this.kt");
        }

        @TestMetadata("this2.kt")
        public void testThis2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/this2.kt");
        }

        @TestMetadata("this3.kt")
        public void testThis3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/this3.kt");
        }

        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/toString.kt");
        }

        @TestMetadata("tricky.kt")
        public void testTricky() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/tricky.kt");
        }

        @TestMetadata("unescapeSingleQuote.kt")
        public void testUnescapeSingleQuote() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/unescapeSingleQuote.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertReferenceToLambda")
    public static class ConvertReferenceToLambda extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("apply.kt")
        public void testApply() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/apply.kt");
        }

        @TestMetadata("boundReference.kt")
        public void testBoundReference() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/boundReference.kt");
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/companion.kt");
        }

        @TestMetadata("companionNoImport.kt")
        public void testCompanionNoImport() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/companionNoImport.kt");
        }

        @TestMetadata("companionNoImport2.kt")
        public void testCompanionNoImport2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/companionNoImport2.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/constructor.kt");
        }

        @TestMetadata("conversion.kt")
        public void testConversion() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/conversion.kt");
        }

        @TestMetadata("extensionFunctionalType.kt")
        public void testExtensionFunctionalType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/extensionFunctionalType.kt");
        }

        @TestMetadata("extensionProperty.kt")
        public void testExtensionProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/extensionProperty.kt");
        }

        @TestMetadata("extensionWithoutQualifier.kt")
        public void testExtensionWithoutQualifier() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/extensionWithoutQualifier.kt");
        }

        @TestMetadata("extensionWithoutQualifier2.kt")
        public void testExtensionWithoutQualifier2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/extensionWithoutQualifier2.kt");
        }

        @TestMetadata("extensionWithoutQualifier3.kt")
        public void testExtensionWithoutQualifier3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/extensionWithoutQualifier3.kt");
        }

        @TestMetadata("extensionWithoutReferenceToThis.kt")
        public void testExtensionWithoutReferenceToThis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/extensionWithoutReferenceToThis.kt");
        }

        @TestMetadata("fqNameForReceiver.kt")
        public void testFqNameForReceiver() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/fqNameForReceiver.kt");
        }

        @TestMetadata("if1.kt")
        public void testIf1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/if1.kt");
        }

        @TestMetadata("if2.kt")
        public void testIf2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/if2.kt");
        }

        @TestMetadata("if3.kt")
        public void testIf3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/if3.kt");
        }

        @TestMetadata("if4.kt")
        public void testIf4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/if4.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/inner.kt");
        }

        @TestMetadata("itClash.kt")
        public void testItClash() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/itClash.kt");
        }

        @TestMetadata("kfunction.kt")
        public void testKfunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/kfunction.kt");
        }

        @TestMetadata("kproperty.kt")
        public void testKproperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/kproperty.kt");
        }

        @TestMetadata("kproperty0.kt")
        public void testKproperty0() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/kproperty0.kt");
        }

        @TestMetadata("length.kt")
        public void testLength() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/length.kt");
        }

        @TestMetadata("member.kt")
        public void testMember() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/member.kt");
        }

        @TestMetadata("multipleLambdaArgumentsAreNotMovedOutsideParentheses.kt")
        public void testMultipleLambdaArgumentsAreNotMovedOutsideParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/multipleLambdaArgumentsAreNotMovedOutsideParentheses.kt");
        }

        @TestMetadata("name.kt")
        public void testName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/name.kt");
        }

        @TestMetadata("namedLambdaArgumentIsNotMovedOutsideParentheses.kt")
        public void testNamedLambdaArgumentIsNotMovedOutsideParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/namedLambdaArgumentIsNotMovedOutsideParentheses.kt");
        }

        @TestMetadata("nestedLambdaWithReceiver.kt")
        public void testNestedLambdaWithReceiver() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/nestedLambdaWithReceiver.kt");
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/nullable.kt");
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/object.kt");
        }

        @TestMetadata("receiverParameter.kt")
        public void testReceiverParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/receiverParameter.kt");
        }

        @TestMetadata("referencedFunctionWithDefaultArugment.kt")
        public void testReferencedFunctionWithDefaultArugment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/referencedFunctionWithDefaultArugment.kt");
        }

        @TestMetadata("referencedFunctionWithDefaultArugment2.kt")
        public void testReferencedFunctionWithDefaultArugment2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/referencedFunctionWithDefaultArugment2.kt");
        }

        @TestMetadata("referencedFunctionWithDefaultArugment3.kt")
        public void testReferencedFunctionWithDefaultArugment3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/referencedFunctionWithDefaultArugment3.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/simple.kt");
        }

        @TestMetadata("static.kt")
        public void testStatic() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/static.kt");
        }

        @TestMetadata("staticTwoParameters.kt")
        public void testStaticTwoParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/staticTwoParameters.kt");
        }

        @TestMetadata("syntheticProperty.kt")
        public void testSyntheticProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/syntheticProperty.kt");
        }

        @TestMetadata("threeParameters.kt")
        public void testThreeParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/threeParameters.kt");
        }

        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/toString.kt");
        }

        @TestMetadata("unwrap.kt")
        public void testUnwrap() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/unwrap.kt");
        }

        @TestMetadata("when1.kt")
        public void testWhen1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/when1.kt");
        }

        @TestMetadata("when2.kt")
        public void testWhen2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/when2.kt");
        }

        @TestMetadata("when3.kt")
        public void testWhen3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/when3.kt");
        }

        @TestMetadata("when4.kt")
        public void testWhen4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/when4.kt");
        }

        @TestMetadata("withReceiver.kt")
        public void testWithReceiver() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertReferenceToLambda/withReceiver.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/declarations/split")
    public static class Split extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("anonymousFunction.kt")
        public void testAnonymousFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/anonymousFunction.kt");
        }

        @TestMetadata("genericType.kt")
        public void testGenericType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/genericType.kt");
        }

        @TestMetadata("longInit.kt")
        public void testLongInit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/longInit.kt");
        }

        @TestMetadata("longInit2.kt")
        public void testLongInit2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/longInit2.kt");
        }

        @TestMetadata("noInitializer.kt")
        public void testNoInitializer() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/noInitializer.kt");
        }

        @TestMetadata("noInitializer2.kt")
        public void testNoInitializer2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/noInitializer2.kt");
        }

        @TestMetadata("nonLocalProperty.kt")
        public void testNonLocalProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/nonLocalProperty.kt");
        }

        @TestMetadata("nonLocalProperty2.kt")
        public void testNonLocalProperty2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/nonLocalProperty2.kt");
        }

        @TestMetadata("simpleInit.kt")
        public void testSimpleInit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/simpleInit.kt");
        }

        @TestMetadata("simpleInit2.kt")
        public void testSimpleInit2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/simpleInit2.kt");
        }

        @TestMetadata("simpleInitWithErrorType.kt")
        public void testSimpleInitWithErrorType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/simpleInitWithErrorType.kt");
        }

        @TestMetadata("simpleInitWithErrorType2.kt")
        public void testSimpleInitWithErrorType2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/simpleInitWithErrorType2.kt");
        }

        @TestMetadata("simpleInitWithType.kt")
        public void testSimpleInitWithType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/simpleInitWithType.kt");
        }

        @TestMetadata("simpleInitWithType2.kt")
        public void testSimpleInitWithType2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/simpleInitWithType2.kt");
        }

        @TestMetadata("whenSubject.kt")
        public void testWhenSubject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/declarations/split/whenSubject.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/removeExplicitType")
    public abstract static class RemoveExplicitType extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer")
        public static class LiteralConstantInitializer extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("byteWithIntLiteral.kt")
            public void testByteWithIntLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/byteWithIntLiteral.kt");
            }

            @TestMetadata("intWithIntLiteral.kt")
            public void testIntWithIntLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/intWithIntLiteral.kt");
            }

            @TestMetadata("longWithIntLiteral.kt")
            public void testLongWithIntLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/longWithIntLiteral.kt");
            }

            @TestMetadata("longWithLongLiteral.kt")
            public void testLongWithLongLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/longWithLongLiteral.kt");
            }

            @TestMetadata("nullableLongWithIntLiteral.kt")
            public void testNullableLongWithIntLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/nullableLongWithIntLiteral.kt");
            }

            @TestMetadata("nullableLongWithNull.kt")
            public void testNullableLongWithNull() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/nullableLongWithNull.kt");
            }

            @TestMetadata("nullablePairWithNull.kt")
            public void testNullablePairWithNull() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/nullablePairWithNull.kt");
            }

            @TestMetadata("shortWithIntLiteral.kt")
            public void testShortWithIntLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/shortWithIntLiteral.kt");
            }

            @TestMetadata("uLongWithUIntLiteral.kt")
            public void testULongWithUIntLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/uLongWithUIntLiteral.kt");
            }

            @TestMetadata("uLongWithUIntLiteral2.kt")
            public void testULongWithUIntLiteral2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/literalConstantInitializer/uLongWithUIntLiteral2.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/removeExplicitType")
        public static class Uncategorized extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("anonymousFunctionInitializer.kt")
            public void testAnonymousFunctionInitializer() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/anonymousFunctionInitializer.kt");
            }

            @TestMetadata("anonymousFunctionInitializer2.kt")
            public void testAnonymousFunctionInitializer2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/anonymousFunctionInitializer2.kt");
            }

            @TestMetadata("anonymousFunctionInitializer3.kt")
            public void testAnonymousFunctionInitializer3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/anonymousFunctionInitializer3.kt");
            }

            @TestMetadata("anonymousFunctionInitializerExtension.kt")
            public void testAnonymousFunctionInitializerExtension() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/anonymousFunctionInitializerExtension.kt");
            }

            @TestMetadata("anonymousFunctionInitializerInferredType.kt")
            public void testAnonymousFunctionInitializerInferredType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/anonymousFunctionInitializerInferredType.kt");
            }

            @TestMetadata("arrayAccessExpressionInitializer.kt")
            public void testArrayAccessExpressionInitializer() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/arrayAccessExpressionInitializer.kt");
            }

            @TestMetadata("arrayAccessExpressionInitializer2.kt")
            public void testArrayAccessExpressionInitializer2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/arrayAccessExpressionInitializer2.kt");
            }

            @TestMetadata("callableInitializerExplicitTypeArguments.kt")
            public void testCallableInitializerExplicitTypeArguments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerExplicitTypeArguments.kt");
            }

            @TestMetadata("callableInitializerImplicitTypeArguments.kt")
            public void testCallableInitializerImplicitTypeArguments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerImplicitTypeArguments.kt");
            }

            @TestMetadata("callableInitializerImplicitTypeArguments2.kt")
            public void testCallableInitializerImplicitTypeArguments2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerImplicitTypeArguments2.kt");
            }

            @TestMetadata("callableInitializerImplicitTypeArguments3.kt")
            public void testCallableInitializerImplicitTypeArguments3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerImplicitTypeArguments3.kt");
            }

            @TestMetadata("callableInitializerImplicitTypeArguments4.kt")
            public void testCallableInitializerImplicitTypeArguments4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerImplicitTypeArguments4.kt");
            }

            @TestMetadata("callableReferenceExpressionInitializer.kt")
            public void testCallableReferenceExpressionInitializer() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableReferenceExpressionInitializer.kt");
            }

            @TestMetadata("callableReferenceExpressionInitializer2.kt")
            public void testCallableReferenceExpressionInitializer2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableReferenceExpressionInitializer2.kt");
            }

            @TestMetadata("callableReferenceExpressionInitializer3.kt")
            public void testCallableReferenceExpressionInitializer3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableReferenceExpressionInitializer3.kt");
            }

            @TestMetadata("callableReferenceExpressionInitializer4.kt")
            public void testCallableReferenceExpressionInitializer4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableReferenceExpressionInitializer4.kt");
            }

            @TestMetadata("constantExpressionInitializer.kt")
            public void testConstantExpressionInitializer() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/constantExpressionInitializer.kt");
            }

            @TestMetadata("constantExpressionInitializerVar.kt")
            public void testConstantExpressionInitializerVar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/constantExpressionInitializerVar.kt");
            }

            @TestMetadata("dotQualifiedInitializer.kt")
            public void testDotQualifiedInitializer() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/dotQualifiedInitializer.kt");
            }

            @TestMetadata("dotQualifiedInitializer2.kt")
            public void testDotQualifiedInitializer2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/dotQualifiedInitializer2.kt");
            }

            @TestMetadata("explicitTypeIsAlias.kt")
            public void testExplicitTypeIsAlias() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/explicitTypeIsAlias.kt");
            }

            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/extensionFunction.kt");
            }

            @TestMetadata("extensionFunction2.kt")
            public void testExtensionFunction2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/extensionFunction2.kt");
            }

            @TestMetadata("funNoBody.kt")
            public void testFunNoBody() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/funNoBody.kt");
            }

            @TestMetadata("funWithBody.kt")
            public void testFunWithBody() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/funWithBody.kt");
            }

            @TestMetadata("funWithBody2.kt")
            public void testFunWithBody2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/funWithBody2.kt");
            }

            @TestMetadata("hasAnnotation.kt")
            public void testHasAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/hasAnnotation.kt");
            }

            @TestMetadata("hasAnnotationOnTypeArgument.kt")
            public void testHasAnnotationOnTypeArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/hasAnnotationOnTypeArgument.kt");
            }

            @TestMetadata("hasAnnotationOnTypeArgument2.kt")
            public void testHasAnnotationOnTypeArgument2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/hasAnnotationOnTypeArgument2.kt");
            }

            @TestMetadata("hasAnnotationOnTypeArgument3.kt")
            public void testHasAnnotationOnTypeArgument3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/hasAnnotationOnTypeArgument3.kt");
            }

            @TestMetadata("implicitTypeIsSubtypeOfExplicitType.kt")
            public void testImplicitTypeIsSubtypeOfExplicitType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/implicitTypeIsSubtypeOfExplicitType.kt");
            }

            @TestMetadata("implicitTypeIsSubtypeOfExplicitTypeVar.kt")
            public void testImplicitTypeIsSubtypeOfExplicitTypeVar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/implicitTypeIsSubtypeOfExplicitTypeVar.kt");
            }

            @TestMetadata("lambdaExpressionBody.kt")
            public void testLambdaExpressionBody() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaExpressionBody.kt");
            }

            @TestMetadata("lambdaInitializer.kt")
            public void testLambdaInitializer() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer.kt");
            }

            @TestMetadata("lambdaInitializer2.kt")
            public void testLambdaInitializer2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer2.kt");
            }

            @TestMetadata("lambdaInitializer3.kt")
            public void testLambdaInitializer3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer3.kt");
            }

            @TestMetadata("lambdaInitializer4.kt")
            public void testLambdaInitializer4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer4.kt");
            }

            @TestMetadata("lambdaInitializer5.kt")
            public void testLambdaInitializer5() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer5.kt");
            }

            @TestMetadata("lambdaInitializer6.kt")
            public void testLambdaInitializer6() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer6.kt");
            }

            @TestMetadata("lambdaInitializerWithAlias.kt")
            public void testLambdaInitializerWithAlias() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializerWithAlias.kt");
            }

            @TestMetadata("lambdaInitializerWithAlias2.kt")
            public void testLambdaInitializerWithAlias2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializerWithAlias2.kt");
            }

            @TestMetadata("lambdaInitializerWithTypeArgument.kt")
            public void testLambdaInitializerWithTypeArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializerWithTypeArgument.kt");
            }

            @TestMetadata("needTypeArgument.kt")
            public void testNeedTypeArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/needTypeArgument.kt");
            }

            @TestMetadata("needTypeArgument2.kt")
            public void testNeedTypeArgument2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/needTypeArgument2.kt");
            }

            @TestMetadata("needTypeArgument3.kt")
            public void testNeedTypeArgument3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/needTypeArgument3.kt");
            }

            @TestMetadata("needTypeArgumentInFunctionDefinition.kt")
            public void testNeedTypeArgumentInFunctionDefinition() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/needTypeArgumentInFunctionDefinition.kt");
            }

            @TestMetadata("notOnParameterOfFunctionType.kt")
            public void testNotOnParameterOfFunctionType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/notOnParameterOfFunctionType.kt");
            }

            @TestMetadata("notOnSetterParameter.kt")
            public void testNotOnSetterParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/notOnSetterParameter.kt");
            }

            @TestMetadata("nullableExplicitType.kt")
            public void testNullableExplicitType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/nullableExplicitType.kt");
            }

            @TestMetadata("nullableExplicitTypeVar.kt")
            public void testNullableExplicitTypeVar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/nullableExplicitTypeVar.kt");
            }

            @TestMetadata("nullableExplicitTypeVar2.kt")
            public void testNullableExplicitTypeVar2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/nullableExplicitTypeVar2.kt");
            }

            @TestMetadata("nullableExplicitTypeVar3.kt")
            public void testNullableExplicitTypeVar3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/nullableExplicitTypeVar3.kt");
            }

            @TestMetadata("onLoopParameter.kt")
            public void testOnLoopParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/onLoopParameter.kt");
            }

            @TestMetadata("onOverride.kt")
            public void testOnOverride() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/onOverride.kt");
            }

            @TestMetadata("onOverrideInInterface.kt")
            public void testOnOverrideInInterface() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/onOverrideInInterface.kt");
            }

            @TestMetadata("onPropertyAccessor.kt")
            public void testOnPropertyAccessor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/onPropertyAccessor.kt");
            }

            @TestMetadata("onSetterParameter.kt")
            public void testOnSetterParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/onSetterParameter.kt");
            }

            @TestMetadata("onType.kt")
            public void testOnType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/onType.kt");
            }

            @TestMetadata("propertyTypeFromGetter.kt")
            public void testPropertyTypeFromGetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/propertyTypeFromGetter.kt");
            }

            @TestMetadata("referenceExpressionInitializer.kt")
            public void testReferenceExpressionInitializer() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/referenceExpressionInitializer.kt");
            }

            @TestMetadata("referenceExpressionInitializer2.kt")
            public void testReferenceExpressionInitializer2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/referenceExpressionInitializer2.kt");
            }

            @TestMetadata("removeUnresolvedType.kt")
            public void testRemoveUnresolvedType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/removeUnresolvedType.kt");
            }

            @TestMetadata("safeAccessInitializer.kt")
            public void testSafeAccessInitializer() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/safeAccessInitializer.kt");
            }

            @TestMetadata("stringInitializer.kt")
            public void testStringInitializer() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/stringInitializer.kt");
            }

            @TestMetadata("suspendFunction.kt")
            public void testSuspendFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/suspendFunction.kt");
            }

            @TestMetadata("varWithNull.kt")
            public void testVarWithNull() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeExplicitType/varWithNull.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument")
    public static class ReplaceUnderscoreWithTypeArgument extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("betweenLambdaArguments.kt")
        public void testBetweenLambdaArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/betweenLambdaArguments.kt");
        }

        @TestMetadata("blockValue.kt")
        public void testBlockValue() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/blockValue.kt");
        }

        @TestMetadata("importForArg.kt")
        public void testImportForArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/importForArg.kt");
        }

        @TestMetadata("inGetter.kt")
        public void testInGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inGetter.kt");
        }

        @TestMetadata("inapplicableNotGeneric.kt")
        public void testInapplicableNotGeneric() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotGeneric.kt");
        }

        @TestMetadata("inapplicableNotInCallable.kt")
        public void testInapplicableNotInCallable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotInCallable.kt");
        }

        @TestMetadata("inapplicableNotInCallable2.kt")
        public void testInapplicableNotInCallable2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotInCallable2.kt");
        }

        @TestMetadata("inapplicableNotInPlaceholder.kt")
        public void testInapplicableNotInPlaceholder() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotInPlaceholder.kt");
        }

        @TestMetadata("inapplicableNotType.kt")
        public void testInapplicableNotType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotType.kt");
        }

        @TestMetadata("inapplicableTypeCanNotBeInferred1.kt")
        public void testInapplicableTypeCanNotBeInferred1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableTypeCanNotBeInferred1.kt");
        }

        @TestMetadata("inapplicableTypeCanNotBeinferred2.kt")
        public void testInapplicableTypeCanNotBeinferred2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableTypeCanNotBeinferred2.kt");
        }

        @TestMetadata("inapplicableTypeCanNotBeinferred3.kt")
        public void testInapplicableTypeCanNotBeinferred3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableTypeCanNotBeinferred3.kt");
        }

        @TestMetadata("inapplicableTypeCanNotBeinferred4.kt")
        public void testInapplicableTypeCanNotBeinferred4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableTypeCanNotBeinferred4.kt");
        }

        @TestMetadata("inferredTypeFromElvis.kt")
        public void testInferredTypeFromElvis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inferredTypeFromElvis.kt");
        }

        @TestMetadata("inlineFun.kt")
        public void testInlineFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inlineFun.kt");
        }

        @TestMetadata("inlineFunWithRefied.kt")
        public void testInlineFunWithRefied() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inlineFunWithRefied.kt");
        }

        @TestMetadata("insideDeepOtherCall.kt")
        public void testInsideDeepOtherCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/insideDeepOtherCall.kt");
        }

        @TestMetadata("lambdaType.kt")
        public void testLambdaType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/lambdaType.kt");
        }

        @TestMetadata("oneFromManyTypes1.kt")
        public void testOneFromManyTypes1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/oneFromManyTypes1.kt");
        }

        @TestMetadata("oneFromManyTypes2.kt")
        public void testOneFromManyTypes2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/oneFromManyTypes2.kt");
        }

        @TestMetadata("oneFromManyTypesInDifferentOrder.kt")
        public void testOneFromManyTypesInDifferentOrder() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/oneFromManyTypesInDifferentOrder.kt");
        }

        @TestMetadata("replaceWithAny.kt")
        public void testReplaceWithAny() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/replaceWithAny.kt");
        }

        @TestMetadata("replaceWithClashingName.kt")
        public void testReplaceWithClashingName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/replaceWithClashingName.kt");
        }

        @TestMetadata("replaceWithFunctionType.kt")
        public void testReplaceWithFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/replaceWithFunctionType.kt");
        }

        @TestMetadata("replaceWithGenericType.kt")
        public void testReplaceWithGenericType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/replaceWithGenericType.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/simple.kt");
        }

        @TestMetadata("typeWithVarargs.kt")
        public void testTypeWithVarargs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/typeWithVarargs.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertForEachToForLoop")
    public abstract static class ConvertForEachToForLoop extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed")
        public static class ForEachIndexed extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("implicitReceiver.kt")
            public void testImplicitReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/implicitReceiver.kt");
            }

            @TestMetadata("implicitReceiverWithMultipleReceivers.kt")
            public void testImplicitReceiverWithMultipleReceivers() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/implicitReceiverWithMultipleReceivers.kt");
            }

            @TestMetadata("labeledReturn.kt")
            public void testLabeledReturn() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/labeledReturn.kt");
            }

            @TestMetadata("list.kt")
            public void testList() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/list.kt");
            }

            @TestMetadata("nullableReceiver.kt")
            public void testNullableReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/nullableReceiver.kt");
            }

            @TestMetadata("range.kt")
            public void testRange() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/range.kt");
            }

            @TestMetadata("returnFromNestedForLoop.kt")
            public void testReturnFromNestedForLoop() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/returnFromNestedForLoop.kt");
            }

            @TestMetadata("sequence.kt")
            public void testSequence() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/sequence.kt");
            }

            @TestMetadata("string.kt")
            public void testString() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/string.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/convertForEachToForLoop")
        public static class Uncategorized extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("complexReceiver.kt")
            public void testComplexReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/complexReceiver.kt");
            }

            @TestMetadata("explicitFunctionLiteral.kt")
            public void testExplicitFunctionLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/explicitFunctionLiteral.kt");
            }

            @TestMetadata("extraArguments.kt")
            public void testExtraArguments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/extraArguments.kt");
            }

            @TestMetadata("implicitFunctionLiteralParameter.kt")
            public void testImplicitFunctionLiteralParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/implicitFunctionLiteralParameter.kt");
            }

            @TestMetadata("implicitReceiver.kt")
            public void testImplicitReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/implicitReceiver.kt");
            }

            @TestMetadata("implicitReceiverWithMultipleReceivers.kt")
            public void testImplicitReceiverWithMultipleReceivers() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/implicitReceiverWithMultipleReceivers.kt");
            }

            @TestMetadata("keepComments.kt")
            public void testKeepComments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/keepComments.kt");
            }

            @TestMetadata("nullableReceiver.kt")
            public void testNullableReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/nullableReceiver.kt");
            }

            @TestMetadata("nullableReceiver2.kt")
            public void testNullableReceiver2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/nullableReceiver2.kt");
            }

            @TestMetadata("parenthesizedExpression.kt")
            public void testParenthesizedExpression() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/parenthesizedExpression.kt");
            }

            @TestMetadata("returnFromNestedForLoop.kt")
            public void testReturnFromNestedForLoop() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/returnFromNestedForLoop.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simple.kt");
            }

            @TestMetadata("simple2.kt")
            public void testSimple2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simple2.kt");
            }

            @TestMetadata("simpleCharSequence.kt")
            public void testSimpleCharSequence() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simpleCharSequence.kt");
            }

            @TestMetadata("simpleNotAvailable.kt")
            public void testSimpleNotAvailable() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simpleNotAvailable.kt");
            }

            @TestMetadata("simpleSequence.kt")
            public void testSimpleSequence() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simpleSequence.kt");
            }

            @TestMetadata("typeArgumentPresent.kt")
            public void testTypeArgumentPresent() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/typeArgumentPresent.kt");
            }

            @TestMetadata("usedAsExpression.kt")
            public void testUsedAsExpression() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/usedAsExpression.kt");
            }

            @TestMetadata("userDefined.kt")
            public void testUserDefined() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/userDefined.kt");
            }

            @TestMetadata("withNestedReturn.kt")
            public void testWithNestedReturn() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/withNestedReturn.kt");
            }

            @TestMetadata("withReturn.kt")
            public void testWithReturn() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/withReturn.kt");
            }

            @TestMetadata("zeroArguments.kt")
            public void testZeroArguments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/zeroArguments.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/joinArgumentList")
    public static class JoinArgumentList extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("hasEndOfLineComment.kt")
        public void testHasEndOfLineComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/hasEndOfLineComment.kt");
        }

        @TestMetadata("hasLineBreakBeforeFirstArg.kt")
        public void testHasLineBreakBeforeFirstArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/hasLineBreakBeforeFirstArg.kt");
        }

        @TestMetadata("hasLineBreaks.kt")
        public void testHasLineBreaks() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/hasLineBreaks.kt");
        }

        @TestMetadata("hasLineBreaksWithTrailingComma.kt")
        public void testHasLineBreaksWithTrailingComma() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/hasLineBreaksWithTrailingComma.kt");
        }

        @TestMetadata("noArg.kt")
        public void testNoArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/noArg.kt");
        }

        @TestMetadata("noLineBreak.kt")
        public void testNoLineBreak() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/noLineBreak.kt");
        }

        @TestMetadata("onArgument.kt")
        public void testOnArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onArgument.kt");
        }

        @TestMetadata("onArgumentName.kt")
        public void testOnArgumentName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onArgumentName.kt");
        }

        @TestMetadata("onNestedArgumentList.kt")
        public void testOnNestedArgumentList() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onNestedArgumentList.kt");
        }

        @TestMetadata("onNestedArgumentList2.kt")
        public void testOnNestedArgumentList2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onNestedArgumentList2.kt");
        }

        @TestMetadata("onNestedArgumentList3.kt")
        public void testOnNestedArgumentList3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onNestedArgumentList3.kt");
        }

        @TestMetadata("onNestedArgumentList4.kt")
        public void testOnNestedArgumentList4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onNestedArgumentList4.kt");
        }

        @TestMetadata("onRightParenthesis.kt")
        public void testOnRightParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onRightParenthesis.kt");
        }

        @TestMetadata("oneArg.kt")
        public void testOneArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/oneArg.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/joinParameterList")
    public static class JoinParameterList extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("hasEndOfLineComment.kt")
        public void testHasEndOfLineComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/hasEndOfLineComment.kt");
        }

        @TestMetadata("hasLineBreakBeforeFirstParam.kt")
        public void testHasLineBreakBeforeFirstParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/hasLineBreakBeforeFirstParam.kt");
        }

        @TestMetadata("hasLineBreaks.kt")
        public void testHasLineBreaks() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/hasLineBreaks.kt");
        }

        @TestMetadata("hasLineBreaksWithTrailingComma.kt")
        public void testHasLineBreaksWithTrailingComma() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/hasLineBreaksWithTrailingComma.kt");
        }

        @TestMetadata("longParameters.kt")
        public void testLongParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/longParameters.kt");
        }

        @TestMetadata("longParameters2.kt")
        public void testLongParameters2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/longParameters2.kt");
        }

        @TestMetadata("noLineBreak.kt")
        public void testNoLineBreak() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/noLineBreak.kt");
        }

        @TestMetadata("noParam.kt")
        public void testNoParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/noParam.kt");
        }

        @TestMetadata("oneParam.kt")
        public void testOneParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/oneParam.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments")
    public abstract static class AddNamesInCommentToJavaCallArguments extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides")
        public static class FakeOverrides extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("intersectionOverrideMethodCall.kt")
            public void testIntersectionOverrideMethodCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides/intersectionOverrideMethodCall.kt");
            }

            @TestMetadata("intersectionOverrideMethodCall2.kt")
            public void testIntersectionOverrideMethodCall2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides/intersectionOverrideMethodCall2.kt");
            }

            @TestMetadata("substitutionOverrideMethodCall.kt")
            public void testSubstitutionOverrideMethodCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides/substitutionOverrideMethodCall.kt");
            }

            @TestMetadata("substitutionOverrideMethodCall2.kt")
            public void testSubstitutionOverrideMethodCall2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides/substitutionOverrideMethodCall2.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments")
        public static class Uncategorized extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("constructorCall.kt")
            public void testConstructorCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/constructorCall.kt");
            }

            @TestMetadata("kotlinFunctionCall.kt")
            public void testKotlinFunctionCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/kotlinFunctionCall.kt");
            }

            @TestMetadata("kotlinMethodCallOverridingJavaMethod.kt")
            public void testKotlinMethodCallOverridingJavaMethod() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/kotlinMethodCallOverridingJavaMethod.kt");
            }

            @TestMetadata("methodCall.kt")
            public void testMethodCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCall.kt");
            }

            @TestMetadata("methodCallChained.kt")
            public void testMethodCallChained() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallChained.kt");
            }

            @TestMetadata("methodCallChained2.kt")
            public void testMethodCallChained2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallChained2.kt");
            }

            @TestMetadata("methodCallWithComments.kt")
            public void testMethodCallWithComments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithComments.kt");
            }

            @TestMetadata("methodCallWithComments2.kt")
            public void testMethodCallWithComments2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithComments2.kt");
            }

            @TestMetadata("methodCallWithLambdaArgument.kt")
            public void testMethodCallWithLambdaArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithLambdaArgument.kt");
            }

            @TestMetadata("methodCallWithLambdaArgumentOnly.kt")
            public void testMethodCallWithLambdaArgumentOnly() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithLambdaArgumentOnly.kt");
            }

            @TestMetadata("methodCallWithNoArguments.kt")
            public void testMethodCallWithNoArguments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithNoArguments.kt");
            }

            @TestMetadata("methodCallWithVararg.kt")
            public void testMethodCallWithVararg() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithVararg.kt");
            }

            @TestMetadata("partialNameComments.kt")
            public void testPartialNameComments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/partialNameComments.kt");
            }

            @TestMetadata("partialNameComments2.kt")
            public void testPartialNameComments2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/partialNameComments2.kt");
            }

            @TestMetadata("superTypeCall.kt")
            public void testSuperTypeCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/superTypeCall.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/trailingComma")
    public static class TrailingComma extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("valueParameterList.kt")
        public void testValueParameterList() throws Exception {
            runTest("../../../idea/tests/testData/intentions/trailingComma/valueParameterList.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/insertExplicitTypeArguments")
    public static class InsertExplicitTypeArguments extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inapplicableAlreadyTyped.kt")
        public void testInapplicableAlreadyTyped() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableAlreadyTyped.kt");
        }

        @TestMetadata("inapplicableDefinitelyNonNullableTypeToReifiedType.kt")
        public void testInapplicableDefinitelyNonNullableTypeToReifiedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableDefinitelyNonNullableTypeToReifiedType.kt");
        }

        @TestMetadata("inapplicableDefinitelyNonNullableTypeToReifiedTypeWithOtherArguments.kt")
        public void testInapplicableDefinitelyNonNullableTypeToReifiedTypeWithOtherArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableDefinitelyNonNullableTypeToReifiedTypeWithOtherArguments.kt");
        }

        @TestMetadata("inapplicableNotGeneric.kt")
        public void testInapplicableNotGeneric() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableNotGeneric.kt");
        }

        @TestMetadata("inapplicableNotInCallable.kt")
        public void testInapplicableNotInCallable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableNotInCallable.kt");
        }

        @TestMetadata("inapplicableNotInCallable2.kt")
        public void testInapplicableNotInCallable2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableNotInCallable2.kt");
        }

        @TestMetadata("inapplicableTypeNotInferred.kt")
        public void testInapplicableTypeNotInferred() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableTypeNotInferred.kt");
        }

        @TestMetadata("inferredIntersectionTypeFromElvis.kt")
        public void testInferredIntersectionTypeFromElvis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inferredIntersectionTypeFromElvis.kt");
        }

        @TestMetadata("inferredTypeFromElvis.kt")
        public void testInferredTypeFromElvis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inferredTypeFromElvis.kt");
        }

        @TestMetadata("insertDefinitelyNonNullTypeClass.kt")
        public void testInsertDefinitelyNonNullTypeClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullTypeClass.kt");
        }

        @TestMetadata("insertDefinitelyNonNullTypeInFunction.kt")
        public void testInsertDefinitelyNonNullTypeInFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullTypeInFunction.kt");
        }

        @TestMetadata("insertDefinitelyNonNullTypeWithVarargs.kt")
        public void testInsertDefinitelyNonNullTypeWithVarargs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullTypeWithVarargs.kt");
        }

        @TestMetadata("insertDefinitelyNonNullableType.kt")
        public void testInsertDefinitelyNonNullableType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullableType.kt");
        }

        @TestMetadata("insertDefinitelyNonNullableTypeToInlineFun.kt")
        public void testInsertDefinitelyNonNullableTypeToInlineFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullableTypeToInlineFun.kt");
        }

        @TestMetadata("insertDefinitelyNonNullableTypeWithOtherReifiedType.kt")
        public void testInsertDefinitelyNonNullableTypeWithOtherReifiedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullableTypeWithOtherReifiedType.kt");
        }

        @TestMetadata("insertImportForArg.kt")
        public void testInsertImportForArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertImportForArg.kt");
        }

        @TestMetadata("insertManyTypes.kt")
        public void testInsertManyTypes() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertManyTypes.kt");
        }

        @TestMetadata("insertManyTypesInDifferentOrder.kt")
        public void testInsertManyTypesInDifferentOrder() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertManyTypesInDifferentOrder.kt");
        }

        @TestMetadata("insertMultipleSomeWithClashingName.kt")
        public void testInsertMultipleSomeWithClashingName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertMultipleSomeWithClashingName.kt");
        }

        @TestMetadata("insertReifiedType.kt")
        public void testInsertReifiedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertReifiedType.kt");
        }

        @TestMetadata("insertTwoTypesFun.kt")
        public void testInsertTwoTypesFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTwoTypesFun.kt");
        }

        @TestMetadata("insertTypeAny.kt")
        public void testInsertTypeAny() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeAny.kt");
        }

        @TestMetadata("insertTypeThatIsAFunction.kt")
        public void testInsertTypeThatIsAFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeThatIsAFunction.kt");
        }

        @TestMetadata("insertTypeThatIsATypeArg.kt")
        public void testInsertTypeThatIsATypeArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeThatIsATypeArg.kt");
        }

        @TestMetadata("insertTypeWithClashingName.kt")
        public void testInsertTypeWithClashingName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeWithClashingName.kt");
        }

        @TestMetadata("insertTypeWithLambda.kt")
        public void testInsertTypeWithLambda() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeWithLambda.kt");
        }

        @TestMetadata("insertTypeWithTypeArguments.kt")
        public void testInsertTypeWithTypeArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeWithTypeArguments.kt");
        }

        @TestMetadata("insertTypeWithVarargs.kt")
        public void testInsertTypeWithVarargs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeWithVarargs.kt");
        }

        @TestMetadata("notApplicableGenericType.kt")
        public void testNotApplicableGenericType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/notApplicableGenericType.kt");
        }

        @TestMetadata("simpleInsertTypeClass.kt")
        public void testSimpleInsertTypeClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/simpleInsertTypeClass.kt");
        }

        @TestMetadata("simpleInsertTypeFun.kt")
        public void testSimpleInsertTypeFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/simpleInsertTypeFun.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/removeSingleArgumentName")
    public abstract static class RemoveSingleArgumentName extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition")
        public static class MixedNamedArgumentsInTheirOwnPosition extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("namedArgumentBefore.kt")
            public void testNamedArgumentBefore() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition/namedArgumentBefore.kt");
            }

            @TestMetadata("namedArgumentBefore2.kt")
            public void testNamedArgumentBefore2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition/namedArgumentBefore2.kt");
            }

            @TestMetadata("notInPosition.kt")
            public void testNotInPosition() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition/notInPosition.kt");
            }

            @TestMetadata("notInPosition2.kt")
            public void testNotInPosition2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition/notInPosition2.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/removeSingleArgumentName")
        public static class Uncategorized extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("arrayForVararg.kt")
            public void testArrayForVararg() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayForVararg.kt");
            }

            @TestMetadata("arrayForVararg2.kt")
            public void testArrayForVararg2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayForVararg2.kt");
            }

            @TestMetadata("arrayForVararg3.kt")
            public void testArrayForVararg3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayForVararg3.kt");
            }

            @TestMetadata("arrayLiteral.kt")
            public void testArrayLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayLiteral.kt");
            }

            @TestMetadata("arrayLiteralForVararg.kt")
            public void testArrayLiteralForVararg() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayLiteralForVararg.kt");
            }

            @TestMetadata("arrayLiteralForVararg2.kt")
            public void testArrayLiteralForVararg2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayLiteralForVararg2.kt");
            }

            @TestMetadata("namedArgumentBefore.kt")
            public void testNamedArgumentBefore() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/namedArgumentBefore.kt");
            }

            @TestMetadata("noExpression.kt")
            public void testNoExpression() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/noExpression.kt");
            }

            @TestMetadata("notInPosition.kt")
            public void testNotInPosition() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notInPosition.kt");
            }

            @TestMetadata("notInPositionWithDefaultArgument.kt")
            public void testNotInPositionWithDefaultArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notInPositionWithDefaultArgument.kt");
            }

            @TestMetadata("notInRange.kt")
            public void testNotInRange() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notInRange.kt");
            }

            @TestMetadata("notNamed.kt")
            public void testNotNamed() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notNamed.kt");
            }

            @TestMetadata("notResolved.kt")
            public void testNotResolved() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notResolved.kt");
            }

            @TestMetadata("range.kt")
            public void testRange() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/range.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/simple.kt");
            }

            @TestMetadata("star.kt")
            public void testStar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/star.kt");
            }

            @TestMetadata("superClassConstructor.kt")
            public void testSuperClassConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/superClassConstructor.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/removeAllArgumentNames")
    public static class RemoveAllArgumentNames extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("collectionLiteralIsLast.kt")
        public void testCollectionLiteralIsLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/collectionLiteralIsLast.kt");
        }

        @TestMetadata("collectionLiteralIsNotLast.kt")
        public void testCollectionLiteralIsNotLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/collectionLiteralIsNotLast.kt");
        }

        @TestMetadata("collectionLiteralIsNotLast2.kt")
        public void testCollectionLiteralIsNotLast2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/collectionLiteralIsNotLast2.kt");
        }

        @TestMetadata("defaultArguments.kt")
        public void testDefaultArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/defaultArguments.kt");
        }

        @TestMetadata("defaultArguments2.kt")
        public void testDefaultArguments2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/defaultArguments2.kt");
        }

        @TestMetadata("defaultArguments3.kt")
        public void testDefaultArguments3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/defaultArguments3.kt");
        }

        @TestMetadata("defaultArguments4.kt")
        public void testDefaultArguments4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/defaultArguments4.kt");
        }

        @TestMetadata("noNamedArguments.kt")
        public void testNoNamedArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/noNamedArguments.kt");
        }

        @TestMetadata("notOwnPosition.kt")
        public void testNotOwnPosition() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/notOwnPosition.kt");
        }

        @TestMetadata("oneNamedArgument.kt")
        public void testOneNamedArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/oneNamedArgument.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/simple.kt");
        }

        @TestMetadata("trailingLambdaArgument.kt")
        public void testTrailingLambdaArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/trailingLambdaArgument.kt");
        }

        @TestMetadata("varargIsLast.kt")
        public void testVarargIsLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/varargIsLast.kt");
        }

        @TestMetadata("varargIsNotLast.kt")
        public void testVarargIsNotLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/varargIsNotLast.kt");
        }

        @TestMetadata("varargIsNotLast2.kt")
        public void testVarargIsNotLast2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/varargIsNotLast2.kt");
        }

        @TestMetadata("varargIsNotLast3.kt")
        public void testVarargIsNotLast3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/varargIsNotLast3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer")
    public static class ConvertPropertyGetterToInitializer extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("block.kt")
        public void testBlock() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/block.kt");
        }

        @TestMetadata("expect.kt")
        public void testExpect() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/expect.kt");
        }

        @TestMetadata("extentionProperty.kt")
        public void testExtentionProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/extentionProperty.kt");
        }

        @TestMetadata("hasComment.kt")
        public void testHasComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/hasComment.kt");
        }

        @TestMetadata("hasComment2.kt")
        public void testHasComment2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/hasComment2.kt");
        }

        @TestMetadata("hasComment3.kt")
        public void testHasComment3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/hasComment3.kt");
        }

        @TestMetadata("hasInitializer.kt")
        public void testHasInitializer() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/hasInitializer.kt");
        }

        @TestMetadata("inInterface.kt")
        public void testInInterface() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/inInterface.kt");
        }

        @TestMetadata("multiStatementBlock.kt")
        public void testMultiStatementBlock() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/multiStatementBlock.kt");
        }

        @TestMetadata("run.kt")
        public void testRun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/run.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertToRawStringTemplate")
    public static class ConvertToRawStringTemplate extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToRawStringTemplate/basic.kt");
        }

        @TestMetadata("consecutiveBreaks.kt")
        public void testConsecutiveBreaks() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToRawStringTemplate/consecutiveBreaks.kt");
        }

        @TestMetadata("octalEscape.kt")
        public void testOctalEscape() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToRawStringTemplate/octalEscape.kt");
        }

        @TestMetadata("spaceBeforeBreak.kt")
        public void testSpaceBeforeBreak() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToRawStringTemplate/spaceBeforeBreak.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/toRawStringLiteral")
    public static class ToRawStringLiteral extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("3quotes.kt")
        public void test3quotes() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/3quotes.kt");
        }

        @TestMetadata("alreadyRaw.kt")
        public void testAlreadyRaw() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/alreadyRaw.kt");
        }

        @TestMetadata("caret1.kt")
        public void testCaret1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret1.kt");
        }

        @TestMetadata("caret2.kt")
        public void testCaret2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret2.kt");
        }

        @TestMetadata("caret3.kt")
        public void testCaret3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret3.kt");
        }

        @TestMetadata("caret4.kt")
        public void testCaret4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret4.kt");
        }

        @TestMetadata("caret5.kt")
        public void testCaret5() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret5.kt");
        }

        @TestMetadata("dollar.kt")
        public void testDollar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/dollar.kt");
        }

        @TestMetadata("dollar2.kt")
        public void testDollar2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/dollar2.kt");
        }

        @TestMetadata("quotesAndSlashes.kt")
        public void testQuotesAndSlashes() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/quotesAndSlashes.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/simple.kt");
        }

        @TestMetadata("specialChar.kt")
        public void testSpecialChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/specialChar.kt");
        }

        @TestMetadata("tabCharacter.kt")
        public void testTabCharacter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/tabCharacter.kt");
        }

        @TestMetadata("trailingSpace.kt")
        public void testTrailingSpace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/trailingSpace.kt");
        }

        @TestMetadata("trailingSpace2.kt")
        public void testTrailingSpace2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/trailingSpace2.kt");
        }

        @TestMetadata("trailingSpace3.kt")
        public void testTrailingSpace3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/trailingSpace3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/movePropertyToConstructor")
    public static class MovePropertyToConstructor extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationTarget.kt")
        public void testAnnotationTarget() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/annotationTarget.kt");
        }

        @TestMetadata("annotationWithUseSite.kt")
        public void testAnnotationWithUseSite() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/annotationWithUseSite.kt");
        }

        @TestMetadata("declaredInInterface.kt")
        public void testDeclaredInInterface() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/declaredInInterface.kt");
        }

        @TestMetadata("delegated.kt")
        public void testDelegated() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/delegated.kt");
        }

        @TestMetadata("expectClass.kt")
        public void testExpectClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/expectClass.kt");
        }

        @TestMetadata("functionReference.kt")
        public void testFunctionReference() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/functionReference.kt");
        }

        @TestMetadata("getter.kt")
        public void testGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/getter.kt");
        }

        @TestMetadata("javaAnnotation.kt")
        public void testJavaAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/javaAnnotation.kt");
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/lambda.kt");
        }

        @TestMetadata("lambdaWithoutParameters.kt")
        public void testLambdaWithoutParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/lambdaWithoutParameters.kt");
        }

        @TestMetadata("lateinit.kt")
        public void testLateinit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/lateinit.kt");
        }

        @TestMetadata("local.kt")
        public void testLocal() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/local.kt");
        }

        @TestMetadata("map.kt")
        public void testMap() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/map.kt");
        }

        @TestMetadata("methodReference.kt")
        public void testMethodReference() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/methodReference.kt");
        }

        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/secondaryConstructor.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/simple.kt");
        }

        @TestMetadata("simpleAnnotation.kt")
        public void testSimpleAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/simpleAnnotation.kt");
        }

        @TestMetadata("withoutMatchingParameter.kt")
        public void testWithoutMatchingParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/withoutMatchingParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf")
    public static class WhenToIf extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/comment.kt");
        }

        @TestMetadata("kt12040.kt")
        public void testKt12040() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/kt12040.kt");
        }

        @TestMetadata("kt13884.kt")
        public void testKt13884() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/kt13884.kt");
        }

        @TestMetadata("variableSubject.kt")
        public void testVariableSubject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/variableSubject.kt");
        }

        @TestMetadata("whenTrueOrFalse.kt")
        public void testWhenTrueOrFalse() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenTrueOrFalse.kt");
        }

        @TestMetadata("whenTrueOrFalse2.kt")
        public void testWhenTrueOrFalse2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenTrueOrFalse2.kt");
        }

        @TestMetadata("whenTrueOrFalse3.kt")
        public void testWhenTrueOrFalse3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenTrueOrFalse3.kt");
        }

        @TestMetadata("whenTrueOrFalse4.kt")
        public void testWhenTrueOrFalse4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenTrueOrFalse4.kt");
        }

        @TestMetadata("whenWithDotQualifiedExpression.kt")
        public void testWhenWithDotQualifiedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithDotQualifiedExpression.kt");
        }

        @TestMetadata("whenWithEqualityTests.kt")
        public void testWhenWithEqualityTests() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithEqualityTests.kt");
        }

        @TestMetadata("whenWithIf.kt")
        public void testWhenWithIf() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithIf.kt");
        }

        @TestMetadata("whenWithMultiConditions.kt")
        public void testWhenWithMultiConditions() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithMultiConditions.kt");
        }

        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithMultipleConditionTypes.kt");
        }

        @TestMetadata("whenWithNegativePatterns.kt")
        public void testWhenWithNegativePatterns() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativePatterns.kt");
        }

        @TestMetadata("whenWithNegativeRangeTests.kt")
        public void testWhenWithNegativeRangeTests() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativeRangeTests.kt");
        }

        @TestMetadata("whenWithPatterns.kt")
        public void testWhenWithPatterns() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithPatterns.kt");
        }

        @TestMetadata("whenWithRangeTests.kt")
        public void testWhenWithRangeTests() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTests.kt");
        }

        @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
        public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTestsAndMultiConditions.kt");
        }

        @TestMetadata("whenWithoutElse.kt")
        public void testWhenWithoutElse() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithoutElse.kt");
        }

        @TestMetadata("whenWithoutElseUsedAsExpression.kt")
        public void testWhenWithoutElseUsedAsExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithoutElseUsedAsExpression.kt");
        }

        @TestMetadata("whenWithoutSubject.kt")
        public void testWhenWithoutSubject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithoutSubject.kt");
        }

        @TestMetadata("wrongIsAndInNoEnd.kt")
        public void testWrongIsAndInNoEnd() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/wrongIsAndInNoEnd.kt");
        }

        @TestMetadata("wrongIsAndInNoSubject.kt")
        public void testWrongIsAndInNoSubject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/wrongIsAndInNoSubject.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/intentions")
    public abstract static class Intentions extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/intentions/branched")
        public abstract static class Branched extends AbstractK2IntentionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/intentions/branched/whenToIf")
            public static class WhenToIf extends AbstractK2IntentionTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("comment.kt")
                public void testComment() throws Exception {
                    runTest("testData/intentions/branched/whenToIf/comment.kt");
                }

                @TestMetadata("kt12040.kt")
                public void testKt12040() throws Exception {
                    runTest("testData/intentions/branched/whenToIf/kt12040.kt");
                }

                @TestMetadata("sideEffectWithoutSubjectSeparation.kt")
                public void testSideEffectWithoutSubjectSeparation() throws Exception {
                    runTest("testData/intentions/branched/whenToIf/sideEffectWithoutSubjectSeparation.kt");
                }

                @TestMetadata("whenWithDotQualifiedExpression.kt")
                public void testWhenWithDotQualifiedExpression() throws Exception {
                    runTest("testData/intentions/branched/whenToIf/whenWithDotQualifiedExpression.kt");
                }
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw")
    public static class ConvertBinaryExpressionWithDemorgansLaw extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("complexNegation1.kt")
        public void testComplexNegation1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/complexNegation1.kt");
        }

        @TestMetadata("complexNegation2.kt")
        public void testComplexNegation2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/complexNegation2.kt");
        }

        @TestMetadata("conjunctionNegation1.kt")
        public void testConjunctionNegation1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/conjunctionNegation1.kt");
        }

        @TestMetadata("conjunctionNegation2.kt")
        public void testConjunctionNegation2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/conjunctionNegation2.kt");
        }

        @TestMetadata("disjunctionNegation1.kt")
        public void testDisjunctionNegation1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/disjunctionNegation1.kt");
        }

        @TestMetadata("disjunctionNegation2.kt")
        public void testDisjunctionNegation2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/disjunctionNegation2.kt");
        }

        @TestMetadata("dontAddRedundantParenthesis.kt")
        public void testDontAddRedundantParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/dontAddRedundantParenthesis.kt");
        }

        @TestMetadata("hasBreak.kt")
        public void testHasBreak() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/hasBreak.kt");
        }

        @TestMetadata("hasContinue.kt")
        public void testHasContinue() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/hasContinue.kt");
        }

        @TestMetadata("hasNothing.kt")
        public void testHasNothing() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/hasNothing.kt");
        }

        @TestMetadata("hasReturn.kt")
        public void testHasReturn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/hasReturn.kt");
        }

        @TestMetadata("hasThrow.kt")
        public void testHasThrow() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/hasThrow.kt");
        }

        @TestMetadata("hasThrow2.kt")
        public void testHasThrow2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/hasThrow2.kt");
        }

        @TestMetadata("inapplicableOperator.kt")
        public void testInapplicableOperator() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/inapplicableOperator.kt");
        }

        @TestMetadata("inapplicableTriple.kt")
        public void testInapplicableTriple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/inapplicableTriple.kt");
        }

        @TestMetadata("invertNegatedIsEmpty.kt")
        public void testInvertNegatedIsEmpty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/invertNegatedIsEmpty.kt");
        }

        @TestMetadata("invertNegatedIsNotEmpty.kt")
        public void testInvertNegatedIsNotEmpty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/invertNegatedIsNotEmpty.kt");
        }

        @TestMetadata("longMixedExpression.kt")
        public void testLongMixedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/longMixedExpression.kt");
        }

        @TestMetadata("mixedExpression.kt")
        public void testMixedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/mixedExpression.kt");
        }

        @TestMetadata("noNegationPrefix1.kt")
        public void testNoNegationPrefix1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/noNegationPrefix1.kt");
        }

        @TestMetadata("noNegationPrefix2.kt")
        public void testNoNegationPrefix2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/noNegationPrefix2.kt");
        }

        @TestMetadata("noNegationPrefix3.kt")
        public void testNoNegationPrefix3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/noNegationPrefix3.kt");
        }

        @TestMetadata("noNegationPrefix4.kt")
        public void testNoNegationPrefix4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/noNegationPrefix4.kt");
        }

        @TestMetadata("nonstandardPrefixOperator.kt")
        public void testNonstandardPrefixOperator() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/nonstandardPrefixOperator.kt");
        }

        @TestMetadata("retainedParens.kt")
        public void testRetainedParens() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertBinaryExpressionWithDemorgansLaw/retainedParens.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/invertIfCondition")
    public static class InvertIfCondition extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addSurroundingBlock_preserveComments.kt")
        public void testAddSurroundingBlock_preserveComments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/addSurroundingBlock_preserveComments.kt");
        }

        @TestMetadata("assignedToValue.kt")
        public void testAssignedToValue() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/assignedToValue.kt");
        }

        @TestMetadata("binaryExpression.kt")
        public void testBinaryExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/binaryExpression.kt");
        }

        @TestMetadata("binaryExpressionWithNegation.kt")
        public void testBinaryExpressionWithNegation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/binaryExpressionWithNegation.kt");
        }

        @TestMetadata("booleanLiteral.kt")
        public void testBooleanLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/booleanLiteral.kt");
        }

        @TestMetadata("branchingIfStatements.kt")
        public void testBranchingIfStatements() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/branchingIfStatements.kt");
        }

        @TestMetadata("endOfLineCommentBug.kt")
        public void testEndOfLineCommentBug() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/endOfLineCommentBug.kt");
        }

        @TestMetadata("forLoopWithMultipleExpressions.kt")
        public void testForLoopWithMultipleExpressions() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/forLoopWithMultipleExpressions.kt");
        }

        @TestMetadata("functionWithReturnExpression.kt")
        public void testFunctionWithReturnExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/functionWithReturnExpression.kt");
        }

        @TestMetadata("hasNothing.kt")
        public void testHasNothing() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/hasNothing.kt");
        }

        @TestMetadata("ifExpressionInsideForLoop.kt")
        public void testIfExpressionInsideForLoop() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/ifExpressionInsideForLoop.kt");
        }

        @TestMetadata("ifExpressionWithReturn.kt")
        public void testIfExpressionWithReturn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/ifExpressionWithReturn.kt");
        }

        @TestMetadata("ifThenReturn.kt")
        public void testIfThenReturn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/ifThenReturn.kt");
        }

        @TestMetadata("ifThenReturn2.kt")
        public void testIfThenReturn2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/ifThenReturn2.kt");
        }

        @TestMetadata("ifThenReturn3.kt")
        public void testIfThenReturn3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/ifThenReturn3.kt");
        }

        @TestMetadata("ifThenReturn4.kt")
        public void testIfThenReturn4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/ifThenReturn4.kt");
        }

        @TestMetadata("ifWithBothBranchesReturn.kt")
        public void testIfWithBothBranchesReturn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/ifWithBothBranchesReturn.kt");
        }

        @TestMetadata("ifWithBothBranchesSetter.kt")
        public void testIfWithBothBranchesSetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/ifWithBothBranchesSetter.kt");
        }

        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/in.kt");
        }

        @TestMetadata("invertableOperator.kt")
        public void testInvertableOperator() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/invertableOperator.kt");
        }

        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/is.kt");
        }

        @TestMetadata("isBlank.kt")
        public void testIsBlank() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/isBlank.kt");
        }

        @TestMetadata("isEmpty.kt")
        public void testIsEmpty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/isEmpty.kt");
        }

        @TestMetadata("isNotBlank.kt")
        public void testIsNotBlank() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/isNotBlank.kt");
        }

        @TestMetadata("isNotEmpty.kt")
        public void testIsNotEmpty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/isNotEmpty.kt");
        }

        @TestMetadata("lambdaNonLocalAndLocalReturn.kt")
        public void testLambdaNonLocalAndLocalReturn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lambdaNonLocalAndLocalReturn.kt");
        }

        @TestMetadata("lambdaNonLocalReturn.kt")
        public void testLambdaNonLocalReturn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lambdaNonLocalReturn.kt");
        }

        @TestMetadata("lastStatement1.kt")
        public void testLastStatement1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatement1.kt");
        }

        @TestMetadata("lastStatement2.kt")
        public void testLastStatement2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatement2.kt");
        }

        @TestMetadata("lastStatement3.kt")
        public void testLastStatement3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatement3.kt");
        }

        @TestMetadata("lastStatementBeforeBreak.kt")
        public void testLastStatementBeforeBreak() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatementBeforeBreak.kt");
        }

        @TestMetadata("lastStatementBeforeContinue.kt")
        public void testLastStatementBeforeContinue() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatementBeforeContinue.kt");
        }

        @TestMetadata("lastStatementBeforeReturn.kt")
        public void testLastStatementBeforeReturn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatementBeforeReturn.kt");
        }

        @TestMetadata("lastStatementInLambda.kt")
        public void testLastStatementInLambda() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatementInLambda.kt");
        }

        @TestMetadata("lastStatementInLoop.kt")
        public void testLastStatementInLoop() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatementInLoop.kt");
        }

        @TestMetadata("lastStatementInLoop2.kt")
        public void testLastStatementInLoop2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatementInLoop2.kt");
        }

        @TestMetadata("lastStatementNonUnitMethod.kt")
        public void testLastStatementNonUnitMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/lastStatementNonUnitMethod.kt");
        }

        @TestMetadata("negatedExpression.kt")
        public void testNegatedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/negatedExpression.kt");
        }

        @TestMetadata("negatedIsBlank.kt")
        public void testNegatedIsBlank() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/negatedIsBlank.kt");
        }

        @TestMetadata("negatedIsEmpty.kt")
        public void testNegatedIsEmpty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/negatedIsEmpty.kt");
        }

        @TestMetadata("negatedIsNotBlank.kt")
        public void testNegatedIsNotBlank() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/negatedIsNotBlank.kt");
        }

        @TestMetadata("negatedIsNotEmpty.kt")
        public void testNegatedIsNotEmpty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/negatedIsNotEmpty.kt");
        }

        @TestMetadata("nestedIfWithReturn.kt")
        public void testNestedIfWithReturn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/nestedIfWithReturn.kt");
        }

        @TestMetadata("notBlock.kt")
        public void testNotBlock() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notBlock.kt");
        }

        @TestMetadata("notBlock2.kt")
        public void testNotBlock2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notBlock2.kt");
        }

        @TestMetadata("notBlock3.kt")
        public void testNotBlock3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notBlock3.kt");
        }

        @TestMetadata("notBlock4.kt")
        public void testNotBlock4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notBlock4.kt");
        }

        @TestMetadata("notBlock5.kt")
        public void testNotBlock5() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notBlock5.kt");
        }

        @TestMetadata("notBlock6.kt")
        public void testNotBlock6() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notBlock6.kt");
        }

        @TestMetadata("notBlock7.kt")
        public void testNotBlock7() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notBlock7.kt");
        }

        @TestMetadata("notBlock8.kt")
        public void testNotBlock8() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notBlock8.kt");
        }

        @TestMetadata("notIn.kt")
        public void testNotIn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notIn.kt");
        }

        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/notIs.kt");
        }

        @TestMetadata("returnIfExpression.kt")
        public void testReturnIfExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/returnIfExpression.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/simple.kt");
        }

        @TestMetadata("unnecessaryContinue.kt")
        public void testUnnecessaryContinue() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/unnecessaryContinue.kt");
        }

        @TestMetadata("unnecessaryContinue2.kt")
        public void testUnnecessaryContinue2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/unnecessaryContinue2.kt");
        }

        @TestMetadata("unnecessaryContinue3.kt")
        public void testUnnecessaryContinue3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/unnecessaryContinue3.kt");
        }

        @TestMetadata("valueAndReturnBranches.kt")
        public void testValueAndReturnBranches() throws Exception {
            runTest("../../../idea/tests/testData/intentions/invertIfCondition/valueAndReturnBranches.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction")
    public static class LambdaToAnonymousFunction extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/argument.kt");
        }

        @TestMetadata("callExpression.kt")
        public void testCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/callExpression.kt");
        }

        @TestMetadata("callExpression2.kt")
        public void testCallExpression2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/callExpression2.kt");
        }

        @TestMetadata("destructuringParameter.kt")
        public void testDestructuringParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/destructuringParameter.kt");
        }

        @TestMetadata("explicitParameterName.kt")
        public void testExplicitParameterName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/explicitParameterName.kt");
        }

        @TestMetadata("extention1.kt")
        public void testExtention1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/extention1.kt");
        }

        @TestMetadata("extention2.kt")
        public void testExtention2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/extention2.kt");
        }

        @TestMetadata("flexibleType.kt")
        public void testFlexibleType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/flexibleType.kt");
        }

        @TestMetadata("fullyQualified.kt")
        public void testFullyQualified() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/fullyQualified.kt");
        }

        @TestMetadata("hasComment.kt")
        public void testHasComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/hasComment.kt");
        }

        @TestMetadata("hasReturn1.kt")
        public void testHasReturn1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/hasReturn1.kt");
        }

        @TestMetadata("hasReturn2.kt")
        public void testHasReturn2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/hasReturn2.kt");
        }

        @TestMetadata("hasReturn3.kt")
        public void testHasReturn3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/hasReturn3.kt");
        }

        @TestMetadata("hasReturn4.kt")
        public void testHasReturn4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/hasReturn4.kt");
        }

        @TestMetadata("hasSomeStatements.kt")
        public void testHasSomeStatements() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/hasSomeStatements.kt");
        }

        @TestMetadata("implicitParameterName.kt")
        public void testImplicitParameterName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/implicitParameterName.kt");
        }

        @TestMetadata("inInlineFunction.kt")
        public void testInInlineFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/inInlineFunction.kt");
        }

        @TestMetadata("incorrectOffset.kt")
        public void testIncorrectOffset() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/incorrectOffset.kt");
        }

        @TestMetadata("javaMethod.kt")
        public void testJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/javaMethod.kt");
        }

        @TestMetadata("namedArgument.kt")
        public void testNamedArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/namedArgument.kt");
        }

        @TestMetadata("noParameter.kt")
        public void testNoParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/noParameter.kt");
        }

        @TestMetadata("returnUnit.kt")
        public void testReturnUnit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/returnUnit.kt");
        }

        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/suspendFunction.kt");
        }

        @TestMetadata("suspendVariable.kt")
        public void testSuspendVariable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/suspendVariable.kt");
        }

        @TestMetadata("underscoreParameter.kt")
        public void testUnderscoreParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/underscoreParameter.kt");
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/variable.kt");
        }

        @TestMetadata("variable2.kt")
        public void testVariable2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/variable2.kt");
        }

        @TestMetadata("variable3.kt")
        public void testVariable3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/variable3.kt");
        }

        @TestMetadata("variable4.kt")
        public void testVariable4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/variable4.kt");
        }

        @TestMetadata("withLabel.kt")
        public void testWithLabel() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/withLabel.kt");
        }

        @TestMetadata("withPackage.kt")
        public void testWithPackage() throws Exception {
            runTest("../../../idea/tests/testData/intentions/lambdaToAnonymousFunction/withPackage.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/removeExplicitTypeArguments")
    public static class RemoveExplicitTypeArguments extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("betweenLambdaArguments.kt")
        public void testBetweenLambdaArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/betweenLambdaArguments.kt");
        }

        @TestMetadata("blockValue.kt")
        public void testBlockValue() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/blockValue.kt");
        }

        @TestMetadata("defaultParamValue.kt")
        public void testDefaultParamValue() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/defaultParamValue.kt");
        }

        @TestMetadata("fourLiterals.kt")
        public void testFourLiterals() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/fourLiterals.kt");
        }

        @TestMetadata("functionBodyIsCallWithUnnecessaryTypeArgs.kt")
        public void testFunctionBodyIsCallWithUnnecessaryTypeArgs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/functionBodyIsCallWithUnnecessaryTypeArgs.kt");
        }

        @TestMetadata("getterBody.kt")
        public void testGetterBody() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/getterBody.kt");
        }

        @TestMetadata("hasAnnotation.kt")
        public void testHasAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/hasAnnotation.kt");
        }

        @TestMetadata("hasAnnotationOnNestedTypeArgument.kt")
        public void testHasAnnotationOnNestedTypeArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/hasAnnotationOnNestedTypeArgument.kt");
        }

        @TestMetadata("inapplicableTypeThatIsAFunItCannotBeInferred.kt")
        public void testInapplicableTypeThatIsAFunItCannotBeInferred() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/inapplicableTypeThatIsAFunItCannotBeInferred.kt");
        }

        @TestMetadata("insideDeepOtherCall.kt")
        public void testInsideDeepOtherCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/insideDeepOtherCall.kt");
        }

        @TestMetadata("insideGenericCall.kt")
        public void testInsideGenericCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/insideGenericCall.kt");
        }

        @TestMetadata("insideOtherCall.kt")
        public void testInsideOtherCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/insideOtherCall.kt");
        }

        @TestMetadata("kt29735.kt")
        public void testKt29735() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/kt29735.kt");
        }

        @TestMetadata("kt31441.kt")
        public void testKt31441() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/kt31441.kt");
        }

        @TestMetadata("lambdaType.kt")
        public void testLambdaType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/lambdaType.kt");
        }

        @TestMetadata("lambdaValue.kt")
        public void testLambdaValue() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/lambdaValue.kt");
        }

        @TestMetadata("literalAny.kt")
        public void testLiteralAny() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/literalAny.kt");
        }

        @TestMetadata("literalString.kt")
        public void testLiteralString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/literalString.kt");
        }

        @TestMetadata("literalStringWithClass.kt")
        public void testLiteralStringWithClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/literalStringWithClass.kt");
        }

        @TestMetadata("literalsWhenTypeArgHasTypeArg.kt")
        public void testLiteralsWhenTypeArgHasTypeArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/literalsWhenTypeArgHasTypeArg.kt");
        }

        @TestMetadata("mapGet.kt")
        public void testMapGet() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/mapGet.kt");
        }

        @TestMetadata("nestedCall-KT-5028.kt")
        public void testNestedCall_KT_5028() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/nestedCall-KT-5028.kt");
        }

        @TestMetadata("notApplicableNotEnoughtInfo.kt")
        public void testNotApplicableNotEnoughtInfo() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/notApplicableNotEnoughtInfo.kt");
        }

        @TestMetadata("notApplicableSupertypeOfInferred.kt")
        public void testNotApplicableSupertypeOfInferred() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/notApplicableSupertypeOfInferred.kt");
        }

        @TestMetadata("notApplicableSupertypeOfInferredClass.kt")
        public void testNotApplicableSupertypeOfInferredClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/notApplicableSupertypeOfInferredClass.kt");
        }

        @TestMetadata("platforrmType1.kt")
        public void testPlatforrmType1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/platforrmType1.kt");
        }

        @TestMetadata("platforrmType2.kt")
        public void testPlatforrmType2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/platforrmType2.kt");
        }

        @TestMetadata("propertyInitializerIsCallWithUnnecessaryTypeArgs.kt")
        public void testPropertyInitializerIsCallWithUnnecessaryTypeArgs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/propertyInitializerIsCallWithUnnecessaryTypeArgs.kt");
        }

        @TestMetadata("qualified.kt")
        public void testQualified() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/qualified.kt");
        }

        @TestMetadata("returnCallWithUnnecessaryTypeArgs.kt")
        public void testReturnCallWithUnnecessaryTypeArgs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/returnCallWithUnnecessaryTypeArgs.kt");
        }

        @TestMetadata("twoArguments.kt")
        public void testTwoArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/twoArguments.kt");
        }

        @TestMetadata("twoLiteralValues.kt")
        public void testTwoLiteralValues() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/twoLiteralValues.kt");
        }

        @TestMetadata("unnecessaryDefinitelyNonNullableTypeArg.kt")
        public void testUnnecessaryDefinitelyNonNullableTypeArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/unnecessaryDefinitelyNonNullableTypeArg.kt");
        }

        @TestMetadata("variableString.kt")
        public void testVariableString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/variableString.kt");
        }

        @TestMetadata("variableString2.kt")
        public void testVariableString2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/variableString2.kt");
        }

        @TestMetadata("variableStringFartherScope.kt")
        public void testVariableStringFartherScope() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/variableStringFartherScope.kt");
        }

        @TestMetadata("variablesAndLiterals.kt")
        public void testVariablesAndLiterals() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitTypeArguments/variablesAndLiterals.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature")
    public static class SpecifyExplicitLambdaSignature extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("anonymous.kt")
        public void testAnonymous() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/anonymous.kt");
        }

        @TestMetadata("coercionToUnit.kt")
        public void testCoercionToUnit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/coercionToUnit.kt");
        }

        @TestMetadata("cursorOnRightBrace.kt")
        public void testCursorOnRightBrace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/cursorOnRightBrace.kt");
        }

        @TestMetadata("definitelyNonNullTypeMultipleParam.kt")
        public void testDefinitelyNonNullTypeMultipleParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/definitelyNonNullTypeMultipleParam.kt");
        }

        @TestMetadata("definitelyNonNullTypeSingleParam.kt")
        public void testDefinitelyNonNullTypeSingleParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/definitelyNonNullTypeSingleParam.kt");
        }

        @TestMetadata("delegate.kt")
        public void testDelegate() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/delegate.kt");
        }

        @TestMetadata("destructuring.kt")
        public void testDestructuring() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/destructuring.kt");
        }

        @TestMetadata("emptyParamListWithBrackets.kt")
        public void testEmptyParamListWithBrackets() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/emptyParamListWithBrackets.kt");
        }

        @TestMetadata("emptyParamListWithIt.kt")
        public void testEmptyParamListWithIt() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/emptyParamListWithIt.kt");
        }

        @TestMetadata("emptyParamListWithWhiteSpace.kt")
        public void testEmptyParamListWithWhiteSpace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/emptyParamListWithWhiteSpace.kt");
        }

        @TestMetadata("emptyParamListWithoutItWithArrow.kt")
        public void testEmptyParamListWithoutItWithArrow() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/emptyParamListWithoutItWithArrow.kt");
        }

        @TestMetadata("lambdaWithLambdaAsParam.kt")
        public void testLambdaWithLambdaAsParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/lambdaWithLambdaAsParam.kt");
        }

        @TestMetadata("manyNewlines.kt")
        public void testManyNewlines() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/manyNewlines.kt");
        }

        @TestMetadata("multipleParam.kt")
        public void testMultipleParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/multipleParam.kt");
        }

        @TestMetadata("noParameters.kt")
        public void testNoParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/noParameters.kt");
        }

        @TestMetadata("shortenReferencesForParams.kt")
        public void testShortenReferencesForParams() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/shortenReferencesForParams.kt");
        }

        @TestMetadata("singleParam.kt")
        public void testSingleParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/singleParam.kt");
        }

        @TestMetadata("typesAlreadyExplicit.kt")
        public void testTypesAlreadyExplicit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/typesAlreadyExplicit.kt");
        }

        @TestMetadata("typesNotInferable.kt")
        public void testTypesNotInferable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyExplicitLambdaSignature/typesNotInferable.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/changeVisibility")
    public abstract static class ChangeVisibility extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/changeVisibility/internal")
        public static class Internal extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("hasJvmFieldInInterfaceCompanion.kt")
            public void testHasJvmFieldInInterfaceCompanion() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/hasJvmFieldInInterfaceCompanion.kt");
            }

            @TestMetadata("hasJvmFieldInInterfaceObject.kt")
            public void testHasJvmFieldInInterfaceObject() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/hasJvmFieldInInterfaceObject.kt");
            }

            @TestMetadata("inInterface.kt")
            public void testInInterface() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/inInterface.kt");
            }

            @TestMetadata("inInterfaceCompanion.kt")
            public void testInInterfaceCompanion() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/inInterfaceCompanion.kt");
            }

            @TestMetadata("notForAnnotationClassPrimaryConstructor.kt")
            public void testNotForAnnotationClassPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/notForAnnotationClassPrimaryConstructor.kt");
            }

            @TestMetadata("notForSealedPrimaryConstructor.kt")
            public void testNotForSealedPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/notForSealedPrimaryConstructor.kt");
            }

            @TestMetadata("notForSealedSecondaryConstructor.kt")
            public void testNotForSealedSecondaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/notForSealedSecondaryConstructor.kt");
            }

            @TestMetadata("propertySetter.kt")
            public void testPropertySetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/propertySetter.kt");
            }

            @TestMetadata("propertySetterForPrivateProperty.kt")
            public void testPropertySetterForPrivateProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/propertySetterForPrivateProperty.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/simple.kt");
            }

            @TestMetadata("valParameter.kt")
            public void testValParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/internal/valParameter.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/changeVisibility/private")
        public static class Private extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("actual.kt")
            public void testActual() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/actual.kt");
            }

            @TestMetadata("actual2.kt")
            public void testActual2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/actual2.kt");
            }

            @TestMetadata("annotated.kt")
            public void testAnnotated() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/annotated.kt");
            }

            @TestMetadata("expect.kt")
            public void testExpect() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/expect.kt");
            }

            @TestMetadata("expect2.kt")
            public void testExpect2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/expect2.kt");
            }

            @TestMetadata("hasModifier1.kt")
            public void testHasModifier1() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/hasModifier1.kt");
            }

            @TestMetadata("hasModifier2.kt")
            public void testHasModifier2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/hasModifier2.kt");
            }

            @TestMetadata("hasModifier3.kt")
            public void testHasModifier3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/hasModifier3.kt");
            }

            @TestMetadata("hasModifier4.kt")
            public void testHasModifier4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/hasModifier4.kt");
            }

            @TestMetadata("hasModifier5.kt")
            public void testHasModifier5() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/hasModifier5.kt");
            }

            @TestMetadata("inAnnotation.kt")
            public void testInAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/inAnnotation.kt");
            }

            @TestMetadata("interfaceFunction.kt")
            public void testInterfaceFunction() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/interfaceFunction.kt");
            }

            @TestMetadata("interfaceFunctionWithBody.kt")
            public void testInterfaceFunctionWithBody() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/interfaceFunctionWithBody.kt");
            }

            @TestMetadata("interfaceFunctionWithExpressionBody.kt")
            public void testInterfaceFunctionWithExpressionBody() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/interfaceFunctionWithExpressionBody.kt");
            }

            @TestMetadata("interfaceProperty.kt")
            public void testInterfaceProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/interfaceProperty.kt");
            }

            @TestMetadata("interfacePropertyWithGetter.kt")
            public void testInterfacePropertyWithGetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/interfacePropertyWithGetter.kt");
            }

            @TestMetadata("jvmField.kt")
            public void testJvmField() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/jvmField.kt");
            }

            @TestMetadata("noModifierListAnnotation.kt")
            public void testNoModifierListAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListAnnotation.kt");
            }

            @TestMetadata("noModifierListClass.kt")
            public void testNoModifierListClass() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListClass.kt");
            }

            @TestMetadata("noModifierListConst.kt")
            public void testNoModifierListConst() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListConst.kt");
            }

            @TestMetadata("noModifierListContext.kt")
            public void testNoModifierListContext() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListContext.kt");
            }

            @TestMetadata("noModifierListFun.kt")
            public void testNoModifierListFun() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListFun.kt");
            }

            @TestMetadata("noModifierListFunInterface.kt")
            public void testNoModifierListFunInterface() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListFunInterface.kt");
            }

            @TestMetadata("noModifierListInterface.kt")
            public void testNoModifierListInterface() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListInterface.kt");
            }

            @TestMetadata("noModifierListObject.kt")
            public void testNoModifierListObject() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListObject.kt");
            }

            @TestMetadata("noModifierListPrimaryConstructor.kt")
            public void testNoModifierListPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListPrimaryConstructor.kt");
            }

            @TestMetadata("noModifierListSealed.kt")
            public void testNoModifierListSealed() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListSealed.kt");
            }

            @TestMetadata("noModifierListSecondaryConstructor.kt")
            public void testNoModifierListSecondaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListSecondaryConstructor.kt");
            }

            @TestMetadata("noModifierListVal.kt")
            public void testNoModifierListVal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListVal.kt");
            }

            @TestMetadata("noModifierListValParam.kt")
            public void testNoModifierListValParam() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierListValParam.kt");
            }

            @TestMetadata("noModifierTypeAlias.kt")
            public void testNoModifierTypeAlias() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/noModifierTypeAlias.kt");
            }

            @TestMetadata("notForAbstract.kt")
            public void testNotForAbstract() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/notForAbstract.kt");
            }

            @TestMetadata("notForAnnotationClassPrimaryConstructor.kt")
            public void testNotForAnnotationClassPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/notForAnnotationClassPrimaryConstructor.kt");
            }

            @TestMetadata("notForLocal.kt")
            public void testNotForLocal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/notForLocal.kt");
            }

            @TestMetadata("notForParameter.kt")
            public void testNotForParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/notForParameter.kt");
            }

            @TestMetadata("onAnnotation.kt")
            public void testOnAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/onAnnotation.kt");
            }

            @TestMetadata("onAnnotationParameter.kt")
            public void testOnAnnotationParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/onAnnotationParameter.kt");
            }

            @TestMetadata("propertyGetter.kt")
            public void testPropertyGetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/propertyGetter.kt");
            }

            @TestMetadata("propertySetter.kt")
            public void testPropertySetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/propertySetter.kt");
            }

            @TestMetadata("propertySetterForInternalProperty.kt")
            public void testPropertySetterForInternalProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/propertySetterForInternalProperty.kt");
            }

            @TestMetadata("propertySetterForPrivateProperty.kt")
            public void testPropertySetterForPrivateProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/propertySetterForPrivateProperty.kt");
            }

            @TestMetadata("propertySetterForProtectedProperty.kt")
            public void testPropertySetterForProtectedProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/propertySetterForProtectedProperty.kt");
            }

            @TestMetadata("propertySetterInLocalClass.kt")
            public void testPropertySetterInLocalClass() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/propertySetterInLocalClass.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/simple.kt");
            }

            @TestMetadata("withAnnotations.kt")
            public void testWithAnnotations() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/private/withAnnotations.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/changeVisibility/protected")
        public static class Protected extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("caretAfter.kt")
            public void testCaretAfter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/caretAfter.kt");
            }

            @TestMetadata("constructorParameter.kt")
            public void testConstructorParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/constructorParameter.kt");
            }

            @TestMetadata("noModifier.kt")
            public void testNoModifier() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/noModifier.kt");
            }

            @TestMetadata("notForAnnotationPrimaryConstructor.kt")
            public void testNotForAnnotationPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForAnnotationPrimaryConstructor.kt");
            }

            @TestMetadata("notForFinalClass1.kt")
            public void testNotForFinalClass1() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForFinalClass1.kt");
            }

            @TestMetadata("notForFinalClass2.kt")
            public void testNotForFinalClass2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForFinalClass2.kt");
            }

            @TestMetadata("notForFinalClass3.kt")
            public void testNotForFinalClass3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForFinalClass3.kt");
            }

            @TestMetadata("notForFinalClass4.kt")
            public void testNotForFinalClass4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForFinalClass4.kt");
            }

            @TestMetadata("notForFinalClass5.kt")
            public void testNotForFinalClass5() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForFinalClass5.kt");
            }

            @TestMetadata("notForInterfaceMember.kt")
            public void testNotForInterfaceMember() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForInterfaceMember.kt");
            }

            @TestMetadata("notForNonValParameter.kt")
            public void testNotForNonValParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForNonValParameter.kt");
            }

            @TestMetadata("notForObjectMember.kt")
            public void testNotForObjectMember() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForObjectMember.kt");
            }

            @TestMetadata("notForOverride.kt")
            public void testNotForOverride() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForOverride.kt");
            }

            @TestMetadata("notForTopLevel.kt")
            public void testNotForTopLevel() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/notForTopLevel.kt");
            }

            @TestMetadata("primaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/primaryConstructor.kt");
            }

            @TestMetadata("propertySetter.kt")
            public void testPropertySetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/propertySetter.kt");
            }

            @TestMetadata("propertySetterForPrivateProperty.kt")
            public void testPropertySetterForPrivateProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/propertySetterForPrivateProperty.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/protected/simple.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/changeVisibility/public")
        public static class Public extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("alreadyPublic.kt")
            public void testAlreadyPublic() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/alreadyPublic.kt");
            }

            @TestMetadata("destructuringPropertyException.kt")
            public void testDestructuringPropertyException() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/destructuringPropertyException.kt");
            }

            @TestMetadata("notForSealedPrimaryConstructor.kt")
            public void testNotForSealedPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/notForSealedPrimaryConstructor.kt");
            }

            @TestMetadata("notForSealedSecondaryConstructor.kt")
            public void testNotForSealedSecondaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/notForSealedSecondaryConstructor.kt");
            }

            @TestMetadata("primaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/primaryConstructor.kt");
            }

            @TestMetadata("primaryConstructorPublicByDefault.kt")
            public void testPrimaryConstructorPublicByDefault() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/primaryConstructorPublicByDefault.kt");
            }

            @TestMetadata("propertyPrivateSetter.kt")
            public void testPropertyPrivateSetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/propertyPrivateSetter.kt");
            }

            @TestMetadata("propertyPrivateSetterForPrivateProperty.kt")
            public void testPropertyPrivateSetterForPrivateProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/propertyPrivateSetterForPrivateProperty.kt");
            }

            @TestMetadata("propertySetter.kt")
            public void testPropertySetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/propertySetter.kt");
            }

            @TestMetadata("propertySetterForPrivateProperty.kt")
            public void testPropertySetterForPrivateProperty() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/propertySetterForPrivateProperty.kt");
            }

            @TestMetadata("publicByDefault.kt")
            public void testPublicByDefault() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/publicByDefault.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/simple.kt");
            }

            @TestMetadata("typeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/public/typeAlias.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/changeVisibility/publicExplicitApi")
        public static class PublicExplicitApi extends AbstractK2IntentionTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("primaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/publicExplicitApi/primaryConstructor.kt");
            }

            @TestMetadata("propertyPrivateSetter.kt")
            public void testPropertyPrivateSetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/publicExplicitApi/propertyPrivateSetter.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/changeVisibility/publicExplicitApi/simple.kt");
            }
        }
    }

















    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/mergeIfs")
    public static class MergeIfs extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("caretAfterLeftBrace.kt")
        public void testCaretAfterLeftBrace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/caretAfterLeftBrace.kt");
        }

        @TestMetadata("caretAfterRightBrace.kt")
        public void testCaretAfterRightBrace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/caretAfterRightBrace.kt");
        }

        @TestMetadata("caretOnNestedIf.kt")
        public void testCaretOnNestedIf() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/caretOnNestedIf.kt");
        }

        @TestMetadata("caretOnNestedIf2.kt")
        public void testCaretOnNestedIf2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/caretOnNestedIf2.kt");
        }

        @TestMetadata("comments.kt")
        public void testComments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/comments.kt");
        }

        @TestMetadata("comments2.kt")
        public void testComments2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/comments2.kt");
        }

        @TestMetadata("comments3.kt")
        public void testComments3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/comments3.kt");
        }

        @TestMetadata("else1.kt")
        public void testElse1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/else1.kt");
        }

        @TestMetadata("else2.kt")
        public void testElse2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/else2.kt");
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/expression.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/mergeIfs/simple.kt");
        }
    }



























































































































    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen")
    public static class IfToWhen extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("combinedIf.kt")
        public void testCombinedIf() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/combinedIf.kt");
        }

        @TestMetadata("combinedIfWithEmptyLines.kt")
        public void testCombinedIfWithEmptyLines() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/combinedIfWithEmptyLines.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/comment.kt");
        }

        @TestMetadata("constant.kt")
        public void testConstant() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/constant.kt");
        }

        @TestMetadata("doNotSwallowComment.kt")
        public void testDoNotSwallowComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/doNotSwallowComment.kt");
        }

        @TestMetadata("ifElseSwallowComments.kt")
        public void testIfElseSwallowComments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifElseSwallowComments.kt");
        }

        @TestMetadata("ifElseSwallowReturnComment.kt")
        public void testIfElseSwallowReturnComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifElseSwallowReturnComment.kt");
        }

        @TestMetadata("ifElseSwallowTail.kt")
        public void testIfElseSwallowTail() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifElseSwallowTail.kt");
        }

        @TestMetadata("ifThenReturn.kt")
        public void testIfThenReturn() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifThenReturn.kt");
        }

        @TestMetadata("ifWithEqualityTests.kt")
        public void testIfWithEqualityTests() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifWithEqualityTests.kt");
        }

        @TestMetadata("ifWithIs.kt")
        public void testIfWithIs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifWithIs.kt");
        }

        @TestMetadata("ifWithMultiConditions.kt")
        public void testIfWithMultiConditions() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifWithMultiConditions.kt");
        }

        @TestMetadata("ifWithNegativeIs.kt")
        public void testIfWithNegativeIs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifWithNegativeIs.kt");
        }

        @TestMetadata("ifWithNegativeRangeTests.kt")
        public void testIfWithNegativeRangeTests() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifWithNegativeRangeTests.kt");
        }

        @TestMetadata("ifWithRangeTests.kt")
        public void testIfWithRangeTests() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTests.kt");
        }

        @TestMetadata("ifWithRangeTestsAndMultiConditions.kt")
        public void testIfWithRangeTestsAndMultiConditions() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTestsAndMultiConditions.kt");
        }

        @TestMetadata("ifWithReturnsAndEmptyLines.kt")
        public void testIfWithReturnsAndEmptyLines() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifWithReturnsAndEmptyLines.kt");
        }

        @TestMetadata("ifWithoutElse.kt")
        public void testIfWithoutElse() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/ifWithoutElse.kt");
        }

        @TestMetadata("lambdaExpression.kt")
        public void testLambdaExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/lambdaExpression.kt");
        }

        @TestMetadata("lambdaExpression2.kt")
        public void testLambdaExpression2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/lambdaExpression2.kt");
        }

        @TestMetadata("multipleIfFake.kt")
        public void testMultipleIfFake() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/multipleIfFake.kt");
        }

        @TestMetadata("multipleIfWithLongBranches.kt")
        public void testMultipleIfWithLongBranches() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/multipleIfWithLongBranches.kt");
        }

        @TestMetadata("multipleIfWithReturns.kt")
        public void testMultipleIfWithReturns() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/multipleIfWithReturns.kt");
        }

        @TestMetadata("multipleIfWithSingleReturns.kt")
        public void testMultipleIfWithSingleReturns() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/multipleIfWithSingleReturns.kt");
        }

        @TestMetadata("onElseIf.kt")
        public void testOnElseIf() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/onElseIf.kt");
        }

        @TestMetadata("onElseIf2.kt")
        public void testOnElseIf2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/onElseIf2.kt");
        }

        @TestMetadata("onElseIf3.kt")
        public void testOnElseIf3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/onElseIf3.kt");
        }

        @TestMetadata("samePropertyDifferentObjects.kt")
        public void testSamePropertyDifferentObjects() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/samePropertyDifferentObjects.kt");
        }

        @TestMetadata("secondIfNoThen.kt")
        public void testSecondIfNoThen() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/secondIfNoThen.kt");
        }

        @TestMetadata("shouldUniteCalls.kt")
        public void testShouldUniteCalls() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/shouldUniteCalls.kt");
        }

        @TestMetadata("shouldUniteStringTemplates.kt")
        public void testShouldUniteStringTemplates() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/shouldUniteStringTemplates.kt");
        }

        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/whenWithMultipleConditionTypes.kt");
        }

        @TestMetadata("withAnnotation.kt")
        public void testWithAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withAnnotation.kt");
        }

        @TestMetadata("withInternalLoop.kt")
        public void testWithInternalLoop() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withInternalLoop.kt");
        }

        @TestMetadata("withInternalLoopOnly.kt")
        public void testWithInternalLoopOnly() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withInternalLoopOnly.kt");
        }

        @TestMetadata("withLoop.kt")
        public void testWithLoop() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withLoop.kt");
        }

        @TestMetadata("withLoopDeep.kt")
        public void testWithLoopDeep() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withLoopDeep.kt");
        }

        @TestMetadata("withLoopDeep13.kt")
        public void testWithLoopDeep13() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withLoopDeep13.kt");
        }

        @TestMetadata("withLoopDeepAndComments.kt")
        public void testWithLoopDeepAndComments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withLoopDeepAndComments.kt");
        }

        @TestMetadata("withLoopDeepAndComments13.kt")
        public void testWithLoopDeepAndComments13() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withLoopDeepAndComments13.kt");
        }

        @TestMetadata("withLoopExistingLabel.kt")
        public void testWithLoopExistingLabel() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withLoopExistingLabel.kt");
        }

        @TestMetadata("withLoopNoJumps.kt")
        public void testWithLoopNoJumps() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withLoopNoJumps.kt");
        }

        @TestMetadata("withLoopOriginal.kt")
        public void testWithLoopOriginal() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withLoopOriginal.kt");
        }

        @TestMetadata("withLoopThen.kt")
        public void testWithLoopThen() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withLoopThen.kt");
        }

        @TestMetadata("withMatchingOnThisProperty.kt")
        public void testWithMatchingOnThisProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/ifToWhen/withMatchingOnThisProperty.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/branched/when/flatten")
    public static class Flatten extends AbstractK2IntentionTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("flattenWithComments.kt")
        public void testFlattenWithComments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/when/flatten/flattenWithComments.kt");
        }

        @TestMetadata("flattenWithSubject.kt")
        public void testFlattenWithSubject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/when/flatten/flattenWithSubject.kt");
        }

        @TestMetadata("flattenWithUnmatchedSubjects.kt")
        public void testFlattenWithUnmatchedSubjects() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/when/flatten/flattenWithUnmatchedSubjects.kt");
        }

        @TestMetadata("flattenWithoutSubject.kt")
        public void testFlattenWithoutSubject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/when/flatten/flattenWithoutSubject.kt");
        }
    }






























































}
