// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.intentions.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/intentions-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2IntentionTestGenerated extends AbstractK2IntentionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addMissingClassKeyword")
    public static class AddMissingClassKeyword extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstract.kt")
        public void testAbstract() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/abstract.kt");
        }

        @TestMetadata("annottion.kt")
        public void testAnnottion() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/annottion.kt");
        }

        @TestMetadata("data.kt")
        public void testData() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/data.kt");
        }

        @TestMetadata("dataHasClassKeyword.kt")
        public void testDataHasClassKeyword() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/dataHasClassKeyword.kt");
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/enum.kt");
        }

        @TestMetadata("enumHasClassKeyword.kt")
        public void testEnumHasClassKeyword() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/enumHasClassKeyword.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/inner.kt");
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addMissingClassKeyword/sealed.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addNameToArgument")
    public static class AddNameToArgument extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("alreadyNamed.kt")
        public void testAlreadyNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/alreadyNamed.kt");
        }

        @TestMetadata("ambiguousCall.kt")
        public void testAmbiguousCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/ambiguousCall.kt");
        }

        @TestMetadata("annotationCall.kt")
        public void testAnnotationCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/annotationCall.kt");
        }

        @TestMetadata("backtickedArgument.kt")
        public void testBacktickedArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/backtickedArgument.kt");
        }

        @TestMetadata("backtickedArgument2.kt")
        public void testBacktickedArgument2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/backtickedArgument2.kt");
        }

        @TestMetadata("backtickedArgument3.kt")
        public void testBacktickedArgument3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/backtickedArgument3.kt");
        }

        @TestMetadata("backtickedArgument4.kt")
        public void testBacktickedArgument4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/backtickedArgument4.kt");
        }

        @TestMetadata("beforeOtherNamed.kt")
        public void testBeforeOtherNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/beforeOtherNamed.kt");
        }

        @TestMetadata("delegatedConstructor.kt")
        public void testDelegatedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/delegatedConstructor.kt");
        }

        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/functionLiteralArgument.kt");
        }

        @TestMetadata("genericCall.kt")
        public void testGenericCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/genericCall.kt");
        }

        @TestMetadata("incompleteCall.kt")
        public void testIncompleteCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/incompleteCall.kt");
        }

        @TestMetadata("javaMethod.kt")
        public void testJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/javaMethod.kt");
        }

        @TestMetadata("kt11679.kt")
        public void testKt11679() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/kt11679.kt");
        }

        @TestMetadata("linkedList.kt")
        public void testLinkedList() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/linkedList.kt");
        }

        @TestMetadata("mixingPositionedAndNamed.kt")
        public void testMixingPositionedAndNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/mixingPositionedAndNamed.kt");
        }

        @TestMetadata("mixingPositionedAndNamedDisabled.kt")
        public void testMixingPositionedAndNamedDisabled() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/mixingPositionedAndNamedDisabled.kt");
        }

        @TestMetadata("notInsideIndices.kt")
        public void testNotInsideIndices() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/notInsideIndices.kt");
        }

        @TestMetadata("notInsideNestedArgumentList.kt")
        public void testNotInsideNestedArgumentList() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/notInsideNestedArgumentList.kt");
        }

        @TestMetadata("notInsideNestedArgumentList2.kt")
        public void testNotInsideNestedArgumentList2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/notInsideNestedArgumentList2.kt");
        }

        @TestMetadata("notResolved.kt")
        public void testNotResolved() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/notResolved.kt");
        }

        @TestMetadata("rangeForLambda1.kt")
        public void testRangeForLambda1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/rangeForLambda1.kt");
        }

        @TestMetadata("rangeForLambda2.kt")
        public void testRangeForLambda2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/rangeForLambda2.kt");
        }

        @TestMetadata("rangeForLambda3.kt")
        public void testRangeForLambda3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/rangeForLambda3.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/simple.kt");
        }

        @TestMetadata("superClassConstructor.kt")
        public void testSuperClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/superClassConstructor.kt");
        }

        @TestMetadata("vararg1.kt")
        public void testVararg1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/vararg1.kt");
        }

        @TestMetadata("vararg2.kt")
        public void testVararg2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/vararg2.kt");
        }

        @TestMetadata("vararg3.kt")
        public void testVararg3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/vararg3.kt");
        }

        @TestMetadata("withComment.kt")
        public void testWithComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNameToArgument/withComment.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addNamesToCallArguments")
    public static class AddNamesToCallArguments extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("allNamed.kt")
        public void testAllNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/allNamed.kt");
        }

        @TestMetadata("ambiguousCall.kt")
        public void testAmbiguousCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/ambiguousCall.kt");
        }

        @TestMetadata("annotationCall.kt")
        public void testAnnotationCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/annotationCall.kt");
        }

        @TestMetadata("delegatedConstructor.kt")
        public void testDelegatedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/delegatedConstructor.kt");
        }

        @TestMetadata("extraArguments.kt")
        public void testExtraArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/extraArguments.kt");
        }

        @TestMetadata("genericCall.kt")
        public void testGenericCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/genericCall.kt");
        }

        @TestMetadata("incompleteCall.kt")
        public void testIncompleteCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/incompleteCall.kt");
        }

        @TestMetadata("javaMethod.kt")
        public void testJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/javaMethod.kt");
        }

        @TestMetadata("notResolved.kt")
        public void testNotResolved() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/notResolved.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/simple.kt");
        }

        @TestMetadata("singleArgument.kt")
        public void testSingleArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/singleArgument.kt");
        }

        @TestMetadata("superClassConstructor.kt")
        public void testSuperClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/superClassConstructor.kt");
        }

        @TestMetadata("trailingLambda.kt")
        public void testTrailingLambda() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/trailingLambda.kt");
        }

        @TestMetadata("varargMultiple.kt")
        public void testVarargMultiple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/varargMultiple.kt");
        }

        @TestMetadata("varargSingle.kt")
        public void testVarargSingle() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/varargSingle.kt");
        }

        @TestMetadata("varargSingleWithSpread.kt")
        public void testVarargSingleWithSpread() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToCallArguments/varargSingleWithSpread.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addNamesToFollowingArguments")
    public static class AddNamesToFollowingArguments extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("alreadyNamed.kt")
        public void testAlreadyNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/alreadyNamed.kt");
        }

        @TestMetadata("annotationCall.kt")
        public void testAnnotationCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/annotationCall.kt");
        }

        @TestMetadata("beforeOtherNamed.kt")
        public void testBeforeOtherNamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/beforeOtherNamed.kt");
        }

        @TestMetadata("delegatedConstructor.kt")
        public void testDelegatedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/delegatedConstructor.kt");
        }

        @TestMetadata("first.kt")
        public void testFirst() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/first.kt");
        }

        @TestMetadata("last.kt")
        public void testLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/last.kt");
        }

        @TestMetadata("lastUnnamed.kt")
        public void testLastUnnamed() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/lastUnnamed.kt");
        }

        @TestMetadata("rangeForLambda1.kt")
        public void testRangeForLambda1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/rangeForLambda1.kt");
        }

        @TestMetadata("rangeForLambda2.kt")
        public void testRangeForLambda2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/rangeForLambda2.kt");
        }

        @TestMetadata("rangeForLambda3.kt")
        public void testRangeForLambda3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/rangeForLambda3.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addNamesToFollowingArguments/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addOpenModifier")
    public static class AddOpenModifier extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("abstractClass.kt")
        public void testAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/abstractClass.kt");
        }

        @TestMetadata("abstractFunction.kt")
        public void testAbstractFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/abstractFunction.kt");
        }

        @TestMetadata("alreadyOpen.kt")
        public void testAlreadyOpen() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/alreadyOpen.kt");
        }

        @TestMetadata("destructuringDeclaration.kt")
        public void testDestructuringDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/destructuringDeclaration.kt");
        }

        @TestMetadata("enumClass.kt")
        public void testEnumClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/enumClass.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/function.kt");
        }

        @TestMetadata("interface.kt")
        public void testInterface() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/interface.kt");
        }

        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/localFunction.kt");
        }

        @TestMetadata("localProperty.kt")
        public void testLocalProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/localProperty.kt");
        }

        @TestMetadata("notOpen.kt")
        public void testNotOpen() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/notOpen.kt");
        }

        @TestMetadata("parameter.kt")
        public void testParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/parameter.kt");
        }

        @TestMetadata("private.kt")
        public void testPrivate() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/private.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/property.kt");
        }

        @TestMetadata("sealedClass.kt")
        public void testSealedClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addOpenModifier/sealedClass.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addPropertyAccessors")
    public abstract static class AddPropertyAccessors extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addPropertyAccessors/both")
        public static class Both extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstract.kt")
            public void testAbstract() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/abstract.kt");
            }

            @TestMetadata("caretNotOnName.kt")
            public void testCaretNotOnName() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/caretNotOnName.kt");
            }

            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/delegate.kt");
            }

            @TestMetadata("expect.kt")
            public void testExpect() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/expect.kt");
            }

            @TestMetadata("hasAccessor.kt")
            public void testHasAccessor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/hasAccessor.kt");
            }

            @TestMetadata("hasGetter.kt")
            public void testHasGetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/hasGetter.kt");
            }

            @TestMetadata("hasSetter.kt")
            public void testHasSetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/hasSetter.kt");
            }

            @TestMetadata("jvmField.kt")
            public void testJvmField() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/jvmField.kt");
            }

            @TestMetadata("jvmField2.kt")
            public void testJvmField2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/jvmField2.kt");
            }

            @TestMetadata("lateinit.kt")
            public void testLateinit() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/lateinit.kt");
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/local.kt");
            }

            @TestMetadata("noType.kt")
            public void testNoType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/noType.kt");
            }

            @TestMetadata("top.kt")
            public void testTop() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/top.kt");
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/val.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/both/var.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addPropertyAccessors/getter")
        public static class Getter extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstract.kt")
            public void testAbstract() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/abstract.kt");
            }

            @TestMetadata("caretNotOnName.kt")
            public void testCaretNotOnName() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/caretNotOnName.kt");
            }

            @TestMetadata("const.kt")
            public void testConst() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/const.kt");
            }

            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/delegate.kt");
            }

            @TestMetadata("expect.kt")
            public void testExpect() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/expect.kt");
            }

            @TestMetadata("hasAccessor.kt")
            public void testHasAccessor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/hasAccessor.kt");
            }

            @TestMetadata("hasGetter.kt")
            public void testHasGetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/hasGetter.kt");
            }

            @TestMetadata("hasSetter.kt")
            public void testHasSetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/hasSetter.kt");
            }

            @TestMetadata("jvmField.kt")
            public void testJvmField() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/jvmField.kt");
            }

            @TestMetadata("jvmField2.kt")
            public void testJvmField2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/jvmField2.kt");
            }

            @TestMetadata("lateinit.kt")
            public void testLateinit() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/lateinit.kt");
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/local.kt");
            }

            @TestMetadata("noType.kt")
            public void testNoType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/noType.kt");
            }

            @TestMetadata("top.kt")
            public void testTop() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/top.kt");
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/val.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/getter/var.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addPropertyAccessors/setter")
        public static class Setter extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstract.kt")
            public void testAbstract() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/abstract.kt");
            }

            @TestMetadata("caretNotOnName.kt")
            public void testCaretNotOnName() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/caretNotOnName.kt");
            }

            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/delegate.kt");
            }

            @TestMetadata("expect.kt")
            public void testExpect() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/expect.kt");
            }

            @TestMetadata("hasAccessor.kt")
            public void testHasAccessor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/hasAccessor.kt");
            }

            @TestMetadata("hasGetter.kt")
            public void testHasGetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/hasGetter.kt");
            }

            @TestMetadata("hasSetter.kt")
            public void testHasSetter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/hasSetter.kt");
            }

            @TestMetadata("jvmField.kt")
            public void testJvmField() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/jvmField.kt");
            }

            @TestMetadata("jvmField2.kt")
            public void testJvmField2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/jvmField2.kt");
            }

            @TestMetadata("lateinit.kt")
            public void testLateinit() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/lateinit.kt");
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/local.kt");
            }

            @TestMetadata("noType.kt")
            public void testNoType() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/noType.kt");
            }

            @TestMetadata("top.kt")
            public void testTop() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/top.kt");
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/val.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addPropertyAccessors/setter/var.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/specifyTypeExplicitly")
    public static class SpecifyTypeExplicitly extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("anonymousObject.kt")
        public void testAnonymousObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/anonymousObject.kt");
        }

        @TestMetadata("anonymousObjectJavaClass.kt")
        public void testAnonymousObjectJavaClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/anonymousObjectJavaClass.kt");
        }

        @TestMetadata("backticked.kt")
        public void testBackticked() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/backticked.kt");
        }

        @TestMetadata("badCaretPosition.kt")
        public void testBadCaretPosition() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/badCaretPosition.kt");
        }

        @TestMetadata("classNameClashing.kt")
        public void testClassNameClashing() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/classNameClashing.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/constructor.kt");
        }

        @TestMetadata("definitelyNonNullType.kt")
        public void testDefinitelyNonNullType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullType.kt");
        }

        @TestMetadata("definitelyNonNullTypeAsReturnFunctionType.kt")
        public void testDefinitelyNonNullTypeAsReturnFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeAsReturnFunctionType.kt");
        }

        @TestMetadata("definitelyNonNullTypeFunctionType.kt")
        public void testDefinitelyNonNullTypeFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeFunctionType.kt");
        }

        @TestMetadata("definitelyNonNullTypeInGenericClass.kt")
        public void testDefinitelyNonNullTypeInGenericClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeInGenericClass.kt");
        }

        @TestMetadata("definitelyNonNullTypeOverrideProperty1.kt")
        public void testDefinitelyNonNullTypeOverrideProperty1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeOverrideProperty1.kt");
        }

        @TestMetadata("definitelyNonNullTypeOverrideProperty2.kt")
        public void testDefinitelyNonNullTypeOverrideProperty2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/definitelyNonNullTypeOverrideProperty2.kt");
        }

        @TestMetadata("destructuringInLambda.kt")
        public void testDestructuringInLambda() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/destructuringInLambda.kt");
        }

        @TestMetadata("enumType.kt")
        public void testEnumType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/enumType.kt");
        }

        @TestMetadata("forAsExpression.kt")
        public void testForAsExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/forAsExpression.kt");
        }

        @TestMetadata("functionType.kt")
        public void testFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/functionType.kt");
        }

        @TestMetadata("genericClass.kt")
        public void testGenericClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/genericClass.kt");
        }

        @TestMetadata("genericClassWithTypeParameters.kt")
        public void testGenericClassWithTypeParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/genericClassWithTypeParameters.kt");
        }

        @TestMetadata("genericClassWithTypeParameters2.kt")
        public void testGenericClassWithTypeParameters2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/genericClassWithTypeParameters2.kt");
        }

        @TestMetadata("genericFunction.kt")
        public void testGenericFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/genericFunction.kt");
        }

        @TestMetadata("innerTypeParameter.kt")
        public void testInnerTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/innerTypeParameter.kt");
        }

        @TestMetadata("innerTypeParameter2.kt")
        public void testInnerTypeParameter2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/innerTypeParameter2.kt");
        }

        @TestMetadata("lambdaParam.kt")
        public void testLambdaParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/lambdaParam.kt");
        }

        @TestMetadata("localClass.kt")
        public void testLocalClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClass.kt");
        }

        @TestMetadata("localClassInSecondTypeParameter.kt")
        public void testLocalClassInSecondTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClassInSecondTypeParameter.kt");
        }

        @TestMetadata("localClassInSecondTypeParameter2.kt")
        public void testLocalClassInSecondTypeParameter2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClassInSecondTypeParameter2.kt");
        }

        @TestMetadata("localClassInSecondTypeParameter3.kt")
        public void testLocalClassInSecondTypeParameter3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClassInSecondTypeParameter3.kt");
        }

        @TestMetadata("localClassInTypeParameter.kt")
        public void testLocalClassInTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/localClassInTypeParameter.kt");
        }

        @TestMetadata("loopParameter.kt")
        public void testLoopParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/loopParameter.kt");
        }

        @TestMetadata("outClass.kt")
        public void testOutClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/outClass.kt");
        }

        @TestMetadata("outClass2.kt")
        public void testOutClass2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/outClass2.kt");
        }

        @TestMetadata("outClass3.kt")
        public void testOutClass3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/outClass3.kt");
        }

        @TestMetadata("overriddenAsNull.kt")
        public void testOverriddenAsNull() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overriddenAsNull.kt");
        }

        @TestMetadata("overrideNotNullFunction.kt")
        public void testOverrideNotNullFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overrideNotNullFunction.kt");
        }

        @TestMetadata("overrideNotNullProperty.kt")
        public void testOverrideNotNullProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overrideNotNullProperty.kt");
        }

        @TestMetadata("overrideNullableFunction.kt")
        public void testOverrideNullableFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overrideNullableFunction.kt");
        }

        @TestMetadata("overrideNullableProperty.kt")
        public void testOverrideNullableProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/overrideNullableProperty.kt");
        }

        @TestMetadata("propertyTypeFromGetter.kt")
        public void testPropertyTypeFromGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/propertyTypeFromGetter.kt");
        }

        @TestMetadata("publicMember.kt")
        public void testPublicMember() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/publicMember.kt");
        }

        @TestMetadata("stringRedefined.kt")
        public void testStringRedefined() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/stringRedefined.kt");
        }

        @TestMetadata("typeAlias.kt")
        public void testTypeAlias() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/typeAlias.kt");
        }

        @TestMetadata("typeAlreadyProvided.kt")
        public void testTypeAlreadyProvided() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/typeAlreadyProvided.kt");
        }

        @TestMetadata("unitType.kt")
        public void testUnitType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/specifyTypeExplicitly/unitType.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/importAllMembers")
    public static class ImportAllMembers extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("AlreadyImported.kt")
        public void testAlreadyImported() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/AlreadyImported.kt");
        }

        @TestMetadata("AlreadyImportedWithStar.kt")
        public void testAlreadyImportedWithStar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/AlreadyImportedWithStar.kt");
        }

        @TestMetadata("AmbiguousCalls.kt")
        public void testAmbiguousCalls() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/AmbiguousCalls.kt");
        }

        @TestMetadata("EnumMembers.kt")
        public void testEnumMembers() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumMembers.kt");
        }

        @TestMetadata("EnumSyntheticMethods.kt")
        public void testEnumSyntheticMethods() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods.kt");
        }

        @TestMetadata("EnumSyntheticMethods10.kt")
        public void testEnumSyntheticMethods10() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods10.kt");
        }

        @TestMetadata("EnumSyntheticMethods11.kt")
        public void testEnumSyntheticMethods11() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods11.kt");
        }

        @TestMetadata("EnumSyntheticMethods12.kt")
        public void testEnumSyntheticMethods12() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods12.kt");
        }

        @TestMetadata("EnumSyntheticMethods13.kt")
        public void testEnumSyntheticMethods13() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods13.kt");
        }

        @TestMetadata("EnumSyntheticMethods2.kt")
        public void testEnumSyntheticMethods2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods2.kt");
        }

        @TestMetadata("EnumSyntheticMethods3.kt")
        public void testEnumSyntheticMethods3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods3.kt");
        }

        @TestMetadata("EnumSyntheticMethods4.kt")
        public void testEnumSyntheticMethods4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods4.kt");
        }

        @TestMetadata("EnumSyntheticMethods5.kt")
        public void testEnumSyntheticMethods5() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods5.kt");
        }

        @TestMetadata("EnumSyntheticMethods6.kt")
        public void testEnumSyntheticMethods6() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods6.kt");
        }

        @TestMetadata("EnumSyntheticMethods7.kt")
        public void testEnumSyntheticMethods7() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods7.kt");
        }

        @TestMetadata("EnumSyntheticMethods8.kt")
        public void testEnumSyntheticMethods8() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods8.kt");
        }

        @TestMetadata("EnumSyntheticMethods9.kt")
        public void testEnumSyntheticMethods9() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/EnumSyntheticMethods9.kt");
        }

        @TestMetadata("ImportAllMembersInImport.kt")
        public void testImportAllMembersInImport() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/ImportAllMembersInImport.kt");
        }

        @TestMetadata("NotFromCompanionObject.kt")
        public void testNotFromCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/NotFromCompanionObject.kt");
        }

        @TestMetadata("NotFromObject.kt")
        public void testNotFromObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/NotFromObject.kt");
        }

        @TestMetadata("QualifiedName.kt")
        public void testQualifiedName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/QualifiedName.kt");
        }

        @TestMetadata("QualifiedName2.kt")
        public void testQualifiedName2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/QualifiedName2.kt");
        }

        @TestMetadata("RemoveSingleImports.kt")
        public void testRemoveSingleImports() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/RemoveSingleImports.kt");
        }

        @TestMetadata("StaticJavaMembers.kt")
        public void testStaticJavaMembers() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/StaticJavaMembers.kt");
        }

        @TestMetadata("TypeReference.kt")
        public void testTypeReference() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/TypeReference.kt");
        }

        @TestMetadata("TypeReference2.kt")
        public void testTypeReference2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/TypeReference2.kt");
        }

        @TestMetadata("UnresolvedMember.kt")
        public void testUnresolvedMember() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importAllMembers/UnresolvedMember.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/importMember")
    public static class ImportMember extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("AlreadyImportedSameNameClass.kt")
        public void testAlreadyImportedSameNameClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/AlreadyImportedSameNameClass.kt");
        }

        @TestMetadata("AlreadyImportedSameNameClass2.kt")
        public void testAlreadyImportedSameNameClass2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/AlreadyImportedSameNameClass2.kt");
        }

        @TestMetadata("ClassCallChain.kt")
        public void testClassCallChain() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ClassCallChain.kt");
        }

        @TestMetadata("ClassCallChain2.kt")
        public void testClassCallChain2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ClassCallChain2.kt");
        }

        @TestMetadata("ClassCallChain3.kt")
        public void testClassCallChain3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ClassCallChain3.kt");
        }

        @TestMetadata("EnumMember.kt")
        public void testEnumMember() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/EnumMember.kt");
        }

        @TestMetadata("FqReference.kt")
        public void testFqReference() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FqReference.kt");
        }

        @TestMetadata("FqReferenceCall.kt")
        public void testFqReferenceCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FqReferenceCall.kt");
        }

        @TestMetadata("FqReferenceForNestedMember.kt")
        public void testFqReferenceForNestedMember() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FqReferenceForNestedMember.kt");
        }

        @TestMetadata("FqReferenceForNestedMember2.kt")
        public void testFqReferenceForNestedMember2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FqReferenceForNestedMember2.kt");
        }

        @TestMetadata("FromCompanionObject.kt")
        public void testFromCompanionObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/FromCompanionObject.kt");
        }

        @TestMetadata("ImportMemberInImport.kt")
        public void testImportMemberInImport() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ImportMemberInImport.kt");
        }

        @TestMetadata("ImportMemberInMiddleOfImport.kt")
        public void testImportMemberInMiddleOfImport() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ImportMemberInMiddleOfImport.kt");
        }

        @TestMetadata("NestedClass1.kt")
        public void testNestedClass1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NestedClass1.kt");
        }

        @TestMetadata("NestedClass2.kt")
        public void testNestedClass2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NestedClass2.kt");
        }

        @TestMetadata("NoTarget.kt")
        public void testNoTarget() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NoTarget.kt");
        }

        @TestMetadata("NotApplicablePackage.kt")
        public void testNotApplicablePackage() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NotApplicablePackage.kt");
        }

        @TestMetadata("NotForQualifier.kt")
        public void testNotForQualifier() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/NotForQualifier.kt");
        }

        @TestMetadata("ObjectMethod.kt")
        public void testObjectMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/ObjectMethod.kt");
        }

        @TestMetadata("StaticJavaField.kt")
        public void testStaticJavaField() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/StaticJavaField.kt");
        }

        @TestMetadata("StaticJavaMethod.kt")
        public void testStaticJavaMethod() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/StaticJavaMethod.kt");
        }

        @TestMetadata("TopLevelFun.kt")
        public void testTopLevelFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/importMember/TopLevelFun.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/chop")
    public abstract static class Chop extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/chop/argumentList")
        public static class ArgumentList extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("leftParOnSameLine.kt")
            public void testLeftParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/leftParOnSameLine.kt");
            }

            @TestMetadata("onNestedArgumentList.kt")
            public void testOnNestedArgumentList() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onNestedArgumentList.kt");
            }

            @TestMetadata("onNestedArgumentList2.kt")
            public void testOnNestedArgumentList2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onNestedArgumentList2.kt");
            }

            @TestMetadata("onNestedArgumentList3.kt")
            public void testOnNestedArgumentList3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onNestedArgumentList3.kt");
            }

            @TestMetadata("onNestedArgumentList4.kt")
            public void testOnNestedArgumentList4() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onNestedArgumentList4.kt");
            }

            @TestMetadata("onRightParenthesis.kt")
            public void testOnRightParenthesis() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/onRightParenthesis.kt");
            }

            @TestMetadata("parOnSameLine.kt")
            public void testParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/parOnSameLine.kt");
            }

            @TestMetadata("rightParOnSameLine.kt")
            public void testRightParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/rightParOnSameLine.kt");
            }

            @TestMetadata("threeArgs.kt")
            public void testThreeArgs() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/threeArgs.kt");
            }

            @TestMetadata("threeArgsWithTrailingComma.kt")
            public void testThreeArgsWithTrailingComma() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/argumentList/threeArgsWithTrailingComma.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/chop/parameterList")
        public static class ParameterList extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("hasAllLineBreaks.kt")
            public void testHasAllLineBreaks() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/hasAllLineBreaks.kt");
            }

            @TestMetadata("hasSomeLineBreaks1.kt")
            public void testHasSomeLineBreaks1() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/hasSomeLineBreaks1.kt");
            }

            @TestMetadata("hasSomeLineBreaks1WithTrailingComma.kt")
            public void testHasSomeLineBreaks1WithTrailingComma() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/hasSomeLineBreaks1WithTrailingComma.kt");
            }

            @TestMetadata("hasSomeLineBreaks2.kt")
            public void testHasSomeLineBreaks2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/hasSomeLineBreaks2.kt");
            }

            @TestMetadata("leftParOnSameLine.kt")
            public void testLeftParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/leftParOnSameLine.kt");
            }

            @TestMetadata("oneParameter.kt")
            public void testOneParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/oneParameter.kt");
            }

            @TestMetadata("parOnSameLine.kt")
            public void testParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/parOnSameLine.kt");
            }

            @TestMetadata("rightParOnSameLine.kt")
            public void testRightParOnSameLine() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/rightParOnSameLine.kt");
            }

            @TestMetadata("threeParameters.kt")
            public void testThreeParameters() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/threeParameters.kt");
            }

            @TestMetadata("twoParameters.kt")
            public void testTwoParameters() throws Exception {
                runTest("../../../idea/tests/testData/intentions/chop/parameterList/twoParameters.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertConcatenationToBuildString")
    public static class ConvertConcatenationToBuildString extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/basic.kt");
        }

        @TestMetadata("inAnnotation.kt")
        public void testInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/inAnnotation.kt");
        }

        @TestMetadata("withComments.kt")
        public void testWithComments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments.kt");
        }

        @TestMetadata("withComments2.kt")
        public void testWithComments2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments2.kt");
        }

        @TestMetadata("withComments3.kt")
        public void testWithComments3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments3.kt");
        }

        @TestMetadata("withComments4.kt")
        public void testWithComments4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments4.kt");
        }

        @TestMetadata("withComments5.kt")
        public void testWithComments5() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertConcatenationToBuildString/withComments5.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString")
    public static class ConvertStringTemplateToBuildString extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("argument.kt")
        public void testArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/argument.kt");
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/basic.kt");
        }

        @TestMetadata("basic2.kt")
        public void testBasic2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/basic2.kt");
        }

        @TestMetadata("basic3.kt")
        public void testBasic3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/basic3.kt");
        }

        @TestMetadata("empty.kt")
        public void testEmpty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/empty.kt");
        }

        @TestMetadata("inAnnotation.kt")
        public void testInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/inAnnotation.kt");
        }

        @TestMetadata("raw.kt")
        public void testRaw() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/raw.kt");
        }

        @TestMetadata("slashBuck.kt")
        public void testSlashBuck() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertStringTemplateToBuildString/slashBuck.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertToBlockBody")
    public static class ConvertToBlockBody extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addSpace.kt")
        public void testAddSpace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/addSpace.kt");
        }

        @TestMetadata("adjustLineIndent.kt")
        public void testAdjustLineIndent() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/adjustLineIndent.kt");
        }

        @TestMetadata("annotatedExpr.kt")
        public void testAnnotatedExpr() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/annotatedExpr.kt");
        }

        @TestMetadata("annotatedExpr2.kt")
        public void testAnnotatedExpr2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/annotatedExpr2.kt");
        }

        @TestMetadata("annotatedExprInParentheses.kt")
        public void testAnnotatedExprInParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/annotatedExprInParentheses.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/comment.kt");
        }

        @TestMetadata("comment2.kt")
        public void testComment2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/comment2.kt");
        }

        @TestMetadata("comment3.kt")
        public void testComment3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/comment3.kt");
        }

        @TestMetadata("comment4.kt")
        public void testComment4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/comment4.kt");
        }

        @TestMetadata("explicitlyNonUnitFun.kt")
        public void testExplicitlyNonUnitFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyNonUnitFun.kt");
        }

        @TestMetadata("explicitlyTypedFunWithUnresolvedExpression.kt")
        public void testExplicitlyTypedFunWithUnresolvedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyTypedFunWithUnresolvedExpression.kt");
        }

        @TestMetadata("explicitlyTypedFunWithUnresolvedType.kt")
        public void testExplicitlyTypedFunWithUnresolvedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyTypedFunWithUnresolvedType.kt");
        }

        @TestMetadata("explicitlyUnitFun.kt")
        public void testExplicitlyUnitFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyUnitFun.kt");
        }

        @TestMetadata("explicitlyUnitFunWithUnresolvedExpression.kt")
        public void testExplicitlyUnitFunWithUnresolvedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/explicitlyUnitFunWithUnresolvedExpression.kt");
        }

        @TestMetadata("funWithCustomUnitClass.kt")
        public void testFunWithCustomUnitClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/funWithCustomUnitClass.kt");
        }

        @TestMetadata("funWithThrow.kt")
        public void testFunWithThrow() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/funWithThrow.kt");
        }

        @TestMetadata("funWithUnit.kt")
        public void testFunWithUnit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/funWithUnit.kt");
        }

        @TestMetadata("getter.kt")
        public void testGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getter.kt");
        }

        @TestMetadata("getterTypeInferred.kt")
        public void testGetterTypeInferred() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterTypeInferred.kt");
        }

        @TestMetadata("getterWithComment.kt")
        public void testGetterWithComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithComment.kt");
        }

        @TestMetadata("getterWithComment2.kt")
        public void testGetterWithComment2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithComment2.kt");
        }

        @TestMetadata("getterWithComment3.kt")
        public void testGetterWithComment3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithComment3.kt");
        }

        @TestMetadata("getterWithComment4.kt")
        public void testGetterWithComment4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithComment4.kt");
        }

        @TestMetadata("getterWithThrow.kt")
        public void testGetterWithThrow() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/getterWithThrow.kt");
        }

        @TestMetadata("ifWhenUnit.kt")
        public void testIfWhenUnit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/ifWhenUnit.kt");
        }

        @TestMetadata("implicitlyNonUnitFun.kt")
        public void testImplicitlyNonUnitFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/implicitlyNonUnitFun.kt");
        }

        @TestMetadata("implicitlyNonUnitFun2.kt")
        public void testImplicitlyNonUnitFun2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/implicitlyNonUnitFun2.kt");
        }

        @TestMetadata("implicitlyTypedFunWithUnresolvedType.kt")
        public void testImplicitlyTypedFunWithUnresolvedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/implicitlyTypedFunWithUnresolvedType.kt");
        }

        @TestMetadata("implicitlyUnitFun.kt")
        public void testImplicitlyUnitFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/implicitlyUnitFun.kt");
        }

        @TestMetadata("labeledExpr.kt")
        public void testLabeledExpr() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/labeledExpr.kt");
        }

        @TestMetadata("labeledExprInParentheses.kt")
        public void testLabeledExprInParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/labeledExprInParentheses.kt");
        }

        @TestMetadata("nothingFun.kt")
        public void testNothingFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/nothingFun.kt");
        }

        @TestMetadata("overrideWithPlatformType.kt")
        public void testOverrideWithPlatformType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/overrideWithPlatformType.kt");
        }

        @TestMetadata("setter.kt")
        public void testSetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/setter.kt");
        }

        @TestMetadata("valueIsAnonymousObject.kt")
        public void testValueIsAnonymousObject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/valueIsAnonymousObject.kt");
        }

        @TestMetadata("valueIsAnonymousObject2.kt")
        public void testValueIsAnonymousObject2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/valueIsAnonymousObject2.kt");
        }

        @TestMetadata("valueIsAnonymousObject3.kt")
        public void testValueIsAnonymousObject3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/valueIsAnonymousObject3.kt");
        }

        @TestMetadata("valueIsAnonymousObject4.kt")
        public void testValueIsAnonymousObject4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/valueIsAnonymousObject4.kt");
        }

        @TestMetadata("whenUnit.kt")
        public void testWhenUnit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToBlockBody/whenUnit.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addWhenRemainingBranches")
    public static class AddWhenRemainingBranches extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("emptyWhen.kt")
        public void testEmptyWhen() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addWhenRemainingBranches/emptyWhen.kt");
        }

        @TestMetadata("noElse.kt")
        public void testNoElse() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addWhenRemainingBranches/noElse.kt");
        }

        @TestMetadata("noRemainingBranches.kt")
        public void testNoRemainingBranches() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addWhenRemainingBranches/noRemainingBranches.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/addWhenRemainingBranches/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertToConcatenatedString")
    public static class ConvertToConcatenatedString extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("embeddedIf.kt")
        public void testEmbeddedIf() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/embeddedIf.kt");
        }

        @TestMetadata("embeddedIfBraces.kt")
        public void testEmbeddedIfBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/embeddedIfBraces.kt");
        }

        @TestMetadata("embeddedIfSingle.kt")
        public void testEmbeddedIfSingle() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/embeddedIfSingle.kt");
        }

        @TestMetadata("emptyBraces.kt")
        public void testEmptyBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/emptyBraces.kt");
        }

        @TestMetadata("handlesEscapeString.kt")
        public void testHandlesEscapeString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/handlesEscapeString.kt");
        }

        @TestMetadata("hasEmbeddedConcatenation.kt")
        public void testHasEmbeddedConcatenation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasEmbeddedConcatenation.kt");
        }

        @TestMetadata("hasEmbeddedHigherPrecedence.kt")
        public void testHasEmbeddedHigherPrecedence() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasEmbeddedHigherPrecedence.kt");
        }

        @TestMetadata("hasEmbeddedLowerPrecedence.kt")
        public void testHasEmbeddedLowerPrecedence() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasEmbeddedLowerPrecedence.kt");
        }

        @TestMetadata("hasEmptyTemplateEntry.kt")
        public void testHasEmptyTemplateEntry() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasEmptyTemplateEntry.kt");
        }

        @TestMetadata("hasParenthesesInTemplateEntry.kt")
        public void testHasParenthesesInTemplateEntry() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasParenthesesInTemplateEntry.kt");
        }

        @TestMetadata("hasPlusSign.kt")
        public void testHasPlusSign() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasPlusSign.kt");
        }

        @TestMetadata("hasPlusSignInRawString.kt")
        public void testHasPlusSignInRawString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/hasPlusSignInRawString.kt");
        }

        @TestMetadata("interpolate2StringConstants.kt")
        public void testInterpolate2StringConstants() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolate2StringConstants.kt");
        }

        @TestMetadata("interpolate3.kt")
        public void testInterpolate3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolate3.kt");
        }

        @TestMetadata("interpolateChar.kt")
        public void testInterpolateChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateChar.kt");
        }

        @TestMetadata("interpolateConstants.kt")
        public void testInterpolateConstants() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateConstants.kt");
        }

        @TestMetadata("interpolateMapAccess.kt")
        public void testInterpolateMapAccess() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateMapAccess.kt");
        }

        @TestMetadata("interpolateMethodInvoke.kt")
        public void testInterpolateMethodInvoke() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateMethodInvoke.kt");
        }

        @TestMetadata("interpolateSimpleWithBraces.kt")
        public void testInterpolateSimpleWithBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateSimpleWithBraces.kt");
        }

        @TestMetadata("interpolateStringWithFloat.kt")
        public void testInterpolateStringWithFloat() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateStringWithFloat.kt");
        }

        @TestMetadata("interpolateStringWithInt.kt")
        public void testInterpolateStringWithInt() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/interpolateStringWithInt.kt");
        }

        @TestMetadata("lastExprIsNamedExpression.kt")
        public void testLastExprIsNamedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/lastExprIsNamedExpression.kt");
        }

        @TestMetadata("multilineString.kt")
        public void testMultilineString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/multilineString.kt");
        }

        @TestMetadata("multilineWhenExpr.kt")
        public void testMultilineWhenExpr() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/multilineWhenExpr.kt");
        }

        @TestMetadata("namedExprBetweenConstants.kt")
        public void testNamedExprBetweenConstants() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/namedExprBetweenConstants.kt");
        }

        @TestMetadata("notApplicableForErrorElement.kt")
        public void testNotApplicableForErrorElement() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/notApplicableForErrorElement.kt");
        }

        @TestMetadata("notApplicableForSimple.kt")
        public void testNotApplicableForSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/notApplicableForSimple.kt");
        }

        @TestMetadata("notAvailableForDollarSignLiteral.kt")
        public void testNotAvailableForDollarSignLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/notAvailableForDollarSignLiteral.kt");
        }

        @TestMetadata("singleVar.kt")
        public void testSingleVar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/singleVar.kt");
        }

        @TestMetadata("startsWithAnnotatedExpression.kt")
        public void testStartsWithAnnotatedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithAnnotatedExpression.kt");
        }

        @TestMetadata("startsWithEmbeddedConcatenation.kt")
        public void testStartsWithEmbeddedConcatenation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithEmbeddedConcatenation.kt");
        }

        @TestMetadata("startsWithInt.kt")
        public void testStartsWithInt() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithInt.kt");
        }

        @TestMetadata("startsWithPostfixExpression.kt")
        public void testStartsWithPostfixExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithPostfixExpression.kt");
        }

        @TestMetadata("startsWithStringExpression.kt")
        public void testStartsWithStringExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/startsWithStringExpression.kt");
        }

        @TestMetadata("stringTemplateInCurryBraces.kt")
        public void testStringTemplateInCurryBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/stringTemplateInCurryBraces.kt");
        }

        @TestMetadata("tricky.kt")
        public void testTricky() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/tricky.kt");
        }

        @TestMetadata("withAndWithoutBraces.kt")
        public void testWithAndWithoutBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToConcatenatedString/withAndWithoutBraces.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertToStringTemplate")
    public static class ConvertToStringTemplate extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("backslashNMultilineString.kt")
        public void testBackslashNMultilineString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/backslashNMultilineString.kt");
        }

        @TestMetadata("combineEmptyStrings.kt")
        public void testCombineEmptyStrings() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/combineEmptyStrings.kt");
        }

        @TestMetadata("combinesNonStringsAsStrings.kt")
        public void testCombinesNonStringsAsStrings() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/combinesNonStringsAsStrings.kt");
        }

        @TestMetadata("combinesNonStringsAsStrings2.kt")
        public void testCombinesNonStringsAsStrings2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/combinesNonStringsAsStrings2.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/comment.kt");
        }

        @TestMetadata("consecutiveNewlines.kt")
        public void testConsecutiveNewlines() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/consecutiveNewlines.kt");
        }

        @TestMetadata("doesNotCorruptExistingTemplate.kt")
        public void testDoesNotCorruptExistingTemplate() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/doesNotCorruptExistingTemplate.kt");
        }

        @TestMetadata("doesNotCorruptExistingTemplateWithBraces.kt")
        public void testDoesNotCorruptExistingTemplateWithBraces() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/doesNotCorruptExistingTemplateWithBraces.kt");
        }

        @TestMetadata("dollarSignChar.kt")
        public void testDollarSignChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/dollarSignChar.kt");
        }

        @TestMetadata("endOfLineComment.kt")
        public void testEndOfLineComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/endOfLineComment.kt");
        }

        @TestMetadata("escapedQuote.kt")
        public void testEscapedQuote() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/escapedQuote.kt");
        }

        @TestMetadata("escapedQuote2.kt")
        public void testEscapedQuote2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/escapedQuote2.kt");
        }

        @TestMetadata("insertBracesForSimpleNamedExpression.kt")
        public void testInsertBracesForSimpleNamedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/insertBracesForSimpleNamedExpression.kt");
        }

        @TestMetadata("interpolate2StringConstants.kt")
        public void testInterpolate2StringConstants() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolate2StringConstants.kt");
        }

        @TestMetadata("interpolate2Vals.kt")
        public void testInterpolate2Vals() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolate2Vals.kt");
        }

        @TestMetadata("interpolate3Left.kt")
        public void testInterpolate3Left() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolate3Left.kt");
        }

        @TestMetadata("interpolate3Right.kt")
        public void testInterpolate3Right() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolate3Right.kt");
        }

        @TestMetadata("interpolateChar.kt")
        public void testInterpolateChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateChar.kt");
        }

        @TestMetadata("interpolateDollarSign.kt")
        public void testInterpolateDollarSign() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateDollarSign.kt");
        }

        @TestMetadata("interpolateMapAccess.kt")
        public void testInterpolateMapAccess() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateMapAccess.kt");
        }

        @TestMetadata("interpolateMethodInvoke.kt")
        public void testInterpolateMethodInvoke() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateMethodInvoke.kt");
        }

        @TestMetadata("interpolateMultiline.kt")
        public void testInterpolateMultiline() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateMultiline.kt");
        }

        @TestMetadata("interpolateStringWithFloat.kt")
        public void testInterpolateStringWithFloat() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateStringWithFloat.kt");
        }

        @TestMetadata("interpolateStringWithInt.kt")
        public void testInterpolateStringWithInt() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/interpolateStringWithInt.kt");
        }

        @TestMetadata("invalidChar.kt")
        public void testInvalidChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/invalidChar.kt");
        }

        @TestMetadata("kt11295.kt")
        public void testKt11295() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/kt11295.kt");
        }

        @TestMetadata("lambdaInParentheses.kt")
        public void testLambdaInParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/lambdaInParentheses.kt");
        }

        @TestMetadata("lambdaWithLabel.kt")
        public void testLambdaWithLabel() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/lambdaWithLabel.kt");
        }

        @TestMetadata("lambdaWithLabelInParentheses.kt")
        public void testLambdaWithLabelInParentheses() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/lambdaWithLabelInParentheses.kt");
        }

        @TestMetadata("longTemplatePlusStringLiteral.kt")
        public void testLongTemplatePlusStringLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/longTemplatePlusStringLiteral.kt");
        }

        @TestMetadata("multilineString.kt")
        public void testMultilineString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/multilineString.kt");
        }

        @TestMetadata("newLine.kt")
        public void testNewLine() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/newLine.kt");
        }

        @TestMetadata("noBracesForLastSimpleExpression.kt")
        public void testNoBracesForLastSimpleExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/noBracesForLastSimpleExpression.kt");
        }

        @TestMetadata("noBracesSimpleFollowedByDot.kt")
        public void testNoBracesSimpleFollowedByDot() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/noBracesSimpleFollowedByDot.kt");
        }

        @TestMetadata("notApplicableForErrorElement.kt")
        public void testNotApplicableForErrorElement() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/notApplicableForErrorElement.kt");
        }

        @TestMetadata("numberLiterals.kt")
        public void testNumberLiterals() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/numberLiterals.kt");
        }

        @TestMetadata("onMultipleLines.kt")
        public void testOnMultipleLines() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/onMultipleLines.kt");
        }

        @TestMetadata("onlyForConcat.kt")
        public void testOnlyForConcat() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/onlyForConcat.kt");
        }

        @TestMetadata("onlyForStrings.kt")
        public void testOnlyForStrings() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/onlyForStrings.kt");
        }

        @TestMetadata("plusOperatorReturnsString.kt")
        public void testPlusOperatorReturnsString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/plusOperatorReturnsString.kt");
        }

        @TestMetadata("requiresPlusOperator.kt")
        public void testRequiresPlusOperator() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/requiresPlusOperator.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/simple.kt");
        }

        @TestMetadata("specialCharsInCharLiteral.kt")
        public void testSpecialCharsInCharLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/specialCharsInCharLiteral.kt");
        }

        @TestMetadata("stringPlusStringLiteral.kt")
        public void testStringPlusStringLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/stringPlusStringLiteral.kt");
        }

        @TestMetadata("superToString.kt")
        public void testSuperToString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/superToString.kt");
        }

        @TestMetadata("templatePlusStringLiteral.kt")
        public void testTemplatePlusStringLiteral() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/templatePlusStringLiteral.kt");
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/this.kt");
        }

        @TestMetadata("this2.kt")
        public void testThis2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/this2.kt");
        }

        @TestMetadata("this3.kt")
        public void testThis3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/this3.kt");
        }

        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/toString.kt");
        }

        @TestMetadata("tricky.kt")
        public void testTricky() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/tricky.kt");
        }

        @TestMetadata("unescapeSingleQuote.kt")
        public void testUnescapeSingleQuote() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/unescapeSingleQuote.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/removeExplicitType")
    public static class RemoveExplicitType extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("anonymousFunctionInitializer.kt")
        public void testAnonymousFunctionInitializer() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/anonymousFunctionInitializer.kt");
        }

        @TestMetadata("anonymousFunctionInitializer2.kt")
        public void testAnonymousFunctionInitializer2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/anonymousFunctionInitializer2.kt");
        }

        @TestMetadata("anonymousFunctionInitializer3.kt")
        public void testAnonymousFunctionInitializer3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/anonymousFunctionInitializer3.kt");
        }

        @TestMetadata("callableInitializerExplicitTypeArguments.kt")
        public void testCallableInitializerExplicitTypeArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerExplicitTypeArguments.kt");
        }

        @TestMetadata("callableInitializerImplicitTypeArguments.kt")
        public void testCallableInitializerImplicitTypeArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerImplicitTypeArguments.kt");
        }

        @TestMetadata("callableInitializerImplicitTypeArguments2.kt")
        public void testCallableInitializerImplicitTypeArguments2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerImplicitTypeArguments2.kt");
        }

        @TestMetadata("callableInitializerImplicitTypeArguments3.kt")
        public void testCallableInitializerImplicitTypeArguments3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerImplicitTypeArguments3.kt");
        }

        @TestMetadata("callableInitializerImplicitTypeArguments4.kt")
        public void testCallableInitializerImplicitTypeArguments4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/callableInitializerImplicitTypeArguments4.kt");
        }

        @TestMetadata("constantExpressionInitializer.kt")
        public void testConstantExpressionInitializer() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/constantExpressionInitializer.kt");
        }

        @TestMetadata("constantExpressionInitializerVar.kt")
        public void testConstantExpressionInitializerVar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/constantExpressionInitializerVar.kt");
        }

        @TestMetadata("explicitTypeIsAlias.kt")
        public void testExplicitTypeIsAlias() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/explicitTypeIsAlias.kt");
        }

        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/extensionFunction.kt");
        }

        @TestMetadata("funNoBody.kt")
        public void testFunNoBody() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/funNoBody.kt");
        }

        @TestMetadata("funWithBody.kt")
        public void testFunWithBody() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/funWithBody.kt");
        }

        @TestMetadata("funWithBody2.kt")
        public void testFunWithBody2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/funWithBody2.kt");
        }

        @TestMetadata("hasAnnotation.kt")
        public void testHasAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/hasAnnotation.kt");
        }

        @TestMetadata("hasAnnotationOnTypeArgument.kt")
        public void testHasAnnotationOnTypeArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/hasAnnotationOnTypeArgument.kt");
        }

        @TestMetadata("hasAnnotationOnTypeArgument2.kt")
        public void testHasAnnotationOnTypeArgument2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/hasAnnotationOnTypeArgument2.kt");
        }

        @TestMetadata("hasAnnotationOnTypeArgument3.kt")
        public void testHasAnnotationOnTypeArgument3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/hasAnnotationOnTypeArgument3.kt");
        }

        @TestMetadata("implicitTypeIsSubtypeOfExplicitType.kt")
        public void testImplicitTypeIsSubtypeOfExplicitType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/implicitTypeIsSubtypeOfExplicitType.kt");
        }

        @TestMetadata("implicitTypeIsSubtypeOfExplicitTypeVar.kt")
        public void testImplicitTypeIsSubtypeOfExplicitTypeVar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/implicitTypeIsSubtypeOfExplicitTypeVar.kt");
        }

        @TestMetadata("lambdaExpressionBody.kt")
        public void testLambdaExpressionBody() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaExpressionBody.kt");
        }

        @TestMetadata("lambdaInitializer.kt")
        public void testLambdaInitializer() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer.kt");
        }

        @TestMetadata("lambdaInitializer2.kt")
        public void testLambdaInitializer2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer2.kt");
        }

        @TestMetadata("lambdaInitializer3.kt")
        public void testLambdaInitializer3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer3.kt");
        }

        @TestMetadata("lambdaInitializer4.kt")
        public void testLambdaInitializer4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer4.kt");
        }

        @TestMetadata("lambdaInitializer5.kt")
        public void testLambdaInitializer5() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer5.kt");
        }

        @TestMetadata("lambdaInitializer6.kt")
        public void testLambdaInitializer6() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializer6.kt");
        }

        @TestMetadata("lambdaInitializerWithAlias.kt")
        public void testLambdaInitializerWithAlias() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializerWithAlias.kt");
        }

        @TestMetadata("lambdaInitializerWithAlias2.kt")
        public void testLambdaInitializerWithAlias2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializerWithAlias2.kt");
        }

        @TestMetadata("lambdaInitializerWithTypeArgument.kt")
        public void testLambdaInitializerWithTypeArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/lambdaInitializerWithTypeArgument.kt");
        }

        @TestMetadata("needTypeArgument.kt")
        public void testNeedTypeArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/needTypeArgument.kt");
        }

        @TestMetadata("needTypeArgument2.kt")
        public void testNeedTypeArgument2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/needTypeArgument2.kt");
        }

        @TestMetadata("needTypeArgument3.kt")
        public void testNeedTypeArgument3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/needTypeArgument3.kt");
        }

        @TestMetadata("needTypeArgumentInFunctionDefinition.kt")
        public void testNeedTypeArgumentInFunctionDefinition() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/needTypeArgumentInFunctionDefinition.kt");
        }

        @TestMetadata("notOnParameterOfFunctionType.kt")
        public void testNotOnParameterOfFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/notOnParameterOfFunctionType.kt");
        }

        @TestMetadata("notOnSetterParameter.kt")
        public void testNotOnSetterParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/notOnSetterParameter.kt");
        }

        @TestMetadata("nullableExplicitType.kt")
        public void testNullableExplicitType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/nullableExplicitType.kt");
        }

        @TestMetadata("nullableExplicitTypeVar.kt")
        public void testNullableExplicitTypeVar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/nullableExplicitTypeVar.kt");
        }

        @TestMetadata("nullableExplicitTypeVar2.kt")
        public void testNullableExplicitTypeVar2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/nullableExplicitTypeVar2.kt");
        }

        @TestMetadata("nullableExplicitTypeVar3.kt")
        public void testNullableExplicitTypeVar3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/nullableExplicitTypeVar3.kt");
        }

        @TestMetadata("onLoopParameter.kt")
        public void testOnLoopParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/onLoopParameter.kt");
        }

        @TestMetadata("onOverride.kt")
        public void testOnOverride() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/onOverride.kt");
        }

        @TestMetadata("onOverrideInInterface.kt")
        public void testOnOverrideInInterface() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/onOverrideInInterface.kt");
        }

        @TestMetadata("onPropertyAccessor.kt")
        public void testOnPropertyAccessor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/onPropertyAccessor.kt");
        }

        @TestMetadata("onSetterParameter.kt")
        public void testOnSetterParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/onSetterParameter.kt");
        }

        @TestMetadata("onType.kt")
        public void testOnType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/onType.kt");
        }

        @TestMetadata("propertyTypeFromGetter.kt")
        public void testPropertyTypeFromGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/propertyTypeFromGetter.kt");
        }

        @TestMetadata("removeUnresolvedType.kt")
        public void testRemoveUnresolvedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/removeUnresolvedType.kt");
        }

        @TestMetadata("stringInitializer.kt")
        public void testStringInitializer() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/stringInitializer.kt");
        }

        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/suspendFunction.kt");
        }

        @TestMetadata("varWithNull.kt")
        public void testVarWithNull() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeExplicitType/varWithNull.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument")
    public static class ReplaceUnderscoreWithTypeArgument extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("betweenLambdaArguments.kt")
        public void testBetweenLambdaArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/betweenLambdaArguments.kt");
        }

        @TestMetadata("blockValue.kt")
        public void testBlockValue() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/blockValue.kt");
        }

        @TestMetadata("importForArg.kt")
        public void testImportForArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/importForArg.kt");
        }

        @TestMetadata("inGetter.kt")
        public void testInGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inGetter.kt");
        }

        @TestMetadata("inapplicableNotGeneric.kt")
        public void testInapplicableNotGeneric() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotGeneric.kt");
        }

        @TestMetadata("inapplicableNotInCallable.kt")
        public void testInapplicableNotInCallable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotInCallable.kt");
        }

        @TestMetadata("inapplicableNotInCallable2.kt")
        public void testInapplicableNotInCallable2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotInCallable2.kt");
        }

        @TestMetadata("inapplicableNotInPlaceholder.kt")
        public void testInapplicableNotInPlaceholder() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotInPlaceholder.kt");
        }

        @TestMetadata("inapplicableNotType.kt")
        public void testInapplicableNotType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableNotType.kt");
        }

        @TestMetadata("inapplicableTypeCanNotBeInferred1.kt")
        public void testInapplicableTypeCanNotBeInferred1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableTypeCanNotBeInferred1.kt");
        }

        @TestMetadata("inapplicableTypeCanNotBeinferred2.kt")
        public void testInapplicableTypeCanNotBeinferred2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableTypeCanNotBeinferred2.kt");
        }

        @TestMetadata("inapplicableTypeCanNotBeinferred3.kt")
        public void testInapplicableTypeCanNotBeinferred3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableTypeCanNotBeinferred3.kt");
        }

        @TestMetadata("inapplicableTypeCanNotBeinferred4.kt")
        public void testInapplicableTypeCanNotBeinferred4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inapplicableTypeCanNotBeinferred4.kt");
        }

        @TestMetadata("inferredTypeFromElvis.kt")
        public void testInferredTypeFromElvis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inferredTypeFromElvis.kt");
        }

        @TestMetadata("inlineFun.kt")
        public void testInlineFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inlineFun.kt");
        }

        @TestMetadata("inlineFunWithRefied.kt")
        public void testInlineFunWithRefied() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/inlineFunWithRefied.kt");
        }

        @TestMetadata("insideDeepOtherCall.kt")
        public void testInsideDeepOtherCall() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/insideDeepOtherCall.kt");
        }

        @TestMetadata("lambdaType.kt")
        public void testLambdaType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/lambdaType.kt");
        }

        @TestMetadata("oneFromManyTypes1.kt")
        public void testOneFromManyTypes1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/oneFromManyTypes1.kt");
        }

        @TestMetadata("oneFromManyTypes2.kt")
        public void testOneFromManyTypes2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/oneFromManyTypes2.kt");
        }

        @TestMetadata("oneFromManyTypesInDifferentOrder.kt")
        public void testOneFromManyTypesInDifferentOrder() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/oneFromManyTypesInDifferentOrder.kt");
        }

        @TestMetadata("replaceWithAny.kt")
        public void testReplaceWithAny() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/replaceWithAny.kt");
        }

        @TestMetadata("replaceWithClashingName.kt")
        public void testReplaceWithClashingName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/replaceWithClashingName.kt");
        }

        @TestMetadata("replaceWithFunctionType.kt")
        public void testReplaceWithFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/replaceWithFunctionType.kt");
        }

        @TestMetadata("replaceWithGenericType.kt")
        public void testReplaceWithGenericType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/replaceWithGenericType.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/simple.kt");
        }

        @TestMetadata("typeWithVarargs.kt")
        public void testTypeWithVarargs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/replaceUnderscoreWithTypeArgument/typeWithVarargs.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertForEachToForLoop")
    public abstract static class ConvertForEachToForLoop extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed")
        public static class ForEachIndexed extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("implicitReceiver.kt")
            public void testImplicitReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/implicitReceiver.kt");
            }

            @TestMetadata("implicitReceiverWithMultipleReceivers.kt")
            public void testImplicitReceiverWithMultipleReceivers() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/implicitReceiverWithMultipleReceivers.kt");
            }

            @TestMetadata("labeledReturn.kt")
            public void testLabeledReturn() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/labeledReturn.kt");
            }

            @TestMetadata("list.kt")
            public void testList() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/list.kt");
            }

            @TestMetadata("range.kt")
            public void testRange() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/range.kt");
            }

            @TestMetadata("sequence.kt")
            public void testSequence() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/sequence.kt");
            }

            @TestMetadata("string.kt")
            public void testString() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/forEachIndexed/string.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/convertForEachToForLoop")
        public static class Uncategorized extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("complexReceiver.kt")
            public void testComplexReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/complexReceiver.kt");
            }

            @TestMetadata("explicitFunctionLiteral.kt")
            public void testExplicitFunctionLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/explicitFunctionLiteral.kt");
            }

            @TestMetadata("extraArguments.kt")
            public void testExtraArguments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/extraArguments.kt");
            }

            @TestMetadata("implicitFunctionLiteralParameter.kt")
            public void testImplicitFunctionLiteralParameter() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/implicitFunctionLiteralParameter.kt");
            }

            @TestMetadata("implicitReceiver.kt")
            public void testImplicitReceiver() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/implicitReceiver.kt");
            }

            @TestMetadata("implicitReceiverWithMultipleReceivers.kt")
            public void testImplicitReceiverWithMultipleReceivers() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/implicitReceiverWithMultipleReceivers.kt");
            }

            @TestMetadata("keepComments.kt")
            public void testKeepComments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/keepComments.kt");
            }

            @TestMetadata("parenthesizedExpression.kt")
            public void testParenthesizedExpression() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/parenthesizedExpression.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simple.kt");
            }

            @TestMetadata("simple2.kt")
            public void testSimple2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simple2.kt");
            }

            @TestMetadata("simpleCharSequence.kt")
            public void testSimpleCharSequence() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simpleCharSequence.kt");
            }

            @TestMetadata("simpleNotAvailable.kt")
            public void testSimpleNotAvailable() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simpleNotAvailable.kt");
            }

            @TestMetadata("simpleSequence.kt")
            public void testSimpleSequence() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/simpleSequence.kt");
            }

            @TestMetadata("typeArgumentPresent.kt")
            public void testTypeArgumentPresent() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/typeArgumentPresent.kt");
            }

            @TestMetadata("usedAsExpression.kt")
            public void testUsedAsExpression() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/usedAsExpression.kt");
            }

            @TestMetadata("userDefined.kt")
            public void testUserDefined() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/userDefined.kt");
            }

            @TestMetadata("withNestedReturn.kt")
            public void testWithNestedReturn() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/withNestedReturn.kt");
            }

            @TestMetadata("withReturn.kt")
            public void testWithReturn() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/withReturn.kt");
            }

            @TestMetadata("zeroArguments.kt")
            public void testZeroArguments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertForEachToForLoop/zeroArguments.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/joinArgumentList")
    public static class JoinArgumentList extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("hasEndOfLineComment.kt")
        public void testHasEndOfLineComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/hasEndOfLineComment.kt");
        }

        @TestMetadata("hasLineBreakBeforeFirstArg.kt")
        public void testHasLineBreakBeforeFirstArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/hasLineBreakBeforeFirstArg.kt");
        }

        @TestMetadata("hasLineBreaks.kt")
        public void testHasLineBreaks() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/hasLineBreaks.kt");
        }

        @TestMetadata("hasLineBreaksWithTrailingComma.kt")
        public void testHasLineBreaksWithTrailingComma() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/hasLineBreaksWithTrailingComma.kt");
        }

        @TestMetadata("noArg.kt")
        public void testNoArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/noArg.kt");
        }

        @TestMetadata("noLineBreak.kt")
        public void testNoLineBreak() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/noLineBreak.kt");
        }

        @TestMetadata("onNestedArgumentList.kt")
        public void testOnNestedArgumentList() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onNestedArgumentList.kt");
        }

        @TestMetadata("onNestedArgumentList2.kt")
        public void testOnNestedArgumentList2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onNestedArgumentList2.kt");
        }

        @TestMetadata("onNestedArgumentList3.kt")
        public void testOnNestedArgumentList3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onNestedArgumentList3.kt");
        }

        @TestMetadata("onNestedArgumentList4.kt")
        public void testOnNestedArgumentList4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onNestedArgumentList4.kt");
        }

        @TestMetadata("onRightParenthesis.kt")
        public void testOnRightParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/onRightParenthesis.kt");
        }

        @TestMetadata("oneArg.kt")
        public void testOneArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinArgumentList/oneArg.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/joinParameterList")
    public static class JoinParameterList extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("hasEndOfLineComment.kt")
        public void testHasEndOfLineComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/hasEndOfLineComment.kt");
        }

        @TestMetadata("hasLineBreakBeforeFirstParam.kt")
        public void testHasLineBreakBeforeFirstParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/hasLineBreakBeforeFirstParam.kt");
        }

        @TestMetadata("hasLineBreaks.kt")
        public void testHasLineBreaks() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/hasLineBreaks.kt");
        }

        @TestMetadata("hasLineBreaksWithTrailingComma.kt")
        public void testHasLineBreaksWithTrailingComma() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/hasLineBreaksWithTrailingComma.kt");
        }

        @TestMetadata("longParameters.kt")
        public void testLongParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/longParameters.kt");
        }

        @TestMetadata("longParameters2.kt")
        public void testLongParameters2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/longParameters2.kt");
        }

        @TestMetadata("noLineBreak.kt")
        public void testNoLineBreak() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/noLineBreak.kt");
        }

        @TestMetadata("noParam.kt")
        public void testNoParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/noParam.kt");
        }

        @TestMetadata("oneParam.kt")
        public void testOneParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/joinParameterList/oneParam.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments")
    public abstract static class AddNamesInCommentToJavaCallArguments extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides")
        public static class FakeOverrides extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("intersectionOverrideMethodCall.kt")
            public void testIntersectionOverrideMethodCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides/intersectionOverrideMethodCall.kt");
            }

            @TestMetadata("intersectionOverrideMethodCall2.kt")
            public void testIntersectionOverrideMethodCall2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides/intersectionOverrideMethodCall2.kt");
            }

            @TestMetadata("substitutionOverrideMethodCall.kt")
            public void testSubstitutionOverrideMethodCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides/substitutionOverrideMethodCall.kt");
            }

            @TestMetadata("substitutionOverrideMethodCall2.kt")
            public void testSubstitutionOverrideMethodCall2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/fakeOverrides/substitutionOverrideMethodCall2.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments")
        public static class Uncategorized extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("constructorCall.kt")
            public void testConstructorCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/constructorCall.kt");
            }

            @TestMetadata("kotlinFunctionCall.kt")
            public void testKotlinFunctionCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/kotlinFunctionCall.kt");
            }

            @TestMetadata("kotlinMethodCallOverridingJavaMethod.kt")
            public void testKotlinMethodCallOverridingJavaMethod() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/kotlinMethodCallOverridingJavaMethod.kt");
            }

            @TestMetadata("methodCall.kt")
            public void testMethodCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCall.kt");
            }

            @TestMetadata("methodCallChained.kt")
            public void testMethodCallChained() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallChained.kt");
            }

            @TestMetadata("methodCallChained2.kt")
            public void testMethodCallChained2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallChained2.kt");
            }

            @TestMetadata("methodCallWithComments.kt")
            public void testMethodCallWithComments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithComments.kt");
            }

            @TestMetadata("methodCallWithComments2.kt")
            public void testMethodCallWithComments2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithComments2.kt");
            }

            @TestMetadata("methodCallWithLambdaArgument.kt")
            public void testMethodCallWithLambdaArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithLambdaArgument.kt");
            }

            @TestMetadata("methodCallWithLambdaArgumentOnly.kt")
            public void testMethodCallWithLambdaArgumentOnly() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithLambdaArgumentOnly.kt");
            }

            @TestMetadata("methodCallWithNoArguments.kt")
            public void testMethodCallWithNoArguments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithNoArguments.kt");
            }

            @TestMetadata("methodCallWithVararg.kt")
            public void testMethodCallWithVararg() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/methodCallWithVararg.kt");
            }

            @TestMetadata("partialNameComments.kt")
            public void testPartialNameComments() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/partialNameComments.kt");
            }

            @TestMetadata("partialNameComments2.kt")
            public void testPartialNameComments2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/partialNameComments2.kt");
            }

            @TestMetadata("superTypeCall.kt")
            public void testSuperTypeCall() throws Exception {
                runTest("../../../idea/tests/testData/intentions/addNamesInCommentToJavaCallArguments/superTypeCall.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/trailingComma")
    public static class TrailingComma extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("valueParameterList.kt")
        public void testValueParameterList() throws Exception {
            runTest("../../../idea/tests/testData/intentions/trailingComma/valueParameterList.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/insertExplicitTypeArguments")
    public static class InsertExplicitTypeArguments extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inapplicableAlreadyTyped.kt")
        public void testInapplicableAlreadyTyped() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableAlreadyTyped.kt");
        }

        @TestMetadata("inapplicableDefinitelyNonNullableTypeToReifiedType.kt")
        public void testInapplicableDefinitelyNonNullableTypeToReifiedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableDefinitelyNonNullableTypeToReifiedType.kt");
        }

        @TestMetadata("inapplicableDefinitelyNonNullableTypeToReifiedTypeWithOtherArguments.kt")
        public void testInapplicableDefinitelyNonNullableTypeToReifiedTypeWithOtherArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableDefinitelyNonNullableTypeToReifiedTypeWithOtherArguments.kt");
        }

        @TestMetadata("inapplicableNotGeneric.kt")
        public void testInapplicableNotGeneric() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableNotGeneric.kt");
        }

        @TestMetadata("inapplicableNotInCallable.kt")
        public void testInapplicableNotInCallable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableNotInCallable.kt");
        }

        @TestMetadata("inapplicableNotInCallable2.kt")
        public void testInapplicableNotInCallable2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableNotInCallable2.kt");
        }

        @TestMetadata("inapplicableTypeNotInferred.kt")
        public void testInapplicableTypeNotInferred() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inapplicableTypeNotInferred.kt");
        }

        @TestMetadata("inferredIntersectionTypeFromElvis.kt")
        public void testInferredIntersectionTypeFromElvis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inferredIntersectionTypeFromElvis.kt");
        }

        @TestMetadata("inferredTypeFromElvis.kt")
        public void testInferredTypeFromElvis() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/inferredTypeFromElvis.kt");
        }

        @TestMetadata("insertDefinitelyNonNullTypeClass.kt")
        public void testInsertDefinitelyNonNullTypeClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullTypeClass.kt");
        }

        @TestMetadata("insertDefinitelyNonNullTypeInFunction.kt")
        public void testInsertDefinitelyNonNullTypeInFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullTypeInFunction.kt");
        }

        @TestMetadata("insertDefinitelyNonNullTypeWithVarargs.kt")
        public void testInsertDefinitelyNonNullTypeWithVarargs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullTypeWithVarargs.kt");
        }

        @TestMetadata("insertDefinitelyNonNullableType.kt")
        public void testInsertDefinitelyNonNullableType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullableType.kt");
        }

        @TestMetadata("insertDefinitelyNonNullableTypeToInlineFun.kt")
        public void testInsertDefinitelyNonNullableTypeToInlineFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullableTypeToInlineFun.kt");
        }

        @TestMetadata("insertDefinitelyNonNullableTypeWithOtherReifiedType.kt")
        public void testInsertDefinitelyNonNullableTypeWithOtherReifiedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertDefinitelyNonNullableTypeWithOtherReifiedType.kt");
        }

        @TestMetadata("insertImportForArg.kt")
        public void testInsertImportForArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertImportForArg.kt");
        }

        @TestMetadata("insertManyTypes.kt")
        public void testInsertManyTypes() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertManyTypes.kt");
        }

        @TestMetadata("insertManyTypesInDifferentOrder.kt")
        public void testInsertManyTypesInDifferentOrder() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertManyTypesInDifferentOrder.kt");
        }

        @TestMetadata("insertMultipleSomeWithClashingName.kt")
        public void testInsertMultipleSomeWithClashingName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertMultipleSomeWithClashingName.kt");
        }

        @TestMetadata("insertReifiedType.kt")
        public void testInsertReifiedType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertReifiedType.kt");
        }

        @TestMetadata("insertTwoTypesFun.kt")
        public void testInsertTwoTypesFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTwoTypesFun.kt");
        }

        @TestMetadata("insertTypeAny.kt")
        public void testInsertTypeAny() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeAny.kt");
        }

        @TestMetadata("insertTypeThatIsAFunction.kt")
        public void testInsertTypeThatIsAFunction() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeThatIsAFunction.kt");
        }

        @TestMetadata("insertTypeThatIsATypeArg.kt")
        public void testInsertTypeThatIsATypeArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeThatIsATypeArg.kt");
        }

        @TestMetadata("insertTypeWithClashingName.kt")
        public void testInsertTypeWithClashingName() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeWithClashingName.kt");
        }

        @TestMetadata("insertTypeWithLambda.kt")
        public void testInsertTypeWithLambda() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeWithLambda.kt");
        }

        @TestMetadata("insertTypeWithTypeArguments.kt")
        public void testInsertTypeWithTypeArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeWithTypeArguments.kt");
        }

        @TestMetadata("insertTypeWithVarargs.kt")
        public void testInsertTypeWithVarargs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/insertTypeWithVarargs.kt");
        }

        @TestMetadata("notApplicableGenericType.kt")
        public void testNotApplicableGenericType() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/notApplicableGenericType.kt");
        }

        @TestMetadata("simpleInsertTypeClass.kt")
        public void testSimpleInsertTypeClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/simpleInsertTypeClass.kt");
        }

        @TestMetadata("simpleInsertTypeFun.kt")
        public void testSimpleInsertTypeFun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/insertExplicitTypeArguments/simpleInsertTypeFun.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/removeSingleArgumentName")
    public abstract static class RemoveSingleArgumentName extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition")
        public static class MixedNamedArgumentsInTheirOwnPosition extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("namedArgumentBefore.kt")
            public void testNamedArgumentBefore() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition/namedArgumentBefore.kt");
            }

            @TestMetadata("namedArgumentBefore2.kt")
            public void testNamedArgumentBefore2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition/namedArgumentBefore2.kt");
            }

            @TestMetadata("notInPosition.kt")
            public void testNotInPosition() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition/notInPosition.kt");
            }

            @TestMetadata("notInPosition2.kt")
            public void testNotInPosition2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/MixedNamedArgumentsInTheirOwnPosition/notInPosition2.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/removeSingleArgumentName")
        public static class Uncategorized extends AbstractK2IntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("arrayForVararg.kt")
            public void testArrayForVararg() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayForVararg.kt");
            }

            @TestMetadata("arrayForVararg2.kt")
            public void testArrayForVararg2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayForVararg2.kt");
            }

            @TestMetadata("arrayForVararg3.kt")
            public void testArrayForVararg3() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayForVararg3.kt");
            }

            @TestMetadata("arrayLiteral.kt")
            public void testArrayLiteral() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayLiteral.kt");
            }

            @TestMetadata("arrayLiteralForVararg.kt")
            public void testArrayLiteralForVararg() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayLiteralForVararg.kt");
            }

            @TestMetadata("arrayLiteralForVararg2.kt")
            public void testArrayLiteralForVararg2() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/arrayLiteralForVararg2.kt");
            }

            @TestMetadata("namedArgumentBefore.kt")
            public void testNamedArgumentBefore() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/namedArgumentBefore.kt");
            }

            @TestMetadata("noExpression.kt")
            public void testNoExpression() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/noExpression.kt");
            }

            @TestMetadata("notInPosition.kt")
            public void testNotInPosition() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notInPosition.kt");
            }

            @TestMetadata("notInPositionWithDefaultArgument.kt")
            public void testNotInPositionWithDefaultArgument() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notInPositionWithDefaultArgument.kt");
            }

            @TestMetadata("notInRange.kt")
            public void testNotInRange() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notInRange.kt");
            }

            @TestMetadata("notNamed.kt")
            public void testNotNamed() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notNamed.kt");
            }

            @TestMetadata("notResolved.kt")
            public void testNotResolved() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/notResolved.kt");
            }

            @TestMetadata("range.kt")
            public void testRange() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/range.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/simple.kt");
            }

            @TestMetadata("star.kt")
            public void testStar() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/star.kt");
            }

            @TestMetadata("superClassConstructor.kt")
            public void testSuperClassConstructor() throws Exception {
                runTest("../../../idea/tests/testData/intentions/removeSingleArgumentName/superClassConstructor.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/removeAllArgumentNames")
    public static class RemoveAllArgumentNames extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("collectionLiteralIsLast.kt")
        public void testCollectionLiteralIsLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/collectionLiteralIsLast.kt");
        }

        @TestMetadata("collectionLiteralIsNotLast.kt")
        public void testCollectionLiteralIsNotLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/collectionLiteralIsNotLast.kt");
        }

        @TestMetadata("collectionLiteralIsNotLast2.kt")
        public void testCollectionLiteralIsNotLast2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/collectionLiteralIsNotLast2.kt");
        }

        @TestMetadata("defaultArguments.kt")
        public void testDefaultArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/defaultArguments.kt");
        }

        @TestMetadata("defaultArguments2.kt")
        public void testDefaultArguments2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/defaultArguments2.kt");
        }

        @TestMetadata("defaultArguments3.kt")
        public void testDefaultArguments3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/defaultArguments3.kt");
        }

        @TestMetadata("defaultArguments4.kt")
        public void testDefaultArguments4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/defaultArguments4.kt");
        }

        @TestMetadata("noNamedArguments.kt")
        public void testNoNamedArguments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/noNamedArguments.kt");
        }

        @TestMetadata("notOwnPosition.kt")
        public void testNotOwnPosition() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/notOwnPosition.kt");
        }

        @TestMetadata("oneNamedArgument.kt")
        public void testOneNamedArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/oneNamedArgument.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/simple.kt");
        }

        @TestMetadata("trailingLambdaArgument.kt")
        public void testTrailingLambdaArgument() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/trailingLambdaArgument.kt");
        }

        @TestMetadata("varargIsLast.kt")
        public void testVarargIsLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/varargIsLast.kt");
        }

        @TestMetadata("varargIsNotLast.kt")
        public void testVarargIsNotLast() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/varargIsNotLast.kt");
        }

        @TestMetadata("varargIsNotLast2.kt")
        public void testVarargIsNotLast2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/varargIsNotLast2.kt");
        }

        @TestMetadata("varargIsNotLast3.kt")
        public void testVarargIsNotLast3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/removeAllArgumentNames/varargIsNotLast3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer")
    public static class ConvertPropertyGetterToInitializer extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("block.kt")
        public void testBlock() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/block.kt");
        }

        @TestMetadata("expect.kt")
        public void testExpect() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/expect.kt");
        }

        @TestMetadata("extentionProperty.kt")
        public void testExtentionProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/extentionProperty.kt");
        }

        @TestMetadata("hasComment.kt")
        public void testHasComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/hasComment.kt");
        }

        @TestMetadata("hasComment2.kt")
        public void testHasComment2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/hasComment2.kt");
        }

        @TestMetadata("hasComment3.kt")
        public void testHasComment3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/hasComment3.kt");
        }

        @TestMetadata("hasInitializer.kt")
        public void testHasInitializer() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/hasInitializer.kt");
        }

        @TestMetadata("inInterface.kt")
        public void testInInterface() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/inInterface.kt");
        }

        @TestMetadata("multiStatementBlock.kt")
        public void testMultiStatementBlock() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/multiStatementBlock.kt");
        }

        @TestMetadata("run.kt")
        public void testRun() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/run.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertPropertyGetterToInitializer/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertToRawStringTemplate")
    public static class ConvertToRawStringTemplate extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToRawStringTemplate/basic.kt");
        }

        @TestMetadata("octalEscape.kt")
        public void testOctalEscape() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertToRawStringTemplate/octalEscape.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/toRawStringLiteral")
    public static class ToRawStringLiteral extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("3quotes.kt")
        public void test3quotes() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/3quotes.kt");
        }

        @TestMetadata("alreadyRaw.kt")
        public void testAlreadyRaw() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/alreadyRaw.kt");
        }

        @TestMetadata("caret1.kt")
        public void testCaret1() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret1.kt");
        }

        @TestMetadata("caret2.kt")
        public void testCaret2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret2.kt");
        }

        @TestMetadata("caret3.kt")
        public void testCaret3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret3.kt");
        }

        @TestMetadata("caret4.kt")
        public void testCaret4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret4.kt");
        }

        @TestMetadata("caret5.kt")
        public void testCaret5() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/caret5.kt");
        }

        @TestMetadata("dollar.kt")
        public void testDollar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/dollar.kt");
        }

        @TestMetadata("dollar2.kt")
        public void testDollar2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/dollar2.kt");
        }

        @TestMetadata("quotesAndSlashes.kt")
        public void testQuotesAndSlashes() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/quotesAndSlashes.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/simple.kt");
        }

        @TestMetadata("specialChar.kt")
        public void testSpecialChar() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/specialChar.kt");
        }

        @TestMetadata("tabCharacter.kt")
        public void testTabCharacter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/tabCharacter.kt");
        }

        @TestMetadata("trailingSpace.kt")
        public void testTrailingSpace() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/trailingSpace.kt");
        }

        @TestMetadata("trailingSpace2.kt")
        public void testTrailingSpace2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/trailingSpace2.kt");
        }

        @TestMetadata("trailingSpace3.kt")
        public void testTrailingSpace3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/toRawStringLiteral/trailingSpace3.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/movePropertyToConstructor")
    public static class MovePropertyToConstructor extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationTarget.kt")
        public void testAnnotationTarget() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/annotationTarget.kt");
        }

        @TestMetadata("annotationWithUseSite.kt")
        public void testAnnotationWithUseSite() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/annotationWithUseSite.kt");
        }

        @TestMetadata("declaredInInterface.kt")
        public void testDeclaredInInterface() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/declaredInInterface.kt");
        }

        @TestMetadata("delegated.kt")
        public void testDelegated() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/delegated.kt");
        }

        @TestMetadata("expectClass.kt")
        public void testExpectClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/expectClass.kt");
        }

        @TestMetadata("functionReference.kt")
        public void testFunctionReference() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/functionReference.kt");
        }

        @TestMetadata("getter.kt")
        public void testGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/getter.kt");
        }

        @TestMetadata("javaAnnotation.kt")
        public void testJavaAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/javaAnnotation.kt");
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/lambda.kt");
        }

        @TestMetadata("lambdaWithoutParameters.kt")
        public void testLambdaWithoutParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/lambdaWithoutParameters.kt");
        }

        @TestMetadata("lateinit.kt")
        public void testLateinit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/lateinit.kt");
        }

        @TestMetadata("local.kt")
        public void testLocal() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/local.kt");
        }

        @TestMetadata("map.kt")
        public void testMap() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/map.kt");
        }

        @TestMetadata("methodReference.kt")
        public void testMethodReference() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/methodReference.kt");
        }

        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/secondaryConstructor.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/simple.kt");
        }

        @TestMetadata("simpleAnnotation.kt")
        public void testSimpleAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/simpleAnnotation.kt");
        }

        @TestMetadata("withoutMatchingParameter.kt")
        public void testWithoutMatchingParameter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/movePropertyToConstructor/withoutMatchingParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf")
    public static class WhenToIf extends AbstractK2IntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/comment.kt");
        }

        @TestMetadata("kt12040.kt")
        public void testKt12040() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/kt12040.kt");
        }

        @TestMetadata("kt13884.kt")
        public void testKt13884() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/kt13884.kt");
        }

        @TestMetadata("variableSubject.kt")
        public void testVariableSubject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/variableSubject.kt");
        }

        @TestMetadata("whenTrueOrFalse.kt")
        public void testWhenTrueOrFalse() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenTrueOrFalse.kt");
        }

        @TestMetadata("whenTrueOrFalse2.kt")
        public void testWhenTrueOrFalse2() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenTrueOrFalse2.kt");
        }

        @TestMetadata("whenTrueOrFalse3.kt")
        public void testWhenTrueOrFalse3() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenTrueOrFalse3.kt");
        }

        @TestMetadata("whenTrueOrFalse4.kt")
        public void testWhenTrueOrFalse4() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenTrueOrFalse4.kt");
        }

        @TestMetadata("whenWithDotQualifiedExpression.kt")
        public void testWhenWithDotQualifiedExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithDotQualifiedExpression.kt");
        }

        @TestMetadata("whenWithEqualityTests.kt")
        public void testWhenWithEqualityTests() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithEqualityTests.kt");
        }

        @TestMetadata("whenWithIf.kt")
        public void testWhenWithIf() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithIf.kt");
        }

        @TestMetadata("whenWithMultiConditions.kt")
        public void testWhenWithMultiConditions() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithMultiConditions.kt");
        }

        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithMultipleConditionTypes.kt");
        }

        @TestMetadata("whenWithNegativePatterns.kt")
        public void testWhenWithNegativePatterns() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativePatterns.kt");
        }

        @TestMetadata("whenWithNegativeRangeTests.kt")
        public void testWhenWithNegativeRangeTests() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativeRangeTests.kt");
        }

        @TestMetadata("whenWithPatterns.kt")
        public void testWhenWithPatterns() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithPatterns.kt");
        }

        @TestMetadata("whenWithRangeTests.kt")
        public void testWhenWithRangeTests() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTests.kt");
        }

        @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
        public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTestsAndMultiConditions.kt");
        }

        @TestMetadata("whenWithoutElse.kt")
        public void testWhenWithoutElse() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithoutElse.kt");
        }

        @TestMetadata("whenWithoutElseUsedAsExpression.kt")
        public void testWhenWithoutElseUsedAsExpression() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithoutElseUsedAsExpression.kt");
        }

        @TestMetadata("whenWithoutSubject.kt")
        public void testWhenWithoutSubject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/whenWithoutSubject.kt");
        }

        @TestMetadata("wrongIsAndInNoEnd.kt")
        public void testWrongIsAndInNoEnd() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/wrongIsAndInNoEnd.kt");
        }

        @TestMetadata("wrongIsAndInNoSubject.kt")
        public void testWrongIsAndInNoSubject() throws Exception {
            runTest("../../../idea/tests/testData/intentions/branched/ifWhen/whenToIf/wrongIsAndInNoSubject.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/intentions")
    public abstract static class Intentions extends AbstractK2IntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/intentions/branched")
        public abstract static class Branched extends AbstractK2IntentionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/intentions/branched/whenToIf")
            public static class WhenToIf extends AbstractK2IntentionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("comment.kt")
                public void testComment() throws Exception {
                    runTest("testData/intentions/branched/whenToIf/comment.kt");
                }

                @TestMetadata("kt12040.kt")
                public void testKt12040() throws Exception {
                    runTest("testData/intentions/branched/whenToIf/kt12040.kt");
                }

                @TestMetadata("sideEffectWithoutSubjectSeparation.kt")
                public void testSideEffectWithoutSubjectSeparation() throws Exception {
                    runTest("testData/intentions/branched/whenToIf/sideEffectWithoutSubjectSeparation.kt");
                }

                @TestMetadata("whenWithDotQualifiedExpression.kt")
                public void testWhenWithDotQualifiedExpression() throws Exception {
                    runTest("testData/intentions/branched/whenToIf/whenWithDotQualifiedExpression.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/intentions/useExpressionBody")
        public abstract static class UseExpressionBody extends AbstractK2IntentionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/intentions/useExpressionBody/convertToExpressionBody")
            public abstract static class ConvertToExpressionBody extends AbstractK2IntentionTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("testData/intentions/useExpressionBody/convertToExpressionBody/keepComments")
                public static class KeepComments extends AbstractK2IntentionTest {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                    }

                    @TestMetadata("1.kt")
                    public void test1() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/keepComments/1.kt");
                    }

                    @TestMetadata("2.kt")
                    public void test2() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/keepComments/2.kt");
                    }

                    @TestMetadata("3.kt")
                    public void test3() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/keepComments/3.kt");
                    }

                    @TestMetadata("4.kt")
                    public void test4() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/keepComments/4.kt");
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("testData/intentions/useExpressionBody/convertToExpressionBody")
                public static class Uncategorized extends AbstractK2IntentionTest {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                    }

                    @TestMetadata("anonymousObjectExpression.kt")
                    public void testAnonymousObjectExpression() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/anonymousObjectExpression.kt");
                    }

                    @TestMetadata("assignPlus.kt")
                    public void testAssignPlus() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/assignPlus.kt");
                    }

                    @TestMetadata("assignment.kt")
                    public void testAssignment() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/assignment.kt");
                    }

                    @TestMetadata("constructorWithEmptyBody.kt")
                    public void testConstructorWithEmptyBody() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/constructorWithEmptyBody.kt");
                    }

                    @TestMetadata("declaration.kt")
                    public void testDeclaration() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/declaration.kt");
                    }

                    @TestMetadata("elvisIfElseUnit.kt")
                    public void testElvisIfElseUnit() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/elvisIfElseUnit.kt");
                    }

                    @TestMetadata("elvisIfUnit.kt")
                    public void testElvisIfUnit() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/elvisIfUnit.kt");
                    }

                    @TestMetadata("elvisWhenUnitNonExhaustive.kt")
                    public void testElvisWhenUnitNonExhaustive() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/elvisWhenUnitNonExhaustive.kt");
                    }

                    @TestMetadata("emptyList.kt")
                    public void testEmptyList() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/emptyList.kt");
                    }

                    @TestMetadata("expressionWithReturns1.kt")
                    public void testExpressionWithReturns1() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/expressionWithReturns1.kt");
                    }

                    @TestMetadata("expressionWithReturns2.kt")
                    public void testExpressionWithReturns2() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/expressionWithReturns2.kt");
                    }

                    @TestMetadata("funWithEmptyBody.kt")
                    public void testFunWithEmptyBody() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/funWithEmptyBody.kt");
                    }

                    @TestMetadata("funWithEmptyBody2.kt")
                    public void testFunWithEmptyBody2() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/funWithEmptyBody2.kt");
                    }

                    @TestMetadata("funWithImplicitUnitTypeWithThrow.kt")
                    public void testFunWithImplicitUnitTypeWithThrow() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/funWithImplicitUnitTypeWithThrow.kt");
                    }

                    @TestMetadata("funWithNoBlock.kt")
                    public void testFunWithNoBlock() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/funWithNoBlock.kt");
                    }

                    @TestMetadata("funWithNothingType.kt")
                    public void testFunWithNothingType() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/funWithNothingType.kt");
                    }

                    @TestMetadata("funWithReturn.kt")
                    public void testFunWithReturn() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/funWithReturn.kt");
                    }

                    @TestMetadata("funWithUnitType.kt")
                    public void testFunWithUnitType() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/funWithUnitType.kt");
                    }

                    @TestMetadata("funWithUnitType2.kt")
                    public void testFunWithUnitType2() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/funWithUnitType2.kt");
                    }

                    @TestMetadata("funWithUnitTypeWithThrow.kt")
                    public void testFunWithUnitTypeWithThrow() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/funWithUnitTypeWithThrow.kt");
                    }

                    @TestMetadata("functionLiteral.kt")
                    public void testFunctionLiteral() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/functionLiteral.kt");
                    }

                    @TestMetadata("getWithReturn.kt")
                    public void testGetWithReturn() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/getWithReturn.kt");
                    }

                    @TestMetadata("ifElseUnit.kt")
                    public void testIfElseUnit() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/ifElseUnit.kt");
                    }

                    @TestMetadata("ifUnit.kt")
                    public void testIfUnit() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/ifUnit.kt");
                    }

                    @TestMetadata("ifWhenUnitExhaustive.kt")
                    public void testIfWhenUnitExhaustive() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/ifWhenUnitExhaustive.kt");
                    }

                    @TestMetadata("ifWhenUnitNonExhaustive.kt")
                    public void testIfWhenUnitNonExhaustive() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/ifWhenUnitNonExhaustive.kt");
                    }

                    @TestMetadata("lambdaIfUnit.kt")
                    public void testLambdaIfUnit() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/lambdaIfUnit.kt");
                    }

                    @TestMetadata("lambdaWhenUnitNonExhaustive.kt")
                    public void testLambdaWhenUnitNonExhaustive() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/lambdaWhenUnitNonExhaustive.kt");
                    }

                    @TestMetadata("multipleStatements.kt")
                    public void testMultipleStatements() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/multipleStatements.kt");
                    }

                    @TestMetadata("overridePublicFun.kt")
                    public void testOverridePublicFun() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/overridePublicFun.kt");
                    }

                    @TestMetadata("returnFromLambda.kt")
                    public void testReturnFromLambda() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/returnFromLambda.kt");
                    }

                    @TestMetadata("returnFromLambda2.kt")
                    public void testReturnFromLambda2() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/returnFromLambda2.kt");
                    }

                    @TestMetadata("returnWithNoValue.kt")
                    public void testReturnWithNoValue() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/returnWithNoValue.kt");
                    }

                    @TestMetadata("whenIfUnitExhaustive.kt")
                    public void testWhenIfUnitExhaustive() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/whenIfUnitExhaustive.kt");
                    }

                    @TestMetadata("whenIfUnitNonExhaustive.kt")
                    public void testWhenIfUnitNonExhaustive() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/whenIfUnitNonExhaustive.kt");
                    }

                    @TestMetadata("whenUnitExhaustive.kt")
                    public void testWhenUnitExhaustive() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/whenUnitExhaustive.kt");
                    }

                    @TestMetadata("whenUnitNonExhaustive.kt")
                    public void testWhenUnitNonExhaustive() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/whenUnitNonExhaustive.kt");
                    }

                    @TestMetadata("whenUnitWithElse.kt")
                    public void testWhenUnitWithElse() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/whenUnitWithElse.kt");
                    }

                    @TestMetadata("whenWhenNonExhaustive.kt")
                    public void testWhenWhenNonExhaustive() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/whenWhenNonExhaustive.kt");
                    }

                    @TestMetadata("while.kt")
                    public void testWhile() throws Exception {
                        runTest("testData/intentions/useExpressionBody/convertToExpressionBody/while.kt");
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/intentions/useExpressionBody")
            public static class Uncategorized extends AbstractK2IntentionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("if.kt")
                public void testIf() throws Exception {
                    runTest("testData/intentions/useExpressionBody/if.kt");
                }

                @TestMetadata("leftBrace.kt")
                public void testLeftBrace() throws Exception {
                    runTest("testData/intentions/useExpressionBody/leftBrace.kt");
                }

                @TestMetadata("multiLine.kt")
                public void testMultiLine() throws Exception {
                    runTest("testData/intentions/useExpressionBody/multiLine.kt");
                }

                @TestMetadata("oneLine.kt")
                public void testOneLine() throws Exception {
                    runTest("testData/intentions/useExpressionBody/oneLine.kt");
                }

                @TestMetadata("veryVeryLong.kt")
                public void testVeryVeryLong() throws Exception {
                    runTest("testData/intentions/useExpressionBody/veryVeryLong.kt");
                }

                @TestMetadata("when.kt")
                public void testWhen() throws Exception {
                    runTest("testData/intentions/useExpressionBody/when.kt");
                }

                @TestMetadata("whenWithEarlyReturn.kt")
                public void testWhenWithEarlyReturn() throws Exception {
                    runTest("testData/intentions/useExpressionBody/whenWithEarlyReturn.kt");
                }
            }
        }
    }
}
