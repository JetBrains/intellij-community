// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.inspections.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2QuickFixTestGenerated extends AbstractK2QuickFixTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantIf")
    public static class RedundantIf extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("assignExpression.kt")
        public void testAssignExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/assignExpression.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/assignment.kt");
        }

        @TestMetadata("assignmentFake.kt")
        public void testAssignmentFake() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/assignmentFake.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/comment.kt");
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/expression.kt");
        }

        @TestMetadata("expressionBody.kt")
        public void testExpressionBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/expressionBody.kt");
        }

        @TestMetadata("labeledReturn.kt")
        public void testLabeledReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/labeledReturn.kt");
        }

        @TestMetadata("negate.kt")
        public void testNegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/negate.kt");
        }

        @TestMetadata("negate2.kt")
        public void testNegate2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/negate2.kt");
        }

        @TestMetadata("negate3.kt")
        public void testNegate3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/negate3.kt");
        }

        @TestMetadata("returnWithoutElse.kt")
        public void testReturnWithoutElse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse.kt");
        }

        @TestMetadata("returnWithoutElse2.kt")
        public void testReturnWithoutElse2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse2.kt");
        }

        @TestMetadata("returnWithoutElse3.kt")
        public void testReturnWithoutElse3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse3.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantModalityModifier")
    public static class RedundantModalityModifier extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("redundantAbstract.kt")
        public void testRedundantAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantModalityModifier/redundantAbstract.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantModalityModifier/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate")
    public static class RemoveToStringInStringTemplate extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/call.kt");
        }

        @TestMetadata("name.kt")
        public void testName() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/name.kt");
        }

        @TestMetadata("nameWithPostfix.kt")
        public void testNameWithPostfix() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/nameWithPostfix.kt");
        }

        @TestMetadata("necessaryBrackets1.kt")
        public void testNecessaryBrackets1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/necessaryBrackets1.kt");
        }

        @TestMetadata("necessaryBrackets2.kt")
        public void testNecessaryBrackets2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/necessaryBrackets2.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/suppress")
    public abstract static class Suppress extends AbstractK2QuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/annotationPosition")
        public static class AnnotationPosition extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("paramWithModifier.kt")
            public void testParamWithModifier() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/paramWithModifier.kt");
            }

            @TestMetadata("topLevelFunctionModifierOnThePreviousLine.kt")
            public void testTopLevelFunctionModifierOnThePreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionModifierOnThePreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionModifierOnTheSameLine.kt")
            public void testTopLevelFunctionModifierOnTheSameLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionModifierOnTheSameLine.kt");
            }

            @TestMetadata("topLevelFunctionNoModifiers.kt")
            public void testTopLevelFunctionNoModifiers() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionNoModifiers.kt");
            }

            @TestMetadata("topLevelFunctionSuppressAnotherPreviousLine.kt")
            public void testTopLevelFunctionSuppressAnotherPreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressAnotherPreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressEmptyArgsPreviousLine.kt")
            public void testTopLevelFunctionSuppressEmptyArgsPreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressEmptyArgsPreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressNoArgsPreviousLine.kt")
            public void testTopLevelFunctionSuppressNoArgsPreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressNoArgsPreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressNoArgsPreviousLineBare.kt")
            public void testTopLevelFunctionSuppressNoArgsPreviousLineBare() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressNoArgsPreviousLineBare.kt");
            }

            @TestMetadata("topLevelFunctionSuppressNoArgsTheSameLine.kt")
            public void testTopLevelFunctionSuppressNoArgsTheSameLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressNoArgsTheSameLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressNoArgsTheSameLineBare.kt")
            public void testTopLevelFunctionSuppressNoArgsTheSameLineBare() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressNoArgsTheSameLineBare.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFile.kt")
            public void testTopLevelFunctionSuppressOnFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFile.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFileOtherAnnotation.kt")
            public void testTopLevelFunctionSuppressOnFileOtherAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFileOtherAnnotation.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFileWithPackage.kt")
            public void testTopLevelFunctionSuppressOnFileWithPackage() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFileWithPackage.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFileWithSuppress.kt")
            public void testTopLevelFunctionSuppressOnFileWithSuppress() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFileWithSuppress.kt");
            }

            @TestMetadata("topLevelFunctionUnrelatedAnnotation.kt")
            public void testTopLevelFunctionUnrelatedAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionUnrelatedAnnotation.kt");
            }

            @TestMetadata("topLevelFunctionUnrelatedAnnotationBare.kt")
            public void testTopLevelFunctionUnrelatedAnnotationBare() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionUnrelatedAnnotationBare.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/availability")
        public static class Availability extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("localFunSuppressForLocal.kt")
            public void testLocalFunSuppressForLocal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localFunSuppressForLocal.kt");
            }

            @TestMetadata("localFunSuppressForOuter.kt")
            public void testLocalFunSuppressForOuter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localFunSuppressForOuter.kt");
            }

            @TestMetadata("localValSuppressForFun.kt")
            public void testLocalValSuppressForFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localValSuppressForFun.kt");
            }

            @TestMetadata("localValSuppressForVal.kt")
            public void testLocalValSuppressForVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localValSuppressForVal.kt");
            }

            @TestMetadata("memberOfNestedSuppressForMember.kt")
            public void testMemberOfNestedSuppressForMember() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberOfNestedSuppressForMember.kt");
            }

            @TestMetadata("memberOfNestedSuppressForNested.kt")
            public void testMemberOfNestedSuppressForNested() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberOfNestedSuppressForNested.kt");
            }

            @TestMetadata("memberOfNestedSuppressForOuter.kt")
            public void testMemberOfNestedSuppressForOuter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberOfNestedSuppressForOuter.kt");
            }

            @TestMetadata("memberSuppressForClass.kt")
            public void testMemberSuppressForClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberSuppressForClass.kt");
            }

            @TestMetadata("memberSuppressForMember.kt")
            public void testMemberSuppressForMember() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberSuppressForMember.kt");
            }

            @TestMetadata("parameterSuppressForDestructuredLambdaParameter.kt")
            public void testParameterSuppressForDestructuredLambdaParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/parameterSuppressForDestructuredLambdaParameter.kt");
            }

            @TestMetadata("parameterSuppressForLambdaParameter.kt")
            public void testParameterSuppressForLambdaParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/parameterSuppressForLambdaParameter.kt");
            }

            @TestMetadata("topLevelFunctionAlreadySuppressed.kt")
            public void testTopLevelFunctionAlreadySuppressed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/topLevelFunctionAlreadySuppressed.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/declarationKinds")
        public static class DeclarationKinds extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("class.kt")
            public void testClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/class.kt");
            }

            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/classObject.kt");
            }

            @TestMetadata("enumEntry.kt")
            public void testEnumEntry() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/enumEntry.kt");
            }

            @TestMetadata("fun.kt")
            public void testFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/fun.kt");
            }

            @TestMetadata("interface.kt")
            public void testInterface() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/interface.kt");
            }

            @TestMetadata("multiVal.kt")
            public void testMultiVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/multiVal.kt");
            }

            @TestMetadata("multiVar.kt")
            public void testMultiVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/multiVar.kt");
            }

            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/object.kt");
            }

            @TestMetadata("param.kt")
            public void testParam() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/param.kt");
            }

            @TestMetadata("secondaryConstructor.kt")
            public void testSecondaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/secondaryConstructor.kt");
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/val.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/var.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/errorRecovery")
        public static class ErrorRecovery extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("nonStringInSuppress.kt")
            public void testNonStringInSuppress() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/errorRecovery/nonStringInSuppress.kt");
            }

            @TestMetadata("unresolvedAnnotation.kt")
            public void testUnresolvedAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/errorRecovery/unresolvedAnnotation.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/external")
        public static class External extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("suppressActive.kt")
            public void testSuppressActive() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/external/suppressActive.kt");
            }

            @TestMetadata("suppressAvailable.kt")
            public void testSuppressAvailable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/external/suppressAvailable.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/forStatement")
        public abstract static class ForStatement extends AbstractK2QuickFixTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable")
            public static class Unavailable extends AbstractK2QuickFixTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inAnnotationArgument.kt")
                public void testInAnnotationArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inAnnotationArgument.kt");
                }

                @TestMetadata("inClassHeader.kt")
                public void testInClassHeader() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inClassHeader.kt");
                }

                @TestMetadata("inDefaultArgument.kt")
                public void testInDefaultArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inDefaultArgument.kt");
                }

                @TestMetadata("inExpressionBody.kt")
                public void testInExpressionBody() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inExpressionBody.kt");
                }

                @TestMetadata("inLocalValInitializer.kt")
                public void testInLocalValInitializer() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inLocalValInitializer.kt");
                }

                @TestMetadata("inParameterType.kt")
                public void testInParameterType() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inParameterType.kt");
                }

                @TestMetadata("inParameterTypeInFunctionLiteral.kt")
                public void testInParameterTypeInFunctionLiteral() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inParameterTypeInFunctionLiteral.kt");
                }

                @TestMetadata("inPropertyInitializer.kt")
                public void testInPropertyInitializer() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inPropertyInitializer.kt");
                }

                @TestMetadata("objectLiteral.kt")
                public void testObjectLiteral() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/objectLiteral.kt");
                }

                @TestMetadata("objectLiteralInsideExpression.kt")
                public void testObjectLiteralInsideExpression() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/objectLiteralInsideExpression.kt");
                }

                @TestMetadata("supretype.kt")
                public void testSupretype() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/supretype.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/forStatement")
            public static class Uncategorized extends AbstractK2QuickFixTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("andAnd.kt")
                public void testAndAnd() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/andAnd.kt");
                }

                @TestMetadata("annotatedExpr.kt")
                public void testAnnotatedExpr() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/annotatedExpr.kt");
                }

                @TestMetadata("annotatedExprWithSuppress.kt")
                public void testAnnotatedExprWithSuppress() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/annotatedExprWithSuppress.kt");
                }

                @TestMetadata("arrayRead.kt")
                public void testArrayRead() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/arrayRead.kt");
                }

                @TestMetadata("as.kt")
                public void testAs() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/as.kt");
                }

                @TestMetadata("asSafe.kt")
                public void testAsSafe() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/asSafe.kt");
                }

                @TestMetadata("assign.kt")
                public void testAssign() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/assign.kt");
                }

                @TestMetadata("call.kt")
                public void testCall() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/call.kt");
                }

                @TestMetadata("doWhile.kt")
                public void testDoWhile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/doWhile.kt");
                }

                @TestMetadata("dotQualified.kt")
                public void testDotQualified() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/dotQualified.kt");
                }

                @TestMetadata("elvis.kt")
                public void testElvis() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/elvis.kt");
                }

                @TestMetadata("eqEq.kt")
                public void testEqEq() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/eqEq.kt");
                }

                @TestMetadata("for.kt")
                public void testFor() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/for.kt");
                }

                @TestMetadata("if.kt")
                public void testIf() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/if.kt");
                }

                @TestMetadata("in.kt")
                public void testIn() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/in.kt");
                }

                @TestMetadata("infix.kt")
                public void testInfix() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/infix.kt");
                }

                @TestMetadata("is.kt")
                public void testIs() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/is.kt");
                }

                @TestMetadata("labeled.kt")
                public void testLabeled() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/labeled.kt");
                }

                @TestMetadata("less.kt")
                public void testLess() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/less.kt");
                }

                @TestMetadata("mul.kt")
                public void testMul() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/mul.kt");
                }

                @TestMetadata("orOr.kt")
                public void testOrOr() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/orOr.kt");
                }

                @TestMetadata("parenthesized.kt")
                public void testParenthesized() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/parenthesized.kt");
                }

                @TestMetadata("plus.kt")
                public void testPlus() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/plus.kt");
                }

                @TestMetadata("postfix.kt")
                public void testPostfix() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/postfix.kt");
                }

                @TestMetadata("postfixPlusPlus.kt")
                public void testPostfixPlusPlus() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/postfixPlusPlus.kt");
                }

                @TestMetadata("prefixPlusPlus.kt")
                public void testPrefixPlusPlus() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/prefixPlusPlus.kt");
                }

                @TestMetadata("range.kt")
                public void testRange() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/range.kt");
                }

                @TestMetadata("return.kt")
                public void testReturn() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/return.kt");
                }

                @TestMetadata("safeQualified.kt")
                public void testSafeQualified() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/safeQualified.kt");
                }

                @TestMetadata("simpleName.kt")
                public void testSimpleName() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/simpleName.kt");
                }

                @TestMetadata("stringTemplate.kt")
                public void testStringTemplate() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/stringTemplate.kt");
                }

                @TestMetadata("throw.kt")
                public void testThrow() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/throw.kt");
                }

                @TestMetadata("try.kt")
                public void testTry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/try.kt");
                }

                @TestMetadata("whenExpressionEntry.kt")
                public void testWhenExpressionEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenExpressionEntry.kt");
                }

                @TestMetadata("whenInEntry.kt")
                public void testWhenInEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenInEntry.kt");
                }

                @TestMetadata("whenIsEntry.kt")
                public void testWhenIsEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenIsEntry.kt");
                }

                @TestMetadata("whenSubject.kt")
                public void testWhenSubject() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenSubject.kt");
                }

                @TestMetadata("while.kt")
                public void testWhile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/while.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/inspections")
        public static class Inspections extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("constantConditionIf.kt")
            public void testConstantConditionIf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/inspections/constantConditionIf.kt");
            }

            @TestMetadata("unusedImports.kt")
            public void testUnusedImports() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/inspections/unusedImports.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/redundant")
        public static class Redundant extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("RemoveAnnotation.kt")
            public void testRemoveAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/RemoveAnnotation.kt");
            }

            @TestMetadata("RemoveAnnotationEntry.kt")
            public void testRemoveAnnotationEntry() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/RemoveAnnotationEntry.kt");
            }

            @TestMetadata("Suppressed.kt")
            public void testSuppressed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/Suppressed.kt");
            }
        }
    }
}
