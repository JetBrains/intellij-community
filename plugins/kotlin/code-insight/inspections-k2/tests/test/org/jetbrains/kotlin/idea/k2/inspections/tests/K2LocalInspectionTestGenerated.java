// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.inspections.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2LocalInspectionTestGenerated extends AbstractK2LocalInspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/unusedVariable")
    public static class UnusedVariable extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("unusedVariableInDestructuringDeclaration.kt")
        public void testUnusedVariableInDestructuringDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableInDestructuringDeclaration.kt");
        }

        @TestMetadata("unusedVariableWithAnonymousFunctionInitialize1.kt")
        public void testUnusedVariableWithAnonymousFunctionInitialize1() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithAnonymousFunctionInitialize1.kt");
        }

        @TestMetadata("unusedVariableWithAnonymousFunctionInitialize2.kt")
        public void testUnusedVariableWithAnonymousFunctionInitialize2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithAnonymousFunctionInitialize2.kt");
        }

        @TestMetadata("unusedVariableWithConstantInitializer.kt")
        public void testUnusedVariableWithConstantInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithConstantInitializer.kt");
        }

        @TestMetadata("unusedVariableWithInitializer.kt")
        public void testUnusedVariableWithInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithInitializer.kt");
        }

        @TestMetadata("unusedVariableWithInitializerAndComment.kt")
        public void testUnusedVariableWithInitializerAndComment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithInitializerAndComment.kt");
        }

        @TestMetadata("unusedVariableWithLambdaInitializer1.kt")
        public void testUnusedVariableWithLambdaInitializer1() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithLambdaInitializer1.kt");
        }

        @TestMetadata("unusedVariableWithLambdaInitializer2.kt")
        public void testUnusedVariableWithLambdaInitializer2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithLambdaInitializer2.kt");
        }

        @TestMetadata("unusedVariableWithNullInitializer.kt")
        public void testUnusedVariableWithNullInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithNullInitializer.kt");
        }

        @TestMetadata("unusedVariableWithoutInitializer.kt")
        public void testUnusedVariableWithoutInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithoutInitializer.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier")
    public static class RedundantVisibilityModifier extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("internalInPrivateClass.kt")
        public void testInternalInPrivateClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/internalInPrivateClass.kt");
        }

        @TestMetadata("onlyPrivateIsOkForSealedConstructor.kt")
        public void testOnlyPrivateIsOkForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/onlyPrivateIsOkForSealedConstructor.kt");
        }

        @TestMetadata("overridePropertySetter.kt")
        public void testOverridePropertySetter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/overridePropertySetter.kt");
        }

        @TestMetadata("privateIsDefaultForSealedConstructor.kt")
        public void testPrivateIsDefaultForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/privateIsDefaultForSealedConstructor.kt");
        }

        @TestMetadata("privateIsOkForSealedConstructor.kt")
        public void testPrivateIsOkForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/privateIsOkForSealedConstructor.kt");
        }

        @TestMetadata("protectedIsDefaultForSealedConstructor.kt")
        public void testProtectedIsDefaultForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/protectedIsDefaultForSealedConstructor.kt");
        }

        @TestMetadata("publicExplicitApiModeStrict.kt")
        public void testPublicExplicitApiModeStrict() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicExplicitApiModeStrict.kt");
        }

        @TestMetadata("publicExplicitApiModeStrict2.kt")
        public void testPublicExplicitApiModeStrict2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicExplicitApiModeStrict2.kt");
        }

        @TestMetadata("publicExplicitApiModeStrict3.kt")
        public void testPublicExplicitApiModeStrict3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicExplicitApiModeStrict3.kt");
        }

        @TestMetadata("publicExplicitApiModeWarning.kt")
        public void testPublicExplicitApiModeWarning() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicExplicitApiModeWarning.kt");
        }

        @TestMetadata("publicExplicitApiModeWarning2.kt")
        public void testPublicExplicitApiModeWarning2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicExplicitApiModeWarning2.kt");
        }

        @TestMetadata("publicExplicitApiModeWarning3.kt")
        public void testPublicExplicitApiModeWarning3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicExplicitApiModeWarning3.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter.kt")
        public void testPublicOverrideProtectedSetter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter2.kt")
        public void testPublicOverrideProtectedSetter2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter2.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter3.kt")
        public void testPublicOverrideProtectedSetter3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter3.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter4.kt")
        public void testPublicOverrideProtectedSetter4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter4.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter5.kt")
        public void testPublicOverrideProtectedSetter5() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter5.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter6.kt")
        public void testPublicOverrideProtectedSetter6() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter6.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/implicitThis")
    public static class ImplicitThis extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("already.kt")
        public void testAlready() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/already.kt");
        }

        @TestMetadata("callVariableAsFunction.kt")
        public void testCallVariableAsFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/callVariableAsFunction.kt");
        }

        @TestMetadata("callVariableAsFunction2.kt")
        public void testCallVariableAsFunction2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/callVariableAsFunction2.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/function.kt");
        }

        @TestMetadata("functionPartOfCall.kt")
        public void testFunctionPartOfCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/functionPartOfCall.kt");
        }

        @TestMetadata("functionReference.kt")
        public void testFunctionReference() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/functionReference.kt");
        }

        @TestMetadata("functionWithReceiver.kt")
        public void testFunctionWithReceiver() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/functionWithReceiver.kt");
        }

        @TestMetadata("multipleReceivers.kt")
        public void testMultipleReceivers() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/multipleReceivers.kt");
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/nested.kt");
        }

        @TestMetadata("nestedCall.kt")
        public void testNestedCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/nestedCall.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/property.kt");
        }

        @TestMetadata("propertyPartOfCall.kt")
        public void testPropertyPartOfCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/propertyPartOfCall.kt");
        }

        @TestMetadata("propertyReference.kt")
        public void testPropertyReference() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/propertyReference.kt");
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/topLevel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/doubleNegation")
    public static class DoubleNegation extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/function.kt");
        }

        @TestMetadata("invalid.kt")
        public void testInvalid() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/invalid.kt");
        }

        @TestMetadata("parenthesized.kt")
        public void testParenthesized() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/parenthesized.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate")
    public static class EnumValuesSoftDeprecate extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("arrayAccessOperator.kt")
        public void testArrayAccessOperator() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/arrayAccessOperator.kt");
        }

        @TestMetadata("arrayAccessOperatorInBinaryExpression.kt")
        public void testArrayAccessOperatorInBinaryExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/arrayAccessOperatorInBinaryExpression.kt");
        }

        @TestMetadata("arrayAssignOperator.kt")
        public void testArrayAssignOperator() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/arrayAssignOperator.kt");
        }

        @TestMetadata("arrayGetMethod.kt")
        public void testArrayGetMethod() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/arrayGetMethod.kt");
        }

        @TestMetadata("arrayMethodNonSuitableForList.kt")
        public void testArrayMethodNonSuitableForList() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/arrayMethodNonSuitableForList.kt");
        }

        @TestMetadata("arraySizeMethod.kt")
        public void testArraySizeMethod() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/arraySizeMethod.kt");
        }

        @TestMetadata("asListCall.kt")
        public void testAsListCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/asListCall.kt");
        }

        @TestMetadata("callInsideEnumWithCast.kt")
        public void testCallInsideEnumWithCast() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/callInsideEnumWithCast.kt");
        }

        @TestMetadata("callInsideEnumWithoutCast.kt")
        public void testCallInsideEnumWithoutCast() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/callInsideEnumWithoutCast.kt");
        }

        @TestMetadata("callWithQualifiedClassName.kt")
        public void testCallWithQualifiedClassName() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/callWithQualifiedClassName.kt");
        }

        @TestMetadata("equalsCheck.kt")
        public void testEqualsCheck() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/equalsCheck.kt");
        }

        @TestMetadata("explicitTypeInGeneric.kt")
        public void testExplicitTypeInGeneric() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/explicitTypeInGeneric.kt");
        }

        @TestMetadata("extensionMethodNonSutableForList.kt")
        public void testExtensionMethodNonSutableForList() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/extensionMethodNonSutableForList.kt");
        }

        @TestMetadata("extensionMethodSuitableForList.kt")
        public void testExtensionMethodSuitableForList() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/extensionMethodSuitableForList.kt");
        }

        @TestMetadata("featureDisabled.kt")
        public void testFeatureDisabled() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/featureDisabled.kt");
        }

        @TestMetadata("forEachInsideEnumBody.kt")
        public void testForEachInsideEnumBody() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/forEachInsideEnumBody.kt");
        }

        @TestMetadata("forLoop.kt")
        public void testForLoop() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/forLoop.kt");
        }

        @TestMetadata("functionWithGenericArg.kt")
        public void testFunctionWithGenericArg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/functionWithGenericArg.kt");
        }

        @TestMetadata("functionWithOverrideForList.kt")
        public void testFunctionWithOverrideForList() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/functionWithOverrideForList.kt");
        }

        @TestMetadata("functionWithoutOverrideForList.kt")
        public void testFunctionWithoutOverrideForList() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/functionWithoutOverrideForList.kt");
        }

        @TestMetadata("listOfCallOnArray.kt")
        public void testListOfCallOnArray() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/listOfCallOnArray.kt");
        }

        @TestMetadata("listOfCallOnVararg.kt")
        public void testListOfCallOnVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/listOfCallOnVararg.kt");
        }

        @TestMetadata("listOfCallWithTwoArguments.kt")
        public void testListOfCallWithTwoArguments() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/listOfCallWithTwoArguments.kt");
        }

        @TestMetadata("methodReferenceNonSuitableForList.kt")
        public void testMethodReferenceNonSuitableForList() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/methodReferenceNonSuitableForList.kt");
        }

        @TestMetadata("methodReferenceSuitableForList.kt")
        public void testMethodReferenceSuitableForList() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/methodReferenceSuitableForList.kt");
        }

        @TestMetadata("noOptIn.kt")
        public void testNoOptIn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/noOptIn.kt");
        }

        @TestMetadata("objectMethod.kt")
        public void testObjectMethod() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/objectMethod.kt");
        }

        @TestMetadata("propertyAssignment.kt")
        public void testPropertyAssignment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/propertyAssignment.kt");
        }

        @TestMetadata("qualifiedCallNoContext.kt")
        public void testQualifiedCallNoContext() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/qualifiedCallNoContext.kt");
        }

        @TestMetadata("staticImport.kt")
        public void testStaticImport() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/staticImport.kt");
        }

        @TestMetadata("staticImportReplaceWithoutCast.kt")
        public void testStaticImportReplaceWithoutCast() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/staticImportReplaceWithoutCast.kt");
        }

        @TestMetadata("staticImportWithAlias.kt")
        public void testStaticImportWithAlias() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/staticImportWithAlias.kt");
        }

        @TestMetadata("toListCall.kt")
        public void testToListCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/toListCall.kt");
        }

        @TestMetadata("valuesMethodReference.kt")
        public void testValuesMethodReference() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/enumValuesSoftDeprecate/valuesMethodReference.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet")
    public static class ReplaceGetOrSet extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("acceptableVararg.kt")
        public void testAcceptableVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/acceptableVararg.kt");
        }

        @TestMetadata("argumentAndFunction.kt")
        public void testArgumentAndFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/argumentAndFunction.kt");
        }

        @TestMetadata("duplicateArguments.kt")
        public void testDuplicateArguments() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/duplicateArguments.kt");
        }

        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/extensionFunction.kt");
        }

        @TestMetadata("functionalArgument.kt")
        public void testFunctionalArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/functionalArgument.kt");
        }

        @TestMetadata("getWithSpread.kt")
        public void testGetWithSpread() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/getWithSpread.kt");
        }

        @TestMetadata("getWithSpread2.kt")
        public void testGetWithSpread2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/getWithSpread2.kt");
        }

        @TestMetadata("invalidArgument.kt")
        public void testInvalidArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/invalidArgument.kt");
        }

        @TestMetadata("javaGet.kt")
        public void testJavaGet() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/javaGet.kt");
        }

        @TestMetadata("javaSet.kt")
        public void testJavaSet() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/javaSet.kt");
        }

        @TestMetadata("javaSet2.kt")
        public void testJavaSet2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/javaSet2.kt");
        }

        @TestMetadata("missingDefaultArgument.kt")
        public void testMissingDefaultArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/missingDefaultArgument.kt");
        }

        @TestMetadata("multiArgument.kt")
        public void testMultiArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/multiArgument.kt");
        }

        @TestMetadata("noArgument.kt")
        public void testNoArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/noArgument.kt");
        }

        @TestMetadata("notOperator.kt")
        public void testNotOperator() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/notOperator.kt");
        }

        @TestMetadata("overriddenSet.kt")
        public void testOverriddenSet() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/overriddenSet.kt");
        }

        @TestMetadata("qualifier.kt")
        public void testQualifier() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/qualifier.kt");
        }

        @TestMetadata("sanityCheck.kt")
        public void testSanityCheck() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/sanityCheck.kt");
        }

        @TestMetadata("set.kt")
        public void testSet() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/set.kt");
        }

        @TestMetadata("set2.kt")
        public void testSet2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/set2.kt");
        }

        @TestMetadata("setValueUsed.kt")
        public void testSetValueUsed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setValueUsed.kt");
        }

        @TestMetadata("setWithNoParameters.kt")
        public void testSetWithNoParameters() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setWithNoParameters.kt");
        }

        @TestMetadata("setWithVararg.kt")
        public void testSetWithVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setWithVararg.kt");
        }

        @TestMetadata("singleArgument.kt")
        public void testSingleArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/singleArgument.kt");
        }

        @TestMetadata("staticMethod.kt")
        public void testStaticMethod() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/staticMethod.kt");
        }

        @TestMetadata("super.kt")
        public void testSuper() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/super.kt");
        }

        @TestMetadata("topLevelFun.kt")
        public void testTopLevelFun() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/topLevelFun.kt");
        }

        @TestMetadata("unacceptableVararg.kt")
        public void testUnacceptableVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/unacceptableVararg.kt");
        }

        @TestMetadata("unnamedAndNamed.kt")
        public void testUnnamedAndNamed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/unnamedAndNamed.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis")
    public static class NullableBooleanElvis extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inIf.kt")
        public void testInIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIf.kt");
        }

        @TestMetadata("inIf2.kt")
        public void testInIf2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIf2.kt");
        }

        @TestMetadata("inIf3.kt")
        public void testInIf3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIf3.kt");
        }

        @TestMetadata("inIfWithBinaryExpression.kt")
        public void testInIfWithBinaryExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithBinaryExpression.kt");
        }

        @TestMetadata("inIfWithCallExpression.kt")
        public void testInIfWithCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithCallExpression.kt");
        }

        @TestMetadata("inIfWithIfExpression.kt")
        public void testInIfWithIfExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithIfExpression.kt");
        }

        @TestMetadata("inIfWithNullableCallExpression.kt")
        public void testInIfWithNullableCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithNullableCallExpression.kt");
        }

        @TestMetadata("notInIf.kt")
        public void testNotInIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/notInIf.kt");
        }

        @TestMetadata("notInIfWithThisExpression.kt")
        public void testNotInIfWithThisExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/notInIfWithThisExpression.kt");
        }

        @TestMetadata("notInIfWithTrue.kt")
        public void testNotInIfWithTrue() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/notInIfWithTrue.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull")
    public static class RedundantElvisReturnNull extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/basic.kt");
        }

        @TestMetadata("notInReturn.kt")
        public void testNotInReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/notInReturn.kt");
        }

        @TestMetadata("notReturnNull.kt")
        public void testNotReturnNull() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/notReturnNull.kt");
        }

        @TestMetadata("uselessElvis.kt")
        public void testUselessElvis() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/uselessElvis.kt");
        }

        @TestMetadata("withParenthesis.kt")
        public void testWithParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/withParenthesis.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize")
    public static class ReplaceCollectionCountWithSize extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("countInBlock.kt")
        public void testCountInBlock() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countInBlock.kt");
        }

        @TestMetadata("countOfArray.kt")
        public void testCountOfArray() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfArray.kt");
        }

        @TestMetadata("countOfArrayWithPredicate.kt")
        public void testCountOfArrayWithPredicate() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfArrayWithPredicate.kt");
        }

        @TestMetadata("countOfCollection.kt")
        public void testCountOfCollection() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfCollection.kt");
        }

        @TestMetadata("countOfIterable.kt")
        public void testCountOfIterable() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfIterable.kt");
        }

        @TestMetadata("countOfIterable2.kt")
        public void testCountOfIterable2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfIterable2.kt");
        }

        @TestMetadata("countOfIterable3.kt")
        public void testCountOfIterable3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfIterable3.kt");
        }

        @TestMetadata("countOfIterableSubclass.kt")
        public void testCountOfIterableSubclass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfIterableSubclass.kt");
        }

        @TestMetadata("countOfMap.kt")
        public void testCountOfMap() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfMap.kt");
        }

        @TestMetadata("countOfPrimitiveArray.kt")
        public void testCountOfPrimitiveArray() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfPrimitiveArray.kt");
        }

        @TestMetadata("differentCount.kt")
        public void testDifferentCount() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/differentCount.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate")
    public static class RemoveToStringInStringTemplate extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("caretInReceiver.kt")
        public void testCaretInReceiver() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/caretInReceiver.kt");
        }

        @TestMetadata("caretInSelector.kt")
        public void testCaretInSelector() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/caretInSelector.kt");
        }

        @TestMetadata("extensionToString.kt")
        public void testExtensionToString() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/extensionToString.kt");
        }

        @TestMetadata("extensionToStringWithParameter.kt")
        public void testExtensionToStringWithParameter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/extensionToStringWithParameter.kt");
        }

        @TestMetadata("nameReference.kt")
        public void testNameReference() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/nameReference.kt");
        }

        @TestMetadata("super.kt")
        public void testSuper() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/super.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment")
    public static class IfToAssignment extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("afterRightBrace.kt")
        public void testAfterRightBrace() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/afterRightBrace.kt");
        }

        @TestMetadata("afterRightBrace2.kt")
        public void testAfterRightBrace2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/afterRightBrace2.kt");
        }

        @TestMetadata("afterRightBrace3.kt")
        public void testAfterRightBrace3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/afterRightBrace3.kt");
        }

        @TestMetadata("afterRightParenthesis.kt")
        public void testAfterRightParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/afterRightParenthesis.kt");
        }

        @TestMetadata("cascadeIf.kt")
        public void testCascadeIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/cascadeIf.kt");
        }

        @TestMetadata("elseIfOnly.kt")
        public void testElseIfOnly() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/elseIfOnly.kt");
        }

        @TestMetadata("hasNull.kt")
        public void testHasNull() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/hasNull.kt");
        }

        @TestMetadata("hasNull2.kt")
        public void testHasNull2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/hasNull2.kt");
        }

        @TestMetadata("hasNull3.kt")
        public void testHasNull3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/hasNull3.kt");
        }

        @TestMetadata("hasNull4.kt")
        public void testHasNull4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/hasNull4.kt");
        }

        @TestMetadata("hasNull5.kt")
        public void testHasNull5() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/hasNull5.kt");
        }

        @TestMetadata("hasNull6.kt")
        public void testHasNull6() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/hasNull6.kt");
        }

        @TestMetadata("ifElseIf.kt")
        public void testIfElseIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/ifElseIf.kt");
        }

        @TestMetadata("ifElseIfElse.kt")
        public void testIfElseIfElse() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/ifElseIfElse.kt");
        }

        @TestMetadata("ifElseifElseInconsistent.kt")
        public void testIfElseifElseInconsistent() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/ifElseifElseInconsistent.kt");
        }

        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/innerIfTransformed.kt");
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/lambda.kt");
        }

        @TestMetadata("lambda2.kt")
        public void testLambda2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/lambda2.kt");
        }

        @TestMetadata("multipleAssignments.kt")
        public void testMultipleAssignments() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/multipleAssignments.kt");
        }

        @TestMetadata("nullableMutableList.kt")
        public void testNullableMutableList() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/nullableMutableList.kt");
        }

        @TestMetadata("operatorFunWithTypeParam.kt")
        public void testOperatorFunWithTypeParam() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/operatorFunWithTypeParam.kt");
        }

        @TestMetadata("plusAssignOperator.kt")
        public void testPlusAssignOperator() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/plusAssignOperator.kt");
        }

        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIf.kt");
        }

        @TestMetadata("simpleIfWithAugmentedAssignment.kt")
        public void testSimpleIfWithAugmentedAssignment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithAugmentedAssignment.kt");
        }

        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithBlocks.kt");
        }

        @TestMetadata("simpleIfWithShadowedVar.kt")
        public void testSimpleIfWithShadowedVar() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithShadowedVar.kt");
        }

        @TestMetadata("simpleIfWithUnmatchedAssignmentOps.kt")
        public void testSimpleIfWithUnmatchedAssignmentOps() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithUnmatchedAssignmentOps.kt");
        }

        @TestMetadata("simpleIfWithUnmatchedAssignments.kt")
        public void testSimpleIfWithUnmatchedAssignments() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithUnmatchedAssignments.kt");
        }

        @TestMetadata("simpleIfWithoutElse.kt")
        public void testSimpleIfWithoutElse() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithoutElse.kt");
        }

        @TestMetadata("simpleIfWithoutTerminatingAssignment.kt")
        public void testSimpleIfWithoutTerminatingAssignment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/simpleIfWithoutTerminatingAssignment.kt");
        }

        @TestMetadata("subTypes.kt")
        public void testSubTypes() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/subTypes.kt");
        }

        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/typeMismatch.kt");
        }

        @TestMetadata("typeMismatch2.kt")
        public void testTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/typeMismatch2.kt");
        }

        @TestMetadata("typeMismatch3.kt")
        public void testTypeMismatch3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/typeMismatch3.kt");
        }

        @TestMetadata("typeMismatchMutableList.kt")
        public void testTypeMismatchMutableList() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/typeMismatchMutableList.kt");
        }

        @TestMetadata("typeMismatchMutableList2.kt")
        public void testTypeMismatchMutableList2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/typeMismatchMutableList2.kt");
        }

        @TestMetadata("usedAsExpression.kt")
        public void testUsedAsExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToAssignment/usedAsExpression.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment")
    public static class TryToAssignment extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/basic.kt");
        }

        @TestMetadata("block.kt")
        public void testBlock() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/block.kt");
        }

        @TestMetadata("cascade.kt")
        public void testCascade() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/cascade.kt");
        }

        @TestMetadata("finally.kt")
        public void testFinally() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/finally.kt");
        }

        @TestMetadata("finallyWithAssignment.kt")
        public void testFinallyWithAssignment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/finallyWithAssignment.kt");
        }

        @TestMetadata("finallyWithCascadeAssignment.kt")
        public void testFinallyWithCascadeAssignment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/finallyWithCascadeAssignment.kt");
        }

        @TestMetadata("finallyWithCascadeUnmatchedAssignment.kt")
        public void testFinallyWithCascadeUnmatchedAssignment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/finallyWithCascadeUnmatchedAssignment.kt");
        }

        @TestMetadata("finallyWithUnmatchedAssignments.kt")
        public void testFinallyWithUnmatchedAssignments() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/finallyWithUnmatchedAssignments.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/inner.kt");
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/lambda.kt");
        }

        @TestMetadata("usedAsExpression.kt")
        public void testUsedAsExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/usedAsExpression.kt");
        }

        @TestMetadata("withUnmatchedAssignments.kt")
        public void testWithUnmatchedAssignments() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/withUnmatchedAssignments.kt");
        }

        @TestMetadata("withoutTerminatingAssignment.kt")
        public void testWithoutTerminatingAssignment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToAssignment/withoutTerminatingAssignment.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment")
    public static class WhenToAssignment extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cascadeWhen.kt")
        public void testCascadeWhen() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/cascadeWhen.kt");
        }

        @TestMetadata("differentVariablesWithSame.kt")
        public void testDifferentVariablesWithSame() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/differentVariablesWithSame.kt");
        }

        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/innerWhenTransformed.kt");
        }

        @TestMetadata("insideLoop.kt")
        public void testInsideLoop() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/insideLoop.kt");
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/lambda.kt");
        }

        @TestMetadata("lambda2.kt")
        public void testLambda2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/lambda2.kt");
        }

        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhen.kt");
        }

        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhenWithBlocks.kt");
        }

        @TestMetadata("simpleWhenWithShadowedVar.kt")
        public void testSimpleWhenWithShadowedVar() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhenWithShadowedVar.kt");
        }

        @TestMetadata("simpleWhenWithUnmatchedAssignments.kt")
        public void testSimpleWhenWithUnmatchedAssignments() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhenWithUnmatchedAssignments.kt");
        }

        @TestMetadata("simpleWhenWithoutTerminatingAssignment.kt")
        public void testSimpleWhenWithoutTerminatingAssignment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/simpleWhenWithoutTerminatingAssignment.kt");
        }

        @TestMetadata("usedAsExpression.kt")
        public void testUsedAsExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/usedAsExpression.kt");
        }

        @TestMetadata("whenHasMissingCase.kt")
        public void testWhenHasMissingCase() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/whenHasMissingCase.kt");
        }

        @TestMetadata("whenHasNoMissingCase.kt")
        public void testWhenHasNoMissingCase() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/whenHasNoMissingCase.kt");
        }

        @TestMetadata("whenHasNoMissingCaseWithElse.kt")
        public void testWhenHasNoMissingCaseWithElse() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToAssignment/whenHasNoMissingCaseWithElse.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn")
    public static class IfToReturn extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cascadeIf.kt")
        public void testCascadeIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/cascadeIf.kt");
        }

        @TestMetadata("ifElseIf.kt")
        public void testIfElseIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/ifElseIf.kt");
        }

        @TestMetadata("ifElseIfElse.kt")
        public void testIfElseIfElse() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/ifElseIfElse.kt");
        }

        @TestMetadata("ifElseIfElseInconsistent.kt")
        public void testIfElseIfElseInconsistent() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/ifElseIfElseInconsistent.kt");
        }

        @TestMetadata("ifVeryLong.kt")
        public void testIfVeryLong() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/ifVeryLong.kt");
        }

        @TestMetadata("innerIfTransformed.kt")
        public void testInnerIfTransformed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/innerIfTransformed.kt");
        }

        @TestMetadata("onReturn.kt")
        public void testOnReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/onReturn.kt");
        }

        @TestMetadata("onReturn2.kt")
        public void testOnReturn2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/onReturn2.kt");
        }

        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/simpleIf.kt");
        }

        @TestMetadata("simpleIfWithBlocks.kt")
        public void testSimpleIfWithBlocks() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/ifToReturn/simpleIfWithBlocks.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn")
    public static class TryToReturn extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn/basic.kt");
        }

        @TestMetadata("block.kt")
        public void testBlock() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn/block.kt");
        }

        @TestMetadata("cascade.kt")
        public void testCascade() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn/cascade.kt");
        }

        @TestMetadata("finally.kt")
        public void testFinally() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn/finally.kt");
        }

        @TestMetadata("finallyWithCascadeReturn.kt")
        public void testFinallyWithCascadeReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn/finallyWithCascadeReturn.kt");
        }

        @TestMetadata("finallyWithReturn.kt")
        public void testFinallyWithReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn/finallyWithReturn.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn/inner.kt");
        }

        @TestMetadata("onReturn.kt")
        public void testOnReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn/onReturn.kt");
        }

        @TestMetadata("withoutReturn.kt")
        public void testWithoutReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/tryToReturn/withoutReturn.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn")
    public static class WhenToReturn extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cascadeWhen.kt")
        public void testCascadeWhen() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/cascadeWhen.kt");
        }

        @TestMetadata("innerWhenTransformed.kt")
        public void testInnerWhenTransformed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/innerWhenTransformed.kt");
        }

        @TestMetadata("insideLoop.kt")
        public void testInsideLoop() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/insideLoop.kt");
        }

        @TestMetadata("localReturns.kt")
        public void testLocalReturns() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/localReturns.kt");
        }

        @TestMetadata("onReturn.kt")
        public void testOnReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/onReturn.kt");
        }

        @TestMetadata("onReturn2.kt")
        public void testOnReturn2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/onReturn2.kt");
        }

        @TestMetadata("otherReturns.kt")
        public void testOtherReturns() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/otherReturns.kt");
        }

        @TestMetadata("simpleWhen.kt")
        public void testSimpleWhen() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/simpleWhen.kt");
        }

        @TestMetadata("simpleWhenWithBlocks.kt")
        public void testSimpleWhenWithBlocks() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/simpleWhenWithBlocks.kt");
        }

        @TestMetadata("whenHasMissingCase.kt")
        public void testWhenHasMissingCase() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/whenHasMissingCase.kt");
        }

        @TestMetadata("whenHasNoMissingCase.kt")
        public void testWhenHasNoMissingCase() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/whenHasNoMissingCase.kt");
        }

        @TestMetadata("whenHasNoMissingCaseWithElse.kt")
        public void testWhenHasNoMissingCaseWithElse() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/whenHasNoMissingCaseWithElse.kt");
        }

        @TestMetadata("whenOneReturn.kt")
        public void testWhenOneReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/whenOneReturn.kt");
        }

        @TestMetadata("whenThrowOnly.kt")
        public void testWhenThrowOnly() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/whenThrowOnly.kt");
        }

        @TestMetadata("whenWithLambda.kt")
        public void testWhenWithLambda() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/liftOut/whenToReturn/whenWithLambda.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter")
    public abstract static class InconsistentCommentForJavaParameter extends AbstractK2LocalInspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter")
        public static class Uncategorized extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/annotation.kt");
            }

            @TestMetadata("comment.kt")
            public void testComment() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/comment.kt");
            }

            @TestMetadata("na.kt")
            public void testNa() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/na.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/simple.kt");
            }

            @TestMetadata("superSecondaryCtorCall.kt")
            public void testSuperSecondaryCtorCall() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/superSecondaryCtorCall.kt");
            }

            @TestMetadata("superTypeCall.kt")
            public void testSuperTypeCall() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/superTypeCall.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace")
        public static class Whitespace extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("notSameName1.kt")
            public void testNotSameName1() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/notSameName1.kt");
            }

            @TestMetadata("notSameName2.kt")
            public void testNotSameName2() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/notSameName2.kt");
            }

            @TestMetadata("notSameName3.kt")
            public void testNotSameName3() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/notSameName3.kt");
            }

            @TestMetadata("notSameName4.kt")
            public void testNotSameName4() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/notSameName4.kt");
            }

            @TestMetadata("notSameName5.kt")
            public void testNotSameName5() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/notSameName5.kt");
            }

            @TestMetadata("sameName1.kt")
            public void testSameName1() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/sameName1.kt");
            }

            @TestMetadata("sameName2.kt")
            public void testSameName2() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/sameName2.kt");
            }

            @TestMetadata("sameName3.kt")
            public void testSameName3() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/sameName3.kt");
            }

            @TestMetadata("sameName4.kt")
            public void testSameName4() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/sameName4.kt");
            }

            @TestMetadata("sameName5.kt")
            public void testSameName5() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/inconsistentCommentForJavaParameter/whitespace/sameName5.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse")
    public abstract static class WhenWithOnlyElse extends AbstractK2LocalInspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable")
        public abstract static class SubjectVariable extends AbstractK2LocalInspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElse")
            public static class BlockElse extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("multiReference.kt")
                public void testMultiReference() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElse/multiReference.kt");
                }

                @TestMetadata("noReference.kt")
                public void testNoReference() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElse/noReference.kt");
                }

                @TestMetadata("noReference2.kt")
                public void testNoReference2() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElse/noReference2.kt");
                }

                @TestMetadata("singleReference.kt")
                public void testSingleReference() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElse/singleReference.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElseUsedAsExpression")
            public static class BlockElseUsedAsExpression extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("multiReference.kt")
                public void testMultiReference() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElseUsedAsExpression/multiReference.kt");
                }

                @TestMetadata("noReference.kt")
                public void testNoReference() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElseUsedAsExpression/noReference.kt");
                }

                @TestMetadata("noReference2.kt")
                public void testNoReference2() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElseUsedAsExpression/noReference2.kt");
                }

                @TestMetadata("singleReference.kt")
                public void testSingleReference() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/blockElseUsedAsExpression/singleReference.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/singleElse")
            public static class SingleElse extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("multiReference.kt")
                public void testMultiReference() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/singleElse/multiReference.kt");
                }

                @TestMetadata("multiReferenceUsedAsExpression.kt")
                public void testMultiReferenceUsedAsExpression() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/singleElse/multiReferenceUsedAsExpression.kt");
                }

                @TestMetadata("noReference.kt")
                public void testNoReference() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/singleElse/noReference.kt");
                }

                @TestMetadata("noReference2.kt")
                public void testNoReference2() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/singleElse/noReference2.kt");
                }

                @TestMetadata("noReferenceUsedAsExpression.kt")
                public void testNoReferenceUsedAsExpression() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/singleElse/noReferenceUsedAsExpression.kt");
                }

                @TestMetadata("noReferenceUsedAsExpression2.kt")
                public void testNoReferenceUsedAsExpression2() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/singleElse/noReferenceUsedAsExpression2.kt");
                }

                @TestMetadata("singleReference.kt")
                public void testSingleReference() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/singleElse/singleReference.kt");
                }

                @TestMetadata("singleReferenceUsedAsExpression.kt")
                public void testSingleReferenceUsedAsExpression() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/singleElse/singleReferenceUsedAsExpression.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable")
            public static class Uncategorized extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("hasAnnotation.kt")
                public void testHasAnnotation() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/hasAnnotation.kt");
                }

                @TestMetadata("hasSameNameVariable.kt")
                public void testHasSameNameVariable() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/hasSameNameVariable.kt");
                }

                @TestMetadata("hasSameNameVariable2.kt")
                public void testHasSameNameVariable2() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/hasSameNameVariable2.kt");
                }

                @TestMetadata("hasSameNameVariable3.kt")
                public void testHasSameNameVariable3() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/hasSameNameVariable3.kt");
                }

                @TestMetadata("hasSameNameVariable4.kt")
                public void testHasSameNameVariable4() throws Exception {
                    runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/subjectVariable/hasSameNameVariable4.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse")
        public static class Uncategorized extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("complexExpression.kt")
            public void testComplexExpression() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/complexExpression.kt");
            }

            @TestMetadata("emptyElseBranchBlock.kt")
            public void testEmptyElseBranchBlock() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/emptyElseBranchBlock.kt");
            }

            @TestMetadata("hasOtherBranches.kt")
            public void testHasOtherBranches() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/hasOtherBranches.kt");
            }

            @TestMetadata("notExpression.kt")
            public void testNotExpression() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/notExpression.kt");
            }

            @TestMetadata("simpleExpression.kt")
            public void testSimpleExpression() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/simpleExpression.kt");
            }

            @TestMetadata("userKotlinDotRun.kt")
            public void testUserKotlinDotRun() throws Exception {
                runTest("../../../idea/tests/testData/inspectionsLocal/whenWithOnlyElse/userKotlinDotRun.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode")
    public static class EqualsOrHashCode extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/equals.kt");
        }

        @TestMetadata("equalsInExpectClass.kt")
        public void testEqualsInExpectClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/equalsInExpectClass.kt");
        }

        @TestMetadata("equalsWithKotlinAnyParam.kt")
        public void testEqualsWithKotlinAnyParam() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/equalsWithKotlinAnyParam.kt");
        }

        @TestMetadata("equalsWithKotlinAnyParam2.kt")
        public void testEqualsWithKotlinAnyParam2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/equalsWithKotlinAnyParam2.kt");
        }

        @TestMetadata("equalsWithKotlinBoolean.kt")
        public void testEqualsWithKotlinBoolean() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/equalsWithKotlinBoolean.kt");
        }

        @TestMetadata("hashCode.kt")
        public void testHashCode() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/hashCode.kt");
        }

        @TestMetadata("hashCodeInChildClass.kt")
        public void testHashCodeInChildClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/hashCodeInChildClass.kt");
        }

        @TestMetadata("hashCodeInExpectClass.kt")
        public void testHashCodeInExpectClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/hashCodeInExpectClass.kt");
        }

        @TestMetadata("inheritClassWithTypeParam.kt")
        public void testInheritClassWithTypeParam() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/inheritClassWithTypeParam.kt");
        }

        @TestMetadata("inheritUserDefinedClassAny.kt")
        public void testInheritUserDefinedClassAny() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/inheritUserDefinedClassAny.kt");
        }

        @TestMetadata("superClassWithDifferentEquals.kt")
        public void testSuperClassWithDifferentEquals() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsOrHashCode/superClassWithDifferentEquals.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName")
    public static class RemoveRedundantQualifierName extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationEntry.kt")
        public void testAnnotationEntry() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/annotationEntry.kt");
        }

        @TestMetadata("applicableEnumEntries.kt")
        public void testApplicableEnumEntries() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/applicableEnumEntries.kt");
        }

        @TestMetadata("asReceiver.kt")
        public void testAsReceiver() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/asReceiver.kt");
        }

        @TestMetadata("asReceiverProperty.kt")
        public void testAsReceiverProperty() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/asReceiverProperty.kt");
        }

        @TestMetadata("classLiteral.kt")
        public void testClassLiteral() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/classLiteral.kt");
        }

        @TestMetadata("classLiteral2.kt")
        public void testClassLiteral2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/classLiteral2.kt");
        }

        @TestMetadata("classLiteral3.kt")
        public void testClassLiteral3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/classLiteral3.kt");
        }

        @TestMetadata("classLiteral4.kt")
        public void testClassLiteral4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/classLiteral4.kt");
        }

        @TestMetadata("classLiteral5.kt")
        public void testClassLiteral5() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/classLiteral5.kt");
        }

        @TestMetadata("companionCollision.kt")
        public void testCompanionCollision() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionCollision.kt");
        }

        @TestMetadata("companionOnClass.kt")
        public void testCompanionOnClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionOnClass.kt");
        }

        @TestMetadata("companionOnVariable.kt")
        public void testCompanionOnVariable() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionOnVariable.kt");
        }

        @TestMetadata("companionType.kt")
        public void testCompanionType() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionType.kt");
        }

        @TestMetadata("companionType2.kt")
        public void testCompanionType2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionType2.kt");
        }

        @TestMetadata("companionType3.kt")
        public void testCompanionType3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionType3.kt");
        }

        @TestMetadata("companionType4.kt")
        public void testCompanionType4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionType4.kt");
        }

        @TestMetadata("companionType5.kt")
        public void testCompanionType5() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionType5.kt");
        }

        @TestMetadata("companionWithName.kt")
        public void testCompanionWithName() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionWithName.kt");
        }

        @TestMetadata("companionWithOuterName.kt")
        public void testCompanionWithOuterName() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/companionWithOuterName.kt");
        }

        @TestMetadata("copy.kt")
        public void testCopy() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/copy.kt");
        }

        @TestMetadata("enumEntry.kt")
        public void testEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/enumEntry.kt");
        }

        @TestMetadata("enumInEnumWithPackageNames.kt")
        public void testEnumInEnumWithPackageNames() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/enumInEnumWithPackageNames.kt");
        }

        @TestMetadata("enumInEnumWithPackageNames2.kt")
        public void testEnumInEnumWithPackageNames2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/enumInEnumWithPackageNames2.kt");
        }

        @TestMetadata("enumInEnumWithPackageNames3.kt")
        public void testEnumInEnumWithPackageNames3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/enumInEnumWithPackageNames3.kt");
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/expression.kt");
        }

        @TestMetadata("expression2.kt")
        public void testExpression2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/expression2.kt");
        }

        @TestMetadata("expression3.kt")
        public void testExpression3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/expression3.kt");
        }

        @TestMetadata("expression4.kt")
        public void testExpression4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/expression4.kt");
        }

        @TestMetadata("expression5.kt")
        public void testExpression5() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/expression5.kt");
        }

        @TestMetadata("expressionWithParameter.kt")
        public void testExpressionWithParameter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/expressionWithParameter.kt");
        }

        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/innerClass.kt");
        }

        @TestMetadata("innerClass2.kt")
        public void testInnerClass2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/innerClass2.kt");
        }

        @TestMetadata("innerClass3.kt")
        public void testInnerClass3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/innerClass3.kt");
        }

        @TestMetadata("innerClass4.kt")
        public void testInnerClass4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/innerClass4.kt");
        }

        @TestMetadata("innerClass5.kt")
        public void testInnerClass5() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/innerClass5.kt");
        }

        @TestMetadata("innerClassWithImport.kt")
        public void testInnerClassWithImport() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/innerClassWithImport.kt");
        }

        @TestMetadata("innerClassWithImport2.kt")
        public void testInnerClassWithImport2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/innerClassWithImport2.kt");
        }

        @TestMetadata("javaConstructor.kt")
        public void testJavaConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/javaConstructor.kt");
        }

        @TestMetadata("kt35898.kt")
        public void testKt35898() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/kt35898.kt");
        }

        @TestMetadata("localFun.kt")
        public void testLocalFun() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/localFun.kt");
        }

        @TestMetadata("localFun2.kt")
        public void testLocalFun2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/localFun2.kt");
        }

        @TestMetadata("localFun3.kt")
        public void testLocalFun3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/localFun3.kt");
        }

        @TestMetadata("localVariable.kt")
        public void testLocalVariable() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/localVariable.kt");
        }

        @TestMetadata("localVariable2.kt")
        public void testLocalVariable2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/localVariable2.kt");
        }

        @TestMetadata("nestedTypeFromImplicitReceiverClass.kt")
        public void testNestedTypeFromImplicitReceiverClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/nestedTypeFromImplicitReceiverClass.kt");
        }

        @TestMetadata("nestedTypeFromImplicitReceiverInterface.kt")
        public void testNestedTypeFromImplicitReceiverInterface() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/nestedTypeFromImplicitReceiverInterface.kt");
        }

        @TestMetadata("nestedTypeFromSupertypeClass.kt")
        public void testNestedTypeFromSupertypeClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/nestedTypeFromSupertypeClass.kt");
        }

        @TestMetadata("nestedTypeFromSupertypeInterface.kt")
        public void testNestedTypeFromSupertypeInterface() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/nestedTypeFromSupertypeInterface.kt");
        }

        @TestMetadata("notApplicableAsReceiver.kt")
        public void testNotApplicableAsReceiver() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableAsReceiver.kt");
        }

        @TestMetadata("notApplicableAsReceiverProperty.kt")
        public void testNotApplicableAsReceiverProperty() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableAsReceiverProperty.kt");
        }

        @TestMetadata("notApplicableCollisionTopLevelClass.kt")
        public void testNotApplicableCollisionTopLevelClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableCollisionTopLevelClass.kt");
        }

        @TestMetadata("notApplicableCompanion.kt")
        public void testNotApplicableCompanion() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableCompanion.kt");
        }

        @TestMetadata("notApplicableCompanionInEnumEntry.kt")
        public void testNotApplicableCompanionInEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableCompanionInEnumEntry.kt");
        }

        @TestMetadata("notApplicableCompanionOtherName.kt")
        public void testNotApplicableCompanionOtherName() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableCompanionOtherName.kt");
        }

        @TestMetadata("notApplicableCompanionType.kt")
        public void testNotApplicableCompanionType() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableCompanionType.kt");
        }

        @TestMetadata("notApplicableCompanionType2.kt")
        public void testNotApplicableCompanionType2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableCompanionType2.kt");
        }

        @TestMetadata("notApplicableEnumCompanion.kt")
        public void testNotApplicableEnumCompanion() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumCompanion.kt");
        }

        @TestMetadata("notApplicableEnumCompanion2.kt")
        public void testNotApplicableEnumCompanion2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumCompanion2.kt");
        }

        @TestMetadata("notApplicableEnumCompanion3.kt")
        public void testNotApplicableEnumCompanion3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumCompanion3.kt");
        }

        @TestMetadata("notApplicableEnumEntries.kt")
        public void testNotApplicableEnumEntries() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumEntries.kt");
        }

        @TestMetadata("notApplicableEnumEntries2.kt")
        public void testNotApplicableEnumEntries2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumEntries2.kt");
        }

        @TestMetadata("notApplicableEnumEntry.kt")
        public void testNotApplicableEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumEntry.kt");
        }

        @TestMetadata("notApplicableEnumEntryInEnumEntry.kt")
        public void testNotApplicableEnumEntryInEnumEntry() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumEntryInEnumEntry.kt");
        }

        @TestMetadata("notApplicableEnumEntryInEnumEntry2.kt")
        public void testNotApplicableEnumEntryInEnumEntry2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumEntryInEnumEntry2.kt");
        }

        @TestMetadata("notApplicableEnumInEnum.kt")
        public void testNotApplicableEnumInEnum() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumInEnum.kt");
        }

        @TestMetadata("notApplicableEnumInEnum2.kt")
        public void testNotApplicableEnumInEnum2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumInEnum2.kt");
        }

        @TestMetadata("notApplicableEnumInEnum3.kt")
        public void testNotApplicableEnumInEnum3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumInEnum3.kt");
        }

        @TestMetadata("notApplicableEnumInEnum4.kt")
        public void testNotApplicableEnumInEnum4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumInEnum4.kt");
        }

        @TestMetadata("notApplicableEnumInEnum5.kt")
        public void testNotApplicableEnumInEnum5() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumInEnum5.kt");
        }

        @TestMetadata("notApplicableEnumValueOf.kt")
        public void testNotApplicableEnumValueOf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumValueOf.kt");
        }

        @TestMetadata("notApplicableEnumValues.kt")
        public void testNotApplicableEnumValues() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableEnumValues.kt");
        }

        @TestMetadata("notApplicableExpression.kt")
        public void testNotApplicableExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableExpression.kt");
        }

        @TestMetadata("notApplicableExpression2.kt")
        public void testNotApplicableExpression2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableExpression2.kt");
        }

        @TestMetadata("notApplicableExpression3.kt")
        public void testNotApplicableExpression3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableExpression3.kt");
        }

        @TestMetadata("notApplicableExpression4.kt")
        public void testNotApplicableExpression4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableExpression4.kt");
        }

        @TestMetadata("notApplicableInnerClassInGenericOuterClass.kt")
        public void testNotApplicableInnerClassInGenericOuterClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableInnerClassInGenericOuterClass.kt");
        }

        @TestMetadata("notApplicableInnerClassInGenericOuterClass2.kt")
        public void testNotApplicableInnerClassInGenericOuterClass2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableInnerClassInGenericOuterClass2.kt");
        }

        @TestMetadata("notApplicableInnerClassInGenericOuterClass3.kt")
        public void testNotApplicableInnerClassInGenericOuterClass3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableInnerClassInGenericOuterClass3.kt");
        }

        @TestMetadata("notApplicableInnerClassInGenericOuterClass4.kt")
        public void testNotApplicableInnerClassInGenericOuterClass4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableInnerClassInGenericOuterClass4.kt");
        }

        @TestMetadata("notApplicableLocalFun.kt")
        public void testNotApplicableLocalFun() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableLocalFun.kt");
        }

        @TestMetadata("notApplicableLocalFun2.kt")
        public void testNotApplicableLocalFun2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableLocalFun2.kt");
        }

        @TestMetadata("notApplicableLocalFun3.kt")
        public void testNotApplicableLocalFun3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableLocalFun3.kt");
        }

        @TestMetadata("notApplicableLocalFun4.kt")
        public void testNotApplicableLocalFun4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableLocalFun4.kt");
        }

        @TestMetadata("notApplicableLocalVariable.kt")
        public void testNotApplicableLocalVariable() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableLocalVariable.kt");
        }

        @TestMetadata("notApplicableLocalVariable2.kt")
        public void testNotApplicableLocalVariable2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableLocalVariable2.kt");
        }

        @TestMetadata("notApplicableLocalVariable3.kt")
        public void testNotApplicableLocalVariable3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableLocalVariable3.kt");
        }

        @TestMetadata("notApplicableLocalVariable4.kt")
        public void testNotApplicableLocalVariable4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableLocalVariable4.kt");
        }

        @TestMetadata("notApplicableObject.kt")
        public void testNotApplicableObject() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableObject.kt");
        }

        @TestMetadata("notApplicableObject2.kt")
        public void testNotApplicableObject2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableObject2.kt");
        }

        @TestMetadata("notApplicableObject3.kt")
        public void testNotApplicableObject3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableObject3.kt");
        }

        @TestMetadata("notApplicableOuterClass.kt")
        public void testNotApplicableOuterClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableOuterClass.kt");
        }

        @TestMetadata("notApplicableSameNameVariable.kt")
        public void testNotApplicableSameNameVariable() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableSameNameVariable.kt");
        }

        @TestMetadata("notApplicableSameNameVariable2.kt")
        public void testNotApplicableSameNameVariable2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableSameNameVariable2.kt");
        }

        @TestMetadata("notApplicableSameNameVariableWithCopy.kt")
        public void testNotApplicableSameNameVariableWithCopy() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableSameNameVariableWithCopy.kt");
        }

        @TestMetadata("notApplicableThis.kt")
        public void testNotApplicableThis() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableThis.kt");
        }

        @TestMetadata("notApplicableTypeWithRuntime.kt")
        public void testNotApplicableTypeWithRuntime() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableTypeWithRuntime.kt");
        }

        @TestMetadata("notApplicableTypeWithRuntime2.kt")
        public void testNotApplicableTypeWithRuntime2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/notApplicableTypeWithRuntime2.kt");
        }

        @TestMetadata("objectCallChain.kt")
        public void testObjectCallChain() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/objectCallChain.kt");
        }

        @TestMetadata("receiver.kt")
        public void testReceiver() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/receiver.kt");
        }

        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/secondaryConstructor.kt");
        }

        @TestMetadata("superClass.kt")
        public void testSuperClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/superClass.kt");
        }

        @TestMetadata("superClass2.kt")
        public void testSuperClass2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/superClass2.kt");
        }

        @TestMetadata("superTypeEntry.kt")
        public void testSuperTypeEntry() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/superTypeEntry.kt");
        }

        @TestMetadata("type.kt")
        public void testType() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/type.kt");
        }

        @TestMetadata("type2.kt")
        public void testType2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/type2.kt");
        }

        @TestMetadata("typeWithAlias.kt")
        public void testTypeWithAlias() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/typeWithAlias.kt");
        }

        @TestMetadata("typeWithRuntime.kt")
        public void testTypeWithRuntime() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/typeWithRuntime.kt");
        }

        @TestMetadata("userTypeWithTypeParameter.kt")
        public void testUserTypeWithTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/userTypeWithTypeParameter.kt");
        }

        @TestMetadata("withTypeParameter.kt")
        public void testWithTypeParameter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeRedundantQualifierName/withTypeParameter.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes")
    public static class EqualsBetweenInconvertibleTypes extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("enumEqEnum.kt")
        public void testEnumEqEnum() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/enumEqEnum.kt");
        }

        @TestMetadata("enumEqEnum2.kt")
        public void testEnumEqEnum2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/enumEqEnum2.kt");
        }

        @TestMetadata("enumEqInt.kt")
        public void testEnumEqInt() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/enumEqInt.kt");
        }

        @TestMetadata("enumEqString.kt")
        public void testEnumEqString() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/enumEqString.kt");
        }

        @TestMetadata("enumEqUserType.kt")
        public void testEnumEqUserType() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/enumEqUserType.kt");
        }

        @TestMetadata("intEqEnum.kt")
        public void testIntEqEnum() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/intEqEnum.kt");
        }

        @TestMetadata("intEqInt.kt")
        public void testIntEqInt() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/intEqInt.kt");
        }

        @TestMetadata("intEqLong.kt")
        public void testIntEqLong() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/intEqLong.kt");
        }

        @TestMetadata("intEqString.kt")
        public void testIntEqString() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/intEqString.kt");
        }

        @TestMetadata("intEqUserType.kt")
        public void testIntEqUserType() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/intEqUserType.kt");
        }

        @TestMetadata("nullableEnumEqString.kt")
        public void testNullableEnumEqString() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/nullableEnumEqString.kt");
        }

        @TestMetadata("nullableIntEqString.kt")
        public void testNullableIntEqString() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/nullableIntEqString.kt");
        }

        @TestMetadata("nullableStringEqInt.kt")
        public void testNullableStringEqInt() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/nullableStringEqInt.kt");
        }

        @TestMetadata("nullableStringEqString.kt")
        public void testNullableStringEqString() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/nullableStringEqString.kt");
        }

        @TestMetadata("stringEqEnum.kt")
        public void testStringEqEnum() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/stringEqEnum.kt");
        }

        @TestMetadata("stringEqInt.kt")
        public void testStringEqInt() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/stringEqInt.kt");
        }

        @TestMetadata("stringEqNullableEnum.kt")
        public void testStringEqNullableEnum() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/stringEqNullableEnum.kt");
        }

        @TestMetadata("stringEqNullableInt.kt")
        public void testStringEqNullableInt() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/stringEqNullableInt.kt");
        }

        @TestMetadata("stringEqNullableString.kt")
        public void testStringEqNullableString() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/stringEqNullableString.kt");
        }

        @TestMetadata("stringEqString.kt")
        public void testStringEqString() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/stringEqString.kt");
        }

        @TestMetadata("stringEqUserType.kt")
        public void testStringEqUserType() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/stringEqUserType.kt");
        }

        @TestMetadata("userTypeEqInt.kt")
        public void testUserTypeEqInt() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/equalsBetweenInconvertibleTypes/userTypeEqInt.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/inspectionsLocal")
    public abstract static class InspectionsLocal extends AbstractK2LocalInspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/destructuringWrongNameInspection")
        public static class DestructuringWrongNameInspection extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("flexibleTypeDestructuring.kt")
            public void testFlexibleTypeDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/flexibleTypeDestructuring.kt");
            }

            @TestMetadata("forDestructuring.kt")
            public void testForDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/forDestructuring.kt");
            }

            @TestMetadata("fullDestructuring.kt")
            public void testFullDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/fullDestructuring.kt");
            }

            @TestMetadata("hasSyntheticComponent.kt")
            public void testHasSyntheticComponent() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/hasSyntheticComponent.kt");
            }

            @TestMetadata("lambdaDestructuring.kt")
            public void testLambdaDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/lambdaDestructuring.kt");
            }

            @TestMetadata("nonDataClass.kt")
            public void testNonDataClass() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/nonDataClass.kt");
            }

            @TestMetadata("nullableDataClass.kt")
            public void testNullableDataClass() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/nullableDataClass.kt");
            }

            @TestMetadata("partialDestructuring.kt")
            public void testPartialDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/partialDestructuring.kt");
            }

            @TestMetadata("wrongNameForSyntheticComponent.kt")
            public void testWrongNameForSyntheticComponent() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/wrongNameForSyntheticComponent.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/liftOut")
        public abstract static class LiftOut extends AbstractK2LocalInspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/inspectionsLocal/liftOut/liftToAssignment")
            public static class LiftToAssignment extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("hasNull7.kt")
                public void testHasNull7() throws Exception {
                    runTest("testData/inspectionsLocal/liftOut/liftToAssignment/hasNull7.kt");
                }

                @TestMetadata("operatorFunWithTypeParam.kt")
                public void testOperatorFunWithTypeParam() throws Exception {
                    runTest("testData/inspectionsLocal/liftOut/liftToAssignment/operatorFunWithTypeParam.kt");
                }

                @TestMetadata("plusAssignOperatorForNullArgument.kt")
                public void testPlusAssignOperatorForNullArgument() throws Exception {
                    runTest("testData/inspectionsLocal/liftOut/liftToAssignment/plusAssignOperatorForNullArgument.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/mainFunctionReturnUnit")
        public abstract static class MainFunctionReturnUnit extends AbstractK2LocalInspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/inspectionsLocal/mainFunctionReturnUnit/insideClass")
            public static class InsideClass extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideClass/simple.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject")
            public static class InsideObject extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("companion.kt")
                public void testCompanion() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/companion.kt");
                }

                @TestMetadata("companionNamed.kt")
                public void testCompanionNamed() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/companionNamed.kt");
                }

                @TestMetadata("correct.kt")
                public void testCorrect() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/correct.kt");
                }

                @TestMetadata("correctVararg.kt")
                public void testCorrectVararg() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/correctVararg.kt");
                }

                @TestMetadata("nested.kt")
                public void testNested() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/nested.kt");
                }

                @TestMetadata("noAnnnotation.kt")
                public void testNoAnnnotation() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/noAnnnotation.kt");
                }

                @TestMetadata("noArguments.kt")
                public void testNoArguments() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/noArguments.kt");
                }

                @TestMetadata("objectLiteral.kt")
                public void testObjectLiteral() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/objectLiteral.kt");
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/simple.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel")
            public static class TopLevel extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("annotatedReturnType.kt")
                public void testAnnotatedReturnType() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/annotatedReturnType.kt");
                }

                @TestMetadata("correct.kt")
                public void testCorrect() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/correct.kt");
                }

                @TestMetadata("correctWithArgument.kt")
                public void testCorrectWithArgument() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/correctWithArgument.kt");
                }

                @TestMetadata("correctWithArgumentVararg.kt")
                public void testCorrectWithArgumentVararg() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/correctWithArgumentVararg.kt");
                }

                @TestMetadata("differentArgumentType.kt")
                public void testDifferentArgumentType() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/differentArgumentType.kt");
                }

                @TestMetadata("differentName.kt")
                public void testDifferentName() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/differentName.kt");
                }

                @TestMetadata("extension.kt")
                public void testExtension() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/extension.kt");
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/simple.kt");
                }

                @TestMetadata("withArgument.kt")
                public void testWithArgument() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/withArgument.kt");
                }

                @TestMetadata("withArgumentVararg.kt")
                public void testWithArgumentVararg() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/withArgumentVararg.kt");
                }

                @TestMetadata("withMultipleArguments.kt")
                public void testWithMultipleArguments() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/withMultipleArguments.kt");
                }

                @TestMetadata("withNullableArgument.kt")
                public void testWithNullableArgument() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/withNullableArgument.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/redundantModalityModifier")
        public static class RedundantModalityModifier extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("abstractFunctionInAbstractClass.kt")
            public void testAbstractFunctionInAbstractClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/abstractFunctionInAbstractClass.kt");
            }

            @TestMetadata("finalFunctionInAbstractDerivedClass.kt")
            public void testFinalFunctionInAbstractDerivedClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/finalFunctionInAbstractDerivedClass.kt");
            }

            @TestMetadata("finalFunctionInOpenDerivedClass.kt")
            public void testFinalFunctionInOpenDerivedClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/finalFunctionInOpenDerivedClass.kt");
            }

            @TestMetadata("finalValueInAbstractDerivedClass.kt")
            public void testFinalValueInAbstractDerivedClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/finalValueInAbstractDerivedClass.kt");
            }

            @TestMetadata("openValueInAbstractClass.kt")
            public void testOpenValueInAbstractClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/openValueInAbstractClass.kt");
            }

            @TestMetadata("redundantAbstractFunctionInInterface.kt")
            public void testRedundantAbstractFunctionInInterface() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantAbstractFunctionInInterface.kt");
            }

            @TestMetadata("redundantAbstractInterface.kt")
            public void testRedundantAbstractInterface() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantAbstractInterface.kt");
            }

            @TestMetadata("redundantFinalClass.kt")
            public void testRedundantFinalClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantFinalClass.kt");
            }

            @TestMetadata("redundantFinalFunctionInAbstractClass.kt")
            public void testRedundantFinalFunctionInAbstractClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantFinalFunctionInAbstractClass.kt");
            }

            @TestMetadata("redundantFinalFunctionInFinalDerivedClass.kt")
            public void testRedundantFinalFunctionInFinalDerivedClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantFinalFunctionInFinalDerivedClass.kt");
            }

            @TestMetadata("redundantFinalObject.kt")
            public void testRedundantFinalObject() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantFinalObject.kt");
            }

            @TestMetadata("redundantOpenFunctionInAbstractDerivedClass.kt")
            public void testRedundantOpenFunctionInAbstractDerivedClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantOpenFunctionInAbstractDerivedClass.kt");
            }

            @TestMetadata("redundantOpenFunctionInDerivedInterface.kt")
            public void testRedundantOpenFunctionInDerivedInterface() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantOpenFunctionInDerivedInterface.kt");
            }

            @TestMetadata("redundantOpenFunctionInInterface.kt")
            public void testRedundantOpenFunctionInInterface() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantOpenFunctionInInterface.kt");
            }

            @TestMetadata("redundantOpenInterface.kt")
            public void testRedundantOpenInterface() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantOpenInterface.kt");
            }

            @TestMetadata("redundantOpenValueInAbstractDerivedClass.kt")
            public void testRedundantOpenValueInAbstractDerivedClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantOpenValueInAbstractDerivedClass.kt");
            }

            @TestMetadata("redundantOpenValueInInterface.kt")
            public void testRedundantOpenValueInInterface() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantOpenValueInInterface.kt");
            }

            @TestMetadata("redundantOpenValueInOpenDerivedClass.kt")
            public void testRedundantOpenValueInOpenDerivedClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantModalityModifier/redundantOpenValueInOpenDerivedClass.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/redundantVisibilityModifierFir")
        public static class RedundantVisibilityModifierFir extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("publicFunInPublicClass.kt")
            public void testPublicFunInPublicClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantVisibilityModifierFir/publicFunInPublicClass.kt");
            }

            @TestMetadata("publicValInPublicClass.kt")
            public void testPublicValInPublicClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantVisibilityModifierFir/publicValInPublicClass.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/removeRedundantQualifierName")
        public static class RemoveRedundantQualifierName extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("builtInType.kt")
            public void testBuiltInType() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/builtInType.kt");
            }

            @TestMetadata("companion.kt")
            public void testCompanion() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/companion.kt");
            }

            @TestMetadata("companionOnClass.kt")
            public void testCompanionOnClass() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/companionOnClass.kt");
            }

            @TestMetadata("companionWithName.kt")
            public void testCompanionWithName() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/companionWithName.kt");
            }

            @TestMetadata("dropImportedQualifier.kt")
            public void testDropImportedQualifier() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/dropImportedQualifier.kt");
            }

            @TestMetadata("expression.kt")
            public void testExpression() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/expression.kt");
            }

            @TestMetadata("expression2.kt")
            public void testExpression2() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/expression2.kt");
            }

            @TestMetadata("expressionWithParameter.kt")
            public void testExpressionWithParameter() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/expressionWithParameter.kt");
            }

            @TestMetadata("innerClassWithImport.kt")
            public void testInnerClassWithImport() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/innerClassWithImport.kt");
            }

            @TestMetadata("propertyDefinedInCompanion.kt")
            public void testPropertyDefinedInCompanion() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/propertyDefinedInCompanion.kt");
            }

            @TestMetadata("secondaryConstructor.kt")
            public void testSecondaryConstructor() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/secondaryConstructor.kt");
            }

            @TestMetadata("type.kt")
            public void testType() throws Exception {
                runTest("testData/inspectionsLocal/removeRedundantQualifierName/type.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/removeSingleExpressionStringTemplate")
        public static class RemoveSingleExpressionStringTemplate extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("emptyString.kt")
            public void testEmptyString() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/emptyString.kt");
            }

            @TestMetadata("justString.kt")
            public void testJustString() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/justString.kt");
            }

            @TestMetadata("multipleStringTemplate.kt")
            public void testMultipleStringTemplate() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/multipleStringTemplate.kt");
            }

            @TestMetadata("singleExpressionStringTemplate.kt")
            public void testSingleExpressionStringTemplate() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/singleExpressionStringTemplate.kt");
            }

            @TestMetadata("singleExpressionStringTemplateWithMethodCall.kt")
            public void testSingleExpressionStringTemplateWithMethodCall() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/singleExpressionStringTemplateWithMethodCall.kt");
            }

            @TestMetadata("singleExpressionStringTemplateWithNonStringType.kt")
            public void testSingleExpressionStringTemplateWithNonStringType() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/singleExpressionStringTemplateWithNonStringType.kt");
            }

            @TestMetadata("stringTemplateWithText.kt")
            public void testStringTemplateWithText() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/stringTemplateWithText.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/replaceCallWithBinaryOperator")
        public static class ReplaceCallWithBinaryOperator extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("compareToFromJava.kt")
            public void testCompareToFromJava() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/compareToFromJava.kt");
            }

            @TestMetadata("divSanityTest.kt")
            public void testDivSanityTest() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/divSanityTest.kt");
            }

            @TestMetadata("doubleFloat.kt")
            public void testDoubleFloat() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/doubleFloat.kt");
            }

            @TestMetadata("dynamicEquals.kt")
            public void testDynamicEquals() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/dynamicEquals.kt");
            }

            @TestMetadata("equals.kt")
            public void testEquals() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equals.kt");
            }

            @TestMetadata("equalsBetweenInconvertibleTypes.kt")
            public void testEqualsBetweenInconvertibleTypes() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsBetweenInconvertibleTypes.kt");
            }

            @TestMetadata("equalsCompareTo.kt")
            public void testEqualsCompareTo() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsCompareTo.kt");
            }

            @TestMetadata("equalsDoubleSmartCast.kt")
            public void testEqualsDoubleSmartCast() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsDoubleSmartCast.kt");
            }

            @TestMetadata("equalsDoubleSmartCast2.kt")
            public void testEqualsDoubleSmartCast2() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsDoubleSmartCast2.kt");
            }

            @TestMetadata("equalsDoubleSmartCast3.kt")
            public void testEqualsDoubleSmartCast3() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsDoubleSmartCast3.kt");
            }

            @TestMetadata("equalsDoubleSmartCastFromGeneric.kt")
            public void testEqualsDoubleSmartCastFromGeneric() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsDoubleSmartCastFromGeneric.kt");
            }

            @TestMetadata("equalsExtensionFunction.kt")
            public void testEqualsExtensionFunction() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsExtensionFunction.kt");
            }

            @TestMetadata("equalsFloatSmartCast.kt")
            public void testEqualsFloatSmartCast() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsFloatSmartCast.kt");
            }

            @TestMetadata("equalsFloatingPointLiteral1.kt")
            public void testEqualsFloatingPointLiteral1() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsFloatingPointLiteral1.kt");
            }

            @TestMetadata("equalsFloatingPointLiteral2.kt")
            public void testEqualsFloatingPointLiteral2() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsFloatingPointLiteral2.kt");
            }

            @TestMetadata("equalsFloatingPointType.kt")
            public void testEqualsFloatingPointType() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/equalsFloatingPointType.kt");
            }

            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/extensionFunction.kt");
            }

            @TestMetadata("functionLiteralArgument.kt")
            public void testFunctionLiteralArgument() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/functionLiteralArgument.kt");
            }

            @TestMetadata("greater.kt")
            public void testGreater() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/greater.kt");
            }

            @TestMetadata("lessEquals.kt")
            public void testLessEquals() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/lessEquals.kt");
            }

            @TestMetadata("minusSanityTest.kt")
            public void testMinusSanityTest() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/minusSanityTest.kt");
            }

            @TestMetadata("missingDefaultArgument.kt")
            public void testMissingDefaultArgument() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/missingDefaultArgument.kt");
            }

            @TestMetadata("modSanityTest.kt")
            public void testModSanityTest() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/modSanityTest.kt");
            }

            @TestMetadata("multipleArguments.kt")
            public void testMultipleArguments() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/multipleArguments.kt");
            }

            @TestMetadata("notEquals.kt")
            public void testNotEquals() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/notEquals.kt");
            }

            @TestMetadata("notEqualsBrackets.kt")
            public void testNotEqualsBrackets() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/notEqualsBrackets.kt");
            }

            @TestMetadata("notEqualsBracketsComplex.kt")
            public void testNotEqualsBracketsComplex() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/notEqualsBracketsComplex.kt");
            }

            @TestMetadata("notOperatorCompareTo.kt")
            public void testNotOperatorCompareTo() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/notOperatorCompareTo.kt");
            }

            @TestMetadata("notOperatorPlus.kt")
            public void testNotOperatorPlus() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/notOperatorPlus.kt");
            }

            @TestMetadata("operatorCannotBeApplied.kt")
            public void testOperatorCannotBeApplied() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/operatorCannotBeApplied.kt");
            }

            @TestMetadata("platformTypeEquals.kt")
            public void testPlatformTypeEquals() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/platformTypeEquals.kt");
            }

            @TestMetadata("plusDouble.kt")
            public void testPlusDouble() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/plusDouble.kt");
            }

            @TestMetadata("plusFromJava.kt")
            public void testPlusFromJava() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/plusFromJava.kt");
            }

            @TestMetadata("plusSanityTest.kt")
            public void testPlusSanityTest() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/plusSanityTest.kt");
            }

            @TestMetadata("qualifier.kt")
            public void testQualifier() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/qualifier.kt");
            }

            @TestMetadata("rangeToSanityTest.kt")
            public void testRangeToSanityTest() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/rangeToSanityTest.kt");
            }

            @TestMetadata("remSanityTest.kt")
            public void testRemSanityTest() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/remSanityTest.kt");
            }

            @TestMetadata("safeCompareTo.kt")
            public void testSafeCompareTo() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/safeCompareTo.kt");
            }

            @TestMetadata("super.kt")
            public void testSuper() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/super.kt");
            }

            @TestMetadata("timesSanityTest.kt")
            public void testTimesSanityTest() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/timesSanityTest.kt");
            }

            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/typeArguments.kt");
            }

            @TestMetadata("unacceptableVararg1.kt")
            public void testUnacceptableVararg1() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/unacceptableVararg1.kt");
            }

            @TestMetadata("unacceptableVararg2.kt")
            public void testUnacceptableVararg2() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/unacceptableVararg2.kt");
            }

            @TestMetadata("validNamedArgument.kt")
            public void testValidNamedArgument() throws Exception {
                runTest("testData/inspectionsLocal/replaceCallWithBinaryOperator/validNamedArgument.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty")
        public static class ReplaceSizeCheckWithIsNotEmpty extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/array.kt");
            }

            @TestMetadata("charSequence.kt")
            public void testCharSequence() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/charSequence.kt");
            }

            @TestMetadata("collection.kt")
            public void testCollection() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/collection.kt");
            }

            @TestMetadata("collectionSubtype.kt")
            public void testCollectionSubtype() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/collectionSubtype.kt");
            }

            @TestMetadata("extensionReceiver.kt")
            public void testExtensionReceiver() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/extensionReceiver.kt");
            }

            @TestMetadata("flexibleType.kt")
            public void testFlexibleType() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/flexibleType.kt");
            }

            @TestMetadata("iterableCount.kt")
            public void testIterableCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/iterableCount.kt");
            }

            @TestMetadata("iterableCountWithPredicate.kt")
            public void testIterableCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/iterableCountWithPredicate.kt");
            }

            @TestMetadata("list.kt")
            public void testList() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/list.kt");
            }

            @TestMetadata("listCountWithPredicate.kt")
            public void testListCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/listCountWithPredicate.kt");
            }

            @TestMetadata("map.kt")
            public void testMap() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/map.kt");
            }

            @TestMetadata("mutableList.kt")
            public void testMutableList() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/mutableList.kt");
            }

            @TestMetadata("primitiveArray.kt")
            public void testPrimitiveArray() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/primitiveArray.kt");
            }

            @TestMetadata("progressionCount.kt")
            public void testProgressionCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/progressionCount.kt");
            }

            @TestMetadata("rangeCount.kt")
            public void testRangeCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/rangeCount.kt");
            }

            @TestMetadata("rangeCountWithPredicate.kt")
            public void testRangeCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/rangeCountWithPredicate.kt");
            }

            @TestMetadata("string.kt")
            public void testString() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/string.kt");
            }

            @TestMetadata("thisReceiver.kt")
            public void testThisReceiver() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/thisReceiver.kt");
            }

            @TestMetadata("typeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/typeAlias.kt");
            }

            @TestMetadata("unsupportedSize.kt")
            public void testUnsupportedSize() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/unsupportedSize.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty")
        public static class ReplaceSizeZeroCheckWithIsEmpty extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/array.kt");
            }

            @TestMetadata("charSequence.kt")
            public void testCharSequence() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/charSequence.kt");
            }

            @TestMetadata("collection.kt")
            public void testCollection() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/collection.kt");
            }

            @TestMetadata("collectionSubtype.kt")
            public void testCollectionSubtype() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/collectionSubtype.kt");
            }

            @TestMetadata("extensionReceiver.kt")
            public void testExtensionReceiver() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/extensionReceiver.kt");
            }

            @TestMetadata("flexibleType.kt")
            public void testFlexibleType() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/flexibleType.kt");
            }

            @TestMetadata("iterableCount.kt")
            public void testIterableCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/iterableCount.kt");
            }

            @TestMetadata("iterableCountWithPredicate.kt")
            public void testIterableCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/iterableCountWithPredicate.kt");
            }

            @TestMetadata("list.kt")
            public void testList() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/list.kt");
            }

            @TestMetadata("listCountWithPredicate.kt")
            public void testListCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/listCountWithPredicate.kt");
            }

            @TestMetadata("map.kt")
            public void testMap() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/map.kt");
            }

            @TestMetadata("mutableList.kt")
            public void testMutableList() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/mutableList.kt");
            }

            @TestMetadata("primitiveArray.kt")
            public void testPrimitiveArray() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/primitiveArray.kt");
            }

            @TestMetadata("progressionCount.kt")
            public void testProgressionCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/progressionCount.kt");
            }

            @TestMetadata("rangeCount.kt")
            public void testRangeCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/rangeCount.kt");
            }

            @TestMetadata("rangeCountWithPredicate.kt")
            public void testRangeCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/rangeCountWithPredicate.kt");
            }

            @TestMetadata("string.kt")
            public void testString() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/string.kt");
            }

            @TestMetadata("thisReceiver.kt")
            public void testThisReceiver() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/thisReceiver.kt");
            }

            @TestMetadata("typeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/typeAlias.kt");
            }

            @TestMetadata("unsupportedSize.kt")
            public void testUnsupportedSize() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/unsupportedSize.kt");
            }
        }
    }
}
