// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.intentions.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2LocalInspectionTestGenerated extends AbstractK2LocalInspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/unusedVariable")
    public static class UnusedVariable extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("unusedVariableInDestructuringDeclaration.kt")
        public void testUnusedVariableInDestructuringDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableInDestructuringDeclaration.kt");
        }

        @TestMetadata("unusedVariableWithAnonymousFunctionInitialize1.kt")
        public void testUnusedVariableWithAnonymousFunctionInitialize1() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithAnonymousFunctionInitialize1.kt");
        }

        @TestMetadata("unusedVariableWithAnonymousFunctionInitialize2.kt")
        public void testUnusedVariableWithAnonymousFunctionInitialize2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithAnonymousFunctionInitialize2.kt");
        }

        @TestMetadata("unusedVariableWithConstantInitializer.kt")
        public void testUnusedVariableWithConstantInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithConstantInitializer.kt");
        }

        @TestMetadata("unusedVariableWithInitializer.kt")
        public void testUnusedVariableWithInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithInitializer.kt");
        }

        @TestMetadata("unusedVariableWithInitializerAndComment.kt")
        public void testUnusedVariableWithInitializerAndComment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithInitializerAndComment.kt");
        }

        @TestMetadata("unusedVariableWithLambdaInitializer1.kt")
        public void testUnusedVariableWithLambdaInitializer1() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithLambdaInitializer1.kt");
        }

        @TestMetadata("unusedVariableWithLambdaInitializer2.kt")
        public void testUnusedVariableWithLambdaInitializer2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithLambdaInitializer2.kt");
        }

        @TestMetadata("unusedVariableWithNullInitializer.kt")
        public void testUnusedVariableWithNullInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithNullInitializer.kt");
        }

        @TestMetadata("unusedVariableWithoutInitializer.kt")
        public void testUnusedVariableWithoutInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithoutInitializer.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier")
    public static class RedundantVisibilityModifier extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("internalInPrivateClass.kt")
        public void testInternalInPrivateClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/internalInPrivateClass.kt");
        }

        @TestMetadata("onlyPrivateIsOkForSealedConstructor.kt")
        public void testOnlyPrivateIsOkForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/onlyPrivateIsOkForSealedConstructor.kt");
        }

        @TestMetadata("overridePropertySetter.kt")
        public void testOverridePropertySetter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/overridePropertySetter.kt");
        }

        @TestMetadata("privateIsDefaultForSealedConstructor.kt")
        public void testPrivateIsDefaultForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/privateIsDefaultForSealedConstructor.kt");
        }

        @TestMetadata("privateIsOkForSealedConstructor.kt")
        public void testPrivateIsOkForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/privateIsOkForSealedConstructor.kt");
        }

        @TestMetadata("protectedIsDefaultForSealedConstructor.kt")
        public void testProtectedIsDefaultForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/protectedIsDefaultForSealedConstructor.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter.kt")
        public void testPublicOverrideProtectedSetter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter2.kt")
        public void testPublicOverrideProtectedSetter2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter2.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter3.kt")
        public void testPublicOverrideProtectedSetter3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter3.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter4.kt")
        public void testPublicOverrideProtectedSetter4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter4.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter5.kt")
        public void testPublicOverrideProtectedSetter5() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter5.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter6.kt")
        public void testPublicOverrideProtectedSetter6() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter6.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/implicitThis")
    public static class ImplicitThis extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("already.kt")
        public void testAlready() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/already.kt");
        }

        @TestMetadata("callVariableAsFunction.kt")
        public void testCallVariableAsFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/callVariableAsFunction.kt");
        }

        @TestMetadata("callVariableAsFunction2.kt")
        public void testCallVariableAsFunction2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/callVariableAsFunction2.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/function.kt");
        }

        @TestMetadata("functionPartOfCall.kt")
        public void testFunctionPartOfCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/functionPartOfCall.kt");
        }

        @TestMetadata("functionReference.kt")
        public void testFunctionReference() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/functionReference.kt");
        }

        @TestMetadata("functionWithReceiver.kt")
        public void testFunctionWithReceiver() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/functionWithReceiver.kt");
        }

        @TestMetadata("multipleReceivers.kt")
        public void testMultipleReceivers() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/multipleReceivers.kt");
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/nested.kt");
        }

        @TestMetadata("nestedCall.kt")
        public void testNestedCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/nestedCall.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/property.kt");
        }

        @TestMetadata("propertyPartOfCall.kt")
        public void testPropertyPartOfCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/propertyPartOfCall.kt");
        }

        @TestMetadata("propertyReference.kt")
        public void testPropertyReference() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/propertyReference.kt");
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/topLevel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/doubleNegation")
    public static class DoubleNegation extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/function.kt");
        }

        @TestMetadata("invalid.kt")
        public void testInvalid() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/invalid.kt");
        }

        @TestMetadata("parenthesized.kt")
        public void testParenthesized() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/parenthesized.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet")
    public static class ReplaceGetOrSet extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("acceptableVararg.kt")
        public void testAcceptableVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/acceptableVararg.kt");
        }

        @TestMetadata("argumentAndFunction.kt")
        public void testArgumentAndFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/argumentAndFunction.kt");
        }

        @TestMetadata("duplicateArguments.kt")
        public void testDuplicateArguments() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/duplicateArguments.kt");
        }

        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/extensionFunction.kt");
        }

        @TestMetadata("functionalArgument.kt")
        public void testFunctionalArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/functionalArgument.kt");
        }

        @TestMetadata("getWithSpread.kt")
        public void testGetWithSpread() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/getWithSpread.kt");
        }

        @TestMetadata("getWithSpread2.kt")
        public void testGetWithSpread2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/getWithSpread2.kt");
        }

        @TestMetadata("invalidArgument.kt")
        public void testInvalidArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/invalidArgument.kt");
        }

        @TestMetadata("missingDefaultArgument.kt")
        public void testMissingDefaultArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/missingDefaultArgument.kt");
        }

        @TestMetadata("multiArgument.kt")
        public void testMultiArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/multiArgument.kt");
        }

        @TestMetadata("noArgument.kt")
        public void testNoArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/noArgument.kt");
        }

        @TestMetadata("notOperator.kt")
        public void testNotOperator() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/notOperator.kt");
        }

        @TestMetadata("qualifier.kt")
        public void testQualifier() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/qualifier.kt");
        }

        @TestMetadata("sanityCheck.kt")
        public void testSanityCheck() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/sanityCheck.kt");
        }

        @TestMetadata("set.kt")
        public void testSet() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/set.kt");
        }

        @TestMetadata("set2.kt")
        public void testSet2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/set2.kt");
        }

        @TestMetadata("setValueUsed.kt")
        public void testSetValueUsed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setValueUsed.kt");
        }

        @TestMetadata("setWithNoParameters.kt")
        public void testSetWithNoParameters() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setWithNoParameters.kt");
        }

        @TestMetadata("setWithVararg.kt")
        public void testSetWithVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setWithVararg.kt");
        }

        @TestMetadata("singleArgument.kt")
        public void testSingleArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/singleArgument.kt");
        }

        @TestMetadata("staticMethod.kt")
        public void testStaticMethod() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/staticMethod.kt");
        }

        @TestMetadata("super.kt")
        public void testSuper() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/super.kt");
        }

        @TestMetadata("topLevelFun.kt")
        public void testTopLevelFun() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/topLevelFun.kt");
        }

        @TestMetadata("unacceptableVararg.kt")
        public void testUnacceptableVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/unacceptableVararg.kt");
        }

        @TestMetadata("unnamedAndNamed.kt")
        public void testUnnamedAndNamed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/unnamedAndNamed.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis")
    public static class NullableBooleanElvis extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inIf.kt")
        public void testInIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIf.kt");
        }

        @TestMetadata("inIf2.kt")
        public void testInIf2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIf2.kt");
        }

        @TestMetadata("inIf3.kt")
        public void testInIf3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIf3.kt");
        }

        @TestMetadata("inIfWithBinaryExpression.kt")
        public void testInIfWithBinaryExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithBinaryExpression.kt");
        }

        @TestMetadata("inIfWithCallExpression.kt")
        public void testInIfWithCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithCallExpression.kt");
        }

        @TestMetadata("inIfWithIfExpression.kt")
        public void testInIfWithIfExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithIfExpression.kt");
        }

        @TestMetadata("inIfWithNullableCallExpression.kt")
        public void testInIfWithNullableCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithNullableCallExpression.kt");
        }

        @TestMetadata("notInIf.kt")
        public void testNotInIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/notInIf.kt");
        }

        @TestMetadata("notInIfWithThisExpression.kt")
        public void testNotInIfWithThisExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/notInIfWithThisExpression.kt");
        }

        @TestMetadata("notInIfWithTrue.kt")
        public void testNotInIfWithTrue() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/notInIfWithTrue.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull")
    public static class RedundantElvisReturnNull extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/basic.kt");
        }

        @TestMetadata("notInReturn.kt")
        public void testNotInReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/notInReturn.kt");
        }

        @TestMetadata("notReturnNull.kt")
        public void testNotReturnNull() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/notReturnNull.kt");
        }

        @TestMetadata("uselessElvis.kt")
        public void testUselessElvis() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/uselessElvis.kt");
        }

        @TestMetadata("withParenthesis.kt")
        public void testWithParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/withParenthesis.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/inspectionsLocal")
    public abstract static class InspectionsLocal extends AbstractK2LocalInspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/redundantVisibilityModifierFir")
        public static class RedundantVisibilityModifierFir extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("publicFunInPublicClass.kt")
            public void testPublicFunInPublicClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantVisibilityModifierFir/publicFunInPublicClass.kt");
            }

            @TestMetadata("publicValInPublicClass.kt")
            public void testPublicValInPublicClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantVisibilityModifierFir/publicValInPublicClass.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/removeSingleExpressionStringTemplate")
        public static class RemoveSingleExpressionStringTemplate extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("emptyString.kt")
            public void testEmptyString() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/emptyString.kt");
            }

            @TestMetadata("justString.kt")
            public void testJustString() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/justString.kt");
            }

            @TestMetadata("multipleStringTemplate.kt")
            public void testMultipleStringTemplate() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/multipleStringTemplate.kt");
            }

            @TestMetadata("singleExpressionStringTemplate.kt")
            public void testSingleExpressionStringTemplate() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/singleExpressionStringTemplate.kt");
            }

            @TestMetadata("singleExpressionStringTemplateWithMethodCall.kt")
            public void testSingleExpressionStringTemplateWithMethodCall() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/singleExpressionStringTemplateWithMethodCall.kt");
            }

            @TestMetadata("singleExpressionStringTemplateWithNonStringType.kt")
            public void testSingleExpressionStringTemplateWithNonStringType() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/singleExpressionStringTemplateWithNonStringType.kt");
            }

            @TestMetadata("stringTemplateWithText.kt")
            public void testStringTemplateWithText() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/stringTemplateWithText.kt");
            }
        }
    }
}
