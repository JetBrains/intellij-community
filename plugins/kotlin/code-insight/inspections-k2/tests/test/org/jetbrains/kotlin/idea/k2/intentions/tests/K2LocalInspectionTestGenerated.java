// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.intentions.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2LocalInspectionTestGenerated extends AbstractK2LocalInspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/unusedVariable")
    public static class UnusedVariable extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("unusedVariableInDestructuringDeclaration.kt")
        public void testUnusedVariableInDestructuringDeclaration() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableInDestructuringDeclaration.kt");
        }

        @TestMetadata("unusedVariableWithAnonymousFunctionInitialize1.kt")
        public void testUnusedVariableWithAnonymousFunctionInitialize1() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithAnonymousFunctionInitialize1.kt");
        }

        @TestMetadata("unusedVariableWithAnonymousFunctionInitialize2.kt")
        public void testUnusedVariableWithAnonymousFunctionInitialize2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithAnonymousFunctionInitialize2.kt");
        }

        @TestMetadata("unusedVariableWithConstantInitializer.kt")
        public void testUnusedVariableWithConstantInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithConstantInitializer.kt");
        }

        @TestMetadata("unusedVariableWithInitializer.kt")
        public void testUnusedVariableWithInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithInitializer.kt");
        }

        @TestMetadata("unusedVariableWithInitializerAndComment.kt")
        public void testUnusedVariableWithInitializerAndComment() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithInitializerAndComment.kt");
        }

        @TestMetadata("unusedVariableWithLambdaInitializer1.kt")
        public void testUnusedVariableWithLambdaInitializer1() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithLambdaInitializer1.kt");
        }

        @TestMetadata("unusedVariableWithLambdaInitializer2.kt")
        public void testUnusedVariableWithLambdaInitializer2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithLambdaInitializer2.kt");
        }

        @TestMetadata("unusedVariableWithNullInitializer.kt")
        public void testUnusedVariableWithNullInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithNullInitializer.kt");
        }

        @TestMetadata("unusedVariableWithoutInitializer.kt")
        public void testUnusedVariableWithoutInitializer() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/unusedVariable/unusedVariableWithoutInitializer.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier")
    public static class RedundantVisibilityModifier extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("internalInPrivateClass.kt")
        public void testInternalInPrivateClass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/internalInPrivateClass.kt");
        }

        @TestMetadata("onlyPrivateIsOkForSealedConstructor.kt")
        public void testOnlyPrivateIsOkForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/onlyPrivateIsOkForSealedConstructor.kt");
        }

        @TestMetadata("overridePropertySetter.kt")
        public void testOverridePropertySetter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/overridePropertySetter.kt");
        }

        @TestMetadata("privateIsDefaultForSealedConstructor.kt")
        public void testPrivateIsDefaultForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/privateIsDefaultForSealedConstructor.kt");
        }

        @TestMetadata("privateIsOkForSealedConstructor.kt")
        public void testPrivateIsOkForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/privateIsOkForSealedConstructor.kt");
        }

        @TestMetadata("protectedIsDefaultForSealedConstructor.kt")
        public void testProtectedIsDefaultForSealedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/protectedIsDefaultForSealedConstructor.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter.kt")
        public void testPublicOverrideProtectedSetter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter2.kt")
        public void testPublicOverrideProtectedSetter2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter2.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter3.kt")
        public void testPublicOverrideProtectedSetter3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter3.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter4.kt")
        public void testPublicOverrideProtectedSetter4() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter4.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter5.kt")
        public void testPublicOverrideProtectedSetter5() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter5.kt");
        }

        @TestMetadata("publicOverrideProtectedSetter6.kt")
        public void testPublicOverrideProtectedSetter6() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantVisibilityModifier/publicOverrideProtectedSetter6.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/implicitThis")
    public static class ImplicitThis extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("already.kt")
        public void testAlready() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/already.kt");
        }

        @TestMetadata("callVariableAsFunction.kt")
        public void testCallVariableAsFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/callVariableAsFunction.kt");
        }

        @TestMetadata("callVariableAsFunction2.kt")
        public void testCallVariableAsFunction2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/callVariableAsFunction2.kt");
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/function.kt");
        }

        @TestMetadata("functionPartOfCall.kt")
        public void testFunctionPartOfCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/functionPartOfCall.kt");
        }

        @TestMetadata("functionReference.kt")
        public void testFunctionReference() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/functionReference.kt");
        }

        @TestMetadata("functionWithReceiver.kt")
        public void testFunctionWithReceiver() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/functionWithReceiver.kt");
        }

        @TestMetadata("multipleReceivers.kt")
        public void testMultipleReceivers() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/multipleReceivers.kt");
        }

        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/nested.kt");
        }

        @TestMetadata("nestedCall.kt")
        public void testNestedCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/nestedCall.kt");
        }

        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/property.kt");
        }

        @TestMetadata("propertyPartOfCall.kt")
        public void testPropertyPartOfCall() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/propertyPartOfCall.kt");
        }

        @TestMetadata("propertyReference.kt")
        public void testPropertyReference() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/propertyReference.kt");
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/implicitThis/topLevel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/doubleNegation")
    public static class DoubleNegation extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/function.kt");
        }

        @TestMetadata("invalid.kt")
        public void testInvalid() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/invalid.kt");
        }

        @TestMetadata("parenthesized.kt")
        public void testParenthesized() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/parenthesized.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/doubleNegation/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet")
    public static class ReplaceGetOrSet extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("acceptableVararg.kt")
        public void testAcceptableVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/acceptableVararg.kt");
        }

        @TestMetadata("argumentAndFunction.kt")
        public void testArgumentAndFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/argumentAndFunction.kt");
        }

        @TestMetadata("duplicateArguments.kt")
        public void testDuplicateArguments() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/duplicateArguments.kt");
        }

        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/extensionFunction.kt");
        }

        @TestMetadata("functionalArgument.kt")
        public void testFunctionalArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/functionalArgument.kt");
        }

        @TestMetadata("getWithSpread.kt")
        public void testGetWithSpread() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/getWithSpread.kt");
        }

        @TestMetadata("getWithSpread2.kt")
        public void testGetWithSpread2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/getWithSpread2.kt");
        }

        @TestMetadata("invalidArgument.kt")
        public void testInvalidArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/invalidArgument.kt");
        }

        @TestMetadata("missingDefaultArgument.kt")
        public void testMissingDefaultArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/missingDefaultArgument.kt");
        }

        @TestMetadata("multiArgument.kt")
        public void testMultiArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/multiArgument.kt");
        }

        @TestMetadata("noArgument.kt")
        public void testNoArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/noArgument.kt");
        }

        @TestMetadata("notOperator.kt")
        public void testNotOperator() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/notOperator.kt");
        }

        @TestMetadata("qualifier.kt")
        public void testQualifier() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/qualifier.kt");
        }

        @TestMetadata("sanityCheck.kt")
        public void testSanityCheck() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/sanityCheck.kt");
        }

        @TestMetadata("set.kt")
        public void testSet() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/set.kt");
        }

        @TestMetadata("set2.kt")
        public void testSet2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/set2.kt");
        }

        @TestMetadata("setValueUsed.kt")
        public void testSetValueUsed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setValueUsed.kt");
        }

        @TestMetadata("setWithNoParameters.kt")
        public void testSetWithNoParameters() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setWithNoParameters.kt");
        }

        @TestMetadata("setWithVararg.kt")
        public void testSetWithVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/setWithVararg.kt");
        }

        @TestMetadata("singleArgument.kt")
        public void testSingleArgument() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/singleArgument.kt");
        }

        @TestMetadata("staticMethod.kt")
        public void testStaticMethod() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/staticMethod.kt");
        }

        @TestMetadata("super.kt")
        public void testSuper() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/super.kt");
        }

        @TestMetadata("topLevelFun.kt")
        public void testTopLevelFun() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/topLevelFun.kt");
        }

        @TestMetadata("unacceptableVararg.kt")
        public void testUnacceptableVararg() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/unacceptableVararg.kt");
        }

        @TestMetadata("unnamedAndNamed.kt")
        public void testUnnamedAndNamed() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/conventionNameCalls/replaceGetOrSet/unnamedAndNamed.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis")
    public static class NullableBooleanElvis extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inIf.kt")
        public void testInIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIf.kt");
        }

        @TestMetadata("inIf2.kt")
        public void testInIf2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIf2.kt");
        }

        @TestMetadata("inIf3.kt")
        public void testInIf3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIf3.kt");
        }

        @TestMetadata("inIfWithBinaryExpression.kt")
        public void testInIfWithBinaryExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithBinaryExpression.kt");
        }

        @TestMetadata("inIfWithCallExpression.kt")
        public void testInIfWithCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithCallExpression.kt");
        }

        @TestMetadata("inIfWithIfExpression.kt")
        public void testInIfWithIfExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithIfExpression.kt");
        }

        @TestMetadata("inIfWithNullableCallExpression.kt")
        public void testInIfWithNullableCallExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/inIfWithNullableCallExpression.kt");
        }

        @TestMetadata("notInIf.kt")
        public void testNotInIf() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/notInIf.kt");
        }

        @TestMetadata("notInIfWithThisExpression.kt")
        public void testNotInIfWithThisExpression() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/notInIfWithThisExpression.kt");
        }

        @TestMetadata("notInIfWithTrue.kt")
        public void testNotInIfWithTrue() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/nullableBooleanElvis/notInIfWithTrue.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull")
    public static class RedundantElvisReturnNull extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/basic.kt");
        }

        @TestMetadata("notInReturn.kt")
        public void testNotInReturn() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/notInReturn.kt");
        }

        @TestMetadata("notReturnNull.kt")
        public void testNotReturnNull() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/notReturnNull.kt");
        }

        @TestMetadata("uselessElvis.kt")
        public void testUselessElvis() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/uselessElvis.kt");
        }

        @TestMetadata("withParenthesis.kt")
        public void testWithParenthesis() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/redundantElvisReturnNull/withParenthesis.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize")
    public static class ReplaceCollectionCountWithSize extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("countInBlock.kt")
        public void testCountInBlock() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countInBlock.kt");
        }

        @TestMetadata("countOfArray.kt")
        public void testCountOfArray() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfArray.kt");
        }

        @TestMetadata("countOfArrayWithPredicate.kt")
        public void testCountOfArrayWithPredicate() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfArrayWithPredicate.kt");
        }

        @TestMetadata("countOfCollection.kt")
        public void testCountOfCollection() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfCollection.kt");
        }

        @TestMetadata("countOfIterable.kt")
        public void testCountOfIterable() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfIterable.kt");
        }

        @TestMetadata("countOfIterable2.kt")
        public void testCountOfIterable2() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfIterable2.kt");
        }

        @TestMetadata("countOfIterable3.kt")
        public void testCountOfIterable3() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfIterable3.kt");
        }

        @TestMetadata("countOfIterableSubclass.kt")
        public void testCountOfIterableSubclass() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfIterableSubclass.kt");
        }

        @TestMetadata("countOfMap.kt")
        public void testCountOfMap() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfMap.kt");
        }

        @TestMetadata("countOfPrimitiveArray.kt")
        public void testCountOfPrimitiveArray() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/countOfPrimitiveArray.kt");
        }

        @TestMetadata("differentCount.kt")
        public void testDifferentCount() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/replaceCollectionCountWithSize/differentCount.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate")
    public static class RemoveToStringInStringTemplate extends AbstractK2LocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("caretInReceiver.kt")
        public void testCaretInReceiver() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/caretInReceiver.kt");
        }

        @TestMetadata("caretInSelector.kt")
        public void testCaretInSelector() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/caretInSelector.kt");
        }

        @TestMetadata("extensionToString.kt")
        public void testExtensionToString() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/extensionToString.kt");
        }

        @TestMetadata("extensionToStringWithParameter.kt")
        public void testExtensionToStringWithParameter() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/extensionToStringWithParameter.kt");
        }

        @TestMetadata("nameReference.kt")
        public void testNameReference() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/nameReference.kt");
        }

        @TestMetadata("super.kt")
        public void testSuper() throws Exception {
            runTest("../../../idea/tests/testData/inspectionsLocal/removeToStringInStringTemplate/super.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/inspectionsLocal")
    public abstract static class InspectionsLocal extends AbstractK2LocalInspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/destructuringWrongNameInspection")
        public static class DestructuringWrongNameInspection extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("flexibleTypeDestructuring.kt")
            public void testFlexibleTypeDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/flexibleTypeDestructuring.kt");
            }

            @TestMetadata("forDestructuring.kt")
            public void testForDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/forDestructuring.kt");
            }

            @TestMetadata("fullDestructuring.kt")
            public void testFullDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/fullDestructuring.kt");
            }

            @TestMetadata("hasSyntheticComponent.kt")
            public void testHasSyntheticComponent() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/hasSyntheticComponent.kt");
            }

            @TestMetadata("lambdaDestructuring.kt")
            public void testLambdaDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/lambdaDestructuring.kt");
            }

            @TestMetadata("nonDataClass.kt")
            public void testNonDataClass() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/nonDataClass.kt");
            }

            @TestMetadata("nullableDataClass.kt")
            public void testNullableDataClass() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/nullableDataClass.kt");
            }

            @TestMetadata("partialDestructuring.kt")
            public void testPartialDestructuring() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/partialDestructuring.kt");
            }

            @TestMetadata("wrongNameForSyntheticComponent.kt")
            public void testWrongNameForSyntheticComponent() throws Exception {
                runTest("testData/inspectionsLocal/destructuringWrongNameInspection/wrongNameForSyntheticComponent.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/mainFunctionReturnUnit")
        public abstract static class MainFunctionReturnUnit extends AbstractK2LocalInspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/inspectionsLocal/mainFunctionReturnUnit/insideClass")
            public static class InsideClass extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideClass/simple.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject")
            public static class InsideObject extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("companion.kt")
                public void testCompanion() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/companion.kt");
                }

                @TestMetadata("companionNamed.kt")
                public void testCompanionNamed() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/companionNamed.kt");
                }

                @TestMetadata("correct.kt")
                public void testCorrect() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/correct.kt");
                }

                @TestMetadata("correctVararg.kt")
                public void testCorrectVararg() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/correctVararg.kt");
                }

                @TestMetadata("nested.kt")
                public void testNested() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/nested.kt");
                }

                @TestMetadata("noAnnnotation.kt")
                public void testNoAnnnotation() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/noAnnnotation.kt");
                }

                @TestMetadata("noArguments.kt")
                public void testNoArguments() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/noArguments.kt");
                }

                @TestMetadata("objectLiteral.kt")
                public void testObjectLiteral() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/objectLiteral.kt");
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/insideObject/simple.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel")
            public static class TopLevel extends AbstractK2LocalInspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("annotatedReturnType.kt")
                public void testAnnotatedReturnType() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/annotatedReturnType.kt");
                }

                @TestMetadata("correct.kt")
                public void testCorrect() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/correct.kt");
                }

                @TestMetadata("correctWithArgument.kt")
                public void testCorrectWithArgument() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/correctWithArgument.kt");
                }

                @TestMetadata("correctWithArgumentVararg.kt")
                public void testCorrectWithArgumentVararg() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/correctWithArgumentVararg.kt");
                }

                @TestMetadata("differentArgumentType.kt")
                public void testDifferentArgumentType() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/differentArgumentType.kt");
                }

                @TestMetadata("differentName.kt")
                public void testDifferentName() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/differentName.kt");
                }

                @TestMetadata("extension.kt")
                public void testExtension() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/extension.kt");
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/simple.kt");
                }

                @TestMetadata("withArgument.kt")
                public void testWithArgument() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/withArgument.kt");
                }

                @TestMetadata("withArgumentVararg.kt")
                public void testWithArgumentVararg() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/withArgumentVararg.kt");
                }

                @TestMetadata("withMultipleArguments.kt")
                public void testWithMultipleArguments() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/withMultipleArguments.kt");
                }

                @TestMetadata("withNullableArgument.kt")
                public void testWithNullableArgument() throws Exception {
                    runTest("testData/inspectionsLocal/mainFunctionReturnUnit/topLevel/withNullableArgument.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/redundantVisibilityModifierFir")
        public static class RedundantVisibilityModifierFir extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("publicFunInPublicClass.kt")
            public void testPublicFunInPublicClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantVisibilityModifierFir/publicFunInPublicClass.kt");
            }

            @TestMetadata("publicValInPublicClass.kt")
            public void testPublicValInPublicClass() throws Exception {
                runTest("testData/inspectionsLocal/redundantVisibilityModifierFir/publicValInPublicClass.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/removeSingleExpressionStringTemplate")
        public static class RemoveSingleExpressionStringTemplate extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("emptyString.kt")
            public void testEmptyString() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/emptyString.kt");
            }

            @TestMetadata("justString.kt")
            public void testJustString() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/justString.kt");
            }

            @TestMetadata("multipleStringTemplate.kt")
            public void testMultipleStringTemplate() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/multipleStringTemplate.kt");
            }

            @TestMetadata("singleExpressionStringTemplate.kt")
            public void testSingleExpressionStringTemplate() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/singleExpressionStringTemplate.kt");
            }

            @TestMetadata("singleExpressionStringTemplateWithMethodCall.kt")
            public void testSingleExpressionStringTemplateWithMethodCall() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/singleExpressionStringTemplateWithMethodCall.kt");
            }

            @TestMetadata("singleExpressionStringTemplateWithNonStringType.kt")
            public void testSingleExpressionStringTemplateWithNonStringType() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/singleExpressionStringTemplateWithNonStringType.kt");
            }

            @TestMetadata("stringTemplateWithText.kt")
            public void testStringTemplateWithText() throws Exception {
                runTest("testData/inspectionsLocal/removeSingleExpressionStringTemplate/stringTemplateWithText.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty")
        public static class ReplaceSizeCheckWithIsNotEmpty extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/array.kt");
            }

            @TestMetadata("charSequence.kt")
            public void testCharSequence() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/charSequence.kt");
            }

            @TestMetadata("collection.kt")
            public void testCollection() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/collection.kt");
            }

            @TestMetadata("collectionSubtype.kt")
            public void testCollectionSubtype() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/collectionSubtype.kt");
            }

            @TestMetadata("extensionReceiver.kt")
            public void testExtensionReceiver() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/extensionReceiver.kt");
            }

            @TestMetadata("flexibleType.kt")
            public void testFlexibleType() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/flexibleType.kt");
            }

            @TestMetadata("iterableCount.kt")
            public void testIterableCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/iterableCount.kt");
            }

            @TestMetadata("iterableCountWithPredicate.kt")
            public void testIterableCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/iterableCountWithPredicate.kt");
            }

            @TestMetadata("list.kt")
            public void testList() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/list.kt");
            }

            @TestMetadata("listCountWithPredicate.kt")
            public void testListCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/listCountWithPredicate.kt");
            }

            @TestMetadata("map.kt")
            public void testMap() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/map.kt");
            }

            @TestMetadata("mutableList.kt")
            public void testMutableList() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/mutableList.kt");
            }

            @TestMetadata("primitiveArray.kt")
            public void testPrimitiveArray() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/primitiveArray.kt");
            }

            @TestMetadata("progressionCount.kt")
            public void testProgressionCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/progressionCount.kt");
            }

            @TestMetadata("rangeCount.kt")
            public void testRangeCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/rangeCount.kt");
            }

            @TestMetadata("rangeCountWithPredicate.kt")
            public void testRangeCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/rangeCountWithPredicate.kt");
            }

            @TestMetadata("string.kt")
            public void testString() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/string.kt");
            }

            @TestMetadata("thisReceiver.kt")
            public void testThisReceiver() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/thisReceiver.kt");
            }

            @TestMetadata("typeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/typeAlias.kt");
            }

            @TestMetadata("unsupportedSize.kt")
            public void testUnsupportedSize() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeCheckWithIsNotEmpty/unsupportedSize.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty")
        public static class ReplaceSizeZeroCheckWithIsEmpty extends AbstractK2LocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/array.kt");
            }

            @TestMetadata("charSequence.kt")
            public void testCharSequence() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/charSequence.kt");
            }

            @TestMetadata("collection.kt")
            public void testCollection() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/collection.kt");
            }

            @TestMetadata("collectionSubtype.kt")
            public void testCollectionSubtype() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/collectionSubtype.kt");
            }

            @TestMetadata("extensionReceiver.kt")
            public void testExtensionReceiver() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/extensionReceiver.kt");
            }

            @TestMetadata("flexibleType.kt")
            public void testFlexibleType() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/flexibleType.kt");
            }

            @TestMetadata("iterableCount.kt")
            public void testIterableCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/iterableCount.kt");
            }

            @TestMetadata("iterableCountWithPredicate.kt")
            public void testIterableCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/iterableCountWithPredicate.kt");
            }

            @TestMetadata("list.kt")
            public void testList() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/list.kt");
            }

            @TestMetadata("listCountWithPredicate.kt")
            public void testListCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/listCountWithPredicate.kt");
            }

            @TestMetadata("map.kt")
            public void testMap() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/map.kt");
            }

            @TestMetadata("mutableList.kt")
            public void testMutableList() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/mutableList.kt");
            }

            @TestMetadata("primitiveArray.kt")
            public void testPrimitiveArray() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/primitiveArray.kt");
            }

            @TestMetadata("progressionCount.kt")
            public void testProgressionCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/progressionCount.kt");
            }

            @TestMetadata("rangeCount.kt")
            public void testRangeCount() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/rangeCount.kt");
            }

            @TestMetadata("rangeCountWithPredicate.kt")
            public void testRangeCountWithPredicate() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/rangeCountWithPredicate.kt");
            }

            @TestMetadata("string.kt")
            public void testString() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/string.kt");
            }

            @TestMetadata("thisReceiver.kt")
            public void testThisReceiver() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/thisReceiver.kt");
            }

            @TestMetadata("typeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/typeAlias.kt");
            }

            @TestMetadata("unsupportedSize.kt")
            public void testUnsupportedSize() throws Exception {
                runTest("testData/inspectionsLocal/replaceSizeZeroCheckWithIsEmpty/unsupportedSize.kt");
            }
        }
    }
}
