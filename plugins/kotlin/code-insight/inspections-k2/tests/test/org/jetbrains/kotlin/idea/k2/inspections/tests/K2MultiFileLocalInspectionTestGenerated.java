// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.inspections.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol")
public abstract class K2MultiFileLocalInspectionTestGenerated extends AbstractK2MultiFileLocalInspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/fromKotlinTest")
    public static class FromKotlinTest extends AbstractK2MultiFileLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("fromKotlinTest.test")
        public void testFromKotlinTest() throws Exception {
            runTest("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/fromKotlinTest/fromKotlinTest.test");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/fromKotlinTestClass")
    public static class FromKotlinTestClass extends AbstractK2MultiFileLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("fromKotlinTestClass.test")
        public void testFromKotlinTestClass() throws Exception {
            runTest("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/fromKotlinTestClass/fromKotlinTestClass.test");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/inlineClassesImplInterface")
    public static class InlineClassesImplInterface extends AbstractK2MultiFileLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("inlineClassesImplInterface.test")
        public void testInlineClassesImplInterface() throws Exception {
            runTest("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/inlineClassesImplInterface/inlineClassesImplInterface.test");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/internalConstructorUsedInJava")
    public static class InternalConstructorUsedInJava extends AbstractK2MultiFileLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("internalConstructorUsedInJava.test")
        public void testInternalConstructorUsedInJava() throws Exception {
            runTest("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/internalConstructorUsedInJava/internalConstructorUsedInJava.test");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/propertyWithJvmNameAnnotation")
    public static class PropertyWithJvmNameAnnotation extends AbstractK2MultiFileLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("propertyWithJvmNameAnnotation.test")
        public void testPropertyWithJvmNameAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/multiFileLocalInspections/unusedSymbol/propertyWithJvmNameAnnotation/propertyWithJvmNameAnnotation.test");
        }
    }
}
