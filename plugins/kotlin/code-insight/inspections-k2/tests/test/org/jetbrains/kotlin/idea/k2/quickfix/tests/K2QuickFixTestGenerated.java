// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.quickfix.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2QuickFixTestGenerated extends AbstractK2QuickFixTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantIf")
    public static class RedundantIf extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("assignExpression.kt")
        public void testAssignExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/assignExpression.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/assignment.kt");
        }

        @TestMetadata("assignmentFake.kt")
        public void testAssignmentFake() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/assignmentFake.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/comment.kt");
        }

        @TestMetadata("commentLiftedUpReturn.kt")
        public void testCommentLiftedUpReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/commentLiftedUpReturn.kt");
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/expression.kt");
        }

        @TestMetadata("expressionBody.kt")
        public void testExpressionBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/expressionBody.kt");
        }

        @TestMetadata("labeledReturn.kt")
        public void testLabeledReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/labeledReturn.kt");
        }

        @TestMetadata("multiLineCommentLiftedUpReturn.kt")
        public void testMultiLineCommentLiftedUpReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/multiLineCommentLiftedUpReturn.kt");
        }

        @TestMetadata("negate.kt")
        public void testNegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/negate.kt");
        }

        @TestMetadata("negate2.kt")
        public void testNegate2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/negate2.kt");
        }

        @TestMetadata("negate3.kt")
        public void testNegate3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/negate3.kt");
        }

        @TestMetadata("notAvailableOnCondition.kt")
        public void testNotAvailableOnCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/notAvailableOnCondition.kt");
        }

        @TestMetadata("returnWithoutElse.kt")
        public void testReturnWithoutElse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse.kt");
        }

        @TestMetadata("returnWithoutElse2.kt")
        public void testReturnWithoutElse2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse2.kt");
        }

        @TestMetadata("returnWithoutElse3.kt")
        public void testReturnWithoutElse3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse3.kt");
        }

        @TestMetadata("returnWithoutElse4.kt")
        public void testReturnWithoutElse4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse4.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/changeSignature")
    public static class ChangeSignature extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("addConstructorParameter.kt")
        public void testAddConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addConstructorParameter.kt");
        }

        @TestMetadata("addConstructorParameterDataClassForConstantTypeMismatch.kt")
        public void testAddConstructorParameterDataClassForConstantTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addConstructorParameterDataClassForConstantTypeMismatch.kt");
        }

        @TestMetadata("addConstructorParameterForConstantTypeMismatch.kt")
        public void testAddConstructorParameterForConstantTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addConstructorParameterForConstantTypeMismatch.kt");
        }

        @TestMetadata("addConstructorParameterForInlineClass.kt")
        public void testAddConstructorParameterForInlineClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addConstructorParameterForInlineClass.kt");
        }

        @TestMetadata("addConstructorParameterForValueClass.kt")
        public void testAddConstructorParameterForValueClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addConstructorParameterForValueClass.kt");
        }

        @TestMetadata("addEnumConstructorParameter.kt")
        public void testAddEnumConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addEnumConstructorParameter.kt");
        }

        @TestMetadata("addEnumConstructorParameter2.kt")
        public void testAddEnumConstructorParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addEnumConstructorParameter2.kt");
        }

        @TestMetadata("addEnumConstructorParameter3.kt")
        public void testAddEnumConstructorParameter3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addEnumConstructorParameter3.kt");
        }

        @TestMetadata("addEnumConstructorParameter4.kt")
        public void testAddEnumConstructorParameter4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addEnumConstructorParameter4.kt");
        }

        @TestMetadata("addEnumConstructorParameter5.kt")
        public void testAddEnumConstructorParameter5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addEnumConstructorParameter5.kt");
        }

        @TestMetadata("addExtensionFunctionParameterForTypeMismatch.kt")
        public void testAddExtensionFunctionParameterForTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addExtensionFunctionParameterForTypeMismatch.kt");
        }

        @TestMetadata("addForItParameter.kt")
        public void testAddForItParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addForItParameter.kt");
        }

        @TestMetadata("addFunctionParameter.kt")
        public void testAddFunctionParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameter.kt");
        }

        @TestMetadata("addFunctionParameter2.kt")
        public void testAddFunctionParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameter2.kt");
        }

        @TestMetadata("addFunctionParameter3.kt")
        public void testAddFunctionParameter3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameter3.kt");
        }

        @TestMetadata("addFunctionParameterAndChangeTypes.kt")
        public void testAddFunctionParameterAndChangeTypes() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterAndChangeTypes.kt");
        }

        @TestMetadata("addFunctionParameterAndChangeTypesWithReceiver.kt")
        public void testAddFunctionParameterAndChangeTypesWithReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterAndChangeTypesWithReceiver.kt");
        }

        @TestMetadata("addFunctionParameterForConstantTypeMismatch.kt")
        public void testAddFunctionParameterForConstantTypeMismatch() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForConstantTypeMismatch.kt");
        }

        @TestMetadata("addFunctionParameterForNullForNotnullType.kt")
        public void testAddFunctionParameterForNullForNotnullType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForNullForNotnullType.kt");
        }

        @TestMetadata("addFunctionParameterForReferencedArgument.kt")
        public void testAddFunctionParameterForReferencedArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForReferencedArgument.kt");
        }

        @TestMetadata("addFunctionParameterForReferencedArgument2.kt")
        public void testAddFunctionParameterForReferencedArgument2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForReferencedArgument2.kt");
        }

        @TestMetadata("addFunctionParameterForReferencedArgument3.kt")
        public void testAddFunctionParameterForReferencedArgument3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForReferencedArgument3.kt");
        }

        @TestMetadata("addFunctionParameterForReferencedArgument4.kt")
        public void testAddFunctionParameterForReferencedArgument4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForReferencedArgument4.kt");
        }

        @TestMetadata("addFunctionParameterForReferencedArgument5.kt")
        public void testAddFunctionParameterForReferencedArgument5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForReferencedArgument5.kt");
        }

        @TestMetadata("addFunctionParameterForTypeMismatch1.kt")
        public void testAddFunctionParameterForTypeMismatch1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForTypeMismatch1.kt");
        }

        @TestMetadata("addFunctionParameterForTypeMismatch2.kt")
        public void testAddFunctionParameterForTypeMismatch2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForTypeMismatch2.kt");
        }

        @TestMetadata("addFunctionParameterForTypeMismatch3.kt")
        public void testAddFunctionParameterForTypeMismatch3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForTypeMismatch3.kt");
        }

        @TestMetadata("addFunctionParameterForTypeMismatch4.kt")
        public void testAddFunctionParameterForTypeMismatch4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForTypeMismatch4.kt");
        }

        @TestMetadata("addFunctionParameterForTypeMismatch5.kt")
        public void testAddFunctionParameterForTypeMismatch5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForTypeMismatch5.kt");
        }

        @TestMetadata("addFunctionParameterForTypeMismatchWithLambdaArgument.kt")
        public void testAddFunctionParameterForTypeMismatchWithLambdaArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterForTypeMismatchWithLambdaArgument.kt");
        }

        @TestMetadata("addFunctionParameterLongNameRuntime.kt")
        public void testAddFunctionParameterLongNameRuntime() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterLongNameRuntime.kt");
        }

        @TestMetadata("addFunctionParameterWithAnonymousFunction.kt")
        public void testAddFunctionParameterWithAnonymousFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterWithAnonymousFunction.kt");
        }

        @TestMetadata("addFunctionParameterWithFunctionReference.kt")
        public void testAddFunctionParameterWithFunctionReference() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterWithFunctionReference.kt");
        }

        @TestMetadata("addFunctionParameterWithLambda.kt")
        public void testAddFunctionParameterWithLambda() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterWithLambda.kt");
        }

        @TestMetadata("addFunctionParameterWithSmartCast.kt")
        public void testAddFunctionParameterWithSmartCast() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterWithSmartCast.kt");
        }

        @TestMetadata("addFunctionParameterWithSmartcastedArgument.kt")
        public void testAddFunctionParameterWithSmartcastedArgument() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterWithSmartcastedArgument.kt");
        }

        @TestMetadata("addFunctionParameterWithSuspendFunctionReference.kt")
        public void testAddFunctionParameterWithSuspendFunctionReference() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addFunctionParameterWithSuspendFunctionReference.kt");
        }

        @TestMetadata("addNothingReturnType.kt")
        public void testAddNothingReturnType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addNothingReturnType.kt");
        }

        @TestMetadata("addParameterNotAvailableForBuiltins.kt")
        public void testAddParameterNotAvailableForBuiltins() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addParameterNotAvailableForBuiltins.kt");
        }

        @TestMetadata("addParameterNotAvailableForLibrary.kt")
        public void testAddParameterNotAvailableForLibrary() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addParameterNotAvailableForLibrary.kt");
        }

        @TestMetadata("addParameterToFakeOverride.kt")
        public void testAddParameterToFakeOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/addParameterToFakeOverride.kt");
        }

        @TestMetadata("changeAnnotationClassConstructor.kt")
        public void testChangeAnnotationClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/changeAnnotationClassConstructor.kt");
        }

        @TestMetadata("changeClassConstructor.kt")
        public void testChangeClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/changeClassConstructor.kt");
        }

        @TestMetadata("changeDataClassConstructor.kt")
        public void testChangeDataClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/changeDataClassConstructor.kt");
        }

        @TestMetadata("changeFunctionLiteralParameters1.kt")
        public void testChangeFunctionLiteralParameters1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/changeFunctionLiteralParameters1.kt");
        }

        @TestMetadata("changeFunctionLiteralParameters2.kt")
        public void testChangeFunctionLiteralParameters2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/changeFunctionLiteralParameters2.kt");
        }

        @TestMetadata("changeFunctionLiteralParameters3.kt")
        public void testChangeFunctionLiteralParameters3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/changeFunctionLiteralParameters3.kt");
        }

        @TestMetadata("changeFunctionLiteralParameters4.kt")
        public void testChangeFunctionLiteralParameters4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/changeFunctionLiteralParameters4.kt");
        }

        @TestMetadata("changeParameterType.kt")
        public void testChangeParameterType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/changeParameterType.kt");
        }

        @TestMetadata("complexHierarchy.kt")
        public void testComplexHierarchy() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/complexHierarchy.kt");
        }

        @TestMetadata("complexHierarchyHead.kt")
        public void testComplexHierarchyHead() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/complexHierarchyHead.kt");
        }

        @TestMetadata("complexHierarchyTail.kt")
        public void testComplexHierarchyTail() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/complexHierarchyTail.kt");
        }

        @TestMetadata("disabledAddParameterForEnum.kt")
        public void testDisabledAddParameterForEnum() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/disabledAddParameterForEnum.kt");
        }

        @TestMetadata("disabledAddParameterForReadOnlyClass.kt")
        public void testDisabledAddParameterForReadOnlyClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/disabledAddParameterForReadOnlyClass.kt");
        }

        @TestMetadata("fixExtensionLambdaSignature.kt")
        public void testFixExtensionLambdaSignature() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/fixExtensionLambdaSignature.kt");
        }

        @TestMetadata("linearHierarchy.kt")
        public void testLinearHierarchy() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/linearHierarchy.kt");
        }

        @TestMetadata("notAvailableForSynthesized.kt")
        public void testNotAvailableForSynthesized() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/notAvailableForSynthesized.kt");
        }

        @TestMetadata("notEditable.kt")
        public void testNotEditable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/notEditable.kt");
        }

        @TestMetadata("removeConstructorParameter.kt")
        public void testRemoveConstructorParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/removeConstructorParameter.kt");
        }

        @TestMetadata("removeFunctionFirstParameter.kt")
        public void testRemoveFunctionFirstParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/removeFunctionFirstParameter.kt");
        }

        @TestMetadata("removeFunctionSecondParameter1.kt")
        public void testRemoveFunctionSecondParameter1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/removeFunctionSecondParameter1.kt");
        }

        @TestMetadata("removeFunctionSecondParameter2.kt")
        public void testRemoveFunctionSecondParameter2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/removeFunctionSecondParameter2.kt");
        }

        @TestMetadata("removeLibraryClassParameter.kt")
        public void testRemoveLibraryClassParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/removeLibraryClassParameter.kt");
        }

        @TestMetadata("removeNamedParameter.kt")
        public void testRemoveNamedParameter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/removeNamedParameter.kt");
        }

        @TestMetadata("removeParameterFromFakeOverride.kt")
        public void testRemoveParameterFromFakeOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/removeParameterFromFakeOverride.kt");
        }

        @TestMetadata("removeParameterNotAvailableForBuiltins.kt")
        public void testRemoveParameterNotAvailableForBuiltins() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/changeSignature/removeParameterNotAvailableForBuiltins.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantModalityModifier")
    public static class RedundantModalityModifier extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("redundantAbstract.kt")
        public void testRedundantAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantModalityModifier/redundantAbstract.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantModalityModifier/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate")
    public static class RemoveToStringInStringTemplate extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/call.kt");
        }

        @TestMetadata("name.kt")
        public void testName() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/name.kt");
        }

        @TestMetadata("nameWithPostfix.kt")
        public void testNameWithPostfix() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/nameWithPostfix.kt");
        }

        @TestMetadata("necessaryBrackets1.kt")
        public void testNecessaryBrackets1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/necessaryBrackets1.kt");
        }

        @TestMetadata("necessaryBrackets2.kt")
        public void testNecessaryBrackets2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/necessaryBrackets2.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/suppress")
    public abstract static class Suppress extends AbstractK2QuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/annotationPosition")
        public static class AnnotationPosition extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("paramWithModifier.kt")
            public void testParamWithModifier() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/paramWithModifier.kt");
            }

            @TestMetadata("topLevelFunctionModifierOnThePreviousLine.kt")
            public void testTopLevelFunctionModifierOnThePreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionModifierOnThePreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionModifierOnTheSameLine.kt")
            public void testTopLevelFunctionModifierOnTheSameLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionModifierOnTheSameLine.kt");
            }

            @TestMetadata("topLevelFunctionNoModifiers.kt")
            public void testTopLevelFunctionNoModifiers() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionNoModifiers.kt");
            }

            @TestMetadata("topLevelFunctionSuppressAnotherPreviousLine.kt")
            public void testTopLevelFunctionSuppressAnotherPreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressAnotherPreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressEmptyArgsPreviousLine.kt")
            public void testTopLevelFunctionSuppressEmptyArgsPreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressEmptyArgsPreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressNoArgsPreviousLine.kt")
            public void testTopLevelFunctionSuppressNoArgsPreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressNoArgsPreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressNoArgsTheSameLine.kt")
            public void testTopLevelFunctionSuppressNoArgsTheSameLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressNoArgsTheSameLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFile.kt")
            public void testTopLevelFunctionSuppressOnFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFile.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFileOtherAnnotation.kt")
            public void testTopLevelFunctionSuppressOnFileOtherAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFileOtherAnnotation.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFileWithPackage.kt")
            public void testTopLevelFunctionSuppressOnFileWithPackage() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFileWithPackage.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFileWithSuppress.kt")
            public void testTopLevelFunctionSuppressOnFileWithSuppress() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFileWithSuppress.kt");
            }

            @TestMetadata("topLevelFunctionUnrelatedAnnotation.kt")
            public void testTopLevelFunctionUnrelatedAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionUnrelatedAnnotation.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/availability")
        public static class Availability extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inlineKeyword.kt")
            public void testInlineKeyword() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/inlineKeyword.kt");
            }

            @TestMetadata("localFunSuppressForLocal.kt")
            public void testLocalFunSuppressForLocal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localFunSuppressForLocal.kt");
            }

            @TestMetadata("localFunSuppressForOuter.kt")
            public void testLocalFunSuppressForOuter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localFunSuppressForOuter.kt");
            }

            @TestMetadata("localValSuppressForFun.kt")
            public void testLocalValSuppressForFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localValSuppressForFun.kt");
            }

            @TestMetadata("localValSuppressForVal.kt")
            public void testLocalValSuppressForVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localValSuppressForVal.kt");
            }

            @TestMetadata("memberOfNestedSuppressForMember.kt")
            public void testMemberOfNestedSuppressForMember() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberOfNestedSuppressForMember.kt");
            }

            @TestMetadata("memberOfNestedSuppressForNested.kt")
            public void testMemberOfNestedSuppressForNested() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberOfNestedSuppressForNested.kt");
            }

            @TestMetadata("memberOfNestedSuppressForOuter.kt")
            public void testMemberOfNestedSuppressForOuter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberOfNestedSuppressForOuter.kt");
            }

            @TestMetadata("memberSuppressForClass.kt")
            public void testMemberSuppressForClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberSuppressForClass.kt");
            }

            @TestMetadata("memberSuppressForMember.kt")
            public void testMemberSuppressForMember() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberSuppressForMember.kt");
            }

            @TestMetadata("parameterSuppressForDestructuredLambdaFun.kt")
            public void testParameterSuppressForDestructuredLambdaFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/parameterSuppressForDestructuredLambdaFun.kt");
            }

            @TestMetadata("parameterSuppressForDestructuredLambdaParameter.kt")
            public void testParameterSuppressForDestructuredLambdaParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/parameterSuppressForDestructuredLambdaParameter.kt");
            }

            @TestMetadata("parameterSuppressForLambdaParameter.kt")
            public void testParameterSuppressForLambdaParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/parameterSuppressForLambdaParameter.kt");
            }

            @TestMetadata("topLevelFunctionAlreadySuppressed.kt")
            public void testTopLevelFunctionAlreadySuppressed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/topLevelFunctionAlreadySuppressed.kt");
            }

            @TestMetadata("upperBound.kt")
            public void testUpperBound() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/upperBound.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/declarationKinds")
        public static class DeclarationKinds extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("class.kt")
            public void testClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/class.kt");
            }

            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/classObject.kt");
            }

            @TestMetadata("enumEntry.kt")
            public void testEnumEntry() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/enumEntry.kt");
            }

            @TestMetadata("fun.kt")
            public void testFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/fun.kt");
            }

            @TestMetadata("interface.kt")
            public void testInterface() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/interface.kt");
            }

            @TestMetadata("multiVal.kt")
            public void testMultiVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/multiVal.kt");
            }

            @TestMetadata("multiVar.kt")
            public void testMultiVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/multiVar.kt");
            }

            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/object.kt");
            }

            @TestMetadata("param.kt")
            public void testParam() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/param.kt");
            }

            @TestMetadata("secondaryConstructor.kt")
            public void testSecondaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/secondaryConstructor.kt");
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/val.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/var.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/errorRecovery")
        public static class ErrorRecovery extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("nonStringInSuppress.kt")
            public void testNonStringInSuppress() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/errorRecovery/nonStringInSuppress.kt");
            }

            @TestMetadata("unresolvedAnnotation.kt")
            public void testUnresolvedAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/errorRecovery/unresolvedAnnotation.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/external")
        public static class External extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("suppressActive.kt")
            public void testSuppressActive() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/external/suppressActive.kt");
            }

            @TestMetadata("suppressAvailable.kt")
            public void testSuppressAvailable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/external/suppressAvailable.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/forStatement")
        public abstract static class ForStatement extends AbstractK2QuickFixTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable")
            public static class Unavailable extends AbstractK2QuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inAnnotationArgument.kt")
                public void testInAnnotationArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inAnnotationArgument.kt");
                }

                @TestMetadata("inClassHeader.kt")
                public void testInClassHeader() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inClassHeader.kt");
                }

                @TestMetadata("inDefaultArgument.kt")
                public void testInDefaultArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inDefaultArgument.kt");
                }

                @TestMetadata("inExpressionBody.kt")
                public void testInExpressionBody() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inExpressionBody.kt");
                }

                @TestMetadata("inLocalValInitializer.kt")
                public void testInLocalValInitializer() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inLocalValInitializer.kt");
                }

                @TestMetadata("inParameterType.kt")
                public void testInParameterType() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inParameterType.kt");
                }

                @TestMetadata("inParameterTypeInFunctionLiteral.kt")
                public void testInParameterTypeInFunctionLiteral() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inParameterTypeInFunctionLiteral.kt");
                }

                @TestMetadata("inPropertyInitializer.kt")
                public void testInPropertyInitializer() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inPropertyInitializer.kt");
                }

                @TestMetadata("objectLiteral.kt")
                public void testObjectLiteral() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/objectLiteral.kt");
                }

                @TestMetadata("objectLiteralInsideExpression.kt")
                public void testObjectLiteralInsideExpression() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/objectLiteralInsideExpression.kt");
                }

                @TestMetadata("supretype.kt")
                public void testSupretype() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/supretype.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/forStatement")
            public static class Uncategorized extends AbstractK2QuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("andAnd.kt")
                public void testAndAnd() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/andAnd.kt");
                }

                @TestMetadata("annotatedExpr.kt")
                public void testAnnotatedExpr() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/annotatedExpr.kt");
                }

                @TestMetadata("annotatedExprWithSuppress.kt")
                public void testAnnotatedExprWithSuppress() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/annotatedExprWithSuppress.kt");
                }

                @TestMetadata("arrayRead.kt")
                public void testArrayRead() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/arrayRead.kt");
                }

                @TestMetadata("as.kt")
                public void testAs() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/as.kt");
                }

                @TestMetadata("asSafe.kt")
                public void testAsSafe() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/asSafe.kt");
                }

                @TestMetadata("assign.kt")
                public void testAssign() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/assign.kt");
                }

                @TestMetadata("call.kt")
                public void testCall() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/call.kt");
                }

                @TestMetadata("doWhile.kt")
                public void testDoWhile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/doWhile.kt");
                }

                @TestMetadata("dotQualified.kt")
                public void testDotQualified() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/dotQualified.kt");
                }

                @TestMetadata("elvis.kt")
                public void testElvis() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/elvis.kt");
                }

                @TestMetadata("eqEq.kt")
                public void testEqEq() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/eqEq.kt");
                }

                @TestMetadata("for.kt")
                public void testFor() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/for.kt");
                }

                @TestMetadata("if.kt")
                public void testIf() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/if.kt");
                }

                @TestMetadata("in.kt")
                public void testIn() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/in.kt");
                }

                @TestMetadata("infix.kt")
                public void testInfix() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/infix.kt");
                }

                @TestMetadata("is.kt")
                public void testIs() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/is.kt");
                }

                @TestMetadata("labeled.kt")
                public void testLabeled() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/labeled.kt");
                }

                @TestMetadata("less.kt")
                public void testLess() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/less.kt");
                }

                @TestMetadata("mul.kt")
                public void testMul() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/mul.kt");
                }

                @TestMetadata("orOr.kt")
                public void testOrOr() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/orOr.kt");
                }

                @TestMetadata("parenthesized.kt")
                public void testParenthesized() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/parenthesized.kt");
                }

                @TestMetadata("plus.kt")
                public void testPlus() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/plus.kt");
                }

                @TestMetadata("postfix.kt")
                public void testPostfix() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/postfix.kt");
                }

                @TestMetadata("postfixPlusPlus.kt")
                public void testPostfixPlusPlus() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/postfixPlusPlus.kt");
                }

                @TestMetadata("prefixPlusPlus.kt")
                public void testPrefixPlusPlus() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/prefixPlusPlus.kt");
                }

                @TestMetadata("range.kt")
                public void testRange() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/range.kt");
                }

                @TestMetadata("return.kt")
                public void testReturn() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/return.kt");
                }

                @TestMetadata("safeQualified.kt")
                public void testSafeQualified() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/safeQualified.kt");
                }

                @TestMetadata("simpleName.kt")
                public void testSimpleName() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/simpleName.kt");
                }

                @TestMetadata("stringTemplate.kt")
                public void testStringTemplate() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/stringTemplate.kt");
                }

                @TestMetadata("throw.kt")
                public void testThrow() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/throw.kt");
                }

                @TestMetadata("try.kt")
                public void testTry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/try.kt");
                }

                @TestMetadata("whenExpressionEntry.kt")
                public void testWhenExpressionEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenExpressionEntry.kt");
                }

                @TestMetadata("whenInEntry.kt")
                public void testWhenInEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenInEntry.kt");
                }

                @TestMetadata("whenIsEntry.kt")
                public void testWhenIsEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenIsEntry.kt");
                }

                @TestMetadata("whenSubject.kt")
                public void testWhenSubject() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenSubject.kt");
                }

                @TestMetadata("while.kt")
                public void testWhile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/while.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/inspections")
        public abstract static class Inspections extends AbstractK2QuickFixTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure")
            public static class CodeStructure extends AbstractK2QuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("classSuppressedOnClass.kt")
                public void testClassSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classSuppressedOnClass.kt");
                }

                @TestMetadata("classSuppressedOnFile.kt")
                public void testClassSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classSuppressedOnFile.kt");
                }

                @TestMetadata("classTypeParameterSuppressedOnClass.kt")
                public void testClassTypeParameterSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classTypeParameterSuppressedOnClass.kt");
                }

                @TestMetadata("classTypeParameterSuppressedOnFile.kt")
                public void testClassTypeParameterSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classTypeParameterSuppressedOnFile.kt");
                }

                @TestMetadata("classTypeParameterSuppressedOnTypeParameter.kt")
                public void testClassTypeParameterSuppressedOnTypeParameter() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classTypeParameterSuppressedOnTypeParameter.kt");
                }

                @TestMetadata("companionSuppressedOnClass.kt")
                public void testCompanionSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/companionSuppressedOnClass.kt");
                }

                @TestMetadata("companionSuppressedOnCompanion.kt")
                public void testCompanionSuppressedOnCompanion() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/companionSuppressedOnCompanion.kt");
                }

                @TestMetadata("companionSuppressedOnFile.kt")
                public void testCompanionSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/companionSuppressedOnFile.kt");
                }

                @TestMetadata("constructorSuppressedOnClass.kt")
                public void testConstructorSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/constructorSuppressedOnClass.kt");
                }

                @TestMetadata("constructorSuppressedOnConstructor.kt")
                public void testConstructorSuppressedOnConstructor() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/constructorSuppressedOnConstructor.kt");
                }

                @TestMetadata("constructorSuppressedOnFile.kt")
                public void testConstructorSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/constructorSuppressedOnFile.kt");
                }

                @TestMetadata("emptyClassSuppressOnClass.kt")
                public void testEmptyClassSuppressOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/emptyClassSuppressOnClass.kt");
                }

                @TestMetadata("emptyClassSuppressOnFile.kt")
                public void testEmptyClassSuppressOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/emptyClassSuppressOnFile.kt");
                }

                @TestMetadata("enumEntrySuppressedOnClass.kt")
                public void testEnumEntrySuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/enumEntrySuppressedOnClass.kt");
                }

                @TestMetadata("enumEntrySuppressedOnEnumEntry.kt")
                public void testEnumEntrySuppressedOnEnumEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/enumEntrySuppressedOnEnumEntry.kt");
                }

                @TestMetadata("enumEntrySuppressedOnFile.kt")
                public void testEnumEntrySuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/enumEntrySuppressedOnFile.kt");
                }

                @TestMetadata("funTypeParameterSuppressedOnFun.kt")
                public void testFunTypeParameterSuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/funTypeParameterSuppressedOnFun.kt");
                }

                @TestMetadata("initializerSuppressedOnFile.kt")
                public void testInitializerSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/initializerSuppressedOnFile.kt");
                }

                @TestMetadata("initializerSuppressedOnFun.kt")
                public void testInitializerSuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/initializerSuppressedOnFun.kt");
                }

                @TestMetadata("initializerSuppressedOnInitializer.kt")
                public void testInitializerSuppressedOnInitializer() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/initializerSuppressedOnInitializer.kt");
                }

                @TestMetadata("interfaceSuppressedOnFile.kt")
                public void testInterfaceSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/interfaceSuppressedOnFile.kt");
                }

                @TestMetadata("interfaceSuppressedOnInterface.kt")
                public void testInterfaceSuppressedOnInterface() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/interfaceSuppressedOnInterface.kt");
                }

                @TestMetadata("objectSuppressedOnFile.kt")
                public void testObjectSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/objectSuppressedOnFile.kt");
                }

                @TestMetadata("objectSuppressedOnObject.kt")
                public void testObjectSuppressedOnObject() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/objectSuppressedOnObject.kt");
                }

                @TestMetadata("parameterSuppressedOnClass.kt")
                public void testParameterSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/parameterSuppressedOnClass.kt");
                }

                @TestMetadata("parameterSuppressedOnFile.kt")
                public void testParameterSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/parameterSuppressedOnFile.kt");
                }

                @TestMetadata("parameterSuppressedOnFun.kt")
                public void testParameterSuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/parameterSuppressedOnFun.kt");
                }

                @TestMetadata("parameterSuppressedOnParameter.kt")
                public void testParameterSuppressedOnParameter() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/parameterSuppressedOnParameter.kt");
                }

                @TestMetadata("propertySuppressedOnClass.kt")
                public void testPropertySuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/propertySuppressedOnClass.kt");
                }

                @TestMetadata("propertySuppressedOnFile.kt")
                public void testPropertySuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/propertySuppressedOnFile.kt");
                }

                @TestMetadata("propertySuppressedOnFun.kt")
                public void testPropertySuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/propertySuppressedOnFun.kt");
                }

                @TestMetadata("propertySuppressedOnProperty.kt")
                public void testPropertySuppressedOnProperty() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/propertySuppressedOnProperty.kt");
                }

                @TestMetadata("statementSuppressedOnAnonymous.kt")
                public void testStatementSuppressedOnAnonymous() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnAnonymous.kt");
                }

                @TestMetadata("statementSuppressedOnClass.kt")
                public void testStatementSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnClass.kt");
                }

                @TestMetadata("statementSuppressedOnFile.kt")
                public void testStatementSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnFile.kt");
                }

                @TestMetadata("statementSuppressedOnFun.kt")
                public void testStatementSuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnFun.kt");
                }

                @TestMetadata("statementSuppressedOnStatement.kt")
                public void testStatementSuppressedOnStatement() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnStatement.kt");
                }

                @TestMetadata("statementSuppressedOnStatementTop.kt")
                public void testStatementSuppressedOnStatementTop() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnStatementTop.kt");
                }

                @TestMetadata("statementSuppressedOnVal.kt")
                public void testStatementSuppressedOnVal() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnVal.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/inspections")
            public static class Uncategorized extends AbstractK2QuickFixTest {
                @java.lang.Override
                @org.jetbrains.annotations.NotNull
                public final KotlinPluginMode getPluginMode() {
                    return KotlinPluginMode.K2;
                }

                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("constantConditionIf.kt")
                public void testConstantConditionIf() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/constantConditionIf.kt");
                }

                @TestMetadata("redundantUnitReturn.kt")
                public void testRedundantUnitReturn() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/redundantUnitReturn.kt");
                }

                @TestMetadata("unusedImports.kt")
                public void testUnusedImports() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/unusedImports.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/redundant")
        public static class Redundant extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("RedundantUnitReturn.kt")
            public void testRedundantUnitReturn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/RedundantUnitReturn.kt");
            }

            @TestMetadata("RemoveAnnotation.kt")
            public void testRemoveAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/RemoveAnnotation.kt");
            }

            @TestMetadata("RemoveAnnotationEntry.kt")
            public void testRemoveAnnotationEntry() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/RemoveAnnotationEntry.kt");
            }

            @TestMetadata("Suppressed.kt")
            public void testSuppressed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/Suppressed.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment")
    public abstract static class SuspiciousCollectionReassignment extends AbstractK2QuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable")
        public static class ChangeTypeToMutable extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("hasType.kt")
            public void testHasType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/hasType.kt");
            }

            @TestMetadata("hasType2.kt")
            public void testHasType2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/hasType2.kt");
            }

            @TestMetadata("mutableListOf.kt")
            public void testMutableListOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/mutableListOf.kt");
            }

            @TestMetadata("mutableMapOf.kt")
            public void testMutableMapOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/mutableMapOf.kt");
            }

            @TestMetadata("mutableSetOf.kt")
            public void testMutableSetOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/mutableSetOf.kt");
            }

            @TestMetadata("noInitializer.kt")
            public void testNoInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/noInitializer.kt");
            }

            @TestMetadata("notLocal.kt")
            public void testNotLocal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/notLocal.kt");
            }

            @TestMetadata("toMutableList.kt")
            public void testToMutableList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/toMutableList.kt");
            }

            @TestMetadata("toMutableList2.kt")
            public void testToMutableList2() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/toMutableList2.kt");
            }

            @TestMetadata("toMutableMap.kt")
            public void testToMutableMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/toMutableMap.kt");
            }

            @TestMetadata("toMutableSet.kt")
            public void testToMutableSet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/changeTypeToMutable/toMutableSet.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer")
        public static class JoinWithInitializer extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("noInitializer.kt")
            public void testNoInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer/noInitializer.kt");
            }

            @TestMetadata("notLocal.kt")
            public void testNotLocal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer/notLocal.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer/simple.kt");
            }

            @TestMetadata("used.kt")
            public void testUsed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/joinWithInitializer/used.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment")
        public static class ReplaceWithAssignment extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("differentType.kt")
            public void testDifferentType() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/differentType.kt");
            }

            @TestMetadata("emptyList.kt")
            public void testEmptyList() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptyList.kt");
            }

            @TestMetadata("emptyListOf.kt")
            public void testEmptyListOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptyListOf.kt");
            }

            @TestMetadata("emptyMap.kt")
            public void testEmptyMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptyMap.kt");
            }

            @TestMetadata("emptyMapOf.kt")
            public void testEmptyMapOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptyMapOf.kt");
            }

            @TestMetadata("emptySet.kt")
            public void testEmptySet() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptySet.kt");
            }

            @TestMetadata("emptySetOf.kt")
            public void testEmptySetOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/emptySetOf.kt");
            }

            @TestMetadata("listOf.kt")
            public void testListOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/listOf.kt");
            }

            @TestMetadata("mapOf.kt")
            public void testMapOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/mapOf.kt");
            }

            @TestMetadata("minusEq.kt")
            public void testMinusEq() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/minusEq.kt");
            }

            @TestMetadata("noInitializer.kt")
            public void testNoInitializer() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/noInitializer.kt");
            }

            @TestMetadata("notEmpty.kt")
            public void testNotEmpty() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/notEmpty.kt");
            }

            @TestMetadata("notLocal.kt")
            public void testNotLocal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/notLocal.kt");
            }

            @TestMetadata("setOf.kt")
            public void testSetOf() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/setOf.kt");
            }

            @TestMetadata("used.kt")
            public void testUsed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithAssignment/used.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter")
        public static class ReplaceWithFilter extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("map.kt")
            public void testMap() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter/map.kt");
            }

            @TestMetadata("minusEq.kt")
            public void testMinusEq() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter/minusEq.kt");
            }

            @TestMetadata("notIterable.kt")
            public void testNotIterable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter/notIterable.kt");
            }

            @TestMetadata("plusEq.kt")
            public void testPlusEq() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithFilter/plusEq.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithOrdinaryAssignment")
        public static class ReplaceWithOrdinaryAssignment extends AbstractK2QuickFixTest {
            @java.lang.Override
            @org.jetbrains.annotations.NotNull
            public final KotlinPluginMode getPluginMode() {
                return KotlinPluginMode.K2;
            }

            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suspiciousCollectionReassignment/replaceWithOrdinaryAssignment/simple.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeAnnotation")
    public static class RemoveAnnotation extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("forbiddenRetentionSource.kt")
        public void testForbiddenRetentionSource() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/forbiddenRetentionSource.kt");
        }

        @TestMetadata("jvmField.kt")
        public void testJvmField() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/jvmField.kt");
        }

        @TestMetadata("jvmFieldOnOverridingProperty.kt")
        public void testJvmFieldOnOverridingProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/jvmFieldOnOverridingProperty.kt");
        }

        @TestMetadata("jvmOverloads.kt")
        public void testJvmOverloads() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/jvmOverloads.kt");
        }

        @TestMetadata("jvmOverloadsOnAnnotationClassConstructor.kt")
        public void testJvmOverloadsOnAnnotationClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/jvmOverloadsOnAnnotationClassConstructor.kt");
        }

        @TestMetadata("optInWithoutArguments.kt")
        public void testOptInWithoutArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/optInWithoutArguments.kt");
        }

        @TestMetadata("setTargetOnGetter.kt")
        public void testSetTargetOnGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/setTargetOnGetter.kt");
        }

        @TestMetadata("useSiteGetDoesntHaveAnyEffect.kt")
        public void testUseSiteGetDoesntHaveAnyEffect() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/useSiteGetDoesntHaveAnyEffect.kt");
        }

        @TestMetadata("useSiteGetOnClass.kt")
        public void testUseSiteGetOnClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/useSiteGetOnClass.kt");
        }

        @TestMetadata("wrongExtenstionFunctionType.kt")
        public void testWrongExtenstionFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/wrongExtenstionFunctionType.kt");
        }

        @TestMetadata("wrongExtenstionFunctionTypeWarning.kt")
        public void testWrongExtenstionFunctionTypeWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/wrongExtenstionFunctionTypeWarning.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/optIn")
    public static class OptIn extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationInTopLevelProperty.kt")
        public void testAnnotationInTopLevelProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/annotationInTopLevelProperty.kt");
        }

        @TestMetadata("appendFileAnnotationToAnnotationList.kt")
        public void testAppendFileAnnotationToAnnotationList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/appendFileAnnotationToAnnotationList.kt");
        }

        @TestMetadata("appendFileAnnotationToOtherFileAnnotations.kt")
        public void testAppendFileAnnotationToOtherFileAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/appendFileAnnotationToOtherFileAnnotations.kt");
        }

        @TestMetadata("appendFileAnnotationWithAnnotationList.kt")
        public void testAppendFileAnnotationWithAnnotationList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/appendFileAnnotationWithAnnotationList.kt");
        }

        @TestMetadata("basicFunction.kt")
        public void testBasicFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicFunction.kt");
        }

        @TestMetadata("basicFunctionContainingClass.kt")
        public void testBasicFunctionContainingClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicFunctionContainingClass.kt");
        }

        @TestMetadata("basicFunctionNotApplicable.kt")
        public void testBasicFunctionNotApplicable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicFunctionNotApplicable.kt");
        }

        @TestMetadata("basicModule.kt")
        public void testBasicModule() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicModule.kt");
        }

        @TestMetadata("basicUseOptIn.kt")
        public void testBasicUseOptIn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicUseOptIn.kt");
        }

        @TestMetadata("classUseOptIn.kt")
        public void testClassUseOptIn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/classUseOptIn.kt");
        }

        @TestMetadata("existingFileAnnotationWithPackage.kt")
        public void testExistingFileAnnotationWithPackage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/existingFileAnnotationWithPackage.kt");
        }

        @TestMetadata("forbiddenTargetsExpression.kt")
        public void testForbiddenTargetsExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/forbiddenTargetsExpression.kt");
        }

        @TestMetadata("forbiddenTargetsExpression2.kt")
        public void testForbiddenTargetsExpression2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/forbiddenTargetsExpression2.kt");
        }

        @TestMetadata("forbiddenTargetsExpression3.kt")
        public void testForbiddenTargetsExpression3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/forbiddenTargetsExpression3.kt");
        }

        @TestMetadata("forbiddenTargetsInAnnotation.kt")
        public void testForbiddenTargetsInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/forbiddenTargetsInAnnotation.kt");
        }

        @TestMetadata("functionInLocalClass.kt")
        public void testFunctionInLocalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/functionInLocalClass.kt");
        }

        @TestMetadata("getterUseSiteExplicit.kt")
        public void testGetterUseSiteExplicit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/getterUseSiteExplicit.kt");
        }

        @TestMetadata("getterUseSiteExplicitRemove.kt")
        public void testGetterUseSiteExplicitRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/getterUseSiteExplicitRemove.kt");
        }

        @TestMetadata("getterUseSiteImplicit.kt")
        public void testGetterUseSiteImplicit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/getterUseSiteImplicit.kt");
        }

        @TestMetadata("getterUseSiteImplicitRemove.kt")
        public void testGetterUseSiteImplicitRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/getterUseSiteImplicitRemove.kt");
        }

        @TestMetadata("hasOptInAnnotation.kt")
        public void testHasOptInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotation.kt");
        }

        @TestMetadata("hasOptInAnnotation2.kt")
        public void testHasOptInAnnotation2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotation2.kt");
        }

        @TestMetadata("hasOptInAnnotation3.kt")
        public void testHasOptInAnnotation3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotation3.kt");
        }

        @TestMetadata("hasOptInAnnotationForClass.kt")
        public void testHasOptInAnnotationForClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotationForClass.kt");
        }

        @TestMetadata("hasOptInAnnotationForClass2.kt")
        public void testHasOptInAnnotationForClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotationForClass2.kt");
        }

        @TestMetadata("invisibleAnnotation.kt")
        public void testInvisibleAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/invisibleAnnotation.kt");
        }

        @TestMetadata("invisibleAnnotationFir.kt")
        public void testInvisibleAnnotationFir() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/invisibleAnnotationFir.kt");
        }

        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/localFunction.kt");
        }

        @TestMetadata("localVariableAnnotationNoInitRemove.kt")
        public void testLocalVariableAnnotationNoInitRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/localVariableAnnotationNoInitRemove.kt");
        }

        @TestMetadata("localVariableAnnotationRemove.kt")
        public void testLocalVariableAnnotationRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/localVariableAnnotationRemove.kt");
        }

        @TestMetadata("localVariableNoGetterAction.kt")
        public void testLocalVariableNoGetterAction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/localVariableNoGetterAction.kt");
        }

        @TestMetadata("nestedClasses.kt")
        public void testNestedClasses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/nestedClasses.kt");
        }

        @TestMetadata("nestedClassesFir.kt")
        public void testNestedClassesFir() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/nestedClassesFir.kt");
        }

        @TestMetadata("newFileAnnotationWithPackage.kt")
        public void testNewFileAnnotationWithPackage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/newFileAnnotationWithPackage.kt");
        }

        @TestMetadata("nonTopLevelAnnotation.kt")
        public void testNonTopLevelAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/nonTopLevelAnnotation.kt");
        }

        @TestMetadata("nonTopLevelAnnotation2.kt")
        public void testNonTopLevelAnnotation2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/nonTopLevelAnnotation2.kt");
        }

        @TestMetadata("optInUnused.kt")
        public void testOptInUnused() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/optInUnused.kt");
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/override.kt");
        }

        @TestMetadata("propagateOptIn.kt")
        public void testPropagateOptIn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn.kt");
        }

        @TestMetadata("propagateOptIn2.kt")
        public void testPropagateOptIn2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn2.kt");
        }

        @TestMetadata("propagateOptIn3.kt")
        public void testPropagateOptIn3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn3.kt");
        }

        @TestMetadata("propagateOptIn4.kt")
        public void testPropagateOptIn4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn4.kt");
        }

        @TestMetadata("propagateOptIn5.kt")
        public void testPropagateOptIn5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn5.kt");
        }

        @TestMetadata("propagateOptIn6.kt")
        public void testPropagateOptIn6() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn6.kt");
        }

        @TestMetadata("propagateOptIn7.kt")
        public void testPropagateOptIn7() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn7.kt");
        }

        @TestMetadata("propagateOptIn8.kt")
        public void testPropagateOptIn8() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn8.kt");
        }

        @TestMetadata("propagateOptIn8Fir.kt")
        public void testPropagateOptIn8Fir() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn8Fir.kt");
        }

        @TestMetadata("propagateSubclassOptInMultipleMarkers1.kt")
        public void testPropagateSubclassOptInMultipleMarkers1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInMultipleMarkers1.kt");
        }

        @TestMetadata("propagateSubclassOptInMultipleMarkers2.kt")
        public void testPropagateSubclassOptInMultipleMarkers2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInMultipleMarkers2.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired.kt")
        public void testPropagateSubclassOptInRequired() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired2.kt")
        public void testPropagateSubclassOptInRequired2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired2.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired3.kt")
        public void testPropagateSubclassOptInRequired3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired3.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired4.kt")
        public void testPropagateSubclassOptInRequired4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired4.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired5.kt")
        public void testPropagateSubclassOptInRequired5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired5.kt");
        }

        @TestMetadata("propertyInConstructor.kt")
        public void testPropertyInConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propertyInConstructor.kt");
        }

        @TestMetadata("propertyInConstructorAddOptInToClass.kt")
        public void testPropertyInConstructorAddOptInToClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propertyInConstructorAddOptInToClass.kt");
        }

        @TestMetadata("propertyInConstructorAddOptInToConstructor.kt")
        public void testPropertyInConstructorAddOptInToConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propertyInConstructorAddOptInToConstructor.kt");
        }

        @TestMetadata("switchOn.kt")
        public void testSwitchOn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/switchOn.kt");
        }

        @TestMetadata("switchOnWithAnotherMarker.kt")
        public void testSwitchOnWithAnotherMarker() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/switchOnWithAnotherMarker.kt");
        }

        @TestMetadata("typeAlias.kt")
        public void testTypeAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/typeAlias.kt");
        }

        @TestMetadata("typeInTopLevelProperty.kt")
        public void testTypeInTopLevelProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/typeInTopLevelProperty.kt");
        }

        @TestMetadata("valueParameterAnnotationAddExplicitUseSite.kt")
        public void testValueParameterAnnotationAddExplicitUseSite() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/valueParameterAnnotationAddExplicitUseSite.kt");
        }

        @TestMetadata("valueParameterAnnotationRemove.kt")
        public void testValueParameterAnnotationRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/valueParameterAnnotationRemove.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeUseSiteTarget")
    public static class RemoveUseSiteTarget extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("setTargetOnGetter.kt")
        public void testSetTargetOnGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/setTargetOnGetter.kt");
        }

        @TestMetadata("useSiteGetDoesntHaveAnyEffect.kt")
        public void testUseSiteGetDoesntHaveAnyEffect() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/useSiteGetDoesntHaveAnyEffect.kt");
        }

        @TestMetadata("useSiteGetOnClass.kt")
        public void testUseSiteGetOnClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/useSiteGetOnClass.kt");
        }

        @TestMetadata("whitespaces.kt")
        public void testWhitespaces() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/whitespaces.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/protectedInFinal")
    public static class ProtectedInFinal extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("finalizeNotReal.kt")
        public void testFinalizeNotReal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/finalizeNotReal.kt");
        }

        @TestMetadata("finalizeNotRealImplicitReturnInt.kt")
        public void testFinalizeNotRealImplicitReturnInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/finalizeNotRealImplicitReturnInt.kt");
        }

        @TestMetadata("protected.kt")
        public void testProtected() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/protected.kt");
        }

        @TestMetadata("protected2.kt")
        public void testProtected2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/protected2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract")
    public static class Abstract extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("classNoExplicitReceiver.kt")
        public void testClassNoExplicitReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/classNoExplicitReceiver.kt");
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/companion.kt");
        }

        @TestMetadata("explicitReceiverOfContainingClass.kt")
        public void testExplicitReceiverOfContainingClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/explicitReceiverOfContainingClass.kt");
        }

        @TestMetadata("inAbstractSuperclass.kt")
        public void testInAbstractSuperclass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/inAbstractSuperclass.kt");
        }

        @TestMetadata("inBaseInterface.kt")
        public void testInBaseInterface() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/inBaseInterface.kt");
        }

        @TestMetadata("inBaseInterfaceWithReceiver.kt")
        public void testInBaseInterfaceWithReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/inBaseInterfaceWithReceiver.kt");
        }

        @TestMetadata("inBaseInterfaceWithReceiver2.kt")
        public void testInBaseInterfaceWithReceiver2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/inBaseInterfaceWithReceiver2.kt");
        }

        @TestMetadata("interfaceNoExplicitReceiver.kt")
        public void testInterfaceNoExplicitReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/interfaceNoExplicitReceiver.kt");
        }

        @TestMetadata("noAbstractSuperclass.kt")
        public void testNoAbstractSuperclass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/noAbstractSuperclass.kt");
        }

        @TestMetadata("notAbstractClass.kt")
        public void testNotAbstractClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/notAbstractClass.kt");
        }

        @TestMetadata("notWritableAbstractSuperclass.kt")
        public void testNotWritableAbstractSuperclass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/notWritableAbstractSuperclass.kt");
        }

        @TestMetadata("otherExplicitReceiver.kt")
        public void testOtherExplicitReceiver() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/createFromUsage/createFunction/call/abstract/otherExplicitReceiver.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection")
    public static class ConvertCollection extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("arrayToArray.kt")
        public void testArrayToArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/arrayToArray.kt");
        }

        @TestMetadata("arrayToCollection.kt")
        public void testArrayToCollection() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/arrayToCollection.kt");
        }

        @TestMetadata("arrayToIterable.kt")
        public void testArrayToIterable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/arrayToIterable.kt");
        }

        @TestMetadata("arrayToList.kt")
        public void testArrayToList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/arrayToList.kt");
        }

        @TestMetadata("arrayToSequence.kt")
        public void testArrayToSequence() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/arrayToSequence.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/assignment.kt");
        }

        @TestMetadata("initializer.kt")
        public void testInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/initializer.kt");
        }

        @TestMetadata("iterableToArray.kt")
        public void testIterableToArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/iterableToArray.kt");
        }

        @TestMetadata("listToArray.kt")
        public void testListToArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/listToArray.kt");
        }

        @TestMetadata("listToArrayBinary.kt")
        public void testListToArrayBinary() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/listToArrayBinary.kt");
        }

        @TestMetadata("listToMutableList.kt")
        public void testListToMutableList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/listToMutableList.kt");
        }

        @TestMetadata("listToSequence.kt")
        public void testListToSequence() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/listToSequence.kt");
        }

        @TestMetadata("sequenceToArray.kt")
        public void testSequenceToArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/sequenceToArray.kt");
        }

        @TestMetadata("sequenceToList.kt")
        public void testSequenceToList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/convertCollection/sequenceToList.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral")
    public static class WrapWithCollectionLiteral extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/assignment.kt");
        }

        @TestMetadata("inAnnotation.kt")
        public void testInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/inAnnotation.kt");
        }

        @TestMetadata("initializer.kt")
        public void testInitializer() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/initializer.kt");
        }

        @TestMetadata("noMutableList.kt")
        public void testNoMutableList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/noMutableList.kt");
        }

        @TestMetadata("nullToListOfNullable.kt")
        public void testNullToListOfNullable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/nullToListOfNullable.kt");
        }

        @TestMetadata("returnEmptyArray.kt")
        public void testReturnEmptyArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/returnEmptyArray.kt");
        }

        @TestMetadata("returnEmptyCollection.kt")
        public void testReturnEmptyCollection() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/returnEmptyCollection.kt");
        }

        @TestMetadata("returnEmptyList.kt")
        public void testReturnEmptyList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/returnEmptyList.kt");
        }

        @TestMetadata("returnEmptySequence.kt")
        public void testReturnEmptySequence() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/returnEmptySequence.kt");
        }

        @TestMetadata("returnEmptySet.kt")
        public void testReturnEmptySet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/returnEmptySet.kt");
        }

        @TestMetadata("toArray.kt")
        public void testToArray() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/toArray.kt");
        }

        @TestMetadata("toCollection.kt")
        public void testToCollection() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/toCollection.kt");
        }

        @TestMetadata("toList.kt")
        public void testToList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/toList.kt");
        }

        @TestMetadata("toListInapplicableType.kt")
        public void testToListInapplicableType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/toListInapplicableType.kt");
        }

        @TestMetadata("toSequence.kt")
        public void testToSequence() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/toSequence.kt");
        }

        @TestMetadata("toSet.kt")
        public void testToSet() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/typeMismatch/wrapWithCollectionLiteral/toSet.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix")
    public static class RedundantInterpolationPrefix extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("prefix1.kt")
        public void testPrefix1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix/prefix1.kt");
        }

        @TestMetadata("prefix1Interpolation.kt")
        public void testPrefix1Interpolation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix/prefix1Interpolation.kt");
        }

        @TestMetadata("prefix2.kt")
        public void testPrefix2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix/prefix2.kt");
        }

        @TestMetadata("prefix2Interpolation.kt")
        public void testPrefix2Interpolation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix/prefix2Interpolation.kt");
        }

        @TestMetadata("prefix2InterpolationUnresolvedReference.kt")
        public void testPrefix2InterpolationUnresolvedReference() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix/prefix2InterpolationUnresolvedReference.kt");
        }

        @TestMetadata("prefix2NonInterpolationDollars1.kt")
        public void testPrefix2NonInterpolationDollars1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix/prefix2NonInterpolationDollars1.kt");
        }

        @TestMetadata("prefix2NonInterpolationDollars2.kt")
        public void testPrefix2NonInterpolationDollars2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix/prefix2NonInterpolationDollars2.kt");
        }

        @TestMetadata("prefix8.kt")
        public void testPrefix8() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix/prefix8.kt");
        }

        @TestMetadata("prefix8Interpolation.kt")
        public void testPrefix8Interpolation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantInterpolationPrefix/prefix8Interpolation.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary")
    public static class ConvertSecondaryConstructorToPrimary extends AbstractK2QuickFixTest {
        @java.lang.Override
        @org.jetbrains.annotations.NotNull
        public final KotlinPluginMode getPluginMode() {
            return KotlinPluginMode.K2;
        }

        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("assignmentToGlobalVariable.kt")
        public void testAssignmentToGlobalVariable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/assignmentToGlobalVariable.kt");
        }

        @TestMetadata("defaultValueChain.kt")
        public void testDefaultValueChain() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/defaultValueChain.kt");
        }

        @TestMetadata("init.kt")
        public void testInit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/init.kt");
        }

        @TestMetadata("initAndParams.kt")
        public void testInitAndParams() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/initAndParams.kt");
        }

        @TestMetadata("nonReachable.kt")
        public void testNonReachable() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/nonReachable.kt");
        }

        @TestMetadata("nonReachableLoop.kt")
        public void testNonReachableLoop() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/nonReachableLoop.kt");
        }

        @TestMetadata("propertyWithGetter.kt")
        public void testPropertyWithGetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/propertyWithGetter.kt");
        }

        @TestMetadata("propertyWithSetter.kt")
        public void testPropertyWithSetter() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/propertyWithSetter.kt");
        }

        @TestMetadata("protectedConstructor.kt")
        public void testProtectedConstructor() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/protectedConstructor.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/simple.kt");
        }

        @TestMetadata("useParam.kt")
        public void testUseParam() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/useParam.kt");
        }

        @TestMetadata("varArg.kt")
        public void testVarArg() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/varArg.kt");
        }

        @TestMetadata("varargVal.kt")
        public void testVarargVal() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/varargVal.kt");
        }

        @TestMetadata("withBaseAliasImplicit.kt")
        public void testWithBaseAliasImplicit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withBaseAliasImplicit.kt");
        }

        @TestMetadata("withBaseClass.kt")
        public void testWithBaseClass() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withBaseClass.kt");
        }

        @TestMetadata("withBaseClassImplicit.kt")
        public void testWithBaseClassImplicit() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withBaseClassImplicit.kt");
        }

        @TestMetadata("withBaseClassNoArgs.kt")
        public void testWithBaseClassNoArgs() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withBaseClassNoArgs.kt");
        }

        @TestMetadata("withComments.kt")
        public void testWithComments() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withComments.kt");
        }

        @TestMetadata("withComposedModifiers.kt")
        public void testWithComposedModifiers() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withComposedModifiers.kt");
        }

        @TestMetadata("withDelegation.kt")
        public void testWithDelegation() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withDelegation.kt");
        }

        @TestMetadata("withDifferentTypeProperty.kt")
        public void testWithDifferentTypeProperty() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withDifferentTypeProperty.kt");
        }

        @TestMetadata("withInterfaceAlias.kt")
        public void testWithInterfaceAlias() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withInterfaceAlias.kt");
        }

        @TestMetadata("withModifiers.kt")
        public void testWithModifiers() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withModifiers.kt");
        }

        @TestMetadata("withParameters.kt")
        public void testWithParameters() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withParameters.kt");
        }

        @TestMetadata("withPrimary.kt")
        public void testWithPrimary() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withPrimary.kt");
        }

        @TestMetadata("withProperties.kt")
        public void testWithProperties() throws Exception {
            runTest("../../../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withProperties.kt");
        }
    }
}
