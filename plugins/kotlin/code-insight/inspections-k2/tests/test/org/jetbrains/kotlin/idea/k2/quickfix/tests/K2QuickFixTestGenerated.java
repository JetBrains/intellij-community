// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.quickfix.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2QuickFixTestGenerated extends AbstractK2QuickFixTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantIf")
    public static class RedundantIf extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("assignExpression.kt")
        public void testAssignExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/assignExpression.kt");
        }

        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/assignment.kt");
        }

        @TestMetadata("assignmentFake.kt")
        public void testAssignmentFake() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/assignmentFake.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/comment.kt");
        }

        @TestMetadata("expression.kt")
        public void testExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/expression.kt");
        }

        @TestMetadata("expressionBody.kt")
        public void testExpressionBody() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/expressionBody.kt");
        }

        @TestMetadata("labeledReturn.kt")
        public void testLabeledReturn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/labeledReturn.kt");
        }

        @TestMetadata("negate.kt")
        public void testNegate() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/negate.kt");
        }

        @TestMetadata("negate2.kt")
        public void testNegate2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/negate2.kt");
        }

        @TestMetadata("negate3.kt")
        public void testNegate3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/negate3.kt");
        }

        @TestMetadata("notAvailableOnCondition.kt")
        public void testNotAvailableOnCondition() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/notAvailableOnCondition.kt");
        }

        @TestMetadata("returnWithoutElse.kt")
        public void testReturnWithoutElse() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse.kt");
        }

        @TestMetadata("returnWithoutElse2.kt")
        public void testReturnWithoutElse2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse2.kt");
        }

        @TestMetadata("returnWithoutElse3.kt")
        public void testReturnWithoutElse3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse3.kt");
        }

        @TestMetadata("returnWithoutElse4.kt")
        public void testReturnWithoutElse4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/returnWithoutElse4.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantIf/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/redundantModalityModifier")
    public static class RedundantModalityModifier extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("redundantAbstract.kt")
        public void testRedundantAbstract() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantModalityModifier/redundantAbstract.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/redundantModalityModifier/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate")
    public static class RemoveToStringInStringTemplate extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/call.kt");
        }

        @TestMetadata("name.kt")
        public void testName() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/name.kt");
        }

        @TestMetadata("nameWithPostfix.kt")
        public void testNameWithPostfix() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/nameWithPostfix.kt");
        }

        @TestMetadata("necessaryBrackets1.kt")
        public void testNecessaryBrackets1() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/necessaryBrackets1.kt");
        }

        @TestMetadata("necessaryBrackets2.kt")
        public void testNecessaryBrackets2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/necessaryBrackets2.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeToStringInStringTemplate/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/suppress")
    public abstract static class Suppress extends AbstractK2QuickFixTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/annotationPosition")
        public static class AnnotationPosition extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("paramWithModifier.kt")
            public void testParamWithModifier() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/paramWithModifier.kt");
            }

            @TestMetadata("topLevelFunctionModifierOnThePreviousLine.kt")
            public void testTopLevelFunctionModifierOnThePreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionModifierOnThePreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionModifierOnTheSameLine.kt")
            public void testTopLevelFunctionModifierOnTheSameLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionModifierOnTheSameLine.kt");
            }

            @TestMetadata("topLevelFunctionNoModifiers.kt")
            public void testTopLevelFunctionNoModifiers() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionNoModifiers.kt");
            }

            @TestMetadata("topLevelFunctionSuppressAnotherPreviousLine.kt")
            public void testTopLevelFunctionSuppressAnotherPreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressAnotherPreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressEmptyArgsPreviousLine.kt")
            public void testTopLevelFunctionSuppressEmptyArgsPreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressEmptyArgsPreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressNoArgsPreviousLine.kt")
            public void testTopLevelFunctionSuppressNoArgsPreviousLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressNoArgsPreviousLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressNoArgsTheSameLine.kt")
            public void testTopLevelFunctionSuppressNoArgsTheSameLine() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressNoArgsTheSameLine.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFile.kt")
            public void testTopLevelFunctionSuppressOnFile() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFile.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFileOtherAnnotation.kt")
            public void testTopLevelFunctionSuppressOnFileOtherAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFileOtherAnnotation.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFileWithPackage.kt")
            public void testTopLevelFunctionSuppressOnFileWithPackage() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFileWithPackage.kt");
            }

            @TestMetadata("topLevelFunctionSuppressOnFileWithSuppress.kt")
            public void testTopLevelFunctionSuppressOnFileWithSuppress() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionSuppressOnFileWithSuppress.kt");
            }

            @TestMetadata("topLevelFunctionUnrelatedAnnotation.kt")
            public void testTopLevelFunctionUnrelatedAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/annotationPosition/topLevelFunctionUnrelatedAnnotation.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/availability")
        public static class Availability extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inlineKeyword.kt")
            public void testInlineKeyword() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/inlineKeyword.kt");
            }

            @TestMetadata("localFunSuppressForLocal.kt")
            public void testLocalFunSuppressForLocal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localFunSuppressForLocal.kt");
            }

            @TestMetadata("localFunSuppressForOuter.kt")
            public void testLocalFunSuppressForOuter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localFunSuppressForOuter.kt");
            }

            @TestMetadata("localValSuppressForFun.kt")
            public void testLocalValSuppressForFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localValSuppressForFun.kt");
            }

            @TestMetadata("localValSuppressForVal.kt")
            public void testLocalValSuppressForVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/localValSuppressForVal.kt");
            }

            @TestMetadata("memberOfNestedSuppressForMember.kt")
            public void testMemberOfNestedSuppressForMember() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberOfNestedSuppressForMember.kt");
            }

            @TestMetadata("memberOfNestedSuppressForNested.kt")
            public void testMemberOfNestedSuppressForNested() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberOfNestedSuppressForNested.kt");
            }

            @TestMetadata("memberOfNestedSuppressForOuter.kt")
            public void testMemberOfNestedSuppressForOuter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberOfNestedSuppressForOuter.kt");
            }

            @TestMetadata("memberSuppressForClass.kt")
            public void testMemberSuppressForClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberSuppressForClass.kt");
            }

            @TestMetadata("memberSuppressForMember.kt")
            public void testMemberSuppressForMember() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/memberSuppressForMember.kt");
            }

            @TestMetadata("parameterSuppressForDestructuredLambdaFun.kt")
            public void testParameterSuppressForDestructuredLambdaFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/parameterSuppressForDestructuredLambdaFun.kt");
            }

            @TestMetadata("parameterSuppressForDestructuredLambdaParameter.kt")
            public void testParameterSuppressForDestructuredLambdaParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/parameterSuppressForDestructuredLambdaParameter.kt");
            }

            @TestMetadata("parameterSuppressForLambdaParameter.kt")
            public void testParameterSuppressForLambdaParameter() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/parameterSuppressForLambdaParameter.kt");
            }

            @TestMetadata("topLevelFunctionAlreadySuppressed.kt")
            public void testTopLevelFunctionAlreadySuppressed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/topLevelFunctionAlreadySuppressed.kt");
            }

            @TestMetadata("upperBound.kt")
            public void testUpperBound() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/availability/upperBound.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/declarationKinds")
        public static class DeclarationKinds extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("class.kt")
            public void testClass() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/class.kt");
            }

            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/classObject.kt");
            }

            @TestMetadata("enumEntry.kt")
            public void testEnumEntry() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/enumEntry.kt");
            }

            @TestMetadata("fun.kt")
            public void testFun() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/fun.kt");
            }

            @TestMetadata("interface.kt")
            public void testInterface() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/interface.kt");
            }

            @TestMetadata("multiVal.kt")
            public void testMultiVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/multiVal.kt");
            }

            @TestMetadata("multiVar.kt")
            public void testMultiVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/multiVar.kt");
            }

            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/object.kt");
            }

            @TestMetadata("param.kt")
            public void testParam() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/param.kt");
            }

            @TestMetadata("secondaryConstructor.kt")
            public void testSecondaryConstructor() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/secondaryConstructor.kt");
            }

            @TestMetadata("val.kt")
            public void testVal() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/val.kt");
            }

            @TestMetadata("var.kt")
            public void testVar() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/declarationKinds/var.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/errorRecovery")
        public static class ErrorRecovery extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("nonStringInSuppress.kt")
            public void testNonStringInSuppress() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/errorRecovery/nonStringInSuppress.kt");
            }

            @TestMetadata("unresolvedAnnotation.kt")
            public void testUnresolvedAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/errorRecovery/unresolvedAnnotation.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/external")
        public static class External extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("suppressActive.kt")
            public void testSuppressActive() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/external/suppressActive.kt");
            }

            @TestMetadata("suppressAvailable.kt")
            public void testSuppressAvailable() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/external/suppressAvailable.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/forStatement")
        public abstract static class ForStatement extends AbstractK2QuickFixTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable")
            public static class Unavailable extends AbstractK2QuickFixTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inAnnotationArgument.kt")
                public void testInAnnotationArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inAnnotationArgument.kt");
                }

                @TestMetadata("inClassHeader.kt")
                public void testInClassHeader() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inClassHeader.kt");
                }

                @TestMetadata("inDefaultArgument.kt")
                public void testInDefaultArgument() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inDefaultArgument.kt");
                }

                @TestMetadata("inExpressionBody.kt")
                public void testInExpressionBody() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inExpressionBody.kt");
                }

                @TestMetadata("inLocalValInitializer.kt")
                public void testInLocalValInitializer() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inLocalValInitializer.kt");
                }

                @TestMetadata("inParameterType.kt")
                public void testInParameterType() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inParameterType.kt");
                }

                @TestMetadata("inParameterTypeInFunctionLiteral.kt")
                public void testInParameterTypeInFunctionLiteral() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inParameterTypeInFunctionLiteral.kt");
                }

                @TestMetadata("inPropertyInitializer.kt")
                public void testInPropertyInitializer() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/inPropertyInitializer.kt");
                }

                @TestMetadata("objectLiteral.kt")
                public void testObjectLiteral() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/objectLiteral.kt");
                }

                @TestMetadata("objectLiteralInsideExpression.kt")
                public void testObjectLiteralInsideExpression() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/objectLiteralInsideExpression.kt");
                }

                @TestMetadata("supretype.kt")
                public void testSupretype() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/unavailable/supretype.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/forStatement")
            public static class Uncategorized extends AbstractK2QuickFixTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("andAnd.kt")
                public void testAndAnd() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/andAnd.kt");
                }

                @TestMetadata("annotatedExpr.kt")
                public void testAnnotatedExpr() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/annotatedExpr.kt");
                }

                @TestMetadata("annotatedExprWithSuppress.kt")
                public void testAnnotatedExprWithSuppress() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/annotatedExprWithSuppress.kt");
                }

                @TestMetadata("arrayRead.kt")
                public void testArrayRead() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/arrayRead.kt");
                }

                @TestMetadata("as.kt")
                public void testAs() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/as.kt");
                }

                @TestMetadata("asSafe.kt")
                public void testAsSafe() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/asSafe.kt");
                }

                @TestMetadata("assign.kt")
                public void testAssign() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/assign.kt");
                }

                @TestMetadata("call.kt")
                public void testCall() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/call.kt");
                }

                @TestMetadata("doWhile.kt")
                public void testDoWhile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/doWhile.kt");
                }

                @TestMetadata("dotQualified.kt")
                public void testDotQualified() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/dotQualified.kt");
                }

                @TestMetadata("elvis.kt")
                public void testElvis() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/elvis.kt");
                }

                @TestMetadata("eqEq.kt")
                public void testEqEq() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/eqEq.kt");
                }

                @TestMetadata("for.kt")
                public void testFor() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/for.kt");
                }

                @TestMetadata("if.kt")
                public void testIf() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/if.kt");
                }

                @TestMetadata("in.kt")
                public void testIn() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/in.kt");
                }

                @TestMetadata("infix.kt")
                public void testInfix() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/infix.kt");
                }

                @TestMetadata("is.kt")
                public void testIs() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/is.kt");
                }

                @TestMetadata("labeled.kt")
                public void testLabeled() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/labeled.kt");
                }

                @TestMetadata("less.kt")
                public void testLess() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/less.kt");
                }

                @TestMetadata("mul.kt")
                public void testMul() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/mul.kt");
                }

                @TestMetadata("orOr.kt")
                public void testOrOr() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/orOr.kt");
                }

                @TestMetadata("parenthesized.kt")
                public void testParenthesized() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/parenthesized.kt");
                }

                @TestMetadata("plus.kt")
                public void testPlus() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/plus.kt");
                }

                @TestMetadata("postfix.kt")
                public void testPostfix() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/postfix.kt");
                }

                @TestMetadata("postfixPlusPlus.kt")
                public void testPostfixPlusPlus() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/postfixPlusPlus.kt");
                }

                @TestMetadata("prefixPlusPlus.kt")
                public void testPrefixPlusPlus() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/prefixPlusPlus.kt");
                }

                @TestMetadata("range.kt")
                public void testRange() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/range.kt");
                }

                @TestMetadata("return.kt")
                public void testReturn() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/return.kt");
                }

                @TestMetadata("safeQualified.kt")
                public void testSafeQualified() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/safeQualified.kt");
                }

                @TestMetadata("simpleName.kt")
                public void testSimpleName() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/simpleName.kt");
                }

                @TestMetadata("stringTemplate.kt")
                public void testStringTemplate() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/stringTemplate.kt");
                }

                @TestMetadata("throw.kt")
                public void testThrow() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/throw.kt");
                }

                @TestMetadata("try.kt")
                public void testTry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/try.kt");
                }

                @TestMetadata("whenExpressionEntry.kt")
                public void testWhenExpressionEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenExpressionEntry.kt");
                }

                @TestMetadata("whenInEntry.kt")
                public void testWhenInEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenInEntry.kt");
                }

                @TestMetadata("whenIsEntry.kt")
                public void testWhenIsEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenIsEntry.kt");
                }

                @TestMetadata("whenSubject.kt")
                public void testWhenSubject() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/whenSubject.kt");
                }

                @TestMetadata("while.kt")
                public void testWhile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/forStatement/while.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/inspections")
        public abstract static class Inspections extends AbstractK2QuickFixTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure")
            public static class CodeStructure extends AbstractK2QuickFixTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("classSuppressedOnClass.kt")
                public void testClassSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classSuppressedOnClass.kt");
                }

                @TestMetadata("classSuppressedOnFile.kt")
                public void testClassSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classSuppressedOnFile.kt");
                }

                @TestMetadata("classTypeParameterSuppressedOnClass.kt")
                public void testClassTypeParameterSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classTypeParameterSuppressedOnClass.kt");
                }

                @TestMetadata("classTypeParameterSuppressedOnFile.kt")
                public void testClassTypeParameterSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classTypeParameterSuppressedOnFile.kt");
                }

                @TestMetadata("classTypeParameterSuppressedOnTypeParameter.kt")
                public void testClassTypeParameterSuppressedOnTypeParameter() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/classTypeParameterSuppressedOnTypeParameter.kt");
                }

                @TestMetadata("companionSuppressedOnClass.kt")
                public void testCompanionSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/companionSuppressedOnClass.kt");
                }

                @TestMetadata("companionSuppressedOnCompanion.kt")
                public void testCompanionSuppressedOnCompanion() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/companionSuppressedOnCompanion.kt");
                }

                @TestMetadata("companionSuppressedOnFile.kt")
                public void testCompanionSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/companionSuppressedOnFile.kt");
                }

                @TestMetadata("constructorSuppressedOnClass.kt")
                public void testConstructorSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/constructorSuppressedOnClass.kt");
                }

                @TestMetadata("constructorSuppressedOnConstructor.kt")
                public void testConstructorSuppressedOnConstructor() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/constructorSuppressedOnConstructor.kt");
                }

                @TestMetadata("constructorSuppressedOnFile.kt")
                public void testConstructorSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/constructorSuppressedOnFile.kt");
                }

                @TestMetadata("enumEntrySuppressedOnClass.kt")
                public void testEnumEntrySuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/enumEntrySuppressedOnClass.kt");
                }

                @TestMetadata("enumEntrySuppressedOnEnumEntry.kt")
                public void testEnumEntrySuppressedOnEnumEntry() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/enumEntrySuppressedOnEnumEntry.kt");
                }

                @TestMetadata("enumEntrySuppressedOnFile.kt")
                public void testEnumEntrySuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/enumEntrySuppressedOnFile.kt");
                }

                @TestMetadata("funTypeParameterSuppressedOnFun.kt")
                public void testFunTypeParameterSuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/funTypeParameterSuppressedOnFun.kt");
                }

                @TestMetadata("initializerSuppressedOnFile.kt")
                public void testInitializerSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/initializerSuppressedOnFile.kt");
                }

                @TestMetadata("initializerSuppressedOnFun.kt")
                public void testInitializerSuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/initializerSuppressedOnFun.kt");
                }

                @TestMetadata("initializerSuppressedOnInitializer.kt")
                public void testInitializerSuppressedOnInitializer() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/initializerSuppressedOnInitializer.kt");
                }

                @TestMetadata("interfaceSuppressedOnFile.kt")
                public void testInterfaceSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/interfaceSuppressedOnFile.kt");
                }

                @TestMetadata("interfaceSuppressedOnInterface.kt")
                public void testInterfaceSuppressedOnInterface() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/interfaceSuppressedOnInterface.kt");
                }

                @TestMetadata("objectSuppressedOnFile.kt")
                public void testObjectSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/objectSuppressedOnFile.kt");
                }

                @TestMetadata("objectSuppressedOnObject.kt")
                public void testObjectSuppressedOnObject() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/objectSuppressedOnObject.kt");
                }

                @TestMetadata("parameterSuppressedOnClass.kt")
                public void testParameterSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/parameterSuppressedOnClass.kt");
                }

                @TestMetadata("parameterSuppressedOnFile.kt")
                public void testParameterSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/parameterSuppressedOnFile.kt");
                }

                @TestMetadata("parameterSuppressedOnFun.kt")
                public void testParameterSuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/parameterSuppressedOnFun.kt");
                }

                @TestMetadata("parameterSuppressedOnParameter.kt")
                public void testParameterSuppressedOnParameter() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/parameterSuppressedOnParameter.kt");
                }

                @TestMetadata("propertySuppressedOnClass.kt")
                public void testPropertySuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/propertySuppressedOnClass.kt");
                }

                @TestMetadata("propertySuppressedOnFile.kt")
                public void testPropertySuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/propertySuppressedOnFile.kt");
                }

                @TestMetadata("propertySuppressedOnFun.kt")
                public void testPropertySuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/propertySuppressedOnFun.kt");
                }

                @TestMetadata("propertySuppressedOnProperty.kt")
                public void testPropertySuppressedOnProperty() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/propertySuppressedOnProperty.kt");
                }

                @TestMetadata("statementSuppressedOnAnonymous.kt")
                public void testStatementSuppressedOnAnonymous() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnAnonymous.kt");
                }

                @TestMetadata("statementSuppressedOnClass.kt")
                public void testStatementSuppressedOnClass() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnClass.kt");
                }

                @TestMetadata("statementSuppressedOnFile.kt")
                public void testStatementSuppressedOnFile() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnFile.kt");
                }

                @TestMetadata("statementSuppressedOnFun.kt")
                public void testStatementSuppressedOnFun() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnFun.kt");
                }

                @TestMetadata("statementSuppressedOnStatement.kt")
                public void testStatementSuppressedOnStatement() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnStatement.kt");
                }

                @TestMetadata("statementSuppressedOnStatementTop.kt")
                public void testStatementSuppressedOnStatementTop() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnStatementTop.kt");
                }

                @TestMetadata("statementSuppressedOnVal.kt")
                public void testStatementSuppressedOnVal() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/codeStructure/statementSuppressedOnVal.kt");
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/quickfix/suppress/inspections")
            public static class Uncategorized extends AbstractK2QuickFixTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("constantConditionIf.kt")
                public void testConstantConditionIf() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/constantConditionIf.kt");
                }

                @TestMetadata("redundantUnitReturn.kt")
                public void testRedundantUnitReturn() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/redundantUnitReturn.kt");
                }

                @TestMetadata("unusedImports.kt")
                public void testUnusedImports() throws Exception {
                    runTest("../../../idea/tests/testData/quickfix/suppress/inspections/unusedImports.kt");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/quickfix/suppress/redundant")
        public static class Redundant extends AbstractK2QuickFixTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("RedundantUnitReturn.kt")
            public void testRedundantUnitReturn() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/RedundantUnitReturn.kt");
            }

            @TestMetadata("RemoveAnnotation.kt")
            public void testRemoveAnnotation() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/RemoveAnnotation.kt");
            }

            @TestMetadata("RemoveAnnotationEntry.kt")
            public void testRemoveAnnotationEntry() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/RemoveAnnotationEntry.kt");
            }

            @TestMetadata("Suppressed.kt")
            public void testSuppressed() throws Exception {
                runTest("../../../idea/tests/testData/quickfix/suppress/redundant/Suppressed.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeAnnotation")
    public static class RemoveAnnotation extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("forbiddenRetentionSource.kt")
        public void testForbiddenRetentionSource() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/forbiddenRetentionSource.kt");
        }

        @TestMetadata("jvmField.kt")
        public void testJvmField() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/jvmField.kt");
        }

        @TestMetadata("jvmFieldOnOverridingProperty.kt")
        public void testJvmFieldOnOverridingProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/jvmFieldOnOverridingProperty.kt");
        }

        @TestMetadata("jvmOverloads.kt")
        public void testJvmOverloads() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/jvmOverloads.kt");
        }

        @TestMetadata("jvmOverloadsOnAnnotationClassConstructor.kt")
        public void testJvmOverloadsOnAnnotationClassConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/jvmOverloadsOnAnnotationClassConstructor.kt");
        }

        @TestMetadata("optInWithoutArguments.kt")
        public void testOptInWithoutArguments() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/optInWithoutArguments.kt");
        }

        @TestMetadata("setTargetOnGetter.kt")
        public void testSetTargetOnGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/setTargetOnGetter.kt");
        }

        @TestMetadata("useSiteGetDoesntHaveAnyEffect.kt")
        public void testUseSiteGetDoesntHaveAnyEffect() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/useSiteGetDoesntHaveAnyEffect.kt");
        }

        @TestMetadata("useSiteGetOnClass.kt")
        public void testUseSiteGetOnClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/useSiteGetOnClass.kt");
        }

        @TestMetadata("wrongExtenstionFunctionType.kt")
        public void testWrongExtenstionFunctionType() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/wrongExtenstionFunctionType.kt");
        }

        @TestMetadata("wrongExtenstionFunctionTypeWarning.kt")
        public void testWrongExtenstionFunctionTypeWarning() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeAnnotation/wrongExtenstionFunctionTypeWarning.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/optIn")
    public static class OptIn extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotationInTopLevelProperty.kt")
        public void testAnnotationInTopLevelProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/annotationInTopLevelProperty.kt");
        }

        @TestMetadata("appendFileAnnotationToAnnotationList.kt")
        public void testAppendFileAnnotationToAnnotationList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/appendFileAnnotationToAnnotationList.kt");
        }

        @TestMetadata("appendFileAnnotationToOtherFileAnnotations.kt")
        public void testAppendFileAnnotationToOtherFileAnnotations() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/appendFileAnnotationToOtherFileAnnotations.kt");
        }

        @TestMetadata("appendFileAnnotationWithAnnotationList.kt")
        public void testAppendFileAnnotationWithAnnotationList() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/appendFileAnnotationWithAnnotationList.kt");
        }

        @TestMetadata("basicFunction.kt")
        public void testBasicFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicFunction.kt");
        }

        @TestMetadata("basicFunctionContainingClass.kt")
        public void testBasicFunctionContainingClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicFunctionContainingClass.kt");
        }

        @TestMetadata("basicFunctionNotApplicable.kt")
        public void testBasicFunctionNotApplicable() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicFunctionNotApplicable.kt");
        }

        @TestMetadata("basicFunctionNotApplicableFir.kt")
        public void testBasicFunctionNotApplicableFir() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicFunctionNotApplicableFir.kt");
        }

        @TestMetadata("basicModule.kt")
        public void testBasicModule() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicModule.kt");
        }

        @TestMetadata("basicUseOptIn.kt")
        public void testBasicUseOptIn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/basicUseOptIn.kt");
        }

        @TestMetadata("classUseOptIn.kt")
        public void testClassUseOptIn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/classUseOptIn.kt");
        }

        @TestMetadata("existingFileAnnotationWithPackage.kt")
        public void testExistingFileAnnotationWithPackage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/existingFileAnnotationWithPackage.kt");
        }

        @TestMetadata("forbiddenTargetsExpression.kt")
        public void testForbiddenTargetsExpression() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/forbiddenTargetsExpression.kt");
        }

        @TestMetadata("forbiddenTargetsExpression2.kt")
        public void testForbiddenTargetsExpression2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/forbiddenTargetsExpression2.kt");
        }

        @TestMetadata("forbiddenTargetsInAnnotation.kt")
        public void testForbiddenTargetsInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/forbiddenTargetsInAnnotation.kt");
        }

        @TestMetadata("functionInLocalClass.kt")
        public void testFunctionInLocalClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/functionInLocalClass.kt");
        }

        @TestMetadata("getterUseSiteExplicit.kt")
        public void testGetterUseSiteExplicit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/getterUseSiteExplicit.kt");
        }

        @TestMetadata("getterUseSiteExplicitRemove.kt")
        public void testGetterUseSiteExplicitRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/getterUseSiteExplicitRemove.kt");
        }

        @TestMetadata("getterUseSiteImplicit.kt")
        public void testGetterUseSiteImplicit() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/getterUseSiteImplicit.kt");
        }

        @TestMetadata("getterUseSiteImplicitRemove.kt")
        public void testGetterUseSiteImplicitRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/getterUseSiteImplicitRemove.kt");
        }

        @TestMetadata("hasOptInAnnotation.kt")
        public void testHasOptInAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotation.kt");
        }

        @TestMetadata("hasOptInAnnotation2.kt")
        public void testHasOptInAnnotation2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotation2.kt");
        }

        @TestMetadata("hasOptInAnnotation3.kt")
        public void testHasOptInAnnotation3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotation3.kt");
        }

        @TestMetadata("hasOptInAnnotationForClass.kt")
        public void testHasOptInAnnotationForClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotationForClass.kt");
        }

        @TestMetadata("hasOptInAnnotationForClass2.kt")
        public void testHasOptInAnnotationForClass2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/hasOptInAnnotationForClass2.kt");
        }

        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/localFunction.kt");
        }

        @TestMetadata("localVariableAnnotationNoInitRemove.kt")
        public void testLocalVariableAnnotationNoInitRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/localVariableAnnotationNoInitRemove.kt");
        }

        @TestMetadata("localVariableAnnotationRemove.kt")
        public void testLocalVariableAnnotationRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/localVariableAnnotationRemove.kt");
        }

        @TestMetadata("localVariableNoGetterAction.kt")
        public void testLocalVariableNoGetterAction() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/localVariableNoGetterAction.kt");
        }

        @TestMetadata("nestedClasses.kt")
        public void testNestedClasses() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/nestedClasses.kt");
        }

        @TestMetadata("nestedClassesFir.kt")
        public void testNestedClassesFir() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/nestedClassesFir.kt");
        }

        @TestMetadata("newFileAnnotationWithPackage.kt")
        public void testNewFileAnnotationWithPackage() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/newFileAnnotationWithPackage.kt");
        }

        @TestMetadata("nonTopLevelAnnotation.kt")
        public void testNonTopLevelAnnotation() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/nonTopLevelAnnotation.kt");
        }

        @TestMetadata("nonTopLevelAnnotation2.kt")
        public void testNonTopLevelAnnotation2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/nonTopLevelAnnotation2.kt");
        }

        @TestMetadata("optInUnused.kt")
        public void testOptInUnused() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/optInUnused.kt");
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/override.kt");
        }

        @TestMetadata("overrideFir.kt")
        public void testOverrideFir() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/overrideFir.kt");
        }

        @TestMetadata("propagateOptIn.kt")
        public void testPropagateOptIn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn.kt");
        }

        @TestMetadata("propagateOptIn2.kt")
        public void testPropagateOptIn2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn2.kt");
        }

        @TestMetadata("propagateOptIn3.kt")
        public void testPropagateOptIn3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn3.kt");
        }

        @TestMetadata("propagateOptIn4.kt")
        public void testPropagateOptIn4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn4.kt");
        }

        @TestMetadata("propagateOptIn5.kt")
        public void testPropagateOptIn5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn5.kt");
        }

        @TestMetadata("propagateOptIn6.kt")
        public void testPropagateOptIn6() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn6.kt");
        }

        @TestMetadata("propagateOptIn7.kt")
        public void testPropagateOptIn7() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn7.kt");
        }

        @TestMetadata("propagateOptIn8.kt")
        public void testPropagateOptIn8() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn8.kt");
        }

        @TestMetadata("propagateOptIn8Fir.kt")
        public void testPropagateOptIn8Fir() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateOptIn8Fir.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired.kt")
        public void testPropagateSubclassOptInRequired() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired2.kt")
        public void testPropagateSubclassOptInRequired2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired2.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired3.kt")
        public void testPropagateSubclassOptInRequired3() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired3.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired4.kt")
        public void testPropagateSubclassOptInRequired4() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired4.kt");
        }

        @TestMetadata("propagateSubclassOptInRequired5.kt")
        public void testPropagateSubclassOptInRequired5() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propagateSubclassOptInRequired5.kt");
        }

        @TestMetadata("propertyInConstructor.kt")
        public void testPropertyInConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propertyInConstructor.kt");
        }

        @TestMetadata("propertyInConstructorAddOptInToClass.kt")
        public void testPropertyInConstructorAddOptInToClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propertyInConstructorAddOptInToClass.kt");
        }

        @TestMetadata("propertyInConstructorAddOptInToConstructor.kt")
        public void testPropertyInConstructorAddOptInToConstructor() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/propertyInConstructorAddOptInToConstructor.kt");
        }

        @TestMetadata("switchOn.kt")
        public void testSwitchOn() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/switchOn.kt");
        }

        @TestMetadata("switchOnWithAnotherMarker.kt")
        public void testSwitchOnWithAnotherMarker() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/switchOnWithAnotherMarker.kt");
        }

        @TestMetadata("typeAlias.kt")
        public void testTypeAlias() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/typeAlias.kt");
        }

        @TestMetadata("typeInTopLevelProperty.kt")
        public void testTypeInTopLevelProperty() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/typeInTopLevelProperty.kt");
        }

        @TestMetadata("valueParameterAnnotationAddExplicitUseSite.kt")
        public void testValueParameterAnnotationAddExplicitUseSite() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/valueParameterAnnotationAddExplicitUseSite.kt");
        }

        @TestMetadata("valueParameterAnnotationRemove.kt")
        public void testValueParameterAnnotationRemove() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/optIn/valueParameterAnnotationRemove.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/removeUseSiteTarget")
    public static class RemoveUseSiteTarget extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("setTargetOnGetter.kt")
        public void testSetTargetOnGetter() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/setTargetOnGetter.kt");
        }

        @TestMetadata("useSiteGetDoesntHaveAnyEffect.kt")
        public void testUseSiteGetDoesntHaveAnyEffect() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/useSiteGetDoesntHaveAnyEffect.kt");
        }

        @TestMetadata("useSiteGetOnClass.kt")
        public void testUseSiteGetOnClass() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/useSiteGetOnClass.kt");
        }

        @TestMetadata("whitespaces.kt")
        public void testWhitespaces() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/removeUseSiteTarget/whitespaces.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/quickfix/protectedInFinal")
    public static class ProtectedInFinal extends AbstractK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("finalizeNotReal.kt")
        public void testFinalizeNotReal() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/finalizeNotReal.kt");
        }

        @TestMetadata("finalizeNotRealImplicitReturnInt.kt")
        public void testFinalizeNotRealImplicitReturnInt() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/finalizeNotRealImplicitReturnInt.kt");
        }

        @TestMetadata("protected.kt")
        public void testProtected() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/protected.kt");
        }

        @TestMetadata("protected2.kt")
        public void testProtected2() throws Exception {
            runTest("../../../idea/tests/testData/quickfix/protectedInFinal/protected2.kt");
        }
    }
}
