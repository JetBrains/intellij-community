// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.inspections.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class K2InspectionTestGenerated extends AbstractK2InspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspections/enumValuesSoftDeprecateInJava")
    public abstract static class EnumValuesSoftDeprecateInJava extends AbstractK2InspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/enumValuesSoftDeprecateInJava/inspectionData")
        public static class InspectionData extends AbstractK2InspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inspections.test")
            public void testInspections_test() throws Exception {
                runTest("../../../idea/tests/testData/inspections/enumValuesSoftDeprecateInJava/inspectionData/inspections.test");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspections/enumValuesSoftDeprecateInKotlin")
    public abstract static class EnumValuesSoftDeprecateInKotlin extends AbstractK2InspectionTest {

    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspections/redundantUnitReturnType")
    public abstract static class RedundantUnitReturnType extends AbstractK2InspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/redundantUnitReturnType/inspectionData")
        public static class InspectionData extends AbstractK2InspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inspections.test")
            public void testInspections_test() throws Exception {
                runTest("../../../idea/tests/testData/inspections/redundantUnitReturnType/inspectionData/inspections.test");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspections/redundantIf")
    public abstract static class RedundantIf extends AbstractK2InspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/redundantIf/inspectionData")
        public static class InspectionData extends AbstractK2InspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inspections.test")
            public void testInspections_test() throws Exception {
                runTest("../../../idea/tests/testData/inspections/redundantIf/inspectionData/inspections.test");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspections/equalsAndHashCode")
    public abstract static class EqualsAndHashCode extends AbstractK2InspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/equalsAndHashCode/inspectionData")
        public static class InspectionData extends AbstractK2InspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inspections.test")
            public void testInspections_test() throws Exception {
                runTest("../../../idea/tests/testData/inspections/equalsAndHashCode/inspectionData/inspections.test");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspections/protectedInFinal")
    public abstract static class ProtectedInFinal extends AbstractK2InspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/protectedInFinal/inspectionData")
        public static class InspectionData extends AbstractK2InspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inspections.test")
            public void testInspections_test() throws Exception {
                runTest("../../../idea/tests/testData/inspections/protectedInFinal/inspectionData/inspections.test");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/intentions/convertToStringTemplate")
    public abstract static class ConvertToStringTemplate extends AbstractK2InspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/intentions/convertToStringTemplate/inspectionData")
        public static class InspectionData extends AbstractK2InspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("inspections.test")
            public void testInspections_test() throws Exception {
                runTest("../../../idea/tests/testData/intentions/convertToStringTemplate/inspectionData/inspections.test");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol")
    public abstract static class UnusedSymbol extends AbstractK2InspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/class")
        public abstract static class Class extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/class/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/class/inspectionData/inspections.test");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/enum")
        public abstract static class Enum extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/enum/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/enum/inspectionData/inspections.test");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/function")
        public abstract static class Function extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/function/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/function/inspectionData/inspections.test");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/functionMain")
        public abstract static class FunctionMain extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/functionMain/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/functionMain/inspectionData/inspections.test");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/js")
        public abstract static class Js extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/js/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/js/inspectionData/inspections.test");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/object")
        public abstract static class Object extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/object/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/object/inspectionData/inspections.test");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/parameter")
        public abstract static class Parameter extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/parameter/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/parameter/inspectionData/inspections.test");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/property")
        public abstract static class Property extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/property/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/property/inspectionData/inspections.test");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/typeAlias")
        public abstract static class TypeAlias extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/typeAlias/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/typeAlias/inspectionData/inspections.test");
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/typeParameter")
        public abstract static class TypeParameter extends AbstractK2InspectionTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../../idea/tests/testData/inspections/unusedSymbol/typeParameter/inspectionData")
            public static class InspectionData extends AbstractK2InspectionTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("inspections.test")
                public void testInspections_test() throws Exception {
                    runTest("../../../idea/tests/testData/inspections/unusedSymbol/typeParameter/inspectionData/inspections.test");
                }
            }
        }
    }
}
