// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.fe10bindings.inspections;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("k2-fe10-bindings")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class Fe10BindingIntentionTestGenerated extends AbstractFe10BindingIntentionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/intentions/conventionNameCalls")
    public abstract static class ConventionNameCalls extends AbstractFe10BindingIntentionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator")
        public static class ReplaceCallWithUnaryOperator extends AbstractFe10BindingIntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("complexPlus.kt")
            public void testComplexPlus() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/complexPlus.kt");
            }

            @TestMetadata("dec.kt")
            public void testDec() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/dec.kt");
            }

            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/extensionFunction.kt");
            }

            @TestMetadata("functionLiteralArgument.kt")
            public void testFunctionLiteralArgument() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/functionLiteralArgument.kt");
            }

            @TestMetadata("inc.kt")
            public void testInc() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/inc.kt");
            }

            @TestMetadata("minusSanityTest.kt")
            public void testMinusSanityTest() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/minusSanityTest.kt");
            }

            @TestMetadata("namedValueArgument.kt")
            public void testNamedValueArgument() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/namedValueArgument.kt");
            }

            @TestMetadata("notSanityTest.kt")
            public void testNotSanityTest() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/notSanityTest.kt");
            }

            @TestMetadata("plusPlus.kt")
            public void testPlusPlus() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/plusPlus.kt");
            }

            @TestMetadata("plusSanityTest.kt")
            public void testPlusSanityTest() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/plusSanityTest.kt");
            }

            @TestMetadata("qualifier.kt")
            public void testQualifier() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/qualifier.kt");
            }

            @TestMetadata("super.kt")
            public void testSuper() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/super.kt");
            }

            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/typeArguments.kt");
            }

            @TestMetadata("unacceptableVararg.kt")
            public void testUnacceptableVararg() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/unacceptableVararg.kt");
            }

            @TestMetadata("valueArgument.kt")
            public void testValueArgument() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceCallWithUnaryOperator/valueArgument.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/intentions/conventionNameCalls/replaceContains")
        public static class ReplaceContains extends AbstractFe10BindingIntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("containsFromJava.kt")
            public void testContainsFromJava() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/containsFromJava.kt");
            }

            @TestMetadata("containsInExpression.kt")
            public void testContainsInExpression() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/containsInExpression.kt");
            }

            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/extensionFunction.kt");
            }

            @TestMetadata("functionLiteralArgument.kt")
            public void testFunctionLiteralArgument() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/functionLiteralArgument.kt");
            }

            @TestMetadata("functionLiteralArgumentAfterSemicolon.kt")
            public void testFunctionLiteralArgumentAfterSemicolon() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/functionLiteralArgumentAfterSemicolon.kt");
            }

            @TestMetadata("functionLiteralArgumentAtStartOfBlock.kt")
            public void testFunctionLiteralArgumentAtStartOfBlock() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/functionLiteralArgumentAtStartOfBlock.kt");
            }

            @TestMetadata("functionLiteralArgumentInExpression.kt")
            public void testFunctionLiteralArgumentInExpression() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/functionLiteralArgumentInExpression.kt");
            }

            @TestMetadata("invalidArgument.kt")
            public void testInvalidArgument() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/invalidArgument.kt");
            }

            @TestMetadata("missingArgument.kt")
            public void testMissingArgument() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/missingArgument.kt");
            }

            @TestMetadata("missingDefaultArgument.kt")
            public void testMissingDefaultArgument() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/missingDefaultArgument.kt");
            }

            @TestMetadata("multipleArguments.kt")
            public void testMultipleArguments() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/multipleArguments.kt");
            }

            @TestMetadata("notContains.kt")
            public void testNotContains() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/notContains.kt");
            }

            @TestMetadata("qualifier.kt")
            public void testQualifier() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/qualifier.kt");
            }

            @TestMetadata("simpleArgument.kt")
            public void testSimpleArgument() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/simpleArgument.kt");
            }

            @TestMetadata("simpleStringLiteral.kt")
            public void testSimpleStringLiteral() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/simpleStringLiteral.kt");
            }

            @TestMetadata("super.kt")
            public void testSuper() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/super.kt");
            }

            @TestMetadata("twoArgsContainsFromJava.kt")
            public void testTwoArgsContainsFromJava() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/twoArgsContainsFromJava.kt");
            }

            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/typeArguments.kt");
            }

            @TestMetadata("unacceptableVararg1.kt")
            public void testUnacceptableVararg1() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/unacceptableVararg1.kt");
            }

            @TestMetadata("unacceptableVararg2.kt")
            public void testUnacceptableVararg2() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/unacceptableVararg2.kt");
            }

            @TestMetadata("withoutOperatorModifier.kt")
            public void testWithoutOperatorModifier() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceContains/withoutOperatorModifier.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke")
        public static class ReplaceInvoke extends AbstractFe10BindingIntentionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("dotQualifiedReceiver.kt")
            public void testDotQualifiedReceiver() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/dotQualifiedReceiver.kt");
            }

            @TestMetadata("dotQualifiedReceiver2.kt")
            public void testDotQualifiedReceiver2() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/dotQualifiedReceiver2.kt");
            }

            @TestMetadata("dotQualifiedReceiver3.kt")
            public void testDotQualifiedReceiver3() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/dotQualifiedReceiver3.kt");
            }

            @TestMetadata("expressionReceiver.kt")
            public void testExpressionReceiver() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/expressionReceiver.kt");
            }

            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/extensionFunction.kt");
            }

            @TestMetadata("functionLiteralInvoke.kt")
            public void testFunctionLiteralInvoke() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/functionLiteralInvoke.kt");
            }

            @TestMetadata("invokeInExpression.kt")
            public void testInvokeInExpression() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/invokeInExpression.kt");
            }

            @TestMetadata("invokeVariable.kt")
            public void testInvokeVariable() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/invokeVariable.kt");
            }

            @TestMetadata("java.kt")
            public void testJava() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/java.kt");
            }

            @TestMetadata("namedArgumentInvoke.kt")
            public void testNamedArgumentInvoke() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/namedArgumentInvoke.kt");
            }

            @TestMetadata("noArgumentInvoke.kt")
            public void testNoArgumentInvoke() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/noArgumentInvoke.kt");
            }

            @TestMetadata("notOperator.kt")
            public void testNotOperator() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/notOperator.kt");
            }

            @TestMetadata("typeAndValueArgument.kt")
            public void testTypeAndValueArgument() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/typeAndValueArgument.kt");
            }

            @TestMetadata("typeArgumentAndFunctionLiteral.kt")
            public void testTypeArgumentAndFunctionLiteral() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/typeArgumentAndFunctionLiteral.kt");
            }

            @TestMetadata("valueAndFunctionLiteralInvoke.kt")
            public void testValueAndFunctionLiteralInvoke() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/valueAndFunctionLiteralInvoke.kt");
            }

            @TestMetadata("valueArgumentInvoke.kt")
            public void testValueArgumentInvoke() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/valueArgumentInvoke.kt");
            }

            @TestMetadata("varargInvoke.kt")
            public void testVarargInvoke() throws Exception {
                runTest("../idea/tests/testData/intentions/conventionNameCalls/replaceInvoke/varargInvoke.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary")
    public static class ConvertSecondaryConstructorToPrimary extends AbstractFe10BindingIntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("assignmentToGlobalVariable.kt")
        public void testAssignmentToGlobalVariable() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/assignmentToGlobalVariable.kt");
        }

        @TestMetadata("defaultValueChain.kt")
        public void testDefaultValueChain() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/defaultValueChain.kt");
        }

        @TestMetadata("init.kt")
        public void testInit() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/init.kt");
        }

        @TestMetadata("initAndParams.kt")
        public void testInitAndParams() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/initAndParams.kt");
        }

        @TestMetadata("nonReachable.kt")
        public void testNonReachable() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/nonReachable.kt");
        }

        @TestMetadata("nonReachableLoop.kt")
        public void testNonReachableLoop() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/nonReachableLoop.kt");
        }

        @TestMetadata("propertyWithGetter.kt")
        public void testPropertyWithGetter() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/propertyWithGetter.kt");
        }

        @TestMetadata("propertyWithSetter.kt")
        public void testPropertyWithSetter() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/propertyWithSetter.kt");
        }

        @TestMetadata("protectedConstructor.kt")
        public void testProtectedConstructor() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/protectedConstructor.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/simple.kt");
        }

        @TestMetadata("useParam.kt")
        public void testUseParam() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/useParam.kt");
        }

        @TestMetadata("varArg.kt")
        public void testVarArg() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/varArg.kt");
        }

        @TestMetadata("varargVal.kt")
        public void testVarargVal() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/varargVal.kt");
        }

        @TestMetadata("withBaseAliasImplicit.kt")
        public void testWithBaseAliasImplicit() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withBaseAliasImplicit.kt");
        }

        @TestMetadata("withBaseClass.kt")
        public void testWithBaseClass() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withBaseClass.kt");
        }

        @TestMetadata("withBaseClassImplicit.kt")
        public void testWithBaseClassImplicit() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withBaseClassImplicit.kt");
        }

        @TestMetadata("withBaseClassNoArgs.kt")
        public void testWithBaseClassNoArgs() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withBaseClassNoArgs.kt");
        }

        @TestMetadata("withComments.kt")
        public void testWithComments() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withComments.kt");
        }

        @TestMetadata("withComposedModifiers.kt")
        public void testWithComposedModifiers() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withComposedModifiers.kt");
        }

        @TestMetadata("withDelegation.kt")
        public void testWithDelegation() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withDelegation.kt");
        }

        @TestMetadata("withDifferentTypeProperty.kt")
        public void testWithDifferentTypeProperty() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withDifferentTypeProperty.kt");
        }

        @TestMetadata("withInterfaceAlias.kt")
        public void testWithInterfaceAlias() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withInterfaceAlias.kt");
        }

        @TestMetadata("withModifiers.kt")
        public void testWithModifiers() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withModifiers.kt");
        }

        @TestMetadata("withParameters.kt")
        public void testWithParameters() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withParameters.kt");
        }

        @TestMetadata("withPrimary.kt")
        public void testWithPrimary() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withPrimary.kt");
        }

        @TestMetadata("withProperties.kt")
        public void testWithProperties() throws Exception {
            runTest("../idea/tests/testData/intentions/convertSecondaryConstructorToPrimary/withProperties.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/intentions/convertToStringTemplate")
    public static class ConvertToStringTemplate extends AbstractFe10BindingIntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("backslashNMultilineString.kt")
        public void testBackslashNMultilineString() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/backslashNMultilineString.kt");
        }

        @TestMetadata("combineEmptyStrings.kt")
        public void testCombineEmptyStrings() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/combineEmptyStrings.kt");
        }

        @TestMetadata("combinesNonStringsAsStrings.kt")
        public void testCombinesNonStringsAsStrings() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/combinesNonStringsAsStrings.kt");
        }

        @TestMetadata("combinesNonStringsAsStrings2.kt")
        public void testCombinesNonStringsAsStrings2() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/combinesNonStringsAsStrings2.kt");
        }

        @TestMetadata("comment.kt")
        public void testComment() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/comment.kt");
        }

        @TestMetadata("consecutiveNewlines.kt")
        public void testConsecutiveNewlines() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/consecutiveNewlines.kt");
        }

        @TestMetadata("doesNotCorruptExistingTemplate.kt")
        public void testDoesNotCorruptExistingTemplate() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/doesNotCorruptExistingTemplate.kt");
        }

        @TestMetadata("doesNotCorruptExistingTemplateWithBraces.kt")
        public void testDoesNotCorruptExistingTemplateWithBraces() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/doesNotCorruptExistingTemplateWithBraces.kt");
        }

        @TestMetadata("dollarSignChar.kt")
        public void testDollarSignChar() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/dollarSignChar.kt");
        }

        @TestMetadata("endOfLineComment.kt")
        public void testEndOfLineComment() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/endOfLineComment.kt");
        }

        @TestMetadata("escapedQuote.kt")
        public void testEscapedQuote() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/escapedQuote.kt");
        }

        @TestMetadata("escapedQuote2.kt")
        public void testEscapedQuote2() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/escapedQuote2.kt");
        }

        @TestMetadata("insertBracesForSimpleNamedExpression.kt")
        public void testInsertBracesForSimpleNamedExpression() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/insertBracesForSimpleNamedExpression.kt");
        }

        @TestMetadata("interpolate2StringConstants.kt")
        public void testInterpolate2StringConstants() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolate2StringConstants.kt");
        }

        @TestMetadata("interpolate2Vals.kt")
        public void testInterpolate2Vals() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolate2Vals.kt");
        }

        @TestMetadata("interpolate3Left.kt")
        public void testInterpolate3Left() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolate3Left.kt");
        }

        @TestMetadata("interpolate3Right.kt")
        public void testInterpolate3Right() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolate3Right.kt");
        }

        @TestMetadata("interpolateChar.kt")
        public void testInterpolateChar() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolateChar.kt");
        }

        @TestMetadata("interpolateDollarSign.kt")
        public void testInterpolateDollarSign() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolateDollarSign.kt");
        }

        @TestMetadata("interpolateMapAccess.kt")
        public void testInterpolateMapAccess() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolateMapAccess.kt");
        }

        @TestMetadata("interpolateMethodInvoke.kt")
        public void testInterpolateMethodInvoke() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolateMethodInvoke.kt");
        }

        @TestMetadata("interpolateMultiline.kt")
        public void testInterpolateMultiline() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolateMultiline.kt");
        }

        @TestMetadata("interpolateStringWithFloat.kt")
        public void testInterpolateStringWithFloat() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolateStringWithFloat.kt");
        }

        @TestMetadata("interpolateStringWithInt.kt")
        public void testInterpolateStringWithInt() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/interpolateStringWithInt.kt");
        }

        @TestMetadata("invalidChar.kt")
        public void testInvalidChar() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/invalidChar.kt");
        }

        @TestMetadata("kt11295.kt")
        public void testKt11295() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/kt11295.kt");
        }

        @TestMetadata("lambdaInParentheses.kt")
        public void testLambdaInParentheses() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/lambdaInParentheses.kt");
        }

        @TestMetadata("lambdaWithLabel.kt")
        public void testLambdaWithLabel() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/lambdaWithLabel.kt");
        }

        @TestMetadata("lambdaWithLabelInParentheses.kt")
        public void testLambdaWithLabelInParentheses() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/lambdaWithLabelInParentheses.kt");
        }

        @TestMetadata("longTemplatePlusStringLiteral.kt")
        public void testLongTemplatePlusStringLiteral() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/longTemplatePlusStringLiteral.kt");
        }

        @TestMetadata("multilineString.kt")
        public void testMultilineString() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/multilineString.kt");
        }

        @TestMetadata("newLine.kt")
        public void testNewLine() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/newLine.kt");
        }

        @TestMetadata("noBracesForLastSimpleExpression.kt")
        public void testNoBracesForLastSimpleExpression() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/noBracesForLastSimpleExpression.kt");
        }

        @TestMetadata("noBracesSimpleFollowedByDot.kt")
        public void testNoBracesSimpleFollowedByDot() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/noBracesSimpleFollowedByDot.kt");
        }

        @TestMetadata("notApplicableForErrorElement.kt")
        public void testNotApplicableForErrorElement() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/notApplicableForErrorElement.kt");
        }

        @TestMetadata("numberLiterals.kt")
        public void testNumberLiterals() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/numberLiterals.kt");
        }

        @TestMetadata("onMultipleLines.kt")
        public void testOnMultipleLines() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/onMultipleLines.kt");
        }

        @TestMetadata("onlyForConcat.kt")
        public void testOnlyForConcat() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/onlyForConcat.kt");
        }

        @TestMetadata("onlyForStrings.kt")
        public void testOnlyForStrings() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/onlyForStrings.kt");
        }

        @TestMetadata("plusOperatorReturnsString.kt")
        public void testPlusOperatorReturnsString() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/plusOperatorReturnsString.kt");
        }

        @TestMetadata("requiresPlusOperator.kt")
        public void testRequiresPlusOperator() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/requiresPlusOperator.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/simple.kt");
        }

        @TestMetadata("specialCharsInCharLiteral.kt")
        public void testSpecialCharsInCharLiteral() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/specialCharsInCharLiteral.kt");
        }

        @TestMetadata("stringPlusStringLiteral.kt")
        public void testStringPlusStringLiteral() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/stringPlusStringLiteral.kt");
        }

        @TestMetadata("superToString.kt")
        public void testSuperToString() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/superToString.kt");
        }

        @TestMetadata("templatePlusStringLiteral.kt")
        public void testTemplatePlusStringLiteral() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/templatePlusStringLiteral.kt");
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/this.kt");
        }

        @TestMetadata("this2.kt")
        public void testThis2() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/this2.kt");
        }

        @TestMetadata("this3.kt")
        public void testThis3() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/this3.kt");
        }

        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/toString.kt");
        }

        @TestMetadata("tricky.kt")
        public void testTricky() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/tricky.kt");
        }

        @TestMetadata("unescapeSingleQuote.kt")
        public void testUnescapeSingleQuote() throws Exception {
            runTest("../idea/tests/testData/intentions/convertToStringTemplate/unescapeSingleQuote.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/intentions/convertTryFinallyToUseCall")
    public static class ConvertTryFinallyToUseCall extends AbstractFe10BindingIntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("catch.kt")
        public void testCatch() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/catch.kt");
        }

        @TestMetadata("example.kt")
        public void testExample() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/example.kt");
        }

        @TestMetadata("implicitReceiver.kt")
        public void testImplicitReceiver() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/implicitReceiver.kt");
        }

        @TestMetadata("notClose.kt")
        public void testNotClose() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/notClose.kt");
        }

        @TestMetadata("notCloseableClose.kt")
        public void testNotCloseableClose() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/notCloseableClose.kt");
        }

        @TestMetadata("notCloseableClose2.kt")
        public void testNotCloseableClose2() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/notCloseableClose2.kt");
        }

        @TestMetadata("notOnlyClose.kt")
        public void testNotOnlyClose() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/notOnlyClose.kt");
        }

        @TestMetadata("parameter.kt")
        public void testParameter() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/parameter.kt");
        }

        @TestMetadata("safeCall.kt")
        public void testSafeCall() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/safeCall.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/simple.kt");
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/this.kt");
        }

        @TestMetadata("thisLabeled.kt")
        public void testThisLabeled() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/thisLabeled.kt");
        }

        @TestMetadata("triple.kt")
        public void testTriple() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/triple.kt");
        }

        @TestMetadata("wrongCaret.kt")
        public void testWrongCaret() throws Exception {
            runTest("../idea/tests/testData/intentions/convertTryFinallyToUseCall/wrongCaret.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods")
    public static class RemoveRedundantCallsOfConversionMethods extends AbstractFe10BindingIntentionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("booleanToInt.kt")
        public void testBooleanToInt() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/booleanToInt.kt");
        }

        @TestMetadata("byte.kt")
        public void testByte() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/byte.kt");
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/char.kt");
        }

        @TestMetadata("double.kt")
        public void testDouble() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/double.kt");
        }

        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/float.kt");
        }

        @TestMetadata("int.kt")
        public void testInt() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/int.kt");
        }

        @TestMetadata("long.kt")
        public void testLong() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/long.kt");
        }

        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/nullable.kt");
        }

        @TestMetadata("nullable2.kt")
        public void testNullable2() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/nullable2.kt");
        }

        @TestMetadata("safeString.kt")
        public void testSafeString() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/safeString.kt");
        }

        @TestMetadata("safeString2.kt")
        public void testSafeString2() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/safeString2.kt");
        }

        @TestMetadata("short.kt")
        public void testShort() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/short.kt");
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/string.kt");
        }

        @TestMetadata("toOtherType.kt")
        public void testToOtherType() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/toOtherType.kt");
        }

        @TestMetadata("uByte.kt")
        public void testUByte() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/uByte.kt");
        }

        @TestMetadata("uInt.kt")
        public void testUInt() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/uInt.kt");
        }

        @TestMetadata("uLong.kt")
        public void testULong() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/uLong.kt");
        }

        @TestMetadata("uShort.kt")
        public void testUShort() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/uShort.kt");
        }

        @TestMetadata("variable.kt")
        public void testVariable() throws Exception {
            runTest("../idea/tests/testData/intentions/removeRedundantCallsOfConversionMethods/variable.kt");
        }
    }
}
