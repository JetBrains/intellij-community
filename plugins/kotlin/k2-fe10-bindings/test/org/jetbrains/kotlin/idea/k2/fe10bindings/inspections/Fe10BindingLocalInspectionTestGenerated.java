// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.fe10bindings.inspections;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("k2-fe10-bindings")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class Fe10BindingLocalInspectionTestGenerated extends AbstractFe10BindingLocalInspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/addOperatorModifier")
    public static class AddOperatorModifier extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("containsBool.kt")
        public void testContainsBool() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/containsBool.kt");
        }

        @TestMetadata("containsInt.kt")
        public void testContainsInt() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/containsInt.kt");
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/extension.kt");
        }

        @TestMetadata("forOverride.kt")
        public void testForOverride() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/forOverride.kt");
        }

        @TestMetadata("overridden.kt")
        public void testOverridden() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/overridden.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/simple.kt");
        }

        @TestMetadata("toplevel.kt")
        public void testToplevel() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/toplevel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument")
    public static class BooleanLiteralArgument extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/boolean.kt");
        }

        @TestMetadata("booleanLiteral.kt")
        public void testBooleanLiteral() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteral.kt");
        }

        @TestMetadata("booleanLiteralFixAll.kt")
        public void testBooleanLiteralFixAll() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralFixAll.kt");
        }

        @TestMetadata("booleanLiteralFixPart.kt")
        public void testBooleanLiteralFixPart() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralFixPart.kt");
        }

        @TestMetadata("booleanLiteralMiddle.kt")
        public void testBooleanLiteralMiddle() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralMiddle.kt");
        }

        @TestMetadata("booleanLiteralNoPrevious.kt")
        public void testBooleanLiteralNoPrevious() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralNoPrevious.kt");
        }

        @TestMetadata("hasError.kt")
        public void testHasError() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/hasError.kt");
        }

        @TestMetadata("hasName.kt")
        public void testHasName() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/hasName.kt");
        }

        @TestMetadata("hasVararg.kt")
        public void testHasVararg() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/hasVararg.kt");
        }

        @TestMetadata("intLiteral.kt")
        public void testIntLiteral() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/intLiteral.kt");
        }

        @TestMetadata("javaMethod.kt")
        public void testJavaMethod() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/javaMethod.kt");
        }

        @TestMetadata("pair.kt")
        public void testPair() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/pair.kt");
        }

        @TestMetadata("triple.kt")
        public void testTriple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/triple.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/vararg.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject")
    public static class ConvertSealedSubClassToObject extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/annotation.kt");
        }

        @TestMetadata("baseEquals.kt")
        public void testBaseEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/baseEquals.kt");
        }

        @TestMetadata("baseState.kt")
        public void testBaseState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/baseState.kt");
        }

        @TestMetadata("convertSubClassFromAnotherFile.kt")
        public void testConvertSubClassFromAnotherFile() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassFromAnotherFile.kt");
        }

        @TestMetadata("convertSubClassWithModifiers.kt")
        public void testConvertSubClassWithModifiers() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithModifiers.kt");
        }

        @TestMetadata("convertSubClassWithParentheses.kt")
        public void testConvertSubClassWithParentheses() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithParentheses.kt");
        }

        @TestMetadata("convertSubClassWithSecondaryConstructor.kt")
        public void testConvertSubClassWithSecondaryConstructor() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithSecondaryConstructor.kt");
        }

        @TestMetadata("convertSubClassWithoutParentheses.kt")
        public void testConvertSubClassWithoutParentheses() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithoutParentheses.kt");
        }

        @TestMetadata("dataObject.kt")
        public void testDataObject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/dataObject.kt");
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/enum.kt");
        }

        @TestMetadata("fakeState.kt")
        public void testFakeState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/fakeState.kt");
        }

        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/generic.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/inner.kt");
        }

        @TestMetadata("noEquals.kt")
        public void testNoEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/noEquals.kt");
        }

        @TestMetadata("nonEmptyConstructor.kt")
        public void testNonEmptyConstructor() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/nonEmptyConstructor.kt");
        }

        @TestMetadata("openSubclass.kt")
        public void testOpenSubclass() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/openSubclass.kt");
        }

        @TestMetadata("ownEquals.kt")
        public void testOwnEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/ownEquals.kt");
        }

        @TestMetadata("ownState.kt")
        public void testOwnState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/ownState.kt");
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/sealed.kt");
        }

        @TestMetadata("sealedEquals.kt")
        public void testSealedEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/sealedEquals.kt");
        }

        @TestMetadata("sealedState.kt")
        public void testSealedState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/sealedState.kt");
        }

        @TestMetadata("withCompanion.kt")
        public void testWithCompanion() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/withCompanion.kt");
        }

        @TestMetadata("withInner.kt")
        public void testWithInner() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/withInner.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/cascadeIf")
    public static class CascadeIf extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cannotIntroduceSubject.kt")
        public void testCannotIntroduceSubject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/cannotIntroduceSubject.kt");
        }

        @TestMetadata("complex.kt")
        public void testComplex() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/complex.kt");
        }

        @TestMetadata("four.kt")
        public void testFour() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/four.kt");
        }

        @TestMetadata("ifTree.kt")
        public void testIfTree() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/ifTree.kt");
        }

        @TestMetadata("insideOtherIf.kt")
        public void testInsideOtherIf() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/insideOtherIf.kt");
        }

        @TestMetadata("middleIf.kt")
        public void testMiddleIf() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/middleIf.kt");
        }

        @TestMetadata("noSecondElse.kt")
        public void testNoSecondElse() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/noSecondElse.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/normal.kt");
        }

        @TestMetadata("oneLiner.kt")
        public void testOneLiner() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/oneLiner.kt");
        }

        @TestMetadata("shortIf.kt")
        public void testShortIf() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/shortIf.kt");
        }

        @TestMetadata("withAnnotation.kt")
        public void testWithAnnotation() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/withAnnotation.kt");
        }

        @TestMetadata("withBreak.kt")
        public void testWithBreak() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/withBreak.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence")
    public abstract static class ConvertCallChainIntoSequence extends AbstractFe10BindingLocalInspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination")
        public static class Termination extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("all.kt")
            public void testAll() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/all.kt");
            }

            @TestMetadata("any.kt")
            public void testAny() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/any.kt");
            }

            @TestMetadata("asIterable.kt")
            public void testAsIterable() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/asIterable.kt");
            }

            @TestMetadata("asSequence.kt")
            public void testAsSequence() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/asSequence.kt");
            }

            @TestMetadata("assosiate.kt")
            public void testAssosiate() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/assosiate.kt");
            }

            @TestMetadata("assosiateBy.kt")
            public void testAssosiateBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/assosiateBy.kt");
            }

            @TestMetadata("assosiateByTo.kt")
            public void testAssosiateByTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/assosiateByTo.kt");
            }

            @TestMetadata("assosiateTo.kt")
            public void testAssosiateTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/assosiateTo.kt");
            }

            @TestMetadata("average.kt")
            public void testAverage() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/average.kt");
            }

            @TestMetadata("contains.kt")
            public void testContains() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/contains.kt");
            }

            @TestMetadata("count.kt")
            public void testCount() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/count.kt");
            }

            @TestMetadata("elementAt.kt")
            public void testElementAt() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/elementAt.kt");
            }

            @TestMetadata("elementAtOrElse.kt")
            public void testElementAtOrElse() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/elementAtOrElse.kt");
            }

            @TestMetadata("elementAtOrNull.kt")
            public void testElementAtOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/elementAtOrNull.kt");
            }

            @TestMetadata("filterIndexedTo.kt")
            public void testFilterIndexedTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterIndexedTo.kt");
            }

            @TestMetadata("filterIsInstanceTo.kt")
            public void testFilterIsInstanceTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterIsInstanceTo.kt");
            }

            @TestMetadata("filterNotNullTo.kt")
            public void testFilterNotNullTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterNotNullTo.kt");
            }

            @TestMetadata("filterNotTo.kt")
            public void testFilterNotTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterNotTo.kt");
            }

            @TestMetadata("filterTo.kt")
            public void testFilterTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/filterTo.kt");
            }

            @TestMetadata("find.kt")
            public void testFind() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/find.kt");
            }

            @TestMetadata("findLast.kt")
            public void testFindLast() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/findLast.kt");
            }

            @TestMetadata("first.kt")
            public void testFirst() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/first.kt");
            }

            @TestMetadata("firstNotNullOf.kt")
            public void testFirstNotNullOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/firstNotNullOf.kt");
            }

            @TestMetadata("firstNotNullOfOrNull.kt")
            public void testFirstNotNullOfOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/firstNotNullOfOrNull.kt");
            }

            @TestMetadata("firstOrNull.kt")
            public void testFirstOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/firstOrNull.kt");
            }

            @TestMetadata("fold.kt")
            public void testFold() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/fold.kt");
            }

            @TestMetadata("foldIndexed.kt")
            public void testFoldIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/foldIndexed.kt");
            }

            @TestMetadata("forEach.kt")
            public void testForEach() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/forEach.kt");
            }

            @TestMetadata("forEachIndexed.kt")
            public void testForEachIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/forEachIndexed.kt");
            }

            @TestMetadata("groupBy.kt")
            public void testGroupBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/groupBy.kt");
            }

            @TestMetadata("groupByTo.kt")
            public void testGroupByTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/groupByTo.kt");
            }

            @TestMetadata("groupingBy.kt")
            public void testGroupingBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/groupingBy.kt");
            }

            @TestMetadata("indexOf.kt")
            public void testIndexOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/indexOf.kt");
            }

            @TestMetadata("indexOfFirst.kt")
            public void testIndexOfFirst() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/indexOfFirst.kt");
            }

            @TestMetadata("indexOfLast.kt")
            public void testIndexOfLast() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/indexOfLast.kt");
            }

            @TestMetadata("joinTo.kt")
            public void testJoinTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/joinTo.kt");
            }

            @TestMetadata("joinToString.kt")
            public void testJoinToString() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/joinToString.kt");
            }

            @TestMetadata("last.kt")
            public void testLast() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/last.kt");
            }

            @TestMetadata("lastIndexOf.kt")
            public void testLastIndexOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/lastIndexOf.kt");
            }

            @TestMetadata("lastOrNull.kt")
            public void testLastOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/lastOrNull.kt");
            }

            @TestMetadata("mapIndexedNotNullTo.kt")
            public void testMapIndexedNotNullTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/mapIndexedNotNullTo.kt");
            }

            @TestMetadata("mapIndexedTo.kt")
            public void testMapIndexedTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/mapIndexedTo.kt");
            }

            @TestMetadata("mapNotNullTo.kt")
            public void testMapNotNullTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/mapNotNullTo.kt");
            }

            @TestMetadata("mapTo.kt")
            public void testMapTo() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/mapTo.kt");
            }

            @TestMetadata("maxByOrNull.kt")
            public void testMaxByOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxByOrNull.kt");
            }

            @TestMetadata("maxOf.kt")
            public void testMaxOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOf.kt");
            }

            @TestMetadata("maxOfOrNull.kt")
            public void testMaxOfOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOfOrNull.kt");
            }

            @TestMetadata("maxOfWith.kt")
            public void testMaxOfWith() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOfWith.kt");
            }

            @TestMetadata("maxOfWithOrNull.kt")
            public void testMaxOfWithOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOfWithOrNull.kt");
            }

            @TestMetadata("maxOrNull.kt")
            public void testMaxOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxOrNull.kt");
            }

            @TestMetadata("maxWithOrNull.kt")
            public void testMaxWithOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/maxWithOrNull.kt");
            }

            @TestMetadata("minByOrNull.kt")
            public void testMinByOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minByOrNull.kt");
            }

            @TestMetadata("minOf.kt")
            public void testMinOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOf.kt");
            }

            @TestMetadata("minOfOrNull.kt")
            public void testMinOfOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOfOrNull.kt");
            }

            @TestMetadata("minOfWith.kt")
            public void testMinOfWith() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOfWith.kt");
            }

            @TestMetadata("minOfWithOrNull.kt")
            public void testMinOfWithOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOfWithOrNull.kt");
            }

            @TestMetadata("minOrNull.kt")
            public void testMinOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minOrNull.kt");
            }

            @TestMetadata("minWithOrNull.kt")
            public void testMinWithOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/minWithOrNull.kt");
            }

            @TestMetadata("none.kt")
            public void testNone() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/none.kt");
            }

            @TestMetadata("partition.kt")
            public void testPartition() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/partition.kt");
            }

            @TestMetadata("reduce.kt")
            public void testReduce() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/reduce.kt");
            }

            @TestMetadata("reduceIndexed.kt")
            public void testReduceIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/reduceIndexed.kt");
            }

            @TestMetadata("reduceIndexedOrNull.kt")
            public void testReduceIndexedOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/reduceIndexedOrNull.kt");
            }

            @TestMetadata("reduceOrNull.kt")
            public void testReduceOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/reduceOrNull.kt");
            }

            @TestMetadata("single.kt")
            public void testSingle() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/single.kt");
            }

            @TestMetadata("singleOrNull.kt")
            public void testSingleOrNull() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/singleOrNull.kt");
            }

            @TestMetadata("sum.kt")
            public void testSum() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/sum.kt");
            }

            @TestMetadata("sumBy.kt")
            public void testSumBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/sumBy.kt");
            }

            @TestMetadata("sumByDouble.kt")
            public void testSumByDouble() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/sumByDouble.kt");
            }

            @TestMetadata("sumOf.kt")
            public void testSumOf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/sumOf.kt");
            }

            @TestMetadata("toCollection.kt")
            public void testToCollection() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toCollection.kt");
            }

            @TestMetadata("toHashSet.kt")
            public void testToHashSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toHashSet.kt");
            }

            @TestMetadata("toList.kt")
            public void testToList() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toList.kt");
            }

            @TestMetadata("toMutableList.kt")
            public void testToMutableList() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toMutableList.kt");
            }

            @TestMetadata("toMutableSet.kt")
            public void testToMutableSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toMutableSet.kt");
            }

            @TestMetadata("toSet.kt")
            public void testToSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toSet.kt");
            }

            @TestMetadata("toSortedSet.kt")
            public void testToSortedSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/toSortedSet.kt");
            }

            @TestMetadata("unzip.kt")
            public void testUnzip() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/termination/unzip.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence")
        public static class Uncategorized extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("allTransformations.kt")
            public void testAllTransformations() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/allTransformations.kt");
            }

            @TestMetadata("comment.kt")
            public void testComment() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/comment.kt");
            }

            @TestMetadata("comment2.kt")
            public void testComment2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/comment2.kt");
            }

            @TestMetadata("endsWithGroupingBy.kt")
            public void testEndsWithGroupingBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/endsWithGroupingBy.kt");
            }

            @TestMetadata("flatten.kt")
            public void testFlatten() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/flatten.kt");
            }

            @TestMetadata("flatten2.kt")
            public void testFlatten2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/flatten2.kt");
            }

            @TestMetadata("implicitReceiver.kt")
            public void testImplicitReceiver() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/implicitReceiver.kt");
            }

            @TestMetadata("iterable.kt")
            public void testIterable() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/iterable.kt");
            }

            @TestMetadata("iterable2.kt")
            public void testIterable2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/iterable2.kt");
            }

            @TestMetadata("mutableList.kt")
            public void testMutableList() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/mutableList.kt");
            }

            @TestMetadata("mutableSet.kt")
            public void testMutableSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/mutableSet.kt");
            }

            @TestMetadata("noTargetCallChain.kt")
            public void testNoTargetCallChain() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetCallChain.kt");
            }

            @TestMetadata("noTargetCallChain2.kt")
            public void testNoTargetCallChain2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetCallChain2.kt");
            }

            @TestMetadata("noTargetCallChain3.kt")
            public void testNoTargetCallChain3() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetCallChain3.kt");
            }

            @TestMetadata("noTargetTermination.kt")
            public void testNoTargetTermination() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetTermination.kt");
            }

            @TestMetadata("noTargetTermination2.kt")
            public void testNoTargetTermination2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/noTargetTermination2.kt");
            }

            @TestMetadata("nullable.kt")
            public void testNullable() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/nullable.kt");
            }

            @TestMetadata("nullable2.kt")
            public void testNullable2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/nullable2.kt");
            }

            @TestMetadata("return.kt")
            public void testReturn() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/return.kt");
            }

            @TestMetadata("returnAtLabels.kt")
            public void testReturnAtLabels() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/returnAtLabels.kt");
            }

            @TestMetadata("runningFold.kt")
            public void testRunningFold() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/runningFold.kt");
            }

            @TestMetadata("runningFoldIndexed.kt")
            public void testRunningFoldIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/runningFoldIndexed.kt");
            }

            @TestMetadata("runningReduce.kt")
            public void testRunningReduce() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/runningReduce.kt");
            }

            @TestMetadata("runningReduceIndexed.kt")
            public void testRunningReduceIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/runningReduceIndexed.kt");
            }

            @TestMetadata("scan.kt")
            public void testScan() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/scan.kt");
            }

            @TestMetadata("scanIndexed.kt")
            public void testScanIndexed() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/scanIndexed.kt");
            }

            @TestMetadata("set.kt")
            public void testSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/set.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/simple.kt");
            }

            @TestMetadata("simple2.kt")
            public void testSimple2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/simple2.kt");
            }

            @TestMetadata("simple3.kt")
            public void testSimple3() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/simple3.kt");
            }

            @TestMetadata("simple4.kt")
            public void testSimple4() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/simple4.kt");
            }

            @TestMetadata("startsWithGroupingBy.kt")
            public void testStartsWithGroupingBy() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/collections/convertCallChainIntoSequence/startsWithGroupingBy.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/convertNaNEquality")
    public static class ConvertNaNEquality extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/float.kt");
        }

        @TestMetadata("importedProperty.kt")
        public void testImportedProperty() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/importedProperty.kt");
        }

        @TestMetadata("inequality.kt")
        public void testInequality() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/inequality.kt");
        }

        @TestMetadata("javaDouble.kt")
        public void testJavaDouble() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/javaDouble.kt");
        }

        @TestMetadata("javaFloatNaN.kt")
        public void testJavaFloatNaN() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/javaFloatNaN.kt");
        }

        @TestMetadata("negative.kt")
        public void testNegative() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/negative.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertNaNEquality/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/convertPairConstructorToToFunction")
    public static class ConvertPairConstructorToToFunction extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("invalidArgs.kt")
        public void testInvalidArgs() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertPairConstructorToToFunction/invalidArgs.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertPairConstructorToToFunction/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/copyWithoutNamedArguments")
    public static class CopyWithoutNamedArguments extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/copyWithoutNamedArguments/base.kt");
        }

        @TestMetadata("notAllNamed.kt")
        public void testNotAllNamed() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/copyWithoutNamedArguments/notAllNamed.kt");
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/copyWithoutNamedArguments/this.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject")
    public static class IntroduceWhenSubject extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("lineBreaksAndComments.kt")
        public void testLineBreaksAndComments() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/lineBreaksAndComments.kt");
        }

        @TestMetadata("qualified.kt")
        public void testQualified() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/qualified.kt");
        }

        @TestMetadata("qualified2.kt")
        public void testQualified2() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/qualified2.kt");
        }

        @TestMetadata("qualified3.kt")
        public void testQualified3() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/qualified3.kt");
        }

        @TestMetadata("qualified4.kt")
        public void testQualified4() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/qualified4.kt");
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/this.kt");
        }

        @TestMetadata("whenWithEqualityTests.kt")
        public void testWhenWithEqualityTests() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithEqualityTests.kt");
        }

        @TestMetadata("whenWithMultipleConditionTypes.kt")
        public void testWhenWithMultipleConditionTypes() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithMultipleConditionTypes.kt");
        }

        @TestMetadata("whenWithNegativePatterns.kt")
        public void testWhenWithNegativePatterns() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithNegativePatterns.kt");
        }

        @TestMetadata("whenWithNegativeRangeTests.kt")
        public void testWhenWithNegativeRangeTests() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithNegativeRangeTests.kt");
        }

        @TestMetadata("whenWithNondivisibleConditions.kt")
        public void testWhenWithNondivisibleConditions() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithNondivisibleConditions.kt");
        }

        @TestMetadata("whenWithPatterns.kt")
        public void testWhenWithPatterns() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithPatterns.kt");
        }

        @TestMetadata("whenWithRangeTests.kt")
        public void testWhenWithRangeTests() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithRangeTests.kt");
        }

        @TestMetadata("whenWithSubject.kt")
        public void testWhenWithSubject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithSubject.kt");
        }

        @TestMetadata("whenWithSwappedEqualityTests.kt")
        public void testWhenWithSwappedEqualityTests() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithSwappedEqualityTests.kt");
        }

        @TestMetadata("whenWithUnmatchedCandidateSubjects.kt")
        public void testWhenWithUnmatchedCandidateSubjects() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/branched/introduceWhenSubject/whenWithUnmatchedCandidateSubjects.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/kdocMissingDocumentation")
    public static class KdocMissingDocumentation extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("primaryConstructorProperty.kt")
        public void testPrimaryConstructorProperty() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/kdocMissingDocumentation/primaryConstructorProperty.kt");
        }

        @TestMetadata("primaryConstructorPropertyAsParam.kt")
        public void testPrimaryConstructorPropertyAsParam() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/kdocMissingDocumentation/primaryConstructorPropertyAsParam.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/kdocMissingDocumentation/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/forEachParameterNotUsed")
    public static class ForEachParameterNotUsed extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("invoke.kt")
        public void testInvoke() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/forEachParameterNotUsed/invoke.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/forEachParameterNotUsed/normal.kt");
        }

        @TestMetadata("repeat.kt")
        public void testRepeat() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/forEachParameterNotUsed/repeat.kt");
        }

        @TestMetadata("safe.kt")
        public void testSafe() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/forEachParameterNotUsed/safe.kt");
        }

        @TestMetadata("sequence.kt")
        public void testSequence() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/forEachParameterNotUsed/sequence.kt");
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/forEachParameterNotUsed/string.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/covariantEquals")
    public static class CovariantEquals extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/basic.kt");
        }

        @TestMetadata("hasOverriddenAnyEquals.kt")
        public void testHasOverriddenAnyEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/hasOverriddenAnyEquals.kt");
        }

        @TestMetadata("inCompanion.kt")
        public void testInCompanion() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/inCompanion.kt");
        }

        @TestMetadata("inObject.kt")
        public void testInObject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/inObject.kt");
        }

        @TestMetadata("inObjectLiteral.kt")
        public void testInObjectLiteral() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/inObjectLiteral.kt");
        }

        @TestMetadata("local.kt")
        public void testLocal() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/local.kt");
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/override.kt");
        }

        @TestMetadata("overrideAnyEquals.kt")
        public void testOverrideAnyEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/overrideAnyEquals.kt");
        }

        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/topLevel.kt");
        }

        @TestMetadata("twoParameters.kt")
        public void testTwoParameters() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/covariantEquals/twoParameters.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/lateinitVarOverridesLateinitVar")
    public static class LateinitVarOverridesLateinitVar extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/lateinitVarOverridesLateinitVar/basic.kt");
        }

        @TestMetadata("notLateinit.kt")
        public void testNotLateinit() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/lateinitVarOverridesLateinitVar/notLateinit.kt");
        }

        @TestMetadata("notLateinit2.kt")
        public void testNotLateinit2() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/lateinitVarOverridesLateinitVar/notLateinit2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis")
    public static class FoldInitializerAndIfToElvis extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("Break.kt")
        public void testBreak() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/Break.kt");
        }

        @TestMetadata("CommentInBlock.kt")
        public void testCommentInBlock() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/CommentInBlock.kt");
        }

        @TestMetadata("Comments.kt")
        public void testComments() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/Comments.kt");
        }

        @TestMetadata("Comments2.kt")
        public void testComments2() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/Comments2.kt");
        }

        @TestMetadata("ComplexExpression.kt")
        public void testComplexExpression() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/ComplexExpression.kt");
        }

        @TestMetadata("Continue.kt")
        public void testContinue() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/Continue.kt");
        }

        @TestMetadata("ExplicitValType.kt")
        public void testExplicitValType() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/ExplicitValType.kt");
        }

        @TestMetadata("ExplicitVarType.kt")
        public void testExplicitVarType() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/ExplicitVarType.kt");
        }

        @TestMetadata("IfNotNull.kt")
        public void testIfNotNull() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/IfNotNull.kt");
        }

        @TestMetadata("ifStatementPriority.kt")
        public void testIfStatementPriority() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/ifStatementPriority.kt");
        }

        @TestMetadata("InitializerWithElvis.kt")
        public void testInitializerWithElvis() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/InitializerWithElvis.kt");
        }

        @TestMetadata("InitializerWithElvis2.kt")
        public void testInitializerWithElvis2() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/InitializerWithElvis2.kt");
        }

        @TestMetadata("IsSameType.kt")
        public void testIsSameType() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/IsSameType.kt");
        }

        @TestMetadata("IsSideTypeFake.kt")
        public void testIsSideTypeFake() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/IsSideTypeFake.kt");
        }

        @TestMetadata("IsSubType.kt")
        public void testIsSubType() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/IsSubType.kt");
        }

        @TestMetadata("IsSuperTypeFake.kt")
        public void testIsSuperTypeFake() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/IsSuperTypeFake.kt");
        }

        @TestMetadata("LongName.kt")
        public void testLongName() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/LongName.kt");
        }

        @TestMetadata("LongName2.kt")
        public void testLongName2() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/LongName2.kt");
        }

        @TestMetadata("MultiLineInitializer.kt")
        public void testMultiLineInitializer() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/MultiLineInitializer.kt");
        }

        @TestMetadata("MultiStatementBlock.kt")
        public void testMultiStatementBlock() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/MultiStatementBlock.kt");
        }

        @TestMetadata("NotExit.kt")
        public void testNotExit() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/NotExit.kt");
        }

        @TestMetadata("NotIs.kt")
        public void testNotIs() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/NotIs.kt");
        }

        @TestMetadata("NotIsNullableType.kt")
        public void testNotIsNullableType() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/NotIsNullableType.kt");
        }

        @TestMetadata("OtherVar1.kt")
        public void testOtherVar1() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/OtherVar1.kt");
        }

        @TestMetadata("OtherVar2.kt")
        public void testOtherVar2() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/OtherVar2.kt");
        }

        @TestMetadata("Return.kt")
        public void testReturn() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/Return.kt");
        }

        @TestMetadata("ThrowInBlock.kt")
        public void testThrowInBlock() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/ThrowInBlock.kt");
        }

        @TestMetadata("UsedInside.kt")
        public void testUsedInside() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/UsedInside.kt");
        }

        @TestMetadata("UsedInsideInTemplate.kt")
        public void testUsedInsideInTemplate() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/UsedInsideInTemplate.kt");
        }

        @TestMetadata("Var.kt")
        public void testVar() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/Var.kt");
        }

        @TestMetadata("VarUsedAsNotNullable.kt")
        public void testVarUsedAsNotNullable() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/VarUsedAsNotNullable.kt");
        }

        @TestMetadata("VarUsedAsNotNullable2.kt")
        public void testVarUsedAsNotNullable2() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/VarUsedAsNotNullable2.kt");
        }

        @TestMetadata("VarUsedAsNullable.kt")
        public void testVarUsedAsNullable() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/VarUsedAsNullable.kt");
        }

        @TestMetadata("VarUsedAsNullable2.kt")
        public void testVarUsedAsNullable2() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/foldInitializerAndIfToElvis/VarUsedAsNullable2.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/mapGetWithNotNullAssertionOperator")
    public static class MapGetWithNotNullAssertionOperator extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("get.kt")
        public void testGet() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/mapGetWithNotNullAssertionOperator/get.kt");
        }

        @TestMetadata("getValue.kt")
        public void testGetValue() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/mapGetWithNotNullAssertionOperator/getValue.kt");
        }

        @TestMetadata("indexedAccess.kt")
        public void testIndexedAccess() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/mapGetWithNotNullAssertionOperator/indexedAccess.kt");
        }

        @TestMetadata("list.kt")
        public void testList() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/mapGetWithNotNullAssertionOperator/list.kt");
        }

        @TestMetadata("noNotNullAssersion.kt")
        public void testNoNotNullAssersion() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/mapGetWithNotNullAssertionOperator/noNotNullAssersion.kt");
        }

        @TestMetadata("replaceWithElvisError.kt")
        public void testReplaceWithElvisError() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/mapGetWithNotNullAssertionOperator/replaceWithElvisError.kt");
        }

        @TestMetadata("replaceWithGetOrElse.kt")
        public void testReplaceWithGetOrElse() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/mapGetWithNotNullAssertionOperator/replaceWithGetOrElse.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/memberVisibilityCanBePrivate")
    public static class MemberVisibilityCanBePrivate extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/memberVisibilityCanBePrivate/annotation.kt");
        }

        @TestMetadata("JvmFieldOnParameter.kt")
        public void testJvmFieldOnParameter() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/memberVisibilityCanBePrivate/JvmFieldOnParameter.kt");
        }

        @TestMetadata("JvmFieldOnProperty.kt")
        public void testJvmFieldOnProperty() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/memberVisibilityCanBePrivate/JvmFieldOnProperty.kt");
        }

        @TestMetadata("sameClassFunctionCall.kt")
        public void testSameClassFunctionCall() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/memberVisibilityCanBePrivate/sameClassFunctionCall.kt");
        }

        @TestMetadata("subClassFunctionCall.kt")
        public void testSubClassFunctionCall() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/memberVisibilityCanBePrivate/subClassFunctionCall.kt");
        }

        @TestMetadata("subObjectFunctionCall.kt")
        public void testSubObjectFunctionCall() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/memberVisibilityCanBePrivate/subObjectFunctionCall.kt");
        }

        @TestMetadata("usedInAnnotationOnContainingObject.kt")
        public void testUsedInAnnotationOnContainingObject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/memberVisibilityCanBePrivate/usedInAnnotationOnContainingObject.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/redundantObjectTypeCheck")
    public static class RedundantObjectTypeCheck extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("isClass.kt")
        public void testIsClass() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantObjectTypeCheck/isClass.kt");
        }

        @TestMetadata("isClassWhenEntry.kt")
        public void testIsClassWhenEntry() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantObjectTypeCheck/isClassWhenEntry.kt");
        }

        @TestMetadata("isNotObject.kt")
        public void testIsNotObject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantObjectTypeCheck/isNotObject.kt");
        }

        @TestMetadata("isNotObjectWhenEntry.kt")
        public void testIsNotObjectWhenEntry() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantObjectTypeCheck/isNotObjectWhenEntry.kt");
        }

        @TestMetadata("isObject.kt")
        public void testIsObject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantObjectTypeCheck/isObject.kt");
        }

        @TestMetadata("isObjectWhenEntry.kt")
        public void testIsObjectWhenEntry() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantObjectTypeCheck/isObjectWhenEntry.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/redundantSuspend")
    public static class RedundantSuspend extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("actual.kt")
        public void testActual() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantSuspend/actual.kt");
        }

        @TestMetadata("coroutineContext.kt")
        public void testCoroutineContext() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantSuspend/coroutineContext.kt");
        }

        @TestMetadata("invokingByQualified.kt")
        public void testInvokingByQualified() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantSuspend/invokingByQualified.kt");
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantSuspend/override.kt");
        }

        @TestMetadata("parenthesized.kt")
        public void testParenthesized() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantSuspend/parenthesized.kt");
        }

        @TestMetadata("recursiveCall.kt")
        public void testRecursiveCall() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantSuspend/recursiveCall.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/redundantExplicitType")
    public static class RedundantExplicitType extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotated.kt")
        public void testAnnotated() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/annotated.kt");
        }

        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/boolean.kt");
        }

        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/char.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/constructor.kt");
        }

        @TestMetadata("double.kt")
        public void testDouble() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/double.kt");
        }

        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/float.kt");
        }

        @TestMetadata("int.kt")
        public void testInt() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/int.kt");
        }

        @TestMetadata("intExpr.kt")
        public void testIntExpr() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/intExpr.kt");
        }

        @TestMetadata("interface.kt")
        public void testInterface() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/interface.kt");
        }

        @TestMetadata("interfaceWithCompanionObject.kt")
        public void testInterfaceWithCompanionObject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/interfaceWithCompanionObject.kt");
        }

        @TestMetadata("long.kt")
        public void testLong() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/long.kt");
        }

        @TestMetadata("member.kt")
        public void testMember() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/member.kt");
        }

        @TestMetadata("null.kt")
        public void testNull() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/null.kt");
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/object.kt");
        }

        @TestMetadata("short.kt")
        public void testShort() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/short.kt");
        }

        @TestMetadata("string.kt")
        public void testString() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/string.kt");
        }

        @TestMetadata("top.kt")
        public void testTop() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/top.kt");
        }

        @TestMetadata("typealias.kt")
        public void testTypealias() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/redundantExplicitType/typealias.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals")
    public static class ReplaceArrayEqualityOpWithArraysEquals extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("arrayAndOtherTypeEQEQ.kt")
        public void testArrayAndOtherTypeEQEQ() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals/arrayAndOtherTypeEQEQ.kt");
        }

        @TestMetadata("arrayEQEQ.kt")
        public void testArrayEQEQ() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals/arrayEQEQ.kt");
        }

        @TestMetadata("arrayEXCLEQ.kt")
        public void testArrayEXCLEQ() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals/arrayEXCLEQ.kt");
        }

        @TestMetadata("primitiveArrayEQEQ.kt")
        public void testPrimitiveArrayEQEQ() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/replaceArrayEqualityOpWithArraysEquals/primitiveArrayEQEQ.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction")
    public abstract static class ReplaceAssociateFunction extends AbstractFe10BindingLocalInspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateBy")
        public static class AssociateBy extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateBy/array.kt");
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateBy/basic.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByKeyAndValue")
        public static class AssociateByKeyAndValue extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByKeyAndValue/array.kt");
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByKeyAndValue/basic.kt");
            }

            @TestMetadata("basic2.kt")
            public void testBasic2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByKeyAndValue/basic2.kt");
            }

            @TestMetadata("basic3.kt")
            public void testBasic3() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByKeyAndValue/basic3.kt");
            }

            @TestMetadata("basic4.kt")
            public void testBasic4() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByKeyAndValue/basic4.kt");
            }

            @TestMetadata("basic5.kt")
            public void testBasic5() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByKeyAndValue/basic5.kt");
            }

            @TestMetadata("notSingle.kt")
            public void testNotSingle() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByKeyAndValue/notSingle.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByTo")
        public static class AssociateByTo extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByTo/array.kt");
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByTo/basic.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByToKeyAndValue")
        public static class AssociateByToKeyAndValue extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByToKeyAndValue/array.kt");
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByToKeyAndValue/basic.kt");
            }

            @TestMetadata("basic2.kt")
            public void testBasic2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByToKeyAndValue/basic2.kt");
            }

            @TestMetadata("basic3.kt")
            public void testBasic3() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByToKeyAndValue/basic3.kt");
            }

            @TestMetadata("basic4.kt")
            public void testBasic4() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateByToKeyAndValue/basic4.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith")
        public static class AssociateWith extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/array.kt");
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/basic.kt");
            }

            @TestMetadata("basic2.kt")
            public void testBasic2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/basic2.kt");
            }

            @TestMetadata("basic3.kt")
            public void testBasic3() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/basic3.kt");
            }

            @TestMetadata("basic4.kt")
            public void testBasic4() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/basic4.kt");
            }

            @TestMetadata("basic5.kt")
            public void testBasic5() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/basic5.kt");
            }

            @TestMetadata("intArray.kt")
            public void testIntArray() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/intArray.kt");
            }

            @TestMetadata("intArrayVersion13.kt")
            public void testIntArrayVersion13() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/intArrayVersion13.kt");
            }

            @TestMetadata("labeledReturn.kt")
            public void testLabeledReturn() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/labeledReturn.kt");
            }

            @TestMetadata("multiLine.kt")
            public void testMultiLine() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/multiLine.kt");
            }

            @TestMetadata("notPair.kt")
            public void testNotPair() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/notPair.kt");
            }

            @TestMetadata("sequence.kt")
            public void testSequence() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/sequence.kt");
            }

            @TestMetadata("set.kt")
            public void testSet() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWith/set.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWithTo")
        public static class AssociateWithTo extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWithTo/array.kt");
            }

            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWithTo/basic.kt");
            }

            @TestMetadata("basic2.kt")
            public void testBasic2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWithTo/basic2.kt");
            }

            @TestMetadata("basic3.kt")
            public void testBasic3() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWithTo/basic3.kt");
            }

            @TestMetadata("basic4.kt")
            public void testBasic4() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWithTo/basic4.kt");
            }

            @TestMetadata("basic5.kt")
            public void testBasic5() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceAssociateFunction/associateWithTo/basic5.kt");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty")
    public abstract static class ReplaceIsEmptyWithIfEmpty extends AbstractFe10BindingLocalInspectionTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/array")
        public static class Array extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("isEmpty.kt")
            public void testIsEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/array/isEmpty.kt");
            }

            @TestMetadata("isNotEmpty.kt")
            public void testIsNotEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/array/isNotEmpty.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/collection")
        public static class Collection extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("isEmpty.kt")
            public void testIsEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/collection/isEmpty.kt");
            }

            @TestMetadata("isNotEmpty.kt")
            public void testIsNotEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/collection/isNotEmpty.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/intArray")
        public static class IntArray extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("isEmpty.kt")
            public void testIsEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/intArray/isEmpty.kt");
            }

            @TestMetadata("isNotEmpty.kt")
            public void testIsNotEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/intArray/isNotEmpty.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/list")
        public static class List extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("isEmpty.kt")
            public void testIsEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/list/isEmpty.kt");
            }

            @TestMetadata("isNotEmpty.kt")
            public void testIsNotEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/list/isNotEmpty.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/map")
        public static class Map extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("isEmpty.kt")
            public void testIsEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/map/isEmpty.kt");
            }

            @TestMetadata("isNotEmpty.kt")
            public void testIsNotEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/map/isNotEmpty.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/set")
        public static class Set extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("isEmpty.kt")
            public void testIsEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/set/isEmpty.kt");
            }

            @TestMetadata("isNotEmpty.kt")
            public void testIsNotEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/set/isNotEmpty.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/str")
        public static class Str extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("isBlank.kt")
            public void testIsBlank() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/str/isBlank.kt");
            }

            @TestMetadata("isEmpty.kt")
            public void testIsEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/str/isEmpty.kt");
            }

            @TestMetadata("isNotBlank.kt")
            public void testIsNotBlank() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/str/isNotBlank.kt");
            }

            @TestMetadata("isNotEmpty.kt")
            public void testIsNotEmpty() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/str/isNotEmpty.kt");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty")
        public static class Uncategorized extends AbstractFe10BindingLocalInspectionTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("defaultValueBlockHasBreak.kt")
            public void testDefaultValueBlockHasBreak() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasBreak.kt");
            }

            @TestMetadata("defaultValueBlockHasBreak2.kt")
            public void testDefaultValueBlockHasBreak2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasBreak2.kt");
            }

            @TestMetadata("defaultValueBlockHasContinue.kt")
            public void testDefaultValueBlockHasContinue() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasContinue.kt");
            }

            @TestMetadata("defaultValueBlockHasContinue2.kt")
            public void testDefaultValueBlockHasContinue2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasContinue2.kt");
            }

            @TestMetadata("defaultValueBlockHasLabeledBreak.kt")
            public void testDefaultValueBlockHasLabeledBreak() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasLabeledBreak.kt");
            }

            @TestMetadata("defaultValueBlockHasLabeledBreak2.kt")
            public void testDefaultValueBlockHasLabeledBreak2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasLabeledBreak2.kt");
            }

            @TestMetadata("defaultValueBlockHasLabeledContinue.kt")
            public void testDefaultValueBlockHasLabeledContinue() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasLabeledContinue.kt");
            }

            @TestMetadata("defaultValueBlockHasLabeledContinue2.kt")
            public void testDefaultValueBlockHasLabeledContinue2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasLabeledContinue2.kt");
            }

            @TestMetadata("defaultValueBlockHasMultiStatement.kt")
            public void testDefaultValueBlockHasMultiStatement() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasMultiStatement.kt");
            }

            @TestMetadata("defaultValueBlockHasMultiStatement2.kt")
            public void testDefaultValueBlockHasMultiStatement2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/defaultValueBlockHasMultiStatement2.kt");
            }

            @TestMetadata("elseIf.kt")
            public void testElseIf() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/elseIf.kt");
            }

            @TestMetadata("implicitReceiver.kt")
            public void testImplicitReceiver() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/implicitReceiver.kt");
            }

            @TestMetadata("negated.kt")
            public void testNegated() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/negated.kt");
            }

            @TestMetadata("noElse.kt")
            public void testNoElse() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/noElse.kt");
            }

            @TestMetadata("notSelfValue.kt")
            public void testNotSelfValue() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/notSelfValue.kt");
            }

            @TestMetadata("notSelfValue2.kt")
            public void testNotSelfValue2() throws Exception {
                runTest("../idea/tests/testData/inspectionsLocal/replaceIsEmptyWithIfEmpty/notSelfValue2.kt");
            }
        }
    }
}
