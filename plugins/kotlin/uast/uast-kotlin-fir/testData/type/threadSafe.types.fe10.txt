UFile (package = ) [import kotlin.reflect.KProperty...]
    UImportStatement (isOnDemand = false) [import kotlin.reflect.KProperty]
    UClass (name = ThreadSafe) [public abstract annotation ThreadSafe {...}]
    UClass (name = UnsafeClass) [public final class UnsafeClass {...}]
        UMethod (name = UnsafeClass) [public fun UnsafeClass() = UastEmptyExpression]
    UClass (name = NotThreadSafeDelegate) [public final class NotThreadSafeDelegate {...}]
        UAnnotation (fqName = ThreadSafe) [@ThreadSafe]
        UMethod (name = getValue) [public final fun getValue(@org.jetbrains.annotations.NotNull thisRef: java.lang.Object, @org.jetbrains.annotations.NotNull property: kotlin.reflect.KProperty<?>) : UnsafeClass {...}]
            UParameter (name = thisRef) [@org.jetbrains.annotations.NotNull var thisRef: java.lang.Object]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = property) [@org.jetbrains.annotations.NotNull var property: kotlin.reflect.KProperty<?>]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] : PsiType:Void
                UReturnExpression [return <init>()] : PsiType:Void
                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<init>()] : PsiType:UnsafeClass
                        UIdentifier (Identifier (UnsafeClass)) [UIdentifier (Identifier (UnsafeClass))]
                        USimpleNameReferenceExpression (identifier = <init>, resolvesTo = PsiClass: UnsafeClass) [<init>] : PsiType:UnsafeClass
        UMethod (name = NotThreadSafeDelegate) [public fun NotThreadSafeDelegate() = UastEmptyExpression]
    UClass (name = SimpleSafeClass) [public final class SimpleSafeClass {...}]
        UAnnotation (fqName = ThreadSafe) [@ThreadSafe]
        UMethod (name = SimpleSafeClass) [public fun SimpleSafeClass() = UastEmptyExpression]
    UClass (name = ThreadSafeDelegate) [public final class ThreadSafeDelegate {...}]
        UAnnotation (fqName = ThreadSafe) [@ThreadSafe]
        UMethod (name = getValue) [public final fun getValue(@org.jetbrains.annotations.NotNull thisRef: java.lang.Object, @org.jetbrains.annotations.NotNull property: kotlin.reflect.KProperty<?>) : SimpleSafeClass {...}]
            UParameter (name = thisRef) [@org.jetbrains.annotations.NotNull var thisRef: java.lang.Object]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = property) [@org.jetbrains.annotations.NotNull var property: kotlin.reflect.KProperty<?>]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] : PsiType:Void
                UReturnExpression [return <init>()] : PsiType:Void
                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<init>()] : PsiType:SimpleSafeClass
                        UIdentifier (Identifier (SimpleSafeClass)) [UIdentifier (Identifier (SimpleSafeClass))]
                        USimpleNameReferenceExpression (identifier = <init>, resolvesTo = PsiClass: SimpleSafeClass) [<init>] : PsiType:SimpleSafeClass
        UMethod (name = ThreadSafeDelegate) [public fun ThreadSafeDelegate() = UastEmptyExpression]
    UClass (name = SafeClass) [public final class SafeClass {...}]
        UAnnotation (fqName = ThreadSafe) [@ThreadSafe]
        UField (name = Companion) [@null public static final var Companion: SafeClass.Companion]
            UAnnotation (fqName = null) [@null]
        UField (name = s) [@org.jetbrains.annotations.NotNull @kotlin.jvm.JvmStatic private static final var s: UnsafeClass = <init>()]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UAnnotation (fqName = kotlin.jvm.JvmStatic) [@kotlin.jvm.JvmStatic]
            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<init>()] : PsiType:UnsafeClass
                UIdentifier (Identifier (UnsafeClass)) [UIdentifier (Identifier (UnsafeClass))]
                USimpleNameReferenceExpression (identifier = <init>, resolvesTo = PsiClass: UnsafeClass) [<init>] : PsiType:UnsafeClass
        UField (name = message) [@org.jetbrains.annotations.NotNull private final var message: java.lang.String]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
        UField (name = k$delegate) [@org.jetbrains.annotations.NotNull private final var k$delegate: kotlin.Lazy<? extends SimpleSafeClass>]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [lazy({ ...})] : PsiType:Lazy<? extends SimpleSafeClass>
                UIdentifier (Identifier (lazy)) [UIdentifier (Identifier (lazy))]
                USimpleNameReferenceExpression (identifier = lazy, resolvesTo = null) [lazy] : PsiType:Lazy<? extends SimpleSafeClass>
                ULambdaExpression [{ ...}] : PsiType:Function0<? extends SimpleSafeClass>
                    UBlockExpression [{...}]
                        UReturnExpression [return <init>()]
                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<init>()] : PsiType:SimpleSafeClass
                                UIdentifier (Identifier (SimpleSafeClass)) [UIdentifier (Identifier (SimpleSafeClass))]
                                USimpleNameReferenceExpression (identifier = <init>, resolvesTo = PsiClass: SimpleSafeClass) [<init>] : PsiType:SimpleSafeClass
        UField (name = l$delegate) [@org.jetbrains.annotations.NotNull private final var l$delegate: ThreadSafeDelegate]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<init>()] : PsiType:ThreadSafeDelegate
                UIdentifier (Identifier (ThreadSafeDelegate)) [UIdentifier (Identifier (ThreadSafeDelegate))]
                USimpleNameReferenceExpression (identifier = <init>, resolvesTo = PsiClass: ThreadSafeDelegate) [<init>] : PsiType:ThreadSafeDelegate
        UMethod (name = getK) [public final fun getK() : SimpleSafeClass = UastEmptyExpression]
        UMethod (name = getL) [public final fun getL() : SimpleSafeClass = UastEmptyExpression]
        UMethod (name = getMessage) [public final fun getMessage() : java.lang.String = UastEmptyExpression]
        UMethod (name = SafeClass) [public fun SafeClass(@org.jetbrains.annotations.NotNull message: java.lang.String) = UastEmptyExpression]
            UParameter (name = message) [@org.jetbrains.annotations.NotNull var message: java.lang.String]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
        UMethod (name = getS) [public static final fun getS() : UnsafeClass = UastEmptyExpression]
        UClass (name = Companion) [public static final class Companion {...}]
            UMethod (name = getS) [public final fun getS() : UnsafeClass = UastEmptyExpression]
            UMethod (name = Companion) [private fun Companion() = UastEmptyExpression]
