UFile (package = ) [public final class InnerNonFixedTypeVariableKt {...]
    UClass (name = InnerNonFixedTypeVariableKt) [public final class InnerNonFixedTypeVariableKt {...}]
        UMethod (name = test) [public static final fun test(@org.jetbrains.annotations.NotNull list: java.util.List<? extends java.lang.Object>) : void {...}]
            UParameter (name = list) [@org.jetbrains.annotations.NotNull var list: java.util.List<? extends java.lang.Object>]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] : PsiType:Set<Unit>
                UQualifiedReferenceExpression [list.filterIsInstance().mapTo(mutableSetOf(), { var it: <ErrorType> ->...})] : PsiType:Set<Unit>
                    UQualifiedReferenceExpression [list.filterIsInstance()] : PsiType:<ErrorType>
                        USimpleNameReferenceExpression (identifier = list) [list] : PsiType:List<? extends Object>
                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [filterIsInstance()] : PsiType:<ErrorType>
                            UIdentifier (Identifier (filterIsInstance)) [UIdentifier (Identifier (filterIsInstance))]
                            USimpleNameReferenceExpression (identifier = filterIsInstance, resolvesTo = null) [filterIsInstance] : PsiType:<ErrorType>
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [mapTo(mutableSetOf(), { var it: <ErrorType> ->...})] : PsiType:Set<Unit>
                        UIdentifier (Identifier (mapTo)) [UIdentifier (Identifier (mapTo))]
                        USimpleNameReferenceExpression (identifier = mapTo, resolvesTo = null) [mapTo] : PsiType:Set<Unit>
                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [mutableSetOf()] : PsiType:Set<Unit>
                            UIdentifier (Identifier (mutableSetOf)) [UIdentifier (Identifier (mutableSetOf))]
                            USimpleNameReferenceExpression (identifier = mutableSetOf, resolvesTo = null) [mutableSetOf] : PsiType:Set<Unit>
                        ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:<ErrorType>
                            UParameter (name = it) [var it: <ErrorType>]
                            UBlockExpression [{...}] : PsiType:Unit
    UClass (name = Some) [public final class Some {...}]
        UMethod (name = Some) [public fun Some() = UastEmptyExpression]
