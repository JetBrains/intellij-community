UFile (package = ) [public final class Cls : <ErrorType> {...]
    UClass (name = Cls) [public final class Cls : <ErrorType> {...}]
        UField (name = a) [@org.jetbrains.annotations.NotNull private final var a: long]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
        UMethod (name = getA) [public final fun getA() : long = UastEmptyExpression]
        UMethod (name = Cls) [public fun Cls(@org.jetbrains.annotations.NotNull a: long, @org.jetbrains.annotations.NotNull b: long) {...}]
            UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: long]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = b) [@org.jetbrains.annotations.NotNull var b: long]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}]
                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [<anonymous class>(a, a, a)]
                    UIdentifier (Identifier (this)) [UIdentifier (Identifier (this))]
                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
                    USimpleNameReferenceExpression (identifier = a) [a] : PsiType:long
                    USimpleNameReferenceExpression (identifier = a) [a] : PsiType:long
                    USimpleNameReferenceExpression (identifier = a) [a] : PsiType:long
        UMethod (name = component1) [public final fun component1() : long = UastEmptyExpression]
        UMethod (name = copy) [public final fun copy(@org.jetbrains.annotations.NotNull a: long) : Cls = UastEmptyExpression]
            UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: long]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
