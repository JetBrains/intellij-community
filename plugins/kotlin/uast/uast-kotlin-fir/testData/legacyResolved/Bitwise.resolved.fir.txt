UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> CLASS: Int
    UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> CLASS: Int
    UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> CLASS: Int
    UBinaryExpression (operator = &) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = &) -> USimpleNameReferenceExpression (identifier = and) -> FUN: and
    UBinaryExpression (operator = &) -> USimpleNameReferenceExpression (identifier = mask) -> LightVariableBuilder:mask: mask
    UBinaryExpression (operator = |) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = |) -> USimpleNameReferenceExpression (identifier = or) -> FUN: or
    UBinaryExpression (operator = |) -> USimpleNameReferenceExpression (identifier = mask) -> LightVariableBuilder:mask: mask
    UBinaryExpression (operator = ^) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = ^) -> USimpleNameReferenceExpression (identifier = xor) -> FUN: xor
    UBinaryExpression (operator = ^) -> USimpleNameReferenceExpression (identifier = mask) -> LightVariableBuilder:mask: mask
    UBinaryExpression (operator = >>) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = >>) -> USimpleNameReferenceExpression (identifier = shr) -> FUN: shr
    UBinaryExpression (operator = >>>) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = >>>) -> USimpleNameReferenceExpression (identifier = ushr) -> FUN: ushr
    UBinaryExpression (operator = <<) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = <<) -> USimpleNameReferenceExpression (identifier = shl) -> FUN: shl
    UBinaryExpression (operator = +) -> USimpleNameReferenceExpression (identifier = pos) -> LightVariableBuilder:pos: pos
    UBinaryExpression (operator = +) -> USimpleNameReferenceExpression (identifier = +) -> FUN: plus
    UBinaryExpression (operator = +) -> USimpleNameReferenceExpression (identifier = zero) -> LightVariableBuilder:zero: zero
    UBinaryExpression (operator = -) -> USimpleNameReferenceExpression (identifier = -) -> FUN: minus
    UBinaryExpression (operator = *) -> USimpleNameReferenceExpression (identifier = zebra) -> LightVariableBuilder:zebra: zebra
    UBinaryExpression (operator = *) -> USimpleNameReferenceExpression (identifier = *) -> FUN: times
    UBinaryExpression (operator = *) -> USimpleNameReferenceExpression (identifier = signed) -> LightVariableBuilder:signed: signed
    UBinaryExpression (operator = /) -> USimpleNameReferenceExpression (identifier = /) -> FUN: div
    UBinaryExpression (operator = /) -> USimpleNameReferenceExpression (identifier = one) -> LightVariableBuilder:one: one
UTypeReferenceExpression (name = long) -> USimpleNameReferenceExpression (identifier = Long) -> CLASS: Long
    UTypeReferenceExpression (name = long) -> USimpleNameReferenceExpression (identifier = Long) -> CLASS: Long
    UTypeReferenceExpression (name = long) -> USimpleNameReferenceExpression (identifier = Long) -> CLASS: Long
    UBinaryExpression (operator = &) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = &) -> USimpleNameReferenceExpression (identifier = and) -> FUN: and
    UBinaryExpression (operator = &) -> USimpleNameReferenceExpression (identifier = mask) -> LightVariableBuilder:mask: mask
    UBinaryExpression (operator = |) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = |) -> USimpleNameReferenceExpression (identifier = or) -> FUN: or
    UBinaryExpression (operator = |) -> USimpleNameReferenceExpression (identifier = mask) -> LightVariableBuilder:mask: mask
    UBinaryExpression (operator = ^) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = ^) -> USimpleNameReferenceExpression (identifier = xor) -> FUN: xor
    UBinaryExpression (operator = ^) -> USimpleNameReferenceExpression (identifier = mask) -> LightVariableBuilder:mask: mask
    UBinaryExpression (operator = >>) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = >>) -> USimpleNameReferenceExpression (identifier = shr) -> FUN: shr
    UBinaryExpression (operator = >>>) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = >>>) -> USimpleNameReferenceExpression (identifier = ushr) -> FUN: ushr
    UBinaryExpression (operator = <<) -> USimpleNameReferenceExpression (identifier = x) -> LightVariableBuilder:x: x
    UBinaryExpression (operator = <<) -> USimpleNameReferenceExpression (identifier = shl) -> FUN: shl
    UBinaryExpression (operator = +) -> USimpleNameReferenceExpression (identifier = pos) -> LightVariableBuilder:pos: pos
    UBinaryExpression (operator = +) -> USimpleNameReferenceExpression (identifier = +) -> FUN: plus
    UBinaryExpression (operator = +) -> USimpleNameReferenceExpression (identifier = zero) -> LightVariableBuilder:zero: zero
    UBinaryExpression (operator = -) -> USimpleNameReferenceExpression (identifier = -) -> FUN: minus
    UBinaryExpression (operator = *) -> USimpleNameReferenceExpression (identifier = zebra) -> LightVariableBuilder:zebra: zebra
    UBinaryExpression (operator = *) -> USimpleNameReferenceExpression (identifier = *) -> FUN: times
    UBinaryExpression (operator = *) -> USimpleNameReferenceExpression (identifier = signed) -> LightVariableBuilder:signed: signed
    UBinaryExpression (operator = /) -> USimpleNameReferenceExpression (identifier = /) -> FUN: div
    UBinaryExpression (operator = /) -> USimpleNameReferenceExpression (identifier = one) -> LightVariableBuilder:one: one
