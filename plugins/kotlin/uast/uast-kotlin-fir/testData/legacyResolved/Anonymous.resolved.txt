UImportStatement (isOnDemand = false) -> UQualifiedReferenceExpression -> Decompiled_Class: Closeable
UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.io: io
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = io) -> PsiPackage:java.io: io
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = Closeable) -> Decompiled_Class: Closeable
UImportStatement (isOnDemand = false) -> UQualifiedReferenceExpression -> Decompiled_Class: InputStream
UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.io: io
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = io) -> PsiPackage:java.io: io
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = InputStream) -> Decompiled_Class: InputStream
    ULocalVariable (name = runnable) -> UObjectLiteralExpression -> null:
    UTypeReferenceExpression (name = java.lang.Runnable) -> USimpleNameReferenceExpression (identifier = Runnable) -> Decompiled_Class: Runnable
    UBlockExpression -> UQualifiedReferenceExpression -> Kotlin_Light_Method: run
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = runnable) -> Kotlin_Light_Variable: runnable
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = run) -> Kotlin_Light_Method: run
    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))(resolves to null) -> USimpleNameReferenceExpression (identifier = Runnable) -> Decompiled_Class: Runnable
        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = println) -> Decompiled_Method: println
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: run
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = runnable2) -> Kotlin_Light_Variable: runnable2
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = run) -> Decompiled_Method: run
    ULocalVariable (name = closeableRunnable) -> UObjectLiteralExpression -> null:
    UTypeReferenceExpression (name = java.lang.Runnable) -> USimpleNameReferenceExpression (identifier = Runnable) -> Decompiled_Class: Runnable
    UTypeReferenceExpression (name = java.io.Closeable) -> USimpleNameReferenceExpression (identifier = Closeable) -> Decompiled_Class: Closeable
    ULocalVariable (name = runnableIs) -> UObjectLiteralExpression -> Decompiled_Method:
    ULocalVariable (name = runnableIs) -> UObjectLiteralExpression -> Decompiled_Method:
    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = InputStream) -> Decompiled_Method: InputStream
    UTypeReferenceExpression (name = java.lang.Runnable) -> USimpleNameReferenceExpression (identifier = Runnable) -> Decompiled_Class: Runnable
    UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
    ULocalVariable (name = runnable) -> UObjectLiteralExpression -> null:
