UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = float) -> USimpleNameReferenceExpression (identifier = Float) -> Decompiled_Class: Float
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = float) -> USimpleNameReferenceExpression (identifier = Float) -> Decompiled_Class: Float
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = global) -> Kotlin_Light_Method: global
    null -> USimpleNameReferenceExpression (identifier = b) -> Kotlin_Light_Value_Parameter: b
    null -> USimpleNameReferenceExpression (identifier = a) -> Kotlin_Light_Value_Parameter: a
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = withDefault) -> Kotlin_Light_Method: withDefault
    null -> USimpleNameReferenceExpression (identifier = d) -> Kotlin_Light_Value_Parameter: d
    UBlockExpression -> UQualifiedReferenceExpression -> Kotlin_Light_Method: withReceiver
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = withReceiver) -> Kotlin_Light_Method: withReceiver
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: atan2
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = Math) -> Decompiled_Class: Math
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = atan2) -> Decompiled_Method: atan2
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to null) -> USimpleNameReferenceExpression (identifier = unresolvedMethod) -> null: null
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: format
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Class: String
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 4))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = format) -> Decompiled_Method: format
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: format
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Class: String
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = format) -> Decompiled_Method: format
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))(resolves to null) -> USimpleNameReferenceExpression (identifier = arrayOf) -> FUN: arrayOf
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: format
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Class: String
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = format) -> Decompiled_Method: format
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))(resolves to null) -> USimpleNameReferenceExpression (identifier = arrayOf) -> FUN: arrayOf
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))(resolves to null) -> USimpleNameReferenceExpression (identifier = arrayOf) -> FUN: arrayOf
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: format
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Class: String
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = format) -> Decompiled_Method: format
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Decompiled_Method) -> UQualifiedReferenceExpression -> Decompiled_Method: toTypedArray
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Method: chunked
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = chunked) -> FUN: chunked
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = toTypedArray) -> FUN: toTypedArray
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = with) -> FUN: with
    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = A) -> Kotlin_Light_Class:class A {

    fun String.with2Receivers(a: Int, b: Float) {}

}: A
        UBlockExpression -> UQualifiedReferenceExpression -> Kotlin_Light_Method: with2Receivers
        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = with2Receivers) -> Kotlin_Light_Method: with2Receivers
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = float) -> USimpleNameReferenceExpression (identifier = Float) -> Decompiled_Class: Float
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
    UBlockExpression -> UObjectLiteralExpression -> Kotlin_Light_Method:
    UBlockExpression -> UObjectLiteralExpression -> Kotlin_Light_Method:
    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = Parent) -> Kotlin_Light_Method: Parent
    null -> USimpleNameReferenceExpression (identifier = b) -> Kotlin_Light_Value_Parameter: b
    null -> USimpleNameReferenceExpression (identifier = a) -> Kotlin_Light_Value_Parameter: a
