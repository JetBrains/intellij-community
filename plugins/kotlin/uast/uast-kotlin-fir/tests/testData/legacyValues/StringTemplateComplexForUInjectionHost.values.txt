UFile (package = ) [public final class StringTemplateComplexForUInjectionHostKt {...]
    UClass (name = StringTemplateComplexForUInjectionHostKt) [public final class StringTemplateComplexForUInjectionHostKt {...}]
        UField (name = muchRecur) [@org.jetbrains.annotations.NotNull private static final var muchRecur: java.lang.String = "abc"]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            ULiteralExpression (value = "abc") ["abc"] = "abc"
        UField (name = case4) [@org.jetbrains.annotations.NotNull private static final var case4: java.lang.String = "a " + "literal" + " z"]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UPolyadicExpression (operator = +) ["a " + "literal" + " z"] = "a literal z"
                ULiteralExpression (value = "a ") ["a "] = "a "
                ULiteralExpression (value = "literal") ["literal"] = "literal"
                ULiteralExpression (value = " z") [" z"] = " z"
        UField (name = case5) [@org.jetbrains.annotations.NotNull private static final var case5: java.lang.String = "a " + "literal" + " " + "literal" + " z"]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UPolyadicExpression (operator = +) ["a " + "literal" + " " + "literal" + " z"] = "a literal literal z"
                ULiteralExpression (value = "a ") ["a "] = "a "
                ULiteralExpression (value = "literal") ["literal"] = "literal"
                ULiteralExpression (value = " ") [" "] = " "
                ULiteralExpression (value = "literal") ["literal"] = "literal"
                ULiteralExpression (value = " z") [" z"] = " z"
        UField (name = literalInLiteral) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral: java.lang.String = "a " + "literal" + case4 + " z"]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UPolyadicExpression (operator = +) ["a " + "literal" + case4 + " z"] = Undetermined
                ULiteralExpression (value = "a ") ["a "] = "a "
                UPolyadicExpression (operator = +) ["literal" + case4] = Undetermined
                    ULiteralExpression (value = "literal") ["literal"] = "literal"
                    USimpleNameReferenceExpression (identifier = case4) [case4] = external case4()
                ULiteralExpression (value = " z") [" z"] = " z"
        UField (name = literalInLiteral2) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.repeat(4) + " z"]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UPolyadicExpression (operator = +) ["a " + "literal" + case4.repeat(4) + " z"] = Undetermined
                ULiteralExpression (value = "a ") ["a "] = "a "
                UQualifiedReferenceExpression ["literal" + case4.repeat(4)] = external repeat(4)(4)
                    UPolyadicExpression (operator = +) ["literal" + case4] = Undetermined
                        ULiteralExpression (value = "literal") ["literal"] = "literal"
                        USimpleNameReferenceExpression (identifier = case4) [case4] = external case4()
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [repeat(4)] = external repeat(4)(4)
                        UIdentifier (Identifier (repeat)) [UIdentifier (Identifier (repeat))]
                        USimpleNameReferenceExpression (identifier = repeat, resolvesTo = null) [repeat] = external repeat(4)(4)
                        ULiteralExpression (value = 4) [4] = 4
                ULiteralExpression (value = " z") [" z"] = " z"
        UField (name = empty) [@org.jetbrains.annotations.NotNull private static final var empty: java.lang.String = ""]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            ULiteralExpression (value = "") [""] = ""
        UMethod (name = getMuchRecur) [public static final fun getMuchRecur() : java.lang.String = UastEmptyExpression]
        UMethod (name = getCase4) [public static final fun getCase4() : java.lang.String = UastEmptyExpression]
        UMethod (name = getCase5) [public static final fun getCase5() : java.lang.String = UastEmptyExpression]
        UMethod (name = getLiteralInLiteral) [public static final fun getLiteralInLiteral() : java.lang.String = UastEmptyExpression]
        UMethod (name = getLiteralInLiteral2) [public static final fun getLiteralInLiteral2() : java.lang.String = UastEmptyExpression]
        UMethod (name = getEmpty) [public static final fun getEmpty() : java.lang.String = UastEmptyExpression]
        UMethod (name = simpleForTemplate) [public static final fun simpleForTemplate(@org.jetbrains.annotations.NotNull i: int) : java.lang.String {...}]
            UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int = 0]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                ULiteralExpression (value = 0) [0] = 0
            UBlockExpression [{...}] = Nothing
                UReturnExpression [return i] = Nothing
                    USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
        UMethod (name = foo) [public static final fun foo() : void {...}]
            UBlockExpression [{...}] = Undetermined
                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(baz)] = external println(baz)(external baz())
                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println(baz)(external baz())
                    USimpleNameReferenceExpression (identifier = baz) [baz] = external baz()
                UDeclarationsExpression [var template1: java.lang.String = simpleForTemplate()] = Undetermined
                    ULocalVariable (name = template1) [var template1: java.lang.String = simpleForTemplate()]
                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] = external simpleForTemplate()()
                            UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
                            USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] = external simpleForTemplate()()
                UDeclarationsExpression [var template2: java.lang.String = "." + simpleForTemplate()] = Undetermined
                    ULocalVariable (name = template2) [var template2: java.lang.String = "." + simpleForTemplate()]
                        UPolyadicExpression (operator = +) ["." + simpleForTemplate()] = Undetermined
                            ULiteralExpression (value = ".") ["."] = "."
                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] = external simpleForTemplate()()
                                UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
                                USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] = external simpleForTemplate()()
        UMethod (name = baz) [public static final fun baz() : void {...}]
            UBlockExpression [{...}] = Undetermined
                UDeclarationsExpression [var trimA: java.lang.String = "\n" + "        text=text" + "\n" + "    ".trimIndent()] = Undetermined
                    ULocalVariable (name = trimA) [var trimA: java.lang.String = "\n" + "        text=text" + "\n" + "    ".trimIndent()]
                        UQualifiedReferenceExpression ["\n" + "        text=text" + "\n" + "    ".trimIndent()] = external trimIndent()()
                            UPolyadicExpression (operator = +) ["\n" + "        text=text" + "\n" + "    "] = "
        text=text
    "
                                ULiteralExpression (value = "\n") ["\n"] = "
"
                                ULiteralExpression (value = "        text=text") ["        text=text"] = "        text=text"
                                ULiteralExpression (value = "\n") ["\n"] = "
"
                                ULiteralExpression (value = "    ") ["    "] = "    "
                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [trimIndent()] = external trimIndent()()
                                UIdentifier (Identifier (trimIndent)) [UIdentifier (Identifier (trimIndent))]
                                USimpleNameReferenceExpression (identifier = trimIndent, resolvesTo = null) [trimIndent] = external trimIndent()()
                UDeclarationsExpression [var trimB: java.lang.String = "\n" + "        | margined" + "\n" + "    ".trimMargin()] = Undetermined
                    ULocalVariable (name = trimB) [var trimB: java.lang.String = "\n" + "        | margined" + "\n" + "    ".trimMargin()]
                        UQualifiedReferenceExpression ["\n" + "        | margined" + "\n" + "    ".trimMargin()] = external trimMargin()()
                            UPolyadicExpression (operator = +) ["\n" + "        | margined" + "\n" + "    "] = "
        | margined
    "
                                ULiteralExpression (value = "\n") ["\n"] = "
"
                                ULiteralExpression (value = "        | margined") ["        | margined"] = "        | margined"
                                ULiteralExpression (value = "\n") ["\n"] = "
"
                                ULiteralExpression (value = "    ") ["    "] = "    "
                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [trimMargin()] = external trimMargin()()
                                UIdentifier (Identifier (trimMargin)) [UIdentifier (Identifier (trimMargin))]
                                USimpleNameReferenceExpression (identifier = trimMargin, resolvesTo = null) [trimMargin] = external trimMargin()()
                UDeclarationsExpression [var c: boolean = "bar" == "\n" + "        margin=text" + "\n" + "    ".trimIndent()] = Undetermined
                    ULocalVariable (name = c) [var c: boolean = "bar" == "\n" + "        margin=text" + "\n" + "    ".trimIndent()]
                        UBinaryExpression (operator = ==) ["bar" == "\n" + "        margin=text" + "\n" + "    ".trimIndent()] = Undetermined
                            ULiteralExpression (value = "bar") ["bar"] = "bar"
                            UQualifiedReferenceExpression ["\n" + "        margin=text" + "\n" + "    ".trimIndent()] = external trimIndent()()
                                UPolyadicExpression (operator = +) ["\n" + "        margin=text" + "\n" + "    "] = "
        margin=text
    "
                                    ULiteralExpression (value = "\n") ["\n"] = "
"
                                    ULiteralExpression (value = "        margin=text") ["        margin=text"] = "        margin=text"
                                    ULiteralExpression (value = "\n") ["\n"] = "
"
                                    ULiteralExpression (value = "    ") ["    "] = "    "
                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [trimIndent()] = external trimIndent()()
                                    UIdentifier (Identifier (trimIndent)) [UIdentifier (Identifier (trimIndent))]
                                    USimpleNameReferenceExpression (identifier = trimIndent, resolvesTo = null) [trimIndent] = external trimIndent()()
                UDeclarationsExpression [var concat: java.lang.String = "abc" + "cde" + "efg"] = Undetermined
                    ULocalVariable (name = concat) [var concat: java.lang.String = "abc" + "cde" + "efg"]
                        UBinaryExpression (operator = +) ["abc" + "cde" + "efg"] = "abccdeefg"
                            UBinaryExpression (operator = +) ["abc" + "cde"] = "abccde"
                                ULiteralExpression (value = "abc") ["abc"] = "abc"
                                ULiteralExpression (value = "cde") ["cde"] = "cde"
                            ULiteralExpression (value = "efg") ["efg"] = "efg"
