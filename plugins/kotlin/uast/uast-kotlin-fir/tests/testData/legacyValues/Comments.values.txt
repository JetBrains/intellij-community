UFile (package = ) [public abstract interface Pizza {...]
    UClass (name = Pizza) [public abstract interface Pizza {...}]
        UMethod (name = getSize) [public abstract fun getSize() : int = UastEmptyExpression]
        UMethod (name = getName) [public abstract fun getName() : java.lang.String = UastEmptyExpression]
        UMethod (name = contains) [public abstract fun contains(@org.jetbrains.annotations.NotNull ingredient: Pizza.Ingredient) : boolean = UastEmptyExpression]
            UParameter (name = ingredient) [@org.jetbrains.annotations.NotNull var ingredient: Pizza.Ingredient]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
        UClass (name = Ingredient) [public static abstract interface Ingredient {...}]
        UClass (name = Builder) [public static abstract class Builder {...}]
            UField (name = ingredients) [@org.jetbrains.annotations.NotNull private final var ingredients: java.util.Set<Pizza.Ingredient> = mutableSetOf()]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [mutableSetOf()] = external mutableSetOf()()
                    UIdentifier (Identifier (mutableSetOf)) [UIdentifier (Identifier (mutableSetOf))]
                    USimpleNameReferenceExpression (identifier = mutableSetOf, resolvesTo = null) [mutableSetOf] = external mutableSetOf()()
            UMethod (name = addIngredient) [public abstract fun addIngredient(@org.jetbrains.annotations.NotNull ingredient: Pizza.Ingredient) : P = UastEmptyExpression]
                UParameter (name = ingredient) [@org.jetbrains.annotations.NotNull var ingredient: Pizza.Ingredient]
                    UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UMethod (name = build) [public abstract fun build() : Pizza = UastEmptyExpression]
            UMethod (name = self) [protected abstract fun self() : P = UastEmptyExpression]
            UMethod (name = Builder) [public fun Builder() = UastEmptyExpression]
    UClass (name = Margherita) [public final class Margherita : Pizza {...}]
        UField (name = size) [@org.jetbrains.annotations.NotNull private final var size: int = 42]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            ULiteralExpression (value = 42) [42] = 42
        UMethod (name = getName) [public fun getName() : java.lang.String {...}]
            UBlockExpression [{...}] = Nothing
                UReturnExpression [return java.lang.<init>("Margherita")] = Nothing
                    UQualifiedReferenceExpression [java.lang.<init>("Margherita")] = external <init>("Margherita")("Margherita")
                        UQualifiedReferenceExpression [java.lang] = external lang()
                            USimpleNameReferenceExpression (identifier = java) [java] = external java()
                            USimpleNameReferenceExpression (identifier = lang) [lang] = external lang()
                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<init>("Margherita")] = external <init>("Margherita")("Margherita")
                            UIdentifier (Identifier (String)) [UIdentifier (Identifier (String))]
                            USimpleNameReferenceExpression (identifier = <init>, resolvesTo = PsiClass: String) [<init>] = external <init>("Margherita")("Margherita")
                            ULiteralExpression (value = "Margherita") ["Margherita"] = "Margherita"
        UMethod (name = contains) [public fun contains(@org.jetbrains.annotations.NotNull ingredient: Pizza.Ingredient) : boolean {...}]
            UParameter (name = ingredient) [@org.jetbrains.annotations.NotNull var ingredient: Pizza.Ingredient]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] = Nothing
                UReturnExpression [return false] = Nothing
                    ULiteralExpression (value = false) [false] = false
        UMethod (name = getSize) [public fun getSize() : int = UastEmptyExpression]
        UMethod (name = Margherita) [public fun Margherita(@org.jetbrains.annotations.NotNull size: int) = UastEmptyExpression]
            UParameter (name = size) [@org.jetbrains.annotations.NotNull var size: int = 42]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                ULiteralExpression (value = 42) [42] = 42
        UMethod (name = Margherita) [public fun Margherita() = UastEmptyExpression]