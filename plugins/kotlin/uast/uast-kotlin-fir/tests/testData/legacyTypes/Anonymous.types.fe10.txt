UFile (package = ) [import java.io.Closeable...]
    UImportStatement (isOnDemand = false) [import java.io.Closeable]
    UImportStatement (isOnDemand = false) [import java.io.InputStream]
    UClass (name = AnonymousKt) [public final class AnonymousKt {...}]
        UMethod (name = foo) [public static final fun foo() : void {...}]
            UBlockExpression [{...}] : void
                UDeclarationsExpression [var runnable: <ErrorType> = anonymous object : Runnable { override fun run() {} }]
                    ULocalVariable (name = runnable) [var runnable: <ErrorType> = anonymous object : Runnable { override fun run() {} }]
                        UObjectLiteralExpression [anonymous object : Runnable { override fun run() {} }] : java.lang.Runnable
                            UClass (name = null) [final class null : java.lang.Runnable {...}]
                                UMethod (name = run) [public fun run() : void {...}]
                                    UBlockExpression [{...}] : void
                                UMethod (name = ) [private fun () = UastEmptyExpression]
                UQualifiedReferenceExpression [runnable.run()] : kotlin.Unit
                    USimpleNameReferenceExpression (identifier = runnable) [runnable] : <ErrorType>
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [run()] : kotlin.Unit
                        UIdentifier (Identifier (run)) [UIdentifier (Identifier (run))]
                UDeclarationsExpression [var runnable2: java.lang.Runnable = Runnable({ ...})]
                    ULocalVariable (name = runnable2) [var runnable2: java.lang.Runnable = Runnable({ ...})]
                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [Runnable({ ...})] : java.lang.Runnable
                            UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
                            USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = PsiClass: Runnable) [Runnable]
                            ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                                UBlockExpression [{...}]
                                    UReturnExpression [return println()]
                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [println()] : kotlin.Unit
                                            UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
                UQualifiedReferenceExpression [runnable2.run()] : kotlin.Unit
                    USimpleNameReferenceExpression (identifier = runnable2) [runnable2] : java.lang.Runnable
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [run()] : kotlin.Unit
                        UIdentifier (Identifier (run)) [UIdentifier (Identifier (run))]
                UDeclarationsExpression [var closeableRunnable: <ErrorType> = anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }]
                    ULocalVariable (name = closeableRunnable) [var closeableRunnable: <ErrorType> = anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }]
                        UObjectLiteralExpression [anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }] : java.lang.Runnable
                            UClass (name = null) [final class null : java.lang.Runnable, java.io.Closeable {...}]
                                UMethod (name = close) [public fun close() : void {...}]
                                    UBlockExpression [{...}] : void
                                UMethod (name = run) [public fun run() : void {...}]
                                    UBlockExpression [{...}] : void
                                UMethod (name = ) [private fun () = UastEmptyExpression]
                UDeclarationsExpression [var runnableIs: <ErrorType> = anonymous object : InputStream(), Runnable { override fun read(): Int = 0; override fun run() {} }]
                    ULocalVariable (name = runnableIs) [var runnableIs: <ErrorType> = anonymous object : InputStream(), Runnable { override fun read(): Int = 0; override fun run() {} }]
                        UObjectLiteralExpression [anonymous object : InputStream(), Runnable { override fun read(): Int = 0; override fun run() {} }] : java.io.InputStream
                            UClass (name = null) [final class null : java.io.InputStream, java.lang.Runnable {...}]
                                UMethod (name = read) [public fun read() : int {...}]
                                    UBlockExpression [{...}]
                                        UReturnExpression [return 0]
                                            ULiteralExpression (value = 0) [0] : int
                                UMethod (name = run) [public fun run() : void {...}]
                                    UBlockExpression [{...}] : void
                                UMethod (name = ) [private fun () {...}]
                                    UBlockExpression [{...}]
                                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [InputStream()]
                                            UIdentifier (Identifier (InputStream)) [UIdentifier (Identifier (InputStream))]
                                            USimpleNameReferenceExpression (identifier = InputStream, resolvesTo = PsiClass: InputStream) [InputStream]
        UMethod (name = withErr) [public static final fun withErr() : void {...}]
            UBlockExpression [{...}] : void
                UDeclarationsExpression [var runnable: <ErrorType> = anonymous null]
                    ULocalVariable (name = runnable) [var runnable: <ErrorType> = anonymous null]
                        UObjectLiteralExpression [anonymous null] : <ErrorType>
                            UClass (name = <invalid object code>) [class <invalid object code> {...}]
