UFile (package = ) [import java.lang.Thread...]
    UImportStatement (isOnDemand = false) [import java.lang.Thread]
    UImportStatement (isOnDemand = false) [import java.lang.Runnable]
    UImportStatement (isOnDemand = false) [import java.util.concurrent.Callable]
    UImportStatement (isOnDemand = false) [import java.util.function.Supplier]
    UClass (name = SAMKt) [public final class SAMKt {...}]
        UField (name = notSam) [@org.jetbrains.annotations.NotNull private static final var notSam: kotlin.jvm.functions.Function0<kotlin.Unit> = { ...}]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                UBlockExpression [{...}]
        UField (name = foo) [@org.jetbrains.annotations.NotNull private static var foo: java.lang.Runnable = { ...}]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                UBlockExpression [{...}]
        UField (name = baz) [@org.jetbrains.annotations.NotNull private static final var baz: java.lang.Runnable = java.lang.Runnable({ ...})]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UQualifiedReferenceExpression [java.lang.Runnable({ ...})] : java.lang.Runnable
                UQualifiedReferenceExpression [java.lang]
                    USimpleNameReferenceExpression (identifier = java) [java]
                    USimpleNameReferenceExpression (identifier = lang) [lang]
                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [Runnable({ ...})] : java.lang.Runnable
                    UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
                    USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = PsiClass: Runnable) [Runnable] : java.lang.Runnable
                    ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                        UBlockExpression [{...}]
        UField (name = samImplicitLabel) [@org.jetbrains.annotations.NotNull private static final var samImplicitLabel: java.lang.Runnable = Runnable({ ...})]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [Runnable({ ...})] : java.lang.Runnable
                UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
                USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = PsiClass: Runnable) [Runnable] : java.lang.Runnable
                ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                    UBlockExpression [{...}]
                        UReturnExpression [return] : java.lang.Void
        UField (name = samExplicitLabel) [@org.jetbrains.annotations.NotNull private static final var samExplicitLabel: java.lang.Runnable = Runnable(l@ { ...})]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [Runnable(l@ { ...})] : java.lang.Runnable
                UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
                USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = PsiClass: Runnable) [Runnable] : java.lang.Runnable
                ULabeledExpression (label = l) [l@ { ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                    ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                        UBlockExpression [{...}]
                            UReturnExpression [return] : java.lang.Void
        UMethod (name = getNotSam) [public static final fun getNotSam() : kotlin.jvm.functions.Function0<kotlin.Unit> = UastEmptyExpression]
        UMethod (name = getFoo) [public static final fun getFoo() : java.lang.Runnable = UastEmptyExpression]
        UMethod (name = setFoo) [public static final fun setFoo(@org.jetbrains.annotations.NotNull <set-?>: java.lang.Runnable) : void = UastEmptyExpression]
            UParameter (name = <set-?>) [@org.jetbrains.annotations.NotNull var <set-?>: java.lang.Runnable]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
        UMethod (name = bar) [public static final fun bar() : java.lang.Runnable {...}]
            UBlockExpression [{...}] : java.lang.Void
                UBinaryExpression (operator = =) [foo = { ...}] : kotlin.Unit
                    USimpleNameReferenceExpression (identifier = foo) [foo] : java.lang.Runnable
                    ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                        UBlockExpression [{...}]
                UDeclarationsExpression [var a: java.lang.Runnable = { ...} as java.lang.Runnable]
                    ULocalVariable (name = a) [var a: java.lang.Runnable = { ...} as java.lang.Runnable]
                        UBinaryExpressionWithType [{ ...} as java.lang.Runnable] : java.lang.Runnable
                            ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                                UBlockExpression [{...}]
                            UTypeReferenceExpression (name = java.lang.Runnable) [java.lang.Runnable]
                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [runRunnable({ ...})] : <ErrorType>
                    UIdentifier (Identifier (runRunnable)) [UIdentifier (Identifier (runRunnable))]
                    USimpleNameReferenceExpression (identifier = runRunnable, resolvesTo = null) [runRunnable] : <ErrorType>
                    ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                        UBlockExpression [{...}]
                UReturnExpression [return { ...}] : java.lang.Void
                    ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                        UBlockExpression [{...}]
        UMethod (name = getBaz) [public static final fun getBaz() : java.lang.Runnable = UastEmptyExpression]
        UMethod (name = getSamImplicitLabel) [public static final fun getSamImplicitLabel() : java.lang.Runnable = UastEmptyExpression]
        UMethod (name = getSamExplicitLabel) [public static final fun getSamExplicitLabel() : java.lang.Runnable = UastEmptyExpression]
        UMethod (name = runRunnable) [public static final fun runRunnable(@org.jetbrains.annotations.NotNull r: java.lang.Runnable) : error.NonExistentClass {...}]
            UParameter (name = r) [@org.jetbrains.annotations.NotNull var r: java.lang.Runnable]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}]
                UReturnExpression [return <anonymous class>()]
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()]
                        UIdentifier (Identifier (r)) [UIdentifier (Identifier (r))]
                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
        UMethod (name = test1) [public static final fun test1() : void {...}]
            UBlockExpression [{...}] : void
                UDeclarationsExpression [var thread1: java.lang.Thread = <init>({ ...})]
                    ULocalVariable (name = thread1) [var thread1: java.lang.Thread = <init>({ ...})]
                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<init>({ ...})] : java.lang.Thread
                            UIdentifier (Identifier (Thread)) [UIdentifier (Identifier (Thread))]
                            USimpleNameReferenceExpression (identifier = <init>, resolvesTo = PsiClass: Thread) [<init>] : java.lang.Thread
                            ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                                UBlockExpression [{...}]
                                    UReturnExpression [return println("hello1")]
                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("hello1")] : kotlin.Unit
                                            UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
                                            USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : kotlin.Unit
                                            UPolyadicExpression (operator = +) ["hello1"] : java.lang.String
                                                ULiteralExpression (value = "hello1") ["hello1"] : java.lang.String
        UMethod (name = test2) [public static final fun test2() : void {...}]
            UBlockExpression [{...}] : void
                UDeclarationsExpression [var thread2: java.lang.Thread = <init>(Runnable({ ...}))]
                    ULocalVariable (name = thread2) [var thread2: java.lang.Thread = <init>(Runnable({ ...}))]
                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<init>(Runnable({ ...}))] : java.lang.Thread
                            UIdentifier (Identifier (Thread)) [UIdentifier (Identifier (Thread))]
                            USimpleNameReferenceExpression (identifier = <init>, resolvesTo = PsiClass: Thread) [<init>] : java.lang.Thread
                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [Runnable({ ...})] : java.lang.Runnable
                                UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
                                USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = PsiClass: Runnable) [Runnable] : java.lang.Runnable
                                ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends kotlin.Unit>
                                    UBlockExpression [{...}]
                                        UReturnExpression [return println("hello2")]
                                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("hello2")] : kotlin.Unit
                                                UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
                                                USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : kotlin.Unit
                                                UPolyadicExpression (operator = +) ["hello2"] : java.lang.String
                                                    ULiteralExpression (value = "hello2") ["hello2"] : java.lang.String
        UMethod (name = test3) [public static final fun test3() : void {...}]
            UBlockExpression [{...}] : java.lang.String
                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [ambiguousSamAcceptor(Supplier({ ...}))] : java.lang.String
                    UIdentifier (Identifier (ambiguousSamAcceptor)) [UIdentifier (Identifier (ambiguousSamAcceptor))]
                    USimpleNameReferenceExpression (identifier = ambiguousSamAcceptor, resolvesTo = null) [ambiguousSamAcceptor] : java.lang.String
                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [Supplier({ ...})] : java.util.function.Supplier<java.lang.String>
                        UIdentifier (Identifier (Supplier)) [UIdentifier (Identifier (Supplier))]
                        USimpleNameReferenceExpression (identifier = Supplier, resolvesTo = PsiClass: Supplier) [Supplier] : java.util.function.Supplier<java.lang.String>
                        ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends java.lang.String>
                            UBlockExpression [{...}]
                                UReturnExpression [return "Supplier"]
                                    UPolyadicExpression (operator = +) ["Supplier"] : java.lang.String
                                        ULiteralExpression (value = "Supplier") ["Supplier"] : java.lang.String
                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [ambiguousSamAcceptor(Callable({ ...}))] : java.lang.String
                    UIdentifier (Identifier (ambiguousSamAcceptor)) [UIdentifier (Identifier (ambiguousSamAcceptor))]
                    USimpleNameReferenceExpression (identifier = ambiguousSamAcceptor, resolvesTo = null) [ambiguousSamAcceptor] : java.lang.String
                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [Callable({ ...})] : java.util.concurrent.Callable<java.lang.String>
                        UIdentifier (Identifier (Callable)) [UIdentifier (Identifier (Callable))]
                        USimpleNameReferenceExpression (identifier = Callable, resolvesTo = PsiClass: Callable) [Callable] : java.util.concurrent.Callable<java.lang.String>
                        ULambdaExpression [{ ...}] : kotlin.jvm.functions.Function0<? extends java.lang.String>
                            UBlockExpression [{...}]
                                UReturnExpression [return "Callable"]
                                    UPolyadicExpression (operator = +) ["Callable"] : java.lang.String
                                        ULiteralExpression (value = "Callable") ["Callable"] : java.lang.String
        UMethod (name = ambiguousSamAcceptor) [public static final fun ambiguousSamAcceptor(@org.jetbrains.annotations.NotNull s: java.util.function.Supplier<java.lang.String>) : java.lang.String {...}]
            UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.util.function.Supplier<java.lang.String>]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}]
                UReturnExpression [return TODO()]
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] : java.lang.Void
                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] : java.lang.Void
        UMethod (name = ambiguousSamAcceptor) [public static final fun ambiguousSamAcceptor(@org.jetbrains.annotations.NotNull s: java.util.concurrent.Callable<java.lang.String>) : java.lang.String {...}]
            UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.util.concurrent.Callable<java.lang.String>]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}]
                UReturnExpression [return TODO()]
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] : java.lang.Void
                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] : java.lang.Void
