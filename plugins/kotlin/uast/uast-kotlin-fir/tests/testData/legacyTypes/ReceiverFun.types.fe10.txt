UFile (package = ) [public final class ReceiverFunKt {...]
    UClass (name = ReceiverFunKt) [public final class ReceiverFunKt {...}]
        UMethod (name = foo) [public static final fun foo(@org.jetbrains.annotations.NotNull @MyReceiverAnnotation $this$foo: java.lang.String) : int {...}]
            UParameter (name = $this$foo) [@org.jetbrains.annotations.NotNull @MyReceiverAnnotation var $this$foo: java.lang.String]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UAnnotation (fqName = MyReceiverAnnotation) [@MyReceiverAnnotation]
            UBlockExpression [{...}]
                UReturnExpression [return this.length]
                    UQualifiedReferenceExpression [this.length] : int
                        UThisExpression (label = null) [this] : java.lang.String
                        USimpleNameReferenceExpression (identifier = length) [length] : int
        UMethod (name = getRx) [public static final fun getRx(@org.jetbrains.annotations.NotNull @MyReceiverAnnotation(name = "RegExp") $this$rx: java.lang.String) : kotlin.text.Regex {...}]
            UParameter (name = $this$rx) [@org.jetbrains.annotations.NotNull @MyReceiverAnnotation(name = "RegExp") var $this$rx: java.lang.String]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UAnnotation (fqName = MyReceiverAnnotation) [@MyReceiverAnnotation(name = "RegExp")]
                    UNamedExpression (name = name) [name = "RegExp"]
                        UPolyadicExpression (operator = +) ["RegExp"] : java.lang.String
                            ULiteralExpression (value = "RegExp") ["RegExp"] : java.lang.String
            UBlockExpression [{...}] : java.lang.Void
                UReturnExpression [return toRegex()] : java.lang.Void
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toRegex()] : kotlin.text.Regex
                        UIdentifier (Identifier (toRegex)) [UIdentifier (Identifier (toRegex))]
    UClass (name = MyReceiverAnnotation) [public abstract annotation MyReceiverAnnotation {...}]
        UAnnotationMethod (name = name) [public abstract fun name() : java.lang.String = UastEmptyExpression]
            UPolyadicExpression (operator = +) [""] : java.lang.String
                ULiteralExpression (value = "") [""] : java.lang.String
