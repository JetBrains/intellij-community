UFile (package = ) [import java.util.stream.Stream...]
    UImportStatement (isOnDemand = false) [import java.util.stream.Stream]
    UClass (name = LambdasKt) [public final class LambdasKt {...}]
        UField (name = lambdaVarWithType) [@org.jetbrains.annotations.NotNull private static var lambdaVarWithType: kotlin.jvm.functions.Function1<? super java.lang.String,java.lang.Integer> = { var it: java.lang.String ->...}]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            ULambdaExpression [{ var it: java.lang.String ->...}] : @org.jetbrains.annotations.NotNull() kotlin.jvm.functions.Function1<? super @org.jetbrains.annotations.NotNull() java.lang.String, ? extends @org.jetbrains.annotations.NotNull() java.lang.Integer>
                UParameter (name = it) [var it: java.lang.String]
                UBlockExpression [{...}] : int
                    UReturnExpression [return it.length]
                        UQualifiedReferenceExpression [it.length] : int
                            USimpleNameReferenceExpression (identifier = it) [it] : java.lang.String
                            USimpleNameReferenceExpression (identifier = length) [length] : int
        UMethod (name = foo) [public static final fun foo() : void {...}]
            UBlockExpression [{...}] : java.util.stream.Stream<java.lang.String>
                UQualifiedReferenceExpression [Stream.empty().filter({ var it: java.lang.String ->...})] : java.util.stream.Stream<java.lang.String>
                    UQualifiedReferenceExpression [Stream.empty()] : java.util.stream.Stream<java.lang.String>
                        USimpleNameReferenceExpression (identifier = Stream) [Stream]
                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [empty()] : java.util.stream.Stream<java.lang.String>
                            UIdentifier (Identifier (empty)) [UIdentifier (Identifier (empty))]
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [filter({ var it: java.lang.String ->...})] : java.util.stream.Stream<java.lang.String>
                        UIdentifier (Identifier (filter)) [UIdentifier (Identifier (filter))]
                        ULambdaExpression [{ var it: java.lang.String ->...}] : @org.jetbrains.annotations.NotNull() kotlin.jvm.functions.Function1<? super java.lang.String, ? extends @org.jetbrains.annotations.NotNull() java.lang.Boolean>
                            UParameter (name = it) [var it: java.lang.String]
                            UBlockExpression [{...}] : boolean
                                UReturnExpression [return it.isEmpty()]
                                    UQualifiedReferenceExpression [it.isEmpty()] : boolean
                                        USimpleNameReferenceExpression (identifier = it) [it] : java.lang.String
                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isEmpty()] : boolean
                                            UIdentifier (Identifier (isEmpty)) [UIdentifier (Identifier (isEmpty))]
        UMethod (name = doSelectItem) [public static final fun doSelectItem(@org.jetbrains.annotations.NotNull selectItemFunction: kotlin.jvm.functions.Function0<kotlin.Unit>) : void {...}]
            UParameter (name = selectItemFunction) [@org.jetbrains.annotations.NotNull var selectItemFunction: kotlin.jvm.functions.Function0<kotlin.Unit>]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] : void
                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] : @org.jetbrains.annotations.NotNull() kotlin.Unit
                    UIdentifier (Identifier (selectItemFunction)) [UIdentifier (Identifier (selectItemFunction))]
                UDeclarationsExpression [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}]
                    ULocalVariable (name = baz) [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}]
                        ULambdaExpression [fun () {...}] : @org.jetbrains.annotations.NotNull() kotlin.jvm.functions.Function0<? extends @org.jetbrains.annotations.NotNull() kotlin.Unit>
                            UBlockExpression [{...}] : void
                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [UIdentifier (Identifier (Local))()]
                                    UIdentifier (Identifier (Local)) [UIdentifier (Identifier (Local))]
                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] : @org.jetbrains.annotations.NotNull() kotlin.Unit
                    UIdentifier (Identifier (baz)) [UIdentifier (Identifier (baz))]
        UMethod (name = lambdaInPlaceCall) [public static final fun lambdaInPlaceCall() : void {...}]
            UBlockExpression [{...}] : void
                UWhileExpression [while (invoke()) {...}]
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] : boolean
                        UIdentifier (Identifier ({)) [UIdentifier (Identifier ({))]
                    UBlockExpression [{...}] : @org.jetbrains.annotations.NotNull() kotlin.Unit
        UMethod (name = getLambdaVarWithType) [public static final fun getLambdaVarWithType() : kotlin.jvm.functions.Function1<java.lang.String,java.lang.Integer> = UastEmptyExpression]
        UMethod (name = setLambdaVarWithType) [public static final fun setLambdaVarWithType(@org.jetbrains.annotations.NotNull <set-?>: kotlin.jvm.functions.Function1<? super java.lang.String,java.lang.Integer>) : void = UastEmptyExpression]
            UParameter (name = <set-?>) [@org.jetbrains.annotations.NotNull var <set-?>: kotlin.jvm.functions.Function1<? super java.lang.String,java.lang.Integer>]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
