UFile (package = ) [public final class AnnotatedExpressionsKt {...]
    UClass (name = AnnotatedExpressionsKt) [public final class AnnotatedExpressionsKt {...}]
        UMethod (name = foo) [public static final fun foo() : void {...}]
            UBlockExpression [{...}] : void
                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] : @org.jetbrains.annotations.NotNull() kotlin.Unit
                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                    UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
                UDeclarationsExpression [@kotlin.Suppress var a: int = 1]
                    ULocalVariable (name = a) [@kotlin.Suppress var a: int = 1]
                        UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                        ULiteralExpression (value = 1) [1] : int
                UDeclarationsExpression [@kotlin.Suppress var b: int = 2]
                    ULocalVariable (name = b) [@kotlin.Suppress var b: int = 2]
                        UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                        ULiteralExpression (value = 2) [2] : int
                UBinaryExpression (operator = =) [b = a] : @org.jetbrains.annotations.NotNull() kotlin.Unit
                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                    USimpleNameReferenceExpression (identifier = b) [b] : int
                    USimpleNameReferenceExpression (identifier = a) [a] : int
                UIfExpression [if (a > 2) a else b] : int
                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                    UBinaryExpression (operator = >) [a > 2] : boolean
                        USimpleNameReferenceExpression (identifier = a) [a] : int
                        ULiteralExpression (value = 2) [2] : int
                    USimpleNameReferenceExpression (identifier = a) [a] : int
                    USimpleNameReferenceExpression (identifier = b) [b] : int
                UDeclarationsExpression [var c: int = elvis {...}]
                    ULocalVariable (name = c) [var c: int = elvis {...}]
                        UExpressionList (elvis) [elvis {...}] : int
                            UDeclarationsExpression [var varae507364: int = a]
                                ULocalVariable (name = varae507364) [var varae507364: int = a]
                                    USimpleNameReferenceExpression (identifier = a) [a] : int
                                        UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                            UIfExpression [if (varae507364 != null) varae507364 else b]
                                UBinaryExpression (operator = !=) [varae507364 != null]
                                    USimpleNameReferenceExpression (identifier = varae507364) [varae507364]
                                    ULiteralExpression (value = null) [null]
                                USimpleNameReferenceExpression (identifier = varae507364) [varae507364]
                                USimpleNameReferenceExpression (identifier = b) [b] : @org.jetbrains.annotations.NotNull() java.lang.Void
        UMethod (name = annotatedSwitch) [public static final fun annotatedSwitch(@org.jetbrains.annotations.NotNull str: java.lang.String) : java.lang.Integer {...}]
            UParameter (name = str) [@org.jetbrains.annotations.NotNull var str: java.lang.String]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}]
                UReturnExpression [return switch  {...]
                    USwitchExpression [switch  {...] : int
                        UExpressionList (when) [    str.isBlank() -> {...    ] : int
                            USwitchClauseExpressionWithBody [str.isBlank() -> {...]
                                UQualifiedReferenceExpression [str.isBlank()] : boolean
                                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress(names = "DEPRECATION")]
                                        UNamedExpression (name = names) [names = "DEPRECATION"]
                                            UPolyadicExpression (operator = +) ["DEPRECATION"] : java.lang.String
                                                ULiteralExpression (value = "DEPRECATION") ["DEPRECATION"] : java.lang.String
                                    USimpleNameReferenceExpression (identifier = str) [str] : java.lang.String
                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isBlank()] : boolean
                                        UIdentifier (Identifier (isBlank)) [UIdentifier (Identifier (isBlank))]
                                UExpressionList (when_entry) [{...]
                                    UYieldExpression [yield null]
                                        ULiteralExpression (value = null) [null] : @org.jetbrains.annotations.Nullable() java.lang.Void
                            USwitchClauseExpressionWithBody [str.isNotEmpty() != null -> {...]
                                UBinaryExpression (operator = !=) [str.isNotEmpty() != null] : boolean
                                    UQualifiedReferenceExpression [str.isNotEmpty()] : boolean
                                        USimpleNameReferenceExpression (identifier = str) [str] : java.lang.String
                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isNotEmpty()] : boolean
                                            UIdentifier (Identifier (isNotEmpty)) [UIdentifier (Identifier (isNotEmpty))]
                                    ULiteralExpression (value = null) [null] : @org.jetbrains.annotations.Nullable() java.lang.Void
                                UExpressionList (when_entry) [{...]
                                    UYieldExpression [yield null]
                                        ULiteralExpression (value = null) [null] : @org.jetbrains.annotations.Nullable() java.lang.Void
                            USwitchClauseExpressionWithBody [ -> {...]
                                UExpressionList (when_entry) [{...]
                                    UYieldExpression [yield 1]
                                        ULiteralExpression (value = 1) [1] : int
