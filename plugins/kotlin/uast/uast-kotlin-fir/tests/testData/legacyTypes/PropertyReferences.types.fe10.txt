UFile (package = ) [public final class PropertyReferencesKt {...]
    UClass (name = PropertyReferencesKt) [public final class PropertyReferencesKt {...}]
        UMethod (name = properties) [public static final fun properties() : void {...}]
            UBlockExpression [{...}] : int
                UDeclarationsExpression [var a: A = A(17)]
                    ULocalVariable (name = a) [var a: A = A(17)]
                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [A(17)] : A
                            UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
                            USimpleNameReferenceExpression (identifier = A, resolvesTo = PsiClass: A) [A]
                            ULiteralExpression (value = 17) [17] : int
                UDeclarationsExpression [var x: int = -a.mutableProp]
                    ULocalVariable (name = x) [var x: int = -a.mutableProp]
                        UPrefixExpression (operator = -) [-a.mutableProp] : int
                            UQualifiedReferenceExpression [a.mutableProp] : int
                                USimpleNameReferenceExpression (identifier = a) [a] : A
                                USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
                UBinaryExpression (operator = =) [a.mutableProp = 1] : kotlin.Unit
                    UQualifiedReferenceExpression [a.mutableProp] : int
                        USimpleNameReferenceExpression (identifier = a) [a] : A
                        USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
                    ULiteralExpression (value = 1) [1] : int
                UBinaryExpression (operator = +=) [a.mutableProp += x] : kotlin.Unit
                    UQualifiedReferenceExpression [a.mutableProp] : int
                        USimpleNameReferenceExpression (identifier = a) [a] : A
                        USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
                    USimpleNameReferenceExpression (identifier = x) [x] : int
                UPrefixExpression (operator = ++) [++a.mutableProp] : int
                    UQualifiedReferenceExpression [a.mutableProp] : int
                        USimpleNameReferenceExpression (identifier = a) [a] : A
                        USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
                UPostfixExpression (operator = --) [a.mutableProp--] : int
                    UQualifiedReferenceExpression [a.mutableProp] : int
                        USimpleNameReferenceExpression (identifier = a) [a] : A
                        USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
        UMethod (name = ext) [public static final fun ext(@org.jetbrains.annotations.NotNull $this$ext: A) : void {...}]
            UParameter (name = $this$ext) [@org.jetbrains.annotations.NotNull var $this$ext: A]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] : int
                UDeclarationsExpression [var x: int = -mutableProp]
                    ULocalVariable (name = x) [var x: int = -mutableProp]
                        UPrefixExpression (operator = -) [-mutableProp] : int
                            USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
                UBinaryExpression (operator = =) [mutableProp = 1] : kotlin.Unit
                    USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
                    ULiteralExpression (value = 1) [1] : int
                UBinaryExpression (operator = +=) [mutableProp += x] : kotlin.Unit
                    USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
                    USimpleNameReferenceExpression (identifier = x) [x] : int
                UPrefixExpression (operator = ++) [++mutableProp] : int
                    USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
                UPostfixExpression (operator = --) [mutableProp--] : int
                    USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
    UClass (name = A) [public final class A {...}]
        UField (name = privateProp) [@org.jetbrains.annotations.NotNull private var privateProp: int = 0]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            ULiteralExpression (value = 0) [0] : int
        UField (name = mutableProp) [@org.jetbrains.annotations.NotNull private var mutableProp: int]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
        UMethod (name = getMutableProp) [public final fun getMutableProp() : int = UastEmptyExpression]
        UMethod (name = setMutableProp) [public final fun setMutableProp(<set-?>: int) : void = UastEmptyExpression]
            UParameter (name = <set-?>) [var <set-?>: int]
        UMethod (name = add) [public final fun add(@org.jetbrains.annotations.NotNull x: int) : int {...}]
            UParameter (name = x) [@org.jetbrains.annotations.NotNull var x: int]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] : java.lang.Void
                UDeclarationsExpression [var result: int = privateProp]
                    ULocalVariable (name = result) [var result: int = privateProp]
                        USimpleNameReferenceExpression (identifier = privateProp) [privateProp] : int
                UBinaryExpression (operator = =) [privateProp = x] : kotlin.Unit
                    USimpleNameReferenceExpression (identifier = privateProp) [privateProp] : int
                    USimpleNameReferenceExpression (identifier = x) [x] : int
                UReturnExpression [return privateProp] : java.lang.Void
                    USimpleNameReferenceExpression (identifier = privateProp) [privateProp] : int
        UMethod (name = A) [public fun A(@org.jetbrains.annotations.NotNull init: int) {...}]
            UParameter (name = init) [@org.jetbrains.annotations.NotNull var init: int]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}]
                UBlockExpression [{...}] : kotlin.Unit
                    UBinaryExpression (operator = =) [mutableProp = init] : kotlin.Unit
                        USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] : int
                        USimpleNameReferenceExpression (identifier = init) [init] : int
