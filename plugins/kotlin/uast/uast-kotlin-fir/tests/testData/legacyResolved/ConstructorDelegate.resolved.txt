UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = Base) -> USimpleNameReferenceExpression (identifier = Base) -> Kotlin_Light_Class:interface Base {
    fun print()
}: Base
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = print) -> Decompiled_Method: print
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = x) -> Kotlin_Light_Value_Parameter: x
UTypeReferenceExpression (name = Base) -> USimpleNameReferenceExpression (identifier = Base) -> Kotlin_Light_Class:interface Base {
    fun print()
}: Base
UTypeReferenceExpression (name = Base) -> USimpleNameReferenceExpression (identifier = Base) -> Kotlin_Light_Class:interface Base {
    fun print()
}: Base
UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = createBase) -> Kotlin_Light_Method: createBase
UTypeReferenceExpression (name = java.lang.CharSequence) -> USimpleNameReferenceExpression (identifier = CharSequence) -> Decompiled_Class: CharSequence
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = Base) -> USimpleNameReferenceExpression (identifier = Base) -> Kotlin_Light_Class:interface Base {
    fun print()
}: Base
    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = BaseImpl) -> Kotlin_Light_Method: BaseImpl
    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = i) -> Kotlin_Light_Value_Parameter: i