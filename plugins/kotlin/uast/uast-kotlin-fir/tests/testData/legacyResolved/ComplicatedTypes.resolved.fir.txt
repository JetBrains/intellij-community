UImportStatement (isOnDemand = false) -> UQualifiedReferenceExpression -> Decompiled_Class: ParameterizedType
UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang.reflect: reflect
UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = reflect) -> PsiPackage:java.lang.reflect: reflect
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = ParameterizedType) -> Decompiled_Class: ParameterizedType
UImportStatement (isOnDemand = false) -> UQualifiedReferenceExpression -> Decompiled_Class: Type
UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang.reflect: reflect
UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = reflect) -> PsiPackage:java.lang.reflect: reflect
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = Type) -> Decompiled_Class: Type
UAnnotation (fqName = kotlin.PublishedApi) -> USimpleNameReferenceExpression (identifier = PublishedApi) -> Decompiled_Class: PublishedApi
UTypeReferenceExpression (name = java.lang.reflect.Type) -> USimpleNameReferenceExpression (identifier = Type) -> Decompiled_Class: Type
    ULocalVariable (name = base) -> UObjectLiteralExpression -> Kotlin_Light_Method:
    ULocalVariable (name = base) -> UObjectLiteralExpression -> Kotlin_Light_Method:
    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = TypeBase) -> Kotlin_Light_Class:@PublishedApi
internal open class TypeBase<T>: TypeBase
    UTypeReferenceExpression (name = T) -> USimpleNameReferenceExpression (identifier = T) -> TYPE_PARAMETER: T
    UPostfixExpression (operator = !!) -> UQualifiedReferenceExpression -> Decompiled_Method: getGenericSuperclass
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Method: getJavaClass
    UClassLiteralExpression -> USimpleNameReferenceExpression (identifier = base) -> Kotlin_Light_Variable: base
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> Decompiled_Method: getJavaClass
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = genericSuperclass) -> Decompiled_Method: getGenericSuperclass
    UPostfixExpression (operator = !!) -> USimpleNameReferenceExpression (identifier = !!) -> null: null
    UPostfixExpression (operator = !!) -> UQualifiedReferenceExpression -> Decompiled_Method: first
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Method: getActualTypeArguments
    UBinaryExpressionWithType -> USimpleNameReferenceExpression (identifier = superType) -> Kotlin_Light_Variable: superType
    UBinaryExpressionWithType -> USimpleNameReferenceExpression (identifier = as) -> null: null
    UTypeReferenceExpression (name = java.lang.reflect.ParameterizedType) -> USimpleNameReferenceExpression (identifier = ParameterizedType) -> Decompiled_Class: ParameterizedType
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = actualTypeArguments) -> Decompiled_Method: getActualTypeArguments
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = first) -> FUN: first
    UPostfixExpression (operator = !!) -> USimpleNameReferenceExpression (identifier = !!) -> null: null
