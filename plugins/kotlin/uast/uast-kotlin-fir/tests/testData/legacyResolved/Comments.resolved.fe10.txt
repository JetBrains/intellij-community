UComment -> USimpleNameReferenceExpression (identifier = Margherita) -> null: Margherita
UComment -> USimpleNameReferenceExpression (identifier = Pizza) -> null: Pizza
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UComment -> UQualifiedReferenceExpression -> null: null
UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> null: null
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> null: java
UComment -> UQualifiedReferenceExpression -> null: null
UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> null: null
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> null: java
UComment -> USimpleNameReferenceExpression (identifier = ClassCastException) -> null: ClassCastException
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UComment -> UQualifiedReferenceExpression -> null: null
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = Pizza) -> null: Pizza
UComment -> USimpleNameReferenceExpression (identifier = ingredient) -> null: ingredient
UComment -> UQualifiedReferenceExpression -> null: null
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = kotlin) -> null: kotlin
UComment -> UQualifiedReferenceExpression -> null: null
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = Margherita) -> null: Margherita
UTypeReferenceExpression (name = Pizza.Ingredient) -> USimpleNameReferenceExpression (identifier = Ingredient) -> Kotlin_Light_Class:/** Ingredient of [Pizza] */
    interface Ingredient: Ingredient
UTypeReferenceExpression (name = boolean) -> USimpleNameReferenceExpression (identifier = Boolean) -> Decompiled_Class: Boolean
UComment -> USimpleNameReferenceExpression (identifier = Pizza) -> null: Pizza
UComment -> USimpleNameReferenceExpression (identifier = Pizza) -> null: Pizza
UComment -> USimpleNameReferenceExpression (identifier = P) -> null: P
UComment -> USimpleNameReferenceExpression (identifier = self) -> null: self
UTypeReferenceExpression (name = Pizza.Builder<P>) -> USimpleNameReferenceExpression (identifier = Pizza) -> Kotlin_Light_Class:/**
 * Common Pizza Interface
 *
 * @see Margherita
 */
interface Pizza {
    /** The size of [Pizza] */
    val size: Int

    /**
     * Human-readable name of type [string_link_alias][java.lang.String]
     *
     * @throws java.lang.IllegalStateException
     * @throws ClassCastException
     */
    fun getName(): java.lang.String

    /**
     * Checks whether pizza contains the specified [Pizza.Ingredient]
     *
     * @param ingredient the ingredient to check
     * @exception kotlin.NotImplementedError
     * @sample Margherita.contains
     */
    fun contains(ingredient: Ingredient): Boolean

    /** Ingredient of [Pizza] */
    interface Ingredient

    /**
     * Abstract [Pizza] builder
     *
     * @param P well-known hack to solve abstract builder chain problem, see [self]
     */
    abstract class Builder<P: Pizza.Builder<P>> {
        private val ingredients: MutableSet<Pizza.Ingredient> = mutableSetOf()

        /**
         * Adds [ingredient] to the [ingredients]
         *
         * @return value of type [P]
         */
        abstract fun addIngredient(ingredient: Pizza.Ingredient): P
        abstract fun build(): Pizza
        protected abstract fun self(): P
    }
}: Pizza
UTypeReferenceExpression (name = Pizza.Builder<P>) -> USimpleNameReferenceExpression (identifier = Builder) -> Kotlin_Light_Class:/**
     * Abstract [Pizza] builder
     *
     * @param P well-known hack to solve abstract builder chain problem, see [self]
     */
    abstract class Builder<P: Pizza.Builder<P>> {
        private val ingredients: MutableSet<Pizza.Ingredient> = mutableSetOf()

        /**
         * Adds [ingredient] to the [ingredients]
         *
         * @return value of type [P]
         */
        abstract fun addIngredient(ingredient: Pizza.Ingredient): P
        abstract fun build(): Pizza
        protected abstract fun self(): P
    }: Builder
UTypeReferenceExpression (name = P) -> USimpleNameReferenceExpression (identifier = P) -> Kotlin_Light_Type_Parameter: P
UTypeReferenceExpression (name = java.util.Set<Pizza.Ingredient>) -> USimpleNameReferenceExpression (identifier = MutableSet) -> Decompiled_Class: Set
UTypeReferenceExpression (name = Pizza.Ingredient) -> USimpleNameReferenceExpression (identifier = Pizza) -> Kotlin_Light_Class:/**
 * Common Pizza Interface
 *
 * @see Margherita
 */
interface Pizza {
    /** The size of [Pizza] */
    val size: Int

    /**
     * Human-readable name of type [string_link_alias][java.lang.String]
     *
     * @throws java.lang.IllegalStateException
     * @throws ClassCastException
     */
    fun getName(): java.lang.String

    /**
     * Checks whether pizza contains the specified [Pizza.Ingredient]
     *
     * @param ingredient the ingredient to check
     * @exception kotlin.NotImplementedError
     * @sample Margherita.contains
     */
    fun contains(ingredient: Ingredient): Boolean

    /** Ingredient of [Pizza] */
    interface Ingredient

    /**
     * Abstract [Pizza] builder
     *
     * @param P well-known hack to solve abstract builder chain problem, see [self]
     */
    abstract class Builder<P: Pizza.Builder<P>> {
        private val ingredients: MutableSet<Pizza.Ingredient> = mutableSetOf()

        /**
         * Adds [ingredient] to the [ingredients]
         *
         * @return value of type [P]
         */
        abstract fun addIngredient(ingredient: Pizza.Ingredient): P
        abstract fun build(): Pizza
        protected abstract fun self(): P
    }
}: Pizza
UTypeReferenceExpression (name = Pizza.Ingredient) -> USimpleNameReferenceExpression (identifier = Ingredient) -> Kotlin_Light_Class:/** Ingredient of [Pizza] */
    interface Ingredient: Ingredient
UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = mutableSetOf) -> Decompiled_Method: mutableSetOf
UComment -> USimpleNameReferenceExpression (identifier = ingredient) -> null: ingredient
UComment -> USimpleNameReferenceExpression (identifier = ingredients) -> null: ingredients
UComment -> USimpleNameReferenceExpression (identifier = P) -> null: P
UTypeReferenceExpression (name = Pizza.Ingredient) -> USimpleNameReferenceExpression (identifier = Pizza) -> Kotlin_Light_Class:/**
 * Common Pizza Interface
 *
 * @see Margherita
 */
interface Pizza {
    /** The size of [Pizza] */
    val size: Int

    /**
     * Human-readable name of type [string_link_alias][java.lang.String]
     *
     * @throws java.lang.IllegalStateException
     * @throws ClassCastException
     */
    fun getName(): java.lang.String

    /**
     * Checks whether pizza contains the specified [Pizza.Ingredient]
     *
     * @param ingredient the ingredient to check
     * @exception kotlin.NotImplementedError
     * @sample Margherita.contains
     */
    fun contains(ingredient: Ingredient): Boolean

    /** Ingredient of [Pizza] */
    interface Ingredient

    /**
     * Abstract [Pizza] builder
     *
     * @param P well-known hack to solve abstract builder chain problem, see [self]
     */
    abstract class Builder<P: Pizza.Builder<P>> {
        private val ingredients: MutableSet<Pizza.Ingredient> = mutableSetOf()

        /**
         * Adds [ingredient] to the [ingredients]
         *
         * @return value of type [P]
         */
        abstract fun addIngredient(ingredient: Pizza.Ingredient): P
        abstract fun build(): Pizza
        protected abstract fun self(): P
    }
}: Pizza
UTypeReferenceExpression (name = Pizza.Ingredient) -> USimpleNameReferenceExpression (identifier = Ingredient) -> Kotlin_Light_Class:/** Ingredient of [Pizza] */
    interface Ingredient: Ingredient
UTypeReferenceExpression (name = P) -> USimpleNameReferenceExpression (identifier = P) -> Kotlin_Light_Type_Parameter: P
UTypeReferenceExpression (name = Pizza) -> USimpleNameReferenceExpression (identifier = Pizza) -> Kotlin_Light_Class:/**
 * Common Pizza Interface
 *
 * @see Margherita
 */
interface Pizza {
    /** The size of [Pizza] */
    val size: Int

    /**
     * Human-readable name of type [string_link_alias][java.lang.String]
     *
     * @throws java.lang.IllegalStateException
     * @throws ClassCastException
     */
    fun getName(): java.lang.String

    /**
     * Checks whether pizza contains the specified [Pizza.Ingredient]
     *
     * @param ingredient the ingredient to check
     * @exception kotlin.NotImplementedError
     * @sample Margherita.contains
     */
    fun contains(ingredient: Ingredient): Boolean

    /** Ingredient of [Pizza] */
    interface Ingredient

    /**
     * Abstract [Pizza] builder
     *
     * @param P well-known hack to solve abstract builder chain problem, see [self]
     */
    abstract class Builder<P: Pizza.Builder<P>> {
        private val ingredients: MutableSet<Pizza.Ingredient> = mutableSetOf()

        /**
         * Adds [ingredient] to the [ingredients]
         *
         * @return value of type [P]
         */
        abstract fun addIngredient(ingredient: Pizza.Ingredient): P
        abstract fun build(): Pizza
        protected abstract fun self(): P
    }
}: Pizza
UTypeReferenceExpression (name = P) -> USimpleNameReferenceExpression (identifier = P) -> Kotlin_Light_Type_Parameter: P
UComment -> USimpleNameReferenceExpression (identifier = Pizza) -> null: Pizza
UComment -> USimpleNameReferenceExpression (identifier = size) -> null: size
UComment -> USimpleNameReferenceExpression (identifier = Margherita) -> null: Margherita
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = Pizza) -> USimpleNameReferenceExpression (identifier = Pizza) -> Kotlin_Light_Class:/**
 * Common Pizza Interface
 *
 * @see Margherita
 */
interface Pizza {
    /** The size of [Pizza] */
    val size: Int

    /**
     * Human-readable name of type [string_link_alias][java.lang.String]
     *
     * @throws java.lang.IllegalStateException
     * @throws ClassCastException
     */
    fun getName(): java.lang.String

    /**
     * Checks whether pizza contains the specified [Pizza.Ingredient]
     *
     * @param ingredient the ingredient to check
     * @exception kotlin.NotImplementedError
     * @sample Margherita.contains
     */
    fun contains(ingredient: Ingredient): Boolean

    /** Ingredient of [Pizza] */
    interface Ingredient

    /**
     * Abstract [Pizza] builder
     *
     * @param P well-known hack to solve abstract builder chain problem, see [self]
     */
    abstract class Builder<P: Pizza.Builder<P>> {
        private val ingredients: MutableSet<Pizza.Ingredient> = mutableSetOf()

        /**
         * Adds [ingredient] to the [ingredients]
         *
         * @return value of type [P]
         */
        abstract fun addIngredient(ingredient: Pizza.Ingredient): P
        abstract fun build(): Pizza
        protected abstract fun self(): P
    }
}: Pizza
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UReturnExpression -> UQualifiedReferenceExpression -> Decompiled_Method: String
UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Method: String
UComment -> UQualifiedReferenceExpression -> null: null
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = Pizza) -> null: Pizza
UComment -> USimpleNameReferenceExpression (identifier = ingredient) -> null: ingredient
UComment -> UQualifiedReferenceExpression -> null: null
UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = Pizza) -> null: Pizza
UTypeReferenceExpression (name = Pizza.Ingredient) -> USimpleNameReferenceExpression (identifier = Pizza) -> Kotlin_Light_Class:/**
 * Common Pizza Interface
 *
 * @see Margherita
 */
interface Pizza {
    /** The size of [Pizza] */
    val size: Int

    /**
     * Human-readable name of type [string_link_alias][java.lang.String]
     *
     * @throws java.lang.IllegalStateException
     * @throws ClassCastException
     */
    fun getName(): java.lang.String

    /**
     * Checks whether pizza contains the specified [Pizza.Ingredient]
     *
     * @param ingredient the ingredient to check
     * @exception kotlin.NotImplementedError
     * @sample Margherita.contains
     */
    fun contains(ingredient: Ingredient): Boolean

    /** Ingredient of [Pizza] */
    interface Ingredient

    /**
     * Abstract [Pizza] builder
     *
     * @param P well-known hack to solve abstract builder chain problem, see [self]
     */
    abstract class Builder<P: Pizza.Builder<P>> {
        private val ingredients: MutableSet<Pizza.Ingredient> = mutableSetOf()

        /**
         * Adds [ingredient] to the [ingredients]
         *
         * @return value of type [P]
         */
        abstract fun addIngredient(ingredient: Pizza.Ingredient): P
        abstract fun build(): Pizza
        protected abstract fun self(): P
    }
}: Pizza
UTypeReferenceExpression (name = Pizza.Ingredient) -> USimpleNameReferenceExpression (identifier = Ingredient) -> Kotlin_Light_Class:/** Ingredient of [Pizza] */
    interface Ingredient: Ingredient
UTypeReferenceExpression (name = boolean) -> USimpleNameReferenceExpression (identifier = Boolean) -> Decompiled_Class: Boolean
