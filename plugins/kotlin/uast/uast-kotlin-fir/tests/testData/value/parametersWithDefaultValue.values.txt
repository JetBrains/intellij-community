UFile (package = test.pkg) [package test.pkg...]
    UClass (name = Foo) [public final class Foo {...}]
        UField (name = Companion) [@null public static final var Companion: test.pkg.Foo.Companion]
            UAnnotation (fqName = null) [@null]
        UField (name = SIZE) [@org.jetbrains.annotations.NotNull private static final var SIZE: int = 42]
            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            ULiteralExpression (value = 42) [42] = 42
        UMethod (name = method1) [public final fun method1(@org.jetbrains.annotations.NotNull myInt: int, @org.jetbrains.annotations.Nullable myInt2: java.lang.Integer, @org.jetbrains.annotations.NotNull myByte: int, @org.jetbrains.annotations.NotNull str: java.lang.String, @org.jetbrains.annotations.NotNull args: java.lang.String...) : void {...}]
            UParameter (name = myInt) [@org.jetbrains.annotations.NotNull var myInt: int = 42]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                ULiteralExpression (value = 42) [42] = 42
            UParameter (name = myInt2) [@org.jetbrains.annotations.Nullable var myInt2: java.lang.Integer = null]
                UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
                ULiteralExpression (value = null) [null] = null
            UParameter (name = myByte) [@org.jetbrains.annotations.NotNull var myByte: int = 2 * 21]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UBinaryExpression (operator = *) [2 * 21] = 42
                    ULiteralExpression (value = 2) [2] = 2
                    ULiteralExpression (value = 21) [21] = 21
            UParameter (name = str) [@org.jetbrains.annotations.NotNull var str: java.lang.String = "hello " + "world"]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UBinaryExpression (operator = +) ["hello " + "world"] = "hello world"
                    ULiteralExpression (value = "hello ") ["hello "] = "hello "
                    ULiteralExpression (value = "world") ["world"] = "world"
            UParameter (name = args) [@org.jetbrains.annotations.NotNull var args: java.lang.String...]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] = Undetermined
        UMethod (name = method2) [public final fun method2(@org.jetbrains.annotations.NotNull myInt: int, @org.jetbrains.annotations.NotNull myInt2: int) : void {...}]
            UParameter (name = myInt) [@org.jetbrains.annotations.NotNull var myInt: int]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = myInt2) [@org.jetbrains.annotations.NotNull var myInt2: int = (2 * myInt) * SIZE]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UBinaryExpression (operator = *) [(2 * myInt) * SIZE] = Undetermined
                    UParenthesizedExpression [(2 * myInt)] = Undetermined
                        UBinaryExpression (operator = *) [2 * myInt] = Undetermined
                            ULiteralExpression (value = 2) [2] = 2
                            USimpleNameReferenceExpression (identifier = myInt) [myInt] = Undetermined
                    USimpleNameReferenceExpression (identifier = SIZE) [SIZE] = 42
            UBlockExpression [{...}] = Undetermined
        UMethod (name = method3) [public final fun method3(@org.jetbrains.annotations.NotNull str: java.lang.String, @org.jetbrains.annotations.NotNull myInt: int, @org.jetbrains.annotations.NotNull myInt2: int) : void {...}]
            UParameter (name = str) [@org.jetbrains.annotations.NotNull var str: java.lang.String]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = myInt) [@org.jetbrains.annotations.NotNull var myInt: int]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = myInt2) [@org.jetbrains.annotations.NotNull var myInt2: int = double(myInt) + str.length]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UBinaryExpression (operator = +) [double(myInt) + str.length] = Undetermined
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [double(myInt)] = external double(myInt)(Undetermined)
                        UIdentifier (Identifier (double)) [UIdentifier (Identifier (double))]
                        USimpleNameReferenceExpression (identifier = double, resolvesTo = null) [double] = external double(myInt)(Undetermined)
                        USimpleNameReferenceExpression (identifier = myInt) [myInt] = Undetermined
                    UQualifiedReferenceExpression [str.length] = external length()
                        USimpleNameReferenceExpression (identifier = str) [str] = Undetermined
                        USimpleNameReferenceExpression (identifier = length) [length] = external length()
            UBlockExpression [{...}] = Undetermined
        UMethod (name = emptyLambda) [public final fun emptyLambda(@org.jetbrains.annotations.NotNull sizeOf: kotlin.jvm.functions.Function0<kotlin.Unit>) : void {...}]
            UParameter (name = sizeOf) [@org.jetbrains.annotations.NotNull var sizeOf: kotlin.jvm.functions.Function0<kotlin.Unit> = { ...}]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                ULambdaExpression [{ ...}] = Undetermined
                    UBlockExpression [{...}] = Undetermined
            UBlockExpression [{...}] = Undetermined
        UMethod (name = Foo) [public fun Foo() = UastEmptyExpression]
        UClass (name = Companion) [public static final class Companion {...}]
            UMethod (name = double) [public final fun double(@org.jetbrains.annotations.NotNull myInt: int) : int {...}]
                UParameter (name = myInt) [@org.jetbrains.annotations.NotNull var myInt: int]
                    UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UBlockExpression [{...}] = Nothing
                    UReturnExpression [return 2 * myInt] = Nothing
                        UBinaryExpression (operator = *) [2 * myInt] = Undetermined
                            ULiteralExpression (value = 2) [2] = 2
                            USimpleNameReferenceExpression (identifier = myInt) [myInt] = Undetermined
            UMethod (name = print) [public final fun print(@org.jetbrains.annotations.NotNull foo: test.pkg.Foo) : void {...}]
                UParameter (name = foo) [@org.jetbrains.annotations.NotNull var foo: test.pkg.Foo = <init>()]
                    UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<init>()] = external <init>()()
                        UIdentifier (Identifier (Foo)) [UIdentifier (Identifier (Foo))]
                        USimpleNameReferenceExpression (identifier = <init>, resolvesTo = PsiClass: Foo) [<init>] = external <init>()()
                UBlockExpression [{...}] = external println(foo)(Undetermined)
                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(foo)] = external println(foo)(Undetermined)
                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println(foo)(Undetermined)
                        USimpleNameReferenceExpression (identifier = foo) [foo] = Undetermined
            UMethod (name = Companion) [private fun Companion() = UastEmptyExpression]