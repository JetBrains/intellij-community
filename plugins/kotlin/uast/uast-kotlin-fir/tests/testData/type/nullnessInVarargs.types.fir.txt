UFile (package = test.pkg) [package test.pkg...]
    UClass (name = NullnessInVarargsKt) [public final class NullnessInVarargsKt {...}]
        UMethod (name = arrayMapOf) [public static final fun arrayMapOf() : test.pkg.ArrayMap<K,V> {...}]
            UBlockExpression [{...}]
                UReturnExpression [return ArrayMap()]
                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [ArrayMap()] : @org.jetbrains.annotations.NotNull() test.pkg.ArrayMap<K, V>
                        UIdentifier (Identifier (ArrayMap)) [UIdentifier (Identifier (ArrayMap))]
                        USimpleNameReferenceExpression (identifier = ArrayMap, resolvesTo = PsiClass: ArrayMap) [ArrayMap]
        UMethod (name = arrayMapOf) [public static final fun arrayMapOf(@org.jetbrains.annotations.NotNull pairs: kotlin.Pair<? extends K,? extends V>...) : test.pkg.ArrayMap<K,V> {...}]
            UParameter (name = pairs) [@org.jetbrains.annotations.NotNull var pairs: kotlin.Pair<? extends K,? extends V>...]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] : @org.jetbrains.annotations.NotNull() java.lang.Void
                UDeclarationsExpression [var map: test.pkg.ArrayMap<K,V> = ArrayMap(pairs.size)]
                    ULocalVariable (name = map) [var map: test.pkg.ArrayMap<K,V> = ArrayMap(pairs.size)]
                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [ArrayMap(pairs.size)] : @org.jetbrains.annotations.NotNull() test.pkg.ArrayMap<K, V>
                            UIdentifier (Identifier (ArrayMap)) [UIdentifier (Identifier (ArrayMap))]
                            USimpleNameReferenceExpression (identifier = ArrayMap, resolvesTo = PsiClass: ArrayMap) [ArrayMap]
                            UQualifiedReferenceExpression [pairs.size] : int
                                USimpleNameReferenceExpression (identifier = pairs) [pairs] : @org.jetbrains.annotations.NotNull() kotlin.Pair<? extends K, ? extends V> @org.jetbrains.annotations.NotNull() []
                                USimpleNameReferenceExpression (identifier = size) [size] : int
                UForEachExpression [for (pair : pairs) {...}]
                    USimpleNameReferenceExpression (identifier = pairs) [pairs] : @org.jetbrains.annotations.NotNull() kotlin.Pair<? extends K, ? extends V> @org.jetbrains.annotations.NotNull() []
                    UBlockExpression [{...}] : @org.jetbrains.annotations.NotNull() kotlin.Unit
                        UBinaryExpression (operator = =) [map[pair.first] = pair.second] : @org.jetbrains.annotations.NotNull() kotlin.Unit
                            UArrayAccessExpression [map[pair.first]] : V
                                USimpleNameReferenceExpression (identifier = map) [map] : @org.jetbrains.annotations.NotNull() test.pkg.ArrayMap<K, V>
                                UQualifiedReferenceExpression [pair.first] : K
                                    USimpleNameReferenceExpression (identifier = pair) [pair] : @org.jetbrains.annotations.NotNull() kotlin.Pair<? extends K, ? extends V>
                                    USimpleNameReferenceExpression (identifier = first) [first] : K
                            UQualifiedReferenceExpression [pair.second] : V
                                USimpleNameReferenceExpression (identifier = pair) [pair] : @org.jetbrains.annotations.NotNull() kotlin.Pair<? extends K, ? extends V>
                                USimpleNameReferenceExpression (identifier = second) [second] : V
                UReturnExpression [return map] : @org.jetbrains.annotations.NotNull() java.lang.Void
                    USimpleNameReferenceExpression (identifier = map) [map] : @org.jetbrains.annotations.NotNull() test.pkg.ArrayMap<K, V>
        UMethod (name = arrayMapOfNullable) [public static final fun arrayMapOfNullable(@org.jetbrains.annotations.Nullable pairs: kotlin.Pair<? extends K,? extends V>...) : test.pkg.ArrayMap<K,V> {...}]
            UParameter (name = pairs) [@org.jetbrains.annotations.Nullable var pairs: kotlin.Pair<? extends K,? extends V>...]
                UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
            UBlockExpression [{...}] : @org.jetbrains.annotations.NotNull() java.lang.Void
                UReturnExpression [return null] : @org.jetbrains.annotations.NotNull() java.lang.Void
                    ULiteralExpression (value = null) [null] : null
    UClass (name = ArrayMap) [public final class ArrayMap : java.util.HashMap<K,V> {...}]
        UMethod (name = ArrayMap) [public fun ArrayMap() {...}]
            UBlockExpression [{...}]
                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [HashMap()]
                    UIdentifier (Identifier (HashMap)) [UIdentifier (Identifier (HashMap))]
                    USimpleNameReferenceExpression (identifier = HashMap, resolvesTo = PsiClass: HashMap) [HashMap]
