UFile (package = test.pkg) [package test.pkg...]
    UClass (name = Issue) [public final class Issue {...}]
        UField (name = Companion) [@null public static final var Companion: test.pkg.Issue.Companion]
            UAnnotation (fqName = null) [@null]
        UMethod (name = Issue) [public fun Issue() = UastEmptyExpression]
        UMethod (name = create) [public static final fun create(@org.jetbrains.annotations.NotNull id: java.lang.String, @org.jetbrains.annotations.NotNull briefDescription: java.lang.String, @org.jetbrains.annotations.NotNull explanation: java.lang.String) : test.pkg.Issue {...}]
            UParameter (name = id) [@org.jetbrains.annotations.NotNull var id: java.lang.String]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = briefDescription) [@org.jetbrains.annotations.NotNull var briefDescription: java.lang.String]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = explanation) [@org.jetbrains.annotations.NotNull var explanation: java.lang.String]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] : @org.jetbrains.annotations.NotNull() java.lang.Void
                UReturnExpression [return Issue()] : @org.jetbrains.annotations.NotNull() java.lang.Void
                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [Issue()] : @org.jetbrains.annotations.NotNull() test.pkg.Issue
                        UIdentifier (Identifier (Issue)) [UIdentifier (Identifier (Issue))]
                        USimpleNameReferenceExpression (identifier = Issue, resolvesTo = PsiClass: Issue) [Issue]
        UClass (name = Companion) [public static final class Companion {...}]
            UMethod (name = create) [@kotlin.jvm.JvmStatic...}]
                UAnnotation (fqName = kotlin.jvm.JvmStatic) [@kotlin.jvm.JvmStatic]
                UParameter (name = id) [@org.jetbrains.annotations.NotNull var id: java.lang.String]
                    UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UParameter (name = briefDescription) [@org.jetbrains.annotations.NotNull var briefDescription: java.lang.String]
                    UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UParameter (name = explanation) [@org.jetbrains.annotations.NotNull var explanation: java.lang.String]
                    UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                UBlockExpression [{...}] : @org.jetbrains.annotations.NotNull() java.lang.Void
                    UReturnExpression [return Issue()] : @org.jetbrains.annotations.NotNull() java.lang.Void
                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [Issue()] : @org.jetbrains.annotations.NotNull() test.pkg.Issue
                            UIdentifier (Identifier (Issue)) [UIdentifier (Identifier (Issue))]
                            USimpleNameReferenceExpression (identifier = Issue, resolvesTo = PsiClass: Issue) [Issue]
            UMethod (name = Companion) [private fun Companion() = UastEmptyExpression]
