UFile (package = ) [public final class ArrayGetAssignMultiIndexKt {...]
    UClass (name = ArrayGetAssignMultiIndexKt) [public final class ArrayGetAssignMultiIndexKt {...}]
        UMethod (name = get) [public static final fun get(@org.jetbrains.annotations.NotNull $this$get: java.lang.String[], @org.jetbrains.annotations.NotNull index1: int, @org.jetbrains.annotations.NotNull index2: int) : java.lang.String {...}]
            UParameter (name = $this$get) [@org.jetbrains.annotations.NotNull var $this$get: java.lang.String[]]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = index1) [@org.jetbrains.annotations.NotNull var index1: int]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = index2) [@org.jetbrains.annotations.NotNull var index2: int]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}]
                UReturnExpression [return this[index1 + index2]]
                    UArrayAccessExpression [this[index1 + index2]] : java.lang.String
                        UThisExpression (label = null) [this] : java.lang.String[]
                        UBinaryExpression (operator = +) [index1 + index2] : int
                            USimpleNameReferenceExpression (identifier = index1) [index1] : int
                            USimpleNameReferenceExpression (identifier = index2) [index2] : int
        UMethod (name = set) [public static final fun set(@org.jetbrains.annotations.NotNull $this$set: java.lang.String[], @org.jetbrains.annotations.NotNull index1: int, @org.jetbrains.annotations.NotNull index2: int, @org.jetbrains.annotations.NotNull elem: java.lang.String) : void {...}]
            UParameter (name = $this$set) [@org.jetbrains.annotations.NotNull var $this$set: java.lang.String[]]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = index1) [@org.jetbrains.annotations.NotNull var index1: int]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = index2) [@org.jetbrains.annotations.NotNull var index2: int]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UParameter (name = elem) [@org.jetbrains.annotations.NotNull var elem: java.lang.String]
                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
            UBlockExpression [{...}] : void
                UBinaryExpression (operator = =) [this[index1 + index2] = elem] : kotlin.Unit
                    UArrayAccessExpression [this[index1 + index2]] : java.lang.String
                        UThisExpression (label = null) [this] : java.lang.String[]
                        UBinaryExpression (operator = +) [index1 + index2] : int
                            USimpleNameReferenceExpression (identifier = index1) [index1] : int
                            USimpleNameReferenceExpression (identifier = index2) [index2] : int
                    USimpleNameReferenceExpression (identifier = elem) [elem] : java.lang.String
        UMethod (name = box) [public static final fun box() : java.lang.String {...}]
            UBlockExpression [{...}] : java.lang.Void
                UDeclarationsExpression [var s: java.lang.String[] = <init>(1, { var it: int ->...})]
                    ULocalVariable (name = s) [var s: java.lang.String[] = <init>(1, { var it: int ->...})]
                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<init>(1, { var it: int ->...})] : java.lang.String[]
                            UIdentifier (Identifier (Array)) [UIdentifier (Identifier (Array))]
                            ULiteralExpression (value = 1) [1] : int
                            ULambdaExpression [{ var it: int ->...}] : kotlin.jvm.functions.Function1<? super java.lang.Integer, ? extends java.lang.String>
                                UParameter (name = it) [var it: int]
                                UBlockExpression [{...}]
                                    UReturnExpression [return ""]
                                        UPolyadicExpression (operator = +) [""] : java.lang.String
                                            ULiteralExpression (value = "") [""] : java.lang.String
                UBinaryExpression (operator = =) [s[1, -1] = "O"] : kotlin.Unit
                    UArrayAccessExpression [s[1, -1]] : java.lang.String
                        USimpleNameReferenceExpression (identifier = s) [s] : java.lang.String[]
                        ULiteralExpression (value = 1) [1] : int
                        UPrefixExpression (operator = -) [-1] : int
                            ULiteralExpression (value = 1) [1] : int
                    UPolyadicExpression (operator = +) ["O"] : java.lang.String
                        ULiteralExpression (value = "O") ["O"] : java.lang.String
                UBinaryExpression (operator = +=) [s[2, -2] += "K"] : kotlin.Unit
                    UArrayAccessExpression [s[2, -2]] : java.lang.String
                        USimpleNameReferenceExpression (identifier = s) [s] : java.lang.String[]
                        ULiteralExpression (value = 2) [2] : int
                        UPrefixExpression (operator = -) [-2] : int
                            ULiteralExpression (value = 2) [2] : int
                    UPolyadicExpression (operator = +) ["K"] : java.lang.String
                        ULiteralExpression (value = "K") ["K"] : java.lang.String
                UReturnExpression [return s[-3, 3]] : java.lang.Void
                    UArrayAccessExpression [s[-3, 3]] : java.lang.String
                        USimpleNameReferenceExpression (identifier = s) [s] : java.lang.String[]
                        UPrefixExpression (operator = -) [-3] : int
                            ULiteralExpression (value = 3) [3] : int
                        ULiteralExpression (value = 3) [3] : int
