/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.kotlin.ide.konan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.jetbrains.kotlin.ide.konan.psi.NativeDefinitionsTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>NativeDefinitions.flex</tt>
 */
class NativeDefinitionsLexer implements FlexLexer, NativeDefinitionsTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_PLATFORM = 2;
  public static final int WAITING_VALUE = 4;
  public static final int CODE_END = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15456 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\4\11\1\46\1\47\1\50\1\11\1\51\1\11\1\52\1\53\4\11\51"+
    "\14\1\54\3\14\1\55\1\56\4\14\1\57\6\14\1\60\3\11\1\61\u02c1\11\1\62\277\11");

  /* The ZZ_CMAP_Y table has 3264 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\11\1\14\1\11\1\14\34"+
    "\11\1\15\1\16\1\17\1\20\7\11\1\21\1\22\1\11\1\23\4\11\1\24\10\11\1\25\12\11"+
    "\1\26\1\11\1\27\1\26\1\11\1\30\1\26\1\11\1\31\1\32\1\11\1\33\1\34\1\35\1\36"+
    "\4\11\1\37\6\11\1\40\1\41\1\42\1\43\3\11\1\44\6\11\1\16\3\11\1\45\2\11\1\46"+
    "\1\20\1\11\1\1\1\33\3\20\1\11\1\47\1\20\1\50\10\11\1\51\1\26\1\52\1\53\1\41"+
    "\1\54\1\55\1\56\1\51\1\57\1\60\1\53\1\41\1\61\1\62\1\63\1\64\1\65\1\66\1\23"+
    "\1\41\1\67\1\70\1\71\1\51\1\72\1\73\1\53\1\41\1\67\1\74\1\75\1\51\1\76\1\77"+
    "\1\100\1\101\1\37\1\102\1\103\1\64\1\104\1\105\1\106\1\41\1\107\1\110\1\111"+
    "\1\51\1\20\1\105\1\106\1\41\1\112\1\110\1\113\1\51\1\114\1\105\1\106\2\11"+
    "\1\115\1\116\1\51\1\117\1\120\1\121\1\11\1\122\1\123\1\124\1\64\1\125\1\26"+
    "\2\11\1\126\1\127\1\130\2\20\1\131\1\132\1\133\1\134\1\135\1\136\2\20\1\71"+
    "\1\137\1\130\1\140\1\141\1\11\1\142\1\26\1\143\1\141\1\11\1\142\1\144\3\20"+
    "\4\11\1\130\4\11\1\46\2\11\1\145\2\11\1\146\24\11\1\147\1\150\2\11\1\147\2"+
    "\11\1\151\1\152\1\14\3\11\1\152\3\11\1\44\2\20\1\11\1\20\5\11\1\153\1\26\45"+
    "\11\1\42\1\11\1\26\1\33\4\11\1\154\1\155\1\156\1\157\1\11\1\157\1\11\1\160"+
    "\1\156\1\161\5\11\1\162\1\130\1\20\1\163\1\130\5\11\1\164\2\11\1\33\4\11\1"+
    "\65\1\11\1\127\2\1\1\64\1\11\1\46\1\157\2\11\1\1\1\11\2\130\2\20\1\11\1\1"+
    "\3\11\1\127\1\11\1\42\2\130\1\165\1\46\4\20\4\11\1\1\1\130\1\166\1\160\7\11"+
    "\1\160\3\11\1\164\1\107\2\11\1\46\1\155\4\20\1\167\1\11\1\130\17\11\1\170"+
    "\21\11\1\153\2\11\1\153\1\171\1\11\1\46\3\11\1\172\1\173\1\174\1\142\1\173"+
    "\1\166\1\20\1\175\1\43\1\71\1\176\1\143\1\177\1\20\1\142\2\11\1\20\1\142\1"+
    "\200\1\71\1\201\1\202\1\203\1\136\1\204\1\20\2\11\1\155\147\20\2\11\1\127"+
    "\2\11\1\127\10\11\1\205\1\160\2\11\1\145\3\11\1\30\1\43\1\11\1\206\4\207\2"+
    "\11\2\20\1\43\35\20\1\210\1\20\1\26\1\211\1\26\4\11\1\212\1\26\4\11\1\146"+
    "\1\213\1\11\1\127\1\26\4\11\1\127\1\20\1\11\1\33\3\20\1\11\40\20\133\11\1"+
    "\65\4\20\136\11\1\33\1\20\10\11\1\142\4\20\2\11\1\46\20\11\1\142\1\11\1\1"+
    "\1\20\3\11\1\214\7\11\1\16\1\20\1\215\1\216\5\11\1\217\1\11\1\127\1\164\3"+
    "\20\1\215\2\11\1\164\1\220\3\11\1\160\4\11\1\65\1\130\1\11\1\221\2\11\1\46"+
    "\2\11\1\160\1\11\1\142\4\11\1\222\1\130\1\11\1\127\3\11\1\206\1\46\1\130\1"+
    "\11\1\121\4\11\1\34\1\223\1\11\1\224\1\225\1\226\1\207\2\11\1\146\1\65\7\11"+
    "\1\227\1\130\72\11\1\160\1\11\1\230\2\11\1\1\20\20\26\11\1\46\6\11\1\130\2"+
    "\20\1\206\1\231\1\41\1\232\1\233\6\11\1\16\1\20\1\234\25\11\1\46\1\20\4\11"+
    "\1\216\2\11\1\164\2\20\1\142\1\11\1\20\1\11\1\235\1\236\1\20\1\104\1\143\7"+
    "\11\1\42\1\176\1\130\1\26\1\126\1\26\1\33\1\64\4\11\1\127\1\237\1\240\1\241"+
    "\1\242\1\243\1\11\1\14\1\244\2\46\2\20\7\11\1\33\4\20\3\11\1\157\7\20\1\245"+
    "\10\20\1\11\1\142\3\11\2\71\1\20\2\11\1\236\1\11\1\33\2\11\1\33\1\11\1\46"+
    "\2\11\1\246\1\247\2\20\11\11\1\46\1\130\2\11\1\246\1\11\1\1\2\11\1\164\3\11"+
    "\1\160\11\20\23\11\1\206\1\11\1\65\1\164\11\20\1\250\2\11\1\251\1\11\1\65"+
    "\1\11\1\206\1\11\1\127\4\20\1\11\1\252\1\11\1\65\1\11\1\130\4\20\3\11\1\253"+
    "\4\20\1\254\1\255\1\11\1\256\2\20\1\11\1\142\1\11\1\142\2\20\1\141\1\11\1"+
    "\206\1\20\3\11\1\65\1\11\1\65\1\11\1\34\1\11\1\16\6\20\4\11\1\155\3\20\3\11"+
    "\1\34\3\11\1\34\60\20\4\11\1\206\1\20\1\64\1\43\3\11\1\257\1\20\1\11\1\155"+
    "\1\130\3\11\1\143\1\20\2\11\1\260\4\11\1\261\1\36\2\20\1\11\1\23\1\11\1\262"+
    "\4\20\1\263\1\31\1\155\3\11\1\33\1\130\1\52\1\53\1\41\1\67\1\74\1\264\1\265"+
    "\1\157\10\20\4\11\1\33\1\130\2\20\4\11\1\266\1\130\12\20\3\11\1\267\1\71\1"+
    "\270\2\20\4\11\1\271\1\130\2\20\3\11\1\164\1\130\3\20\1\11\1\107\1\1\1\130"+
    "\26\20\4\11\1\130\1\43\20\20\3\11\1\127\1\165\3\11\1\51\1\130\2\20\3\11\1"+
    "\155\20\20\1\41\2\11\1\14\1\71\1\130\1\20\1\216\1\11\1\216\1\141\1\206\4\20"+
    "\1\272\2\11\1\273\1\164\1\130\52\20\71\11\1\130\6\20\6\11\1\127\1\20\14\11"+
    "\1\160\53\20\2\11\1\127\75\20\44\11\1\206\33\20\43\11\1\155\1\11\1\127\1\130"+
    "\6\20\1\11\1\46\1\157\3\11\1\206\1\160\1\130\1\234\1\274\1\11\67\20\4\11\1"+
    "\157\2\11\1\127\1\43\1\11\4\20\1\16\1\20\76\11\1\142\1\20\57\11\1\34\20\20"+
    "\21\11\1\127\5\20\30\11\1\1\20\20\6\11\1\33\1\142\1\155\1\275\1\160\113\20"+
    "\1\276\1\11\1\277\1\20\1\300\11\20\1\301\33\20\5\11\1\143\3\11\1\156\1\302"+
    "\1\303\1\304\3\11\1\305\1\306\1\11\1\307\1\310\1\106\24\11\1\267\1\11\1\106"+
    "\1\146\1\11\1\146\1\11\1\143\1\11\1\143\1\127\1\11\1\127\1\11\1\41\1\11\1"+
    "\41\1\11\1\311\3\11\40\20\3\11\1\230\2\11\1\142\1\312\1\176\1\166\1\26\25"+
    "\20\1\14\1\217\1\313\75\20\14\11\1\157\1\206\2\20\4\11\1\33\1\130\112\20\1"+
    "\304\1\11\1\314\1\315\1\316\1\317\1\320\1\321\1\170\1\1\1\322\1\1\24\20\55"+
    "\11\1\206\2\20\103\11\1\157\15\11\1\46\150\11\1\16\123\11\1\71\1\20\41\11"+
    "\1\46\36\20\1\76\1\20\6\11\10\20\17\11\41\20");

  /* The ZZ_CMAP_A table has 3376 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\4\1\2\1\1\1\5\1\3\16\7\4\0\1\14\1\15\1\0\1\15\1\7\10\0\1\16\1\12\1"+
    "\0\2\7\1\64\1\63\1\61\1\7\1\60\1\7\1\62\1\7\1\6\2\0\1\6\3\0\2\7\1\42\1\36"+
    "\1\56\1\52\2\7\1\40\2\7\1\54\1\51\1\7\1\27\1\46\1\7\1\66\1\53\7\7\1\0\1\13"+
    "\2\0\1\57\1\0\1\34\1\35\1\17\1\32\1\25\1\65\1\37\1\43\1\23\1\7\1\44\1\24\1"+
    "\21\1\33\1\20\1\22\1\7\1\26\1\31\1\30\1\50\1\11\1\55\1\47\1\45\1\41\4\0\6"+
    "\7\1\10\32\7\2\0\4\7\4\0\1\7\2\0\1\7\7\0\1\7\4\0\1\7\5\0\7\7\1\0\12\7\4\0"+
    "\14\7\16\0\5\7\7\0\1\7\1\0\1\7\21\0\5\7\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1"+
    "\0\3\7\1\0\1\7\1\0\4\7\1\0\23\7\1\0\13\7\1\0\5\7\2\0\6\7\1\0\26\7\2\0\1\7"+
    "\6\0\10\7\7\0\17\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\13\7\5\0\3\7\15\0"+
    "\6\7\5\0\1\7\4\0\13\7\1\0\1\7\3\0\12\7\4\0\6\7\1\0\11\7\1\0\12\7\1\0\23\7"+
    "\2\0\1\7\17\0\14\7\2\0\11\7\4\0\1\7\5\0\16\7\2\0\5\7\1\0\10\7\6\0\20\7\2\0"+
    "\16\7\1\0\10\7\2\0\2\7\2\0\16\7\1\0\1\7\3\0\4\7\2\0\11\7\2\0\2\7\2\0\4\7\10"+
    "\0\1\7\4\0\2\7\1\0\5\7\7\0\2\7\4\0\3\7\1\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\7\1\0\1\7\7\0\20\7\13\0"+
    "\3\7\1\0\11\7\1\0\2\7\1\0\2\7\1\0\5\7\2\0\12\7\1\0\3\7\1\0\3\7\2\0\1\7\20"+
    "\0\1\7\7\0\7\7\1\0\3\7\1\0\10\7\2\0\6\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\7\1"+
    "\0\1\7\1\0\1\7\20\0\2\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3"+
    "\0\2\7\3\0\3\7\3\0\5\7\3\0\3\7\1\0\4\7\2\0\1\7\6\0\1\7\21\0\1\7\6\0\4\7\1"+
    "\0\10\7\1\0\3\7\1\0\30\7\3\0\10\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\3\7\5\0\4\7"+
    "\1\0\5\7\2\0\4\7\5\0\2\7\7\0\1\7\2\0\2\7\15\0\5\7\1\0\3\7\1\0\5\7\5\0\4\7"+
    "\7\0\1\7\12\0\6\7\2\0\2\7\1\0\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1"+
    "\7\4\0\6\7\1\0\1\7\1\0\10\7\2\0\2\7\14\0\13\7\4\0\20\7\1\0\12\7\7\0\2\7\1"+
    "\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0"+
    "\2\7\1\0\15\7\1\0\3\7\2\0\5\7\1\0\1\7\1\0\6\7\2\0\12\7\2\0\4\7\10\0\2\7\13"+
    "\0\1\7\1\0\1\7\1\0\1\7\4\0\12\7\1\0\24\7\3\0\5\7\1\0\12\7\6\0\1\7\11\0\6\7"+
    "\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\16\7\2\0\6\7\2\0\13\7\3\0\13\7\7\0\15"+
    "\7\1\0\7\7\13\0\4\7\14\0\1\7\1\0\2\7\14\0\4\7\3\0\1\7\3\0\3\7\15\0\4\7\1\0"+
    "\10\7\17\0\1\7\23\0\10\7\1\0\26\7\1\0\15\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7"+
    "\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\14\0\2\1\5\7\5\0\1\7\14\0"+
    "\1\7\15\0\1\7\1\0\1\7\3\0\13\7\2\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6"+
    "\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\1\7\5\0\5\7\4\0\1\7\1\0\5\7\6\0\14\7\11"+
    "\0\7\7\1\0\7\7\6\0\3\7\11\0\5\7\2\0\5\7\3\0\7\7\2\0\2\7\2\0\3\7\5\0\13\7\4"+
    "\0\12\7\1\0\1\7\7\0\11\7\2\0\27\7\2\0\5\7\10\0\1\7\7\0\10\7\3\0\1\7\1\0\1"+
    "\7\2\0\1\7\16\0\1\7\13\0\3\7\4\0\5\7\12\0\6\7\2\0\6\7\2\0\6\7\11\0\13\7\1"+
    "\0\2\7\2\0\7\7\4\0\5\7\3\0\5\7\5\0\12\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1"+
    "\0\12\7\3\0\15\7\3\0\2\7\30\0\3\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7"+
    "\3\0\2\7\22\0\3\7\4\0\14\7\1\0\16\7\1\0\2\7\1\0\1\7\15\0\1\7\2\0\4\7\4\0\10"+
    "\7\1\0\5\7\12\0\6\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0"+
    "\10\7\6\0\6\7\1\0\2\7\5\0\10\7\1\0\3\7\1\0\13\7\4\0\3\7\4\0\14\7\2\0\1\7\2"+
    "\0\4\7\2\0\1\7\11\0\5\7\5\0\3\7\3\0\10\7\6\0\1\7\1\0\7\7\1\0\1\7\1\0\4\7\1"+
    "\0\2\7\6\0\1\7\5\0\7\7\2\0\7\7\3\0\6\7\1\0\1\7\10\0\6\7\2\0\10\7\10\0\6\7"+
    "\2\0\1\7\3\0\1\7\13\0\7\7\1\0\2\7\1\0\14\7\3\0\1\7\1\0\2\7\1\0\11\7\5\0\15"+
    "\7\3\0\2\7\6\0\5\7\3\0\6\7\2\0\7\7\16\0\4\7\4\0\3\7\15\0\1\7\2\0\2\7\2\0\4"+
    "\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7\2\0\10\7\1\0\7\7\1\0\14\7\1\0"+
    "\4\7\1\0\5\7\1\0\1\7\3\0\11\7\1\0\10\7\2\0\2\7\5\0\1\7\12\0\2\7\1\0\2\7\1"+
    "\0\5\7\6\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4"+
    "\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\2\0\3"+
    "\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\2\4\1\5\1\4\1\5"+
    "\1\6\12\2\1\7\1\5\2\10\1\4\1\5\1\1"+
    "\1\4\1\0\15\2\11\11\1\0\1\10\21\2\12\11"+
    "\3\12\20\2\1\13\3\11\1\14\4\11\1\15\2\11"+
    "\20\2\5\11\1\16\4\11\1\17\3\2\1\20\14\2"+
    "\2\11\1\21\3\11\1\22\1\11\1\23\1\24\3\11"+
    "\1\2\1\25\1\26\11\2\1\27\2\2\1\30\1\2"+
    "\1\11\1\31\11\11\1\32\3\2\1\33\13\2\4\11"+
    "\1\34\5\11\1\35\1\36\17\2\1\37\10\11\1\40"+
    "\2\11\1\2\1\41\1\2\1\42\13\2\1\43\1\44"+
    "\1\45\1\46\2\11\1\47\5\11\7\2\1\50\5\2"+
    "\2\11\1\51\6\11\1\52\1\53\11\2\1\54\4\11"+
    "\1\55\1\56\1\11\1\57\1\60\11\2\1\11\1\61"+
    "\5\11\1\62\6\2\1\63\1\2\2\11\1\64\1\65"+
    "\1\66\1\67\4\2\1\70\2\2\1\71\1\11\6\2"+
    "\1\72\1\73\1\2\1\74\6\2\1\75\14\2\1\76"+
    "\4\2\1\77\11\2\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u01ef"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\245\0\u025d"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u05cd\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\334\0\u01ef\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u0906\0\u14a0"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u0906"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071"+
    "\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u0906\0\u0906\0\u21bb"+
    "\0\u21f2\0\u2229\0\u2260\0\334\0\334\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\334\0\u2486"+
    "\0\u24bd\0\334\0\u24f4\0\u252b\0\u0906\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u0906\0\u2751"+
    "\0\u2788\0\u27bf\0\334\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2"+
    "\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a"+
    "\0\u2ac1\0\u2af8\0\u0906\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b"+
    "\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3"+
    "\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b"+
    "\0\u2fb2\0\u0906\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc"+
    "\0\u3133\0\u316a\0\u0906\0\u31a1\0\u31d8\0\u320f\0\334\0\u3246"+
    "\0\334\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7"+
    "\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u0906\0\u0906\0\u0906\0\u0906"+
    "\0\u34da\0\u3511\0\u0906\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624"+
    "\0\u365b\0\u3692\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5\0\334"+
    "\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u0906"+
    "\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\334\0\334"+
    "\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba\0\u3bf1\0\u3c28"+
    "\0\u3c5f\0\334\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u0906\0\u0906"+
    "\0\u3d72\0\u0906\0\u0906\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85"+
    "\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\u0906\0\u3fcf\0\u4006"+
    "\0\u403d\0\u4074\0\u40ab\0\334\0\u40e2\0\u4119\0\u4150\0\u4187"+
    "\0\u41be\0\u41f5\0\334\0\u422c\0\u4263\0\u429a\0\u0906\0\u0906"+
    "\0\u0906\0\u0906\0\u42d1\0\u4308\0\u433f\0\u4376\0\334\0\u43ad"+
    "\0\u43e4\0\u0906\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7\0\u452e"+
    "\0\u4565\0\u0906\0\334\0\u459c\0\334\0\u45d3\0\u460a\0\u4641"+
    "\0\u4678\0\u46af\0\u46e6\0\334\0\u471d\0\u4754\0\u478b\0\u47c2"+
    "\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943\0\u497a"+
    "\0\334\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\334\0\u4a8d\0\u4ac4"+
    "\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\5\1\6"+
    "\1\13\1\12\1\14\1\10\1\15\1\16\1\17\1\5"+
    "\1\20\1\21\1\5\1\22\1\23\3\5\1\24\1\25"+
    "\1\26\7\5\1\27\23\5\1\12\3\7\1\10\1\11"+
    "\1\30\1\12\1\7\1\10\1\31\1\12\1\10\51\12"+
    "\1\0\1\32\1\33\1\7\1\33\1\34\1\11\2\32"+
    "\1\33\1\34\1\32\1\35\1\10\52\32\4\36\2\37"+
    "\3\36\1\37\2\36\1\37\52\36\2\5\5\0\3\5"+
    "\1\0\1\40\1\0\53\5\1\6\4\7\1\0\1\5"+
    "\2\6\1\0\1\40\1\7\52\5\1\0\5\7\2\0"+
    "\2\7\2\0\1\7\56\0\2\10\3\0\1\10\2\0"+
    "\1\10\53\0\3\7\2\11\2\0\1\7\1\11\2\0"+
    "\1\11\141\0\2\5\2\0\2\10\1\0\2\5\1\13"+
    "\1\0\1\40\1\10\52\5\14\0\1\5\52\0\2\15"+
    "\2\0\63\15\2\5\5\0\3\5\1\0\1\40\1\0"+
    "\1\5\1\41\52\5\5\0\3\5\1\0\1\40\1\0"+
    "\3\5\1\42\50\5\5\0\3\5\1\0\1\40\1\0"+
    "\3\5\1\43\50\5\5\0\3\5\1\0\1\40\1\0"+
    "\17\5\1\44\34\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\45\10\5\1\46\34\5\5\0\3\5\1\0"+
    "\1\40\1\0\16\5\1\47\13\5\1\50\21\5\5\0"+
    "\3\5\1\0\1\40\1\0\13\5\1\51\40\5\5\0"+
    "\3\5\1\0\1\40\1\0\6\5\1\52\1\5\1\53"+
    "\43\5\5\0\3\5\1\0\1\40\1\0\3\5\1\54"+
    "\50\5\5\0\3\5\1\0\1\40\1\0\10\5\1\55"+
    "\41\5\7\0\3\56\5\0\1\56\1\57\1\60\1\56"+
    "\1\61\1\62\3\56\1\63\3\56\1\64\12\56\1\65"+
    "\5\56\1\66\11\56\2\32\1\0\2\32\1\0\5\32"+
    "\1\67\54\32\1\33\1\7\2\33\1\7\2\32\2\33"+
    "\1\32\1\67\1\33\54\32\1\0\1\32\1\34\1\10"+
    "\3\32\1\34\1\32\1\67\1\34\55\32\1\70\63\32"+
    "\67\36\2\5\5\0\3\5\1\0\1\40\1\0\1\5"+
    "\1\71\52\5\5\0\3\5\1\0\1\40\1\0\4\5"+
    "\1\72\47\5\5\0\3\5\1\0\1\40\1\0\15\5"+
    "\1\73\36\5\5\0\3\5\1\0\1\40\1\0\2\5"+
    "\1\74\51\5\5\0\3\5\1\0\1\40\1\0\16\5"+
    "\1\75\1\5\1\76\33\5\5\0\3\5\1\0\1\40"+
    "\1\0\16\5\1\77\35\5\5\0\3\5\1\0\1\40"+
    "\1\0\13\5\1\100\40\5\5\0\3\5\1\0\1\40"+
    "\1\0\2\5\1\101\2\5\1\102\46\5\5\0\3\5"+
    "\1\0\1\40\1\0\11\5\1\103\5\5\1\104\34\5"+
    "\5\0\3\5\1\0\1\40\1\0\14\5\1\105\37\5"+
    "\5\0\3\5\1\0\1\40\1\0\5\5\1\106\46\5"+
    "\5\0\3\5\1\0\1\40\1\0\16\5\1\107\17\5"+
    "\1\110\15\5\5\0\3\5\1\0\1\40\1\0\17\5"+
    "\1\111\32\5\7\0\3\56\5\0\50\56\7\0\3\56"+
    "\5\0\12\56\1\112\35\56\7\0\3\56\5\0\4\56"+
    "\1\113\10\56\1\114\32\56\7\0\3\56\5\0\1\56"+
    "\1\115\46\56\7\0\3\56\5\0\4\56\1\116\43\56"+
    "\7\0\2\56\1\117\5\0\50\56\7\0\3\56\5\0"+
    "\7\56\1\120\4\56\1\121\33\56\7\0\3\56\5\0"+
    "\41\56\1\122\6\56\7\0\3\56\5\0\15\56\1\123"+
    "\32\56\5\32\1\0\5\32\1\67\53\32\1\5\1\124"+
    "\1\125\1\126\1\0\1\125\1\0\1\5\1\124\1\5"+
    "\1\0\1\40\1\0\54\5\5\0\3\5\1\0\1\40"+
    "\1\0\5\5\1\127\46\5\5\0\3\5\1\0\1\40"+
    "\1\0\33\5\1\130\20\5\5\0\3\5\1\0\1\40"+
    "\1\0\27\5\1\131\24\5\5\0\3\5\1\0\1\40"+
    "\1\0\27\5\1\132\24\5\5\0\3\5\1\0\1\40"+
    "\1\0\11\5\1\133\42\5\5\0\3\5\1\0\1\40"+
    "\1\0\22\5\1\134\31\5\5\0\3\5\1\0\1\40"+
    "\1\0\11\5\1\135\42\5\5\0\3\5\1\0\1\40"+
    "\1\0\7\5\1\136\44\5\5\0\3\5\1\0\1\40"+
    "\1\0\3\5\1\137\50\5\5\0\3\5\1\0\1\40"+
    "\1\0\6\5\1\140\45\5\5\0\3\5\1\0\1\40"+
    "\1\0\13\5\1\141\40\5\5\0\3\5\1\0\1\40"+
    "\1\0\17\5\1\142\34\5\5\0\3\5\1\0\1\40"+
    "\1\0\10\5\1\143\43\5\5\0\3\5\1\0\1\40"+
    "\1\0\36\5\1\144\15\5\5\0\3\5\1\0\1\40"+
    "\1\0\13\5\1\145\40\5\5\0\3\5\1\0\1\40"+
    "\1\0\15\5\1\146\34\5\7\0\3\56\5\0\30\56"+
    "\1\147\17\56\7\0\3\56\5\0\3\56\1\150\10\56"+
    "\1\151\33\56\7\0\3\56\5\0\1\152\47\56\7\0"+
    "\3\56\5\0\12\56\1\153\35\56\7\0\3\56\5\0"+
    "\14\56\1\154\33\56\7\0\3\56\5\0\1\56\1\155"+
    "\46\56\7\0\3\56\5\0\2\56\1\156\45\56\7\0"+
    "\3\56\5\0\13\56\1\157\34\56\7\0\3\56\5\0"+
    "\42\56\1\160\5\56\7\0\3\56\5\0\11\56\1\161"+
    "\1\162\35\56\2\0\1\125\64\0\2\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\163\45\5\5\0\3\5"+
    "\1\0\1\40\1\0\7\5\1\164\44\5\5\0\3\5"+
    "\1\0\1\40\1\0\17\5\1\165\34\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\166\43\5\5\0\3\5"+
    "\1\0\1\40\1\0\17\5\1\167\34\5\5\0\3\5"+
    "\1\0\1\40\1\0\33\5\1\170\20\5\5\0\3\5"+
    "\1\0\1\40\1\0\30\5\1\171\23\5\5\0\3\5"+
    "\1\0\1\40\1\0\33\5\1\172\20\5\5\0\3\5"+
    "\1\0\1\40\1\0\11\5\1\173\42\5\5\0\3\5"+
    "\1\0\1\40\1\0\2\5\1\174\51\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\175\45\5\5\0\3\5"+
    "\1\0\1\40\1\0\20\5\1\176\33\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\177\35\5\5\0\3\5"+
    "\1\0\1\40\1\0\13\5\1\200\40\5\5\0\3\5"+
    "\1\0\1\40\1\0\11\5\1\201\42\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\202\41\5\7\0\3\56"+
    "\5\0\12\56\1\203\35\56\7\0\3\56\5\0\20\56"+
    "\1\204\27\56\7\0\3\56\5\0\1\56\1\205\46\56"+
    "\7\0\3\56\5\0\40\56\1\206\7\56\7\0\3\56"+
    "\5\0\31\56\1\207\16\56\7\0\3\56\5\0\12\56"+
    "\1\210\35\56\7\0\3\56\5\0\41\56\1\211\2\56"+
    "\1\212\3\56\7\0\3\56\5\0\7\56\1\213\40\56"+
    "\7\0\3\56\5\0\1\214\47\56\7\0\3\56\5\0"+
    "\2\56\1\215\45\56\2\5\5\0\3\5\1\0\1\40"+
    "\1\0\7\5\1\216\44\5\5\0\3\5\1\0\1\40"+
    "\1\0\10\5\1\217\43\5\5\0\3\5\1\0\1\40"+
    "\1\0\22\5\1\220\31\5\5\0\3\5\1\0\1\40"+
    "\1\0\11\5\1\221\42\5\5\0\3\5\1\0\1\40"+
    "\1\0\11\5\1\222\42\5\5\0\3\5\1\0\1\40"+
    "\1\0\17\5\1\223\34\5\5\0\3\5\1\0\1\40"+
    "\1\0\31\5\1\224\22\5\5\0\3\5\1\0\1\40"+
    "\1\0\15\5\1\225\36\5\5\0\3\5\1\0\1\40"+
    "\1\0\13\5\1\226\40\5\5\0\3\5\1\0\1\40"+
    "\1\0\13\5\1\227\40\5\5\0\3\5\1\0\1\40"+
    "\1\0\2\5\1\230\51\5\5\0\3\5\1\0\1\40"+
    "\1\0\7\5\1\231\44\5\5\0\3\5\1\0\1\40"+
    "\1\0\15\5\1\232\36\5\5\0\3\5\1\0\1\40"+
    "\1\0\11\5\1\233\42\5\5\0\3\5\1\0\1\40"+
    "\1\0\6\5\1\234\45\5\5\0\3\5\1\0\1\40"+
    "\1\0\11\5\1\235\40\5\7\0\3\56\5\0\6\56"+
    "\1\236\35\56\1\237\3\56\7\0\3\56\5\0\36\56"+
    "\1\240\11\56\7\0\3\56\5\0\12\56\1\241\35\56"+
    "\7\0\3\56\5\0\15\56\1\242\12\56\1\243\17\56"+
    "\7\0\3\56\5\0\30\56\1\244\17\56\7\0\3\56"+
    "\5\0\40\56\1\245\7\56\7\0\3\56\5\0\42\56"+
    "\1\246\5\56\7\0\3\56\5\0\45\56\1\247\2\56"+
    "\7\0\3\56\5\0\1\56\1\250\46\56\7\0\3\56"+
    "\5\0\24\56\1\251\23\56\7\0\3\56\5\0\44\56"+
    "\1\252\3\56\2\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\253\43\5\5\0\3\5\1\0\1\40\1\0"+
    "\14\5\1\254\37\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\255\43\5\5\0\3\5\1\0\1\40\1\0"+
    "\12\5\1\256\41\5\5\0\3\5\1\0\1\40\1\0"+
    "\30\5\1\257\23\5\5\0\3\5\1\0\1\40\1\0"+
    "\22\5\1\260\31\5\5\0\3\5\1\0\1\40\1\0"+
    "\3\5\1\261\50\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\262\43\5\5\0\3\5\1\0\1\40\1\0"+
    "\35\5\1\263\16\5\5\0\3\5\1\0\1\40\1\0"+
    "\41\5\1\264\12\5\5\0\3\5\1\0\1\40\1\0"+
    "\37\5\1\265\14\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\266\43\5\5\0\3\5\1\0\1\40\1\0"+
    "\14\5\1\267\37\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\270\45\5\5\0\3\5\1\0\1\40\1\0"+
    "\16\5\1\271\35\5\5\0\3\5\1\0\1\40\1\0"+
    "\14\5\1\272\20\5\1\273\14\5\7\0\3\56\5\0"+
    "\5\56\1\274\42\56\7\0\3\56\5\0\45\56\1\275"+
    "\2\56\7\0\3\56\5\0\40\56\1\276\7\56\7\0"+
    "\3\56\5\0\40\56\1\277\7\56\7\0\3\56\5\0"+
    "\7\56\1\300\40\56\7\0\3\56\5\0\41\56\1\301"+
    "\6\56\7\0\3\56\5\0\40\56\1\302\7\56\7\0"+
    "\3\56\5\0\15\56\1\303\12\56\1\304\17\56\7\0"+
    "\3\56\5\0\4\56\1\305\43\56\7\0\3\56\5\0"+
    "\1\56\1\306\46\56\7\0\3\56\5\0\45\56\1\307"+
    "\2\56\2\5\5\0\3\5\1\0\1\40\1\0\11\5"+
    "\1\310\42\5\5\0\3\5\1\0\1\40\1\0\5\5"+
    "\1\311\46\5\5\0\3\5\1\0\1\40\1\0\31\5"+
    "\1\312\22\5\5\0\3\5\1\0\1\40\1\0\10\5"+
    "\1\313\43\5\5\0\3\5\1\0\1\40\1\0\6\5"+
    "\1\314\45\5\5\0\3\5\1\0\1\40\1\0\15\5"+
    "\1\315\3\5\1\316\14\5\1\317\15\5\5\0\3\5"+
    "\1\0\1\40\1\0\3\5\1\320\50\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\321\35\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\322\45\5\5\0\3\5"+
    "\1\0\1\40\1\0\21\5\1\323\32\5\5\0\3\5"+
    "\1\0\1\40\1\0\2\5\1\324\51\5\5\0\3\5"+
    "\1\0\1\40\1\0\22\5\1\325\31\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\326\43\5\7\0\3\56"+
    "\5\0\44\56\1\327\3\56\7\0\3\56\5\0\30\56"+
    "\1\330\17\56\7\0\3\56\5\0\30\56\1\331\17\56"+
    "\7\0\3\56\5\0\2\56\1\332\45\56\7\0\3\56"+
    "\5\0\42\56\1\333\5\56\7\0\3\56\5\0\2\56"+
    "\1\334\12\56\1\335\12\56\1\336\17\56\7\0\3\56"+
    "\5\0\7\56\1\337\40\56\7\0\3\56\5\0\41\56"+
    "\1\340\6\56\7\0\3\56\5\0\13\56\1\341\34\56"+
    "\7\0\3\56\5\0\12\56\1\342\35\56\2\5\5\0"+
    "\3\5\1\0\1\40\1\0\12\5\1\343\41\5\5\0"+
    "\3\5\1\0\1\40\1\0\13\5\1\344\40\5\5\0"+
    "\3\5\1\0\1\40\1\0\17\5\1\345\34\5\5\0"+
    "\3\5\1\0\1\40\1\0\16\5\1\346\35\5\5\0"+
    "\3\5\1\0\1\40\1\0\34\5\1\347\1\350\16\5"+
    "\5\0\3\5\1\0\1\40\1\0\10\5\1\351\43\5"+
    "\5\0\3\5\1\0\1\40\1\0\30\5\1\352\23\5"+
    "\5\0\3\5\1\0\1\40\1\0\11\5\1\353\42\5"+
    "\5\0\3\5\1\0\1\40\1\0\33\5\1\354\20\5"+
    "\5\0\3\5\1\0\1\40\1\0\20\5\1\355\33\5"+
    "\5\0\3\5\1\0\1\40\1\0\10\5\1\356\43\5"+
    "\5\0\3\5\1\0\1\40\1\0\13\5\1\357\40\5"+
    "\5\0\3\5\1\0\1\40\1\0\25\5\1\360\26\5"+
    "\5\0\3\5\1\0\1\40\1\0\7\5\1\361\42\5"+
    "\7\0\3\56\5\0\45\56\1\362\2\56\7\0\3\56"+
    "\5\0\41\56\1\363\6\56\7\0\3\56\5\0\41\56"+
    "\1\364\6\56\7\0\3\56\5\0\41\56\1\365\2\56"+
    "\1\366\3\56\7\0\3\56\5\0\4\56\1\367\43\56"+
    "\7\0\3\56\5\0\7\56\1\370\40\56\7\0\3\56"+
    "\5\0\41\56\1\371\6\56\7\0\3\56\5\0\2\56"+
    "\1\372\45\56\7\0\3\56\5\0\42\56\1\373\5\56"+
    "\7\0\3\56\5\0\40\56\1\374\7\56\7\0\3\56"+
    "\5\0\40\56\1\375\7\56\2\5\5\0\3\5\1\0"+
    "\1\40\1\0\5\5\1\376\46\5\5\0\3\5\1\0"+
    "\1\40\1\0\14\5\1\377\37\5\5\0\3\5\1\0"+
    "\1\40\1\0\13\5\1\u0100\40\5\5\0\3\5\1\0"+
    "\1\40\1\0\13\5\1\u0101\40\5\5\0\3\5\1\0"+
    "\1\40\1\0\17\5\1\u0102\34\5\5\0\3\5\1\0"+
    "\1\40\1\0\33\5\1\u0103\20\5\5\0\3\5\1\0"+
    "\1\40\1\0\5\5\1\u0104\46\5\5\0\3\5\1\0"+
    "\1\40\1\0\14\5\1\u0105\37\5\5\0\3\5\1\0"+
    "\1\40\1\0\40\5\1\u0106\13\5\5\0\3\5\1\0"+
    "\1\40\1\0\4\5\1\u0107\47\5\5\0\3\5\1\0"+
    "\1\40\1\0\11\5\1\u0108\42\5\5\0\3\5\1\0"+
    "\1\40\1\0\14\5\1\u0109\37\5\5\0\3\5\1\0"+
    "\1\40\1\0\41\5\1\u010a\12\5\5\0\3\5\1\0"+
    "\1\40\1\0\3\5\1\u010b\50\5\5\0\3\5\1\0"+
    "\1\40\1\0\13\5\1\u010c\36\5\7\0\3\56\5\0"+
    "\42\56\1\u010d\5\56\7\0\3\56\5\0\42\56\1\u010e"+
    "\5\56\7\0\3\56\5\0\42\56\1\u010f\5\56\7\0"+
    "\3\56\5\0\45\56\1\u0110\2\56\7\0\3\56\5\0"+
    "\3\56\1\u0111\44\56\7\0\3\56\5\0\2\56\1\u0112"+
    "\45\56\7\0\3\56\5\0\42\56\1\u0113\5\56\7\0"+
    "\3\56\5\0\41\56\1\u0114\6\56\7\0\3\56\5\0"+
    "\15\56\1\u0115\12\56\1\u0116\17\56\7\0\3\56\5\0"+
    "\15\56\1\u0117\12\56\1\u0118\17\56\2\5\5\0\3\5"+
    "\1\0\1\40\1\0\13\5\1\u0119\40\5\5\0\3\5"+
    "\1\0\1\40\1\0\26\5\1\u011a\25\5\5\0\3\5"+
    "\1\0\1\40\1\0\2\5\1\u011b\51\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\u011c\35\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\u011d\43\5\5\0\3\5"+
    "\1\0\1\40\1\0\13\5\1\u011e\40\5\5\0\3\5"+
    "\1\0\1\40\1\0\17\5\1\u011f\34\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\u0120\37\5\5\0\3\5"+
    "\1\0\1\40\1\0\17\5\1\u0121\34\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\u0122\45\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\u0123\35\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\u0124\35\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\u0125\41\5\7\0\3\56"+
    "\5\0\12\56\1\u0126\35\56\7\0\3\56\5\0\44\56"+
    "\1\u0127\3\56\7\0\3\56\5\0\42\56\1\u0128\5\56"+
    "\7\0\3\56\5\0\7\56\1\u0129\40\56\7\0\3\56"+
    "\5\0\41\56\1\u012a\1\56\1\u012b\4\56\7\0\3\56"+
    "\5\0\7\56\1\u012c\40\56\7\0\3\56\5\0\41\56"+
    "\1\u012d\1\56\1\u012e\4\56\2\5\5\0\3\5\1\0"+
    "\1\40\1\0\14\5\1\u012f\37\5\5\0\3\5\1\0"+
    "\1\40\1\0\14\5\1\u0130\37\5\5\0\3\5\1\0"+
    "\1\40\1\0\11\5\1\u0131\42\5\5\0\3\5\1\0"+
    "\1\40\1\0\2\5\1\u0132\51\5\5\0\3\5\1\0"+
    "\1\40\1\0\16\5\1\u0133\35\5\5\0\3\5\1\0"+
    "\1\40\1\0\10\5\1\u0134\43\5\5\0\3\5\1\0"+
    "\1\40\1\0\11\5\1\u0135\42\5\5\0\3\5\1\0"+
    "\1\40\1\0\11\5\1\u0136\42\5\5\0\3\5\1\0"+
    "\1\40\1\0\22\5\1\u0137\31\5\5\0\3\5\1\0"+
    "\1\40\1\0\33\5\1\u0138\20\5\5\0\2\5\1\u0139"+
    "\1\0\1\40\1\0\54\5\5\0\3\5\1\0\1\40"+
    "\1\0\11\5\1\u013a\40\5\7\0\3\56\5\0\6\56"+
    "\1\u013b\35\56\1\u013c\3\56\7\0\3\56\5\0\45\56"+
    "\1\u013d\2\56\7\0\3\56\5\0\2\56\1\u013e\45\56"+
    "\7\0\3\56\5\0\42\56\1\u013f\5\56\7\0\3\56"+
    "\5\0\41\56\1\u0140\6\56\7\0\3\56\5\0\2\56"+
    "\1\u0141\45\56\7\0\3\56\5\0\42\56\1\u0142\5\56"+
    "\7\0\3\56\5\0\41\56\1\u0143\6\56\2\5\5\0"+
    "\3\5\1\0\1\40\1\0\3\5\1\u0144\50\5\5\0"+
    "\3\5\1\0\1\40\1\0\13\5\1\u0145\40\5\5\0"+
    "\3\5\1\0\1\40\1\0\15\5\1\u0146\36\5\5\0"+
    "\3\5\1\0\1\40\1\0\4\5\1\u0147\47\5\5\0"+
    "\3\5\1\0\1\40\1\0\15\5\1\u0148\36\5\5\0"+
    "\3\5\1\0\1\40\1\0\6\5\1\u0149\45\5\5\0"+
    "\3\5\1\0\1\40\1\0\16\5\1\u014a\35\5\5\0"+
    "\3\5\1\0\1\40\1\0\4\5\1\u014b\47\5\5\0"+
    "\3\5\1\0\1\40\1\0\10\5\1\u014c\41\5\7\0"+
    "\3\56\5\0\5\56\1\u014d\42\56\7\0\3\56\5\0"+
    "\45\56\1\u014e\2\56\7\0\3\56\5\0\40\56\1\u014f"+
    "\7\56\7\0\3\56\5\0\41\56\1\u0150\2\56\1\u0151"+
    "\3\56\7\0\3\56\5\0\41\56\1\u0152\2\56\1\u0153"+
    "\3\56\2\5\5\0\3\5\1\0\1\40\1\0\14\5"+
    "\1\u0154\37\5\5\0\3\5\1\0\1\40\1\0\6\5"+
    "\1\u0155\45\5\5\0\3\5\1\0\1\40\1\0\10\5"+
    "\1\u0156\43\5\5\0\3\5\1\0\1\40\1\0\37\5"+
    "\1\u0157\14\5\5\0\3\5\1\0\1\40\1\0\21\5"+
    "\1\u0158\32\5\5\0\3\5\1\0\1\40\1\0\10\5"+
    "\1\u0159\43\5\5\0\3\5\1\0\1\40\1\0\17\5"+
    "\1\u015a\34\5\5\0\3\5\1\0\1\40\1\0\14\5"+
    "\1\u015b\37\5\5\0\3\5\1\0\1\40\1\0\11\5"+
    "\1\u015c\40\5\7\0\3\56\5\0\44\56\1\u015d\3\56"+
    "\7\0\3\56\5\0\24\56\1\u015e\23\56\7\0\3\56"+
    "\5\0\42\56\1\u015f\5\56\7\0\3\56\5\0\45\56"+
    "\1\u0160\2\56\7\0\3\56\5\0\42\56\1\u0161\5\56"+
    "\7\0\3\56\5\0\45\56\1\u0162\2\56\2\5\5\0"+
    "\3\5\1\0\1\40\1\0\3\5\1\u0163\50\5\5\0"+
    "\3\5\1\0\1\40\1\0\16\5\1\u0164\35\5\5\0"+
    "\3\5\1\0\1\40\1\0\6\5\1\u0165\45\5\5\0"+
    "\3\5\1\0\1\40\1\0\10\5\1\u0166\43\5\5\0"+
    "\3\5\1\0\1\40\1\0\14\5\1\u0167\37\5\5\0"+
    "\3\5\1\0\1\40\1\0\13\5\1\u0168\40\5\5\0"+
    "\3\5\1\0\1\40\1\0\14\5\1\u0169\35\5\7\0"+
    "\3\56\5\0\45\56\1\u016a\2\56\7\0\3\56\5\0"+
    "\46\56\1\u016b\1\56\2\5\5\0\3\5\1\0\1\40"+
    "\1\0\16\5\1\u016c\35\5\5\0\3\5\1\0\1\40"+
    "\1\0\13\5\1\u016d\40\5\5\0\3\5\1\0\1\40"+
    "\1\0\20\5\1\u016e\33\5\5\0\3\5\1\0\1\40"+
    "\1\0\2\5\1\u016f\51\5\5\0\3\5\1\0\1\40"+
    "\1\0\10\5\1\u0170\43\5\5\0\3\5\1\0\1\40"+
    "\1\0\6\5\1\u0171\43\5\7\0\3\56\5\0\3\56"+
    "\1\u0172\44\56\2\5\5\0\3\5\1\0\1\40\1\0"+
    "\14\5\1\u0173\37\5\5\0\3\5\1\0\1\40\1\0"+
    "\34\5\1\u0174\17\5\5\0\3\5\1\0\1\40\1\0"+
    "\14\5\1\u0175\37\5\5\0\3\5\1\0\1\40\1\0"+
    "\7\5\1\u0176\44\5\5\0\3\5\1\0\1\40\1\0"+
    "\15\5\1\u0177\36\5\5\0\3\5\1\0\1\40\1\0"+
    "\3\5\1\u0178\50\5\5\0\3\5\1\0\1\40\1\0"+
    "\3\5\1\u0179\50\5\5\0\3\5\1\0\1\40\1\0"+
    "\17\5\1\u017a\34\5\5\0\3\5\1\0\1\40\1\0"+
    "\23\5\1\u017b\30\5\5\0\3\5\1\0\1\40\1\0"+
    "\16\5\1\u017c\35\5\5\0\3\5\1\0\1\40\1\0"+
    "\15\5\1\u017d\36\5\5\0\3\5\1\0\1\40\1\0"+
    "\11\5\1\u017e\42\5\5\0\3\5\1\0\1\40\1\0"+
    "\16\5\1\u017f\35\5\5\0\3\5\1\0\1\40\1\0"+
    "\33\5\1\u0180\20\5\5\0\3\5\1\0\1\40\1\0"+
    "\17\5\1\u0181\34\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\u0182\45\5\5\0\3\5\1\0\1\40\1\0"+
    "\7\5\1\u0183\44\5\5\0\3\5\1\0\1\40\1\0"+
    "\13\5\1\u0184\40\5\5\0\3\5\1\0\1\40\1\0"+
    "\13\5\1\u0185\40\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\u0186\43\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\u0187\45\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\u0188\45\5\5\0\3\5\1\0\1\40\1\0"+
    "\14\5\1\u0189\37\5\5\0\3\5\1\0\1\40\1\0"+
    "\3\5\1\u018a\50\5\5\0\3\5\1\0\1\40\1\0"+
    "\17\5\1\u018b\34\5\5\0\3\5\1\0\1\40\1\0"+
    "\16\5\1\u018c\35\5\5\0\3\5\1\0\1\40\1\0"+
    "\7\5\1\u018d\44\5\5\0\3\5\1\0\1\40\1\0"+
    "\14\5\1\u018e\37\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\u018f\45\5\5\0\3\5\1\0\1\40\1\0"+
    "\24\5\1\u0190\27\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\u0191\43\5\5\0\3\5\1\0\1\40\1\0"+
    "\11\5\1\u0192\42\5\5\0\3\5\1\0\1\40\1\0"+
    "\25\5\1\u0193\26\5\5\0\3\5\1\0\1\40\1\0"+
    "\26\5\1\u0194\25\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\u0195\43\5\5\0\3\5\1\0\1\40\1\0"+
    "\2\5\1\u0196\51\5\5\0\3\5\1\0\1\40\1\0"+
    "\27\5\1\u0197\24\5\5\0\3\5\1\0\1\40\1\0"+
    "\14\5\1\u0198\35\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\6\1\1\11\15\1\1\11\7\1\1\0\26\1"+
    "\1\0\35\1\1\11\u0143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NativeDefinitionsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CODE_CHARS;
            } 
            // fall through
          case 65: break;
          case 2: 
            { yybegin(WAITING_PLATFORM); return UNKNOWN_KEY;
            } 
            // fall through
          case 66: break;
          case 3: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 5: 
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 69: break;
          case 6: 
            { return COMMENT;
            } 
            // fall through
          case 70: break;
          case 7: 
            { yybegin(WAITING_VALUE); return SEPARATOR;
            } 
            // fall through
          case 71: break;
          case 8: 
            { yybegin(YYINITIAL); return VALUE;
            } 
            // fall through
          case 72: break;
          case 9: 
            { return UNKNOWN_PLATFORM;
            } 
            // fall through
          case 73: break;
          case 10: 
            { yybegin(CODE_END); return DELIM;
            } 
            // fall through
          case 74: break;
          case 11: 
            { return OSX;
            } 
            // fall through
          case 75: break;
          case 12: 
            { return IOS;
            } 
            // fall through
          case 76: break;
          case 13: 
            { return X64;
            } 
            // fall through
          case 77: break;
          case 14: 
            { return TVOS;
            } 
            // fall through
          case 78: break;
          case 15: 
            { return WASM;
            } 
            // fall through
          case 79: break;
          case 16: 
            { yybegin(WAITING_PLATFORM); return LINKER;
            } 
            // fall through
          case 80: break;
          case 17: 
            { return MINGW;
            } 
            // fall through
          case 81: break;
          case 18: 
            { return LINUX;
            } 
            // fall through
          case 82: break;
          case 19: 
            { return ARM64;
            } 
            // fall through
          case 83: break;
          case 20: 
            { return ARM32;
            } 
            // fall through
          case 84: break;
          case 21: 
            { yybegin(WAITING_PLATFORM); return MODULES;
            } 
            // fall through
          case 85: break;
          case 22: 
            { yybegin(WAITING_PLATFORM); return PACKAGE;
            } 
            // fall through
          case 86: break;
          case 23: 
            { yybegin(WAITING_PLATFORM); return DEPENDS;
            } 
            // fall through
          case 87: break;
          case 24: 
            { yybegin(WAITING_PLATFORM); return HEADERS;
            } 
            // fall through
          case 88: break;
          case 25: 
            { return MIPS32;
            } 
            // fall through
          case 89: break;
          case 26: 
            { return WASM32;
            } 
            // fall through
          case 90: break;
          case 27: 
            { yybegin(WAITING_PLATFORM); return LANGUAGE;
            } 
            // fall through
          case 91: break;
          case 28: 
            { return IOS_X64;
            } 
            // fall through
          case 92: break;
          case 29: 
            { return ANDROID;
            } 
            // fall through
          case 93: break;
          case 30: 
            { return WATCHOS;
            } 
            // fall through
          case 94: break;
          case 31: 
            { return MIPSEL32;
            } 
            // fall through
          case 95: break;
          case 32: 
            { return TVOS_X64;
            } 
            // fall through
          case 96: break;
          case 33: 
            { yybegin(WAITING_PLATFORM); return LINKER_OPTS;
            } 
            // fall through
          case 97: break;
          case 34: 
            { yybegin(WAITING_PLATFORM); return ENTRY_POINT;
            } 
            // fall through
          case 98: break;
          case 35: 
            { return MINGW_X64;
            } 
            // fall through
          case 99: break;
          case 36: 
            { return MACOS_X64;
            } 
            // fall through
          case 100: break;
          case 37: 
            { return IOS_ARM64;
            } 
            // fall through
          case 101: break;
          case 38: 
            { return IOS_ARM32;
            } 
            // fall through
          case 102: break;
          case 39: 
            { return LINUX_X64;
            } 
            // fall through
          case 103: break;
          case 40: 
            { yybegin(WAITING_PLATFORM); return STRICT_ENUMS;
            } 
            // fall through
          case 104: break;
          case 41: 
            { return TVOS_ARM64;
            } 
            // fall through
          case 105: break;
          case 42: 
            { yybegin(WAITING_PLATFORM); return COMPILER_OPTS;
            } 
            // fall through
          case 106: break;
          case 43: 
            { yybegin(WAITING_PLATFORM); return LIBRARY_PATHS;
            } 
            // fall through
          case 107: break;
          case 44: 
            { yybegin(WAITING_PLATFORM); return HEADER_FILTER;
            } 
            // fall through
          case 108: break;
          case 45: 
            { return ANDROID_X64;
            } 
            // fall through
          case 109: break;
          case 46: 
            { return ANDROID_X86;
            } 
            // fall through
          case 110: break;
          case 47: 
            { return WATCHOS_X64;
            } 
            // fall through
          case 111: break;
          case 48: 
            { return WATCHOS_X86;
            } 
            // fall through
          case 112: break;
          case 49: 
            { return LINUX_MIPS32;
            } 
            // fall through
          case 113: break;
          case 50: 
            { yybegin(WAITING_PLATFORM); return EXCLUDED_MACROS;
            } 
            // fall through
          case 114: break;
          case 51: 
            { yybegin(WAITING_PLATFORM); return NON_STRICT_ENUMS;
            } 
            // fall through
          case 115: break;
          case 52: 
            { return ANDROID_ARM64;
            } 
            // fall through
          case 116: break;
          case 53: 
            { return ANDROID_ARM32;
            } 
            // fall through
          case 117: break;
          case 54: 
            { return WATCHOS_ARM64;
            } 
            // fall through
          case 118: break;
          case 55: 
            { return WATCHOS_ARM32;
            } 
            // fall through
          case 119: break;
          case 56: 
            { yybegin(WAITING_PLATFORM); return STATIC_LIBRARIES;
            } 
            // fall through
          case 120: break;
          case 57: 
            { return LINUX_MIPSEL32;
            } 
            // fall through
          case 121: break;
          case 58: 
            { return LINUX_ARM32_HFP;
            } 
            // fall through
          case 122: break;
          case 59: 
            { yybegin(WAITING_PLATFORM); return EXCLUDED_FUNCTIONS;
            } 
            // fall through
          case 123: break;
          case 60: 
            { yybegin(WAITING_PLATFORM); return EXCLUDE_SYSTEM_LIBS;
            } 
            // fall through
          case 124: break;
          case 61: 
            { yybegin(WAITING_PLATFORM); return NO_STRING_CONVERSION;
            } 
            // fall through
          case 125: break;
          case 62: 
            { yybegin(WAITING_PLATFORM); return EXCLUDE_DEPENDENT_MODULES;
            } 
            // fall through
          case 126: break;
          case 63: 
            { yybegin(WAITING_PLATFORM); return EXPORT_FORWARD_DECLARATIONS;
            } 
            // fall through
          case 127: break;
          case 64: 
            { yybegin(WAITING_PLATFORM); return DISABLE_DESIGNATED_INITIALIZER_CHECKS;
            } 
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
