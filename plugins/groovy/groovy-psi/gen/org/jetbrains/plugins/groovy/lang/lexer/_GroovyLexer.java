// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: groovy.flex

package org.jetbrains.plugins.groovy.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;
import static org.jetbrains.plugins.groovy.lang.groovydoc.parser.GroovyDocElementTypes.*;
import static org.jetbrains.plugins.groovy.lang.psi.GroovyElementTypes.*;


public class _GroovyLexer extends GroovyLexerBase implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_INJECTION = 2;
  public static final int IN_INJECTION_BRACES = 4;
  public static final int DIVISION_EXPECTED = 6;
  public static final int IN_TRIPLE_STRING = 8;
  public static final int IN_SINGLE_GSTRING = 10;
  public static final int IN_TRIPLE_GSTRING = 12;
  public static final int IN_SLASHY_STRING = 14;
  public static final int IN_DOLLAR_SLASH_STRING = 16;
  public static final int IN_GSTRING_DOLLAR = 18;
  public static final int IN_GSTRING_DOT = 20;
  public static final int IN_GSTRING_DOT_IDENT = 22;
  public static final int NLS_AFTER_LBRACE = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\10\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\37\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\45\1\47\13\45\1\50\2\45\1\51"+
    "\1\52\1\53\1\54\1\55\1\0\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\45\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\45\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\6\0\1\3\44\0\1\45\12\0"+
    "\1\45\4\0\1\45\5\0\27\45\1\0\37\45\1\0"+
    "\u01ca\45\4\0\14\45\16\0\5\45\7\0\1\45\1\0"+
    "\1\45\201\0\5\45\1\0\2\45\2\0\4\45\1\0"+
    "\1\45\6\0\1\45\1\0\3\45\1\0\1\45\1\0"+
    "\24\45\1\0\123\45\1\0\213\45\10\0\246\45\1\0"+
    "\46\45\2\0\1\45\6\0\51\45\107\0\33\45\4\0"+
    "\4\45\55\0\53\45\43\0\2\45\1\0\143\45\1\0"+
    "\1\45\17\0\2\45\7\0\2\45\12\0\3\45\2\0"+
    "\1\45\20\0\1\45\1\0\36\45\35\0\131\45\13\0"+
    "\1\45\30\0\41\45\11\0\2\45\4\0\1\45\5\0"+
    "\26\45\4\0\1\45\11\0\1\45\3\0\1\45\27\0"+
    "\31\45\7\0\13\45\65\0\25\45\1\0\10\45\106\0"+
    "\66\45\3\0\1\45\22\0\1\45\7\0\12\45\17\0"+
    "\20\45\4\0\10\45\2\0\2\45\2\0\26\45\1\0"+
    "\7\45\1\0\1\45\3\0\4\45\3\0\1\45\20\0"+
    "\1\45\15\0\2\45\1\0\3\45\16\0\2\45\12\0"+
    "\1\45\10\0\6\45\4\0\2\45\2\0\26\45\1\0"+
    "\7\45\1\0\2\45\1\0\2\45\1\0\2\45\37\0"+
    "\4\45\1\0\1\45\23\0\3\45\20\0\11\45\1\0"+
    "\3\45\1\0\26\45\1\0\7\45\1\0\2\45\1\0"+
    "\5\45\3\0\1\45\22\0\1\45\17\0\2\45\27\0"+
    "\1\45\13\0\10\45\2\0\2\45\2\0\26\45\1\0"+
    "\7\45\1\0\2\45\1\0\5\45\3\0\1\45\36\0"+
    "\2\45\1\0\3\45\17\0\1\45\21\0\1\45\1\0"+
    "\6\45\3\0\3\45\1\0\4\45\3\0\2\45\1\0"+
    "\1\45\1\0\2\45\3\0\2\45\3\0\3\45\3\0"+
    "\14\45\26\0\1\45\64\0\10\45\1\0\3\45\1\0"+
    "\27\45\1\0\20\45\3\0\1\45\32\0\3\45\5\0"+
    "\2\45\36\0\1\45\4\0\10\45\1\0\3\45\1\0"+
    "\27\45\1\0\12\45\1\0\5\45\3\0\1\45\40\0"+
    "\1\45\1\0\2\45\17\0\2\45\22\0\10\45\1\0"+
    "\3\45\1\0\51\45\2\0\1\45\20\0\1\45\5\0"+
    "\3\45\10\0\3\45\30\0\6\45\5\0\22\45\3\0"+
    "\30\45\1\0\11\45\1\0\1\45\2\0\7\45\72\0"+
    "\60\45\1\0\2\45\14\0\7\45\72\0\2\45\1\0"+
    "\1\45\1\0\5\45\1\0\30\45\1\0\1\45\1\0"+
    "\12\45\1\0\2\45\11\0\1\45\2\0\5\45\1\0"+
    "\1\45\25\0\4\45\40\0\1\45\77\0\10\45\1\0"+
    "\44\45\33\0\5\45\163\0\53\45\24\0\1\45\20\0"+
    "\6\45\4\0\4\45\3\0\1\45\3\0\2\45\7\0"+
    "\3\45\4\0\15\45\14\0\1\45\21\0\46\45\1\0"+
    "\1\45\5\0\1\45\2\0\53\45\1\0\115\45\1\0"+
    "\4\45\2\0\7\45\1\0\1\45\1\0\4\45\2\0"+
    "\51\45\1\0\4\45\2\0\41\45\1\0\4\45\2\0"+
    "\7\45\1\0\1\45\1\0\4\45\2\0\17\45\1\0"+
    "\71\45\1\0\4\45\2\0\103\45\45\0\20\45\20\0"+
    "\126\45\2\0\6\45\3\0\u016c\45\2\0\21\45\1\0"+
    "\32\45\5\0\113\45\6\0\10\45\7\0\15\45\1\0"+
    "\4\45\16\0\22\45\16\0\22\45\16\0\15\45\1\0"+
    "\3\45\17\0\64\45\43\0\1\45\4\0\1\45\103\0"+
    "\131\45\7\0\5\45\2\0\42\45\1\0\1\45\5\0"+
    "\106\45\12\0\37\45\61\0\36\45\2\0\5\45\13\0"+
    "\54\45\4\0\32\45\66\0\27\45\11\0\65\45\122\0"+
    "\1\45\135\0\57\45\21\0\7\45\67\0\36\45\15\0"+
    "\2\45\12\0\54\45\32\0\44\45\51\0\3\45\12\0"+
    "\44\45\2\0\11\45\7\0\53\45\2\0\3\45\51\0"+
    "\4\45\1\0\6\45\1\0\2\45\3\0\1\45\5\0"+
    "\300\45\100\0\26\45\2\0\6\45\2\0\46\45\2\0"+
    "\6\45\2\0\10\45\1\0\1\45\1\0\1\45\1\0"+
    "\1\45\1\0\37\45\2\0\65\45\1\0\7\45\1\0"+
    "\1\45\3\0\3\45\1\0\7\45\3\0\4\45\2\0"+
    "\6\45\4\0\15\45\5\0\3\45\1\0\7\45\53\0"+
    "\2\3\107\0\1\45\15\0\1\45\20\0\15\45\145\0"+
    "\1\45\4\0\1\45\2\0\12\45\1\0\1\45\3\0"+
    "\5\45\6\0\1\45\1\0\1\45\1\0\1\45\1\0"+
    "\4\45\1\0\13\45\2\0\4\45\5\0\5\45\4\0"+
    "\1\45\64\0\2\45\u017b\0\57\45\1\0\57\45\1\0"+
    "\205\45\6\0\4\45\3\0\2\45\14\0\46\45\1\0"+
    "\1\45\5\0\1\45\2\0\70\45\7\0\1\45\20\0"+
    "\27\45\11\0\7\45\1\0\7\45\1\0\7\45\1\0"+
    "\7\45\1\0\7\45\1\0\7\45\1\0\7\45\1\0"+
    "\7\45\120\0\1\45\325\0\2\45\52\0\5\45\5\0"+
    "\2\45\4\0\126\45\6\0\3\45\1\0\132\45\1\0"+
    "\4\45\5\0\53\45\1\0\136\45\21\0\33\45\65\0"+
    "\306\45\112\0\360\45\20\0\215\45\103\0\56\45\2\0"+
    "\15\45\3\0\20\45\12\0\2\45\24\0\57\45\20\0"+
    "\37\45\2\0\106\45\61\0\11\45\2\0\147\45\2\0"+
    "\65\45\2\0\5\45\60\0\13\45\1\0\3\45\1\0"+
    "\4\45\1\0\27\45\35\0\64\45\16\0\62\45\76\0"+
    "\6\45\3\0\1\45\1\0\2\45\13\0\34\45\12\0"+
    "\27\45\31\0\35\45\7\0\57\45\34\0\1\45\20\0"+
    "\5\45\1\0\12\45\12\0\5\45\1\0\51\45\27\0"+
    "\3\45\1\0\10\45\24\0\27\45\3\0\1\45\3\0"+
    "\62\45\1\0\1\45\3\0\2\45\2\0\5\45\2\0"+
    "\1\45\1\0\1\45\30\0\3\45\2\0\13\45\7\0"+
    "\3\45\14\0\6\45\2\0\6\45\2\0\6\45\11\0"+
    "\7\45\1\0\7\45\1\0\53\45\1\0\14\45\10\0"+
    "\163\45\35\0\244\45\14\0\27\45\4\0\61\45\4\0"+
    "\u0100\112\156\45\2\0\152\45\46\0\7\45\14\0\5\45"+
    "\5\0\1\45\1\0\12\45\1\0\15\45\1\0\5\45"+
    "\1\0\1\45\1\0\2\45\1\0\2\45\1\0\154\45"+
    "\41\0\153\45\22\0\100\45\2\0\66\45\50\0\14\45"+
    "\164\0\5\45\1\0\207\45\44\0\32\45\6\0\32\45"+
    "\13\0\131\45\3\0\6\45\2\0\6\45\2\0\6\45"+
    "\2\0\3\45\43\0\14\45\1\0\32\45\1\0\23\45"+
    "\1\0\2\45\1\0\17\45\2\0\16\45\42\0\173\45"+
    "\205\0\35\45\3\0\61\45\57\0\40\45\15\0\24\45"+
    "\1\0\10\45\6\0\46\45\12\0\36\45\2\0\44\45"+
    "\4\0\10\45\60\0\236\45\22\0\44\45\4\0\44\45"+
    "\4\0\50\45\10\0\64\45\234\0\67\45\11\0\26\45"+
    "\12\0\10\45\230\0\6\45\2\0\1\45\1\0\54\45"+
    "\1\0\2\45\3\0\1\45\2\0\27\45\12\0\27\45"+
    "\11\0\37\45\101\0\23\45\1\0\2\45\12\0\26\45"+
    "\12\0\32\45\106\0\70\45\6\0\2\45\100\0\1\45"+
    "\17\0\4\45\1\0\3\45\1\0\35\45\52\0\35\45"+
    "\3\0\35\45\43\0\10\45\1\0\34\45\33\0\66\45"+
    "\12\0\26\45\12\0\23\45\15\0\22\45\156\0\111\45"+
    "\67\0\63\45\15\0\63\45\15\0\44\45\334\0\35\45"+
    "\12\0\1\45\10\0\26\45\232\0\27\45\14\0\65\45"+
    "\113\0\55\45\40\0\31\45\32\0\44\45\35\0\1\45"+
    "\13\0\43\45\3\0\1\45\14\0\60\45\16\0\4\45"+
    "\25\0\1\45\1\0\1\45\43\0\22\45\1\0\31\45"+
    "\124\0\7\45\1\0\1\45\1\0\4\45\1\0\17\45"+
    "\1\0\12\45\7\0\57\45\46\0\10\45\2\0\2\45"+
    "\2\0\26\45\1\0\7\45\1\0\2\45\1\0\5\45"+
    "\3\0\1\45\22\0\1\45\14\0\5\45\236\0\65\45"+
    "\22\0\4\45\24\0\1\45\40\0\60\45\24\0\2\45"+
    "\1\0\1\45\270\0\57\45\51\0\4\45\44\0\60\45"+
    "\24\0\1\45\73\0\53\45\15\0\1\45\107\0\33\45"+
    "\345\0\54\45\164\0\100\45\37\0\1\45\240\0\10\45"+
    "\2\0\47\45\20\0\1\45\1\0\1\45\34\0\1\45"+
    "\12\0\50\45\7\0\1\45\25\0\1\45\13\0\56\45"+
    "\23\0\1\45\42\0\71\45\7\0\11\45\1\0\45\45"+
    "\21\0\1\45\61\0\36\45\160\0\7\45\1\0\2\45"+
    "\1\0\46\45\25\0\1\45\31\0\6\45\1\0\2\45"+
    "\1\0\40\45\16\0\1\45\u0147\0\23\45\15\0\232\45"+
    "\346\0\304\45\274\0\57\45\321\0\107\45\271\0\71\45"+
    "\7\0\37\45\161\0\36\45\22\0\60\45\20\0\4\45"+
    "\37\0\25\45\5\0\23\45\260\0\100\45\200\0\113\45"+
    "\5\0\1\45\102\0\15\45\100\0\2\45\1\0\1\45"+
    "\34\0\370\45\10\0\363\45\15\0\37\45\61\0\3\45"+
    "\21\0\4\45\10\0\u018c\45\4\0\153\45\5\0\15\45"+
    "\3\0\11\45\7\0\12\45\146\0\125\45\1\0\107\45"+
    "\1\0\2\45\2\0\1\45\2\0\2\45\2\0\4\45"+
    "\1\0\14\45\1\0\1\45\1\0\7\45\1\0\101\45"+
    "\1\0\4\45\2\0\10\45\1\0\7\45\1\0\34\45"+
    "\1\0\4\45\1\0\5\45\1\0\1\45\3\0\7\45"+
    "\1\0\u0154\45\2\0\31\45\1\0\31\45\1\0\37\45"+
    "\1\0\31\45\1\0\37\45\1\0\31\45\1\0\37\45"+
    "\1\0\31\45\1\0\37\45\1\0\31\45\1\0\10\45"+
    "\64\0\55\45\12\0\7\45\20\0\1\45\u0171\0\54\45"+
    "\24\0\305\45\73\0\104\45\7\0\1\45\264\0\4\45"+
    "\1\0\33\45\1\0\2\45\1\0\1\45\2\0\1\45"+
    "\1\0\12\45\1\0\4\45\1\0\1\45\1\0\1\45"+
    "\6\0\1\45\4\0\1\45\1\0\1\45\1\0\1\45"+
    "\1\0\3\45\1\0\2\45\1\0\1\45\2\0\1\45"+
    "\1\0\1\45\1\0\1\45\1\0\1\45\1\0\1\45"+
    "\1\0\2\45\1\0\1\45\2\0\4\45\1\0\7\45"+
    "\1\0\4\45\1\0\4\45\1\0\1\45\1\0\12\45"+
    "\1\0\21\45\5\0\3\45\1\0\5\45\1\0\21\45"+
    "\104\0\327\45\51\0\65\45\13\0\336\45\2\0\u0182\45"+
    "\16\0\u0131\45\37\0\36\45\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\1\2\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\6\1\32\1\1\1\33"+
    "\1\34\20\6\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\2\44\1\45\1\44\3\46\1\47\1\50\1\51"+
    "\1\52\4\47\1\53\1\52\1\54\1\53\1\55\1\52"+
    "\1\55\1\56\21\57\1\60\2\61\1\62\1\63\1\2"+
    "\1\63\1\0\1\64\2\0\1\65\1\0\1\66\1\67"+
    "\1\70\1\71\1\72\2\11\1\0\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\2\0\1\110\1\0\1\111\1\112\1\22"+
    "\1\113\2\0\1\114\2\0\1\115\1\116\1\117\1\120"+
    "\1\0\1\121\1\122\1\123\1\0\1\2\1\124\1\6"+
    "\1\125\10\6\1\126\7\6\1\127\1\6\1\130\26\6"+
    "\1\131\1\132\1\133\1\134\1\135\1\0\4\47\1\136"+
    "\1\53\1\137\1\55\1\140\1\57\1\125\10\57\1\126"+
    "\7\57\1\127\1\57\1\130\26\57\1\141\1\0\1\142"+
    "\1\0\1\65\1\143\2\0\1\11\1\144\2\11\1\145"+
    "\1\146\1\147\1\105\1\0\1\106\1\150\1\22\1\0"+
    "\1\105\1\22\1\151\1\152\1\153\1\154\1\155\1\156"+
    "\1\0\1\157\12\6\1\160\7\6\1\161\2\6\1\162"+
    "\2\6\1\163\24\6\1\164\1\165\4\6\1\166\3\0"+
    "\1\167\12\57\1\160\7\57\1\161\2\57\1\162\2\57"+
    "\1\163\24\57\1\164\1\165\4\57\1\170\12\0\1\106"+
    "\2\150\2\0\1\171\1\172\4\6\1\173\1\174\1\6"+
    "\1\175\4\6\1\176\1\177\10\6\1\200\1\6\1\0"+
    "\1\201\16\6\1\202\3\6\1\203\1\204\3\6\4\57"+
    "\1\173\1\174\1\57\1\175\4\57\1\176\1\177\10\57"+
    "\1\200\1\57\1\201\16\57\1\202\3\57\1\203\1\204"+
    "\3\57\4\0\1\11\2\0\1\106\1\150\3\6\1\205"+
    "\1\206\1\207\4\6\1\210\1\211\1\212\5\6\1\0"+
    "\10\6\1\213\2\6\1\214\2\6\1\215\1\216\2\6"+
    "\1\217\1\220\3\57\1\205\1\206\1\207\4\57\1\210"+
    "\1\211\1\212\15\57\1\213\2\57\1\214\2\57\1\215"+
    "\1\216\2\57\1\217\1\220\1\0\1\221\1\0\1\6"+
    "\1\222\3\6\1\223\3\6\1\224\2\6\1\225\1\0"+
    "\4\6\1\226\1\227\1\230\1\231\1\232\1\6\1\233"+
    "\1\6\1\234\2\6\1\57\1\222\3\57\1\223\3\57"+
    "\1\224\2\57\1\225\4\57\1\226\1\227\1\230\1\231"+
    "\1\232\1\57\1\233\1\57\1\234\2\57\1\0\1\6"+
    "\1\235\1\6\1\236\1\237\1\240\3\6\1\0\1\241"+
    "\1\242\1\243\5\6\1\57\1\235\1\57\1\236\1\237"+
    "\1\240\3\57\1\241\1\242\1\243\5\57\1\0\1\244"+
    "\1\245\3\6\1\0\1\6\1\246\2\6\1\247\1\244"+
    "\1\245\4\57\1\246\2\57\1\247\1\0\2\6\1\250"+
    "\1\0\1\251\1\6\1\252\2\57\1\250\1\251\1\57"+
    "\1\252\1\0\1\253\1\254\1\255\1\6\1\253\1\254"+
    "\1\57\1\0\1\6\1\57\1\256\2\257";

  private static int [] zzUnpackAction() {
    int [] result = new int[753];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u03cf\0\u041a"+
    "\0\u041a\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627"+
    "\0\u03cf\0\u03cf\0\u0672\0\u06bd\0\u03cf\0\u0708\0\u0753\0\u079e"+
    "\0\u07e9\0\u0834\0\u087f\0\u03cf\0\u08ca\0\u0915\0\u0960\0\u09ab"+
    "\0\u03cf\0\u09f6\0\u03cf\0\u0a41\0\u03cf\0\u0a8c\0\u0ad7\0\u0b22"+
    "\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a"+
    "\0\u0dc5\0\u0e10\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u03cf\0\u0f87"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u0fd2\0\u101d"+
    "\0\u0a41\0\u03cf\0\u1068\0\u10b3\0\u10fe\0\u03cf\0\u03cf\0\u03cf"+
    "\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\u03cf\0\u130b"+
    "\0\u1356\0\u13a1\0\u13ec\0\u03cf\0\u1437\0\u1482\0\u14cd\0\u1518"+
    "\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725\0\u1770"+
    "\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u03cf\0\u03cf\0\u1932"+
    "\0\u03cf\0\u03cf\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4"+
    "\0\u1b3f\0\u1b8a\0\u1bd5\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u1c20"+
    "\0\u1c6b\0\u1cb6\0\u1d01\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u1e78"+
    "\0\u1ec3\0\u03cf\0\u1f0e\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u1f59"+
    "\0\u1fa4\0\u03cf\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u03cf\0\u03cf"+
    "\0\u211b\0\u03cf\0\u03cf\0\u03cf\0\u2166\0\u21b1\0\u03cf\0\u21fc"+
    "\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454"+
    "\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac"+
    "\0\u26f7\0\u09f6\0\u2742\0\u278d\0\u27d8\0\u2823\0\u286e\0\u28b9"+
    "\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11"+
    "\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69"+
    "\0\u2db4\0\u2dff\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u2e4a"+
    "\0\u03cf\0\u2e95\0\u2ee0\0\u2f2b\0\u03cf\0\u03cf\0\u03cf\0\u03cf"+
    "\0\u03cf\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138"+
    "\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390"+
    "\0\u33db\0\u3426\0\u3471\0\u1437\0\u34bc\0\u3507\0\u3552\0\u359d"+
    "\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u37f5"+
    "\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d"+
    "\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u19c8\0\u03cf\0\u3c0f"+
    "\0\u03cf\0\u3c5a\0\u3ca5\0\u3cf0\0\u03cf\0\u03cf\0\u3d3b\0\u3d86"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2"+
    "\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u03cf\0\u03cf\0\u03cf\0\u03cf"+
    "\0\u03cf\0\u4029\0\u03cf\0\u4074\0\u40bf\0\u410a\0\u4155\0\u41a0"+
    "\0\u41eb\0\u4236\0\u4281\0\u42cc\0\u4317\0\u4362\0\u43ad\0\u43f8"+
    "\0\u4443\0\u448e\0\u44d9\0\u4524\0\u456f\0\u09f6\0\u45ba\0\u4605"+
    "\0\u4650\0\u469b\0\u46e6\0\u09f6\0\u4731\0\u477c\0\u47c7\0\u4812"+
    "\0\u485d\0\u48a8\0\u48f3\0\u493e\0\u4989\0\u49d4\0\u4a1f\0\u4a6a"+
    "\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u4c77\0\u4cc2"+
    "\0\u09f6\0\u09f6\0\u4d0d\0\u4d58\0\u4da3\0\u4dee\0\u03cf\0\u2e95"+
    "\0\u2ee0\0\u4e39\0\u03cf\0\u4e84\0\u4ecf\0\u4f1a\0\u4f65\0\u4fb0"+
    "\0\u4ffb\0\u5046\0\u5091\0\u50dc\0\u5127\0\u5172\0\u51bd\0\u5208"+
    "\0\u5253\0\u529e\0\u52e9\0\u5334\0\u537f\0\u1437\0\u53ca\0\u5415"+
    "\0\u5460\0\u54ab\0\u54f6\0\u1437\0\u5541\0\u558c\0\u55d7\0\u5622"+
    "\0\u566d\0\u56b8\0\u5703\0\u574e\0\u5799\0\u57e4\0\u582f\0\u587a"+
    "\0\u58c5\0\u5910\0\u595b\0\u59a6\0\u59f1\0\u5a3c\0\u5a87\0\u5ad2"+
    "\0\u1437\0\u1437\0\u5b1d\0\u5b68\0\u5bb3\0\u5bfe\0\u03cf\0\u5c49"+
    "\0\u3c5a\0\u5c94\0\u5cdf\0\u5d2a\0\u5d75\0\u5dc0\0\u5e0b\0\u5e56"+
    "\0\u5ea1\0\u5eec\0\u5f37\0\u03cf\0\u5f82\0\u5fcd\0\u03cf\0\u03cf"+
    "\0\u6018\0\u6063\0\u60ae\0\u60f9\0\u09f6\0\u09f6\0\u6144\0\u09f6"+
    "\0\u618f\0\u61da\0\u6225\0\u6270\0\u09f6\0\u09f6\0\u62bb\0\u6306"+
    "\0\u6351\0\u639c\0\u63e7\0\u6432\0\u647d\0\u64c8\0\u09f6\0\u6513"+
    "\0\u655e\0\u09f6\0\u65a9\0\u65f4\0\u663f\0\u668a\0\u66d5\0\u6720"+
    "\0\u676b\0\u67b6\0\u6801\0\u684c\0\u6897\0\u68e2\0\u692d\0\u6978"+
    "\0\u09f6\0\u69c3\0\u6a0e\0\u6a59\0\u09f6\0\u09f6\0\u6aa4\0\u6aef"+
    "\0\u6b3a\0\u6b85\0\u6bd0\0\u6c1b\0\u6c66\0\u1437\0\u1437\0\u6cb1"+
    "\0\u1437\0\u6cfc\0\u6d47\0\u6d92\0\u6ddd\0\u1437\0\u1437\0\u6e28"+
    "\0\u6e73\0\u6ebe\0\u6f09\0\u6f54\0\u6f9f\0\u6fea\0\u7035\0\u1437"+
    "\0\u7080\0\u1437\0\u70cb\0\u7116\0\u7161\0\u71ac\0\u71f7\0\u7242"+
    "\0\u728d\0\u72d8\0\u7323\0\u736e\0\u73b9\0\u7404\0\u744f\0\u749a"+
    "\0\u1437\0\u74e5\0\u7530\0\u757b\0\u1437\0\u1437\0\u75c6\0\u7611"+
    "\0\u765c\0\u76a7\0\u76f2\0\u773d\0\u7788\0\u77d3\0\u781e\0\u5eec"+
    "\0\u03cf\0\u7869\0\u78b4\0\u78ff\0\u794a\0\u09f6\0\u09f6\0\u09f6"+
    "\0\u7995\0\u79e0\0\u7a2b\0\u7a76\0\u09f6\0\u7ac1\0\u09f6\0\u7b0c"+
    "\0\u7b57\0\u7ba2\0\u7bed\0\u7c38\0\u7c83\0\u7cce\0\u7d19\0\u7d64"+
    "\0\u7daf\0\u7dfa\0\u7e45\0\u7e90\0\u7edb\0\u09f6\0\u7f26\0\u7f71"+
    "\0\u09f6\0\u7fbc\0\u8007\0\u8052\0\u09f6\0\u809d\0\u80e8\0\u09f6"+
    "\0\u09f6\0\u8133\0\u817e\0\u81c9\0\u1437\0\u1437\0\u1437\0\u8214"+
    "\0\u825f\0\u82aa\0\u82f5\0\u1437\0\u8340\0\u1437\0\u838b\0\u83d6"+
    "\0\u8421\0\u846c\0\u84b7\0\u8502\0\u854d\0\u8598\0\u85e3\0\u862e"+
    "\0\u8679\0\u86c4\0\u870f\0\u1437\0\u875a\0\u87a5\0\u1437\0\u87f0"+
    "\0\u883b\0\u8886\0\u1437\0\u88d1\0\u891c\0\u1437\0\u1437\0\u8967"+
    "\0\u03cf\0\u7869\0\u89b2\0\u09f6\0\u89fd\0\u8a48\0\u8a93\0\u09f6"+
    "\0\u8ade\0\u8b29\0\u8b74\0\u09f6\0\u8bbf\0\u8c0a\0\u09f6\0\u8c55"+
    "\0\u8ca0\0\u8ceb\0\u8d36\0\u8d81\0\u09f6\0\u09f6\0\u09f6\0\u09f6"+
    "\0\u09f6\0\u8dcc\0\u09f6\0\u8e17\0\u09f6\0\u8e62\0\u8ead\0\u8ef8"+
    "\0\u1437\0\u8f43\0\u8f8e\0\u8fd9\0\u1437\0\u9024\0\u906f\0\u90ba"+
    "\0\u1437\0\u9105\0\u9150\0\u1437\0\u919b\0\u91e6\0\u9231\0\u927c"+
    "\0\u1437\0\u1437\0\u1437\0\u1437\0\u1437\0\u92c7\0\u1437\0\u9312"+
    "\0\u1437\0\u935d\0\u93a8\0\u93f3\0\u943e\0\u09f6\0\u9489\0\u09f6"+
    "\0\u09f6\0\u09f6\0\u94d4\0\u951f\0\u956a\0\u95b5\0\u09f6\0\u09f6"+
    "\0\u09f6\0\u9600\0\u964b\0\u9696\0\u96e1\0\u972c\0\u9777\0\u1437"+
    "\0\u97c2\0\u1437\0\u1437\0\u1437\0\u980d\0\u9858\0\u98a3\0\u1437"+
    "\0\u1437\0\u1437\0\u98ee\0\u9939\0\u9984\0\u99cf\0\u9a1a\0\u9a65"+
    "\0\u09f6\0\u09f6\0\u9ab0\0\u9afb\0\u9b46\0\u9b91\0\u9bdc\0\u09f6"+
    "\0\u9c27\0\u9c72\0\u09f6\0\u1437\0\u1437\0\u9cbd\0\u9d08\0\u9d53"+
    "\0\u9d9e\0\u1437\0\u9de9\0\u9e34\0\u1437\0\u9e7f\0\u9eca\0\u9f15"+
    "\0\u09f6\0\u9f60\0\u09f6\0\u9fab\0\u09f6\0\u9ff6\0\ua041\0\u1437"+
    "\0\u1437\0\ua08c\0\u1437\0\ua0d7\0\u09f6\0\u09f6\0\u03cf\0\ua122"+
    "\0\u1437\0\u1437\0\ua16d\0\ua1b8\0\ua203\0\ua24e\0\u03cf\0\u09f6"+
    "\0\u1437";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[753];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\2\20\1\21\1\20\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\12\52\1\53\1\54"+
    "\1\55\1\56\1\52\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\2\52\1\65\1\52\1\66\1\52\1\67\1\52"+
    "\1\70\1\71\1\72\1\73\1\52\1\74\1\75\1\52"+
    "\1\76\1\52\1\77\1\100\1\101\1\102\1\0\1\16"+
    "\1\17\2\20\1\21\1\20\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\12\52\1\53\1\54\1\55"+
    "\1\56\1\52\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\2\52\1\65\1\52\1\66\1\52\1\67\1\52\1\70"+
    "\1\71\1\72\1\73\1\52\1\74\1\75\1\52\1\76"+
    "\1\52\1\103\1\100\1\104\1\102\1\0\1\16\1\17"+
    "\2\20\1\21\1\20\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\12\52\1\53\1\54\1\55\1\56"+
    "\31\52\1\103\1\100\1\105\1\102\1\0\1\106\1\17"+
    "\2\106\1\17\4\106\1\107\12\106\1\110\25\106\1\111"+
    "\40\106\14\112\1\113\35\112\1\114\40\112\2\115\1\116"+
    "\2\115\1\116\1\115\1\117\1\115\1\120\40\115\1\121"+
    "\40\115\7\122\1\123\1\122\1\120\40\122\1\124\40\122"+
    "\11\125\1\126\12\125\1\127\25\125\1\130\40\125\11\131"+
    "\1\132\12\131\1\133\66\131\37\134\12\135\4\134\1\135"+
    "\1\136\1\137\1\140\1\141\1\142\1\143\2\135\1\144"+
    "\1\135\1\145\1\135\1\146\1\135\1\147\1\150\1\151"+
    "\1\152\1\135\1\153\1\154\1\135\1\155\1\135\1\156"+
    "\4\134\23\157\1\160\67\157\37\161\12\135\4\161\31\135"+
    "\5\161\1\162\5\163\44\162\1\164\40\162\114\0\5\20"+
    "\44\0\1\165\73\0\1\166\32\0\1\167\24\0\2\170"+
    "\1\0\2\170\1\0\1\170\1\171\1\170\1\0\40\170"+
    "\1\172\40\170\6\0\1\173\115\0\1\52\12\0\1\174"+
    "\3\52\7\0\12\52\4\0\31\52\40\0\1\175\72\0"+
    "\1\176\17\0\1\177\57\0\2\200\1\0\2\200\1\0"+
    "\6\200\1\201\35\200\1\202\40\200\17\0\1\203\3\0"+
    "\1\204\7\0\1\205\77\0\1\206\12\0\1\207\101\0"+
    "\1\210\10\0\1\211\1\212\71\0\1\213\7\0\1\214"+
    "\1\0\3\215\102\0\1\216\4\0\1\217\111\0\1\220"+
    "\1\0\3\42\10\0\1\221\1\222\1\223\1\224\1\225"+
    "\1\0\1\226\1\227\1\230\4\0\1\231\1\0\1\221"+
    "\1\0\1\222\1\223\1\224\1\225\1\0\1\226\1\0"+
    "\1\227\12\0\1\230\32\0\1\220\1\0\3\42\11\0"+
    "\1\222\1\223\1\224\1\225\1\0\1\226\1\227\5\0"+
    "\1\231\3\0\1\222\1\223\1\224\1\225\1\0\1\226"+
    "\1\0\1\227\52\0\1\232\105\0\1\233\6\0\1\234"+
    "\1\235\112\0\1\236\55\0\1\237\34\0\1\240\1\241"+
    "\101\0\1\242\4\0\1\243\2\0\1\244\1\0\1\245"+
    "\66\0\1\52\13\0\3\52\7\0\12\52\4\0\31\52"+
    "\7\0\3\17\1\246\140\0\1\247\70\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\2\52\1\250\16\52\1\251"+
    "\7\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\16\52\1\252\1\52\1\253\6\52\1\254\1\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\1\52\1\255"+
    "\6\52\1\256\2\52\1\257\2\52\1\260\12\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\5\52\1\261"+
    "\10\52\1\262\12\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\13\52\1\263\1\52\1\264\10\52\1\265"+
    "\2\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\1\52\1\266\7\52\1\267\1\52\1\270\2\52\1\271"+
    "\12\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\6\52\1\272\5\52\1\273\1\274\13\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\16\52\1\275\12\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\1\52"+
    "\1\276\3\52\1\277\10\52\1\300\4\52\1\301\5\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\1\52"+
    "\1\302\3\52\1\303\12\52\1\304\2\52\1\305\5\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\5\52"+
    "\1\306\23\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\5\52\1\307\2\52\1\310\11\52\1\311\1\312"+
    "\1\52\1\313\1\52\1\314\1\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\10\52\1\315\7\52\1\316"+
    "\10\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\1\52\1\317\14\52\1\320\12\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\10\52\1\321\20\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\11\52\1\322"+
    "\17\52\40\0\1\323\53\0\1\324\27\0\1\325\105\0"+
    "\1\326\4\0\1\326\6\0\1\327\73\0\1\330\76\0"+
    "\113\112\2\115\1\0\2\115\1\0\1\115\1\0\1\115"+
    "\1\0\40\115\1\0\40\115\1\331\1\332\2\331\1\332"+
    "\45\331\1\333\40\331\7\122\1\0\1\122\1\0\40\122"+
    "\1\0\40\122\7\0\1\334\103\0\2\331\4\0\104\331"+
    "\1\0\11\125\1\0\12\125\1\0\25\125\1\0\40\125"+
    "\37\335\12\0\4\335\32\0\4\335\24\0\1\336\66\0"+
    "\11\131\1\0\12\131\1\0\66\131\11\337\1\340\12\337"+
    "\1\340\12\337\12\0\4\337\32\0\4\337\11\0\1\341"+
    "\126\0\3\135\7\0\12\135\4\0\31\135\32\0\3\135"+
    "\7\0\12\135\4\0\2\135\1\342\16\135\1\343\7\135"+
    "\32\0\3\135\7\0\12\135\4\0\16\135\1\344\1\135"+
    "\1\345\6\135\1\346\1\135\32\0\3\135\7\0\12\135"+
    "\4\0\1\135\1\347\6\135\1\350\2\135\1\351\2\135"+
    "\1\352\12\135\32\0\3\135\7\0\12\135\4\0\5\135"+
    "\1\353\10\135\1\354\12\135\32\0\3\135\7\0\12\135"+
    "\4\0\13\135\1\355\1\135\1\356\10\135\1\357\2\135"+
    "\32\0\3\135\7\0\12\135\4\0\1\135\1\360\7\135"+
    "\1\361\1\135\1\362\2\135\1\363\12\135\32\0\3\135"+
    "\7\0\12\135\4\0\6\135\1\364\5\135\1\365\1\366"+
    "\13\135\32\0\3\135\7\0\12\135\4\0\16\135\1\367"+
    "\12\135\32\0\3\135\7\0\12\135\4\0\1\135\1\370"+
    "\3\135\1\371\10\135\1\372\4\135\1\373\5\135\32\0"+
    "\3\135\7\0\12\135\4\0\1\135\1\374\3\135\1\375"+
    "\12\135\1\376\2\135\1\377\5\135\32\0\3\135\7\0"+
    "\12\135\4\0\5\135\1\u0100\23\135\32\0\3\135\7\0"+
    "\12\135\4\0\5\135\1\u0101\2\135\1\u0102\11\135\1\u0103"+
    "\1\u0104\1\135\1\u0105\1\135\1\u0106\1\135\32\0\3\135"+
    "\7\0\12\135\4\0\10\135\1\u0107\7\135\1\u0108\10\135"+
    "\32\0\3\135\7\0\12\135\4\0\1\135\1\u0109\14\135"+
    "\1\u010a\12\135\32\0\3\135\7\0\12\135\4\0\10\135"+
    "\1\u010b\20\135\32\0\3\135\7\0\12\135\4\0\11\135"+
    "\1\u010c\17\135\44\0\12\u010d\4\0\31\u010d\6\0\5\163"+
    "\44\0\1\u010e\42\0\4\163\107\0\4\20\140\0\1\u010f"+
    "\151\0\1\u0110\20\0\2\170\1\0\2\170\1\0\1\170"+
    "\1\u0111\1\170\1\0\40\170\1\172\40\170\7\0\1\u0112"+
    "\103\0\1\170\1\u0113\2\170\1\u0113\45\170\1\u0114\40\170"+
    "\2\173\1\0\2\173\1\0\105\173\2\200\1\0\2\200"+
    "\1\0\6\200\1\u0115\35\200\1\202\40\200\14\0\1\u0116"+
    "\76\0\1\200\1\u0117\2\200\1\u0117\45\200\1\u0118\40\200"+
    "\33\0\1\u0119\102\0\1\u011a\6\0\1\u011b\105\0\3\215"+
    "\11\0\1\222\1\223\1\224\1\u011c\10\0\1\u011d\3\0"+
    "\1\222\1\223\1\224\1\u011c\26\0\17\u011e\1\u011f\73\u011e"+
    "\2\217\1\0\2\217\1\0\105\217\25\0\3\215\110\0"+
    "\2\u0120\104\0\1\u0121\1\0\1\u0121\2\0\3\u0122\110\0"+
    "\3\u0123\7\0\5\u0123\12\0\6\u0123\54\0\3\42\25\0"+
    "\1\231\60\0\1\u0124\122\0\1\u0125\113\0\1\u0126\111\0"+
    "\1\u0127\55\0\1\u0128\34\0\1\u0129\1\u012a\101\0\1\u012b"+
    "\71\0\1\17\121\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\21\52\1\u012c\7\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\21\52\1\u012d\7\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\16\52\1\u012e\12\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\5\52"+
    "\1\u012f\23\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\22\52\1\u0130\6\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\21\52\1\u0131\1\u0132\6\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\1\52\1\u0133"+
    "\27\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\1\52\1\u0134\27\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\15\52\1\u0135\13\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\6\52\1\u0136\22\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\23\52\1\u0137"+
    "\5\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\21\52\1\u0138\7\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\23\52\1\u0139\5\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\22\52\1\u013a\6\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\13\52\1\u013b"+
    "\15\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\15\52\1\u013c\13\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\16\52\1\u013d\12\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\20\52\1\u013e\10\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\17\52\1\u013f"+
    "\11\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\21\52\1\u0140\1\u0141\6\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\15\52\1\u0142\13\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\22\52\1\u0143\6\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\25\52"+
    "\1\u0144\3\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\15\52\1\u0145\13\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\13\52\1\u0146\15\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\3\52\1\u0147\25\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\20\52"+
    "\1\u0148\10\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\11\52\1\u0149\4\52\1\u014a\12\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\2\52\1\u014b\26\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\3\52"+
    "\1\u014c\16\52\1\u014d\6\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\1\52\1\u014e\27\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\16\52\1\u014f\12\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\1\52"+
    "\1\u0150\16\52\1\u0151\10\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\17\52\1\u0152\11\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\11\52\1\u0153\17\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\15\52"+
    "\1\u0154\13\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\11\52\1\u0155\6\52\1\u0156\10\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\1\52\1\u0157\21\52"+
    "\1\u0158\3\52\1\u0159\1\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\20\52\1\u015a\10\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\11\52\1\u015b\1\52"+
    "\1\u015c\15\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\11\52\1\u015d\17\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\5\52\1\u015e\23\52\21\0\1\u015f"+
    "\77\0\1\u0160\1\331\1\0\1\u0160\1\331\44\0\1\u0161"+
    "\42\0\3\u0160\1\u0162\114\0\1\u0163\130\0\3\135\7\0"+
    "\12\135\4\0\21\135\1\u0164\7\135\32\0\3\135\7\0"+
    "\12\135\4\0\21\135\1\u0165\7\135\32\0\3\135\7\0"+
    "\12\135\4\0\16\135\1\u0166\12\135\32\0\3\135\7\0"+
    "\12\135\4\0\5\135\1\u0167\23\135\32\0\3\135\7\0"+
    "\12\135\4\0\22\135\1\u0168\6\135\32\0\3\135\7\0"+
    "\12\135\4\0\21\135\1\u0169\1\u016a\6\135\32\0\3\135"+
    "\7\0\12\135\4\0\1\135\1\u016b\27\135\32\0\3\135"+
    "\7\0\12\135\4\0\1\135\1\u016c\27\135\32\0\3\135"+
    "\7\0\12\135\4\0\15\135\1\u016d\13\135\32\0\3\135"+
    "\7\0\12\135\4\0\6\135\1\u016e\22\135\32\0\3\135"+
    "\7\0\12\135\4\0\23\135\1\u016f\5\135\32\0\3\135"+
    "\7\0\12\135\4\0\21\135\1\u0170\7\135\32\0\3\135"+
    "\7\0\12\135\4\0\23\135\1\u0171\5\135\32\0\3\135"+
    "\7\0\12\135\4\0\22\135\1\u0172\6\135\32\0\3\135"+
    "\7\0\12\135\4\0\13\135\1\u0173\15\135\32\0\3\135"+
    "\7\0\12\135\4\0\15\135\1\u0174\13\135\32\0\3\135"+
    "\7\0\12\135\4\0\16\135\1\u0175\12\135\32\0\3\135"+
    "\7\0\12\135\4\0\20\135\1\u0176\10\135\32\0\3\135"+
    "\7\0\12\135\4\0\17\135\1\u0177\11\135\32\0\3\135"+
    "\7\0\12\135\4\0\21\135\1\u0178\1\u0179\6\135\32\0"+
    "\3\135\7\0\12\135\4\0\15\135\1\u017a\13\135\32\0"+
    "\3\135\7\0\12\135\4\0\22\135\1\u017b\6\135\32\0"+
    "\3\135\7\0\12\135\4\0\25\135\1\u017c\3\135\32\0"+
    "\3\135\7\0\12\135\4\0\15\135\1\u017d\13\135\32\0"+
    "\3\135\7\0\12\135\4\0\13\135\1\u017e\15\135\32\0"+
    "\3\135\7\0\12\135\4\0\3\135\1\u017f\25\135\32\0"+
    "\3\135\7\0\12\135\4\0\20\135\1\u0180\10\135\32\0"+
    "\3\135\7\0\12\135\4\0\11\135\1\u0181\4\135\1\u0182"+
    "\12\135\32\0\3\135\7\0\12\135\4\0\2\135\1\u0183"+
    "\26\135\32\0\3\135\7\0\12\135\4\0\3\135\1\u0184"+
    "\16\135\1\u0185\6\135\32\0\3\135\7\0\12\135\4\0"+
    "\1\135\1\u0186\27\135\32\0\3\135\7\0\12\135\4\0"+
    "\16\135\1\u0187\12\135\32\0\3\135\7\0\12\135\4\0"+
    "\1\135\1\u0188\16\135\1\u0189\10\135\32\0\3\135\7\0"+
    "\12\135\4\0\17\135\1\u018a\11\135\32\0\3\135\7\0"+
    "\12\135\4\0\11\135\1\u018b\17\135\32\0\3\135\7\0"+
    "\12\135\4\0\15\135\1\u018c\13\135\32\0\3\135\7\0"+
    "\12\135\4\0\11\135\1\u018d\6\135\1\u018e\10\135\32\0"+
    "\3\135\7\0\12\135\4\0\1\135\1\u018f\21\135\1\u0190"+
    "\3\135\1\u0191\1\135\32\0\3\135\7\0\12\135\4\0"+
    "\20\135\1\u0192\10\135\32\0\3\135\7\0\12\135\4\0"+
    "\11\135\1\u0193\1\135\1\u0194\15\135\32\0\3\135\7\0"+
    "\12\135\4\0\11\135\1\u0195\17\135\32\0\3\135\7\0"+
    "\12\135\4\0\5\135\1\u0196\23\135\32\0\3\u010d\7\0"+
    "\12\u010d\4\0\31\u010d\5\0\11\u0197\1\0\13\u0197\3\0"+
    "\7\u0197\12\0\4\u0197\21\0\1\u0198\7\0\5\u0197\7\u0199"+
    "\1\u019a\1\u0199\1\0\40\u0199\1\u019b\40\u0199\1\170\1\u0113"+
    "\2\170\1\u0113\2\170\1\u0111\1\170\1\0\40\170\1\u019c"+
    "\42\170\1\u019d\2\u0113\1\u019e\1\170\1\u0111\1\170\1\0"+
    "\40\170\1\172\40\170\1\200\1\u0117\2\200\1\u0117\7\200"+
    "\1\u0115\35\200\1\u019f\42\200\1\u01a0\2\u0117\1\u01a1\6\200"+
    "\1\u0115\35\200\1\202\40\200\25\0\3\215\25\0\1\u011d"+
    "\35\0\17\u011e\1\u01a2\73\u011e\17\u01a3\1\u011f\4\u01a3\1\u01a4"+
    "\66\u01a3\25\0\2\u0120\15\0\1\225\1\0\1\226\1\227"+
    "\5\0\1\u01a5\6\0\1\225\1\0\1\226\1\0\1\227"+
    "\47\0\3\u0122\110\0\3\u0122\11\0\1\222\1\0\1\224"+
    "\1\u011c\10\0\1\u0121\3\0\1\222\1\0\1\224\1\u011c"+
    "\53\0\3\u0123\7\0\5\u0123\1\225\1\0\1\226\1\227"+
    "\5\0\1\u01a6\6\u0123\1\225\1\0\1\226\1\0\1\227"+
    "\54\0\1\u01a7\113\0\1\u01a8\70\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\22\52\1\u01a9\6\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\5\52\1\u01aa\23\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\13\52"+
    "\1\u01ab\15\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\1\52\1\u01ac\27\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\5\52\1\u01ad\23\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\5\52\1\u01ae\23\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\3\52"+
    "\1\u01af\25\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\20\52\1\u01b0\10\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\21\52\1\u01b1\7\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\22\52\1\u01b2\6\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\1\52"+
    "\1\u01b3\27\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\2\52\1\u01b4\26\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\5\52\1\u01b5\23\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\14\52\1\u01b6\14\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\5\52"+
    "\1\u01b7\23\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\21\52\1\u01b8\7\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\1\52\1\u01b9\27\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\1\52\1\u01ba\27\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\13\52"+
    "\1\u01bb\2\52\1\u01bc\12\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\22\52\1\u01bd\6\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\5\52\1\u01be\23\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\7\52"+
    "\1\u01bf\21\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\11\52\1\u01c0\17\52\16\0\1\52\10\0\1\u01c1"+
    "\2\0\3\52\7\0\12\52\4\0\31\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\13\52\1\u01c2\15\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\12\52"+
    "\1\u01c3\16\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\14\52\1\u01c4\14\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\24\52\1\u01c5\4\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\22\52\1\u01c6\6\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\13\52"+
    "\1\u01c7\15\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\16\52\1\u01c8\12\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\23\52\1\u01c9\5\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\13\52\1\u01ca\15\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\20\52"+
    "\1\u01cb\10\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\22\52\1\u01cc\6\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\11\52\1\u01cd\17\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\5\52\1\u01ce\23\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\22\52"+
    "\1\u01cf\6\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\3\52\1\u01d0\25\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\21\52\1\u01d1\7\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\16\52\1\u01d2\12\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\11\52"+
    "\1\u01d3\3\52\1\u01d4\13\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\5\52\1\u01d5\23\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\4\52\1\u01d6\24\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\1\52"+
    "\1\u01d7\27\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\13\52\1\u01d8\15\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\13\52\1\u01d9\15\52\6\0\1\u0160"+
    "\1\332\1\0\1\u0160\1\331\44\0\1\u0161\65\0\3\135"+
    "\7\0\12\135\4\0\22\135\1\u01da\6\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u01db\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\13\135\1\u01dc\15\135\32\0\3\135"+
    "\7\0\12\135\4\0\1\135\1\u01dd\27\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u01de\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u01df\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\3\135\1\u01e0\25\135\32\0\3\135"+
    "\7\0\12\135\4\0\20\135\1\u01e1\10\135\32\0\3\135"+
    "\7\0\12\135\4\0\21\135\1\u01e2\7\135\32\0\3\135"+
    "\7\0\12\135\4\0\22\135\1\u01e3\6\135\32\0\3\135"+
    "\7\0\12\135\4\0\1\135\1\u01e4\27\135\32\0\3\135"+
    "\7\0\12\135\4\0\2\135\1\u01e5\26\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u01e6\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\14\135\1\u01e7\14\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u01e8\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\21\135\1\u01e9\7\135\32\0\3\135"+
    "\7\0\12\135\4\0\1\135\1\u01ea\27\135\32\0\3\135"+
    "\7\0\12\135\4\0\1\135\1\u01eb\27\135\32\0\3\135"+
    "\7\0\12\135\4\0\13\135\1\u01ec\2\135\1\u01ed\12\135"+
    "\32\0\3\135\7\0\12\135\4\0\22\135\1\u01ee\6\135"+
    "\32\0\3\135\7\0\12\135\4\0\5\135\1\u01ef\23\135"+
    "\32\0\3\135\7\0\12\135\4\0\7\135\1\u01f0\21\135"+
    "\32\0\3\135\7\0\12\135\4\0\11\135\1\u01f1\17\135"+
    "\27\0\1\u01c1\2\0\3\135\7\0\12\135\4\0\31\135"+
    "\32\0\3\135\7\0\12\135\4\0\13\135\1\u01f2\15\135"+
    "\32\0\3\135\7\0\12\135\4\0\12\135\1\u01f3\16\135"+
    "\32\0\3\135\7\0\12\135\4\0\14\135\1\u01f4\14\135"+
    "\32\0\3\135\7\0\12\135\4\0\24\135\1\u01f5\4\135"+
    "\32\0\3\135\7\0\12\135\4\0\22\135\1\u01f6\6\135"+
    "\32\0\3\135\7\0\12\135\4\0\13\135\1\u01f7\15\135"+
    "\32\0\3\135\7\0\12\135\4\0\16\135\1\u01f8\12\135"+
    "\32\0\3\135\7\0\12\135\4\0\23\135\1\u01f9\5\135"+
    "\32\0\3\135\7\0\12\135\4\0\13\135\1\u01fa\15\135"+
    "\32\0\3\135\7\0\12\135\4\0\20\135\1\u01fb\10\135"+
    "\32\0\3\135\7\0\12\135\4\0\22\135\1\u01fc\6\135"+
    "\32\0\3\135\7\0\12\135\4\0\11\135\1\u01fd\17\135"+
    "\32\0\3\135\7\0\12\135\4\0\5\135\1\u01fe\23\135"+
    "\32\0\3\135\7\0\12\135\4\0\22\135\1\u01ff\6\135"+
    "\32\0\3\135\7\0\12\135\4\0\3\135\1\u0200\25\135"+
    "\32\0\3\135\7\0\12\135\4\0\21\135\1\u0201\7\135"+
    "\32\0\3\135\7\0\12\135\4\0\16\135\1\u0202\12\135"+
    "\32\0\3\135\7\0\12\135\4\0\11\135\1\u0203\3\135"+
    "\1\u0204\13\135\32\0\3\135\7\0\12\135\4\0\5\135"+
    "\1\u0205\23\135\32\0\3\135\7\0\12\135\4\0\4\135"+
    "\1\u0206\24\135\32\0\3\135\7\0\12\135\4\0\1\135"+
    "\1\u0207\27\135\32\0\3\135\7\0\12\135\4\0\13\135"+
    "\1\u0208\15\135\32\0\3\135\7\0\12\135\4\0\13\135"+
    "\1\u0209\15\135\104\0\1\u020a\13\0\7\u0199\1\u020b\1\u0199"+
    "\1\0\40\u0199\1\0\153\u0199\1\170\4\u0113\1\u020c\44\170"+
    "\1\u0114\40\170\1\0\1\u019d\1\170\1\0\1\u019d\1\170"+
    "\44\0\1\u020d\41\0\1\u019d\1\u0113\1\0\1\u019d\1\170"+
    "\44\0\1\u020d\40\0\1\200\4\u0117\1\u020e\44\200\1\u0118"+
    "\40\200\1\0\1\u01a0\1\200\1\0\1\u01a0\1\200\44\0"+
    "\1\u020f\41\0\1\u01a0\1\u0117\1\0\1\u01a0\1\200\44\0"+
    "\1\u020f\40\0\17\u011e\1\u0210\4\u011e\1\u0211\66\u011e\17\u01a3"+
    "\1\u0212\73\u01a3\25\0\2\u0120\26\0\1\u01a5\62\0\3\u0123"+
    "\7\0\5\u0123\11\0\1\u01a6\6\u0123\40\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\20\52\1\u0213\10\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\20\52\1\u0214"+
    "\10\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\5\52\1\u0215\23\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\12\52\1\u0216\16\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\10\52\1\u0217\20\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\21\52\1\u0218"+
    "\7\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\11\52\1\u0219\17\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\23\52\1\u021a\5\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\13\52\1\u021b\15\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\15\52\1\u021c"+
    "\13\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\5\52\1\u021d\23\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\13\52\1\u021e\15\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\22\52\1\u021f\6\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\5\52\1\u0220"+
    "\23\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\20\52\1\u0221\10\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\1\52\1\u0222\27\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\20\52\1\u0223\10\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\24\52\1\u0224"+
    "\4\52\103\0\1\u0225\25\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\1\52\1\u0226\27\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\11\52\1\u0227\17\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\1\52\1\u0228"+
    "\27\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\5\52\1\u0229\23\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\11\52\1\u022a\17\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\20\52\1\u022b\10\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\20\52\1\u022c"+
    "\10\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\5\52\1\u022d\23\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\22\52\1\u022e\6\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\11\52\1\u022f\17\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\3\52\1\u0230"+
    "\25\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\20\52\1\u0231\10\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\3\52\1\u0232\25\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\10\52\1\u0233\20\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\25\52\1\u0234"+
    "\3\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\22\52\1\u0235\6\52\16\0\1\52\13\0\3\52\7\0"+
    "\12\52\4\0\21\52\1\u0236\7\52\16\0\1\52\13\0"+
    "\3\52\7\0\12\52\4\0\22\52\1\u0237\6\52\16\0"+
    "\1\52\13\0\3\52\7\0\12\52\4\0\5\52\1\u0238"+
    "\23\52\16\0\1\52\13\0\3\52\7\0\12\52\4\0"+
    "\4\52\1\u0239\24\52\32\0\3\135\7\0\12\135\4\0"+
    "\20\135\1\u023a\10\135\32\0\3\135\7\0\12\135\4\0"+
    "\20\135\1\u023b\10\135\32\0\3\135\7\0\12\135\4\0"+
    "\5\135\1\u023c\23\135\32\0\3\135\7\0\12\135\4\0"+
    "\12\135\1\u023d\16\135\32\0\3\135\7\0\12\135\4\0"+
    "\10\135\1\u023e\20\135\32\0\3\135\7\0\12\135\4\0"+
    "\21\135\1\u023f\7\135\32\0\3\135\7\0\12\135\4\0"+
    "\11\135\1\u0240\17\135\32\0\3\135\7\0\12\135\4\0"+
    "\23\135\1\u0241\5\135\32\0\3\135\7\0\12\135\4\0"+
    "\13\135\1\u0242\15\135\32\0\3\135\7\0\12\135\4\0"+
    "\15\135\1\u0243\13\135\32\0\3\135\7\0\12\135\4\0"+
    "\5\135\1\u0244\23\135\32\0\3\135\7\0\12\135\4\0"+
    "\13\135\1\u0245\15\135\32\0\3\135\7\0\12\135\4\0"+
    "\22\135\1\u0246\6\135\32\0\3\135\7\0\12\135\4\0"+
    "\5\135\1\u0247\23\135\32\0\3\135\7\0\12\135\4\0"+
    "\20\135\1\u0248\10\135\32\0\3\135\7\0\12\135\4\0"+
    "\1\135\1\u0249\27\135\32\0\3\135\7\0\12\135\4\0"+
    "\20\135\1\u024a\10\135\32\0\3\135\7\0\12\135\4\0"+
    "\24\135\1\u024b\4\135\32\0\3\135\7\0\12\135\4\0"+
    "\1\135\1\u024c\27\135\32\0\3\135\7\0\12\135\4\0"+
    "\11\135\1\u024d\17\135\32\0\3\135\7\0\12\135\4\0"+
    "\1\135\1\u024e\27\135\32\0\3\135\7\0\12\135\4\0"+
    "\5\135\1\u024f\23\135\32\0\3\135\7\0\12\135\4\0"+
    "\11\135\1\u0250\17\135\32\0\3\135\7\0\12\135\4\0"+
    "\20\135\1\u0251\10\135\32\0\3\135\7\0\12\135\4\0"+
    "\20\135\1\u0252\10\135\32\0\3\135\7\0\12\135\4\0"+
    "\5\135\1\u0253\23\135\32\0\3\135\7\0\12\135\4\0"+
    "\22\135\1\u0254\6\135\32\0\3\135\7\0\12\135\4\0"+
    "\11\135\1\u0255\17\135\32\0\3\135\7\0\12\135\4\0"+
    "\3\135\1\u0256\25\135\32\0\3\135\7\0\12\135\4\0"+
    "\20\135\1\u0257\10\135\32\0\3\135\7\0\12\135\4\0"+
    "\3\135\1\u0258\25\135\32\0\3\135\7\0\12\135\4\0"+
    "\10\135\1\u0259\20\135\32\0\3\135\7\0\12\135\4\0"+
    "\25\135\1\u025a\3\135\32\0\3\135\7\0\12\135\4\0"+
    "\22\135\1\u025b\6\135\32\0\3\135\7\0\12\135\4\0"+
    "\21\135\1\u025c\7\135\32\0\3\135\7\0\12\135\4\0"+
    "\22\135\1\u025d\6\135\32\0\3\135\7\0\12\135\4\0"+
    "\5\135\1\u025e\23\135\32\0\3\135\7\0\12\135\4\0"+
    "\4\135\1\u025f\24\135\63\0\1\u0260\34\0\7\u0199\1\u0261"+
    "\1\u0199\1\0\40\u0199\1\0\40\u0199\1\170\2\u0113\1\170"+
    "\1\u0113\2\170\1\u0111\1\170\1\0\40\170\1\u019c\40\170"+
    "\2\0\3\u019d\1\u019e\105\0\1\200\2\u0117\1\200\1\u0117"+
    "\7\200\1\u0115\35\200\1\u019f\40\200\2\0\3\u01a0\1\u01a1"+
    "\105\0\17\u01a3\1\u0262\4\u01a3\1\u01a4\66\u01a3\11\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\1\52\1\u0263\27\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\22\52"+
    "\1\u0264\6\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\1\52\1\u0265\27\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\15\52\1\u0266\13\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\13\52\1\u0267\15\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\5\52"+
    "\1\u0268\23\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\4\52\1\u0269\24\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\13\52\1\u026a\15\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\14\52\1\u026b\14\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\22\52"+
    "\1\u026c\6\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\15\52\1\u026d\13\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\6\52\1\u026e\22\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\5\52\1\u026f\23\52"+
    "\67\0\1\u0270\41\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\7\52\1\u0271\21\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\22\52\1\u0272\6\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\22\52\1\u0273\6\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\3\52"+
    "\1\u0274\25\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\3\52\1\u0275\25\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\4\52\1\u0276\24\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\15\52\1\u0277\13\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\4\52"+
    "\1\u0278\24\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\3\52\1\u0279\25\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\22\52\1\u027a\6\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\10\52\1\u027b\20\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\20\52"+
    "\1\u027c\10\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\21\52\1\u027d\7\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\11\52\1\u027e\17\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\11\52\1\u027f\17\52"+
    "\32\0\3\135\7\0\12\135\4\0\1\135\1\u0280\27\135"+
    "\32\0\3\135\7\0\12\135\4\0\22\135\1\u0281\6\135"+
    "\32\0\3\135\7\0\12\135\4\0\1\135\1\u0282\27\135"+
    "\32\0\3\135\7\0\12\135\4\0\15\135\1\u0283\13\135"+
    "\32\0\3\135\7\0\12\135\4\0\13\135\1\u0284\15\135"+
    "\32\0\3\135\7\0\12\135\4\0\5\135\1\u0285\23\135"+
    "\32\0\3\135\7\0\12\135\4\0\4\135\1\u0286\24\135"+
    "\32\0\3\135\7\0\12\135\4\0\13\135\1\u0287\15\135"+
    "\32\0\3\135\7\0\12\135\4\0\14\135\1\u0288\14\135"+
    "\32\0\3\135\7\0\12\135\4\0\22\135\1\u0289\6\135"+
    "\32\0\3\135\7\0\12\135\4\0\15\135\1\u028a\13\135"+
    "\32\0\3\135\7\0\12\135\4\0\6\135\1\u028b\22\135"+
    "\32\0\3\135\7\0\12\135\4\0\5\135\1\u028c\23\135"+
    "\32\0\3\135\7\0\12\135\4\0\7\135\1\u028d\21\135"+
    "\32\0\3\135\7\0\12\135\4\0\22\135\1\u028e\6\135"+
    "\32\0\3\135\7\0\12\135\4\0\22\135\1\u028f\6\135"+
    "\32\0\3\135\7\0\12\135\4\0\3\135\1\u0290\25\135"+
    "\32\0\3\135\7\0\12\135\4\0\3\135\1\u0291\25\135"+
    "\32\0\3\135\7\0\12\135\4\0\4\135\1\u0292\24\135"+
    "\32\0\3\135\7\0\12\135\4\0\15\135\1\u0293\13\135"+
    "\32\0\3\135\7\0\12\135\4\0\4\135\1\u0294\24\135"+
    "\32\0\3\135\7\0\12\135\4\0\3\135\1\u0295\25\135"+
    "\32\0\3\135\7\0\12\135\4\0\22\135\1\u0296\6\135"+
    "\32\0\3\135\7\0\12\135\4\0\10\135\1\u0297\20\135"+
    "\32\0\3\135\7\0\12\135\4\0\20\135\1\u0298\10\135"+
    "\32\0\3\135\7\0\12\135\4\0\21\135\1\u0299\7\135"+
    "\32\0\3\135\7\0\12\135\4\0\11\135\1\u029a\17\135"+
    "\32\0\3\135\7\0\12\135\4\0\11\135\1\u029b\17\135"+
    "\77\0\1\u029c\31\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\3\52\1\u029d\25\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\15\52\1\u029e\13\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\23\52\1\u029f\5\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\22\52"+
    "\1\u02a0\6\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\21\52\1\u02a1\7\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\27\52\1\u02a2\1\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\5\52\1\u02a3\23\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\3\52"+
    "\1\u02a4\25\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\1\52\1\u02a5\27\52\63\0\1\u02a6\45\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\5\52\1\u02a7\23\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\21\52"+
    "\1\u02a8\7\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\5\52\1\u02a9\23\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\22\52\1\u02aa\6\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\6\52\1\u02ab\22\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\16\52"+
    "\1\u02ac\12\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\5\52\1\u02ad\23\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\13\52\1\u02ae\15\52\32\0\3\135"+
    "\7\0\12\135\4\0\3\135\1\u02af\25\135\32\0\3\135"+
    "\7\0\12\135\4\0\15\135\1\u02b0\13\135\32\0\3\135"+
    "\7\0\12\135\4\0\23\135\1\u02b1\5\135\32\0\3\135"+
    "\7\0\12\135\4\0\22\135\1\u02b2\6\135\32\0\3\135"+
    "\7\0\12\135\4\0\21\135\1\u02b3\7\135\32\0\3\135"+
    "\7\0\12\135\4\0\27\135\1\u02b4\1\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u02b5\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\3\135\1\u02b6\25\135\32\0\3\135"+
    "\7\0\12\135\4\0\1\135\1\u02b7\27\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u02b8\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\21\135\1\u02b9\7\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u02ba\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\22\135\1\u02bb\6\135\32\0\3\135"+
    "\7\0\12\135\4\0\6\135\1\u02bc\22\135\32\0\3\135"+
    "\7\0\12\135\4\0\16\135\1\u02bd\12\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u02be\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\13\135\1\u02bf\15\135\65\0\1\u02c0"+
    "\43\0\1\52\13\0\3\52\7\0\12\52\4\0\22\52"+
    "\1\u02c1\6\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\5\52\1\u02c2\23\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\15\52\1\u02c3\13\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\5\52\1\u02c4\23\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\3\52"+
    "\1\u02c5\25\52\75\0\1\u02c6\33\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\5\52\1\u02c7\23\52\16\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\17\52\1\u02c8\11\52"+
    "\16\0\1\52\13\0\3\52\7\0\12\52\4\0\15\52"+
    "\1\u02c9\13\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\15\52\1\u02ca\13\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\5\52\1\u02cb\23\52\32\0\3\135"+
    "\7\0\12\135\4\0\22\135\1\u02cc\6\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u02cd\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\15\135\1\u02ce\13\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u02cf\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\3\135\1\u02d0\25\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u02d1\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\17\135\1\u02d2\11\135\32\0\3\135"+
    "\7\0\12\135\4\0\15\135\1\u02d3\13\135\32\0\3\135"+
    "\7\0\12\135\4\0\15\135\1\u02d4\13\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u02d5\23\135\67\0\1\u02d6"+
    "\41\0\1\52\13\0\3\52\7\0\12\52\4\0\22\52"+
    "\1\u02d7\6\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\16\52\1\u02d8\12\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\5\52\1\u02d9\23\52\67\0\1\u02da"+
    "\41\0\1\52\13\0\3\52\7\0\12\52\4\0\4\52"+
    "\1\u02db\24\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\11\52\1\u02dc\17\52\16\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\22\52\1\u02dd\6\52\32\0\3\135"+
    "\7\0\12\135\4\0\22\135\1\u02de\6\135\32\0\3\135"+
    "\7\0\12\135\4\0\16\135\1\u02df\12\135\32\0\3\135"+
    "\7\0\12\135\4\0\5\135\1\u02e0\23\135\32\0\3\135"+
    "\7\0\12\135\4\0\4\135\1\u02e1\24\135\32\0\3\135"+
    "\7\0\12\135\4\0\11\135\1\u02e2\17\135\32\0\3\135"+
    "\7\0\12\135\4\0\22\135\1\u02e3\6\135\100\0\1\u02e4"+
    "\30\0\1\52\13\0\3\52\7\0\12\52\4\0\21\52"+
    "\1\u02e5\7\52\16\0\1\52\13\0\3\52\7\0\12\52"+
    "\4\0\6\52\1\u02e6\22\52\66\0\1\u02e7\42\0\1\52"+
    "\13\0\3\52\7\0\12\52\4\0\30\52\1\u02e8\32\0"+
    "\3\135\7\0\12\135\4\0\21\135\1\u02e9\7\135\32\0"+
    "\3\135\7\0\12\135\4\0\6\135\1\u02ea\22\135\32\0"+
    "\3\135\7\0\12\135\4\0\30\135\1\u02eb\70\0\1\u02ec"+
    "\40\0\1\52\13\0\3\52\7\0\12\52\4\0\5\52"+
    "\1\u02ed\23\52\32\0\3\135\7\0\12\135\4\0\5\135"+
    "\1\u02ee\23\135\5\0\11\u02ef\1\0\13\u02ef\3\0\7\u02ef"+
    "\12\0\4\u02ef\31\0\5\u02ef\11\0\1\52\13\0\3\52"+
    "\7\0\12\52\4\0\4\52\1\u02f0\24\52\32\0\3\135"+
    "\7\0\12\135\4\0\4\135\1\u02f1\24\135\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[41625];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\11\11\1\2\11\2\1\1\11\6\1\1\11"+
    "\4\1\1\11\1\1\1\11\1\1\1\11\21\1\1\11"+
    "\1\1\6\11\3\1\1\11\3\1\3\11\6\1\1\11"+
    "\4\1\1\11\21\1\2\11\1\1\2\11\2\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\4\11\2\1\1\0"+
    "\1\1\10\11\4\1\2\0\1\11\1\0\4\11\2\0"+
    "\1\11\2\0\2\1\2\11\1\0\3\11\1\0\1\1"+
    "\1\11\53\1\5\11\1\0\1\11\3\1\5\11\54\1"+
    "\1\0\1\11\1\0\1\11\1\1\2\0\2\11\2\1"+
    "\4\11\1\0\3\1\1\0\3\1\5\11\1\0\1\11"+
    "\63\1\1\11\3\0\1\11\63\1\1\11\12\0\2\1"+
    "\1\11\2\0\2\11\30\1\1\0\110\1\4\0\1\1"+
    "\2\0\1\11\23\1\1\0\72\1\1\0\1\11\1\0"+
    "\15\1\1\0\53\1\1\0\11\1\1\0\31\1\1\0"+
    "\5\1\1\0\17\1\1\0\3\1\1\0\11\1\1\0"+
    "\2\1\1\11\4\1\1\0\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[753];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  @Override
  protected int getInitialState() {
    return YYINITIAL;
  }

  @Override
  protected int getDivisionExpectedState() {
    return DIVISION_EXPECTED;
  }

  @Override
  protected int[] getDivisionStates() {
    return new int[] {YYINITIAL, IN_INJECTION};
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GroovyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    resetState();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_TRIPLE_STRING: {
              yyendstate(IN_TRIPLE_STRING); return storeToken(STRING_TSQ);
            }  // fall though
            case 754: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return T_WRONG;
            }
          // fall through
          case 176: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 177: break;
          case 3:
            { return storeToken(NL);
            }
          // fall through
          case 178: break;
          case 4:
            { return storeToken(T_NOT);
            }
          // fall through
          case 179: break;
          case 5:
            { yybeginstate(IN_SINGLE_GSTRING);
                                            return storeToken(GSTRING_BEGIN);
            }
          // fall through
          case 180: break;
          case 6:
            { return storeToken(IDENTIFIER);
            }
          // fall through
          case 181: break;
          case 7:
            { return storeToken(T_REM);
            }
          // fall through
          case 182: break;
          case 8:
            { return storeToken(T_BAND);
            }
          // fall through
          case 183: break;
          case 9:
            { return storeToken(STRING_SQ);
            }
          // fall through
          case 184: break;
          case 10:
            { return storeToken(T_LPAREN);
            }
          // fall through
          case 185: break;
          case 11:
            { return storeToken(T_RPAREN);
            }
          // fall through
          case 186: break;
          case 12:
            { return storeToken(T_STAR);
            }
          // fall through
          case 187: break;
          case 13:
            { return storeToken(T_PLUS);
            }
          // fall through
          case 188: break;
          case 14:
            { return storeToken(T_COMMA);
            }
          // fall through
          case 189: break;
          case 15:
            { return storeToken(T_MINUS);
            }
          // fall through
          case 190: break;
          case 16:
            { return storeToken(T_DOT);
            }
          // fall through
          case 191: break;
          case 17:
            { yybeginstate(IN_SLASHY_STRING);
                                            return storeToken(SLASHY_BEGIN);
            }
          // fall through
          case 192: break;
          case 18:
            { return storeToken(NUM_INT);
            }
          // fall through
          case 193: break;
          case 19:
            { return storeToken(T_COLON);
            }
          // fall through
          case 194: break;
          case 20:
            { return storeToken(T_SEMI);
            }
          // fall through
          case 195: break;
          case 21:
            { return storeToken(T_LT);
            }
          // fall through
          case 196: break;
          case 22:
            { return storeToken(T_ASSIGN);
            }
          // fall through
          case 197: break;
          case 23:
            { return storeToken(T_GT);
            }
          // fall through
          case 198: break;
          case 24:
            { return storeToken(T_Q);
            }
          // fall through
          case 199: break;
          case 25:
            { return storeToken(T_AT);
            }
          // fall through
          case 200: break;
          case 26:
            { return storeToken(T_LBRACK);
            }
          // fall through
          case 201: break;
          case 27:
            { return storeToken(T_RBRACK);
            }
          // fall through
          case 202: break;
          case 28:
            { return storeToken(T_XOR);
            }
          // fall through
          case 203: break;
          case 29:
            { yybeginstate(NLS_AFTER_LBRACE); return storeToken(T_LBRACE);
            }
          // fall through
          case 204: break;
          case 30:
            { return storeToken(T_BOR);
            }
          // fall through
          case 205: break;
          case 31:
            { return storeToken(T_RBRACE);
            }
          // fall through
          case 206: break;
          case 32:
            { return storeToken(T_BNOT);
            }
          // fall through
          case 207: break;
          case 33:
            { yybeginstate(NLS_AFTER_LBRACE, IN_INJECTION_BRACES); return storeToken(T_LBRACE);
            }
          // fall through
          case 208: break;
          case 34:
            { yyendstate(IN_INJECTION, IN_GSTRING_DOLLAR); return storeToken(T_RBRACE);
            }
          // fall through
          case 209: break;
          case 35:
            { yyendstate(IN_INJECTION_BRACES); return storeToken(T_RBRACE);
            }
          // fall through
          case 210: break;
          case 36:
            { yypushback(1);
    yyendstate(DIVISION_EXPECTED);
            }
          // fall through
          case 211: break;
          case 37:
            { yyendstate(DIVISION_EXPECTED);
    return storeToken(T_DIV);
            }
          // fall through
          case 212: break;
          case 38:
            { 
            }
          // fall through
          case 213: break;
          case 39:
            { return storeToken(GSTRING_CONTENT);
            }
          // fall through
          case 214: break;
          case 40:
            { yypushback(1);
    yyendstate(IN_SINGLE_GSTRING);
            }
          // fall through
          case 215: break;
          case 41:
            { yyendstate(IN_SINGLE_GSTRING);
    return storeToken(GSTRING_END);
            }
          // fall through
          case 216: break;
          case 42:
            { yybeginstate(IN_GSTRING_DOLLAR);
    return storeToken(T_DOLLAR);
            }
          // fall through
          case 217: break;
          case 43:
            { return storeToken(SLASHY_CONTENT);
            }
          // fall through
          case 218: break;
          case 44:
            { yyendstate(IN_SLASHY_STRING);
    return storeToken(SLASHY_END);
            }
          // fall through
          case 219: break;
          case 45:
            { return storeToken(DOLLAR_SLASHY_CONTENT);
            }
          // fall through
          case 220: break;
          case 46:
            { yypushback(1);
    yyendstate(IN_GSTRING_DOLLAR);
            }
          // fall through
          case 221: break;
          case 47:
            { yybeginstate(IN_GSTRING_DOT);
    return storeToken(IDENTIFIER);
            }
          // fall through
          case 222: break;
          case 48:
            { yybeginstate(IN_INJECTION, NLS_AFTER_LBRACE);
    return storeToken(T_LBRACE);
            }
          // fall through
          case 223: break;
          case 49:
            { yypushback(1);
    yyendstate(IN_GSTRING_DOT);
            }
          // fall through
          case 224: break;
          case 50:
            { yypushback(1);
    yyendstate(IN_GSTRING_DOT_IDENT);
            }
          // fall through
          case 225: break;
          case 51:
            { yypushback(1);
    yyendstate(NLS_AFTER_LBRACE);
            }
          // fall through
          case 226: break;
          case 52:
            { return storeToken(T_NEQ);
            }
          // fall through
          case 227: break;
          case 53:
            { return storeToken(STRING_DQ);
            }
          // fall through
          case 228: break;
          case 54:
            { return storeToken(SH_COMMENT);
            }
          // fall through
          case 229: break;
          case 55:
            { yybeginstate(IN_DOLLAR_SLASH_STRING);
                                            return storeToken(DOLLAR_SLASHY_BEGIN);
            }
          // fall through
          case 230: break;
          case 56:
            { return storeToken(T_REM_ASSIGN);
            }
          // fall through
          case 231: break;
          case 57:
            { return storeToken(T_LAND);
            }
          // fall through
          case 232: break;
          case 58:
            { return storeToken(T_BAND_ASSIGN);
            }
          // fall through
          case 233: break;
          case 59:
            { return storeToken(T_POW);
            }
          // fall through
          case 234: break;
          case 60:
            { return storeToken(T_SPREAD_DOT);
            }
          // fall through
          case 235: break;
          case 61:
            { return storeToken(T_STAR_ASSIGN);
            }
          // fall through
          case 236: break;
          case 62:
            { return storeToken(T_INC);
            }
          // fall through
          case 237: break;
          case 63:
            { return storeToken(T_PLUS_ASSIGN);
            }
          // fall through
          case 238: break;
          case 64:
            { return storeToken(T_DEC);
            }
          // fall through
          case 239: break;
          case 65:
            { return storeToken(T_MINUS_ASSIGN);
            }
          // fall through
          case 240: break;
          case 66:
            { return storeToken(T_ARROW);
            }
          // fall through
          case 241: break;
          case 67:
            { return storeToken(T_METHOD_CLOSURE);
            }
          // fall through
          case 242: break;
          case 68:
            { return storeToken(T_RANGE);
            }
          // fall through
          case 243: break;
          case 69:
            { return storeToken(NUM_BIG_DECIMAL);
            }
          // fall through
          case 244: break;
          case 70:
            { return storeToken(ML_COMMENT);
            }
          // fall through
          case 245: break;
          case 71:
            { return storeToken(SL_COMMENT);
            }
          // fall through
          case 246: break;
          case 72:
            { return storeToken(NUM_DOUBLE);
            }
          // fall through
          case 247: break;
          case 73:
            { return storeToken(NUM_FLOAT);
            }
          // fall through
          case 248: break;
          case 74:
            { return storeToken(NUM_BIG_INT);
            }
          // fall through
          case 249: break;
          case 75:
            { return storeToken(NUM_LONG);
            }
          // fall through
          case 250: break;
          case 76:
            { return storeToken(T_METHOD_REFERENCE);
            }
          // fall through
          case 251: break;
          case 77:
            { return storeToken(T_LE);
            }
          // fall through
          case 252: break;
          case 78:
            { return storeToken(T_EQ);
            }
          // fall through
          case 253: break;
          case 79:
            { return storeToken(T_REGEX_FIND);
            }
          // fall through
          case 254: break;
          case 80:
            { return storeToken(T_GE);
            }
          // fall through
          case 255: break;
          case 81:
            { return storeToken(T_SAFE_DOT);
            }
          // fall through
          case 256: break;
          case 82:
            { return storeToken(T_ELVIS);
            }
          // fall through
          case 257: break;
          case 83:
            { return storeToken(T_ELVIS_ASSIGN);
            }
          // fall through
          case 258: break;
          case 84:
            { return storeToken(T_XOR_ASSIGN);
            }
          // fall through
          case 259: break;
          case 85:
            { return storeToken(KW_AS);
            }
          // fall through
          case 260: break;
          case 86:
            { return storeToken(KW_DO);
            }
          // fall through
          case 261: break;
          case 87:
            { return storeToken(KW_IF);
            }
          // fall through
          case 262: break;
          case 88:
            { return storeToken(KW_IN);
            }
          // fall through
          case 263: break;
          case 89:
            { return storeToken(T_BOR_ASSIGN);
            }
          // fall through
          case 264: break;
          case 90:
            { return storeToken(T_LOR);
            }
          // fall through
          case 265: break;
          case 91:
            { yypushback(1);
    yyendstate(DIVISION_EXPECTED);
    return storeToken(T_DOLLAR);
            }
          // fall through
          case 266: break;
          case 92:
            { yypushback(2);
    yyendstate(DIVISION_EXPECTED);
            }
          // fall through
          case 267: break;
          case 93:
            { yyendstate(DIVISION_EXPECTED);
    return storeToken(T_DIV_ASSIGN);
            }
          // fall through
          case 268: break;
          case 94:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { return storeToken(SLASHY_CONTENT);
            }
          // fall through
          case 269: break;
          case 95:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { return storeToken(DOLLAR_SLASHY_CONTENT);
            }
          // fall through
          case 270: break;
          case 96:
            { yyendstate(IN_DOLLAR_SLASH_STRING);
    return storeToken(DOLLAR_SLASHY_END);
            }
          // fall through
          case 271: break;
          case 97:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybeginstate(IN_GSTRING_DOT_IDENT);
    return storeToken(T_DOT);
            }
          // fall through
          case 272: break;
          case 98:
            { return storeToken(T_NID);
            }
          // fall through
          case 273: break;
          case 99:
            { yybeginstate(IN_TRIPLE_GSTRING);
                                            return storeToken(GSTRING_BEGIN);
            }
          // fall through
          case 274: break;
          case 100:
            { yybeginstate(IN_TRIPLE_STRING);
            }
          // fall through
          case 275: break;
          case 101:
            { return storeToken(T_POW_ASSIGN);
            }
          // fall through
          case 276: break;
          case 102:
            { return storeToken(T_ELLIPSIS);
            }
          // fall through
          case 277: break;
          case 103:
            { return storeToken(T_RANGE_RIGHT_OPEN);
            }
          // fall through
          case 278: break;
          case 104:
            { return storeToken(GROOVY_DOC_COMMENT);
            }
          // fall through
          case 279: break;
          case 105:
            { return storeToken(T_RANGE_LEFT_OPEN);
            }
          // fall through
          case 280: break;
          case 106:
            { return storeToken(T_LSH_ASSIGN);
            }
          // fall through
          case 281: break;
          case 107:
            { return storeToken(T_COMPARE);
            }
          // fall through
          case 282: break;
          case 108:
            { return storeToken(T_ID);
            }
          // fall through
          case 283: break;
          case 109:
            { return storeToken(T_REGEX_MATCH);
            }
          // fall through
          case 284: break;
          case 110:
            { return storeToken(T_RSH_ASSIGN);
            }
          // fall through
          case 285: break;
          case 111:
            { return storeToken(T_SAFE_CHAIN_DOT);
            }
          // fall through
          case 286: break;
          case 112:
            { return storeToken(KW_DEF);
            }
          // fall through
          case 287: break;
          case 113:
            { return storeToken(KW_FOR);
            }
          // fall through
          case 288: break;
          case 114:
            { return storeToken(KW_INT);
            }
          // fall through
          case 289: break;
          case 115:
            { return storeToken(KW_NEW);
            }
          // fall through
          case 290: break;
          case 116:
            { return storeToken(KW_TRY);
            }
          // fall through
          case 291: break;
          case 117:
            { return storeToken(KW_VAR);
            }
          // fall through
          case 292: break;
          case 118:
            { yyendstate(IN_TRIPLE_STRING); return storeToken(STRING_TSQ);
            }
          // fall through
          case 293: break;
          case 119:
            { yyendstate(IN_TRIPLE_GSTRING);
    return storeToken(GSTRING_END);
            }
          // fall through
          case 294: break;
          case 120:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return storeToken(T_NOT_IN);
            }
          // fall through
          case 295: break;
          case 121:
            { return storeToken(T_RANGE_BOTH_OPEN);
            }
          // fall through
          case 296: break;
          case 122:
            { return storeToken(T_RSHU_ASSIGN);
            }
          // fall through
          case 297: break;
          case 123:
            { return storeToken(KW_BYTE);
            }
          // fall through
          case 298: break;
          case 124:
            { return storeToken(KW_CASE);
            }
          // fall through
          case 299: break;
          case 125:
            { return storeToken(KW_CHAR);
            }
          // fall through
          case 300: break;
          case 126:
            { return storeToken(KW_ELSE);
            }
          // fall through
          case 301: break;
          case 127:
            { return storeToken(KW_ENUM);
            }
          // fall through
          case 302: break;
          case 128:
            { return storeToken(KW_LONG);
            }
          // fall through
          case 303: break;
          case 129:
            { return storeToken(KW_NULL);
            }
          // fall through
          case 304: break;
          case 130:
            { return storeToken(KW_THIS);
            }
          // fall through
          case 305: break;
          case 131:
            { return storeToken(KW_TRUE);
            }
          // fall through
          case 306: break;
          case 132:
            { return storeToken(KW_VOID);
            }
          // fall through
          case 307: break;
          case 133:
            { return storeToken(KW_BREAK);
            }
          // fall through
          case 308: break;
          case 134:
            { return storeToken(KW_CATCH);
            }
          // fall through
          case 309: break;
          case 135:
            { return storeToken(KW_CLASS);
            }
          // fall through
          case 310: break;
          case 136:
            { return storeToken(KW_FALSE);
            }
          // fall through
          case 311: break;
          case 137:
            { return storeToken(KW_FINAL);
            }
          // fall through
          case 312: break;
          case 138:
            { return storeToken(KW_FLOAT);
            }
          // fall through
          case 313: break;
          case 139:
            { return storeToken(KW_SHORT);
            }
          // fall through
          case 314: break;
          case 140:
            { return storeToken(KW_SUPER);
            }
          // fall through
          case 315: break;
          case 141:
            { return storeToken(KW_THROW);
            }
          // fall through
          case 316: break;
          case 142:
            { return storeToken(KW_TRAIT);
            }
          // fall through
          case 317: break;
          case 143:
            { return storeToken(KW_WHILE);
            }
          // fall through
          case 318: break;
          case 144:
            { return storeToken(KW_YIELD);
            }
          // fall through
          case 319: break;
          case 145:
            { return storeToken(STRING_TDQ);
            }
          // fall through
          case 320: break;
          case 146:
            { return storeToken(KW_ASSERT);
            }
          // fall through
          case 321: break;
          case 147:
            { return storeToken(KW_DOUBLE);
            }
          // fall through
          case 322: break;
          case 148:
            { return storeToken(KW_IMPORT);
            }
          // fall through
          case 323: break;
          case 149:
            { return storeToken(KW_NATIVE);
            }
          // fall through
          case 324: break;
          case 150:
            { return storeToken(KW_PUBLIC);
            }
          // fall through
          case 325: break;
          case 151:
            { return storeToken(KW_RECORD);
            }
          // fall through
          case 326: break;
          case 152:
            { return storeToken(KW_RETURN);
            }
          // fall through
          case 327: break;
          case 153:
            { return storeToken(KW_SEALED);
            }
          // fall through
          case 328: break;
          case 154:
            { return storeToken(KW_STATIC);
            }
          // fall through
          case 329: break;
          case 155:
            { return storeToken(KW_SWITCH);
            }
          // fall through
          case 330: break;
          case 156:
            { return storeToken(KW_THROWS);
            }
          // fall through
          case 331: break;
          case 157:
            { return storeToken(KW_BOOLEAN);
            }
          // fall through
          case 332: break;
          case 158:
            { return storeToken(KW_DEFAULT);
            }
          // fall through
          case 333: break;
          case 159:
            { return storeToken(KW_EXTENDS);
            }
          // fall through
          case 334: break;
          case 160:
            { return storeToken(KW_FINALLY);
            }
          // fall through
          case 335: break;
          case 161:
            { return storeToken(KW_PACKAGE);
            }
          // fall through
          case 336: break;
          case 162:
            { return storeToken(KW_PERMITS);
            }
          // fall through
          case 337: break;
          case 163:
            { return storeToken(KW_PRIVATE);
            }
          // fall through
          case 338: break;
          case 164:
            { return storeToken(KW_ABSTRACT);
            }
          // fall through
          case 339: break;
          case 165:
            { return storeToken(KW_CONTINUE);
            }
          // fall through
          case 340: break;
          case 166:
            { return storeToken(KW_STRICTFP);
            }
          // fall through
          case 341: break;
          case 167:
            { return storeToken(KW_VOLATILE);
            }
          // fall through
          case 342: break;
          case 168:
            { return storeToken(KW_INTERFACE);
            }
          // fall through
          case 343: break;
          case 169:
            { return storeToken(KW_PROTECTED);
            }
          // fall through
          case 344: break;
          case 170:
            { return storeToken(KW_TRANSIENT);
            }
          // fall through
          case 345: break;
          case 171:
            { return storeToken(KW_IMPLEMENTS);
            }
          // fall through
          case 346: break;
          case 172:
            { return storeToken(KW_INSTANCEOF);
            }
          // fall through
          case 347: break;
          case 173:
            { return storeToken(KW_NON_SEALED);
            }
          // fall through
          case 348: break;
          case 174:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 11);
            { return storeToken(T_NOT_INSTANCEOF);
            }
          // fall through
          case 349: break;
          case 175:
            { return storeToken(KW_SYNCHRONIZED);
            }
          // fall through
          case 350: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
