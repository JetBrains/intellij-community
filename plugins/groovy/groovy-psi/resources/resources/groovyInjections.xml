<?xml version="1.0" encoding="UTF-8"?>
<component name="LanguageInjectionConfiguration">
  <injection language="SQL" injector-id="groovy">
    <display-name>Connection (java.sql)</display-name>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("nativeSQL").withParameters("java.lang.String").definedInClass("java.sql.Connection"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("prepareCall").withParameters("java.lang.String").definedInClass("java.sql.Connection"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("prepareCall").withParameters("java.lang.String", "int", "int").definedInClass("java.sql.Connection"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("prepareCall").withParameters("java.lang.String", "int", "int", "int").definedInClass("java.sql.Connection"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String").definedInClass("java.sql.Connection"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "int").definedInClass("java.sql.Connection"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "int", "int").definedInClass("java.sql.Connection"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "int", "int", "int").definedInClass("java.sql.Connection"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "int[]").definedInClass("java.sql.Connection"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "java.lang.String[]").definedInClass("java.sql.Connection"))]]></place>
  </injection>
  <injection language="SQL" injector-id="groovy">
    <display-name>Statement (java.sql)</display-name>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("addBatch").withParameters("java.lang.String").definedInClass("java.sql.Statement"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("execute").withParameters("java.lang.String").definedInClass("java.sql.Statement"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("execute").withParameters("java.lang.String", "int").definedInClass("java.sql.Statement"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("execute").withParameters("java.lang.String", "int[]").definedInClass("java.sql.Statement"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("execute").withParameters("java.lang.String", "java.lang.String[]").definedInClass("java.sql.Statement"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("executeQuery").withParameters("java.lang.String").definedInClass("java.sql.Statement"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("executeUpdate").withParameters("java.lang.String").definedInClass("java.sql.Statement"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("executeUpdate").withParameters("java.lang.String", "int").definedInClass("java.sql.Statement"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("executeUpdate").withParameters("java.lang.String", "int[]").definedInClass("java.sql.Statement"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("executeUpdate").withParameters("java.lang.String", "java.lang.String[]").definedInClass("java.sql.Statement"))]]></place>
  </injection>
  <injection language="SQL" injector-id="groovy">
    <display-name>groovy.sql.Sql</display-name>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("eachRow").definedInClass("groovy.sql.Sql"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("execute").definedInClass("groovy.sql.Sql"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("executeInsert").definedInClass("groovy.sql.Sql"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("executeUpdate").definedInClass("groovy.sql.Sql"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("firstRow").definedInClass("groovy.sql.Sql"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("query").definedInClass("groovy.sql.Sql"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("rows").definedInClass("groovy.sql.Sql"))]]></place>
  </injection>
  <injection language="Groovy" injector-id="groovy">
    <display-name>GroovyShell (groovy.lang)</display-name>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("evaluate").withParameters("java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("evaluate").withParameters("java.lang.String", "java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("evaluate").withParameters("java.lang.String", "java.lang.String", "java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("parse").withParameters("java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("parse").withParameters("java.lang.String", "java.lang.String").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("run").withParameters("java.lang.String", "java.lang.String", "java.lang.String[]").definedInClass("groovy.lang.GroovyShell"))]]></place>
    <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("run").withParameters("java.lang.String", "java.lang.String", "java.util.List").definedInClass("groovy.lang.GroovyShell"))]]></place>
  </injection>
  <injection language="RegExp" injector-id="groovy">
    <display-name>RegExp</display-name>
    <place><![CDATA[groovyLiteralExpression().regExpOperatorArgument()]]></place>
    <place><![CDATA[groovyElement().annotationParam("groovy.lang.Newify", "pattern")]]></place>
  </injection>
  <injection language="encoding-reference" injector-id="java">
    <display-name>Charset Name</display-name>
    <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("getBytes").withParameters("java.lang.String").definedInClass("groovy.lang.GString"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("newPrintWriter").withParameters("java.io.File", "java.lang.String").definedInClass("org.codehaus.groovy.runtime.DefaultGroovyMethods"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("newReader").withParameters("java.io.File", "java.lang.String").definedInClass("org.codehaus.groovy.runtime.DefaultGroovyMethods"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("newReader").withParameters("java.io.InputStream", "java.lang.String").definedInClass("org.codehaus.groovy.runtime.DefaultGroovyMethods"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("newWriter").withParameters("java.io.File", "java.lang.String").definedInClass("org.codehaus.groovy.runtime.DefaultGroovyMethods"))]]></place>
    <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("newWriter").withParameters("java.io.File", "java.lang.String", "boolean").definedInClass("org.codehaus.groovy.runtime.DefaultGroovyMethods"))]]></place>
  </injection>
</component>
