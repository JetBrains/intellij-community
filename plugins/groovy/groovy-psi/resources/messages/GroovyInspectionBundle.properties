# Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
########################################################################################################################
# Unused imports
########################################################################################################################
unused.import=Unused import
optimize.imports=Optimize imports
optimize.all.imports=Optimize unused import statements
########################################################################################################################
# Create class fix
########################################################################################################################
dialog.create.class.package.chooser.title=Choose destination package
create.directory.command=Create directory
destination.package=Destination package:
dialog.create.class.label.0=Create class ''{0}''
second.unsafe.call=Second unsafe call
call.can.throw.npe=Calling chain can throw NullPointerException
unused.default.parameter=Unused default parameter
unused.default.parameter.message=Default parameter is not used
unused.default.parameter.fix=Remove initializer
unused.assignment.tooltip=Assignment is not used
unused.variable=Variable is not used
variable.can.be.final.tooltip=Variable ''{0}'' can be final
parameter.can.be.final.tooltip=Parameter ''{0}'' can be final
equals.between.inconvertible.types.tooltip=<code>{0}</code> between objects of inconvertible types ''{1}'' and ''{2}''
replace.with.operator.message=''{0}'' can be replaced with operator
replace.with.operator.fix=Replace ''{0}'' with operator
replace.with.operator.double.negation.option=Use double negation (i.e. !!)
replace.with.operator.compareTo.equality.option=Replace 'compareTo' equality to equals (i.e. ==)
replace.with.operator.parentheses=Do not suggest replace with operator if it entails additional parentheses
replace.with.method.message=Can be replaced with ''{0}'' method call
replace.with.method.fix=Replace with ''{0}'' method
unassigned.access.tooltip=Variable ''{0}'' might not be assigned
no.return.short.name=MissingReturnStatement
no.return.message=Not all execution paths return a value
create.dynamic.property=Create dynamic property
dynamic.property=Dynamic property
unresolved.type.status=Type ''{0}'' is not resolved
resolved.type.status=Type ''{0}'' is resolved
no.type.specified=No type specified
dynamic.element=Dynamic Element
########################################################################################################################
# InspectorGroovy properties
########################################################################################################################
pointless.boolean.problem.descriptor=#ref can be simplified to ''{0}'' #loc
pointless.arithmetic.error.message=#ref can be replaced with ''{0}'' #loc
pointless.boolean.quickfix=Simplify
Cannot.perform.undo.operation=Cannot perform undo operation
Undo.disable=Undo Disabled
type.doesnt.contain.method=Type ''{0}'' cannot be iterated in range because it does not have method ''{1}''
type.doesnt.implement.comparable=Type ''{0}'' doesn''t implement Comparable
add.method=Add method ''{0}()'' to class ''{1}''
implement.class=Implement {0}
fix.class=Fix class {0}
rtype.cannot.contain.ltype=''{1}'' cannot contain ''{0}''
new.instance.of.singleton=New instance of class annotated with @groovy.lang.Singleton
replace.new.expression.with.instance.access=Replace with instance access
getter.0.clashes.with.getter.1={0} clashes with {1}
unused.0=Unused {0}
remove.0=Remove {0}
replace.postfix.0.with.prefix.0=Replace postfix {0} with prefix {0}
replace.0.with.1=Replace {0} with binary {1}
category.method.0.cannot.be.applied.to.1=Category method ''{0}'' cannot be applied to ''{1}''
local.var.0.is.reassigned=Local variable ''{0}'' is reassigned
anonymous.class=anonymous class
closure=closure
other.scope=Other scope
method.may.be.static=Method may be static
method.may.be.static.option.ignore.trait.methods=Ignore trait methods
method.may.be.static.only.private.or.final.option=Only check final or private methods
method.may.be.static.ignore.empty.method.option=Ignore empty methods
ignore.boolean.expressions=Ignore unassigned variables in boolean checks
highlight.if.groovy.object.methods.overridden=Highlight references from class overriding invokeMethod(), getProperty(), or setProperty()
highlight.if.missing.methods.declared=Highlight references from class declaring missingMethod() or missingProperty()
gr.package.inspection.check.scripts=Check scripts
java.style.property.access=Java-style accessor invocation
type.customizer.is.not.marked.as.a.resource.file=Type customizer script is not marked as compiler resources
add.to.resources=Add to resources
add.type.customizer.to.resources=Add type customizer script to resources
target.0.does.not.exist=Target ''{0}'' does not exist
target.annotation.is.unused=@Target is unused
change.lvalue.type=Change variable ''{0}'' type to ''{1}''
replace.qualified.name.with.import=Replace qualified name with import
comments.count.as.content=Comments count as content
ignore.when.catch.parameter.is.named.ignore.or.ignored=Ignore when catch parameter is named ignore or ignored
no.applicable.signature.found=No applicable signature found
expected.type.0=Expected ''{0}'', found ''{1}''
declare.explicit.implementations.of.trait=Declare explicit implementations of trait
unnecessary.modifier.description=Modifier ''{0}'' is not necessary
unnecessary.modifier.remove=Remove unnecessary ''{0}''
unnecessary.def.explicitly.typed.only=Only report in explicitly typed declarations
unnecessary.alias.fix=Remove unnecessary alias
unnecessary.alias.description=Alias is unnecessary
unnecessary.semicolon.description=Semicolon is unnecessary
unnecessary.semicolon.fix=Remove semicolon
