# suppress inspection "UnusedProperty" for whole file
demorgans.law.intention.family.name=DeMorgan's law
demorgans.intention.name1=Replace '\\&\\&' with '||'
demorgans.intention.name2=Replace '||' with '\\&\\&'
merge.if.and.intention.name=Merge if's
merge.if.and.intention.family.name=Merge nested ifs to and-ed condition
make.closure.call.explicit.intention.name=Make closure call explicit
make.closure.call.explicit.intention.family.name=Make closure call explicit
make.closure.call.implicit.intention.name=Make closure call implicit
make.closure.call.implicit.intention.family.name=Make closure call implicit
flip.conjunction.intention.family.name=Flip conjunction operands
flip.comparison.intention.family.name=Flip comparison operands
negate.comparison.intention.family.name=Negate comparison
expand.boolean.intention.name=Expand boolean use to if-else
expand.boolean.intention.family.name=Expand boolean
for.to.each.intention.name=Replace with ".each"
for.to.each.intention.family.name=Replace for-in with each
each.to.for.intention.name=Replace with for-in
each.to.for.intention.family.name=Replace each with for-in
convert.integer.to.hex.intention.name=Convert to hex
convert.integer.to.hex.intention.family.name=Convert to Hexadecimal
convert.integer.to.decimal.intention.name=Convert to decimal
convert.integer.to.decimal.intention.family.name=Convert to Decimal
convert.integer.to.octal.intention.name=Convert to octal
convert.integer.to.octal.intention.family.name=Convert to Octal
convert.integer.to.binary.intention.name=Convert to binary
convert.integer.to.binary.intention.family.name=Convert to Binary
flip.comparison.intention.name=Flip ''{0}'' to ''{1}''
negate.comparison.intention.name=Negate ''{0}'' to ''{1}''
flip.smth.intention.name=Flip ''{0}''
merge.else.if.intention.name=Merge else-if
merge.else.if.intention.family.name=Merge else if
split.else.if.intention.name=Split else-if
split.else.if.intention.family.name=Split else if
split.if.intention.name=Split into 2 'if' statements
split.if.intention.family.name=Split into 2 'if' statements
invert.if.intention.name=Invert 'if' condition
invert.if.intention.family.name=Invert 'if' condition
replace.ternary.with.if.else.intention.name=Replace ''?:'' with if else
replace.ternary.with.if.else.intention.family.name=Replace ''?:'' with if else
simplify.ternary.operator.intention.name=Simplify conditional expression
simplify.ternary.operator.intention.family.name=Simplify conditional expression
flip.conditional.intention.name=Flip ''?:''
flip.conditional.intention.family.name=Flip conditional
change.to.end.of.line.comment.intention.name=Replace with end-of-line comment
change.to.end.of.line.comment.intention.family.name=Replace with end of line comment
change.to.c.style.comment.intention.name=Replace with C-style comment
change.to.c.style.comment.intention.family.name=Replace with C-style comment
convert.string.to.g.string.intention.name=Convert to GString
convert.string.to.g.string.intention.family.name=Convert String to GString
convert.g.string.to.string.intention.name=Convert to String
convert.g.string.to.string.intention.family.name=Convert GString to String
indexing.method.conversion.intention.name=Convert to [] form
indexing.method.conversion.intention.family.name=Convert indexing method to [] form
indexed.expression.conversion.intention.name=Convert [] access to method form
indexed.expression.conversion.intention.family.name=Convert [] form to index method
remove.parentheses.from.method.call.intention.family.name=Remove unnecessary parentheses from method call
remove.parentheses.from.method.call.intention.name=Remove unnecessary parentheses
replace.abstract.class.instance.by.map.intention.family.name=Change anonymous class to dynamic instantiation
replace.abstract.class.instance.by.map.intention.name=Change to dynamic instantiation
remove.unnecessary.braces.in.g.string.intention.family.name=Remove unnecessary braces in GString
remove.unnecessary.braces.in.g.string.intention.name=Remove unnecessary braces in GString
convert.concatenation.to.gstring.intention.family.name=Convert string concatenation to GString
convert.concatenation.to.gstring.intention.name=Convert to GString
convert.closure.to.method.intention.name=Convert to method
convert.closure.to.method.intention.family.name=Convert property to method
convert.method.to.closure.intention.name=Convert to closure property
convert.method.to.closure.intention.family.name=Convert method to property of closure type
convert.string.to.multiline.intention.name=Convert to multiline
convert.string.to.multiline.intention.family.name=Convert literal to multiline literal
convert.junit.assertion.to.assert.statement.intention.name=Convert JUnit assertion to assert statement
convert.junit.assertion.to.assert.statement.intention.family.name=Convert JUnit assertion to assert statement
convert.parameter.to.map.entry.intention.family.name=Convert method or closure parameters to map entries
convert.parameter.to.map.entry.intention.name=Convert parameter to map entry
convert.java.style.array.intention.name=Convert java-style array creation
convert.java.style.array.intention.family.name=Convert java-style array creation to groovy syntax
create.parameter.for.field.intention.name = Add constructor parameter for field
create.parameter.for.field.intention.family.name = Add constructor parameter for field
convert.map.to.class.intention.name=Convert to class
convert.map.to.class.intention.family.name=Convert groovy native map to class instances
rename.file.with.class.intention.name=Rename file to class name
rename.file.with.class.intention.family.name=Rename file to corresponding class name
rename.class.to.file.name.intention.family.name=Rename class to corresponding file name
rename.class.to.0=Rename class to ''{0}''
move.class.to.new.file.intention.name=Move to separate file
move.class.to.new.file.intention.family.name=Move class to separate file
import.static.intention.name=Add static import
import.static.intention.family.name=Add single-member static import
import.on.demand.intention.name=Add import on demand
import.on.demand.intention.family.name=Add on demand static import
replace.qualified.reference.with.import.intention.name=Replace with import
replace.qualified.reference.with.import.intention.family.name=Replace qualified reference with import
convert.to.geese.braces.intention.name=Format braces on one line
convert.to.geese.braces.intention.family.name=Format closing closure braces on one line
convert.from.geese.braces.intention.name=Format braces on separate lines
convert.from.geese.braces.intention.family.name=Format braces on separate lines
split.into.declaration.and.assignment=Split into declaration and assignment
split.into.separate.declaration=Split into separate declaration
gr.split.declaration.intention.family.name=Split variable declaration
gr.convert.string.to.char.intention.name=Cast to char
gr.convert.string.to.char.intention.family.name=Cast to char
gr.set.strong.type.intention.name=Declare explicit type
gr.set.strong.type.intention.family.name=Declare explicit type
remove.unnecessary.escape.characters.intention.name=Remove unnecessary escape characters
remove.unnecessary.escape.characters.intention.family.name=Remove unnecessary escape characters
gr.break.string.on.line.breaks.intention.name=Break string on '\\n'
gr.break.string.on.line.breaks.intention.family.name=Break string on '\\n'
gr.create.missing.switch.branches.intention.name=Create missing 'switch' branches
gr.create.missing.switch.branches.intention.family.name=Create missing 'switch' branches
remove.redundant.class.property.intention.name=Remove redundant .class
remove.redundant.class.property.intention.family.name=Remove redundant .class
convert.simple.getter.to.property.intention.name=Convert to property
convert.simple.getter.to.property.intention.family.name=Convert simple getter to property
remove.unnecessary.return.intention.name=Remove 'return' keyword
remove.unnecessary.return.intention.family.name=Remove unnecessary 'return' keyword
gr.alias.import.intention.name=Alias import
gr.alias.import.intention.family.name=Alias import statically imported member
gr.copy.string.concatenation.content.intention.name=Copy string concatenation text to clipboard
gr.copy.string.concatenation.content.intention.family.name=Copy string concatenation text to clipboard
gr.make.member.private.intention.name=Make 'private'
gr.make.member.private.intention.family.name=Make 'private'
gr.make.member.public.intention.name=Make 'public'
gr.make.member.public.intention.family.name=Make 'public'
gr.make.member.protected.intention.name=Make 'protected'
gr.make.member.protected.intention.family.name=Make 'protected'
convert.multiline.string.to.single.line.intention.name=Convert to single line literal
convert.multiline.string.to.single.line.intention.family.name=Convert multiline string to single-line
gr.convert.type.cast.to.safe.cast.intention.name=Convert to safe cast
gr.convert.type.cast.to.safe.cast.intention.family.name=Convert cast expression to safe cast expression
gr.introduce.local.variable.intention.name=Introduce local variable
gr.introduce.local.variable.intention.family.name=Introduce local variable
flip.if.intention.name=Flip if statements
flip.if.intention.family.name=Flip if statements
replace.if.with.ternary.intention.name=Replace with ?:
replace.if.with.ternary.intention.family.name=Replace if-statement with ternary operator
gr.redundant.else.intention.name=Remove redundant 'else' keyword
gr.redundant.else.intention.family.name=Remove redundant 'else' keyword
convert.to.regex.intention.name=Convert to regular expression
convert.to.regex.intention.family.name=Convert string literal to regular expression
convert.to.dollar.slash.regex.intention.name=Convert to dollar-slashy string
convert.to.dollar.slash.regex.intention.family.name=Convert string literal to dollar-slashy string
gr.remove.explicit.type.declaration.intention.name=Remove explicit type
gr.remove.explicit.type.declaration.intention.family.name=Remove explicit type declaration
gr.sort.map.keys.intention.name=Sort alphabetically
gr.sort.map.keys.intention.family.name=Sort map entries alphabetically
gr.remove.annotation.intention.name=Remove
gr.remove.annotation.intention.family.name=Remove annotation
add.annotation.value.intention.name=Add 'value='
add.annotation.value.intention.family.name=Add 'value='
