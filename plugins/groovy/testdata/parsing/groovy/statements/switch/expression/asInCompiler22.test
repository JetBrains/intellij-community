def result = switch (s) {
    case 100:
        int x = 0
        int y = 0
        for (int i = 100; i < 110; i++) {
            if (i < 103) continue
            x++
            if (i >= 107) break
            y++
        }
        yield "$x, $y"
};
-----
Groovy script
  Variable definitions
    Modifiers
      PsiElement(def)('def')
    PsiWhiteSpace(' ')
    Variable
      PsiElement(identifier)('result')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      Switch expression
        PsiElement(switch)('switch')
        PsiWhiteSpace(' ')
        PsiElement(()('(')
        Reference expression
          PsiElement(identifier)('s')
        PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        Case section
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Expression list
            Literal
              PsiElement(Integer)('100')
          PsiElement(:)(':')
          PsiElement(new line)('\n        ')
          Variable definitions
            Modifiers
              <empty list>
            Built in type
              PsiElement(int)('int')
            PsiWhiteSpace(' ')
            Variable
              PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              Literal
                PsiElement(Integer)('0')
          PsiElement(new line)('\n        ')
          Variable definitions
            Modifiers
              <empty list>
            Built in type
              PsiElement(int)('int')
            PsiWhiteSpace(' ')
            Variable
              PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              Literal
                PsiElement(Integer)('0')
          PsiElement(new line)('\n        ')
          For statement
            PsiElement(for)('for')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            Traditional FOR clause
              Variable definitions
                Modifiers
                  <empty list>
                Built in type
                  PsiElement(int)('int')
                PsiWhiteSpace(' ')
                Variable
                  PsiElement(identifier)('i')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  Literal
                    PsiElement(Integer)('100')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              Relational expression
                Reference expression
                  PsiElement(identifier)('i')
                PsiWhiteSpace(' ')
                PsiElement(<)('<')
                PsiWhiteSpace(' ')
                Literal
                  PsiElement(Integer)('110')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              Expression list
                Unary expression
                  Reference expression
                    PsiElement(identifier)('i')
                  PsiElement(++)('++')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            Block statement
              Open block
                PsiElement({)('{')
                PsiWhiteSpace('\n            ')
                IF statement
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  Relational expression
                    Reference expression
                      PsiElement(identifier)('i')
                    PsiWhiteSpace(' ')
                    PsiElement(<)('<')
                    PsiWhiteSpace(' ')
                    Literal
                      PsiElement(Integer)('103')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CONTINUE statement
                    PsiElement(continue)('continue')
                PsiElement(new line)('\n            ')
                Unary expression
                  Reference expression
                    PsiElement(identifier)('x')
                  PsiElement(++)('++')
                PsiElement(new line)('\n            ')
                IF statement
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  Relational expression
                    Reference expression
                      PsiElement(identifier)('i')
                    PsiWhiteSpace(' ')
                    PsiElement(>=)('>=')
                    PsiWhiteSpace(' ')
                    Literal
                      PsiElement(Integer)('107')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  BREAK statement
                    PsiElement(break)('break')
                PsiElement(new line)('\n            ')
                Unary expression
                  Reference expression
                    PsiElement(identifier)('y')
                  PsiElement(++)('++')
                PsiElement(new line)('\n        ')
                PsiElement(})('}')
          PsiElement(new line)('\n        ')
          YIELD statement
            PsiElement(yield)('yield')
            PsiWhiteSpace(' ')
            Compound Gstring
              PsiElement(Gstring begin)('"')
              GString injection
                PsiElement($)('$')
                Reference expression
                  PsiElement(identifier)('x')
              GrStringContentImpl(STRING_CONTENT)
                PsiElement(Gstring content)(', ')
              GString injection
                PsiElement($)('$')
                Reference expression
                  PsiElement(identifier)('y')
              PsiElement(Gstring end)('"')
          PsiElement(new line)('\n')
        PsiElement(})('}')
  PsiElement(;)(';')