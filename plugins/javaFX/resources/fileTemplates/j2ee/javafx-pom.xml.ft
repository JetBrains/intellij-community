<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>${context.group}</groupId>
  <artifactId>${context.artifact}</artifactId>
  <version>${context.version}</version>
  <name>${context.moduleName}</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    #if ($context.testRunnerId == "junit")<junit.version>${context.getVersion("org.junit.jupiter", "junit-jupiter-api")}</junit.version>#end
    #if ($context.hasLanguage("kotlin"))<kotlin.version>${context.getVersion("org.jetbrains.kotlin", "kotlin-maven-plugin")}</kotlin.version>#end
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${context.getProperty("javafx.version")}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>${context.getProperty("javafx.version")}</version>
    </dependency>
    #if ($context.hasLibrary("tilesfx"))<dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-web</artifactId>
      <version>${context.getProperty("javafx.version")}</version>
    </dependency>#end
    #if ($context.hasLibrary("fxgl"))<dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-media</artifactId>
      <version>${context.getProperty("javafx.version")}</version>
    </dependency>#end
    #if ($context.hasLibrary("controlsfx"))<dependency>
      <groupId>org.controlsfx</groupId>
      <artifactId>controlsfx</artifactId>
      <version>${context.getVersion("org.controlsfx", "controlsfx")}</version>
    </dependency>#end
    #if ($context.hasLibrary("formsfx"))<dependency>
      <groupId>com.dlsc.formsfx</groupId>
      <artifactId>formsfx-core</artifactId>
      <version>${context.getVersion("com.dlsc.formsfx", "formsfx-core")}</version>
      <exclusions>
        <exclusion>
          <groupId>org.openjfx</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>#end
    #if ($context.hasLibrary("validatorfx"))<dependency>
      <groupId>net.synedra</groupId>
      <artifactId>validatorfx</artifactId>
      <version>${context.getVersion("net.synedra", "validatorfx")}</version>
      <exclusions>
        <exclusion>
          <groupId>org.openjfx</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>#end
    #if ($context.hasLibrary("ikonli"))<dependency>
      <groupId>org.kordamp.ikonli</groupId>
      <artifactId>ikonli-javafx</artifactId>
      <version>${context.getVersion("org.kordamp.ikonli", "ikonli-javafx")}</version>
    </dependency>#end
    #if ($context.hasLibrary("bootstrapfx"))<dependency>
      <groupId>org.kordamp.bootstrapfx</groupId>
      <artifactId>bootstrapfx-core</artifactId>
      <version>${context.getVersion("org.kordamp.bootstrapfx", "bootstrapfx-core")}</version>
    </dependency>#end
    #if ($context.hasLibrary("tilesfx"))<dependency>
      <groupId>eu.hansolo</groupId>
      <artifactId>tilesfx</artifactId>
      <version>${context.getVersion("eu.hansolo", "tilesfx")}</version>
      <exclusions>
        <exclusion>
          <groupId>org.openjfx</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>#end
    #if ($context.hasLibrary("fxgl"))<dependency>
      <groupId>com.github.almasb</groupId>
      <artifactId>fxgl</artifactId>
      <version>#if ($context.sdkFeatureVersion >= 17)${context.getBomProperty("fxgl17.version")}#else${context.getBomProperty("fxgl11.version")}#end</version>
      <exclusions>
        <exclusion>
          <groupId>org.openjfx</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>#end

    #if ($context.testRunnerId == "junit")<dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${context.asPlaceholder("junit.version")}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${context.asPlaceholder("junit.version")}</version>
      <scope>test</scope>
    </dependency>#end
    #if ($context.testRunnerId == "testng")<dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>${context.getVersion("org.testng", "testng")}</version>
      <scope>test</scope>
    </dependency>#end
    #if ($context.hasLanguage("groovy"))<dependency>
      <groupId>org.apache.groovy</groupId>
      <artifactId>groovy</artifactId>
      <version>${context.getVersion("org.apache.groovy", "groovy")}</version>
    </dependency>#end
    #if ($context.hasLanguage("kotlin"))<dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jdk8</artifactId>
      <version>${context.asPlaceholder("kotlin.version")}</version>
    </dependency>#end
  </dependencies>

  <build>
    #if ($context.hasLanguage("kotlin"))
    <sourceDirectory>${context.asPlaceholder("project.basedir")}/src/main/kotlin</sourceDirectory>
    <testSourceDirectory>${context.asPlaceholder("project.basedir")}/src/test/kotlin</testSourceDirectory>
    #end
    <plugins>
      #if ($context.hasLanguage("groovy"))<plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${context.getVersion("org.codehaus.gmavenplus", "gmavenplus-plugin")}</version>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>addSources</goal>
              <goal>addTestSources</goal>
              <goal>compile</goal>
              <goal>compileTests</goal>
            </goals>
          </execution>
        </executions>
      </plugin>#end
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${context.getVersion("org.apache.maven.plugins", "maven-compiler-plugin")}</version>
        <configuration>
          <source>${context.sdkFeatureVersion}</source>
          <target>${context.sdkFeatureVersion}</target>
        </configuration>
      #if ($context.hasLanguage("groovy"))
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      #end
      </plugin>
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>${context.getVersion("org.openjfx", "javafx-maven-plugin")}</version>
        <executions>
          <execution>
            <!-- Default configuration for running with: mvn clean javafx:run -->
            <id>default-cli</id>
            <configuration>
              <mainClass>${context.rootPackage}/${context.rootPackage}.HelloApplication</mainClass>
              <launcher>app</launcher>
              <jlinkZipName>app</jlinkZipName>
              <jlinkImageName>app</jlinkImageName>
              <noManPages>true</noManPages>
              <stripDebug>true</stripDebug>
              <noHeaderFiles>true</noHeaderFiles>
            </configuration>
          </execution>
        </executions>
      </plugin>
      #if ($context.hasLanguage("kotlin"))<plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${context.asPlaceholder("kotlin.version")}</version>
        <executions>
          <execution>
            <id>compile</id>
            <phase>process-sources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>test-compile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <jvmTarget>11</jvmTarget>
        </configuration>
      </plugin>#end
    </plugins>
  </build>
</project>