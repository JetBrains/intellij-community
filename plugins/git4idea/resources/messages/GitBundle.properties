git4idea.vcs.name=Git
git4idea.vcs.name.with.mnemonic=_Git
activity.name.rebase=Rebase

abort=Abort
abort.operation.progress.title=Aborting {0} Process
abort.operation.dialog.title=Abort {0}
abort.operation.dialog.msg=Abort {0}{1}?
abort.operation.failed={0} abort failed
abort.operation.succeeded={0} abort succeeded
abort.operation.merge.name=merge
abort.operation.cherry.pick.name=cherry-pick
abort.operation.revert.name=revert
abort.operation.indicator.text=git {0} --abort{1}

add.adding=Adding files...

annotate.cannot.annotate.dir=Cannot annotate directory
annotate.output.lack.data=Output for line {0} lacks the necessary data
annotate.line.mismatch.exception=Adding info for line {0}, but we are expecting it to be for line {1}

apply.changes.would.be.overwritten=Your local changes will be overwritten by {0}.\n\
  Commit your changes or stash them to proceed.
apply.changes.operation.successful={0} successful
apply.changes.nothing.to.do=Nothing to {0}
apply.changes.unresolved.conflicts=There are unresolved conflicts in the working tree. <a href=''{0}''>Resolve them.<a/>
apply.changes.resolving.conflicts.progress.title=Resolving conflicts...
apply.changes.applied.for.commits={0} {1,choice,1#commit|2#{1,number} commits} from {2}
apply.changes.operation.canceled={0} canceled
apply.changes.operation.failed={0} failed
apply.changes.operation.performed.with.conflicts={0} was performed with conflicts
apply.changes.operation.successful.for.commits=However, {0} succeeded for the following {1,choice,1#commit|2#commits}:
apply.changes.skipped={0} {1,choice,1#was|2#were} skipped, because all changes have already been {2}.
apply.changes.everything.applied=All changes from {0} have already been {1}

apply.conflict.dialog.description.label.text=Conflicts during {0} of commit {1} made by {2}{3}

blob.not.found=Blob not found: {0} - {1}

changes.retrieving=Retrieving Changes for Revision {0}

commit.action.commit.and.rebase.text=Commit and Rebase...
commit.action.name=Comm&it
commit.author.diffs=<html>Author differs from default</html>
commit.author=&Author:
commit.partial.merge.message=Partial commit during a {0,choice,1#merge|2#cherry-pick} is not allowed.\n\
  The following files are not included in commit.\n\
  Perform commit with all files included?
commit.partial.merge.title=Partial Merge Commit
common.current.branch.tooltip=The currently checked-out branch.
common.current.branch=Current Branch:
common.git.root.tooltip=Select Git VCS root
common.git.root=Git &Root:
common.no.active.branch=<no active branch>
common.refreshing=Refreshing files
common.suffix.in.one.repository=in {0}
common.suffix.in.several.repositories=in {0} repositories

conflict.resolver.unmerged.files.check.error.notification.description.text=Cannot check the working tree for unmerged files because of an error. {0}

login.dialog.label.login.to.url=Log In to {0}
login.dialog.button.login=Log In
login.dialog.prompt.enter.credentials=Enter credentials:
login.dialog.select.login.way.credentials=Enter credentials
login.dialog.select.login.way.use.helper=Use credentials helper
login.dialog.username.label=Username:
login.dialog.password.label=Password:
login.dialog.error.username.cant.be.empty=Username cannot be empty
login.dialog.error.password.cant.be.empty=Password cannot be empty
login.dialog.login.with.selected.provider=Log In with {0}\u2026

computing.annotation=Computing annotation for {0}
diff.find.error=Finding revision for diff: {0}
error.dialog.title=Error
error.list.title={0} Error:
error.occurred.during=Error Occurred During ''{0}''
errors.message.item=\n   {0}
errors.message=The Git operation ended with multiple errors:{0}

# suppress inspection "UnusedProperty": used by 3-party plugins
fetch.action.name=Fetch
fetch.pruned.obsolete.remote.references=Pruned obsolete remote {0,choice,1#reference|2#references}: {1}

# suppress inspection "UnusedProperty": used by 3-party plugins
find.git.error.title=Error Running Git
# suppress inspection "UnusedProperty": used by 3-party plugins
find.git.success.title=Git executed successfully
# suppress inspection "UnusedProperty": used by 3-party plugins
find.git.unsupported.message=<html><tt>{0}</tt><br>This version is unsupported, and some plugin functionality could fail to work.<br>The minimal supported version is <em>{1}</em>.</html>

local.changes.freeze.message.git.operation.prefix=Git {0}
git.error.exit=The Git process exited with the code {0}
git.running=Running: {0}

init.destination.directory.description=Select directory where the new Git repository will be created.
init.destination.directory.title=Create Git Repository
init.warning.already.under.git=The selected directory <tt>{0}</tt> is already under Git.\n\
  Are you sure that you want to create a new VCS root?
init.warning.title=Git Init
initializing.title=Initializing repository...

mention.in=\u0020in {0}

merge.action.name=Merge
merge.action.operation.failed=Git {0} failed
merge.action.before.update.label=Before update
merge.action.after.update.label=After update
merge.branch.title=Merge Changes
merge.branch.into.current.title=Merge into {0}
merge.branch.loading.branches.progress=Loading unmerged branches\u2026
merge.no.branch.selected.error=The merge branch should be selected.
merge.no.matching.branch.error=There is no matching branch.
merge.commit.message.label=Commit message:
merge.options.modify=Modify options
merge.options.modify.popup.title=Add Merge Options
merge.option.remove=Remove option
merge.option.no.ff=Create a merge commit even if it can be fast-forwarded
merge.option.ff.only=Merge only if it can be fast-forwarded
merge.option.squash=Create a single commit for all merged changes
merge.option.msg=Specify a message for the merge commit
merge.option.no.commit=Do not commit the merge result
merge.option.no.verify=Bypass the pre-merge and commit message hooks
merge.branch.popup.empty.text=No branches
merge.branch.field.placeholder=Specify branch
merge.tool.column.status.deleted=Deleted
merge.tool.column.status.modified=Modified
merge.tool.column.theirs.status=Theirs
merge.tool.column.theirs.with.branch.status=Theirs ({0})
merge.tool.column.yours.status=Yours
merge.tool.column.yours.with.branch.status=Yours ({0})
merging.title=Merging changes to {0}
paths.affected.title=Paths affected in commit {0}
pull.action.name=Pull
pull.button=Pull
pulling.title=Pulling changes from {0}
pull.branch.not.selected.error=The branch to pull from should be selected.
pull.branch.nothing.to.pull=No branches
pull.branch.no.matching.remotes=No remotes
pull.branch.field.placeholder=Specify branch
pull.options.modify.popup.title=Add Pull Options
pull.option.ff.only=Merge only if it can be fast-forwarded
pull.option.no.ff=Create a merge commit even if it can be fast-forwarded
pull.option.squash.commit=Create a single commit for all pulled changes
pull.option.no.commit=Merge, but do not commit the result
pull.option.rebase=Rebase incoming changes on top of the current branch

pull.dialog.title=Pull
pull.dialog.with.branch.title=Pull to {0}
pull.dialog.git.root=Git Root:
pull.dialog.from=From:
pull.dialog.fetch.shortcuts.hint=Press {0} to update branches

operation.action.message=Multiple Git roots have unfinished {0} process, please select root to perform action on.

rebase.abort.and.rollback.dialog.message=Abort rebase in {0} only or also rollback rebase in {1}?
rebase.abort.and.rollback.dialog.no.button.text=Abort Only
rebase.abort.and.rollback.dialog.yes.button.text=Abort and Rollback
rebase.abort.dialog.message=Abort rebase in {0}?
rebase.abort.dialog.ok.button.text=Abort
rebase.abort.dialog.title=Abort Rebase
rebase.abort.notification.failed.title=Abort rebase failed
rebase.abort.notification.successful.message=Abort rebase succeeded
rebase.abort.notification.warning.rollback.failed.message=Rollback failed in {0}:{1}{2}
rebase.abort.notification.warning.rollback.failed.title=Rebase rollback failed
rebase.abort.notification.warning.rollback.failed.with.repo.message=Abort rebase was successful in {0}, but rollback failed in {1}:{2}{3}
rebase.abort.progress.indicator.command.in.repo.title={0} in {1}
rebase.abort.rollback.successful.rebase.dialog.message=Do you want to rollback the successful rebase in {0}?
rebase.abort.rollback.successful.rebase.dialog.ok.button.text=Rollback
rebase.confirmation.dialog.published.commits.button.cancel.text=Cancel
rebase.confirmation.dialog.published.commits.button.rebase.text=Rebase Anyway
rebase.confirmation.dialog.published.commits.message.first=You are trying to rebase some commits already pushed to a protected branch.
rebase.confirmation.dialog.published.commits.message.second=Rebasing them would duplicate commits, which is not recommended and most likely unwanted.
rebase.confirmation.dialog.published.commits.title=Rebasing Published Commit
rebase.conflict.diff.dialog.left.title=Rebasing {0} from {1}
rebase.conflict.diff.dialog.right.simple.title=Already rebased commits
rebase.conflict.diff.dialog.right.with.branch.title=Already rebased commits and commits from {0}
rebase.couldnt.resolve.file=Couldn''t resolve {0}
rebase.dialog.error.upstream.not.selected=Select an upstream
rebase.dialog.error.base.not.selected=Select a new base
rebase.dialog.error.branch.or.tag.not.exist=There is no such branch or tag
rebase.dialog.error.branch.not.selected=Select a branch to switch to
rebase.dialog.error.branch.invalid=Branch ''{0}'' does not exist
rebase.dialog.error.rebase.in.progress=Interactive rebase is already in progress for this Git root
rebase.dialog.root.invalid.label.text=(invalid)
rebase.dialog.progress.loading.tags=Loading tags\u2026
rebase.dialog.help=Show Git rebase help
rebase.dialog.start.rebase=Rebase
rebase.dialog.title=Rebase
rebase.dialog.target=branch or hash
rebase.dialog.new.base=new base (branch or hash)
rebase.dialog.old.base=old base (branch or hash)
rebase.dialog.branch.field=source branch
rebase.options.modify.dialog.title=Add Rebase Options
rebase.option.onto=Specify a new base for the rebased commits
rebase.option.interactive=Edit commits before rebasing
rebase.option.rebase.merges=Recreate commits topology
rebase.option.switch.to.branch=Select another branch to rebase
rebase.option.keep.empty=Do not remove empty commits during rebase
rebase.option.root=Rebase all commits in the branch
rebase.help.popup.ad.text=Press Space to open external link
rebase.help.rebase.branch=Rebase a branch based on one branch to another:
rebase.help.link=git rebase on git-scm.com
rebase.entry.action.name.drop=Drop
rebase.entry.action.name.edit=Edit
rebase.entry.action.name.fixup=Fixup
rebase.entry.action.name.pick=Pick
rebase.entry.action.name.reword=Reword
rebase.entry.action.name.squash=Squash
rebase.entry.action.name.unknown=Unknown
rebase.git.operation.name=Rebase
rebase.interactive.dialog.discard.modifications.cancel=Cancel Rebase
rebase.interactive.dialog.discard.modifications.continue=Continue Rebasing
rebase.interactive.dialog.discard.modifications.discard=Discard
rebase.interactive.dialog.discard.modifications.message=Discard changes and cancel rebase?
rebase.interactive.dialog.git.commands.column.action=Action
rebase.interactive.dialog.git.commands.column.hash=Hash
rebase.interactive.dialog.git.commands.column.subject=Subject
rebase.interactive.dialog.git.commands=Git Commands
rebase.interactive.dialog.reset.link.text=Reset
rebase.interactive.dialog.reword.hint.text=Press {0} to apply changes
rebase.interactive.dialog.start.rebase=Start Rebasing
rebase.interactive.dialog.stop.to.edit.text=Stop to Edit
rebase.interactive.dialog.title=Rebasing Commits
rebase.interactive.dialog.view.git.commands.text=View Git Commands
rebase.interactive.edit.commit.message.dialog.title=Git Commit Message
rebase.interactive.edit.commit.message.ok.action.title=Continue Rebasing
rebase.interactive.noop.dialog.text=There are no commits to rebase because the current branch is directly below the base branch, or they point to the same commit (the 'noop' situation).\n Do you want to continue (this will reset the current branch to the base branch)?
rebase.interactive.noop.dialog.title=Git Rebase
rebase.interactive.unstructured.editor.dialog.root.label=Git Root: {0}
rebase.log.action.operation.rebase.name=rebase
rebase.log.action.operation.reword.name=reword
rebase.log.commit.editing.action.commit.not.in.head.error.text=The commit is not in the current branch
rebase.log.commit.editing.action.commit.pushed.to.protected.branch.error.text=The commit is already pushed to protected branch ''{0}''
rebase.log.commit.editing.action.disabled.parents.description=Selected commit has {0} parents
rebase.log.multiple.commit.editing.action.disabled.external.repository.description=Selected {0,choice,1#commit|2#commits} {0,choice,1#is|2#are} from external repository
rebase.log.multiple.commit.editing.action.disabled.multiple.repository.description=Selected {0,choice,1#commit|2#commits} {0,choice,1#is|2#are} from different repositories
rebase.log.commit.editing.action.progress.containing.branches.title=Searching for branches containing the selected commit...
rebase.log.commit.editing.action.prohibit.state.grafting=Can''t {0} during cherry-pick
rebase.log.commit.editing.action.prohibit.state.merging=Can''t {0} during merge
rebase.log.commit.editing.action.prohibit.state.rebasing=Can''t {0} during rebase
rebase.log.commit.editing.action.prohibit.state.reverting=Can''t {0} during revert
rebase.log.commit.editing.action.prohibit.state=Can''t {0}
rebase.log.undo.impossible.pushed.to.protected.branch.notification.text=Commits from current branch have already been pushed to protected branch {0}
rebase.log.drop.action.custom.text=Drop {0,choice,1#Commit|2#Commits}
rebase.log.drop.action.failure.title=Couldn't Drop Commits
rebase.log.drop.progress.indicator.title=Dropping {0,choice,1#commit|2#commits}...
rebase.log.drop.success.notification.title={0,choice,1#Commit|2#Commits} Dropped
rebase.log.drop.undo.failed.title=Undo Drop Failed
rebase.log.drop.undo.impossible.title=Can't Undo Drop
rebase.log.drop.undo.progress.title=Undoing drop...
rebase.log.multiple.commit.editing.action.cant.find.head=Could not find HEAD branch in repository which contains selected {0,choice,1#commit|2#commits}
rebase.log.multiple.commit.editing.action.progress.indicator.action.possibility.check=Checking if it is allowed to edit selected commits...
rebase.log.multiple.commit.editing.action.specific.commit.not.in.head=Commit {0} is not in the current branch
rebase.log.multiple.commit.editing.action.specific.commit.root.or.merge=Commit {0} has {1} parents
rebase.log.create.fixup.commit.action.failure.title=Can't Create Fixup Commit
rebase.log.create.squash.commit.action.failure.title=Can't Create Squash Commit
rebase.log.interactive.action.failure.title=Cannot Start Rebase
rebase.log.reword.action.failure.title=Couldn't Edit Commit Message
rebase.log.action.loading.commit.message.failed.message=Couldn''t load changes of {0,choice,1#commit|2#commits}
rebase.log.reword.action.notification.successful.title=Commit Message Changed
rebase.log.reword.action.notification.undo.failed.title=Undo Commit Message Edit Failed
rebase.log.reword.action.notification.undo.not.allowed.repository.changed.message=Repository has already been changed
rebase.log.reword.action.notification.undo.not.allowed.title=Can't Undo Commit Message Edit
rebase.log.action.progress.indicator.loading.commit.message.title=Loading {0,choice,1#commit|2#commits} details...
rebase.log.squash.action.failure.title=Couldn't Squash Commits
rebase.log.squash.new.message.dialog.label=Edit message for squashed commit
rebase.log.squash.new.message.dialog.title=Squashed Commit Message
rebase.log.squash.progress.indicator.title=Squashing...
rebase.log.squash.success.notification.title=Commits Squashed
rebase.log.squash.undo.failed.title=Undo Squash Failed
rebase.log.squash.undo.impossible.title=Can't Undo Squash
rebase.log.squash.undo.progress.title=Undoing squash...
rebase.log.reword.action.progress.indicator.title=Rewording...
rebase.log.reword.action.progress.indicator.undo.title=Undoing reword...
rebase.log.reword.dialog.description.label=Edit message for commit {0} by {1}
rebase.log.reword.dialog.failed.pushed.to.protected.message=Can''t edit selected {0,choice,1#commit|2#commits}: commit {1} was pushed to protected branch ''{2}''
rebase.log.reword.dialog.failed.repository.changed.message=Can''t edit selected {0,choice,1#commit|2#commits}: repository state was changed
rebase.log.reword.dialog.title=Edit Commit Message
rebase.notification.action.abort.text=Abort
rebase.notification.action.continue.text=Continue
rebase.notification.action.retry.text=Retry
rebase.notification.action.view.shelf.text=View Shelf...
rebase.notification.action.view.stash.text=View Stash...
rebase.notification.conflict.title=Rebase stopped due to conflicts
rebase.notification.editing.title=Rebase stopped for editing
rebase.notification.failed.continue.title=Continue rebase failed
rebase.notification.failed.rebase.title=Rebase failed
rebase.notification.failed.shelf.text=Couldn't shelve local uncommitted changes:
rebase.notification.failed.stash.text=Couldn't stash local uncommitted changes:
rebase.notification.no.rebase.in.progress.abort.title=Can't abort rebase
rebase.notification.no.rebase.in.progress.continue.title=Can't continue rebase
rebase.notification.no.rebase.in.progress.message=No rebase in progress
rebase.notification.not.allowed.detached.message.first=You are in the detached HEAD state in {0}.
rebase.notification.not.allowed.detached.message.second=Rebase is not possible.
rebase.notification.not.allowed.empty.repository.message=Repository {0} is empty.
rebase.notification.not.allowed.grafting.message.first=There is an unfinished cherry-pick process in {0}.
rebase.notification.not.allowed.grafting.message.second=You should finish it before starting a rebase.
rebase.notification.not.allowed.merging.message.first=There is an unfinished merge process in {0}.
rebase.notification.not.allowed.merging.message.second=You should complete the merge before starting a rebase.
rebase.notification.not.allowed.message=Rebase is not possible in {0}.
rebase.notification.not.allowed.rebasing.message.first=There is an unfinished rebase process in {0}.
rebase.notification.not.allowed.rebasing.message.second=You should complete it before starting another rebase.
rebase.notification.not.allowed.reverting.message.first=There is an unfinished revert process in {0}.
rebase.notification.not.allowed.reverting.message.second=You should finish it before starting a rebase.
rebase.notification.not.allowed.title=Rebase not allowed
rebase.notification.not.started.title=Rebase not started
rebase.notification.saved.local.changes.part.shelf.text=Local changes were shelved before rebase.
rebase.notification.saved.local.changes.part.stash.text=Local changes were stashed before rebase.
rebase.notification.successful.rebased.checkout.message=Checked out{0,choice,0#|1# {1}} and rebased it{2,choice,0#|1# on {3}}
rebase.notification.successful.rebased.message=Rebased{0,choice,0#|1# {1}}{2,choice,0#|1# on {3}}
rebase.notification.successful.title=Rebase successful
rebase.notification.all.conflicts.resolved.title=Resolve Conflicts
rebase.notification.all.conflicts.resolved.text=All conflicts have been resolved. Do you want to continue rebase?
rebase.notification.all.conflicts.resolved.continue.rebase.action.text=Con&tinue Rebase
rebase.progress.indicator.aborting.title=Aborting rebase process...
rebase.progress.indicator.conflicts.collecting.title=Collecting conflicts to resolve...
rebase.progress.indicator.continue.title=Continuing rebase process...
rebase.progress.indicator.preparing.title=Preparing to rebase...
rebase.progress.indicator.retry.title=Retrying rebase process...
rebase.progress.indicator.title=Rebasing...
rebase.simple.editor.dialog.title=Git Editor
rebase.update.project.abort.task.title=Aborting rebase...
rebase.update.project.conflict.error.notification.description=Then you may <b>continue rebase</b>. <br/> You also may <b>abort rebase</b> to restore the original branch and stop rebasing.
rebase.update.project.conflict.error.notification.title=Can't continue rebase
rebase.update.project.conflict.merge.description.label=Merge conflicts detected. Resolve them before continuing rebase.
rebase.update.project.notification.abort.cancel.message=Abort rebase cancelled
rebase.update.project.notification.abort.error.message=Error aborting rebase
rebase.update.project.notification.abort.success.message=Rebase aborted
rebase.update.project.notification.failed.message=Couldn''t proceed with rebase. {0}
rebase.update.project.notification.failed.title=Rebase Error
rebase.using.log.couldnt.start.error=Cannot perform the rebase because the IDE generated an invalid 'git-rebase-todo' file. Do you want to retry the rebase using Git native file generation?
merge.update.project.generic.error.title=Can't complete update
merge.update.project.conflict.merge.description.label=Merge conflicts detected. Resolve them before continuing update.

remove.removing=Removing files...
repository.action.missing.roots.misconfigured=None of configured Git roots are under Git. The configured directory must have ".git" directory in it.
repository.action.missing.roots.title=No Git Roots
repository.action.missing.roots.unconfigured.message=No Git roots are configured for the project.
repository.not.found.error=Can''t find configured git repository for {0}
reset.action.name=Reset Head ...
reset.commit.invalid=The specified commit expression did not pass validation.
reset.commit.label=To &Commit:
reset.commit.tooltip=The commit that will become the current HEAD\n as result of reset operation.
reset.title=Reset Head
reset.type.tooltip=<html>The reset type (see also <code>git reset</code> man page):<ul><li><b>Mixed</b> resets index but not working tree</li><li><b>Soft</b> leaves index and working tree, just moves head pointer</li><li><b>Hard</b> resets index and working tree.<em>Changes in the working tree will be lost</em></li></ul></html>
reset.type=Reset &Type:
reset.validate=&Validate
resetting.title=Resetting HEAD...
restore.conflict.dialog.description.label.text=Uncommitted changes that were saved before {0} have conflicts with files from {1}
restore.conflict.diff.dialog.left.shelf.title=Uncommitted changes from the shelf
restore.conflict.diff.dialog.left.stash.title=Uncommitted changes from the stash
restore.conflict.diff.dialog.right.title=Changes from {0}
preserving.process.local.changes.not.restored.error.title=Local changes were not restored
restore.notification.failed.shelf.message=Before update your uncommitted changes were saved to <a href='saver'>shelf</a>.<br/>Update is not complete, you have unresolved merges in your working tree<br/>Resolve conflicts, complete update and restore changes manually.
restore.notification.failed.stash.message=Before update your uncommitted changes were saved to <a href='saver'>stash</a>.<br/>Update is not complete, you have unresolved merges in your working tree<br/>Resolve conflicts, complete update and restore changes manually.
restore.notification.failed.title=Local changes were not restored

revision.load.contents=Load Revision Contents

reference.validating.progress.indicator.title=Validating revision...

save.load.conflict.dialog.diff.left.title=Your uncommitted changes
save.load.conflict.dialog.diff.right.title=Changes from remote
save.notification.failed.shelf.text=Tried to save uncommitted changes in shelf before {0}, but failed with an error.<br/>{1}
save.notification.failed.stash.text=Tried to save uncommitted changes in stash before {0}, but failed with an error.<br/>{1}
save.notification.failed.title=Couldn't save uncommitted changes

smart.operation.dialog.north.panel.label.shelf.text=<html>Your local changes to the following files would be overwritten by {0}.<br/> {1} can shelve the changes, {0} and unshelve them after that.</html>
smart.operation.dialog.north.panel.label.stash.text=<html>Your local changes to the following files would be overwritten by {0}.<br/> {1} can stash the changes, {0} and unstash them after that.</html>
smart.operation.dialog.ok.action.shelf.description=Shelve local changes, {0}, unshelve
smart.operation.dialog.ok.action.stash.description=Stash local changes, {0}, unstash
smart.operation.dialog.operation.name.and.overwrite.local.changes={0} and overwrite local changes
smart.operation.dialog.git.operation.name.problem=Git {0} Problem
smart.operation.dialog.smart.operation.name=Smart {0}
smart.operation.dialog.don.t.operation.name=Don''t {0}
ssh.ask.passphrase.title=SSH Key Passphrase
ssh.ask.passphrase.message=Password for the SSH key "{0}":
ssh.keyboard.interactive.title=SSH Keyboard Interactive
ssh.password.message=Password for user {0}:
ssh.password.title=SSH Password Login

stash.action.name=Stash
stash.button=Create Stash
stash.error.can.not.stash.changes.now=Cannot Stash Changes Now
stash.keep.index.tooltip=If this checkbox is selected, indexed changes are kept in the index.
stash.keep.index=Keep &index
stash.message.tooltip=Enter stash message here.
stash.message=&Message:
stash.progress.indicator.title=Stashing changes from ''{0}''...
stash.title=Stash
stash.unstash.conflict.dialog.description.label.text=Uncommitted changes that were stashed before update have conflicts with updated files.
stash.unstash.progress.indicator.title=Popping changes to ''{0}''...
stash.unstash.unresolved.conflict.warning.notification.message=Your uncommitted changes were saved to <a href='saver'>stash</a>.<br/>Unstash is not complete, you have unresolved merges in your working tree<br/><a href='resolve'>Resolve</a> conflicts and drop the stash.
stash.unstash.unresolved.conflict.warning.notification.title=Local changes were restored with conflicts
stash.error=Failed to stash {0}
# suppress inspection "UnusedProperty" - used in third-party plugins
stashing.title=Stashing Changes...
stashing.progress.title=Stashing changes...
stash.editor.diff.preview.title=Stash: {0}

stash.tab.name=Stash
stash.empty.text=No stashes found
action.Git.Stash.Pop.text=Pop
action.Git.Stash.Pop.description=Pop selected stash
action.Git.Stash.Apply.text=Apply
action.Git.Stash.Apply.description=Apply selected stash
action.Git.Stash.UnstashAs.text=Unstash...
action.Git.Stash.UnstashAs.description=Pop or apply selected stash as new branch with or without index
action.Git.Stash.Drop.text=Drop
action.Git.Stash.Drop.description=Drop selected stash
action.Git.Show.Stash.text=Show Git Stash
action.Git.Show.Stash.description=Show Git Stash Tool Window Tab
action.Git.Stash.Refresh.text=Refresh Stashes
action.Git.Stash.Refresh.description=Refresh the List of Stashes

stash.unstash.changes.in.root.dialog.title=Unstash Changes in {0}
stash.unstash.changes.current.branch.label=Current branch:

tag.action.name=Tag
tag.button=Create Tag
tag.commit.label=&Commit:
tag.commit.tooltip=Enter name of commit or object to tag or leave blank to use HEAD.
tag.error.creating.message.file.message=Unable to create message file: {0}
tag.error.invalid.commit=The commit or object name is invalid.
tag.error.tag.exists=The tag with the same name exists.
tag.force.tooltip=Force creation of the tag even if another tag with such name already exists.
tag.force=&Force
tag.getting.existing.tags=Getting Existing Tags...
tag.message.label=&Message:
tag.message.tooltip=If the message is not empty, an annotated tag is created.
tag.name.label=Tag &Name:
tag.name.tooltip=Enter the new tag name here.
tag.title=Tag
tag.validate.tooltip=Click this button to validate the commit to be tagged
tag.validate=&Validate
tag.progress.title=Tagging...

unstash.action.name=Unstash
unstash.branch.label=As new &branch:
unstash.branch.tooltip=If non-empty name is entered, the stash is checked out as a new branch.
unstash.button.apply=Apply Stash
unstash.button.branch=Branch
unstash.button.pop=Pop Stash
unstash.clear.tooltip=Delete all stashes in the repository.
unstash.clear=&Clear
unstash.clearing.stashes=Clearing stashes...
unstash.drop.tooltip=Delete selected stash
unstash.drop=&Drop
unstash.conflict.dialog.description.label.text=Conflicts during unstashing {0}
unstash.conflict.diff.dialog.left.title=Local changes
unstash.conflict.diff.dialog.right.title=Changes from stash
unstash.dialog.remove.stash.progress.indicator.title=Removing Stash {0}...
unstash.dialog.show.stashes.error.dialog.title=Couldn't Show the List of Stashes
unstash.dialog.stash.list.load.progress.indicator.title=Loading list of stashes...
unstash.dialog.unresolved.conflict.warning.notification.message=Unstash is not complete, you have unresolved merges in your working tree<br/><a href='resolve'>Resolve</a> conflicts.
unstash.dialog.unresolved.conflict.warning.notification.title=Conflicts were not resolved during unstash
unstash.pop.stash.tooltip=If selected the stash is dropped after it is applied.
unstash.pop.stash=&Pop stash
unstash.reinstate.index.tooltip=Attempt to reinstate index as well as working tree changes.
unstash.reinstate.index=Reinstate &index
unstash.stashes=&Stashes:
unstash.title=Unstash Changes
unstash.unstashing=Unstashing...
unstash.view.tooltip=View selected stash
unstash.view=&View
unstash.view.dialog.title=Paths Affected by {0}
unstash.error.can.not.unstash.changes.now=Cannot Unstash Changes Now
unstash.unstashed.with.conflicts.error.title=Unstashed with conflicts

update.options.display.name=Git Update Settings
update.notification.update.error=Can't update
update.notification.choose.upstream.branch=Choose upstream branch
update.skip.root.reason.no.tracked.branch=no tracked branch
update.skip.root.reason.detached.head=detached HEAD

util.remote.renderer.none=None
vfs.listener.add.single.prompt=Do you want to add the following file to Git?\n{0}\n\nIf you choose Cancel, you can still add it later manually.
vfs.listener.add.single.title=Add File to Git
vfs.listener.add.title=Add Files to Git
vfs.listener.checking.ignored=Checking for ignored files...
vfs.listener.delete.single.prompt=Do you want to delete the following file from Git?\n{0}\n\nIf you choose Cancel, you can still delete it later manually.
vfs.listener.delete.single.title=Delete File from Git
vfs.listener.delete.title=Delete Files from Git

git.commit.message.empty=Please specify commit message
git.commit.message.empty.title=Commit Message Is Empty

git.executable.detect.progress.title=Detecting Git Executable
git.executable.version.progress.title=Identifying Git Version
git.executable.version.is=Git version is {0}
git.executable.error.file.not.found=No such file: {0}

git.executable.validation.error.start.title=Cannot Run Git
git.executable.validation.error.version.title=Unsupported Git Version {0}
git.executable.validation.error.version.message=At least {0} is required
git.executable.validation.error.wsl1.unsupported.message=WSL version 1 is not supported, see <a href='https://youtrack.jetbrains.com/issue/IDEA-242469'>IDEA-242469</a>
git.executable.validation.error.xcode.title=Accept XCode/iOS License to Run Git
git.executable.validation.error.xcode.message=Run \u201Csudo xcodebuild -license\u201D and retry (admin rights required)
git.executable.validation.cant.identify.executable.message=Cannot identify version of git executable {0}
git.executable.unknown.error.message=Failed to start Git process: {0}
git.error.cant.process.output=Failed to process Git output: {0}

git.executable.notification.title=Can't start Git
git.executable.notification.description=The path to Git executable is probably not valid.

executable.error.git.not.installed=Git is not installed
executable.mac.fix.path.action=Fix Path
executable.mac.error.invalid.path.to.command.line.tools=Invalid path to Command Line Tools

git.unstash.clear.confirmation.message=Remove all stashes? This cannot be undone.
git.unstash.clear.confirmation.title=Remove All Stashes?
git.unstash.drop.confirmation.message=<html>Do you want to remove {0}?<br/>"{1}"</html>
git.unstash.drop.confirmation.title=Remove Stash {0}?
vcs.history.action.gitlog=Show in Git Log

# suppress inspection "UnusedProperty": used by 3-party plugins
vcs.history.action.gitlog.error=Git Log is not Ready

exportable.Git.Application.Settings.presentable.name=Git

git.add.to.exclude.file.action.text=.git/info/exclude
git.add.to.exclude.file.action.description=Add entries to .git/info/exclude
git.open.exclude.file.action.text=Open .git/info/exclude
git.open.exclude.file.action.description=Open .git/info/exclude in editor

git.fetch.progress=Fetching...

action.CopyPathFromRepositoryRootProvider.text=Path From Repository Root
action.git4idea.commands.TestGitHttpLoginDialogAction.text=Test Git Login Dialog
action.Git.Log.DeepCompare.text=Not Cherry-Picked Commits
action.Git.Log.DeepCompare.description=Highlights commits which have not been cherry-picked to the current branch
group.Git.ContextMenu.text=_Git
group.Git.Menu.text=_Git
group.Git.MainMenu.RebaseActions.text=_Rebase
group.Git.MainMenu.MergeActions.text=_Merge
group.Git.MainMenu.LocalChanges.text=_Uncommitted Changes
action.Git.Rebase.Skip.text=Skip Commit
action.Git.Rebase.Skip.progress.title=Skip commit during rebase...
action.Git.Rebase.Continue.text=Continue Rebase
action.Git.Revert.Abort.text=Abort Revert
action.Git.CherryPick.Abort.text=Abort Cherry-Pick
action.Git.Merge.Abort.text=Abort Merge
action.Git.Rebase.Abort.text=Abort Rebase
action.Git.Rebase.text=Rebase...
action.Git.Rebase.operation.name=rebase
action.Git.Pull.text=Pull...
action.Git.Fetch.text=Fetch
action.Git.Clone.text=Clone...
action.Git.Configure.Remotes.text=Manage Remotes...
action.Git.Reset.text=Reset HEAD...
action.Git.Unstash.text=Unstash Changes...
action.Git.Stash.text=Stash Changes...
action.Git.Stash.Silently.text=Stash Silently
action.Git.Merge.text=Merge...
action.Git.Tag.text=New Tag...
action.Git.Branches.text=_Branches...
action.Git.ResolveConflicts.text=Resolve Conflicts...
action.Git.CompareWithBranch.text=Compare with Branch...
action.Git.Add.text=Add
action.Git.Interactive.Rebase.text=Interactively Rebase from Here...
action.Git.Interactive.Rebase.description=Show the dialog for interactive rebase which allows to squash, fixup, reorder, remove and reword commits
action.Git.Squash.Into.Commit.text=Squash Into...
action.Git.Squash.Into.Commit.description=Create a squash commit
action.Git.Fixup.To.Commit.text=Fixup...
action.Git.Fixup.To.Commit.description=Create a fixup commit
action.Git.Rename.Local.Branch.text=Rename...
action.Git.Rename.Local.Branch.description=Rename a local branch
action.Git.New.Branch.description=Select only one branch to proceed create a new branch
action.Git.New.Branch.dialog.title=Create Branch from {0}
action.Git.Update.Selected.text=Update Selected
action.Git.Update.Selected.description=Fetch from tracked remote and update selected {0,choice,1#branch|2#branches} using {1} or fast-forward like `git fetch branch:branch` if possible
action.Git.Update.Selected.description.already.running=Update is already running
action.Git.Update.Selected.description.select.non.current=Select non current branches only
action.Git.Update.Selected.description.tracking.not.configured=Tracked branch is not configured for selected {0,choice,1#branch|2#branches}
action.Git.Delete.Branch.title=Delete {0,choice,1#branch|2#branches}
action.Git.Compare.With.Current.title=Compare with Current
action.Git.Compare.Selected.title=Compare Branches
action.Git.Compare.Selected.description=Compare selected branches with each other
action.Git.Compare.Selected.description.disabled=Select branches from the same repository
action.Git.Show.My.Branches.title=Show My Branches
action.Git.Show.My.Branches.description.not.support.indexing=Some of the repositories doesn't support indexing.
action.Git.Show.My.Branches.description.not.all.roots.indexed=Not all repositories are indexed.
action.Git.Show.My.Branches.description.not.graph.ready=The log is not ready yet, please wait a bit.
action.Git.Show.My.Branches.description.is.my.branch=A branch is 'My' if all exclusive commits of this branch are made by 'me', i.e. by current Git author.
action.Git.Show.My.Branches.description.calculating.branches.progress=Calculating My Branches
action.Git.Fetch.title=Fetch All Remotes
action.Git.Fetch.description.fetch.in.progress=Fetch in progress...
action.Git.Toggle.Favorite.title=Mark/Unmark As Favorite
action.Git.Loading.Branches.progress=Loading branches...
group.Git.Log.Branches.Settings.text=Branches Pane Settings
group.Git.Log.Branches.Settings.Separator.text=On Single Click
action.Git.Log.Branches.Change.Branch.Filter.On.Selection.text=Update Branch Filter
action.Git.Log.Branches.Change.Branch.Filter.On.Selection.description=When a branch is selected, filter the log by this branch
action.Git.Log.Branches.Navigate.Log.To.Branch.On.Selection.text=Navigate Log to Branch Head
action.Git.Log.Branches.Navigate.Log.To.Branch.On.Selection.description=When a branch is selected, navigate the log to this branch head
action.Git.Log.Branches.Navigate.Log.To.Selected.Branch.text=Navigate Log to Selected Branch Head
action.Git.Log.Branches.Change.Branch.Filter.text=Update Branch Filter in Log
action.Git.Log.Branches.Change.Branch.Filter.description=Update branch filter in log with selected branches
action.Git.Log.Edit.Remote.text=Edit Remote
action.Git.Log.Remove.Remote.text=Remove {0,choice,1#Remote|2#Remotes}
group.Git.HEAD.Branch.Filter.title=HEAD (Current Branch)
group.Git.Local.Branch.title=Local
group.Git.Remote.Branch.title=Remote
action.Git.Checkout.Branch.text=Checkout Selected...
action.Git.Checkout.Branch.description=Checkout selected branch
action.Git.Log.Hide.Branches.text=Hide Git Branches
action.Git.Log.Show.Branches.text=Branches
action.Git.Reword.Commit.text=Edit Commit Message...
action.Git.Reword.Commit.description=Change commit message via reword option of git rebase or amend
action.Git.Squash.Commits.text=Squash Commits...
action.Git.Drop.Commits.text=Drop Commits
action.Git.Uncommit.text=Undo Commit...
action.Git.Uncommit.description=Undo last commit and put its changes into selected changelist
action.Git.Revert.In.Log.text=Revert Commit
action.Git.Revert.In.Log.description=Produce a new commit, which reverts the changes made in the original commit
action.Git.Reset.In.Log.text=Reset Current Branch to Here...
action.Git.CreateNewTag.text=New Tag...
action.Git.CreateNewTag.description=Create new tag pointing to this commit
action.Git.CreateNewBranch.text=New Branch...
action.Git.CreateNewBranch.description=Create new branch starting from the selected commit
group.Git.CheckoutGroup.text=Checkout
group.Git.CheckoutGroup.description=Checkout selected revision or a branch on selected commit
action.Git.BrowseRepoAtRevision.text=Show Repository at Revision
action.Git.Log.text=Show Git Repository Log...
action.Git.Init.text=Create Git Repository...
action.Git.Init.error=Git init failed
checkbox.dont.warn.again=Don't warn again
checkbox.run.git.hooks=Run Git hooks
tooltip.run.git.hooks=If unchecked, Git hooks will be skipped with the '--no-verify' parameter
action.NotificationAction.text.resolve=Resolve...
action.NotificationAction.GitDeleteBranchOperation.text.restore=Restore
action.NotificationAction.GitDeleteBranchOperation.text.view.commits=View Commits
action.NotificationAction.GitDeleteBranchOperation.text.delete.tracked.branch=Delete Tracked Branch
action.NotificationAction.GitDeleteTagOperation.text.restore=Restore
action.NotificationAction.GithubNotifications.text.configure=Configure...
action.NotificationAction.GitMergeAction.text.view.commits=View Commits
action.NotificationAction.GitRewordOperation.text.undo=Undo
action.NotificationAction.GitUpdateSession.text.view.commits=View Commits
action.not.possible.in.fresh.repo.show.diff=Comparing revisions
action.not.possible.in.fresh.repo.rename.branch=Renaming branch
action.not.possible.in.fresh.repo.checkout=Checkout
action.not.possible.in.fresh.repo.push=Pushing commits

settings.git.option.group=Git
settings.commit.automatically.on.cherry.pick=Commit automatically on cherry-pick
settings.add.suffix=Add the 'cherry-picked from <hash>' suffix when picking commits pushed to protected branches
settings.crlf=Warn if CRLF line separators are about to be committed
settings.detached.head=Warn when committing in detached HEAD or during rebase
settings.update.method=Update method:
settings.auto.update.on.push.rejected=Auto-update if push of the current branch was rejected
settings.push.dialog=Show Push dialog for Commit and Push
settings.push.dialog.for.protected.branches=Show Push dialog only when committing to protected branches
settings.protected.branched=Protected branches:
settings.synchronize.branch.protection.rules=Load branch protection rules from GitHub
settings.synchronize.branch.protection.rules.description=GitHub rules are added to the local rules and synced on every fetch
settings.credential.helper=Use credential helper
settings.filter.update.info=Filter "Update Project" information by paths:
settings.supported.for.2.9=Supported for Git 2.9+
settings.explicitly.check=Explicitly check for incoming commits on remotes:
settings.clean.working.tree=Clean working tree using:
settings.git.incoming.change.strategy.text.auto=Auto
settings.git.incoming.change.strategy.text.always=Always
settings.git.incoming.change.strategy.text.never=Never
settings.git.update.method.rebase.description=Rebase the current branch on top of incoming changes
settings.git.update.method.rebase=Rebase
settings.git.update.method.merge.description=Merge incoming changes into the current branch
settings.git.update.method.merge=Merge
settings.git.update.method.branch.default=Branch Default
settings.enable.staging.area=Enable staging area
settings.enable.staging.area.comment=This will disable changelists support and delete all changelists in the project. Only for non-modal commit interface.

clone.dialog.checking.git.version=Checking Git version...
push.dialog.push.tags=Push tags
push.dialog.push.tags.combo.current.branch=Current Branch
push.dialog.push.tags.combo.all=All
push.dialog.target.panel.define.remote=Define remote
push.dialog.target.panel.add.remote=Add Remote
push.dialog.target.panel.couldnt.add.remote=Couldn''t add remote: {0}
push.dialog.target.panel.adding.remote=Adding Remote...
push.dialog.target.panel.can.t.push=Can't push
push.dialog.target.panel.empty.repository=Empty repository
push.dialog.target.panel.detached.head=Detached HEAD
push.dialog.target.panel.new=New
push.dialog.preview.commits.before.push=For Commit and Push to non-protected branches, preview commits before push
push.local.history.system.label.after=After push
push.local.history.system.label.before=Before push
push.notification.description.force.pushed=Force pushed {0} to {1}
push.notification.description.new.branch.with.many.tags=Pushed {0} to new branch {1}, and {2} tags to {3}
push.notification.description.new.branch.with.single.tag=Pushed {0} to new branch {1}, and tag {2} to {3}
push.notification.description.new.branch=Pushed {0} to new branch {1}
push.notification.description.push.with.lease.rejected=Force-with-lease push {0} to {1} was rejected
push.notification.description.pushed.many.tags=Pushed {0} tags to {1}
push.notification.description.pushed.single.tag=Pushed tag {0} to {1}
push.notification.description.pushed.with.many.tags=Pushed {0} {0,choice,1#commit|2#commits} to {1}, and {2} tags to {3}
push.notification.description.pushed.with.single.tag=Pushed {0} {0,choice,1#commit|2#commits} to {1}, and tag {2} to {3}
push.notification.description.pushed=Pushed {0} {0,choice,1#commit|2#commits} to {1}
push.notification.description.rejected.and.cancelled=Push was rejected, and update was canceled
push.notification.description.rejected.and.conflicts=Push was canceled, because there were conflicts during the update.<br/>Check that conflicts were resolved correctly, and invoke push again.
push.notification.description.rejected.and.failed=Push was rejected, and update failed with an error
push.notification.description.rejected.and.incomplete=Push was canceled, because not all conflicts were resolved during the update.<br/>Resolve the conflicts and try pushing again
push.notification.description.rejected.by.remote=Push {0} to {1} was rejected by the remote
push.notification.description.rejected=Push to {0} was rejected
push.notification.description.up.to.date=Everything is up-to-date
push.notification.force.push.anyway.action=Force push anyway
push.notification.force.push.progress.title.pushing=Pushing...
push.notification.force.with.lease.help.description.first=Force-with-lease push prevents overriding remote changes that haven't been fetched to the local repository
push.notification.force.with.lease.help.description.second=Fetch recent changes to verify that they can be discarded safely and repeat the push operation
push.notification.force.with.lease.help=What Is Force-with-Lease?
push.notification.partially.failed.title=Push partially failed
push.notification.partially.rejected.title=Push partially rejected
push.notification.push.failed.title=Push failed
push.notification.rejected.title=Push rejected
push.notification.single.repo.success.description={0} {0,choice,1#commit|2#commits} received during the push operation
push.notification.successful.title=Push successful
push.notification.update.action=Update
push.notification.view.files.action=View files updated during the push
push.notification.view.filtered.commits.actions=View {0} {0,choice,1#commit|2#commits} matching the filter
push.notification.view.received.commits.action=View received {0,choice,1#commit|2#commits}
push.rejected.dialog.title=Push Rejected
push.rejected.many.repos.item={0} in {1}
push.rejected.many.repos.single.branch=Push of the current branch {0} was rejected
push.rejected.many.repos=Push of the current branch was rejected:
push.rejected.merge.needed.with.problem=Remote changes need to be merged before pushing.<br/><br/>In this case <b>merge is highly recommended</b>, because there are non-pushed merge commits. <br/>Rebasing them can lead to problems.
push.rejected.merge.needed=Remote changes need to be merged before pushing
push.rejected.merge=&Merge
push.rejected.only.one.git.repo=Push of the current branch {0} was rejected
push.rejected.rebase.anyway=Rebase Anyway
push.rejected.rebase=&Rebase
push.rejected.remember.checkbox=Remember the update method and update &silently in the future<br/>(you can change this in Settings/Preferences | Version Control)
push.rejected.specific.repo=Push of the current branch {0} in repository<br/>{1} was rejected
push.rejected.update.not.rejected.repositories.as.well.checkbox=&Update all repositories

install.download.and.install.action=Download and Install
install.installing.progress=Installing...
install.downloading.progress=Downloading...
install.success.message=Git has been installed
install.general.error=Couldn't install Git
install.mac.error.couldnt.start.command.line.tools=Couldn't start Command Line Tools installation
install.mac.requesting.command.line.tools=Requesting XCode Command Line Developer Tools
git.status.not.changed=Not Changed
git.status.renamed=Renamed
git.status.copied=Copied
git.status.type.changed=Type Changed
git.status.unmerged=Unmerged
git.status.untracked=Untracked
git.status.index={0} in the staging area
git.status.work.tree={0} in the working directory
git.status.unmerged.index={0} by us
git.status.unmerged.work.tree={0} by them
git.status.unmerged.both=both {0}

git.status.bar.widget.name=Git Branch
git.status.bar.widget.text.cherry.pick=Cherry-picking in {0}
git.status.bar.widget.text.revert=Reverting in {0}
git.status.bar.widget.text.merge=Merging {0}
git.status.bar.widget.text.rebase=Rebasing {0}
git.status.bar.widget.tooltip.detached=Git: Detached HEAD doesn't point to any branch

git.light.status.bar.display.name=Git
git.light.status.bar.tooltip=Current Git Branch: {0}
git.light.status.bar.text=Git: {0}
git.light.cant.find.current.revision.exception.message=Cannot find the current revision for {0}

status.exception.message.unexpected.xstatus.ystatus=Unexpected symbol as status: ''{0}{1}''
status.exception.message.unexpected.status=Unexpected symbol as status: ''{0}''
status.exception.message.line.is.too.short=The line is too short
status.exception.message.unexpected=Unexpected symbol as status
status.exception.message.missing.path=Missing the original path
status.exception.message.format.message.xstatus.ystatus.line.output={0} xStatus=[{1}], yStatus=[{2}], line=[{3}]\noutput:\n{4}

stage.tree.node.staged=Staged
stage.tree.node.unstaged=Unstaged
stage.tree.node.unmerged=Unmerged
stage.tree.node.untracked=Untracked
stage.tree.node.ignored=Ignored
stage.content.staged=Staged
stage.content.local=Local
error.no.selected.roots.to.commit=Select roots to commit
error.no.staged.changes.to.commit=Stage files to commit
error.no.staged.changes.no.commit.message=Stage files to commit and specify commit message
stage.commit.process=Committing Staged Changes...
stage.commit.successful=Committed {0}: {1}
stage.commit.failed=Failed to commit {0}
stage.loading.status=Loading changes...
stage.add.action.text=Stage
stage.add.process=Staging Files...
stage.add.error.title=Failed to Stage Files
stage.reset.action.text=Unstage
stage.reset.process=Unstaging Files...
stage.reset.error.title=Failed to Unstage Files
stage.revert.action.text=Rollback
stage.revert.process=Rolling Back Files...
stage.revert.error.title=Failed to Rollback Files
stage.add.range.command.name=Stage Changes
stage.revert.unstaged.range.command.name=Rollback Unstaged Change
stage.revert.staged.range.command.name=Rollback Staged Change
action.label.add.unstaged.range=Stage
action.label.add.unstaged.range.tooltip=Add new changes to index
action.label.reset.staged.range=Unstage
action.label.reset.staged.range.tooltip=Remove changes from index
stage.vfs.write.process=Writing {0} to Git index
stage.vfs.read.process=Reading {0} from Git index
stage.vfs.refresh.process=Refreshing Git index files
stage.vfs.presentable.file.name=Staged: {0}
stage.vfs.editor.tab.tooltip=Staged Version of ''{0}''
stage.vfs.editor.notification.text=This is a staged version of ''{0}''
stage.vfs.editor.notification.link=Open local version
stage.diff.local.content.exception.message=Cannot get local file: ''{0}''

action.Git.Show.Stage.text=Commit...
action.Git.Stage.Add.All.text=Stage All
action.Git.Stage.Add.All.description=Add all unstaged changes and untracked files to index
action.Git.Stage.Add.Tracked.text=Stage All Tracked
action.Git.Stage.Add.Tracked.description=Add all unstaged changes in tracked files to index
group.Git.Stage.Ui.Settings.text=View Options
action.Git.Stage.Show.Staged.text=Show Staged Version
action.Git.Stage.Show.Staged.description=Show editor with staged content of the current file
action.Git.Stage.Show.Local.text=Show Local Version
action.Git.Stage.Show.Local.description=Show editor with local content for the current file
action.Git.Stage.Compare.Local.Staged.text=Compare with Staged Version
action.Git.Stage.Compare.Staged.Local.text=Compare with Local Version
action.Git.Stage.Compare.Staged.Head.text=Compare with HEAD Version
action.Git.Stage.Compare.Three.Versions.text=Compare HEAD, Staged and Local Versions
action.Git.Stage.ThreeSideDiff.text=Compare HEAD, Staged and Local Versions
action.Git.Stage.ThreeSideDiff.description=Show diff window with HEAD, staged and local versions that allows to interactively add changes into staging area
group.Git.Stage.Index.File.Menu.text=Git


branches.selected.branches.updated.title=Updated {0,choice,1#branch|2#branches}:\n\n{1}
branches.update.failed=Update Failed
branches.updating.process=Updating branches...
branches.checkout.failed.description=Can''t overwrite {0} branch because some commits can be lost
branches.creation.failed.title=New Branch Creation Failed
branches.checkout.failed.title=Checkout Failed
branches.checking.existing.commits.process=Checking Existing Commits...
branches.create.new.branch.dialog.title=Create New Branch
branches.tag.0=Tag ''{0}''
branches.branch.0=Branch ''{0}''
in.branches.all.repositories=In All Repositories
branches.tags=Tags
branches.branches=Branches
repositories=Repositories
common.remote.branches=Common Remote Branches
common.local.branches=Common Local Branches
update.checks.not.supported.git.2.9.required=Update Checks not Supported. Git 2.9+ Required
action.fetch.text=Fetch
fetching=Fetching...
branches.current.branch=current branch
branches.tracking.branch.doesn.t.configured.for.s=Tracked branch is not configured for {0}
branches.update.is.already.running=Update is already running
branches.update=Update
branches.checkout.and.rebase.onto.in.one.step=Checkout {0}, and rebase it onto {1} in one step (like `git rebase HEAD {2}`)
branches.checkout.and.rebase.onto.current=Checkout and Rebase onto Current
branches.rebase.is.not.possible.in.the.detached.head.state=Rebase is not possible in the detached HEAD state
branches.rebase.onto=Rebase {0} onto {1}
branches.rebase.current.onto.selected=Rebase Current onto Selected
branches.merge.into=Merge {0} into {1}
branches.merge.into.current=Merge into Current
branches.compare.the.current.working.tree.with=Compare the current working tree with the tree in {0}
branches.show.diff.with.working.tree=Show Diff with Working Tree
branches.show.commits.in=Show commits in {0} that are missing in {1}
branches.compare.with.current=Compare with Current
branches.new.branch.from.selected=New Branch from Selected...
branches.checkout.s=Checkout {0}
checkout.and.rebase=Rebase onto Remote
checkout.0=Checkout {0}
local.branch.already.exists.and.has.commits.which.do.not.exist.in.remote=Local branch ''{0}'' has commits that do not exist in ''{1}''. Rebase ''{0}'' onto ''{1}'', or drop local commits?
branches.drop.local.commits=Drop Local Commits
branches.checkout=Checkout
branches.rename.branch=Rename Branch {0}
branches.there.are.outgoing.commits=There are outgoing commits
branches.there.are.incoming.commits=There are incoming commits
branches.there.are.incoming.and.outgoing.commits=There are incoming and outgoing commits
branches.checkout.tag.or.revision=Checkout Tag or Revision...
branches.enter.reference.branch.tag.name.or.commit.hash=Enter reference (branch, tag) name or commit hash:
branches.remote.branches=Remote Branches
branches.remote.branches.in.repo=Remote Branches in {0}
branches.local.branches=Local Branches
branches.local.branches.in.repo=Local Branches in {0}
branches.update.info.process=Update branches info...
branches.action.pull.merge=Pull into Current Using _Merge
branches.action.pull.rebase=Pull into Current Using _Rebase
git.rollback=&Rollback

new.branch.dialog.operation.create.name=Create
new.branch.dialog.operation.create.description=Create new branches in other repositories
new.branch.dialog.operation.checkout.name=Checkout
new.branch.dialog.operation.checkout.description=Checkout existing branches, and create new branches in other repositories
new.branch.dialog.operation.rename.name=Rename
new.branch.dialog.branch.name=New branch name:
new.branch.dialog.checkout.branch.checkbox=Checkout branch
new.branch.dialog.set.tracking.branch.checkbox=Set tracking branch
new.branch.dialog.overwrite.existing.branch.checkbox=Overwrite existing branch
new.branch.dialog.overwrite.existing.branch.warning=Change the name or overwrite existing branch
new.branch.dialog.error.branch.name.invalid=Branch name {0} is not valid
new.branch.dialog.error.branch.name.empty=Specify name for the new branch
new.branch.dialog.error.branch.name.head=HEAD is a reserved keyword
new.branch.dialog.error.branch.already.exists=Branch name {0} already exists
new.branch.dialog.error.branch.clashes.with.remote=Branch name {0} clashes with remote branch with the same name
git.reset.mode.soft=Soft
git.reset.mode.soft.description=Files won't change, differences will be staged for commit.
git.reset.mode.mixed=Mixed
git.reset.mode.mixed.description=Files won't change, differences won't be staged.
git.reset.mode.hard=Hard
git.reset.mode.hard.description=<nobr>Files will be reverted to the state of the selected commit.<nobr/><br><nobr>Warning: any local changes will be lost.<nobr/>
git.reset.mode.keep=Keep
git.reset.mode.keep.description=<nobr>Files will be reverted to the state of the selected commit,<nobr/><br><nobr>but local changes will be kept intact.<nobr/>
git.reset.dialog.title=Git Reset
git.reset.dialog.description=<nobr>This will reset the current branch head to the selected commit,<nobr/><br><nobr>and update the working tree and the index according to the selected mode:<nobr/>
git.reset.dialog.description.commit.details.by.author={0} by {1}
git.reset.dialog.description.source.in.repository={0} in {1}
git.reset.process=Git Reset
git.reset.operation=reset
git.reset.button=Reset
git.reset.hard.button=&Hard Reset
git.reset.successful.notification.message=Reset successful
git.reset.partially.failed.notification.title=Reset partially failed
git.reset.partially.failed.notification.msg=Reset was successful for {0}\n\
  but failed for {1}:\n\
  {2}
git.reset.failed.notification.title=Reset failed
git.undo.action.cant.undo.commit.failure=Can't Undo Commit
git.undo.action.description=The selected commit is not the last in the current branch
git.undo.action.select.target.changelist.title=Select Target Changelist
git.undo.action.undoing.last.commit.process=Undoing Last Commit...
git.undo.action.refreshing.changes.process=Refreshing Changes...
git.undo.action.could.not.load.changes.of.commit=Couldn''t load changes of {0}
git.new.tag.dialog.title=Create New Tag On {0}
git.new.tag.dialog.tag.name.label=Enter the name of new tag

git.log.external.tab.description=Log for {0}
git.log.external.window.title=Git Log
git.log.external.loading.process=Loading Git Log...

git.log.cherry.picked.highlighter.select.branch.popup=Select Source Branch
git.log.cherry.picked.highlighter.process=Comparing Branches...
git.log.cherry.picked.highlighter.error.message=Couldn''t compare with branch {0}
git.log.cherry.picked.highlighter.cancelled.message=Highlighting of non-picked commits in ''{0}'' has been cancelled, \
  as branch filter was changed.

git.log.action.checkout.group=Checkout
git.log.action.checkout.revision.short.text=Revision ''{0}''
git.log.action.checkout.revision.full.text=Checkout Revision ''{0}''
action.Git.CheckoutRevision.text=Checkout Revision

git.log.diff.handler.process=Calculating Diff for {0}
git.log.diff.handler.failed.message={0} failed
git.log.diff.handler.paths.diff.title=Changes Between {0} and {1} in {2}
git.log.diff.handler.local.version.name=local version
git.log.diff.handler.local.version.content.title=Local

git.log.refGroup.local=Local

log.parser.exception.message.error.parsing.line=Error while parsing line "{0}"
log.parser.exception.message.could.not.parse.output=Cannot not parse Git log output "{0}"
log.parser.exception.message.error.command.line={0}\nCommand line: [{1}]

history.indexing.disabled.notification.text=Old style File History is shown as index is not available
history.indexing.disabled.notification.resume.link=Resume Git Log Indexing
history.indexing.disabled.notification.dismiss.link=Don't show again

git.history.diff.handler.choose.parent.popup=Choose Parent to Compare
git.history.diff.handler.load.changes.process=Loading changes...
git.history.diff.handler.git.show.error=Error happened while executing git show {0}:{1}
git.history.diff.handler.no.changes.in.file.info=There are no changes to file {0} in this merge commit
git.log.show.commit.in.log.process=Searching for Revision {0}
git.compare.branches.empty.status={0} contains all commits from {1}
git.compare.branches.explanation.message=Commits that exist in {0} but don''t exist in {1}
git.compare.branches.tab.name=Compare
git.compare.branches.tab.suffix={0} and {1}
git.update.files.updated.in.commits={0,choice,1#{0} file|2#{0} files} updated in {1,choice,1#{1} commit|2#{1} commits}
git.update.no.commits.matching.filters=No commits matching filters
git.update.commits.matching.filters={0,choice,1#{0} commit|2#{0} commits} matching filters
git.update.project.partially.updated.title=Project Partially Updated
git.update.skipped.repositories=Skipped {0} repositories:
git.update.repo.was.skipped={0} was skipped ({1})

git.integration.created.git.repository.in=Created Git repository in {0}
git.integration.could.not.git.init=Couldn''t git init {0}

git.tag.could.not.create.tag=Couldn't create tag
git.tag.created.tag.successfully=Created tag {0} successfully.

rename.branch.operation.name=rename
git.rename.branch.rollback.successful=Rollback successful
git.rename.branch.renamed.back.to=Renamed back to {0}
git.rename.branch.rollback.failed=Rollback failed
git.rename.branch.could.not.rename.from.to=Couldn''t rename {0} to {1}
git.rename.branch.was.renamed.to=Branch {0} was renamed to {1}
git.rename.branch.you.may.rename.branch.back=You may rollback (rename branch back to {0}) not to let branches diverge.
git.rename.branch.has.succeeded.for.the.following.repositories=However rename has succeeded for the following {0,choice,1#repository|2#repositories}:

update.process.progress.title=Updating...
update.process.generic.error.title=Can't update
update.process.error.message.unfinished.merge=You have unfinished merge. These conflicts must be resolved before update.
update.process.error.message.unmerged.files=Unmerged files detected. These conflicts must be resolved before update.
update.process.error.description.unfinished.rebase=You have unfinished rebase process. These conflicts must be resolved before update.
update.process.error.additional.description.unfinished.rebase=Then you may <b>continue rebase</b>. <br/> You also may <b>abort rebase</b> to restore the original branch and stop rebasing.
update.process.nothing.to.update=Nothing to update

checkout.operation.could.not.checkout.error=Couldn''t checkout {0}
checkout.operation.revision.not.found=Revision not found{0,choice,0#|1# in {1}}
checkout.operation.rollback=Rollback
checkout.operation.could.not.checkout.error.title=Couldn''t checkout {0}
checkout.operation.checked.out=Checked out {0}
checkout.operation.checked.out.new.branch.from=Checked out new branch {0} from {1}
checkout.operation.in={0}{1,choice,0#|1# in {2}}
checkout.operation.force.checkout=&Force Checkout
checkout.operation.name=checkout
checkout.operation.error.during.rollback=Error during rollback
checkout.operation.errors.during.deleting=Errors during deleting {0}:
checkout.operation.errors.during.checkout=Errors during checkout:
checkout.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (checkout back to {0}) not to let branches diverge.
checkout.operation.previous.branch=previous branch
checkout.operation.however.checkout.has.succeeded.for.the.following=However checkout has succeeded for the following {0,choice,1#repository|2#repositories}:

delete.branch.operation.collecting.unmerged.commits.process=Collecting unmerged commits...
delete.branch.operation.restoring.branch.process=Restoring Branch {0}...
delete.branch.operation.error.during.rollback.of.branch.deletion=Error during rollback of branch deletion
delete.branch.operation.could.not.restore.branch.error=Couldn''t Restore {0}
delete.branch.operation.branch.was.not.deleted.error=Branch {0} wasn''t deleted
delete.branch.operation.deleted.branch=Deleted branch {0}
delete.branch.operation.deleted.branch.bold=<b>Deleted Branch:</b> {0}
delete.branch.operation.unmerged.commits.were.discarded=Unmerged commits were discarded
delete.branch.operation.however.branch.deletion.has.succeeded.for.the.following=However branch deletion has succeeded for the following {0,choice,1#repository|2#repositories}:
delete.branch.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (recreate {0} in these roots) not to let branches diverge.

branch.operation.could.not.0.operation.name.1.reference=Couldn''t {0} {1}
branch.operation.in={0} (in {1})

checkout.new.branch.operation.could.not.create.new.branch=Couldn''t create new branch {0}
checkout.new.branch.operation.error.during.rollback=Error during rollback
checkout.new.branch.operation.errors.during.deleting=Errors during deleting {0}:
checkout.new.branch.operation.errors.during.checkout=Errors during checkout:
checkout.new.branch.operation.rollback.successful=Rollback successful
checkout.new.branch.operation.checked.out.0.and.deleted.1.on.2.3=Checked out {0} and deleted {1} on {2,choice,1#root|2#roots} {3}
checkout.new.branch.operation.branch.was.created=Branch {0} was created
checkout.new.branch.operation.however.checkout.has.succeeded.for.the.following=However checkout has succeeded for the {0,choice,1#repository|2#repositories}:
checkout.new.branch.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (checkout previous branch back, and delete {0}) not to let branches diverge.

delete.branch.operation.name=branch deletion
delete.remote.branch.operation.deleting.process=Deleting {0}
delete.remote.branch.operation.deleted.remote.branch=Deleted remote branch {0}
delete.remote.branch.operation.also.deleted.local.branches=Also deleted local {0,choice,1#branch|2#branches}: {1}
delete.remote.branch.operation.failed.to.delete.remote.branch=Failed to delete remote branch {0}
delete.remote.branch.operation.couldn.t.find.remote.by.name=Couldn''t find remote by name: {0}

delete.remote.tag.operation.deleted.tag.on.remotes=<b>Deleted Tag on {0,choice,1#Remote|2#Remotes}:</b> {1}
delete.remote.tag.operation.tag.does.not.exist.on.remotes=<b>Tag Doesn''t Exist on {0,choice,1#Remote|2#Remotes}:</b> {1}
delete.remote.tag.operation.failed.to.delete.tag.on.remotes=Failed to delete tag {0} on {1,choice,1#Remote|2#Remotes}

merge.dialog.description.cherry.pick.label.text=Conflicts during cherry-picking {0,choice,1#commit {1}|2#multiple commits}{2,choice,0#|1# made by {3}{4}}
merge.dialog.description.merge.label.text=Merging {0,choice,1#branch {1}|2#diverging branches} into {2,choice,1#branch {3}|2#diverging branches}
merge.dialog.description.rebase.with.hash.label.text=Rebasing{0,choice,0#|1# branch {1}} onto {2}
merge.dialog.description.rebase.with.onto.branch.label.text=Rebasing{0,choice,0#|1# branch {1}} onto branch {2}{3,choice,0#|1#, revision {4}}
merge.dialog.description.rebase.without.onto.info.label.text=Rebasing{0,choice,0#|1# branch {1}} onto diverging branches
merge.dialog.diff.left.title.cherry.pick.label.text=Local Changes
merge.dialog.diff.left.title.default.branch.label.text=Your version, branch {0}
merge.dialog.diff.left.title.rebase.label.text=Rebasing {0} from {1}
merge.dialog.diff.right.title.cherry.pick.label.text=Changes from cherry-pick {0}
merge.dialog.diff.right.title.default.with.hash.label.text=Changes from {0}
merge.dialog.diff.right.title.default.with.onto.branch.label.text=Changes from branch {0}{1,choice,0#|1#, revision {2}}
merge.dialog.diff.right.title.default.without.onto.info.label.text=Changes from diverging branches
merge.dialog.diff.right.title.rebase.with.branch.label.text=Already rebased commits and commits from {0}
merge.dialog.diff.right.title.rebase.without.branch.label.text=Already rebased commits
merge.dialog.diff.title.changes.from.branch.label.text=Changes from {0}
merge.error.unable.to.read.merge.head=Unable to read the file {0}: {1}
merge.operation.name=merge
rebase.operation.name=rebase
unstash.operation.name=unstash
merge.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (reset to the commit before merging) not to let branches diverge.
merge.operation.error.during.rollback=Error during rollback
merge.operation.branch.merged.with.conflicts={0} Merged with Conflicts
merge.operation.could.not.merge.branch=Could Not Merge {0}
merge.operation.already.up.to.date=Already up-to-date
merge.operation.however.merge.has.succeeded.for.the.following.repositories=However merge has succeeded for the following {0,choice,1#repository|2#repositories}:
merge.operation.merged.to=Merged {0} to {1}
merge.operation.delete.branch=Delete {0}
merge.progress.indicator.loading.unmerged.files.title=Loading unmerged files...

merge.unresolved.conflicts.remaining.notification.title=Pending Unresolved conflicts
merge.unresolved.conflicts.remaining.notification.body=There are pending unresolved conflicts.

create.branch.operation.name=create branch
create.branch.operation.could.not.create.new.branch=Couldn''t create new branch {0}
create.branch.operation.rollback.successful=Rollback successful
create.branch.operation.deleted.branch=Deleted {0}
create.branch.operation.error.during.rollback=Error during rollback
create.branch.operation.branch.created=Branch {0} was created
create.branch.operation.however.the.branch.was.created.in.the.following.repositories=However the branch was created in the following {0,choice,1#repository|2#repositories}:
create.branch.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (delete {0}) not to let branches diverge.

branch.ui.handler.can.not.operation.name.because.of.unmerged.files=Can''t {0} because of unmerged files
branch.ui.handler.unmerged.files.error.notification=You have to <a href=''{0}''>resolve</a> all merge conflicts before {1}.<br/>After resolving conflicts you also probably would want to commit your files to the current branch.
branch.ui.handler.merge.notification.description=The following files have unresolved conflicts. You need to resolve them before {0}.
branch.ui.handler.merge.error.notification.title=Unresolved files remain.
branch.ui.handler.rollback=Rollback
branch.ui.handler.do.not.rollback=Don't Rollback
branch.ui.handler.you.have.to.resolve.all.conflicts.before.operation.name=You have to resolve all merge conflicts before {0}.<br/>{1}
branch.ui.handler.delete.remote.branches=Delete Remote {0,choice,1#Branch|2#Branches}
branch.ui.handler.delete.all=Delete All
branch.ui.handler.delete.remote.branches.question=Delete remote {0,choice,1#branch|2#branches} {1}?
branch.ui.handler.delete.tracking.local.branch.as.well=Delete tracking local branch {0} as well
branch.ui.handler.delete.tracking.local.branches=Delete tracking local branches:

delete.tag.operation.could.not.restore.tag=Couldn''t Restore {0}
delete.tag.operation.error.during.rollback.of.tag.deletion=Error during rollback of tag deletion
delete.tag.operation.restored.tag=Restored tag {0}
delete.tag.operation.rollback.successful=Rollback Successful
delete.tag.operation.restoring.tag.process=Restoring Tag {0}...
delete.tag.operation.deleted.tag=<b>Deleted Tag:</b> {0}
delete.tag.operation.delete.on.remote=Delete on {0,choice,1#Remote|2#Remotes}
delete.tag.operation.could.not.find.tag=Couldn''t find tag {0}
delete.tag.operation.could.not.find.tag.in=Couldn''t find tag in {0}
delete.tag.operation.tag.was.not.deleted=Tag {0} wasn''t deleted
delete.tag.operation.however.tag.deletion.has.succeeded.for.the.following=However tag deletion has succeeded for the following {0,choice,1#repository|2#repositories}:
delete.tag.operation.you.may.rollback.not.to.let.tags.diverge=You may rollback (recreate {0} in these roots) not to let tags diverge.

branch.renaming.branch.process=Renaming {0} to {1}...
branch.rebasing.process=Rebasing {0}...
branch.rebasing.onto.process=Rebasing onto {0}...
branch.merging.process=Merging {0}...
branch.deleting.tag.process=Deleting tag {0}...
branch.deleting.tag.on.remote.process=Deleting tag {0} on remote...
branch.deleting.remote.branch=Deleting {0}...
branch.deleting.branch.process=Deleting {0}...
branch.checking.out.new.branch.process=Checking out new branch {0}...
branch.creating.branch.process=Creating branch {0}...
branch.checking.out.branch.from.process=Checking out {0} from {1}...
branch.checking.out.process=Checking out {0}...

branch.not.fully.merged.dialog.repository.label=Repository:
branch.not.fully.merged.dialog.title=Branch Was Not Fully Merged
branch.not.fully.merged.dialog.restore.button=&Restore
branch.not.fully.merged.dialog.all.commits.from.branch.were.merged=All commits from branch {0} were merged
branch.not.fully.merged.dialog.the.branch.was.not.fully.merged.to=The branch {0} was not fully merged to {1}.<br/>Below is the list of unmerged commits.

merge.dialog.customizer.filter.by.conflicted.file.checkbox=Filter by conflicted file
merge.dialog.customizer.show.details.link.label=Show Details
merge.dialog.customizer.collecting.details.progress=Collecting Commits Details...

branch.worker.could.not.create.tag=Couldn''t create tag {0}{1,choice,0#|1#|2# in {2}}

commit.options.sign.off.commit.checkbox=Sign-off commit
commit.options.sign.off.commit.message.line=Adds the following line at the end of the commit message:<br/>Signed-off by: {0}
commit.options.create.extra.commit.with.file.movements=Create extra commit with file movements

show.diff.between.dialog.title=Show Diff Between {0} and Current Working Tree
show.diff.between.dialog.no.differences.empty.text=No differences
show.diff.between.dialog.could.not.load.diff.with.branch.error=Couldn''t load diff with {0}: {1}
annotations.options.detect.movements.across.files=Detect Movements Across Files
annotations.options.detect.movements.within.file=Detect Movements Within File
annotations.options.ignore.whitespaces=Ignore Whitespaces
annotations.options.group=Options
progress.title.moving.files=Moving files...

editor.promo.commit.text=Commit right from {0} using a commit interface.
editor.promo.commit.try.link=Try it
editor.promo.help.link=Learn more
editor.promo.close.link=Don't show again

tracked.branch.fix.dialog.title=Update
tracked.branch.fix.dialog.ok.button.text=Update
tracked.branch.fix.dialog.set.as.tracked=Set as tracked branch
tracked.branch.fix.dialog.no.tracked.branch=Tracked branch is not configured.
tracked.branch.fix.dialog.branch.placeholder=Specify branch
tracked.branch.fix.dialog.not.on.branch.title=Git repositories in the Detached Head
tracked.branch.fix.dialog.not.on.branch.message=The following repositories will be skipped:
progress.title.enabling.git=Enabling Git...

action.selected.file.text=Selected {0,choice,1#File|2#Files}
action.selected.directory.text=Selected {0,choice,1#Directory|2#Directories}
action.New.Branch.disabled.several.commits.description=Select single commit to create a new branch
action.New.Branch.disabled.fresh.description=Can't create new branch in empty repository. Make initial commit first

conflicts.type.both.deleted=both deleted
conflicts.type.both.added=both added
conflicts.type.both.modified=both modified
conflicts.type.deleted.by.you=deleted by you
conflicts.type.deleted.by.them=deleted by them
conflicts.type.added.by.you=added by you
conflicts.type.added.by.them=added by them
conflicts.merge.window.error.title=Can't Resolve Conflict
conflicts.merge.window.error.message=Can''t find file for {0}
conflicts.accept.progress=Resolving {0,choice,1#Conflict|2#Conflicts}
conflicts.loading.status=Loading merge conflicts...
conflicts.resolve.action.text=Resolve
conflicts.accept.theirs.action.text=Accept Theirs
conflicts.accept.yours.action.text=Accept Yours

remotes.dialog.title=Git Remotes
remotes.dialog.adding.remote=Adding Remote...
remote.dialog.add.remote=Add Remote
remotes.dialog.cannot.add.remote.error.message=Cannot add remote {0} ''{1}''
remotes.dialog.remove.remote.message=Remove {0,choice,1#remote|2#remotes} {1}?
remotes.dialog.remove.remote.title=Remove {0,choice,1#Remote|2#Remotes}
remotes.dialog.removing.remote.progress=Removing {0,choice,1#Remote|2#Remotes}...
remotes.dialog.removing.remote.error.title=Remove {0,choice,1#Remote|2#Remotes}
remotes.dialog.removing.remote.error.message=Cannot remove {0,choice,1#remote|2#remotes} {1}
remotes.changing.remote.progress=Changing Remote...
remotes.changing.remote.error.title=Change Remote
remotes.changing.remote.error.message=Cannot change remote {0} to {1} ''{2}''
remotes.operation.not.executed.message=operation was not executed
remotes.operation.error.message={0} in {1}:\n{2}
remotes.remote.column.name=Name
remotes.remote.column.url=URL
remotes.define.remote=Define Remote
remotes.define.remote.name=Name:
remotes.define.remote.url=URL:
remotes.define.invalid.remote=Invalid Remote
remotes.define.empty.remote.name.validation.message=Remote name cannot be empty
remotes.define.empty.remote.url.validation.message=Remote URL cannot be empty
remotes.define.invalid.remote.name.validation.message=Remote name contains illegal characters
remotes.define.duplicate.remote.name.validation.message=Remote name ''{0}'' is already used
remotes.define.remote.url.validation.fail.message=Remote URL test failed:
remotes.define.checking.url.progress.message=Checking URL...
tab.title.repo.root.name.at.revision={0} at {1}
tab.title.conflicts=Conflicts

button.crlf.fix.dialog.commit.as.is=Commit As Is
button.crlf.fix.dialog.fix.and.commit=Fix and Commit
title.crlf.fix.dialog=Line Separators Warning
text.crlf.fix.dialog.description.warning=You are about to commit CRLF line separators to the Git repository.<br/>It is recommended to set the {0} Git attribute to {1} to avoid line separator issues.
text.crlf.fix.dialog.description.proposed.fix=If you choose <b>Fix and Commit</b>, {0} will be executed.<br/>If you choose <b>Commit As Is</b>, the config value won''t be changed.
progress.finishing.conflict.resolve=Finishing Resolving Conflicts
link.label.editor.notification.merge.conflicts.resolve.in.progress=Resolving merge conflicts is in progress
link.label.merge.conflicts.resolve.in.progress.focus.window=Focus Window
link.label.merge.conflicts.resolve.in.progress.cancel.resolve=Cancel Resolve
label.diff.content.title.submodule.suffix={0} (Submodule)
error.git.version.check.failed=Error while executing ''git --version''. ExitCode: {0}, errors: {1}

local.changes.save.policy.stash=Stash
local.changes.save.policy.shelve=Shelve
notification.title.fetch.failure=Fetch Failed
notification.title.fetch.success=Fetch Successful
title.sudo.command.install.git=Install Git

activity.name.unstash=Unstash
notification.title.unstash.failed=Unstash failed
exception.message.could.not.stash.root.error=Cannot stash {0}: {1}
error.git.parse.unknown.file.status=Unknown file status: {0}
error.git.parse.not.a.revision.number=The string ''{0}'' does not represent a revision number
error.git.repository.not.found=The repository does not exists anymore: {0}

title.changes.excluded.from.commit=Changes Excluded from Merge Commit
label.changes.excluded.from.commit.are.you.sure.want.to.continue=Are you sure you want to exclude these changed files from merge commit?
button.changes.excluded.from.commit.commit.anyway=Commit Anyway
title.unresolved.conflicts.pre.commit.check=Unresolved Conflicts
message.unresolved.conflicts.prevent.commit=Can't commit changes due to unresolved conflicts.

label.user.name=Name:
label.user.email=E-mail:
checkbox.set.config.property.globally=Set properties globally
title.user.name.email.not.specified=Git User Name Is Not Defined
button.set.name.and.commit=Set and Commit
validation.warning.set.name.email.for.git=You have to specify user name and email for Git
label.name.email.not.defined.in.n.roots=Git user.name and user.email properties are not defined in {0,choice,1#root|2#roots}
error.cant.set.user.name.email=Couldn't set user.name and user.email
progress.checking.user.name.email=Checking Git User Name...
progress.setting.user.name.email=Setting Git User Name...
progress.setting.config.value=Updating Git Config...
progress.checking.line.separator.issues=Checking for Line Separator Issues...
error.title.git.version.does.not.define.home.env=HOME Variable Is Not Defined
error.message.git.version.does.not.define.home.env=You are using Git {0} which doesn''t define %HOME% environment variable properly.\nConsider updating Git to a newer version or define %HOME% to point to the place where the global .gitconfig is stored \n(it is usually %USERPROFILE% or %HOMEDRIVE%%HOMEPATH%).
warning.title.commit.with.unfinished.rebase=Unfinished Rebase Process
warning.message.commit.with.unfinished.rebase=The Git repository at the following path has an <b>unfinished rebase</b> process:<br/>{0}<br/>You probably want to <b>continue rebase</b> instead of committing.<br/>Committing during rebase may lead to the commit loss.
link.label.commit.with.unfinished.rebase.read.more=Read more about Git rebase
warning.title.commit.with.detached.head=Commit in Detached HEAD
warning.message.commit.with.detached.head=The Git repository at the following path is in the <b>detached HEAD</b> state:<br/>{0}<br/>You can look around, make experimental changes and commit them, but be sure to checkout a branch not to lose your work.<br/>Otherwise you risk losing your changes.
link.label.commit.with.detached.head.read.more=Read more about detached HEAD
error.commit.cant.collect.partial.changes=Can't collect partial changes to commit
error.commit.cant.commit.multiple.changelists=Can't commit changes from multiple changelists at once
error.commit.cant.commit.with.unmerged.paths=Committing is not possible because you have unmerged files.
error.commit.cant.create.message.file=Creation of commit message file failed
button.commit.all.files=Commit All Files
title.ssh.confirmation=SSH Confirmation
label.credential.store.key.ssh.passphrase=Git SSH Passphrase
label.credential.store.key.ssh.password=Git SSH Password
label.credential.store.key.http.password=Git HTTP
error.cannot.delete.file=Cannot delete file: {0}
action.description.cant.revert.merge.commit=Reverting merge commits is not allowed
progress.title.reverting.n.commits=Reverting {0,choice,1#commit|2#commits}
progress.title.validating.revision=Validating Revision...

revision.number.cannot.parse.output=Cannot parse the output: [{0}]

unexpected.tree.entries.error=Unexpected tree entries: {0}
unexpected.tree.object.error=Unexpected tree object: {0}
revert.operation.name=revert
revert.operation.applied=reverted
cherry.pick.name=cherry-pick
cherry.pick.applied=applied
operation.name.validating.revision.0=validating revision {0}
operation.name.loading.revision=loading revision
combobox.item.file.invalid=(invalid)
warning.your.local.changes.would.be.overwritten.by.merge=Your local changes will be overwritten by merge.\nCommit, stash, or revert them to proceed.
link.label.local.changes.would.be.overwritten.by.merge.view.them=View them
dialog.title.local.changes.prevent.from.operation=Local Changes Prevent from {0}
notification.title.git.operation.failed=Git {0} Failed
notification.title.untracked.files.prevent.operation=Untracked Files Prevent {0}
notification.content.untracked.files.prevent.operation.move.or.commit=Move or commit them before {0}<br/>{1}
dialog.title.could.not.operation=Could not {0}
dialog.title.untracked.files.preventing.operation=Untracked Files Preventing {0}
dialog.message.untracked.files.will.be.overwritten.by.operation=These untracked files will be overwritten by {0}
button.rollback=Rollback
button.don.t.rollback=Don't Rollback
progress.title.update=Update
notification.content.fetched.successfully=Fetched successfully
notification.content.fetch.cancelled.by.user=Fetch was canceled by user
notification.content.fetch.failed.couldn.t.authorize=Fetch failed: authorization error
notification.content.couldn.t.authorize=Authorization error
notification.title.fetch.failed=Fetch failed
notification.title.fetch.details=Fetch details
notification.title.couldn.t.reset.merge=Failed to abort the merge operation
notification.title.error.merging=Merge Error
progress.text.merging.repository=Merging{0}...
dialog.title.rebasing.merge.commits=Rebasing Merge Commits
dialog.message.rebasing.merge.commits=You are about to rebase a merge commit with conflicts.\n\nChoose 'Merge' if you don't want to resolve conflicts again, or you still can rebase if you want to linearize the history.
rebasing.merge.commits.button.merge=Merge
rebasing.merge.commits.button.rebase=Rebase
rebasing.merge.commits.button.cancel=Cancel
progress.details.refreshing.files.for.root=Refreshing files for the root {0}
activity.name.update=VCS Update
notification.title.couldnt.collect.updated.files.info=Couldn't collect the updated files info
notification.content.couldnt.collect.updated.files.info=Update of {0} was successful, but we couldn''t collect the updated changes because of an error
notification.title.update.failed=Update failed
notification.title.can.t.update.no.current.branch=Cannot Update: No Current Branch
notification.content.detached.state.in.root.checkout.branch=You are in the ''detached HEAD'' state, which means that you''re not on any branch{0}<br/>Checkout a branch to be able to update the project.
notification.content.branch.in.repo.has.no.tracked.branch={0}{1} has no tracked branch
notification.title.error.updating.root=Error updating {0}
notification.content.updating.root.failed.with.error=Update {0} failed with an error: {1}
git.update.operation=Update
progress.update.destination.remote=Remote
action.Vcs.ShowBranches.text=Show Branches
no.revisions.available=No revisions
search.everywhere.group.name=Git
search.everywhere.group.full.name=Git Refs
search.everywhere.items.commit.by.hash=Commit by hash
search.everywhere.items.local.branch=Local branch
search.everywhere.items.remote.branch=Remote branch
search.everywhere.items.tag=Tag
search.everywhere.items.commit.by.message=Commit by message
commit.author.with.committer={0}, via {1}
