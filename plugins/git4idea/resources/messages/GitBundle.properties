add.action.name=Add
add.adding=Adding files...
annotate.action.name=Annotate

apply.conflict.dialog.description.label.text=Conflicts during {0} of commit {1} made by {2}{3}

changes.retrieving=Retrieving Changes for Revision {0}
checking.out=Checkout {0}
commit.action.commit.and.rebase.text=Commit and Rebase...
commit.action.name=Comm&it
commit.author.diffs=<html>Author differs from default</html>
commit.author=&Author:
commit.partial.merge.message=Partial commit during a {0} is not allowed.\n\
  The following files are not included in commit.\n\
  Perform commit with all files included?
commit.partial.merge.title=Partial Merge Commit
common.current.branch.tooltip=The currently checked out branch.
common.current.branch=Current Branch:
common.git.root.tooltip=Select Git VCS root
common.git.root=Git &Root:
common.no.active.branch=<no active branch>
common.refreshing=Refreshing Files
common.suffix.in.one.repository=in {0}
common.suffix.in.several.repositories=in {0} repositories

conflict.resolver.unmerged.files.check.error.notification.description.text=Couldn't check the working tree for unmerged files because of an error.

login.dialog.label.login.to.url=Log In to {0}
login.dialog.button.login=Log In
login.dialog.prompt.enter.credentials=Enter credentials:
login.dialog.select.login.way.credentials=Enter credentials
login.dialog.select.login.way.use.helper=Use credentials helper
login.dialog.username.label=Username:
login.dialog.password.label=Password:
login.dialog.error.username.cant.be.empty=Username cannot be empty
login.dialog.error.password.cant.be.empty=Password cannot be empty
login.dialog.login.with.selected.provider=Log In with {0}\u2026

computing.annotation=Computing annotation for {0}
diff.find.error=Finding revision for diff: {0}
error.dialog.title=Error
error.list.title={0} Error:
error.occurred.during=Error Occurred During ''{0}''
errors.message.item=\n   {0}
errors.message=The Git operation ended with multiple errors:{0}

# suppress inspection "UnusedProperty": used by 3-party plugins
fetch.action.name=Fetch

# suppress inspection "UnusedProperty": used by 3-party plugins
find.git.error.title=Error Running Git
# suppress inspection "UnusedProperty": used by 3-party plugins
find.git.success.title=Git executed successfully
# suppress inspection "UnusedProperty": used by 3-party plugins
find.git.unsupported.message=<html><tt>{0}</tt><br>This version is unsupported, and some plugin functionality could fail to work.<br>The minimal supported version is <em>{1}</em>.</html>

git.error.exit=The Git process exited with the code {0}
git.running=Running: {0}

init.destination.directory.description=Select directory where the new Git repository will be created.
init.destination.directory.title=Create Git Repository
init.warning.already.under.git=<html>The selected directory <tt>{0}</tt> is already under Git.<br/>Are you sure that you want to create a new VCS root?</html>
init.warning.title=Git Init
initializing.title=Initializing repository...
merge.action.name=Merge
merge.add.log.information.tooltip=Add log information to the commit message (\"--log\" option)
merge.add.log.information=Add &log information
merge.branch.button=Merge
merge.branch.title=Merge Branches
merge.branches.tooltip=<html>The chooser for branches. Select one or more branches to merge (already merged branches are not shown)</html>.
merge.branches=&Branches to merge:
merge.commit.message.tooltip=The message for the merge commit in case one is created (\"-m\" option).
merge.commit.message=Commit &Message
merge.default.strategy=<default>
merge.no.commit.tooltip=Force no commit for merge (the \"--no-commit\" option)
merge.no.commit=No &commit
merge.no.fast.forward.tooltip=Disable fast forward (\"--no-ff\" option)
merge.no.fast.forward=No &fast forward
merge.retrieving.branches=Retrieving unmerged branches
merge.squash.commit=S&quash commit
merge.squash.tooltip=Squash all changes into the single commit (\"--squash\" option)
merge.strategy.tooltip=The merge strategy to use (\"-s\" option)
merge.strategy=&Strategy:
merge.tool.column.status.deleted=Deleted
merge.tool.column.status.modified=Modified
merge.tool.column.theirs.status=Theirs
merge.tool.column.yours.status=Yours
merging.title=Merging changes to {0}
paths.affected.title=Paths affected in commit {0}
pull.action.name=Pull
pull.button=Pull
pull.get.branches.tooltip=Get branch names from remote repository. Otherwise a locally cached information is used.
pull.getting.remote.branches=Getting Remote Branches...
pull.remote.tooltip=Registered remote name or URL.
pull.remote=Re&mote:
pull.title=Pull Changes
pulling.title=Pulling changes from {0}

pull.dialog.title=Pull to {0}
pull.dialog.git.root=Git Root:
pull.dialog.from=From:
pull.dialog.upstream.field.title=Set as Upstream

operation.action.message=Multiple Git roots have unfinished {0} process, please select root to perform action on.

rebase.abort.and.rollback.dialog.message=Abort rebase in {0} only or also rollback rebase in {1}?
rebase.abort.and.rollback.dialog.no.button.text=Abort Only
rebase.abort.and.rollback.dialog.yes.button.text=Abort and Rollback
rebase.abort.dialog.message=Abort rebase in {0}?
rebase.abort.dialog.ok.button.text=Abort
rebase.abort.dialog.title=Abort Rebase
rebase.abort.notification.failed.title=Rebase Abort Failed
rebase.abort.notification.successful.message=Rebase abort succeeded
rebase.abort.notification.warning.rollback.failed.message=Rollback failed in {0}:{1}{2}
rebase.abort.notification.warning.rollback.failed.title=Rebase Rollback Failed
rebase.abort.notification.warning.rollback.failed.with.repo.message=Rebase abort was successful in {0}, but rollback failed in {1}:{2}{3}
rebase.abort.progress.indicator.command.in.repo.title={0} in {1}
rebase.abort.rollback.successful.rebase.dialog.message=Do you want to rollback the successful rebase in {0}?
rebase.abort.rollback.successful.rebase.dialog.ok.button.text=Rollback
rebase.confirmation.dialog.published.commits.button.cancel.text=Cancel
rebase.confirmation.dialog.published.commits.button.rebase.text=Rebase Anyway
rebase.confirmation.dialog.published.commits.message=<html>You're trying to rebase some commits already pushed to a protected branch.<br/> Rebasing them would duplicate commits, which is not recommended and most likely unwanted.</html>
rebase.confirmation.dialog.published.commits.title=Rebasing Published Commit
rebase.conflict.diff.dialog.left.title=<html>Rebasing {0} from <b>{1}</b></html>
rebase.conflict.diff.dialog.right.simple.title=<html>Already rebased commits</html>
rebase.conflict.diff.dialog.right.with.branch.title=<html>Already rebased commits and commits from <b>{0}</b></html>
rebase.dialog.button.onto.validate.text=&Validate
rebase.dialog.button.validate.from.text=Va&lidate
rebase.dialog.button.validate.from.tooltip=Validate \"from\" reference
rebase.dialog.button.validate.onto.tooltip=Validate "onto" reference.
rebase.dialog.checkbox.interactive.text=&Interactive
rebase.dialog.checkbox.interactive.tooltip=If selected, the interactive rebase will be performed.
rebase.dialog.checkbox.preserve.merges.text=&Preserve Merges
rebase.dialog.checkbox.preserve.merges.tooltip=Preserve merges during rebase instead of squashing them.
rebase.dialog.checkbox.show.tags.text=Show &tags
rebase.dialog.checkbox.show.tags.tooltip=Show tags in \"from\" and \"onto\" comboboxes.
rebase.dialog.error.invalid.from=\"From\" reference expression is invalid.
rebase.dialog.error.invalid.onto=\"Onto\" reference expression is invalid.
rebase.dialog.error.rebase.in.progress=Interactive rebase has been already started for this Git root.
rebase.dialog.label.branch.text=&Branch:
rebase.dialog.label.branch.tooltip=Select branch to rebase (if branch is different from the current branch, it will be checked out first)
rebase.dialog.label.from.text=&From:
rebase.dialog.label.from.tooltip=Specify actual base for the branch. Leave blank to onto.
rebase.dialog.label.onto.text=&Onto:
rebase.dialog.label.onto.tooltip=The reference that will become a new base for selected branch.
rebase.dialog.progress.loading.branch.info=Loading Branch Configuration...
rebase.dialog.progress.loading.tags=Loading Tags...
rebase.dialog.start.rebase=Rebase
rebase.dialog.title=Rebase Branch
rebase.entry.action.name.drop=Drop
rebase.entry.action.name.edit=Edit
rebase.entry.action.name.fixup=Fixup
rebase.entry.action.name.pick=Pick
rebase.entry.action.name.reword=Reword
rebase.entry.action.name.squash=Squash
rebase.entry.action.name.unknown=Unknown
rebase.git.operation.name=Rebase
rebase.interactive.dialog.discard.modifications.cancel=Cancel Rebase
rebase.interactive.dialog.discard.modifications.continue=Continue Rebasing
rebase.interactive.dialog.discard.modifications.discard=Discard
rebase.interactive.dialog.discard.modifications.message=Discard changes and cancel rebase?
rebase.interactive.dialog.git.commands.column.action=Action
rebase.interactive.dialog.git.commands.column.hash=Hash
rebase.interactive.dialog.git.commands.column.subject=Subject
rebase.interactive.dialog.git.commands=Git Commands
rebase.interactive.dialog.reset.link.text=Reset
rebase.interactive.dialog.reword.hint.text=Press {0} to apply changes
rebase.interactive.dialog.start.rebase=Start Rebasing
rebase.interactive.dialog.stop.to.edit.text=Stop to Edit
rebase.interactive.dialog.title=Rebasing Commits
rebase.interactive.dialog.view.git.commands.text=View Git Commands
rebase.interactive.edit.commit.message.dialog.title=Git Commit Message
rebase.interactive.edit.commit.message.ok.action.title=Continue Rebasing
rebase.interactive.noop.dialog.text=There are no commits to rebase because the current branch is directly below the base branch, or they point to the same commit (the 'noop' situation).\n Do you want to continue (this will reset the current branch to the base branch)?
rebase.interactive.noop.dialog.title=Git Rebase
rebase.interactive.unstructured.editor.dialog.root.label=Git Root: {0}
rebase.log.action.operation.rebase.name=rebase
rebase.log.action.operation.reword.name=reword
rebase.log.commit.editing.action.commit.not.in.head.error.text=The commit is not in the current branch
rebase.log.commit.editing.action.commit.pushed.to.protected.branch.error.text=The commit is already pushed to protected branch ''{0}''
rebase.log.commit.editing.action.disabled.parents.description=Selected commit has {0} parents
rebase.log.commit.editing.action.progress.containing.branches.title=Searching for branches containing the selected commit...
rebase.log.commit.editing.action.prohibit.state.grafting=Can''t {0} during cherry-pick
rebase.log.commit.editing.action.prohibit.state.merging=Can''t {0} during merge
rebase.log.commit.editing.action.prohibit.state.rebasing=Can''t {0} during rebase
rebase.log.commit.editing.action.prohibit.state.reverting=Can''t {0} during revert
rebase.log.commit.editing.action.prohibit.state=Can''t {0}
rebase.log.create.fixup.commit.action.failure.title=Can't Create Fixup Commit
rebase.log.create.squash.commit.action.failure.title=Can't Create Squash Commit
rebase.log.interactive.action.failure.title=Couldn't Start Rebase
rebase.log.reword.action.failure.title=Couldn't Edit Commit Message
rebase.log.reword.action.loading.commit.message.failed.message=Couldn''t load changes of {0}
rebase.log.reword.action.notification.successful.title=Commit Message Changed
rebase.log.reword.action.notification.undo.failed.title=Undo Commit Message Edit Failed
rebase.log.reword.action.notification.undo.not.allowed.commit.pushed.message=Commit has already been pushed to {0}
rebase.log.reword.action.notification.undo.not.allowed.repository.changed.message=Repository has already been changed
rebase.log.reword.action.notification.undo.not.allowed.title=Can't Undo Commit Message Edit
rebase.log.reword.action.progress.indicator.loading.commit.message.title=Loading Commit Message...
rebase.log.reword.action.progress.indicator.title=Rewording...
rebase.log.reword.action.progress.indicator.undo.title=Undoing Reword...
rebase.log.reword.dialog.description.label=Edit message for commit {0} by {1}
rebase.log.reword.dialog.failed.pushed.to.protected.message=Can''t edit commit message: {0}
rebase.log.reword.dialog.failed.repository.changed.message=Can't edit commit message: repository state was changed
rebase.log.reword.dialog.title=Edit Commit Message
rebase.notification.action.abort.text=Abort
rebase.notification.action.continue.text=Continue
rebase.notification.action.retry.text=Retry
rebase.notification.action.view.shelf.text=View Shelf...
rebase.notification.action.view.stash.text=View Stash...
rebase.notification.conflict.title=Rebase Stopped Due to Conflicts
rebase.notification.editing.title=Rebase Stopped for Editing
rebase.notification.failed.continue.title=Continue Rebase Failed
rebase.notification.failed.rebase.title=Rebase Failed
rebase.notification.failed.shelf.text=Couldn''t shelve local uncommitted changes:<br/>{0}
rebase.notification.failed.stash.text=Couldn''t stash local uncommitted changes:<br/>{0}
rebase.notification.no.rebase.in.progress.abort.title=Can't Abort Rebase
rebase.notification.no.rebase.in.progress.continue.title=Can't Continue Rebase
rebase.notification.no.rebase.in.progress.message=No rebase in progress
rebase.notification.not.allowed.detached.message=You are in the detached HEAD state in {0}.<br/>Rebase is not possible.
rebase.notification.not.allowed.empty.repository.message=Repository {0} is empty.
rebase.notification.not.allowed.grafting.message=There is an unfinished cherry-pick process in {0}.<br/>You should finish it before starting a rebase.
rebase.notification.not.allowed.merging.message=There is an unfinished merge process in {0}.<br/>You should complete the merge before starting a rebase.
rebase.notification.not.allowed.message=Rebase is not possible in {0}.
rebase.notification.not.allowed.rebasing.message=There is an unfinished rebase process in {0}.<br/>You should complete it before starting another rebase.
rebase.notification.not.allowed.reverting.message=There is an unfinished revert process in {0}.<br/>You should finish it before starting a rebase.
rebase.notification.not.allowed.title=Rebase not Allowed
rebase.notification.not.started.title=Rebase Not Started
rebase.notification.saved.local.changes.part.shelf.text=<br/>Local changes were shelved before rebase.
rebase.notification.saved.local.changes.part.stash.text=<br/>Local changes were stashed before rebase.
rebase.notification.skipped.commits.part.text=<br/>The following {0,choice,1#commit|2#commits} {0,choice,1#was|2#were} skipped during rebase:<br/>{1}
rebase.notification.successful.fast.forwarded.checkout.message=Checked out{0,choice,0#|1# {1}} and fast-forwarded it{2,choice,0#|1# to {3}}
rebase.notification.successful.fast.forwarded.message=Fast-forwarded{0,choice,0#|1# {1}}{2,choice,0#|1# to {3}}
rebase.notification.successful.rebased.checkout.message=Checked out{0,choice,0#|1# {1}} and rebased it{2,choice,0#|1# on {3}}
rebase.notification.successful.rebased.message=Rebased{0,choice,0#|1# {1}}{2,choice,0#|1# on {3}}
rebase.notification.successful.title=Rebase Successful
rebase.notification.successful.up.to.date.message={0,choice,0#Up-to-date|1#{1} is up-to-date}{2,choice,0#|1# with {3}}
rebase.progress.indicator.aborting.title=Aborting rebase process...
rebase.progress.indicator.conflicts.collecting.title=Collecting conflicts to resolve...
rebase.progress.indicator.continue.title=Continuing rebase process...
rebase.progress.indicator.preparing.title=Preparing to rebase...
rebase.progress.indicator.retry.title=Retrying rebase process...
rebase.progress.indicator.title=Rebasing...
rebase.simple.editor.dialog.title=Git Editor
rebase.update.project.abort.task.title=Aborting rebase...
rebase.update.project.conflict.error.notification.description=Then you may <b>continue rebase</b>. <br/> You also may <b>abort rebase</b> to restore the original branch and stop rebasing.
rebase.update.project.conflict.error.notification.title=Can't continue rebase
rebase.update.project.conflict.merge.description.label=Merge conflicts detected. Resolve them before continuing rebase.
rebase.update.project.notification.abort.cancel.message=Abort rebase cancelled
rebase.update.project.notification.abort.error.message=Error aborting rebase
rebase.update.project.notification.abort.success.message=Rebase aborted
rebase.update.project.notification.failed.message=Couldn''t proceed with rebase. {0}
rebase.update.project.notification.failed.title=Rebase Error
merge.update.project.generic.error.title=Can't complete update
merge.update.project.conflict.merge.description.label=Merge conflicts detected. Resolve them before continuing update.

remove.removing=Removing files...
repository.action.missing.roots.misconfigured=None of configured Git roots are under Git. The configured directory must have ".git" directory in it.
repository.action.missing.roots.title=No Git Roots
repository.action.missing.roots.unconfigured.message=No Git roots are configured for the project.
repository.not.found.error=Can''t find configured git repository for {0}
reset.action.name=Reset Head ...
reset.commit.invalid=The specified commit expression did not pass validation.
reset.commit.label=To &Commit:
reset.commit.tooltip=The commit that will become the current HEAD\n as result of reset operation.
reset.title=Reset Head
reset.type.tooltip=<html>The reset type (see also <code>git reset</code> man page):<ul><li><b>Mixed</b> resets index but not working tree</li><li><b>Soft</b> leaves index and working tree, just moves head pointer</li><li><b>Hard</b> resets index and working tree.<em>Changes in the working tree will be lost</em></li></ul></html>
reset.type=Reset &Type:
reset.validate=&Validate
resetting.title=Resetting HEAD...
restore.conflict.dialog.description.label.text=Uncommitted changes that were saved before {0} have conflicts with files from {1}
restore.conflict.diff.dialog.left.shelf.title=Uncommitted changes from the shelf
restore.conflict.diff.dialog.left.stash.title=Uncommitted changes from the stash
restore.conflict.diff.dialog.right.title=Changes from {0}
preserving.process.local.changes.not.restored.error.title=Local changes were not restored
restore.notification.failed.shelf.message=Before update your uncommitted changes were saved to <a href='saver'>shelf</a>.<br/>Update is not complete, you have unresolved merges in your working tree<br/>Resolve conflicts, complete update and restore changes manually.
restore.notification.failed.stash.message=Before update your uncommitted changes were saved to <a href='saver'>stash</a>.<br/>Update is not complete, you have unresolved merges in your working tree<br/>Resolve conflicts, complete update and restore changes manually.
restore.notification.failed.title=Local changes were not restored

save.load.conflict.dialog.diff.left.title=Your uncommitted changes
save.load.conflict.dialog.diff.right.title=Changes from remote
save.notification.failed.shelf.text=Tried to save uncommitted changes in shelf before {0}, but failed with an error.<br/>{1}
save.notification.failed.stash.text=Tried to save uncommitted changes in stash before {0}, but failed with an error.<br/>{1}
save.notification.failed.title=Couldn't save uncommitted changes

smart.operation.dialog.north.panel.label.shelf.text=<html>Your local changes to the following files would be overwritten by {0}.<br/> {1} can shelve the changes, {0} and unshelve them after that.</html>
smart.operation.dialog.north.panel.label.stash.text=<html>Your local changes to the following files would be overwritten by {0}.<br/> {1} can stash the changes, {0} and unstash them after that.</html>
smart.operation.dialog.ok.action.shelf.description=Shelve local changes, {0}, unshelve
smart.operation.dialog.ok.action.stash.description=Stash local changes, {0}, unstash
smart.operation.dialog.operation.name.and.overwrite.local.changes={0} and overwrite local changes
smart.operation.dialog.git.operation.name.problem=Git {0} Problem
smart.operation.dialog.smart.operation.name=Smart {0}
smart.operation.dialog.don.t.operation.name=Don''t {0}
ssh.ask.passphrase.title=SSH Key Passphrase
ssh.ask.passphrase.message=Password for the SSH key "{0}":
ssh.changed.host.key=<html>The server host key for the host {0}:{1} has changed to {2} (type {3}).\nDo you want to accept the changed key?</html>
ssh.confirm.key.title=Confirm SSH Server Key
ssh.error.title=Authentication Error
ssh.keyboard.interactive.title=SSH Keyboard Interactive
ssh.keyboard.interactive.username=Username:
ssh.new.host.key=<html>Connecting to a new host {0}:{1,number,#} that has the key {2} (type {3}).\nDo you want to add this host to known hosts database?</html>
ssh.password.message=Password for user {0}:
ssh.password.title=SSH Password Login

stash.action.name=Stash
stash.button=Create Stash
stash.error.can.not.stash.changes.now=Can not stash changes now
stash.keep.index.tooltip=If this checkbox is selected, indexed changes are kept in the index.
stash.keep.index=Keep &index
stash.message.tooltip=Enter stash message here.
stash.message=&Message:
stash.progress.indicator.title=Stashing changes from ''{0}''...
stash.title=Stash
stash.unstash.conflict.dialog.description.label.text=Uncommitted changes that were stashed before update have conflicts with updated files.
stash.unstash.progress.indicator.title=Popping changes to ''{0}''...
stash.unstash.unresolved.conflict.warning.notification.message=Your uncommitted changes were saved to <a href='saver'>stash</a>.<br/>Unstash is not complete, you have unresolved merges in your working tree<br/><a href='resolve'>Resolve</a> conflicts and drop the stash.
stash.unstash.unresolved.conflict.warning.notification.title=Local changes were restored with conflicts
stashing.title=Stashing Changes...

tag.action.name=Tag
tag.button=Create Tag
tag.commit.label=&Commit:
tag.commit.tooltip=Enter name of commit or object to tag or leave blank to use HEAD.
tag.error.creating.message.file.message=Unable to create message file: {0}
tag.error.invalid.commit=The commit or object name is invalid.
tag.error.tag.exists=The tag with the same name exists.
tag.force.tooltip=Force creation of the tag even if another tag with such name already exists.
tag.force=&Force
tag.getting.existing.tags=Getting Existing Tags...
tag.message.label=&Message:
tag.message.tooltip=If the message is not empty, an annotated tag is created.
tag.name.label=Tag &Name:
tag.name.tooltip=Enter the new tag name here.
tag.title=Tag
tag.validate.tooltip=Click this button to validate the commit to be tagged
tag.validate=&Validate

unstash.action.name=UnStash
unstash.branch.label\:=As new &branch:
unstash.branch.tooltip=If non-empty name is entered, the stash is checked out as a new branch.
unstash.button.apply=Apply Stash
unstash.button.branch=Branch
unstash.button.pop=Pop Stash
unstash.clear.tooltip=Delete all stashes in the repository.
unstash.clear=&Clear
unstash.clearing.stashes=Clearing stashes...
unstash.drop.tooltip=Delete selected stash
unstash.drop=&Drop
unstash.conflict.dialog.description.label.text=Conflicts during unstashing {0}
unstash.conflict.diff.dialog.left.title=Local changes
unstash.conflict.diff.dialog.right.title=Changes from stash
unstash.dialog.remove.stash.progress.indicator.title=Removing stash {0}...
unstash.dialog.show.stashes.error.dialog.title=Couldn't Show the List of Stashes
unstash.dialog.stash.details.load.progress.indicator.title=Loading stash details...
unstash.dialog.stash.list.load.progress.indicator.title=Loading list of stashes...
unstash.dialog.unresolved.conflict.warning.notification.message=Unstash is not complete, you have unresolved merges in your working tree<br/><a href='resolve'>Resolve</a> conflicts.
unstash.dialog.unresolved.conflict.warning.notification.title=Conflicts were not resolved during unstash
unstash.pop.stash.tooltip=If selected the stash is dropped after it is applied.
unstash.pop.stash=&Pop stash
unstash.reinstate.index.tooltip=Attempt to reinstate index as well as working tree changes.
unstash.reinstate.index=Reinstate &index
unstash.stashes=&Stashes:
unstash.title=UnStash Changes
unstash.unstashing=Unstashing...
unstash.view.tooltip=View selected stash
unstash.view=&View
unstash.error.can.not.unstash.changes.now=Can not unstash changes now
unstash.unstashed.with.conflicts.error.title=Unstashed with conflicts

update.options.display.name=Git Update Settings
update.options.type.default=Branch &Default
update.options.type.merge=&Merge
update.options.type=Update Type
update.notification.update.error=Can't update
update.notification.choose.upstream.branch=Choose upstream branch
update.process.text=Update Project

util.remote.renderer.none=<html><i>None</i></html>
util.remote.renderer.self=<html><i>Current repository</i></html>
vfs.listener.add.single.prompt=Do you want to add the following file to Git?\n{0}\n\nIf you choose Cancel, you can still add it later manually.
vfs.listener.add.single.title=Add File to Git
vfs.listener.add.title=Add Files to Git
vfs.listener.checking.ignored=Checking for Ignored Files...
vfs.listener.delete.single.prompt=Do you want to delete the following file from Git?\n{0}\n\nIf you choose Cancel, you can still delete it later manually.
vfs.listener.delete.single.title=Delete File from Git
vfs.listener.delete.title=Delete Files from Git

git.commit.message.empty=Please specify commit message
git.commit.message.empty.title=Commit Message Is Empty

git.executable.version.progress.title=Identifying Git Version
git.executable.version.is=Git version is {0}

git.executable.validation.error.start.title=Cannot Run Git
git.executable.validation.error.version.title=Unsupported Git Version {0}
git.executable.validation.error.version.message=At least {0} is required
git.executable.validation.error.xcode.title=Accept XCode/iOS License to Run Git
git.executable.validation.error.xcode.message=Run \u201Csudo xcodebuild -license\u201D and retry (admin rights required)

git.executable.notification.title=Can't start Git
git.executable.notification.description=The path to Git executable is probably not valid.

executable.error.git.not.installed=Git is not installed
executable.mac.fix.path.action=Fix Path
executable.mac.error.invalid.path.to.command.line.tools=Invalid path to Command Line Tools

git.unstash.clear.confirmation.message=Remove all stashes? This cannot be undone.
git.unstash.clear.confirmation.title=Remove All Stashes?
git.unstash.drop.confirmation.message=<html>Do you want to remove {0}?<br/>"{1}"</html>
git.unstash.drop.confirmation.title=Remove Stash {0}?
vcs.history.action.gitlog=Show in Git Log

# suppress inspection "UnusedProperty": used by 3-party plugins
vcs.history.action.gitlog.error=Git Log is not Ready

# suppress inspection "UnusedProperty": used by ExportSettingsActionKt
exportable.Git.Application.Settings.presentable.name=Git

git.add.to.exclude.file.action.text=.git/info/exclude
git.add.to.exclude.file.action.description=Add entries to .git/info/exclude
git.open.exclude.file.action.text=Open .git/info/exclude
git.open.exclude.file.action.description=Open .git/info/exclude in editor

git.fetch.progress=Fetching...

action.CopyPathFromRepositoryRootProvider.text=Path From Repository Root
action.git4idea.commands.TestGitHttpLoginDialogAction.text=Test Git Login Dialog
action.Git.Log.DeepCompare.text=Not Cherry-Picked Commits
action.Git.Log.DeepCompare.description=Highlights commits which have not been cherry-picked to the current branch
group.Git.RepositoryContextMenu.text=_Repository
group.Git.ContextMenu.text=_Git
group.Git.Menu.text=_Git
action.Git.Rebase.Skip.text=Skip Commit
action.Git.Rebase.Continue.text=Continue Rebase
action.Git.Revert.Abort.text=Abort Revert
action.Git.CherryPick.Abort.text=Abort Cherry-Pick
action.Git.Merge.Abort.text=Abort Merge
action.Git.Rebase.Abort.text=Abort Rebase
action.Git.Rebase.text=Rebase...
action.Git.Pull.text=Pull...
action.Git.Fetch.text=Fetch
action.Git.Clone.text=Clone...
action.Git.Configure.Remotes.text=Remotes...
action.Git.Reset.text=Reset HEAD...
action.Git.Unstash.text=UnStash Changes...
action.Git.Stash.text=Stash Changes...
action.Git.Merge.text=Merge Changes...
action.Git.Tag.text=Tag...
action.Git.Branches.text=_Branches...
action.Git.ResolveConflicts.text=Resolve Conflicts...
action.Git.CompareWithBranch.text=Compare with Branch...
action.Git.Add.text=Add
action.Git.Commit.And.Push.Executor.text=Commit and &Push...
action.Git.Interactive.Rebase.text=Interactively Rebase from Here...
action.Git.Interactive.Rebase.description=Show the dialog for interactive rebase which allows to squash, fixup, reorder, remove and reword commits
action.Git.Squash.Into.Commit.text=Squash Into...
action.Git.Squash.Into.Commit.description=Create a squash commit
action.Git.Fixup.To.Commit.text=Fixup...
action.Git.Fixup.To.Commit.description=Create a fixup commit
action.Git.Rename.Local.Branch.text=Rename...
action.Git.Rename.Local.Branch.description=Rename a local branch
action.Git.New.Branch.description=Select only one branch to proceed create a new branch
action.Git.New.Branch.dialog.title=Create New Branch From {0}
action.Git.Update.Selected.text=Update Selected
action.Git.Update.Selected.description=Fetch remote tracking {0,choice,1#branch|2#branches} and fast-forward selected local {1,choice,1#branch|2#branches} (like `git fetch branch:branch`)
action.Git.Update.Selected.description.already.running=Update is already running
action.Git.Update.Selected.description.select.non.current=Select non current branches only
action.Git.Update.Selected.description.tracking.not.configured=Tracking branch doesn''t configured for selected {0,choice,1#branch|2#branches}
action.Git.Delete.Branch.title=Delete {0,choice,1#branch|2#branches}
action.Git.Compare.With.Current.title=Compare with Current
action.Git.Show.My.Branches.title=Show My Branches
action.Git.Show.My.Branches.description.not.support.indexing=Some of the repositories doesn't support indexing.
action.Git.Show.My.Branches.description.not.all.roots.indexed=Not all repositories are indexed.
action.Git.Show.My.Branches.description.not.graph.ready=The log is not ready yet, please wait a bit.
action.Git.Show.My.Branches.description.is.my.branch=A branch is 'My' if all exclusive commits of this branch are made by 'me', i.e. by current Git author.
action.Git.Show.My.Branches.description.calculating.branches.progress=Calculating My Branches
action.Git.Fetch.title=Fetch All Remotes
action.Git.Fetch.description.fetch.in.progress=Fetch in progress...
action.Git.Toggle.Favorite.title=Mark/Unmark As Favorite
action.Git.Loading.Branches.progress=Loading branches...
group.Git.Local.Branch.title=Local
group.Git.Remote.Branch.title=Remote
action.Git.Checkout.Branch.text=Checkout Selected...
action.Git.Checkout.Branch.description=Checkout selected branch
action.Git.Log.Hide.Branches.text=Hide Git Branches
action.Git.Log.Show.Branches.text=Branches
action.Git.Reword.Commit.text=Edit Commit Message...
action.Git.Reword.Commit.description=Change commit message via reword option of git rebase or amend
action.Git.Uncommit.text=Undo Commit...
action.Git.Uncommit.description=Undo last commit and put its changes into selected changelist
action.Git.Revert.In.Log.text=Revert Commit
action.Git.Revert.In.Log.description=Produce a new commit, which reverts the changes made in the original commit
action.Git.Reset.In.Log.text=Reset Current Branch to Here...
action.Git.CreateNewTag.text=New Tag...
action.Git.CreateNewTag.description=Create new tag pointing to this commit
action.Git.CreateNewBranch.text=New Branch...
action.Git.CreateNewBranch.description=Create new branch starting from the selected commit
group.Git.CheckoutGroup.text=Checkout
group.Git.CheckoutGroup.description=Checkout selected revision or a branch on selected commit
action.Git.BrowseRepoAtRevision.text=Show Repository at Revision
action.Git.Log.text=Show Git Repository Log...
action.Git.Init.text=Create Git Repository...
checkbox.dont.warn.again=Don't warn again
checkbox.run.git.hooks=Run Git hooks
action.NotificationAction.text.resolve=Resolve...
action.NotificationAction.GitDeleteBranchOperation.text.restore=Restore
action.NotificationAction.GitDeleteBranchOperation.text.view.commits=View Commits
action.NotificationAction.GitDeleteBranchOperation.text.delete.tracked.branch=Delete Tracked Branch
action.NotificationAction.GitDeleteTagOperation.text.restore=Restore
action.NotificationAction.GithubNotifications.text.configure=Configure...
action.NotificationAction.GitMergeAction.text.view.commits=View Commits
action.NotificationAction.GitRewordOperation.text.undo=Undo
action.NotificationAction.GitUpdateSession.text.view.commits=View Commits
settings.git.incoming.change.strategy.text.auto=Auto
settings.git.incoming.change.strategy.text.always=Always
settings.git.incoming.change.strategy.text.never=Never
settings.git.update.method.rebase.description=Rebase the current branch on top of incoming changes
settings.git.update.method.rebase=Rebase
settings.git.update.method.merge.description=Merge incoming changes into the current branch
settings.git.update.method.merge=Merge
settings.git.update.method.branch.default=Branch Default
clone.dialog.checking.git.version=Checking Git version...
push.dialog.push.tags=Push tags
push.dialog.push.tags.combo.current.branch=Current Branch
push.dialog.push.tags.combo.all=All
push.dialog.target.panel.define.remote=Define remote
push.dialog.target.panel.add.remote=Add Remote
push.dialog.target.panel.couldnt.add.remote=Couldn''t add remote: {0}
push.dialog.target.panel.adding.remote=Adding Remote...
push.dialog.target.panel.can.t.push=Can't push
push.dialog.target.panel.empty.repository=Empty repository
push.dialog.target.panel.detached.head=Detached HEAD
push.dialog.target.panel.new=New

install.download.and.install.action=Download and Install
install.installing.progress=Installing...
install.downloading.progress=Downloading...
install.success.message=Git has been installed
install.general.error=Couldn't install Git
install.mac.error.couldnt.start.command.line.tools=Couldn't start Command Line Tools installation
install.mac.requesting.command.line.tools=Requesting XCode Command Line Developer Tools

git.status.not.changed=Not Changed
git.status.renamed=Renamed
git.status.copied=Copied
git.status.type.changed=Type Changed
git.status.unmerged=Unmerged
git.status.untracked=Untracked
git.status.index={0} in the staging area
git.status.work.tree={0} in the working directory
git.status.unmerged.index={0} by us
git.status.unmerged.work.tree={0} by them
git.status.unmerged.both=both {0}

git.status.bar.widget.name=Git Branch

git.light.status.bar.display.name=Git
git.light.status.bar.tooltip=Current Git Branch: {0}
git.light.status.bar.text=Git: {0}
branches.selected.branches.updated.title=Selected {0,choice,1#branch|2#branches} Updated
branches.update.failed=Update Failed
branches.updating.process=Updating branches...
branches.checkout.failed.description=Can''t overwrite {0} branch because some commits can be lost
branches.creation.failed.title=New Branch Creation Failed
branches.checkout.failed.title=Checkout Failed
branches.checking.existing.commits.process=Checking Existing Commits...
branches.create.new.branch.dialog.title=Create New Branch
branches.tag.0=Tag ''{0}''
branches.branch.0=Branch ''{0}''
in.branches.all.repositories=In All Repositories
branches.tags=Tags
branches.branches=Branches
repositories=Repositories
common.remote.branches=Common Remote Branches
common.local.branches=Common Local Branches
update.checks.not.supported.git.2.9.required=Update Checks not Supported. Git 2.9+ Required
action.fetch.text=Fetch
fetching=Fetching...
branches.current.branch=current branch
branches.tracking.branch.doesn.t.configured.for.s=Tracking branch doesn''t configured for {0}
branches.update.is.already.running=Update is already running
branches.fetch.remote.and.fast.forward=Fetch remote tracking branch and fast-forward {0} (like `git fetch {1}:{1}`)
branches.update=Update
branches.checkout.and.rebase.onto.in.one.step=Checkout {0}, and rebase it onto {1} in one step (like `git rebase HEAD {2}`)
branches.checkout.and.rebase.onto.current=Checkout and Rebase onto Current
branches.rebase.is.not.possible.in.the.detached.head.state=Rebase is not possible in the detached HEAD state
branches.rebase.onto=Rebase {0} onto {1}
branches.rebase.current.onto.selected=Rebase Current onto Selected
branches.merge.into=Merge {0} into {1}
branches.merge.into.current=Merge into Current
branches.compare.the.current.working.tree.with=Compare the current working tree with the tree in {0}
branches.show.diff.with.working.tree=Show Diff with Working Tree
branches.show.commits.in=Show commits in {0} that are missing in {1}
branches.compare.with.current=Compare with Current
branches.new.branch.from.selected=New Branch from Selected...
branches.checkout.s=Checkout {0}
checkout.and.rebase=Checkout and Rebase
checkout.0=Checkout {0}
branch.0.already.exists.and.has.commits.which.do.not.exist.in.1.would.you.like.to.rebase.or.reset.them=Branch {0} already exists and has commits which do not exist in {1}. Would you like to rebase or reset them?
branches.checkout=Checkout
branches.renaming.branch.is.not.possible.before.the.first.commit=Renaming branch is not possible before the first commit
branches.rename.branch=Rename Branch {0}
branches.there.are.outgoing.commits=There are outgoing commits
branches.there.are.incoming.commits=There are incoming commits
branches.there.are.incoming.and.outgoing.commits=There are incoming and outgoing commits
branches.checkout.is.not.possible.before.the.first.commit=Checkout is not possible before the first commit
branches.checkout.tag.or.revision=Checkout Tag or Revision...
branches.enter.reference.branch.tag.name.or.commit.hash=Enter reference (branch, tag) name or commit hash:
branches.remote.branches=Remote Branches
branches.remote.branches.in.repo=Remote Branches in {0}
branches.local.branches=Local Branches
branches.local.branches.in.repo=Local Branches in {0}
branches.update.info.process=Update branches info...
git.rollback=&Rollback

new.branch.dialog.operation.create.name=Create
new.branch.dialog.operation.create.description=Create new branches in other repositories
new.branch.dialog.operation.checkout.name=Checkout
new.branch.dialog.operation.checkout.description=Checkout existing branches, and create new branches in other repositories
new.branch.dialog.operation.rename.name=Rename
new.branch.dialog.branch.name=New branch name:
new.branch.dialog.checkout.branch.checkbox=Checkout branch
new.branch.dialog.overwrite.existing.branch.checkbox=Overwrite existing branch
new.branch.dialog.overwrite.existing.branch.warning=Change the name or overwrite existing branch
new.branch.dialog.error.branch.name.invalid=Branch name {0} is not valid
new.branch.dialog.error.branch.already.exists=Branch name {0} already exists
new.branch.dialog.error.branch.clashes.with.remote=Branch name {0} clashes with remote branch with the same name
git.reset.mode.soft=Soft
git.reset.mode.soft.description=Files won't change, differences will be staged for commit.
git.reset.mode.mixed=Mixed
git.reset.mode.mixed.description=Files won't change, differences won't be staged.
git.reset.mode.hard=Hard
git.reset.mode.hard.description=<nobr>Files will be reverted to the state of the selected commit.<nobr/><br><nobr>Warning: any local changes will be lost.<nobr/>
git.reset.mode.keep=Keep
git.reset.mode.keep.description=<nobr>Files will be reverted to the state of the selected commit,<nobr/><br><nobr>but local changes will be kept intact.<nobr/>
git.reset.dialog.title=Git Reset
git.reset.dialog.description=<nobr>This will reset the current branch head to the selected commit,<nobr/><br><nobr>and update the working tree and the index according to the selected mode:<nobr/>
git.reset.dialog.description.commit.details.by.author={0} by {1}
git.reset.dialog.description.source.in.repository={0} in {1}
git.reset.process=Git Reset
git.reset.button=Reset
git.undo.action.cant.undo.commit.failure=Can't Undo Commit
git.undo.action.description=The selected commit is not the last in the current branch
git.undo.action.select.target.changelist.title=Select Target Changelist
git.undo.action.undoing.last.commit.process=Undoing Last Commit...
git.undo.action.refreshing.changes.process=Refreshing Changes...
git.undo.action.could.not.load.changes.of.commit=Couldn''t load changes of {0}
git.new.tag.dialog.title=Create New Tag On {0}
git.new.tag.dialog.tag.name.label=Enter the name of new tag

git.log.external.tab.description=Log for {0}
git.log.external.window.title=Git Log
git.log.external.loading.process=Loading Git Log...

git.log.cherry.picked.highlighter.select.branch.popup=Select Source Branch
git.log.cherry.picked.highlighter.process=Comparing Branches...
git.log.cherry.picked.highlighter.error.message=Couldn''t compare with branch {0}
git.log.cherry.picked.highlighter.cancelled.message=Highlighting of non-picked commits in ''{0}'' has been cancelled, \
  as branch filter was changed.

git.log.action.checkout.group=Checkout
git.log.action.checkout.revision.short.text=Revision ''{0}''
git.log.action.checkout.revision.full.text=Checkout Revision ''{0}''
action.Git.CheckoutRevision.text=Checkout Revision

git.log.diff.handler.process=Calculating Diff for {0}
git.log.diff.handler.failed.message={0} failed
git.log.diff.handler.paths.diff.title=Changes between {0} and {1} in {2}
git.log.diff.handler.local.version.name=local version
git.log.diff.handler.local.version.content.title=Local

git.log.refGroup.local=Local

git.history.diff.handler.choose.parent.popup=Choose Parent to Compare
git.history.diff.handler.load.changes.process=Loading changes...
git.history.diff.handler.git.show.error=Error happened while executing git show {0}:{1}
git.log.show.commit.in.log.process=Searching for Revision {0}
git.compare.branches.empty.status={0} contains all commits from {1}
git.compare.branches.swap.link=Swap Branches
git.compare.branches.explanation.message=Commits that exist in {0} but don''t exist in {1}
git.compare.branches.tab.name=Compare
git.compare.branches.tab.suffix={0} and {1}
git.update.files.updated.in.commits={0,choice,1#{0} file|2#{0} files} updated in {1,choice,1#{1} commit|2#{1} commits}
git.update.no.commits.matching.filters=No commits matching filters
git.update.commits.matching.filters={0,choice,1#{0} commit|2#{0} commits} matching filters
git.update.project.partially.updated.title=Project Partially Updated
git.update.skipped.repositories=Skipped {0} repositories:
git.update.repo.was.skipped={0} was skipped ({1})

git.integration.created.git.repository.in=Created Git repository in {0}
git.integration.could.not.git.init=Couldn''t git init {0}

git.tag.could.not.create.tag=Couldn't create tag
git.tag.created.tag.successfully=Created tag {0} successfully.

rename.branch.operation.name=rename
git.rename.branch.rollback.successful=Rollback successful
git.rename.branch.renamed.back.to=Renamed back to {0}
git.rename.branch.rollback.failed=Rollback failed
git.rename.branch.could.not.rename.from.to=Couldn''t rename {0} to {1}
git.rename.branch.was.renamed.to=Branch {0} was renamed to {1}
git.rename.branch.you.may.rename.branch.back=You may rollback (rename branch back to {0}) not to let branches diverge.
git.rename.branch.has.succeeded.for.the.following.repositories=However rename has succeeded for the following {0,choice,1#repository|2#repositories}:

update.process.progress.title=Updating...
update.process.generic.error.title=Can't update
update.process.error.message.unfinished.merge=You have unfinished merge. These conflicts must be resolved before update.
update.process.error.message.unmerged.files=Unmerged files detected. These conflicts must be resolved before update.
update.process.error.description.unfinished.rebase=You have unfinished rebase process. These conflicts must be resolved before update.
update.process.error.additional.description.unfinished.rebase=Then you may <b>continue rebase</b>. <br/> You also may <b>abort rebase</b> to restore the original branch and stop rebasing.

checkout.operation.could.not.checkout.error=Couldn''t checkout {0}
checkout.operation.revision.not.found=Revision not found{0,choice,0#|1# in {1}}
checkout.operation.rollback=Rollback
checkout.operation.could.not.checkout.error.title=Couldn''t checkout {0}
checkout.operation.checked.out=Checked out {0}
checkout.operation.checked.out.new.branch.from=Checked out new branch {0} from {1}
checkout.operation.in={0}{1,choice,0#|1# in {2}}
checkout.operation.force.checkout=&Force Checkout
checkout.operation.name=checkout
checkout.operation.error.during.rollback=Error during rollback
checkout.operation.errors.during.deleting=Errors during deleting {0}:
checkout.operation.errors.during.checkout=Errors during checkout:
checkout.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (checkout back to {0}) not to let branches diverge.
checkout.operation.previous.branch=previous branch
checkout.operation.however.checkout.has.succeeded.for.the.following=However checkout has succeeded for the following {0,choice,1#repository|2#repositories}:

delete.branch.operation.collecting.unmerged.commits.process=Collecting unmerged commits...
delete.branch.operation.restoring.branch.process=Restoring Branch {0}...
delete.branch.operation.error.during.rollback.of.branch.deletion=Error during rollback of branch deletion
delete.branch.operation.could.not.restore.branch.error=Couldn''t Restore {0}
delete.branch.operation.branch.was.not.deleted.error=Branch {0} wasn''t deleted
delete.branch.operation.deleted.branch=Deleted branch {0}
delete.branch.operation.deleted.branch.bold=<b>Deleted Branch:</b> {0}
delete.branch.operation.unmerged.commits.were.discarded=Unmerged commits were discarded
delete.branch.operation.however.branch.deletion.has.succeeded.for.the.following=However branch deletion has succeeded for the following {0,choice,1#repository|2#repositories}:
delete.branch.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (recreate {0} in these roots) not to let branches diverge.

branch.operation.could.not.0.operation.name.1.reference=Couldn''t {0} {1}
branch.operation.in={0} (in {1})

checkout.new.branch.operation.could.not.create.new.branch=Couldn''t create new branch {0}
checkout.new.branch.operation.error.during.rollback=Error during rollback
checkout.new.branch.operation.errors.during.deleting=Errors during deleting {0}:
checkout.new.branch.operation.errors.during.checkout=Errors during checkout:
checkout.new.branch.operation.rollback.successful=Rollback successful
checkout.new.branch.operation.checked.out.0.and.deleted.1.on.2.3=Checked out {0} and deleted {1} on {2,choice,1#root|2#roots} {3}
checkout.new.branch.operation.branch.was.created=Branch {0} was created
checkout.new.branch.operation.however.checkout.has.succeeded.for.the.following=However checkout has succeeded for the {0,choice,1#repository|2#repositories}:
checkout.new.branch.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (checkout previous branch back, and delete {0}) not to let branches diverge.

delete.branch.operation.name=branch deletion
delete.remote.branch.operation.deleting.process=Deleting {0}
delete.remote.branch.operation.deleted.remote.branch=Deleted remote branch {0}
delete.remote.branch.operation.also.deleted.local.branches=Also deleted local {0,choice,1#branch|2#branches}: {1}
delete.remote.branch.operation.failed.to.delete.remote.branch=Failed to delete remote branch {0}

delete.remote.tag.operation.deleted.tag.on.remotes=<b>Deleted Tag on {0,choice,1#Remote|2#Remotes}:</b> {1}
delete.remote.tag.operation.tag.does.not.exist.on.remotes=<b>Tag Doesn''t Exist on {0,choice,1#Remote|2#Remotes}:</b> {1}
delete.remote.tag.operation.failed.to.delete.tag.on.remotes=Failed to delete tag {0} on {1,choice,1#Remote|2#Remotes}

merge.dialog.description.cherry.pick.label.text=Conflicts during cherry-picking {0,choice,1#commit {1}|2#multiple commits}{2,choice,0#|1# made by {3}{4}}
merge.dialog.description.merge.label.text=Merging {0,choice,1#branch {1}|2#diverging branches} into {2,choice,1#branch {3}|2#diverging branches}
merge.dialog.description.rebase.with.hash.label.text=Rebasing{0,choice,0#|1# branch {1}} onto {2}
merge.dialog.description.rebase.with.onto.branch.label.text=Rebasing{0,choice,0#|1# branch {1}} onto branch {2}{3,choice,0#|1#, revision {4}}
merge.dialog.description.rebase.without.onto.info.label.text=Rebasing{0,choice,0#|1# branch {1}} onto diverging branches
merge.dialog.diff.left.title.cherry.pick.label.text=Local Changes
merge.dialog.diff.left.title.default.branch.label.text=Your version, branch {0}
merge.dialog.diff.left.title.rebase.label.text=Rebasing {0} from {1}
merge.dialog.diff.right.title.cherry.pick.label.text=Changes from cherry-pick {0}
merge.dialog.diff.right.title.default.with.hash.label.text=Changes from {0}
merge.dialog.diff.right.title.default.with.onto.branch.label.text=Changes from branch {0}{1,choice,0#|1#, revision {2}}
merge.dialog.diff.right.title.default.without.onto.info.label.text=Changes from diverging branches
merge.dialog.diff.right.title.rebase.with.branch.label.text=Already rebased commits and commits from {0}
merge.dialog.diff.right.title.rebase.without.branch.label.text=Already rebased commits
merge.dialog.diff.title.changes.from.branch.label.text=Changes from {0}
merge.operation.name=merge
merge.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (reset to the commit before merging) not to let branches diverge.
merge.operation.error.during.rollback=Error during rollback
merge.operation.branch.merged.with.conflicts={0} Merged with Conflicts
merge.operation.could.not.merge.branch=Could Not Merge {0}
merge.operation.already.up.to.date=Already up-to-date
merge.operation.however.merge.has.succeeded.for.the.following.repositories=However merge has succeeded for the following {0,choice,1#repository|2#repositories}:
merge.operation.merged.to=Merged {0} to {1}
merge.operation.delete.branch=Delete {0}

merge.unresolved.conflicts.remaining.notification.title=Unresolved Conflicts Remaining
merge.unresolved.conflicts.remaining.notification.body=Unresolved conflicts remaining in the project.

create.branch.operation.name=create branch
create.branch.operation.could.not.create.new.branch=Couldn''t create new branch {0}
create.branch.operation.rollback.successful=Rollback successful
create.branch.operation.deleted.branch=Deleted {0}
create.branch.operation.error.during.rollback=Error during rollback
create.branch.operation.branch.created=Branch {0} was created
create.branch.operation.however.the.branch.was.created.in.the.following.repositories=However the branch was created in the following {0,choice,1#repository|2#repositories}:
create.branch.operation.you.may.rollback.not.to.let.branches.diverge=You may rollback (delete {0}) not to let branches diverge.

branch.ui.handler.can.not.operation.name.because.of.unmerged.files=Can''t {0} because of unmerged files
branch.ui.handler.unmerged.files.error.notification=You have to <a href=''{0}''>resolve</a> all merge conflicts before {1}.<br/>After resolving conflicts you also probably would want to commit your files to the current branch.
branch.ui.handler.merge.notification.description=The following files have unresolved conflicts. You need to resolve them before {0}.
branch.ui.handler.merge.error.notification.title=Unresolved files remain.
branch.ui.handler.rollback=Rollback
branch.ui.handler.do.not.rollback=Don't Rollback
branch.ui.handler.you.have.to.resolve.all.conflicts.before.operation.name=You have to resolve all merge conflicts before {0}.<br/>{1}
branch.ui.handler.delete.remote.branches=Delete Remote {0,choice,1#Branch|2#Branches}
branch.ui.handler.delete.all=Delete All
branch.ui.handler.delete.remote.branches.question=Delete remote {0,choice,1#branch|2#branches} {1}?
branch.ui.handler.delete.tracking.local.branch.as.well=Delete tracking local branch {0} as well
branch.ui.handler.delete.tracking.local.branches=Delete tracking local branches:

delete.tag.operation.could.not.restore.tag=Couldn''t Restore {0}
delete.tag.operation.error.during.rollback.of.tag.deletion=Error during rollback of tag deletion
delete.tag.operation.restored.tag=Restored tag {0}
delete.tag.operation.rollback.successful=Rollback Successful
delete.tag.operation.restoring.tag.process=Restoring Tag {0}...
delete.tag.operation.deleted.tag=<b>Deleted Tag:</b> {0}
delete.tag.operation.delete.on.remote=Delete on {0,choice,1#Remote|2#Remotes}
delete.tag.operation.could.not.find.tag=Couldn''t find tag {0}
delete.tag.operation.could.not.find.tag.in=Couldn''t find tag in {0}
delete.tag.operation.tag.was.not.deleted=Tag {0} wasn''t deleted
delete.tag.operation.however.tag.deletion.has.succeeded.for.the.following=However tag deletion has succeeded for the following {0,choice,1#repository|2#repositories}:
delete.tag.operation.you.may.rollback.not.to.let.tags.diverge=You may rollback (recreate {0} in these roots) not to let tags diverge.

branch.renaming.branch.process=Renaming {0} to {1}...
branch.rebasing.process=Rebasing {0}...
branch.rebasing.onto.process=Rebasing onto {0}...
branch.merging.process=Merging {0}...
branch.deleting.tag.process=Deleting tag {0}...
branch.deleting.tag.on.remote.process=Deleting tag {0} on remote...
branch.deleting.remote.branch=Deleting {0}...
branch.deleting.branch.process=Deleting {0}...
branch.checking.out.new.branch.process=Checking out new branch {0}...
branch.creating.branch.process=Creating branch {0}...
branch.checking.out.branch.from.process=Checking out {0} from {1}...
branch.checking.out.process=Checking out {0}...
branch.compare.progress=Comparing with {0}...
compare.branches.error=Can't Compare with Branch
compare.branches.no.changes.message.title=No Changes Detected
compare.branches.no.changes.message.description=<html>There are no changes between <code>{0}</code> and <code>{1}</code></html>

branch.not.fully.merged.dialog.repository.label=Repository: 
branch.not.fully.merged.dialog.title=Branch Was Not Fully Merged
branch.not.fully.merged.dialog.restore.button=&Restore
branch.not.fully.merged.dialog.all.commits.from.branch.were.merged=All commits from branch {0} were merged
branch.not.fully.merged.dialog.the.branch.was.not.fully.merged.to=The branch {0} was not fully merged to {1}.<br/>Below is the list of unmerged commits.

merge.dialog.customizer.filter.by.conflicted.file.checkbox=Filter by conflicted file
merge.dialog.customizer.show.details.link.label=Show Details
merge.dialog.customizer.collecting.details.progress=Collecting Commits Details...

branch.worker.could.not.create.tag=Couldn''t create tag {0}{1,choice,0#|1#|2# in {2}}

commit.options.sign.off.commit.checkbox=Sign-off commit
commit.options.sign.off.commit.message.line=Adds the following line at the end of the commit message:<br/>Signed-off by: {0}
commit.options.create.extra.commit.with.file.movements=Create extra commit with file movements

show.diff.between.dialog.title=Show Diff Between {0} and Current Working Tree
show.diff.between.dialog.no.differences.empty.text=No differences
show.diff.between.dialog.could.not.load.diff.with.branch.error=Couldn''t load diff with {0}: {1}
annotations.options.detect.movements.across.files=Detect Movements Across Files
annotations.options.detect.movements.within.file=Detect Movements Within File
annotations.options.ignore.whitespaces=Ignore Whitespaces
annotations.options.group=Options
