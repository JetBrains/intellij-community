<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
  <name>Git</name>
  <id>Git4Idea</id>
  <description>
      <![CDATA[
      Provides integration with <a href="http://git-scm.com/">Git</a>.
        <ul>
        <li>Check out your source code from a Git repository</li>
        <li>Browse, commit, push, pull, merge, view log, review pull requests, and much more</li>
        <li>Dedicated item in the VCS menu and in the context menu</li>
        </ul>
         <p>To configure, open <b>Settings / Preferences</b> and go to <b>Version Control | Git</b>.</p>
      ]]>
   </description>
  <category>Version Controls</category>
  <vendor>JetBrains</vendor>

  <resource-bundle>messages.GitBundle</resource-bundle>

  <depends>com.intellij.modules.vcs</depends>
  <depends optional="true" config-file="git-terminal.xml">org.jetbrains.plugins.terminal</depends>
  <xi:include href="/META-INF/stage-plugin.xml" xpointer="xpointer(/idea-plugin/*)">
    <xi:fallback/>
  </xi:include>

  <actions>
    <action id="Git.Init" class="git4idea.actions.GitInit">
      <add-to-group group-id="Vcs.Import"/>
      <add-to-group group-id="Vcs.Operations.Popup.NonVcsAware" relative-to-action="Start.Use.Vcs" anchor="before"/>
    </action>

    <action id="Git.Log" class="git4idea.log.GitShowExternalLogAction">
      <add-to-group group-id="Vcs.Browse"/>
    </action>

    <action class="git4idea.log.GitShowCommitInLogAction" id="Git.SelectInGitLog">
      <add-to-group group-id="VcsSelectionHistoryDialog.Popup" anchor="after" relative-to-action="Vcs.CopyRevisionNumberAction"/>
    </action>
    <action class="git4idea.log.GitBrowseRepoAtRevisionAction" id="Git.BrowseRepoAtRevision"/>

    <group class="git4idea.actions.GitCheckoutActionGroup" id="Git.CheckoutGroup"/>
    <group class="git4idea.ui.branch.GitLogBranchOperationsActionGroup" id="Git.BranchOperationGroup"/>
    <action class="git4idea.actions.GitCheckoutRevisionAction" id="Git.CheckoutRevision"/>
    <action class="git4idea.actions.GitCreateNewBranchAction" id="Git.CreateNewBranch"/>
    <action class="git4idea.actions.GitCreateTagAction" id="Git.CreateNewTag"/>
    <action id="Git.Reset.In.Log" class="git4idea.reset.GitResetAction" icon="AllIcons.Actions.Rollback"/>
    <action id="Git.Revert.In.Log" class="git4idea.revert.GitRevertAction"/>
    <action id="Git.Uncommit" class="git4idea.reset.GitUncommitAction"/>
    <action id="Git.Reword.Commit" class="git4idea.rebase.GitRewordAction"/>
    <action id="Git.Rename.Local.Branch" class="git4idea.ui.branch.dashboard.BranchesDashboardActions$RenameLocalBranch"/>
    <action id="Git.Checkout.Branch" class="git4idea.ui.branch.dashboard.BranchesDashboardActions$CheckoutSelectedBranchAction"/>
    <action id="Git.Log.Hide.Branches" class="git4idea.ui.branch.dashboard.BranchesDashboardActions$HideBranchesAction"
            icon="AllIcons.Actions.ArrowCollapse"/>
    <action id="Git.Fixup.To.Commit" class="git4idea.rebase.GitCommitFixupBySubjectAction"/>
    <action id="Git.Squash.Into.Commit" class="git4idea.rebase.GitCommitSquashBySubjectAction"/>
    <action id="Git.Interactive.Rebase" class="git4idea.rebase.GitInteractiveRebaseAction"/>
    <action id="Git.Commit.And.Push.Executor" class="git4idea.actions.GitCommitAndPushExecutorAction">
      <add-to-group group-id="Vcs.CommitExecutor.Actions"/>
      <keyboard-shortcut first-keystroke="control alt K" keymap="$default"/>
    </action>

    <group id="GitFileActions">
      <reference ref="CheckinFiles"/>
      <action id="Git.Add" class="com.intellij.openapi.vcs.changes.actions.ScheduleForAdditionWithIgnoredFilesConfirmationAction"
              icon="AllIcons.General.Add" use-shortcut-of="ChangesView.AddUnversioned"/>
      <action id="Git.OpenExcludeFile" class="git4idea.ignore.actions.OpenGitExcludeAction"/>
      <separator/>
      <reference ref="Annotate"/>
      <reference ref="Show.Current.Revision"/>
      <reference ref="Compare.SameVersion"/>
      <reference ref="Compare.Selected"/>
      <action id="Git.CompareWithBranch" class="git4idea.actions.GitCompareWithBranchAction"/>
      <reference ref="Vcs.ShowTabbedFileHistory"/>
      <reference id="Vcs.ShowHistoryForBlock"/>
      <separator/>
      <reference id="ChangesView.Revert" />
      <action id="Git.ResolveConflicts" class="git4idea.actions.GitResolveConflictsAction"/>
    </group>

    <group id="GitRepositoryActions">
      <action id="Git.Branches" class="git4idea.ui.branch.GitBranchesAction" icon="AllIcons.Vcs.Branch">
        <keyboard-shortcut first-keystroke="control shift BACK_QUOTE" keymap="$default" />
        <keyboard-shortcut first-keystroke="meta shift BACK_QUOTE" keymap="Mac OS X" remove="true" />
        <keyboard-shortcut first-keystroke="meta shift BACK_QUOTE" keymap="Mac OS X 10.5+" remove="true" />
      </action>
      <action id="Git.Tag" class="git4idea.actions.GitTag"/>
      <action id="Git.Merge" class="git4idea.actions.GitMerge" icon="AllIcons.Actions.ShowAsTree"/>
      <action id="Git.Stash" class="git4idea.actions.GitStash"/>
      <action id="Git.Unstash" class="git4idea.actions.GitUnstash"/>
      <action id="Git.Reset" class="git4idea.actions.GitResetHead" icon="AllIcons.Actions.Rollback"/>
      <separator/>
      <action id="Git.Configure.Remotes" class="git4idea.remote.GitConfigureRemotesAction"/>
      <action id="Git.Clone" class="git4idea.actions.GitCloneAction"/>
      <action id="Git.Fetch" class="git4idea.actions.GitFetch"/>
      <action id="Git.Pull" class="git4idea.actions.GitPull" icon="AllIcons.Actions.CheckOut"/>
      <reference ref="Vcs.Push"/>
      <separator/>
      <action id="Git.Rebase" class="git4idea.actions.GitRebase"/>
      <action id="Git.Rebase.Abort" class="git4idea.actions.GitRebaseAbort"/>
      <action id="Git.Merge.Abort" class="git4idea.actions.GitAbortOperationAction$Merge"/>
      <action id="Git.CherryPick.Abort" class="git4idea.actions.GitAbortOperationAction$CherryPick"/>
      <action id="Git.Revert.Abort" class="git4idea.actions.GitAbortOperationAction$Revert"/>
      <action id="Git.Rebase.Continue" class="git4idea.actions.GitRebaseContinue"/>
      <action id="Git.Rebase.Skip" class="git4idea.actions.GitRebaseSkip"/>
    </group>

    <group id="Git.Ongoing.Rebase.Actions" popup="false">
      <!-- See GitOngoingOperationAction -->
      <reference id="Git.Rebase.Abort"/>
      <reference id="Git.Merge.Abort"/>
      <reference id="Git.CherryPick.Abort"/>
      <reference id="Git.Revert.Abort"/>
      <reference id="Git.Rebase.Continue"/>
      <reference id="Git.Rebase.Skip"/>
    </group>

    <group id="Git.Menu" class="git4idea.actions.GitMenu" popup="true">
      <reference ref="GitFileActions"/>
      <separator/>
      <reference ref="GitRepositoryActions"/>

      <add-to-group group-id="VcsGlobalGroup" anchor="after" relative-to-action="Vcs.Specific"/>
    </group>

    <group id="Git.ContextMenu" class="git4idea.actions.GitMenu" popup="true">
      <reference ref="GitFileActions"/>
      <separator/>
      <group id="Git.RepositoryContextMenu" popup="true">
        <reference ref="GitRepositoryActions"/>
      </group>
      <add-to-group group-id="VcsGroup" anchor="last"/>
    </group>

    <!--This group is empty and unused, left for plugins compatibility.-->
    <group id="Git.LogContextMenu"/>

    <group id="Git.FileHistory.ContextMenu">
      <reference id="Git.SelectInGitLog"/>
      <separator/>
      <reference id="Git.Revert.In.Log" />
      <separator/>
      <add-to-group group-id="Vcs.FileHistory.ContextMenu" relative-to-action="VcsHistoryActionsGroup" anchor="before"/>
    </group>

    <group id="Git.Log.ContextMenu.CheckoutBrowse">
      <reference id="Git.CheckoutGroup"/>
      <reference id="Git.BrowseRepoAtRevision"/>

      <add-to-group group-id="Vcs.Log.ContextMenu" relative-to-action="Vcs.Log.CompareRevisions" anchor="before"/>
    </group>

    <group id="Git.Log.ContextMenu">
      <reference id="Git.Reset.In.Log"/>
      <reference id="Git.Revert.In.Log"/>
      <reference id="Git.Uncommit"/>
      <separator/>
      <reference id="Git.Reword.Commit"/>
      <reference id="Git.Fixup.To.Commit" />
      <reference id="Git.Squash.Into.Commit" />
      <reference id="Git.Interactive.Rebase"/>
      <separator/>
      <reference id="Git.BranchOperationGroup"/>
      <reference id="Git.CreateNewBranch"/>
      <reference id="Git.CreateNewTag"/>
      <separator/>
      <add-to-group group-id="Vcs.Log.ContextMenu" relative-to-action="Vcs.Log.GoToChild" anchor="before"/>
    </group>

    <group id="Git.Log.Toolbar">
      <action id="Git.Log.DeepCompare" class="git4idea.branch.DeepCompareAction"/>
      <add-to-group group-id="Vcs.Log.PresentationSettings" relative-to-action="Vcs.Log.HighlightersActionGroup" anchor="after"/>
    </group>

    <group id="Git.Ignore.File" class="git4idea.ignore.actions.GitIgnoreFileActionGroup">
      <add-to-group group-id="ChangesViewPopupMenu" anchor="after" relative-to-action="ChangesView.AddUnversioned"/>
      <add-to-group group-id="GitFileActions" anchor="after" relative-to-action="Git.Add"/>
      <add-to-group group-id="Unversioned.Files.Dialog.Popup" anchor="after" relative-to-action="$Delete"/>
    </group>

    <action id="git4idea.commands.TestGitHttpLoginDialogAction" class="git4idea.commands.TestGitHttpLoginDialogAction" internal="true"/>
    <action id="CopyPathFromRepositoryRootProvider" class="git4idea.actions.CopyPathFromRepositoryRootProvider">
      <add-to-group group-id="CopyFileReference"/>
      <add-to-group group-id="CopyGroup" relative-to-action="CopySourceRootPath" anchor="after"/>
    </action>
  </actions>

  <extensions defaultExtensionNs="com.intellij">
    <search.projectOptionsTopHitProvider implementation="git4idea.config.GitOptionsTopHitProvider"/>
    <vcs name="Git" vcsClass="git4idea.GitVcs" displayName="Git" administrativeAreaName=".git"/>
    <checkoutProvider implementation="git4idea.checkout.GitCheckoutProvider" order="first"/>
    <vcs.checkoutProcessor implementation="git4idea.checkout.GitCheckoutProcessor"/>
    <vcsRootChecker implementation="git4idea.roots.GitRootChecker"/>
    <vcsIgnoreChecker implementation="git4idea.ignore.GitIgnoreChecker"/>
    <vcsRepositoryCreator implementation="git4idea.repo.GitRepositoryCreator"/>
    <vcsPopupProvider implementation="git4idea.actions.GitQuickListContentProvider"/>
    <vcsCheckinHandlerFactory implementation="git4idea.checkin.GitCheckinHandlerFactory"/>
    <vcsCheckinHandlerFactory implementation="git4idea.rebase.GitRebaseCheckinHandlerFactory"/>
    <checkinHandlerFactory implementation="git4idea.checkin.GitSkipHooksCommitHandlerFactory" order="last"/>
    <unresolvedMergeCheckProvider implementation="git4idea.checkin.GitUnresolvedMergeCheckProvider"/>
    <logProvider implementation="git4idea.log.GitLogProvider"/>
    <vcsChangesViewRefresher implementation="git4idea.changes.GitChangesViewRefresher" />
    <vcs.branchStateProvider implementation="git4idea.branch.GitBranchStateProvider"/>
    <pushSupport implementation="git4idea.push.GitPushSupport"/>
    <cherryPicker implementation="git4idea.cherrypick.GitCherryPicker"/>
    <vcsAnnotationGutterActionProvider implementation="git4idea.actions.GitToggleAnnotationOptionsActionProvider" />
    <vcsAnnotationGutterActionProvider implementation="git4idea.actions.GitShowCommitInLogAnnotationGutterActionProvider" />
    <statistics.projectUsagesCollector implementation="git4idea.GitStatisticsCollector"/>
    <vcsRepositoryInitializer implementation="git4idea.repo.GitRepositoryInitializer"/>
    <openapi.vcs.changes.actions.diff.ChangeDiffRequestProvider
        implementation="git4idea.diff.GitSubmoduleDiffRequestProvider"/>
    <vcsChangesViewRefresher implementation="git4idea.ignore.GitIgnoredFilesHolder$Provider"/>
    <vcs.ignoredFilesHolder implementation="git4idea.ignore.GitIgnoredFilesHolder$Provider"/>
    <projectConfigurable id="vcs.Git" displayName="Git" instance="git4idea.config.GitVcsPanel"
                         parentId="project.propVCSSupport.Mappings" groupWeight="-500"/>

    <projectService serviceImplementation="git4idea.repo.GitRepositoryManager"/>
    <projectService serviceImplementation="git4idea.ui.branch.GitBranchManager"/>
    <projectService serviceImplementation="git4idea.branch.GitBranchIncomingOutgoingManager"/>
    <projectService serviceImplementation="git4idea.checkin.GitCheckinEnvironment"/>
    <projectService serviceImplementation="git4idea.status.GitChangeProvider"/>
    <projectService serviceImplementation="git4idea.checkin.GitCommitAndPushExecutor"/>
    <projectService serviceImplementation="git4idea.changes.GitOutgoingChangesProvider"/>
    <projectService serviceImplementation="git4idea.changes.GitCommittedChangeListProvider"/>
    <projectService serviceImplementation="git4idea.update.GitUpdateEnvironment"/>
    <projectService serviceImplementation="git4idea.config.GitVcsSettings" configurationSchemaKey="versionControl.git"/>
    <projectService serviceImplementation="git4idea.config.GitRebaseSettings"/>
    <projectService serviceImplementation="git4idea.config.GitSharedSettings" />
    <projectService serviceImplementation="git4idea.rebase.interactive.GitRewordedCommitMessageProvider"/>
    <projectService serviceInterface="git4idea.branch.GitBrancher"
                    serviceImplementation="git4idea.branch.GitBrancherImpl"/>
    <projectService serviceImplementation="git4idea.branch.DeepComparatorHolder"/>
    <projectService serviceImplementation="git4idea.config.GitExecutableProblemsNotifier"/>
    <projectService serviceImplementation="git4idea.update.GitUpdateProjectInfoLogProperties"/>
    <projectService serviceImplementation="git4idea.branch.GitCompareBranchesLogProperties"/>
    <projectService serviceInterface="git4idea.fetch.GitFetchSupport" serviceImplementation="git4idea.fetch.GitFetchSupportImpl" />
    <projectService serviceImplementation="git4idea.ui.branch.dashboard.BranchesTreeStateHolder"/>

    <applicationService serviceImplementation="git4idea.config.GitVcsApplicationSettings"/>
    <applicationService serviceImplementation="org.jetbrains.git4idea.ssh.GitXmlRpcNativeSshService"/>
    <applicationService serviceInterface="git4idea.commands.GitHttpAuthService"
                        serviceImplementation="git4idea.commands.GitHttpAuthServiceImpl" />
    <applicationService serviceImplementation="git4idea.rebase.GitRebaseEditorService"/>
    <applicationService serviceImplementation="git4idea.config.SSHConnectionSettings"/>
    <applicationService serviceImplementation="git4idea.remote.GitRememberedInputs"/>
    <applicationService serviceInterface="git4idea.commands.Git"
                        serviceImplementation="git4idea.commands.GitImpl"/>
    <applicationService serviceImplementation="git4idea.config.GitExecutableManager"/>
    <applicationService serviceImplementation="git4idea.DialogManager" />
    <applicationService serviceImplementation="git4idea.log.GitExternalLogTabsProperties"/>

    <applicationService serviceImplementation="git4idea.light.LightGitTracker"/>

    <fileType name="PLAIN_TEXT" fileNames=".gitmodules"/>
    <vcs.taskHandler implementation="git4idea.GitTaskHandler"/>

    <logHighlighterFactory implementation="git4idea.branch.DeepComparator$Factory"/>

    <ignoredFileContentProvider implementation="git4idea.ignore.GitIgnoredFileContentProvider"/>
    <openapi.vcs.changes.vcsPreservingExecutor implementation="git4idea.util.GitPreservingExecutor"/>
    <editorNotificationProvider implementation="git4idea.conflicts.MergeConflictResolveUtil$NotificationProvider"/>
    <codeInsight.linkHandler prefix="#git_commit/" handlerClass="git4idea.log.GitCommitTooltipLinkHandler"/>

    <!-- Git ignore lang -->
    <fileType language="GitIgnore" extensions="gitignore" fieldName="INSTANCE" name="GitIgnore file" implementationClass="git4idea.ignore.lang.GitIgnoreFileType"/>
    <lang.parserDefinition language="GitIgnore"
                           implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreParserDefinition"/>
    <codeInsight.lineMarkerProvider language="GitIgnore"
                                    implementationClass="com.intellij.openapi.vcs.changes.ignore.codeInsight.IgnoreDirectoryMarkerProvider"/>
    <lang.braceMatcher language="GitIgnore" implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreBraceMatcher"/>
    <lang.commenter language="GitIgnore" implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreCommenter"/>
     <!--END Git ignore lang-->

    <!-- Git exclude lang -->
    <fileType language="GitExclude" fileNames="exclude" fieldName="INSTANCE" name="GitExclude file" implementationClass="git4idea.ignore.lang.GitExcludeFileType"/>
    <lang.fileViewProviderFactory language="GitExclude"
                                  implementationClass="git4idea.ignore.lang.GitExcludeViewProviderFactory"/>
    <lang.parserDefinition language="GitExclude"
                           implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreParserDefinition"/>
    <codeInsight.lineMarkerProvider language="GitExclude"
                                    implementationClass="com.intellij.openapi.vcs.changes.ignore.codeInsight.IgnoreDirectoryMarkerProvider"/>
    <lang.braceMatcher language="GitExclude" implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreBraceMatcher"/>
    <lang.commenter language="GitExclude" implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreCommenter"/>
     <!--END Git exclude lang-->

    <backgroundPostStartupActivity implementation="git4idea.ignore.GitIgnoreInStoreDirGeneratorActivity"/>
    <backgroundPostStartupActivity implementation="git4idea.config.GitSetupProjectConfig" />

    <registryKey key="git.update.incoming.info.time" defaultValue="20"
                 description="Time period (in minutes) between incoming commits checks." restartRequired="true"/>

    <registryKey key="git.commit.completion.fixup.squash" defaultValue="false"
                 description="Provide completion for fixup and squash prefixes in commit message field" restartRequired="false"/>

    <registryKey key="git.interactive.rebase.collect.entries.using.log" defaultValue="true"
                 description="Use Log to collect Rebase Entries"/>

    <vcs.actions.ScheduleForAdditionActionExtension implementation="git4idea.actions.GitAdd"/>
    <completion.contributor language="TEXT" implementationClass="git4idea.commit.GitCommitCompletionContributor"
                            order="first, before commitCompletion"/>

    <customVcsLogUiFactoryProvider implementation="git4idea.ui.branch.dashboard.BranchesInGitLogUiFactoryProvider"/>

    <statusBarWidgetFactory implementation="git4idea.light.LightGitStatusBarWidgetFactory"/>
    <lightEditTabAttributesProvider implementation="git4idea.light.LightGitTabAttributesProvider"/>
    <statusBarWidgetFactory id="gitWidget"
                            implementation="git4idea.ui.branch.GitBranchWidget$Factory"
                            order="after codeStyleWidget,before readOnlyWidget"/>

    <vcsBulkMovesOnlyChangesFilter implementation="git4idea.GitBulkMovesOnlyChangesFilter"/>
  </extensions>

  <extensionPoints>
    <extensionPoint interface="git4idea.remote.GitHttpAuthDataProvider" name="GitHttpAuthDataProvider" dynamic="true"/>
    <extensionPoint interface="git4idea.remote.GitRepositoryHostingService" name="gitRepositoryHostingService" dynamic="true"/>
    <extensionPoint interface="git4idea.checkin.GitCheckinExplicitMovementProvider"
                    name="GitCheckinExplicitMovementProvider"
                    dynamic="true"/>
  </extensionPoints>

  <projectListeners>
    <listener class="git4idea.conflicts.GitConflictsToolWindowManager$MyConflictsListener"
              topic="git4idea.repo.GitConflictsHolder$ConflictsListener"
              activeInHeadlessMode="false"/>
    <listener class="git4idea.conflicts.GitConflictsToolWindowManager$MyRepositoryListener"
              topic="com.intellij.dvcs.repo.VcsRepositoryMappingListener"
              activeInHeadlessMode="false"/>
    <listener class="git4idea.ui.branch.GitBranchWidget$Listener"
              topic="com.intellij.dvcs.repo.VcsRepositoryMappingListener"
              activeInHeadlessMode="false" activeInTestMode="false"/>
  </projectListeners>
</idea-plugin>
