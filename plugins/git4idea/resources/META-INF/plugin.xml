<idea-plugin package="git4idea">
  <name>Git</name>
  <id>Git4Idea</id>
  <description>
    <![CDATA[
      Provides integration with <a href="http://git-scm.com/">Git</a>.
        <ul>
        <li>Check out your source code from a Git repository</li>
        <li>Browse, commit, push, pull, merge, view log, review pull requests, and much more</li>
        <li>Dedicated item in the VCS menu and in the context menu</li>
        </ul>
         <p>To configure, open <b>Settings / Preferences</b> and go to <b>Version Control | Git</b>.</p>
      ]]>
   </description>
  <category>Version Controls</category>
  <vendor>JetBrains</vendor>

  <resource-bundle>messages.GitBundle</resource-bundle>

  <depends>com.intellij.modules.vcs</depends>
  <depends optional="true" config-file="git-terminal.xml">org.jetbrains.plugins.terminal</depends>

  <actions>
    <action id="Git.Init" class="git4idea.actions.GitInit">
      <add-to-group group-id="Vcs.Import"/>
      <add-to-group group-id="Vcs.Operations.Popup.NonVcsAware" relative-to-action="Start.Use.Vcs" anchor="before"/>
    </action>

    <action id="Git.Log" class="git4idea.log.GitShowExternalLogAction">
      <add-to-group group-id="Vcs.Browse"/>
    </action>

    <action class="git4idea.log.GitShowCommitInLogAction" id="Git.SelectInGitLog">
      <add-to-group group-id="VcsSelectionHistoryDialog.Popup" anchor="after" relative-to-action="Vcs.CopyRevisionNumberAction"/>
    </action>
    <action class="git4idea.log.GitBrowseRepoAtRevisionAction" id="Git.BrowseRepoAtRevision"/>

    <group class="git4idea.actions.GitCheckoutActionGroup" id="Git.CheckoutGroup"/>
    <group class="git4idea.ui.branch.GitLogBranchOperationsActionGroup" id="Git.BranchOperationGroup"/>
    <action class="git4idea.actions.GitCheckoutRevisionAction" id="Git.CheckoutRevision"/>
    <action class="git4idea.actions.GitCreateNewBranchAction" id="Git.CreateNewBranch"/>
    <action class="git4idea.actions.GitCreateTagAction" id="Git.CreateNewTag"/>
    <action id="Git.Reset.In.Log" class="git4idea.reset.GitResetAction" icon="AllIcons.Actions.Rollback"/>
    <action id="Git.Revert.In.Log" class="git4idea.revert.GitRevertAction"/>
    <action id="Git.Uncommit" class="git4idea.reset.GitUncommitAction"/>
    <action id="Git.Reword.Commit" class="git4idea.rebase.GitRewordAction"/>
    <action id="Git.Squash.Commits" class="git4idea.rebase.log.squash.GitSquashLogAction"/>
    <action id="Git.Drop.Commits" class="git4idea.rebase.log.drop.GitDropLogAction"/>
    <action id="Git.Rename.Local.Branch" class="git4idea.ui.branch.dashboard.BranchesDashboardActions$RenameLocalBranch"/>
    <action id="Git.Checkout.Branch" class="git4idea.ui.branch.dashboard.BranchesDashboardActions$CheckoutSelectedBranchAction"/>
    <action id="Git.Log.Branches.Change.Branch.Filter" class="git4idea.ui.branch.dashboard.BranchesDashboardActions$UpdateBranchFilterInLogAction">
      <mouse-shortcut keystroke="button1 doubleClick" keymap="$default"/>
      <keyboard-shortcut first-keystroke="ENTER" keymap="$default"/>
    </action>
    <action id="Git.Log.Branches.Navigate.Log.To.Selected.Branch"
            icon="AllIcons.General.Locate"
            use-shortcut-of="SelectIn"
            class="git4idea.ui.branch.dashboard.BranchesDashboardActions$NavigateLogToSelectedBranchAction"/>
    <action id="Git.Log.Hide.Branches" class="git4idea.ui.branch.dashboard.BranchesDashboardActions$HideBranchesAction"
            icon="AllIcons.Actions.ArrowCollapse"/>
    <group id="Git.Log.Branches.Settings" popup="true" icon="AllIcons.General.GearPlain">
      <separator key="group.Git.Log.Branches.Settings.Separator.text"/>
      <action id="Git.Log.Branches.Change.Branch.Filter.On.Selection"
              class="git4idea.ui.branch.dashboard.BranchesDashboardActions$ChangeBranchFilterAction"/>
      <action id="Git.Log.Branches.Navigate.Log.To.Branch.On.Selection"
              class="git4idea.ui.branch.dashboard.BranchesDashboardActions$NavigateLogToBranchAction"/>
    </group>
    <group id="Git.Log.Branches.Grouping.Settings" icon="AllIcons.Actions.GroupBy"
           class="git4idea.ui.branch.dashboard.BranchesDashboardActions$GroupingSettingsGroup">
      <separator key="group.Git.Log.Branches.Grouping.Settings.text"/>
      <action id="Git.Log.Branches.GroupBy.Directory"
              icon="AllIcons.Actions.GroupByPackage"
              class="git4idea.ui.branch.dashboard.BranchesDashboardActions$GroupBranchByDirectoryAction"/>
      <action id="Git.Log.Branches.GroupBy.Repository"
              class="git4idea.ui.branch.dashboard.BranchesDashboardActions$GroupBranchByRepositoryAction"/>
    </group>
    <action id="Git.Fixup.To.Commit" class="git4idea.rebase.GitCommitFixupBySubjectAction"/>
    <action id="Git.Squash.Into.Commit" class="git4idea.rebase.GitCommitSquashBySubjectAction"/>
    <action id="Git.Interactive.Rebase" class="git4idea.rebase.GitInteractiveRebaseAction"/>
    <action id="Git.Commit.And.Push.Executor" class="git4idea.actions.GitCommitAndPushExecutorAction">
      <add-to-group group-id="Vcs.Commit.PrimaryCommitActions"/>
      <keyboard-shortcut first-keystroke="control alt K" keymap="$default"/>
    </action>

    <group id="Git.FileActions">
      <reference ref="CheckinFiles"/>
      <action id="Git.Add" class="com.intellij.openapi.vcs.changes.actions.ScheduleForAdditionWithIgnoredFilesConfirmationAction"
              icon="AllIcons.General.Add" use-shortcut-of="ChangesView.AddUnversioned"/>
      <separator/>
      <reference ref="Annotate"/>
      <reference ref="Compare.SameVersion"/>
      <reference ref="Compare.Selected"/>
      <action id="Git.CompareWithBranch" class="git4idea.actions.GitCompareWithBranchAction"/>
      <reference ref="Vcs.ShowTabbedFileHistory"/>
      <reference id="Vcs.ShowHistoryForBlock"/>
    </group>

    <group id="Git.MainMenu.FileActions" class="git4idea.actions.GitFileActionGroup" popup="true">
      <reference ref="Git.FileActions"/>
    </group>

    <group id="Git.MainMenu.RebaseActions" class="git4idea.actions.GitRepositoryStateActionGroup$Rebase" popup="true">
      <action id="Git.Rebase.Abort" class="git4idea.actions.GitRebaseAbort"/>
      <action id="Git.Rebase.Continue" class="git4idea.actions.GitRebaseContinue"/>
      <action id="Git.Rebase.Skip" class="git4idea.actions.GitRebaseSkip"/>
    </group>

    <group id="Git.MainMenu.MergeActions" class="git4idea.actions.GitRepositoryStateActionGroup$Merge" icon="AllIcons.Vcs.Merge">
      <action id="Git.Merge.Abort" class="git4idea.actions.GitAbortOperationAction$Merge"/>
    </group>

    <group id="Git.MainMenu.LocalChanges" popup="true">
      <reference ref="ChangesView.Shelve"/>
      <reference ref="Vcs.Show.Shelf"/>
      <action id="Git.Stash" class="git4idea.actions.GitStash"/>
      <action id="Git.Unstash" class="git4idea.actions.GitUnstash"/>
      <reference ref="ChangesView.Revert" />
      <reference ref="Vcs.UmlDiff" />
    </group>

    <group id="Git.MainMenu" class="git4idea.actions.GitMainMenuActionGroup" searchable="false">

      <reference ref="CheckinProject"/>
      <reference ref="Vcs.Push"/>
      <reference ref="Vcs.UpdateProject"/>
      <action id="Git.Pull" class="git4idea.actions.GitPull"/>
      <action id="Git.Fetch" class="git4idea.actions.GitFetch" icon="AllIcons.Vcs.Fetch"/>
      <separator/>
      <action id="Git.Merge" class="git4idea.actions.GitMerge" icon="AllIcons.Vcs.Merge"/>
      <reference ref="Git.MainMenu.MergeActions"/>
      <action id="Git.Rebase" class="git4idea.actions.GitRebase"/>
      <reference ref="Git.MainMenu.RebaseActions"/>
      <action id="Git.ResolveConflicts" class="git4idea.actions.GitResolveConflictsAction"/>
      <separator/>
      <action id="Git.Branches" class="git4idea.ui.branch.GitBranchesAction" icon="AllIcons.Vcs.Branch">
        <keyboard-shortcut first-keystroke="control shift BACK_QUOTE" keymap="$default" />
        <keyboard-shortcut first-keystroke="meta shift BACK_QUOTE" keymap="Mac OS X" remove="true" />
        <keyboard-shortcut first-keystroke="meta shift BACK_QUOTE" keymap="Mac OS X 10.5+" remove="true" />
      </action>
      <reference ref="Git.CreateNewBranch"/>
      <action id="Git.Tag" class="git4idea.actions.GitTag"/>
      <action id="Git.Reset" class="git4idea.actions.GitResetHead" icon="AllIcons.Actions.Rollback"/>
      <separator/>
      <reference ref="Vcs.Show.Log"/>
      <reference id="Patch.MainMenu"/>
      <reference id="Git.MainMenu.LocalChanges"/>
      <reference id="Git.MainMenu.FileActions"/>
      <separator/>
      <action id="Git.Configure.Remotes" class="git4idea.remote.GitConfigureRemotesAction"/>
      <action id="Git.Clone" class="git4idea.actions.GitCloneAction"/>
      <separator/>
      <reference id="Vcs.QuickListPopupAction" />
      <separator/>
      <action id="Git.Revert.Abort" class="git4idea.actions.GitAbortOperationAction$Revert"/>
      <action id="Git.CherryPick.Abort" class="git4idea.actions.GitAbortOperationAction$CherryPick"/>

      <add-to-group group-id="VcsGroups" relative-to-action="Vcs.MainMenu" anchor="after"/>
    </group>

    <group id="GitRepositoryActions">
      <reference ref="Vcs.Push"/>
      <reference ref="Git.Pull"/>
      <reference ref="Git.Fetch"/>
      <separator/>
      <reference ref="Git.Merge"/>
      <reference ref="Git.MainMenu.MergeActions"/>
      <reference ref="Git.Rebase"/>
      <reference ref="Git.MainMenu.RebaseActions"/>
      <separator/>
      <reference ref="Git.Branches"/>
      <reference ref="Git.CreateNewBranch"/>
      <reference ref="Git.Tag"/>
      <reference ref="Git.Reset"/>
      <separator/>
      <reference ref="Git.Stash"/>
      <reference ref="Git.Unstash"/>
      <separator/>
      <reference ref="Git.Configure.Remotes"/>
      <reference ref="Git.Clone"/>
      <separator/>
      <reference ref="Git.Revert.Abort"/>
      <reference ref="Git.CherryPick.Abort"/>
    </group>

    <group id="Git.Ongoing.Rebase.Actions" popup="false">
      <!-- See GitOngoingOperationAction -->
      <reference id="Git.Rebase.Abort"/>
      <reference id="Git.Merge.Abort"/>
      <reference id="Git.CherryPick.Abort"/>
      <reference id="Git.Revert.Abort"/>
      <reference id="Git.Rebase.Continue"/>
      <reference id="Git.Rebase.Skip"/>
    </group>

    <group id="Git.Menu" class="git4idea.actions.GitMenu" popup="true" searchable="false">
      <reference ref="Git.FileActions"/>
      <separator/>
      <reference ref="ChangesView.Revert" />
      <separator/>
      <reference ref="GitRepositoryActions"/>
      <add-to-group group-id="VcsGlobalGroup" anchor="after" relative-to-action="Vcs.Specific"/>
    </group>

    <group id="Git.ContextMenu" class="git4idea.actions.GitMenu" popup="true" searchable="false">
      <reference ref="Git.FileActions"/>
      <reference ref="Show.Current.Revision"/>
      <reference ref="ChangesView.Revert" />
      <reference ref="ChangesView.RevertFiles" />
      <separator/>
      <reference ref="Git.ResolveConflicts" />
      <separator/>
      <reference ref="GitRepositoryActions"/>
      <add-to-group group-id="VcsGroup" anchor="last"/>
    </group>

    <action id="Vcs.ShowBranches" class="git4idea.actions.GitBranchesComboBoxAction" icon="AllIcons.Vcs.Branch">
      <add-to-group group-id="SegmentedVcsActionsBarGroup" anchor="first"/>
    </action>

    <action id="Vcs.ShowMoreActions" class="git4idea.actions.GitQuickActionsToolbarPopup" icon="AllIcons.Actions.More">
      <add-to-group group-id="SegmentedVcsActionsBarGroup" anchor="last"/>
    </action>

    <!--This group is empty and unused, left for plugins compatibility.-->
    <group id="Git.LogContextMenu"/>

    <group id="Git.FileHistory.ContextMenu">
      <reference id="Git.SelectInGitLog"/>
      <separator/>
      <reference id="Git.Revert.In.Log" />
      <separator/>
      <add-to-group group-id="Vcs.FileHistory.ContextMenu" relative-to-action="VcsHistoryActionsGroup" anchor="before"/>
    </group>

    <group id="Git.Log.ContextMenu.CheckoutBrowse">
      <reference id="Git.CheckoutGroup"/>
      <reference id="Git.BrowseRepoAtRevision"/>

      <add-to-group group-id="Vcs.Log.ContextMenu" relative-to-action="Vcs.Log.CompareRevisions" anchor="before"/>
    </group>

    <group id="Git.Log.ContextMenu">
      <reference id="Git.Reset.In.Log"/>
      <reference id="Git.Revert.In.Log"/>
      <reference id="Git.Uncommit"/>
      <separator/>
      <reference id="Git.Reword.Commit"/>
      <reference id="Git.Fixup.To.Commit" />
      <reference id="Git.Squash.Into.Commit" />
      <reference id="Git.Drop.Commits"/>
      <reference id="Git.Squash.Commits" />
      <reference id="Git.Interactive.Rebase"/>
      <separator/>
      <reference id="Git.BranchOperationGroup"/>
      <reference id="Git.CreateNewBranch"/>
      <reference id="Git.CreateNewTag"/>
      <separator/>
      <add-to-group group-id="Vcs.Log.ContextMenu" relative-to-action="Vcs.Log.GoToChild" anchor="before"/>
    </group>

    <group id="Git.Log.Toolbar">
      <action id="Git.Log.DeepCompare" class="git4idea.branch.DeepCompareAction"/>
      <add-to-group group-id="Vcs.Log.PresentationSettings" relative-to-action="Vcs.Log.HighlightersActionGroup" anchor="after"/>
    </group>

    <action id="Git.OpenExcludeFile" class="git4idea.ignore.actions.OpenGitExcludeAction"/>
    <group id="Git.Ignore.File" class="git4idea.ignore.actions.GitIgnoreFileActionGroup">
      <add-to-group group-id="ChangesViewPopupMenu" anchor="after" relative-to-action="ChangesView.AddUnversioned"/>
      <add-to-group group-id="Git.FileActions" anchor="after" relative-to-action="Git.Add"/>
      <add-to-group group-id="Unversioned.Files.Dialog.Popup" anchor="after" relative-to-action="$Delete"/>
    </group>

    <action id="git4idea.commands.TestGitHttpLoginDialogAction" class="git4idea.commands.TestGitHttpLoginDialogAction" internal="true"/>
    <action id="CopyPathFromRepositoryRootProvider" class="git4idea.actions.CopyPathFromRepositoryRootProvider">
      <add-to-group group-id="CopyFileReference"/>
    </action>

    <action id="Git.Show.Stage" class="git4idea.index.actions.GitShowStagingAreaAction"/>
    <action id="Git.Commit.Stage" class="git4idea.index.actions.GitCommitWithStagingAreaAction" use-shortcut-of="CheckinProject" icon="AllIcons.Actions.Commit">
      <add-to-group group-id="Git.MainMenu" anchor="after" relative-to-action="CheckinProject"/>
      <add-to-group group-id="VcsToolbarActions" anchor="after" relative-to-action="CheckinProject"/>
      <add-to-group group-id="VcsNavBarToolbarActions" anchor="after" relative-to-action="CheckinProject"/>
    </action>
    <action id="Git.Stage.Add" class="git4idea.index.actions.GitAddAction" use-shortcut-of="ChangesView.AddUnversioned"/>
    <action id="Git.Stage.Reset" class="git4idea.index.actions.GitResetAction" use-shortcut-of="ChangesView.Revert"/>
    <action id="Git.Stage.Revert" class="git4idea.index.actions.GitRevertAction" use-shortcut-of="ChangesView.Revert"/>
    <action id="Git.Stage.AcceptTheirs" class="git4idea.index.actions.GitStageAcceptTheirsAction"/>
    <action id="Git.Stage.AcceptYours" class="git4idea.index.actions.GitStageAcceptYoursAction"/>
    <action id="Git.Stage.Merge" class="git4idea.index.actions.GitStageMergeConflictAction"/>
    <action id="Git.Stage.ThreeSideDiff" class="git4idea.index.actions.GitStageThreeSideDiffAction"/>
    <action id="Git.Stage.ToggleIgnored" class="git4idea.index.actions.GitToggleIgnoredFilesAction"/>
    <action id="Git.Stage.Add.All" class="git4idea.index.actions.GitStageAllAction"/>
    <action id="Git.Stage.Add.Tracked" class="git4idea.index.actions.GitStageTrackedAction"/>
    <action id="Git.Stage.Show.Staged" class="git4idea.index.actions.GitShowStagedVersionAction"/>
    <action id="Git.Stage.Show.Local" class="git4idea.index.actions.GitShowLocalVersionAction"/>
    <action id="Git.Stage.Compare.Local.Staged" class="git4idea.index.actions.GitStageCompareLocalWithStagedAction"/>
    <action id="Git.Stage.Compare.Staged.Local" class="git4idea.index.actions.GitStageCompareStagedWithLocalAction"/>
    <action id="Git.Stage.Compare.Staged.Head" class="git4idea.index.actions.GitStageCompareStagedWithHeadAction"/>
    <action id="Git.Stage.Compare.Three.Versions" class="git4idea.index.actions.GitStageCompareThreeVersionsAction"/>

    <group id="Git.ChangesView.Conflicts">
      <action id="Git.ChangesView.Merge" class="git4idea.merge.GitMergeConflictAction"/>
      <action id="Git.ChangesView.AcceptTheirs" class="git4idea.merge.GitAcceptTheirsAction"/>
      <action id="Git.ChangesView.AcceptYours" class="git4idea.merge.GitAcceptYoursAction"/>
      <separator/>

      <add-to-group group-id="ChangesViewPopupMenu" anchor="first"/>
    </group>

    <action id="Git.Stash.Silently" class="git4idea.index.actions.GitStashSilentlyAction" icon="AllIcons.Vcs.ShelveSilent"/>

    <group id="Git.Stage.Toolbar">
      <reference id="Diff.ShowDiff"/>
      <reference id="ChangesView.Refresh"/>
      <reference id="Git.Stash.Silently"/>
      <group id="Git.Stage.Ui.Settings" icon="AllIcons.Actions.Show" popup="true">
        <reference id="Git.Stage.ToggleIgnored"/>
      </group>
    </group>
    <group id="Git.Stage.Tree.Menu">
      <reference id="Git.Stage.Merge"/>
      <reference id="Git.Stage.AcceptTheirs"/>
      <reference id="Git.Stage.AcceptYours"/>
      <reference id="Git.Stage.Add"/>
      <reference id="Git.Stage.Reset"/>
      <reference id="Git.Stage.Revert"/>
      <reference id="$Delete"/>
      <reference id="Git.Ignore.File"/>
      <separator/>
      <reference id="Diff.ShowDiff"/>
      <reference id="Git.Stage.ThreeSideDiff"/>
      <reference ref="EditSource"/>
      <reference ref="ChangesView.CreatePatchFromChanges"/>
      <reference ref="ChangesView.CreatePatchToClipboard"/>
      <separator/>
      <reference id="Vcs.ShowTabbedFileHistory"/>
      <reference id="LocalHistory"/>
    </group>
    <group id="Git.Stage.Local.File.Menu" popup="false">
      <reference id="Git.Stage.Show.Staged"/>
      <reference id="Git.Stage.Compare.Local.Staged"/>
      <reference id="Git.Stage.Compare.Three.Versions"/>

      <add-to-group group-id="Git.ContextMenu" relative-to-action="ChangesView.RevertFiles" anchor="after"/>
    </group>
    <group id="Git.Stage.Index.File.Menu" popup="true" class="git4idea.index.actions.GitStageIndexFileMenuGroup">
      <reference id="Git.Stage.Show.Local"/>
      <reference id="Git.Stage.Compare.Staged.Head"/>
      <reference id="Git.Stage.Compare.Staged.Local"/>
      <reference id="Git.Stage.Compare.Three.Versions"/>

      <add-to-group group-id="EditorPopupMenu"/>
    </group>

    <action id="Git.Stash.Pop" class="git4idea.stash.ui.GitPopStashAction"/>
    <action id="Git.Stash.Apply" class="git4idea.stash.ui.GitApplyStashAction"/>
    <action id="Git.Stash.UnstashAs" class="git4idea.stash.ui.GitUnstashAsAction"/>
    <action id="Git.Stash.Drop" class="git4idea.stash.ui.GitDropStashAction"/>
    <action id="Git.Show.Stash" class="git4idea.stash.ui.GitShowStashToolWindowTabAction"/>
    <action id="Git.Stash.Refresh" class="git4idea.stash.ui.GitRefreshStashesAction" icon="AllIcons.Actions.Refresh"/>

    <group id="Git.Stash.Toolbar">
      <reference id="Diff.ShowDiff"/>
      <reference id="Git.Stash.Refresh"/>
    </group>
    <group id="Git.Stash.ContextMenu">
      <reference id="Git.Stash.Pop"/>
      <reference id="Git.Stash.Apply"/>
      <reference id="Git.Stash.UnstashAs"/>
      <reference id="Git.Stash.Drop"/>
      <separator/>
      <reference id="Diff.ShowDiff"/>
      <reference id="Vcs.ShowDiffWithLocal"/>
      <reference id="Vcs.ShowDiffWithLocal.Before"/>
    </group>
  </actions>

  <extensions defaultExtensionNs="com.intellij">
    <registryKey key="git.execute.with.mediator" defaultValue="true"
                 description="Use wrapper executable on Windows to support soft Git process cancellation."/>
    <registryKey key="git.blocking.read" defaultValue="true"
                 description="Use blocking mode for git process output reader."/>
    <registryKey key="git.allow.stderr.to.stdout.mixing" defaultValue="false"
                 description="Enables legacy hack for git integration, when some messages from stderr are handled as if they came from stdout."/>
    <registryKey key="git.execution.trace" defaultValue="0"
                 description="Bitmask to control git logging of the commands executed by the IDE. Specified as int.\n
                              (0)  00000 - logging disabled\n
                              (31) 11111 - all categories enabled\n
                              (29) 11101 - the one you might want\n
                              (1)  00001 - GIT_TRACE\n
                              (2)  00010 - GIT_TRACE_PACK_ACCESS\n
                              (4)  00100 - GIT_TRACE_PACKET\n
                              (8)  01000 - GIT_TRACE_PERFOMANCE\n
                              (16) 10000 - GIT_TRACE_SETUP"/>
    <registryKey key="git.file.history.full" defaultValue="true"
                 description="Adds &quot;--full-history --simplify-merges&quot; to git log arguments when retrieving history for a file.
                              This may sometimes result in empty merges being shown in the file history.
                              However, skipping this arguments hides some side branches if the end result is the same."/>
    <registryKey key="git.diff.renameLimit" defaultValue="1"
                 description="Sets diff.renameLimit configuration variable value.\n
                              Essentially this variable tells Git the maximal size of commit for which to perform rename detection.
                              Zero value means detecting renames in all commits.
                              Setting this value too high (or zero) may lead to increased memory consumption by a Git process and longer execution time.\n
                              This variable only used when reading git commits for indexing.
                              Value from git configuration (1000 by default) is used for other purposes (eg for displaying changes in changes view)."/>
    <registryKey key="git.refresh.vfs.total" defaultValue="false"
                 description="If set to true, the whole Git repository root will be refreshed after performing a Git operation.
                              Otherwise only the affected files will be refreshed.
                              Affects only a subset of Git operations.
                              The option is needed to debug possible &quot;incomplete VFS refresh&quot; reports, if they appear."/>
    <registryKey key="git.force.commit.using.staging.area" defaultValue="true"
                 description="When enabled, perform all git commits by updating staging area. If disabled, use 'git commit --only' when possible."/>
    <registryKey key="git.clone.recurse.submodules" defaultValue="true"
                 description="When enabled, Checkout from Git calls 'git clone --recurse-submodules', i.e. clones the main repository with all submodules if there are any."/>
    <registryKey key="git.read.content.with.textconv" defaultValue="false"
                 description="Apply 'textconv' transformations when reading file content from git. (overrides &quot;git.read.content.with.filters&quot; option)"/>
    <registryKey key="git.read.content.with.filters" defaultValue="true"
                 description="Apply 'filters' transformations when reading file content from git."/>
    <registryKey key="git.log.fix.merge.commits.parents.order" defaultValue="false" restartRequired="true"
                 description="Find merge commits where a remote branch was merged into local before pushing
                              and fix parents order for such commits in order to display them more naturally in the commits graph."/>
    <registryKey key="git.log.use.index.for.picked.commits.highlighting" defaultValue="true"
                 description="Find cherry-picked commits not only looking at patches using 'git cherry'
                              but also by matching commit author, author time and &quot;cherry picked from commit &lt;hash&gt;&quot; suffix."/>
    <registryKey key="git.log.fast.picked.commits.highlighting" defaultValue="true"
                 description="Find cherry-picked commits not looking at patches using 'git cherry'
                              but by matching commit author, author time and commit message. This allows to find commits that were cherry-picked with conflicts
                              and without adding &quot;cherry picked from commit &lt;hash&gt;&quot; suffix. Requires &quot;git.log.use.index.for.picked.commits.highlighting&quot; set to true."/>
    <registryKey key="git.parallel.fetch.threads" defaultValue="-3"
                 description="Number of threads to call git fetch in parallel.\n
                              Set to 1 to execute sequentially.\n
                              Set to -1 to use the number of CPU cores.\n
                              Set to -2 to start as many threads, as there are repositories in the project.\n
                              Set to -3 to start as many threads, as there are repositories, but not more than 2 * number of cores.\n
                              By default, SSH supports up to 10 multiplexed connections, thus number of threads will be limited by 10 despite this value."/>
    <registryKey key="git.use.schannel.on.windows" defaultValue="false"
                 description="Force git to use Windows certificate store to very SSL connections. Git 2.14 and above is required"/>
    <registryKey key="git.use.shell.script.on.windows" defaultValue="true"
                 description="Use workaround for Native SSH support in Git. Batch file cannot properly handle arguments with newlines when used as SSH_ASKPASS."/>
    <registryKey key="git.use.setsid.for.native.ssh" defaultValue="true"
                 description="Wrap 'git' process with 'setsid' for remote operations.
                              This fixes issue with SSH_ASKPASS if IDE is executed from terminal or under DM/WM that pass system TTY from Xorg to GUI applications."/>
    <registryKey key="git.use.setsid.wait.for.wsl.ssh" defaultValue="true"
                 description="Wrap 'git' process with 'setsid -w' for remote operations with WSL executable."/>
    <registryKey key="git.wsl.exe.executable.no.shell" defaultValue="false"
                 description="Run git process for WSL executables without wrapping into a shell command."/>
    <registryKey key="git.use.push.force.with.lease" defaultValue="true"
                 description="Use '--force-with-lease' to push from IDE instead of '--force'"/>
    <registryKey key="git.use.no.optional.locks" defaultValue="true"
                 description="Use 'GIT_OPTIONAL_LOCKS' env variable to avoid taking unnecessary locks in git. Ex: to avoid 'git status' to interfere with 'git rebase' process in terminal."/>
    <registryKey key="git.process.ignored" defaultValue="true"
                 description="Process and highlight Git ignored files."/>
    <registryKey key="git.update.incoming.outgoing.info" defaultValue="true"
                 description="Update branches info that have incoming/outgoing commits in the Branches popup."/>
    <registryKey key="git.merge.conflicts.toolwindow" defaultValue="false"
                 description="Show dedicated toolwindow for git merge conflicts"/>
    <registryKey key="git.update.project.info.as.log" defaultValue="true"
                 description="If enabled, Update Project for Git is followed by the list of commits, instead of the list of updated files."/>
    <registryKey key="git.enable.stage.line.status.tracker" defaultValue="true"
                 description="Show staged and unstaged changes in gutter markers." restartRequired="true"/>
    <registryKey key="git.shelve.load.base.in.batches" defaultValue="1000"
                 description="If set to a value &gt; 0, load base contents for shelving in batches: by reading the given number of files at once. If set to -1, contents are loaded as usual, one by one."/>
    <registryKey key="git.allow.wsl1.executables" defaultValue="false"
                 description="If set to false, IDE will ignore configured WSL1 executables. See IDEA-242469"/>
    <registryKey key="git.enable.stash.toolwindow" defaultValue="false"
                 description="Show toolwindow tab with stashes"/>
    <registryKey key="git.can.use.restore.command" defaultValue="true"
                 description="Use 'git restore --staged --worktree --source=HEAD -- paths' instead of 'git reset --hard' to speedup worktree cleanup."/>
    <registryKey key="git.stage.separate.undo.stack" defaultValue="true"
                 description="Do not record stage operations in the undo stack of the document"/>
    <registryKey key="git.show.full.branch.name.instead.current.selected"
                 description="Show full branch names instead of Current/Selected"
                 defaultValue="false"/>

    <search.projectOptionsTopHitProvider implementation="git4idea.config.GitOptionsTopHitProvider"/>
    <vcs name="Git" vcsClass="git4idea.GitVcs" displayName="Git" administrativeAreaName=".git"/>
    <checkoutProvider implementation="git4idea.checkout.GitCheckoutProvider" order="first"/>
    <vcs.checkoutProcessor implementation="git4idea.checkout.GitCheckoutProcessor"/>
    <vcsRootChecker implementation="git4idea.roots.GitRootChecker"/>
    <vcsIgnoreChecker implementation="git4idea.ignore.GitIgnoreChecker"/>
    <vcsRepositoryCreator implementation="git4idea.repo.GitRepositoryCreator"/>
    <vcsPopupProvider implementation="git4idea.actions.GitQuickListContentProvider"/>
    <vcsCheckinHandlerFactory implementation="git4idea.checkin.GitCheckinHandlerFactory"/>
    <vcsCheckinHandlerFactory implementation="git4idea.rebase.GitRebaseCheckinHandlerFactory"/>
    <checkinHandlerFactory implementation="git4idea.checkin.GitSkipHooksCommitHandlerFactory" order="last"/>
    <unresolvedMergeCheckProvider implementation="git4idea.checkin.GitUnresolvedMergeCheckProvider"/>
    <logProvider implementation="git4idea.log.GitLogProvider"/>
    <vcsChangesViewRefresher implementation="git4idea.changes.GitChangesViewRefresher" />
    <vcs.branchStateProvider implementation="git4idea.branch.GitBranchStateProvider"/>
    <pushSupport implementation="git4idea.push.GitPushSupport"/>
    <cherryPicker implementation="git4idea.cherrypick.GitCherryPicker"/>
    <vcsAnnotationGutterActionProvider implementation="git4idea.actions.GitToggleAnnotationOptionsActionProvider" />
    <vcsAnnotationGutterActionProvider implementation="git4idea.actions.GitShowCommitInLogAnnotationGutterActionProvider" />
    <statistics.projectUsagesCollector implementation="git4idea.GitStatisticsCollector"/>
    <statistics.notificationIdsHolder implementation="git4idea.GitNotificationIdsHolder"/>
    <vcsRepositoryInitializer implementation="git4idea.repo.GitRepositoryInitializer"/>
    <openapi.vcs.changes.actions.diff.ChangeDiffRequestProvider
        implementation="git4idea.diff.GitSubmoduleDiffRequestProvider"/>
    <vcs.ignoredFilesHolder implementation="git4idea.repo.GitIgnoredFilesHolder$Provider"/>
    <vcs.unversionedFilesHolder implementation="git4idea.repo.GitUnversionedFilesHolder$Provider"/>
    <projectConfigurable id="vcs.Git" key="settings.git.option.group" instance="git4idea.config.GitVcsPanel"
                         parentId="project.propVCSSupport.Mappings" groupWeight="-500"/>

    <projectService serviceImplementation="git4idea.config.GitVcsSettings" configurationSchemaKey="versionControl.git"/>
    <projectService serviceImplementation="git4idea.config.GitRebaseSettings"/>
    <projectService serviceImplementation="git4idea.config.GitMergeSettings"/>
    <projectService serviceImplementation="git4idea.config.GitPullSettings"/>
    <projectService serviceImplementation="git4idea.config.GitSharedSettings" />
    <projectService serviceImplementation="git4idea.rebase.interactive.GitRewordedCommitMessageProvider"/>
    <projectService serviceInterface="git4idea.branch.GitBrancher"
                    serviceImplementation="git4idea.branch.GitBrancherImpl"/>
    <projectService serviceInterface="git4idea.fetch.GitFetchSupport" serviceImplementation="git4idea.fetch.GitFetchSupportImpl" />

    <applicationService serviceImplementation="git4idea.config.GitVcsApplicationSettings"/>
    <applicationService serviceImplementation="git4idea.ssh.GitXmlRpcNativeSshService"/>
    <applicationService serviceInterface="git4idea.commands.GitHttpAuthService"
                        serviceImplementation="git4idea.commands.GitHttpAuthServiceImpl" />
    <applicationService serviceImplementation="git4idea.config.SSHConnectionSettings"/>
    <applicationService serviceImplementation="git4idea.remote.GitRememberedInputs"/>
    <applicationService serviceInterface="git4idea.commands.Git"
                        serviceImplementation="git4idea.commands.GitImpl"/>
    <applicationService serviceImplementation="git4idea.config.GitExecutableManager"/>
    <applicationService serviceImplementation="git4idea.DialogManager" />
    <applicationService serviceImplementation="git4idea.log.GitExternalLogTabsProperties"/>

    <applicationService serviceImplementation="git4idea.light.LightGitTracker"/>

    <fileType name="PLAIN_TEXT" fileNames=".gitmodules"/>
    <vcs.taskHandler implementation="git4idea.GitTaskHandler"/>

    <logHighlighterFactory implementation="git4idea.branch.DeepComparator$Factory"/>

    <ignoredFileContentProvider implementation="git4idea.ignore.GitIgnoredFileContentProvider"/>
    <openapi.vcs.changes.vcsPreservingExecutor implementation="git4idea.util.GitPreservingExecutor"/>
    <editorNotificationProvider implementation="git4idea.conflicts.MergeConflictResolveUtil$NotificationProvider"/>
    <codeInsight.linkHandler prefix="#git_commit/" handlerClass="git4idea.log.GitCommitTooltipLinkHandler"/>

    <!-- Git ignore lang -->
    <fileType language="GitIgnore" extensions="gitignore" fieldName="INSTANCE" name="GitIgnore file" implementationClass="git4idea.ignore.lang.GitIgnoreFileType"/>
    <lang.parserDefinition language="GitIgnore"
                           implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreParserDefinition"/>
    <codeInsight.lineMarkerProvider language="GitIgnore"
                                    implementationClass="com.intellij.openapi.vcs.changes.ignore.codeInsight.IgnoreDirectoryMarkerProvider"/>
    <lang.braceMatcher language="GitIgnore" implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreBraceMatcher"/>
    <lang.commenter language="GitIgnore" implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreCommenter"/>
     <!--END Git ignore lang-->

    <!-- Git exclude lang -->
    <fileType language="GitExclude" fileNames="exclude" fieldName="INSTANCE" name="GitExclude file" implementationClass="git4idea.ignore.lang.GitExcludeFileType"/>
    <lang.fileViewProviderFactory language="GitExclude"
                                  implementationClass="git4idea.ignore.lang.GitExcludeViewProviderFactory"/>
    <lang.parserDefinition language="GitExclude"
                           implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreParserDefinition"/>
    <codeInsight.lineMarkerProvider language="GitExclude"
                                    implementationClass="com.intellij.openapi.vcs.changes.ignore.codeInsight.IgnoreDirectoryMarkerProvider"/>
    <lang.braceMatcher language="GitExclude" implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreBraceMatcher"/>
    <lang.commenter language="GitExclude" implementationClass="com.intellij.openapi.vcs.changes.ignore.lang.IgnoreCommenter"/>
     <!--END Git exclude lang-->

    <backgroundPostStartupActivity implementation="git4idea.ignore.GitIgnoreInStoreDirGeneratorActivity"/>
    <backgroundPostStartupActivity implementation="git4idea.config.GitSetupProjectConfig" />

    <registryKey key="git.update.incoming.info.time" defaultValue="20"
                 description="Time period (in minutes) between incoming commits checks." restartRequired="true"/>

    <registryKey key="git.commit.completion.fixup.squash" defaultValue="false"
                 description="Provide completion for fixup and squash prefixes in commit message field" restartRequired="false"/>

    <registryKey key="git.interactive.rebase.collect.entries.using.log" defaultValue="true"
                 description="Use Log to collect Rebase Entries"/>

    <registryKey key="git.search.everywhere.commit.by.message" defaultValue="true"
                 description="Use Git log index to lookup commits by message in Search Everywhere" restartRequired="false"/>

    <vcs.actions.ScheduleForAdditionActionExtension implementation="git4idea.actions.GitAdd"/>
    <completion.contributor language="TEXT" implementationClass="git4idea.commit.GitCommitCompletionContributor"
                            order="first, before commitCompletion"/>

    <customVcsLogUiFactoryProvider implementation="git4idea.ui.branch.dashboard.BranchesInGitLogUiFactoryProvider"/>
    <virtualFileSystem key="git-compare-branches" implementationClass="git4idea.branch.GitCompareBranchesVirtualFileSystem"/>

    <statusBarWidgetFactory implementation="git4idea.light.LightGitStatusBarWidgetFactory"/>
    <lightEditTabAttributesProvider implementation="git4idea.light.LightGitTabAttributesProvider"/>
    <statusBarWidgetFactory id="gitWidget"
                            implementation="git4idea.ui.branch.GitBranchWidget$Factory"
                            order="after codeStyleWidget,before readOnlyWidget"/>

    <vcsBulkMovesOnlyChangesFilter implementation="git4idea.GitBulkMovesOnlyChangesFilter"/>

    <editorNotificationProvider implementation="git4idea.ui.GitEditorPromo" order="first"/>

    <changesViewContent id="git.stage" tabName="Staging Area" className="git4idea.index.GitStageContentProvider"
                        predicateClassName="git4idea.index.GitStageContentVisibilityPredicate"
                        preloaderClassName="git4idea.index.GitStageContentPreloader"
                        displayNameSupplierClassName="git4idea.index.GitStageDisplayNameSupplier"
                        isInCommitToolWindow="true"/>
    <vcs.changes.changesViewNodeAction implementation="git4idea.merge.GitChangesViewNodeAction"/>
    <projectService serviceImplementation="git4idea.index.ui.GitStageUiSettingsImpl"/>

    <projectService serviceImplementation="git4idea.index.GitStageTracker"/>
    <openapi.vcs.impl.LocalLineStatusTrackerProvider implementation="git4idea.index.GitStageLineStatusTrackerProvider"/>
    <vcsChangesViewRefresher implementation="git4idea.index.actions.GitStageChangesViewRefresher"/>

    <backgroundPostStartupActivity implementation="git4idea.index.GitStageStartupActivity"/>

    <projectService serviceImplementation="git4idea.index.vfs.GitIndexFileSystemRefresher"/>
    <virtualFileSystem implementationClass="git4idea.index.vfs.GitIndexFileSystem" key="gitIndexFs" physical="true"/>

    <vcs.baseContentProvider implementation="git4idea.index.vfs.GitIndexVirtualFileBaseContentProvider"/>
    <editorNotificationProvider implementation="git4idea.index.vfs.GitIndexVirtualFileEditorNotificationProvider"/>
    <editorTabTitleProvider implementation="git4idea.index.vfs.GitIndexVirtualFileTabTitleProvider"/>
    <vcs.fileStatusProvider implementation="git4idea.index.vfs.GitIndexVirtualFileStatusProvider"/>

    <diff.actions.ShowDiffAction.ExtensionProvider implementation="git4idea.index.actions.GitStageDiffAction"/>
    <openapi.vcs.changes.actions.CreatePatchFromChangesAction.Dialog.ExtensionProvider
      implementation="git4idea.index.actions.GitStageCreatePatchActionProvider$Dialog"/>
    <openapi.vcs.changes.actions.CreatePatchFromChangesAction.Clipboard.ExtensionProvider
      implementation="git4idea.index.actions.GitStageCreatePatchActionProvider$Clipboard"/>

    <actionPromoter implementation="git4idea.index.actions.GitIndexActionPromoter"/>

    <changesViewContent id="git.stash" tabName="Stash" className="git4idea.stash.ui.GitStashContentProvider"
                        predicateClassName="git4idea.stash.ui.GitStashContentVisibilityPredicate"
                        preloaderClassName="git4idea.stash.ui.GitStashContentPreloader"
                        displayNameSupplierClassName="git4idea.stash.ui.GitStashDisplayNameSupplier"
                        isInCommitToolWindow="true"/>
    <projectService serviceImplementation="git4idea.stash.GitStashTracker"/>
    <projectService serviceImplementation="git4idea.stash.GitStashCache"/>
    <postStartupActivity implementation="git4idea.stash.ui.GitStashStartupActivity"/>
    <diff.actions.ShowDiffAction.ExtensionProvider implementation="git4idea.stash.ui.GitShowDiffFromStashAction"/>

    <vcs.consoleFolding implementation="git4idea.console.GitConsoleFolding"/>
    <console.folding implementation="git4idea.console.GitProgressOutputConsoleFolding"/>

    <searchEverywhereContributor implementation="git4idea.search.GitSearchEverywhereContributor$Companion$Factory"/>
    <projectOriginInfoProvider implementation="git4idea.repo.GitProjectOriginInfoProvider"/>

    <vcsStartupActivity implementation="git4idea.repo.GitCommitTemplateTracker$GitCommitTemplateTrackerStartupActivity"/>

    <vcs.delayedCommitMessageProvider implementation="git4idea.commit.GitDelayedCommitTemplateMessageProvider" order="first"/>
    <vcs.commitMessageProvider implementation="git4idea.commit.GitCommitTemplateMessageProvider" order="first"/>
    <jbProtocolRevisionResolver implementation="git4idea.GitNavigateRevisionResolver"/>
  </extensions>

  <extensionPoints>
    <extensionPoint interface="git4idea.remote.GitHttpAuthDataProvider" name="GitHttpAuthDataProvider" dynamic="true"/>
    <extensionPoint interface="git4idea.remote.GitRepositoryHostingService" name="gitRepositoryHostingService" dynamic="true"/>
    <extensionPoint interface="git4idea.checkin.GitCheckinExplicitMovementProvider"
                    name="GitCheckinExplicitMovementProvider"
                    dynamic="true"/>
    <extensionPoint interface="git4idea.fetch.GitFetchHandler" name="gitFetchHandler" dynamic="true"/>
    <extensionPoint interface="git4idea.config.GitProtectedBranchProvider" name="gitProtectedBranchProvider" dynamic="true"/>
  </extensionPoints>

  <projectListeners>
    <listener class="git4idea.conflicts.GitConflictsToolWindowManager$MyStagingAreaListener"
              topic="git4idea.status.GitStagingAreaHolder$StagingAreaListener"
              activeInHeadlessMode="false"/>
    <listener class="git4idea.conflicts.GitConflictsToolWindowManager$MyRepositoryListener"
              topic="com.intellij.dvcs.repo.VcsRepositoryMappingListener"
              activeInHeadlessMode="false"/>
    <listener class="git4idea.ui.branch.GitBranchWidget$Listener"
              topic="com.intellij.dvcs.repo.VcsRepositoryMappingListener"
              activeInHeadlessMode="false" activeInTestMode="false"/>
    <listener class="git4idea.index.CommitModeListener" topic="com.intellij.vcs.commit.CommitModeManager$CommitModeListener"
              activeInHeadlessMode="false" activeInTestMode="false"/>
  </projectListeners>
</idea-plugin>
