// Generated by delombok at Sun Nov 06 21:17:29 CET 2022

import java.util.Map;
import java.util.NavigableMap;

public class SingularNavigableMap<A, B> {
  private NavigableMap rawTypes;
  private NavigableMap<Integer, Float> integers;
  private NavigableMap<A, B> generics;
  private NavigableMap<? extends Number, ? extends String> extendsGenerics;

  public static void main(String[] args) {
  }

  @java.lang.SuppressWarnings("all")
  SingularNavigableMap(final NavigableMap rawTypes, final NavigableMap<Integer, Float> integers, final NavigableMap<A, B> generics, final NavigableMap<? extends Number, ? extends String> extendsGenerics) {
    this.rawTypes = rawTypes;
    this.integers = integers;
    this.generics = generics;
    this.extendsGenerics = extendsGenerics;
  }


  @java.lang.SuppressWarnings("all")
  public static class SingularNavigableMapBuilder<A, B> {
    @java.lang.SuppressWarnings("all")
    private java.util.ArrayList<java.lang.Object> rawTypes$key;
    @java.lang.SuppressWarnings("all")
    private java.util.ArrayList<java.lang.Object> rawTypes$value;
    @java.lang.SuppressWarnings("all")
    private java.util.ArrayList<Integer> integers$key;
    @java.lang.SuppressWarnings("all")
    private java.util.ArrayList<Float> integers$value;
    @java.lang.SuppressWarnings("all")
    private java.util.ArrayList<A> generics$key;
    @java.lang.SuppressWarnings("all")
    private java.util.ArrayList<B> generics$value;
    @java.lang.SuppressWarnings("all")
    private java.util.ArrayList<Number> extendsGenerics$key;
    @java.lang.SuppressWarnings("all")
    private java.util.ArrayList<String> extendsGenerics$value;

    @java.lang.SuppressWarnings("all")
    SingularNavigableMapBuilder() {
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> rawType(final java.lang.Object rawTypeKey, final java.lang.Object rawTypeValue) {
      if (this.rawTypes$key == null) {
        this.rawTypes$key = new java.util.ArrayList<java.lang.Object>();
        this.rawTypes$value = new java.util.ArrayList<java.lang.Object>();
      }
      this.rawTypes$key.add(rawTypeKey);
      this.rawTypes$value.add(rawTypeValue);
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> rawTypes(final java.util.Map<?, ?> rawTypes) {
      if (rawTypes == null) {
        throw new java.lang.NullPointerException("rawTypes cannot be null");
      }
      if (this.rawTypes$key == null) {
        this.rawTypes$key = new java.util.ArrayList<java.lang.Object>();
        this.rawTypes$value = new java.util.ArrayList<java.lang.Object>();
      }
      for (final java.util.Map.Entry<?, ?> $lombokEntry : rawTypes.entrySet()) {
        this.rawTypes$key.add($lombokEntry.getKey());
        this.rawTypes$value.add($lombokEntry.getValue());
      }
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> clearRawTypes() {
      if (this.rawTypes$key != null) {
        this.rawTypes$key.clear();
        this.rawTypes$value.clear();
      }
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> integer(final Integer integerKey, final Float integerValue) {
      if (this.integers$key == null) {
        this.integers$key = new java.util.ArrayList<Integer>();
        this.integers$value = new java.util.ArrayList<Float>();
      }
      this.integers$key.add(integerKey);
      this.integers$value.add(integerValue);
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> integers(final java.util.Map<? extends Integer, ? extends Float> integers) {
      if (integers == null) {
        throw new java.lang.NullPointerException("integers cannot be null");
      }
      if (this.integers$key == null) {
        this.integers$key = new java.util.ArrayList<Integer>();
        this.integers$value = new java.util.ArrayList<Float>();
      }
      for (final java.util.Map.Entry<? extends Integer, ? extends Float> $lombokEntry : integers.entrySet()) {
        this.integers$key.add($lombokEntry.getKey());
        this.integers$value.add($lombokEntry.getValue());
      }
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> clearIntegers() {
      if (this.integers$key != null) {
        this.integers$key.clear();
        this.integers$value.clear();
      }
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> generic(final A genericKey, final B genericValue) {
      if (this.generics$key == null) {
        this.generics$key = new java.util.ArrayList<A>();
        this.generics$value = new java.util.ArrayList<B>();
      }
      this.generics$key.add(genericKey);
      this.generics$value.add(genericValue);
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> generics(final java.util.Map<? extends A, ? extends B> generics) {
      if (generics == null) {
        throw new java.lang.NullPointerException("generics cannot be null");
      }
      if (this.generics$key == null) {
        this.generics$key = new java.util.ArrayList<A>();
        this.generics$value = new java.util.ArrayList<B>();
      }
      for (final java.util.Map.Entry<? extends A, ? extends B> $lombokEntry : generics.entrySet()) {
        this.generics$key.add($lombokEntry.getKey());
        this.generics$value.add($lombokEntry.getValue());
      }
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> clearGenerics() {
      if (this.generics$key != null) {
        this.generics$key.clear();
        this.generics$value.clear();
      }
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> extendsGeneric(final Number extendsGenericKey, final String extendsGenericValue) {
      if (this.extendsGenerics$key == null) {
        this.extendsGenerics$key = new java.util.ArrayList<Number>();
        this.extendsGenerics$value = new java.util.ArrayList<String>();
      }
      this.extendsGenerics$key.add(extendsGenericKey);
      this.extendsGenerics$value.add(extendsGenericValue);
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> extendsGenerics(final java.util.Map<? extends Number, ? extends String> extendsGenerics) {
      if (extendsGenerics == null) {
        throw new java.lang.NullPointerException("extendsGenerics cannot be null");
      }
      if (this.extendsGenerics$key == null) {
        this.extendsGenerics$key = new java.util.ArrayList<Number>();
        this.extendsGenerics$value = new java.util.ArrayList<String>();
      }
      for (final java.util.Map.Entry<? extends Number, ? extends String> $lombokEntry : extendsGenerics.entrySet()) {
        this.extendsGenerics$key.add($lombokEntry.getKey());
        this.extendsGenerics$value.add($lombokEntry.getValue());
      }
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap.SingularNavigableMapBuilder<A, B> clearExtendsGenerics() {
      if (this.extendsGenerics$key != null) {
        this.extendsGenerics$key.clear();
        this.extendsGenerics$value.clear();
      }
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public SingularNavigableMap<A, B> build() {
      java.util.NavigableMap<java.lang.Object, java.lang.Object> rawTypes = new java.util.TreeMap<java.lang.Object, java.lang.Object>();
      if (this.rawTypes$key != null) for (int $i = 0; $i < (this.rawTypes$key == null ? 0 : this.rawTypes$key.size()); $i++) rawTypes.put(this.rawTypes$key.get($i), (java.lang.Object) this.rawTypes$value.get($i));
      rawTypes = java.util.Collections.unmodifiableNavigableMap(rawTypes);
      java.util.NavigableMap<Integer, Float> integers = new java.util.TreeMap<Integer, Float>();
      if (this.integers$key != null) for (int $i = 0; $i < (this.integers$key == null ? 0 : this.integers$key.size()); $i++) integers.put(this.integers$key.get($i), (Float) this.integers$value.get($i));
      integers = java.util.Collections.unmodifiableNavigableMap(integers);
      java.util.NavigableMap<A, B> generics = new java.util.TreeMap<A, B>();
      if (this.generics$key != null) for (int $i = 0; $i < (this.generics$key == null ? 0 : this.generics$key.size()); $i++) generics.put(this.generics$key.get($i), (B) this.generics$value.get($i));
      generics = java.util.Collections.unmodifiableNavigableMap(generics);
      java.util.NavigableMap<Number, String> extendsGenerics = new java.util.TreeMap<Number, String>();
      if (this.extendsGenerics$key != null) for (int $i = 0; $i < (this.extendsGenerics$key == null ? 0 : this.extendsGenerics$key.size()); $i++) extendsGenerics.put(this.extendsGenerics$key.get($i), (String) this.extendsGenerics$value.get($i));
      extendsGenerics = java.util.Collections.unmodifiableNavigableMap(extendsGenerics);
      return new SingularNavigableMap<A, B>(rawTypes, integers, generics, extendsGenerics);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "SingularNavigableMap.SingularNavigableMapBuilder(rawTypes$key=" + this.rawTypes$key + ", rawTypes$value=" + this.rawTypes$value + ", integers$key=" + this.integers$key + ", integers$value=" + this.integers$value + ", generics$key=" + this.generics$key + ", generics$value=" + this.generics$value + ", extendsGenerics$key=" + this.extendsGenerics$key + ", extendsGenerics$value=" + this.extendsGenerics$value + ")";
    }
  }

  @java.lang.SuppressWarnings("all")
  public static <A, B> SingularNavigableMap.SingularNavigableMapBuilder<A, B> builder() {
    return new SingularNavigableMap.SingularNavigableMapBuilder<A, B>();
  }
}
