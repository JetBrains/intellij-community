### README.md strings

readme.welcome.header=Meet the Interactive Feature Trainer
readme.ift.description=This interactive course will guide you through a lot of IDE workflows and use cases. It comes with many helpful \
  action shortcuts. You don''t need to memorize all of them. Instead, try them and take into your service the most useful ones. \
  Since during your everyday work, you might encounter new problems, revisit this course and give other features a second try. \
  Stay tuned for new lessons helping you to be more productive with {0}.
readme.usage.header=How to use the course
readme.toolwindow.description=The `{0}` tool window contains several modules with the corresponding sets of lessons that you can take \
  in any order. When you finish studying a lesson, it will be marked as completed. You can use a completed lesson for your reference \
  or restart it if you want to refresh your knowledge.
readme.experienced.users.remark=Even though a lesson looks familiar to you, give it a try: you may discover helpful examples and unknown \
  shortcuts of the features you actively use!
readme.start.header=Get started
readme.indexing.description=You are likely reading this `README.md` during the learning project initialization. Usually, `indexing` is the \
  most time-consuming operation during project initialization. The IDE will need to collect information about your environment, project\
  {0,choice,1#, libraries|2#}, and construct internal representation. It is needed for fast navigation and search.
readme.navigation.hint=The `{0}` module in this course will show how to use it.
readme.shortcuts.header=Manage shortcuts
readme.shortcuts.problem.description=Some shortcuts in this course may conflict with the system or other application shortcuts. \
  In this case, you can click the problematic shortcut in the text of the lesson. The opened popup will show you the action name and \
  alternative shortcuts. You will be able to apply the action or assign a new shortcut.
readme.bug.tracker.remark=If there is another issue, try to restart the lesson or report the bug in [our bug tracker]({0}).
readme.conclusion.header=Get back to your project
readme.exit.options=To return to the welcome screen, select `{0} | {1}` from the main menu. Also, you can use the `{0}` menu to open or \
  create new projects. By default, the `{2}` tool window is hidden. You can open it by selecting `{3} | {4}` from the main menu.
readme.feedback.request=We will appreciate you leaving your feedback about this learning course!

### This file contains strings from lessons.

###############################################################################
## Common lessons
###############################################################################

## Essential module
essential.module.name=Essential
essential.module.description=Discover the most essential capabilities of {0}

context.actions.lesson.name=Context actions
context.actions.invoke.intentions.for.warning=In many cases, <ide/> can guess your <strong>intention</strong> or propose a fix for a \
 warning or an error. Let''s invoke one of the most useful actions, {0}. Press {1}.
context.actions.fix.warning=Let''s apply the first quick-fix to this warning: {0}.
context.actions.invoke.general.intentions=<ide/> has a lot of intentions! Try to invoke {0} every time you think there might be a \
 good solution or intention. You will save a lot of time and make the coding process much more fun! Now let''s look what we can apply to \
 the piece of code where the caret is. Press {1} again.
context.actions.apply.intention=Let''s apply the {0} intention.
context.actions.refactorings.promotion=Note that a lot of useful refactorings are not available via {0}. \
 Go to the {1} module to learn how to invoke and use them.

## Editor basics module
editor.basics.module.name=Editor basics
editor.basics.module.description=Add, delete, select, move, and duplicate your code with smart shortcuts.

goto.action.lesson.name=Search for actions
goto.action.mac.workaround=If the <strong>Terminal</strong> search opens instead of {0}, refer to <a href="{1}">this article</a>.
goto.action.use.find.action.1=One of the most useful shortcuts is {0}. It lets you search through all available \
  actions without having to know their individual shortcuts. Try it now with {1}.
goto.action.use.find.action.2=Alternatively, you can invoke {0} by pressing {1} twice. By using {0}, you can look for your project code entities \
  <strong>and</strong> other IDE objects at the same time. It is up to you what to use.
goto.action.invoke.about.action=For example, if you want to learn about <ide/>, type {0} and press {1}.
goto.action.to.return.to.the.editor=Press {0} to return to the editor.
goto.action.invoke.again=Also, you can use {0} or double {1} to change the settings. Try to invoke it again.
goto.action.show.line.numbers.request=Type {0} to see the {1} selector.
goto.action.first.lines.toggle=Switch the line numbers {0, choice, 0#off|1#on}.
goto.action.second.lines.toggle=Now switch the line numbers back {0, choice, 0#on|1#off}.
goto.action.propose.to.go.next.new.ui=Awesome! Just press {0} or click the button below to start the next lesson.
goto.action.popup.closed.warning.message=Press {0} or press {1} twice to open the search window again.
# This message will be removed soon
goto.action.propose.to.go.next=Awesome! Click the button below to start the next lesson.

collapse.lesson.name=Collapse
collapse.try.collapse=Sometimes you need to collapse a piece of code for better readability. Try to collapse a code fragment with {0}.
collapse.hit.expand=To expand a code region, press {0}.
collapse.all.collapse=If you want to collapse all regions in the file, press{0}.
collapse.all.expand=Similarly, press {0} to expand all available regions.

duplicate.and.delete.lines.lesson.name=Duplicate and delete lines
duplicate.and.delete.lines.duplicate.line=Duplicate any line with {0}.
duplicate.and.delete.lines.duplicate.several.lines=You can apply the same action to multiple lines. \
  Simply select two or more lines and duplicate them with {0}.
duplicate.and.delete.lines.delete.line=To delete the current line, you can use action {0}.

move.lesson.name=Move code fragments
move.pull.down=Rearranging lines usually involves two actions: cut and paste. \
  With <ide/>, you can do it with just one action. Press {0} to pull down the current line.
move.pull.up=Similarly, to pull a line up, press {0}.
move.whole.method.up=Try to move the whole method up with {0}. Note that the caret should be at the header of the method.
move.whole.method.down=Now move it down with {0}.

multiple.selections.lesson.name=Multiple selections
multiple.selections.select.symbol=Press {0} to select the symbol at the caret.
multiple.selections.select.next.symbol=Press {0} again to select the next occurrence of this symbol.
multiple.selections.deselect.symbol=Press {0} to deselect the last occurrence.
multiple.selections.select.all=Press {0} to select all occurrences in the file.
multiple.selections.replace=Type {0} to replace all occurrences of {1} with {0}.

selection.lesson.name=Expand and shrink the code selection
selection.select.word=Place the caret before any word. Press {0} to move the caret to the next word and select everything in between.
selection.extend.selection=Press {0} to extend the selection to the next code block.
selection.extend.until.whole.file=Try to increase your selection with {0} until the whole file is selected.
selection.shrink.selection={0} shrinks the selection. Try it.

new.selection.select.word=Press {0} to select the word under the caret.
new.selection.select.string=Press {0} again to select the whole string.
new.selection.add.quotes=Press {0} for the third time to add the quotes to the selection.
new.selection.select.call=Press {0} {1,choice,1#one|2#two|3#three|4#four} more times to select the whole call.
new.selection.unselect=Suppose we actually want to select its arguments instead of the whole call.\
  Press {0} to shrink selection back to the arguments.
new.selection.select.if=We moved the caret to the beginning of the {0} statement. Press {1} two times to select it. \
  A keyword might be a good starting point for choosing the corresponding statement with just a few presses.

comment.line.lesson.name=Comment line
comment.line.comment.any.line=Comment out any line with {0}.
comment.line.uncomment.that.line=Uncomment the commented line with the same shortcut. Press {0}.
comment.line.comment.several.lines=Select several lines and then comment them out with {0}.

surround.and.unwrap.lesson.name=Surround and unwrap
surround.and.unwrap.invoke.surround=Press {0} to surround the selected code fragment with some template code.
surround.and.unwrap.choose.surround.item=Choose {0} item.
surround.and.unwrap.invoke.unwrap=Let''s return to the initial file with the unwrapping action by {0}.
surround.and.unwrap.choose.unwrap.item=Choose the {0} item.
surround.and.unwrap.help.surround.code.fragments=Surround code fragments
surround.and.unwrap.help.unwrapping.and.removing.statements=Unwrapping and removing statements

## Completion module
code.completion.module.name=Code completion
code.completion.module.description=Let the IDE complete your code. Try basic, smart, and other types of completion.

basic.completion.lesson.name=Basic completion
basic.completion.start.typing=By default, <ide/> proposes completion for your code instantly. \
  Start typing {0} right where the caret is, and you will see the completion list with matching suggestions.
basic.completion.just.press.to.complete=Now just press {0} to complete this statement.
basic.completion.activate.explicitly=To activate basic completion explicitly, press {0}.
basic.completion.finish.explicit.completion=Select {0} and press {1}.

completion.with.tab.lesson.name=Completion with tab
completion.with.tab.begin.completion=Press {0} to show the completion suggestions.
completion.with.tab.finish.with.tab=For example, choose {0} and press {1}. \
  This replaces the word at the caret rather than simply inserts it.

postfix.completion.lesson.name=Postfix completion
postfix.completion.type.template=<ide/> can offer postfix shortcuts. Type {0}.

## Refactoring module
refactorings.module.name=Refactorings
refactorings.module.description=Make your code neat with rename, extract, and other types of refactorings.

rename.lesson.name=Rename

refactoring.menu.lesson.name=Refactoring menu
refactoring.menu.show.refactoring.list=<ide/> supports a variety of refactorings. Many of them have their own shortcuts. \
  But for rare refactorings, you can press {0} and preview a partial list of them.
refactoring.menu.introduce.parameter=Suppose we want to replace this expression with a parameter. So we need to choose {0}. \
  Now simply type <strong>pa</strong> (introduce <strong>pa</strong>rameter) or \
  <strong>ip</strong> (<strong>i</strong>ntroduce <strong>p</strong>arameter) to reduce the proposed list.
refactoring.menu.start.refactoring=Press {0} to start the {1} refactoring. \
  <strong>Note</strong> that you can learn refactoring shortcuts from the refactoring menu.
refactoring.menu.finish.refactoring=To complete refactoring, you need to choose some name or leave the default one and press {0}.

## Code Assistance module
code.assistance.module.name=Code assistance
code.assistance.module.description=Learn how to format your code, obtain parameter info, and preview quick popups.

code.format.lesson.name=Code format
code.format.reformat.selection=<ide/> can help you correct code formatting with just one action. \
to reformat the selected code fragment with {0}.
code.format.reformat.file=To reformat the whole file when no lines are selected, use {0}.
code.format.show.reformat.file.dialog=Use {0} to show reformat settings.
code.format.optimize.imports=Here you can configure reformat options. For example, switch {0} on and click {1}.

parameter.info.lesson.name=Parameter info
parameter.info.use.action=Press {0} to see the method''s signature.
parameter.info.add.parameters=Use a width of {0} and a height of {1}.

quick.popups.lesson.name=Quick popups
quick.popups.show.documentation=Press {0} to see the documentation for the symbol at the caret.
quick.popups.press.escape=Press {0} to close the popup.
quick.popups.show.implementation=Press {0} to see the definition of the symbol at the caret.

editor.coding.assistance.lesson.name=Editor coding assistance
editor.coding.assistance.goto.next.error=Press {0} to go to the next highlighted error in the file.
editor.coding.assistance.fix.error=Let''s fix this error. Press {0} and select {1}.
editor.coding.assistance.goto.next.warning=Let''s go to the next warning. Press {0}.
editor.coding.assistance.show.warning.description=Also, you can see the warning or error description of the item at the caret. \
  Press {0} to see a short description and press {0} again to expand it.
editor.coding.assistance.fix.warning=Let''s fix this warning too. Press {0} and select {1}.
editor.coding.assistance.highlight.usages=Another useful tool is the usages highlighting. \
  Press {0} to highlight all usages of the symbol at the caret within the file.

## Navigation module
navigation.module.name=Navigation
navigation.module.description=Jump to source, navigate to declarations, implementations, and a file structure.

declaration.and.usages.lesson.name=Declaration and usages
declaration.and.usages.jump.to.declaration=Press {0} to jump to the declaration of a method.
declaration.and.usages.show.usages=Now the caret is at the method''s declaration. \
  Use the same shortcut {0} to see all of its usages, then select one of them.
declaration.and.usages.find.usages=Press {0} to see a more detailed view of usages. You can invoke {0} on either a declaration or a usage.
declaration.and.usages.pin.motivation=From the {0} view you can navigate both to usages and declarations. \
  The next search will override these results in the {0} view. To prevent it, pin the results:
declaration.and.usages.right.click.tab=Right-click the tab title, {0}.
declaration.and.usages.select.pin.item=Select {0}.
declaration.and.usages.hide.view=When you have finished browsing usages, press {0} to hide the view.
declaration.and.usages.open.find.view=Press {0} to open the {1} view again.

file.structure.lesson.name=File structure
file.structure.open.popup=A large source file can be difficult to read and navigate. Sometimes you only need to preview it. \
  Press {0} to open the file structure.
file.structure.request.prefixes=Suppose you want to find a method with {0} and {1} words in its name. \
  Type {2} (prefixes of the required words) to filter the file structure.
file.structure.navigate=Only one item remains. Now press {0} to jump to the selected item.
file.structure.toolwindow=<ide/> can also show you the file structure as a tool window. Open it with {0}.

recent.files.lesson.name=Recent files and locations
recent.files.first.transition=Wondering how the {0} method is implemented? Let''s go to its declaration using {1}.
recent.files.dialog.message=We want to simulate a basic workflow: quick navigation between files. \
  Don't move the mouse until we finish.
recent.files.dialog.title=Workflow Simulation
recent.files.show.recent.files=We dived deeply into the library files. How can we get back to our file? <ide/> has a feature that can help us \
  show recently opened files. Press {0}.
recent.files.search.typing=You can search the file by its name. Type {0} (prefixes of the required words).
recent.files.search.jump=Only one file remains. Now press {0} to jump to the selected file.
recent.files.use.recent.files.again=We are back to our file. But let''s view the recent files again by using {0}.
recent.files.delete=This list contains many source files that we don''t want to open anymore. Let''s delete {0} files from \
  our recent files history by using {1}.
recent.files.close.popup=Now the history of our recent files is cleaner. Click somewhere outside the popup to close it or use {0}.
recent.files.show.recent.locations=Another useful action can show you the code in the recently visited locations. Use {0}.
recent.files.locations.search.typing=Here you can search by code fragments that you remember. Type {0}
recent.files.locations.search.jump=Now press {0} to jump to the selected code fragment.

search.everywhere.lesson.name=Search everywhere
search.everywhere.invoke.search.everywhere=To open {0} you need to press {1} twice.
search.everywhere.type.prefixes=Suppose you are looking for a class with the {0} and {1} words in the name. \
  Type {2} (prefixes of the required words) in the search field.
search.everywhere.navigate.to.class=Select {0} with the keyboard arrows and press {1} to jump to the definition of this class.
search.everywhere.popup.closed.warning.message=Press {0} twice to open the search window again.
search.everywhere.goto.class=Great! However, sometimes you need to find only classes or search only in some specific directories. \
  Use {0} to narrow the search.
search.everywhere.type.class.name=Suppose you need some library class responsible for buffered reading from an input stream. \
  Type {0} (prefixes of the required words). But do not navigate to it yet!
search.everywhere.use.all.places=Now you can see a class inside this demo project. However, we need to find its implementation in libraries. \
  Let''s switch the {0} filter to {1}, and you will see the content of available libraries.
search.everywhere.class.popup.closed.warning.message=Press {0} to open the search window again.
search.everywhere.quick.documentation=Press {0} to preview available documentation.
search.everywhere.close.documentation.popup=Press {0} to close the popup.
search.everywhere.finish=<strong>Done!</strong> Similarly, you can use {0} to look for a method or global variable and use {1} \
  to look for a file.
search.everywhere.navigation.promotion=You will find other navigation actions and workflow use cases in the {0} module.

find.in.files.lesson.name=Find and replace in files
find.in.files.show.find.popup=Suppose you want to find all occurrences of some string in the project. Press {0} to open the {1} window.
find.in.files.type.to.find=Type {0} to search for all textual occurrences in the Learning project.
find.in.files.whole.words=You were supposed to find the <code>apple</code> string but also got some <code>pineapple</code> entries. \
  Let''s narrow down the search to a whole word. Click {0} or press {1}.
find.in.files.select.row=You can see the context of the found string in the embedded editor. \
  Click the highlighted row or navigate to it by using {0} and {1} buttons.
find.in.files.go.to.file=Also, you can open the selected file in the main editor. Press {0} or double-click the row to move to this file.
find.in.files.show.replace.popup=Suppose you want to replace all found occurrences with another string. \
  It may be very boring to perform replacing in each file sequentially. <ide/> will help you with this task. Press {0} to open {1} window.
find.in.files.type.to.replace=Let''s replace all occurrences of {0} with {1}. Type {1} in the highlighted field.
find.in.files.select.directory=You can define the scope of search and replace. \
  Click the {0} button or press {1} to narrow the replacement only to current directory.
find.in.files.press.replace.all=Press {0} to start refactoring.
find.in.files.confirm.replace=Finally, press {0} to confirm refactoring.
find.in.files.popup.closed.warning.message=Press {0} to open the {1} window again.

extract.method.lesson.name=Extract method
extract.method.invoke.action=Press {0} to extract the selected code block into a method.
extract.method.start.refactoring=Click {0} to start refactoring.
extract.method.confirm.several.replaces=Cocktail sort has two swap places. The first fragment has just been extracted. \
  Click {0} to extract both of them.
extract.method.second.fragment=Now you can confirm or reject the replacement of the second fragment.

extract.variable.lesson.name=Extract variable
extract.variable.start.refactoring=Press {0} to extract a local variable from the {1} expression.
extract.variable.replace.all=This code block contains 3 occurrences of the selected expression. \
  Choose the second item on the list to replace all of them.
extract.variable.choose.name=Choose a name for the new variable or leave it as it is. Press {0} to complete the refactoring.

## Run/Debug module
run.debug.module.name=Run and debug
run.debug.module.description=Run your code and fix errors with the IDE visual debugger.

run.configuration.lesson.name=Run configuration
run.configuration.hide.toolwindow=<ide/> automatically opened the {0} tool window. \
  Tip: at the top of the {0} tool window, you can see the full run command. Now let''s hide the tool window with {1}.
run.configuration.list.not.shown.warning=Please select the {0} option in the {1} \u2192 {2} menu. It is required to enable the toolbar and \
  complete the lesson.
run.configuration.temporary.to.permanent=For each new run, <ide/> creates a temporary run configuration. \
  Temporary configurations are automatically deleted when their number exceeds the default limit of five. \
  Let''s convert the temporary configuration into a permanent one. Open the drop-down menu with run configurations.
run.configuration.select.save.configuration=Select {0}.
run.configuration.edit.configuration=Suppose you want to change a configuration or create another one manually. \
  Then you need to open the drop-down menu again and click {0}. Alternatively, you can use the {1} action.
run.configuration.settings.description=This is a place for managing run/debug configurations. \
  Here you can set program parameters, JVM arguments, environment variables, and so on.
run.configuration.tip.about.save.configuration.into.file=Tip: Sometimes you might want to save a configuration to its own file. \
  Such configurations will be easy to share between colleagues (usually, by using a version control system). \
  Now close the settings dialog to finish this lesson.

debug.workflow.lesson.name=Debug workflow
debug.workflow.incorrect.breakpoints=Breakpoints are set incorrectly for this lesson.
debug.workflow.run.program=Before debugging, let''s run the program and see what is going wrong {0}.
debug.workflow.toggle.breakpoint=So, there is a problem. Let''s start investigation by placing a breakpoint. \
  To set a breakpoint, you click the editor gutter or just press {0}.
debug.workflow.start.debug=To start debugging the selected run configuration, click {0} or press {1}.
debug.workflow.need.restart.lesson=The debug session has been stopped. Restart the lesson.
debug.workflow.return.to.editor=Many trace actions shift focus to the debug tool window. Let''s return to the editor with {0}.
debug.workflow.use.watches=<ide/> has several ways to show variable values. For this step, we selected the call. Let''s add it to {0}. \
  You can copy the expression to the clipboard, click the {1} button on the debug tool window, and paste the copied text. \
  Alternatively, you can just use action {2} {3}.
debug.workflow.consider.to.add.a.shortcut=(consider assigning a shortcut for it later)
debug.workflow.step.into=Let''s step into. You can use the {0} action or the {1} option on the debug panel.
debug.workflow.choose.method.to.step.in=In most cases, you might want to skip argument calculating, so the Smart Step Into feature suggests \
  the wrapping method by default. However, here we need to choose the second one: {0}. \
  You can choose it with the keyboard {1} and press {2}, or you can click the call.
debug.workflow.quick.evaluate=Let''s see what we are going to pass to {0}. Invoke Quick Evaluate Expression {1} for the selected argument.
debug.workflow.fix.error=Oh, we made a mistake in the array index! Let''s fix it right now. Close the ({0}) popup and change 0 to 1.
debug.workflow.step.over=Let''s check if the call of {0} will not throw an exception now. Use the Step Over action {1} or click the {2} option.
debug.workflow.mute.breakpoints=Oops, the same breakpoint again. Now we don''t need to stop at this breakpoint. \
  So, let''s mute breakpoints by clicking the {0} option or with the {1} action.
debug.workflow.run.to.cursor=Let''s check the result of {0}. We''ve moved the editor cursor to the {1} statement. \
  Press {2} or click {3}. Alternatively, click the line number. Note that {4} works even if breakpoints are muted.
debug.workflow.evaluate.expression=It seems the {0} value is not an average value we want to find. We forgot to divide it by length. \
  It seems we need to return {1}. Let''s check the guess. Press {2} or click the {3} option.
debug.workflow.type.result=Type {0} into the {1} field, completion works.
debug.workflow.evaluate.it=Press {0} or click {1}.
debug.workflow.stop.debug=It is a correct answer! Let''s close the dialog and stop debugging with {0} or the {1} button.
debug.workflow.resume=It seems there are no exceptions by now. Let''s continue execution with {0} or by clicking the {1} button.
