/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package org.intellij.lang.xpath;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>xpath-lexer.flex</tt>
 */
abstract class _XPathLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S1 = 2;
  public static final int VAR = 4;
  public static final int TYPE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13728 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\77\1\35\1\55\1\101\1\1\1\57\1\52\1\102\1\77\1\35\1\12"+
    "\1\103\1\57\1\104\1\52\1\105\1\106\1\107\1\12\1\110\1\111\1\1\1\64\1\1\1\24"+
    "\2\12\1\112\1\111\1\113\2\1\1\114\1\115\1\116\1\117\1\120\1\121\2\1\1\70\1"+
    "\1\1\113\1\1\1\122\1\12\1\123\1\1\1\124\7\1\2\12\1\27\1\104\1\113\1\125\1"+
    "\126\1\127\1\130\1\113\2\12\1\131\2\12\1\132\24\12\1\133\1\134\2\12\1\133"+
    "\2\12\1\135\1\136\1\13\3\12\1\136\3\12\1\27\2\1\1\12\1\1\5\12\1\137\1\24\45"+
    "\12\1\140\1\12\1\24\1\27\4\12\1\27\1\141\1\142\1\15\1\12\1\15\1\12\1\15\1"+
    "\142\1\70\3\12\1\143\1\1\1\144\1\113\2\1\1\113\5\12\1\26\2\12\1\145\4\12\1"+
    "\37\1\12\1\146\2\1\1\64\1\12\1\147\1\46\2\12\1\150\1\12\1\76\1\113\2\1\1\12"+
    "\1\111\3\12\1\46\2\1\2\113\1\151\5\1\1\106\2\12\1\143\1\152\1\113\2\1\1\153"+
    "\1\12\1\154\1\41\2\12\1\37\1\1\2\12\1\143\1\1\1\155\1\41\1\12\1\147\6\1\1"+
    "\156\1\157\14\12\4\1\21\12\1\137\2\12\1\137\1\160\1\12\1\147\3\12\1\161\1"+
    "\162\1\163\1\123\1\162\7\1\1\164\1\1\1\123\6\1\1\165\1\166\1\167\1\170\1\171"+
    "\3\1\1\172\147\1\2\12\1\146\2\12\1\146\10\12\1\173\1\174\2\12\1\131\3\12\1"+
    "\175\1\1\1\12\1\111\4\176\4\1\1\104\35\1\1\177\2\1\1\200\1\24\4\12\1\201\1"+
    "\24\4\12\1\132\1\106\1\12\1\147\1\24\4\12\1\146\1\1\1\12\1\27\3\1\1\12\40"+
    "\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\123\4\1\2\12\1\147\20\12\1\123"+
    "\1\12\1\202\1\1\2\12\1\146\1\104\1\12\1\147\4\12\1\37\2\1\1\203\1\204\5\12"+
    "\1\205\1\12\1\147\1\26\3\1\1\203\1\206\1\12\1\30\1\1\3\12\1\143\1\204\2\12"+
    "\1\143\1\1\1\113\1\1\1\207\1\41\1\12\1\37\1\12\1\111\1\1\1\12\1\123\1\47\2"+
    "\12\1\30\1\104\1\113\1\210\1\211\2\12\1\45\1\1\1\212\1\113\1\12\1\213\3\12"+
    "\1\214\1\215\1\216\1\27\1\65\1\217\1\220\1\176\2\12\1\132\1\37\7\12\1\30\1"+
    "\113\72\12\1\143\1\12\1\221\2\12\1\150\20\1\26\12\1\147\6\12\1\76\2\1\1\111"+
    "\1\222\1\55\1\223\1\224\6\12\1\15\1\1\1\153\25\12\1\147\1\1\4\12\1\204\2\12"+
    "\1\26\2\1\1\150\7\1\1\210\7\12\1\123\1\1\1\113\1\24\1\27\1\24\1\27\1\225\4"+
    "\12\1\146\1\226\1\227\2\1\1\230\1\12\1\13\1\231\2\147\2\1\7\12\1\27\30\1\1"+
    "\12\1\123\3\12\1\70\2\1\2\12\1\1\1\12\1\232\2\12\1\37\1\12\1\147\2\12\1\233"+
    "\3\1\11\12\1\147\1\113\5\1\2\12\1\26\3\12\1\143\11\1\23\12\1\111\1\12\1\37"+
    "\1\26\11\1\1\234\2\12\1\235\1\12\1\37\1\12\1\111\1\12\1\146\4\1\1\12\1\236"+
    "\1\12\1\37\1\12\1\76\4\1\3\12\1\237\4\1\1\70\1\240\1\12\1\143\2\1\1\12\1\123"+
    "\1\12\1\123\2\1\1\122\1\12\1\46\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15"+
    "\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1\153\2\12\1\26\2\1\1\64\1\1\1"+
    "\153\2\12\2\1\1\12\1\45\1\113\1\153\1\12\1\111\1\64\1\1\2\12\1\241\1\153\2"+
    "\12\1\30\1\242\1\243\2\1\1\12\1\21\1\150\5\1\1\244\1\245\1\45\2\12\1\146\1"+
    "\1\1\113\1\72\1\54\1\55\1\67\1\1\1\246\1\15\21\1\3\12\1\1\1\247\1\113\12\1"+
    "\2\12\1\146\2\1\1\250\2\1\3\12\1\1\1\251\1\113\2\1\2\12\1\27\1\1\1\113\3\1"+
    "\1\12\1\76\1\1\1\113\26\1\4\12\1\113\1\104\34\1\3\12\1\45\20\1\71\12\1\76"+
    "\16\1\14\12\1\143\53\1\2\12\1\146\75\1\44\12\1\111\33\1\43\12\1\45\1\12\1"+
    "\146\1\113\6\1\1\12\1\147\1\1\3\12\1\1\1\143\1\113\1\153\1\252\1\12\67\1\4"+
    "\12\1\46\1\70\3\1\1\153\6\1\1\15\77\1\6\12\1\27\1\123\1\45\1\76\66\1\5\12"+
    "\1\210\3\12\1\142\1\253\1\254\1\255\3\12\1\256\1\257\1\12\1\260\1\261\1\35"+
    "\24\12\1\262\1\12\1\35\1\132\1\12\1\132\1\12\1\210\1\12\1\210\1\146\1\12\1"+
    "\146\1\12\1\55\1\12\1\55\1\12\1\263\3\264\14\12\1\46\123\1\1\255\1\12\1\265"+
    "\1\266\1\267\1\270\1\271\1\272\1\273\1\150\1\274\1\150\24\1\55\12\1\111\2"+
    "\1\103\12\1\46\15\12\1\147\150\12\1\15\25\1\41\12\1\147\36\1");

  /* The ZZ_CMAP_A table has 3024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\56\1\7\1\0\1\41\1\0\1\57\1\10\1\37\1\40\1\50"+
    "\1\12\1\52\1\5\1\4\1\53\12\3\1\6\1\60\1\44\1\55\1\45\1\47\1\51\4\2\1\11\25"+
    "\2\1\61\1\0\1\62\1\0\1\2\1\0\1\13\1\26\1\15\1\31\1\16\1\24\1\33\1\30\1\25"+
    "\2\2\1\23\1\34\1\14\1\21\1\35\1\46\1\22\1\17\1\20\1\27\1\42\1\32\1\36\1\43"+
    "\1\2\1\63\1\54\1\64\14\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\12\2\4\0\14\2\16"+
    "\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3\2\1\0"+
    "\1\2\1\0\4\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10\2\10\0\13"+
    "\2\5\0\3\2\15\0\12\3\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\3\3\2\2\0\2\2\1\0"+
    "\16\2\15\0\11\2\13\0\1\2\16\0\12\3\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4\0\1\2\11"+
    "\0\1\2\3\0\1\2\7\0\11\2\7\0\5\2\17\0\26\2\3\0\1\2\2\0\1\2\7\0\12\2\4\0\12"+
    "\3\1\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0\1\2"+
    "\15\0\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4\2\1\0\1\2"+
    "\7\0\12\3\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0\1\2\30\0\1"+
    "\2\13\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2"+
    "\2\3\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\4\2\1\0\5\2\3\0"+
    "\1\2\3\0\2\2\15\0\13\2\2\0\1\2\21\0\1\2\12\0\6\2\5\0\22\2\3\0\10\2\1\0\11"+
    "\2\1\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\3\7\0\2\2\1\0\1\2\2\0\2\2\1\0"+
    "\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2"+
    "\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\3\2\0\14\2\1\0\24\2\13\0\5\2\3\0\6\2\4"+
    "\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0\6\2\1\0\1\2\5\0\1\2\2"+
    "\0\13\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4\2\2\0\7\2\1"+
    "\0\1\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0\10\2\7\0\15\2\1\0\6\2"+
    "\23\0\1\2\4\0\1\2\3\0\11\2\1\0\1\2\5\0\17\2\1\0\16\2\2\0\14\2\13\0\1\2\15"+
    "\0\7\2\7\0\16\2\15\0\2\2\12\3\3\0\3\2\11\0\4\2\1\0\4\2\3\0\2\2\11\0\10\2\1"+
    "\0\1\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0"+
    "\6\2\5\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\2\2\13\0\5\2\6\0"+
    "\4\2\3\0\2\2\14\0\10\2\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5\2\5\0\2\2\3\0\7\2\6"+
    "\0\3\2\12\3\2\2\13\0\11\2\2\0\27\2\2\0\7\2\1\0\3\2\1\0\4\2\1\0\4\2\2\0\6\2"+
    "\3\0\1\2\1\0\1\2\2\0\5\2\1\0\12\2\12\3\5\2\1\0\3\2\1\0\10\2\4\0\7\2\3\0\1"+
    "\2\3\0\2\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2\3\0\6\2\2\0\6"+
    "\2\2\0\6\2\11\0\7\2\4\0\5\2\3\0\5\2\5\0\1\2\1\0\10\2\1\0\5\2\1\0\1\2\1\0\2"+
    "\2\1\0\2\2\1\0\12\2\6\0\12\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\3\0\14\2\1\0"+
    "\16\2\1\0\2\2\1\0\2\2\1\0\10\2\6\0\4\2\4\0\16\2\2\0\1\2\1\0\14\2\1\0\2\2\3"+
    "\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0\3\2\1\0\12\2\3\0\1\2\12\0\4\2"+
    "\13\0\12\3\1\2\1\0\1\2\3\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2\1\0\2\2\14\0\3\2\4"+
    "\0\2\2\1\0\1\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3\2\2\0\1\2\2\0\2\2\2\0\4\2"+
    "\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10\2\1\0\7\2\1\0\14\2\1\0\4"+
    "\2\1\0\5\2\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0\22\3\1\0\2\2\1\0\1\2\2\0"+
    "\1\2\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\2\2\1\0\1"+
    "\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0\5\2\1\0\3\2\1\0\5"+
    "\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\1\11\14\3\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\1"+
    "\1\26\1\27\1\30\1\31\13\3\1\32\1\33\1\34"+
    "\1\35\1\36\14\35\1\37\1\40\1\41\1\42\2\0"+
    "\1\4\1\0\1\43\1\44\1\45\2\10\3\3\1\46"+
    "\5\3\1\47\4\3\1\50\1\51\1\3\1\52\1\53"+
    "\2\3\1\54\1\55\2\3\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\2\0\1\3\1\65\4\3\1\66"+
    "\2\3\1\67\1\70\1\3\1\71\4\3\1\0\1\72"+
    "\3\35\1\46\6\35\1\47\4\35\1\50\1\51\1\35"+
    "\1\52\1\35\1\53\2\35\1\54\1\55\2\35\1\4"+
    "\1\0\13\3\1\73\6\3\2\0\1\74\13\3\1\75"+
    "\1\76\14\35\1\73\7\35\3\3\1\77\4\3\1\100"+
    "\1\101\6\3\1\15\1\16\1\102\1\103\3\3\1\104"+
    "\3\3\1\105\1\3\3\35\1\77\5\35\1\100\1\101"+
    "\1\35\1\106\5\35\4\3\1\107\12\3\1\110\3\3"+
    "\1\111\5\35\1\107\7\35\11\3\1\112\1\3\1\113"+
    "\2\3\11\35\14\3\11\35\1\100\7\3\1\114\1\3"+
    "\1\115\1\3\1\100\10\35\1\3\1\100\3\3\1\116"+
    "\1\117\2\35\1\100\3\35\4\3\5\35\3\3\4\35"+
    "\3\3\4\35\3\3\4\35\2\3\1\120\2\35\2\3"+
    "\2\35\2\3\2\35\1\3\1\35\1\3\1\35\1\3"+
    "\1\35\1\3\1\35\1\3\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u013e\0\u0247\0\u027c\0\u02b1\0\u013e"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u013e\0\u013e\0\u0597"+
    "\0\u05cc\0\u013e\0\u013e\0\u013e\0\u013e\0\u0601\0\u013e\0\u013e"+
    "\0\u0636\0\u066b\0\u013e\0\u013e\0\u013e\0\u013e\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d"+
    "\0\u08b2\0\u013e\0\u08e7\0\u0247\0\u091c\0\u013e\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0562\0\u013e\0\u013e\0\u013e\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u013e\0\u013e\0\u013e\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u01a8\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u01a8\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u01a8\0\u01a8\0\u0f87"+
    "\0\u01a8\0\u01a8\0\u0fbc\0\u0ff1\0\u01a8\0\u01a8\0\u1026\0\u105b"+
    "\0\u013e\0\u013e\0\u013e\0\u013e\0\u013e\0\u013e\0\u013e\0\u1090"+
    "\0\u10c5\0\u10fa\0\u01a8\0\u112f\0\u1164\0\u1199\0\u11ce\0\u01a8"+
    "\0\u1203\0\u1238\0\u01a8\0\u01a8\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u013e\0\u13e0\0\u1415\0\u144a\0\u091c"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u091c\0\u15bd"+
    "\0\u15f2\0\u1627\0\u165c\0\u091c\0\u091c\0\u1691\0\u091c\0\u16c6"+
    "\0\u091c\0\u16fb\0\u1730\0\u091c\0\u091c\0\u1765\0\u179a\0\u17cf"+
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942"+
    "\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u01a8\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u01a8\0\u1bf3\0\u1c28"+
    "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0"+
    "\0\u1e05\0\u01a8\0\u01a8\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e"+
    "\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u091c"+
    "\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229"+
    "\0\u225e\0\u2293\0\u01a8\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u01a8"+
    "\0\u01a8\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da"+
    "\0\u250f\0\u2544\0\u01a8\0\u2579\0\u25ae\0\u25e3\0\u01a8\0\u2618"+
    "\0\u264d\0\u2682\0\u01a8\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u091c"+
    "\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u091c\0\u091c\0\u2894"+
    "\0\u091c\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07"+
    "\0\u2a3c\0\u2a71\0\u01a8\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a"+
    "\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u01a8\0\u2cb8\0\u2ced"+
    "\0\u2d22\0\u01a8\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u091c"+
    "\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3"+
    "\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b"+
    "\0\u01a8\0\u31b0\0\u01a8\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9"+
    "\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461"+
    "\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609"+
    "\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1"+
    "\0\u37e6\0\u381b\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959"+
    "\0\u398e\0\u39c3\0\u39f8\0\u01a8\0\u3a2d\0\u01a8\0\u3a62\0\u3a97"+
    "\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f"+
    "\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u01a8\0\u01a8\0\u3d7d"+
    "\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25"+
    "\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd"+
    "\0\u4102\0\u4137\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275"+
    "\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d"+
    "\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u091c\0\u455b\0\u4590"+
    "\0\u45c5\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce\0\u4703\0\u4738"+
    "\0\u476d\0\u47a2\0\u47d7\0\u480c\0\u4841\0\u4876\0\u48ab\0\u48e0"+
    "\0\u4915\0\u494a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\11\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\11\1\27\1\30\1\31\3\11\1\32\1\11"+
    "\1\33\1\11\1\34\1\11\1\35\1\36\1\37\2\11"+
    "\1\40\1\41\1\11\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\7\1\53\1\54\1\55"+
    "\1\56\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\11\1\20\1\57\1\22\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\27\1\30\1\66\1\11"+
    "\1\67\1\11\1\70\1\11\1\33\1\71\1\34\1\11"+
    "\1\35\1\36\1\37\2\11\1\40\1\41\1\11\1\42"+
    "\1\72\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\7\1\53\1\54\1\55\1\56\1\7\1\10\1\73"+
    "\1\12\1\13\1\14\1\74\1\16\1\17\1\73\1\20"+
    "\24\73\1\35\1\36\1\37\2\73\1\40\1\41\1\73"+
    "\1\42\1\7\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\7\1\53\1\54\1\55\1\56\1\7\1\10"+
    "\1\75\1\12\1\13\1\14\1\74\1\16\1\17\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\2\75"+
    "\1\105\1\106\1\107\3\75\1\110\1\75\1\111\1\75"+
    "\1\112\1\75\1\113\1\114\1\37\2\75\1\40\1\41"+
    "\1\75\1\115\1\116\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\7\1\53\1\54\1\55\1\56\2\0"+
    "\1\117\6\0\1\117\1\0\24\117\3\0\2\117\2\0"+
    "\1\117\24\0\1\120\144\0\1\10\65\0\4\11\3\0"+
    "\1\11\1\0\24\11\3\0\2\11\2\0\1\11\21\0"+
    "\1\12\1\121\4\0\1\122\4\0\1\122\51\0\1\121"+
    "\1\123\66\0\1\124\31\0\1\125\24\0\7\16\1\126"+
    "\55\16\10\17\1\127\54\17\2\0\4\11\3\0\1\11"+
    "\1\0\1\11\1\130\3\11\1\131\16\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\1\132"+
    "\2\11\1\133\2\11\1\134\15\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\6\11\1\135"+
    "\6\11\1\136\6\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\10\11\1\137\13\11\3\0"+
    "\1\140\1\11\2\0\1\141\20\0\4\11\3\0\1\11"+
    "\1\0\2\11\1\142\1\143\2\11\1\144\15\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\3\11\1\145\20\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\3\11\1\146\1\11\1\147"+
    "\16\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\6\11\1\150\15\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\4\11\1\151"+
    "\4\11\1\152\12\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\3\11\1\153\2\11\1\154"+
    "\15\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\3\11\1\155\1\11\1\156\16\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\1\157\6\11\1\160\14\11\3\0\2\11\2\0\1\11"+
    "\24\0\1\161\122\0\1\162\10\0\1\163\54\0\1\164"+
    "\7\0\1\165\62\0\1\166\66\0\1\167\32\0\1\170"+
    "\7\0\1\171\33\0\4\11\3\0\1\11\1\0\1\11"+
    "\1\172\2\11\1\173\1\131\16\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\1\174\5\11"+
    "\1\135\6\11\1\136\6\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\10\11\1\175\12\11"+
    "\1\176\3\0\1\140\1\11\2\0\1\141\20\0\4\11"+
    "\3\0\1\11\1\0\1\177\1\11\1\142\1\143\2\11"+
    "\1\144\15\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\3\11\1\145\2\11\1\200\1\201"+
    "\5\11\1\202\6\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\7\11\1\203\1\11\1\204"+
    "\12\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\3\11\1\205\20\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\1\11\1\206"+
    "\2\11\1\151\4\11\1\152\4\11\1\207\5\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\1\11\1\210\22\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\3\11\1\153\2\11\1\154"+
    "\3\11\1\211\11\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\6\11\1\212\15\11\3\0"+
    "\2\11\2\0\1\11\17\0\1\213\4\73\1\214\2\0"+
    "\1\73\1\0\24\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\75\3\0\1\75\1\0\24\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\1\75\1\215"+
    "\3\75\1\216\16\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\1\217\2\75\1\220\2\75"+
    "\1\221\15\75\3\0\2\75\2\0\1\75\20\0\4\75"+
    "\3\0\1\75\1\0\6\75\1\222\6\75\1\223\6\75"+
    "\3\0\2\75\2\0\1\75\20\0\4\75\3\0\1\75"+
    "\1\0\10\75\1\224\10\75\1\225\2\75\3\0\1\226"+
    "\1\75\2\0\1\227\20\0\4\75\3\0\1\75\1\0"+
    "\2\75\1\230\1\231\2\75\1\232\15\75\3\0\2\75"+
    "\2\0\1\75\20\0\4\75\3\0\1\75\1\0\3\75"+
    "\1\233\20\75\3\0\2\75\2\0\1\75\20\0\4\75"+
    "\3\0\1\75\1\0\3\75\1\234\1\75\1\235\16\75"+
    "\3\0\2\75\2\0\1\75\20\0\4\75\3\0\1\75"+
    "\1\0\6\75\1\236\15\75\3\0\2\75\2\0\1\75"+
    "\20\0\4\75\3\0\1\75\1\0\4\75\1\237\1\240"+
    "\3\75\1\241\12\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\3\75\1\242\2\75\1\243"+
    "\15\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\3\75\1\244\1\75\1\245\16\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\1\246\6\75\1\247\14\75\3\0\2\75\2\0\1\75"+
    "\20\0\4\117\3\0\1\117\1\0\24\117\3\0\2\117"+
    "\2\0\1\117\17\0\1\120\66\0\1\121\5\0\1\122"+
    "\4\0\1\122\51\0\1\250\1\0\1\251\4\0\1\251"+
    "\61\0\1\16\65\0\1\17\56\0\4\11\3\0\1\11"+
    "\1\0\2\11\1\252\21\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\5\11\1\253\16\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\21\11\1\254\2\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\16\11\1\255\5\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\21\11\1\256\2\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\12\11\1\257\11\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\3\11\1\256\20\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\3\11\1\260\20\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\15\11\1\261\6\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\10\11\1\262\13\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\21\11\1\263\2\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\23\11\1\264\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\7\11\1\265\1\266\13\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\4\11\1\267\17\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\2\11\1\270\21\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\7\11\1\271\14\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\3\11\1\272\2\11\1\273\15\11\3\0\2\11"+
    "\2\0\1\11\36\0\1\274\64\0\1\275\46\0\4\11"+
    "\3\0\1\11\1\0\2\11\1\252\13\11\1\276\5\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\4\11\1\277\17\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\3\11\1\256\1\300"+
    "\17\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\2\11\1\301\21\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\5\11\1\302"+
    "\16\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\3\11\1\303\20\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\3\11\1\304"+
    "\20\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\5\11\1\305\16\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\4\11\1\306"+
    "\1\307\16\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\12\11\1\310\11\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\12\11"+
    "\1\311\11\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\24\11\3\0\1\312\1\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\16\11\1\313"+
    "\5\11\3\0\2\11\2\0\1\11\17\0\1\213\4\0"+
    "\1\214\60\0\4\75\3\0\1\75\1\0\2\75\1\314"+
    "\21\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\5\75\1\315\16\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\21\75\1\316"+
    "\2\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\16\75\1\317\5\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\21\75\1\320"+
    "\2\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\12\75\1\321\11\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\3\75\1\320"+
    "\20\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\22\75\1\322\1\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\3\75\1\323"+
    "\20\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\15\75\1\324\6\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\10\75\1\325"+
    "\13\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\21\75\1\326\2\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\23\75\1\327"+
    "\3\0\2\75\2\0\1\75\20\0\4\75\3\0\1\75"+
    "\1\0\7\75\1\330\1\331\13\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\3\75\1\332"+
    "\20\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\4\75\1\333\17\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\2\75\1\334"+
    "\21\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\7\75\1\335\14\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\3\75\1\336"+
    "\2\75\1\337\15\75\3\0\2\75\2\0\1\75\21\0"+
    "\1\250\63\0\4\11\3\0\1\11\1\0\3\11\1\340"+
    "\20\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\7\11\1\341\14\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\3\11\1\342"+
    "\20\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\3\11\1\343\20\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\21\11\1\344"+
    "\2\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\10\11\1\345\13\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\7\11\1\346"+
    "\14\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\3\11\1\347\20\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\11\11\1\350"+
    "\12\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\3\11\1\351\20\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\5\11\1\343"+
    "\16\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\10\11\1\352\13\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\2\11\1\353"+
    "\21\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\14\11\1\354\7\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\3\11\1\355"+
    "\20\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\2\11\1\356\21\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\2\11\1\357"+
    "\21\11\3\0\2\11\2\0\1\11\76\0\1\360\64\0"+
    "\1\361\6\0\4\11\3\0\1\11\1\0\5\11\1\362"+
    "\16\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\3\11\1\363\20\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\3\11\1\364"+
    "\20\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\12\11\1\365\11\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\1\366\23\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\1\11\1\367\22\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\14\11\1\370\7\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\5\11\1\371\16\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\3\11\1\372\20\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\24\11\3\0\1\373\1\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\6\11\1\374\15\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\75\3\0\1\75\1\0"+
    "\3\75\1\375\20\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\7\75\1\376\14\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\3\75\1\377\20\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\3\75\1\u0100\20\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\21\75\1\u0101\2\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\10\75\1\u0102\13\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\5\75\1\u0103\16\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\7\75\1\u0104\14\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\3\75\1\u0105\20\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\11\75\1\u0106\12\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\3\75\1\u0107\20\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\5\75\1\u0100\16\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\10\75\1\u0108\13\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\21\75\1\u0109\2\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\2\75\1\u010a\21\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\14\75\1\u010b\7\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\3\75\1\u010c\20\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\2\75\1\u010d\21\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\2\75\1\u010e\21\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\11\3\0\1\11\1\0\4\11\1\u010f\17\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\12\11\1\u0110\11\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\4\11\1\u0111\17\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\3\11\1\u0112\20\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\16\11\1\350\5\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\24\11\3\0\1\11\1\u0113\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\21\11\1\u0114\2\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\6\11"+
    "\1\u0115\15\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\3\11\1\u0116\20\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\21\11"+
    "\1\u0117\2\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\1\11\1\u0118\22\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\3\11"+
    "\1\u0119\20\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\3\11\1\u011a\20\11\3\0\2\11"+
    "\2\0\1\11\73\0\1\163\64\0\1\165\11\0\4\11"+
    "\3\0\1\11\1\0\1\u011b\23\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\22\11\1\u011c"+
    "\1\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\4\11\1\u011d\17\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\5\11\1\u011e"+
    "\16\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\7\11\1\u011f\14\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\1\u0120\23\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\7\11\1\u0121\14\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\1\11\1\u0122\22\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\75\3\0\1\75"+
    "\1\0\4\75\1\u0123\17\75\3\0\2\75\2\0\1\75"+
    "\20\0\4\75\3\0\1\75\1\0\12\75\1\u0124\11\75"+
    "\3\0\2\75\2\0\1\75\20\0\4\75\3\0\1\75"+
    "\1\0\4\75\1\u0125\17\75\3\0\2\75\2\0\1\75"+
    "\20\0\4\75\3\0\1\75\1\0\3\75\1\u0126\20\75"+
    "\3\0\2\75\2\0\1\75\20\0\4\75\3\0\1\75"+
    "\1\0\16\75\1\u0106\5\75\3\0\2\75\2\0\1\75"+
    "\20\0\4\75\3\0\1\75\1\0\24\75\3\0\1\75"+
    "\1\u0127\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\24\75\3\0\1\75\1\u0128\2\0\1\75\20\0\4\75"+
    "\3\0\1\75\1\0\21\75\1\u0129\2\75\3\0\2\75"+
    "\2\0\1\75\20\0\4\75\3\0\1\75\1\0\6\75"+
    "\1\u012a\15\75\3\0\2\75\2\0\1\75\20\0\4\75"+
    "\3\0\1\75\1\0\3\75\1\u012b\20\75\3\0\2\75"+
    "\2\0\1\75\20\0\4\75\3\0\1\75\1\0\21\75"+
    "\1\u012c\2\75\3\0\2\75\2\0\1\75\20\0\4\75"+
    "\3\0\1\75\1\0\1\75\1\u012d\22\75\3\0\2\75"+
    "\2\0\1\75\20\0\4\75\3\0\1\75\1\0\3\75"+
    "\1\u012e\20\75\3\0\2\75\2\0\1\75\20\0\4\75"+
    "\3\0\1\75\1\0\3\75\1\u012f\20\75\3\0\2\75"+
    "\2\0\1\75\20\0\4\11\3\0\1\11\1\0\5\11"+
    "\1\u0130\16\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\13\11\1\u0131\10\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\22\11"+
    "\1\u0132\1\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\1\11\1\264\22\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\1\u0133"+
    "\23\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\17\11\1\u0134\4\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\1\11\1\u0135"+
    "\22\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\3\11\1\u0136\20\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\5\11\1\350"+
    "\16\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\16\11\1\u0134\5\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\4\11\1\u0137"+
    "\17\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\13\11\1\u0138\10\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\5\11\1\u0139"+
    "\16\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\11\11\1\u013a\12\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\1\11\1\u013b"+
    "\22\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\1\11\1\u013c\22\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\4\11\1\u013d"+
    "\17\11\3\0\2\11\2\0\1\11\20\0\4\75\3\0"+
    "\1\75\1\0\5\75\1\u013e\16\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\13\75\1\u013f"+
    "\10\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\22\75\1\u0140\1\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\1\75\1\327"+
    "\22\75\3\0\2\75\2\0\1\75\20\0\3\75\1\u0141"+
    "\3\0\1\75\1\0\24\75\3\0\2\75\2\0\1\75"+
    "\20\0\4\75\3\0\1\75\1\0\1\u0142\23\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\17\75\1\u0143\4\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\1\75\1\u0144\22\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\3\75\1\u0145\20\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\5\75\1\u0106\16\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\16\75\1\u0143\5\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\4\75\1\u0146\17\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\6\11\1\u0147\15\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\14\11\1\u0148\7\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\1\u0149\23\11\3\0\2\11\2\0\1\11\20\0\3\11"+
    "\1\u014a\3\0\1\11\1\0\24\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\12\11\1\u014b"+
    "\11\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\16\11\1\u014c\5\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\1\11\1\u014d"+
    "\22\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\4\11\1\u014e\17\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\10\11\1\u014f"+
    "\13\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\12\11\1\u0150\11\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\2\11\1\u0151"+
    "\21\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\3\11\1\u0152\20\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\75\3\0\1\75\1\0\6\75\1\u0153"+
    "\15\75\3\0\2\75\2\0\1\75\20\0\4\75\3\0"+
    "\1\75\1\0\14\75\1\u0154\7\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\1\u0155\23\75"+
    "\3\0\2\75\2\0\1\75\20\0\4\75\3\0\1\75"+
    "\1\0\4\75\1\u0156\17\75\3\0\2\75\2\0\1\75"+
    "\20\0\3\75\1\u0157\3\0\1\75\1\0\24\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\12\75\1\u0158\11\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\16\75\1\u0159\5\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\1\75\1\u015a\22\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\4\75\1\u015b\17\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\7\11\1\u015c\14\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\5\11\1\255\16\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\2\11\1\u015d\21\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\1\u015e\2\11\1\u015f\20\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\1\11\1\u0160\22\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\1\u0161\23\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\5\11\1\u0162\16\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\12\11\1\u0163\11\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\3\11\1\u0164\20\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\3\11\1\u0165\20\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\3\11\1\u0166\20\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\2\11\1\u0167\21\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\75\3\0\1\75\1\0"+
    "\7\75\1\u0168\14\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\5\75\1\317\16\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\2\75\1\u0169\21\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\3\75\1\u016a\20\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\1\u016b\2\75\1\u016c\20\75\3\0\2\75\2\0\1\75"+
    "\20\0\4\75\3\0\1\75\1\0\1\75\1\u016d\22\75"+
    "\3\0\2\75\2\0\1\75\20\0\4\75\3\0\1\75"+
    "\1\0\1\u016e\23\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\5\75\1\u016f\16\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\12\75\1\u0170\11\75\3\0\2\75\2\0\1\75\20\0"+
    "\3\11\1\u0171\3\0\1\11\1\0\24\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\3\11"+
    "\1\350\20\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\5\11\1\131\16\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\10\11"+
    "\1\137\13\11\3\0\2\11\2\0\1\11\20\0\4\11"+
    "\3\0\1\11\1\0\20\11\1\u0172\3\11\3\0\2\11"+
    "\2\0\1\11\20\0\4\11\3\0\1\11\1\0\1\11"+
    "\1\u0173\22\11\3\0\2\11\2\0\1\11\20\0\3\11"+
    "\1\u0174\3\0\1\11\1\0\24\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\1\11\1\u0175"+
    "\22\11\3\0\2\11\2\0\1\11\20\0\4\11\3\0"+
    "\1\11\1\0\4\11\1\u0176\17\11\3\0\2\11\2\0"+
    "\1\11\20\0\4\11\3\0\1\11\1\0\5\11\1\u0177"+
    "\16\11\3\0\2\11\2\0\1\11\20\0\3\75\1\u0178"+
    "\3\0\1\75\1\0\24\75\3\0\2\75\2\0\1\75"+
    "\20\0\4\75\3\0\1\75\1\0\3\75\1\u0106\20\75"+
    "\3\0\2\75\2\0\1\75\20\0\4\75\3\0\1\75"+
    "\1\0\24\75\3\0\2\75\2\0\1\u0179\20\0\4\75"+
    "\3\0\1\75\1\0\5\75\1\216\16\75\3\0\2\75"+
    "\2\0\1\75\20\0\4\75\3\0\1\75\1\0\10\75"+
    "\1\224\13\75\3\0\2\75\2\0\1\75\20\0\4\75"+
    "\3\0\1\75\1\0\20\75\1\u017a\3\75\3\0\2\75"+
    "\2\0\1\75\20\0\4\75\3\0\1\75\1\0\1\75"+
    "\1\u017b\22\75\3\0\2\75\2\0\1\75\20\0\3\75"+
    "\1\u017c\3\0\1\75\1\0\24\75\3\0\2\75\2\0"+
    "\1\75\20\0\4\75\3\0\1\75\1\0\1\75\1\u017d"+
    "\22\75\3\0\2\75\2\0\1\75\20\0\4\11\3\0"+
    "\1\11\1\0\6\11\1\u017e\15\11\3\0\2\11\2\0"+
    "\1\11\20\0\3\11\1\u017f\3\0\1\11\1\0\24\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\5\11\1\u015c\16\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\1\11\1\u0180\22\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\20\11\1\u0181\3\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\75\3\0\1\75\1\0\6\75\1\u0182\15\75"+
    "\3\0\2\75\2\0\1\75\20\0\4\75\3\0\1\75"+
    "\1\0\14\75\1\u0183\7\75\3\0\2\75\2\0\1\75"+
    "\20\0\3\75\1\u0184\3\0\1\75\1\0\24\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\5\75\1\u0168\16\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\1\75\1\u0185\22\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\20\75\1\u0186\3\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\11\3\0\1\11\1\0\7\11\1\u0187\14\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\4\11\1\u0188\17\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\6\11\1\134\15\11\3\0"+
    "\2\11\2\0\1\11\20\0\3\11\1\u0189\3\0\1\11"+
    "\1\0\24\11\3\0\2\11\2\0\1\11\20\0\4\75"+
    "\3\0\1\75\1\0\7\75\1\u018a\14\75\3\0\2\75"+
    "\2\0\1\75\20\0\4\75\3\0\1\75\1\0\3\75"+
    "\1\u018b\20\75\3\0\2\75\2\0\1\75\20\0\4\75"+
    "\3\0\1\75\1\0\4\75\1\u018c\17\75\3\0\2\75"+
    "\2\0\1\75\20\0\4\75\3\0\1\75\1\0\6\75"+
    "\1\221\15\75\3\0\2\75\2\0\1\75\20\0\3\75"+
    "\1\u018d\3\0\1\75\1\0\24\75\3\0\2\75\2\0"+
    "\1\75\20\0\3\11\1\u018e\3\0\1\11\1\0\24\11"+
    "\3\0\2\11\2\0\1\11\20\0\4\11\3\0\1\11"+
    "\1\0\12\11\1\u018f\11\11\3\0\2\11\2\0\1\11"+
    "\20\0\4\11\3\0\1\11\1\0\12\11\1\u0190\11\11"+
    "\3\0\2\11\2\0\1\11\20\0\3\75\1\u0191\3\0"+
    "\1\75\1\0\24\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\1\75\1\u0192\22\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\12\75\1\u0193\11\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\12\75\1\u0194\11\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\4\11\1\u0195\17\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\13\11\1\u0196\10\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\1\11\1\u0197\22\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\75\3\0\1\75\1\0\4\75\1\u0198\17\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\2\75\1\u0199\21\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\13\75\1\u019a\10\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\1\75\1\u019b\22\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\11\3\0\1\11\1\0\3\11\1\143\20\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\11\3\0\1\11\1\0"+
    "\10\11\1\u019c\13\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\4\11\1\u019d\17\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\75\3\0\1\75\1\0"+
    "\3\75\1\231\20\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\3\75\1\u019e\20\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\75\3\0\1\75\1\0"+
    "\10\75\1\u019f\13\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\4\75\1\u01a0\17\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\12\11\1\u01a1\11\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\5\11\1\u01a2\16\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\75\3\0\1\75\1\0"+
    "\12\75\1\u01a3\11\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\5\75\1\u01a4\16\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\1\11\1\u01a5\22\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\7\11\1\u01a6\14\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\75\3\0\1\75\1\0"+
    "\1\75\1\u01a7\22\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\7\75\1\u01a8\14\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\20\11\1\350\3\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\11\3\0\1\11\1\0\14\11\1\u01a9\7\11\3\0"+
    "\2\11\2\0\1\11\20\0\4\75\3\0\1\75\1\0"+
    "\20\75\1\u0106\3\75\3\0\2\75\2\0\1\75\20\0"+
    "\4\75\3\0\1\75\1\0\14\75\1\u01aa\7\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\2\11\1\u01ab\21\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\75\3\0\1\75\1\0\2\75\1\u01ac\21\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\5\11\1\u01ad\16\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\75\3\0\1\75\1\0\5\75\1\u01ae\16\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\12\11\1\u01af\11\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\75\3\0\1\75\1\0\12\75\1\u01b0\11\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\6\11\1\u01b1\15\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\75\3\0\1\75\1\0\6\75\1\u01b2\15\75\3\0"+
    "\2\75\2\0\1\75\20\0\4\11\3\0\1\11\1\0"+
    "\1\11\1\343\22\11\3\0\2\11\2\0\1\11\20\0"+
    "\4\75\3\0\1\75\1\0\1\75\1\u0100\22\75\3\0"+
    "\2\75\2\0\1\75\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18815];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\4\1\1\11\3\1\1\11\15\1\2\11"+
    "\2\1\4\11\1\1\2\11\2\1\4\11\13\1\1\11"+
    "\3\1\1\11\15\1\3\11\3\1\1\0\3\11\33\1"+
    "\7\11\2\0\21\1\1\0\1\11\34\1\1\0\22\1"+
    "\2\0\365\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private boolean allowXPath2Syntax = false;

  _XPathLexer(boolean allowXPath2Syntax) {
    this((java.io.Reader)null);
    this.allowXPath2Syntax = allowXPath2Syntax;
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  private IElementType ncName() {
    yybegin(S1);
    return XPathTokenTypes.NCNAME;
  }

  protected abstract void readComment() throws java.io.IOException;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _XPathLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.BAD_CHARACTER;
            }
          case 81: break;
          case 2: 
            { return XPathTokenTypes.WHITESPACE;
            }
          case 82: break;
          case 3: 
            { yybegin(S1);          return XPathTokenTypes.NCNAME;
            }
          case 83: break;
          case 4: 
            { yybegin(S1);          return XPathTokenTypes.NUMBER;
            }
          case 84: break;
          case 5: 
            { yybegin(S1);          return XPathTokenTypes.DOT;
            }
          case 85: break;
          case 6: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.MINUS;
            }
          case 86: break;
          case 7: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.COL;
            }
          case 87: break;
          case 8: 
            { yybegin(S1);          return XPathTokenTypes.STRING_LITERAL;
            }
          case 88: break;
          case 9: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.PLUS;
            }
          case 89: break;
          case 10: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.LPAREN;
            }
          case 90: break;
          case 11: 
            { yybegin(S1);          return XPathTokenTypes.RPAREN;
            }
          case 91: break;
          case 12: 
            { yybegin(VAR);         return XPathTokenTypes.DOLLAR;
            }
          case 92: break;
          case 13: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.LT;
            }
          case 93: break;
          case 14: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.GT;
            }
          case 94: break;
          case 15: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.QUEST; } else { return XPathTokenTypes.BAD_CHARACTER; }
            }
          case 95: break;
          case 16: 
            { yybegin(S1);          return XPathTokenTypes.STAR;
            }
          case 96: break;
          case 17: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.AT;
            }
          case 97: break;
          case 18: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.COMMA;
            }
          case 98: break;
          case 19: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.PATH;
            }
          case 99: break;
          case 20: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.UNION;
            }
          case 100: break;
          case 21: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.EQ;
            }
          case 101: break;
          case 22: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.LBRACKET;
            }
          case 102: break;
          case 23: 
            { yybegin(S1);          return XPathTokenTypes.RBRACKET;
            }
          case 103: break;
          case 24: 
            { return XPathTokenTypes.LBRACE;
            }
          case 104: break;
          case 25: 
            { return XPathTokenTypes.RBRACE;
            }
          case 105: break;
          case 26: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.MULT;
            }
          case 106: break;
          case 27: 
            { yybegin(S1);          return XPathTokenTypes.VARIABLE_NAME;
            }
          case 107: break;
          case 28: 
            { return XPathTokenTypes.COL;
            }
          case 108: break;
          case 29: 
            { return XPathTokenTypes.NCNAME;
            }
          case 109: break;
          case 30: 
            { yybegin(S1); return XPathTokenTypes.PLUS;
            }
          case 110: break;
          case 31: 
            { return XPathTokenTypes.LPAREN;
            }
          case 111: break;
          case 32: 
            { return XPathTokenTypes.RPAREN;
            }
          case 112: break;
          case 33: 
            { yybegin(S1); return XPath2TokenTypes.QUEST;
            }
          case 113: break;
          case 34: 
            { yybegin(S1); return XPathTokenTypes.STAR;
            }
          case 114: break;
          case 35: 
            { yybegin(S1);          return XPathTokenTypes.DOTDOT;
            }
          case 115: break;
          case 36: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.COLCOL;
            }
          case 116: break;
          case 37: 
            { if (allowXPath2Syntax) { return XPath2TokenTypes.END_COMMENT;            } else { yypushback(1); return XPathTokenTypes.COL;    }
            }
          case 117: break;
          case 38: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WNE; } else { return ncName(); }
            }
          case 118: break;
          case 39: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WEQ; } else { return ncName(); }
            }
          case 119: break;
          case 40: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WLE; } else { return ncName(); }
            }
          case 120: break;
          case 41: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WLT; } else { return ncName(); }
            }
          case 121: break;
          case 42: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.IS;     } else { return ncName(); }
            }
          case 122: break;
          case 43: 
            { if (allowXPath2Syntax) { return XPath2TokenTypes.IF;        } else { return ncName(); }
            }
          case 123: break;
          case 44: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WGE; } else { return ncName(); }
            }
          case 124: break;
          case 45: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WGT; } else { return ncName(); }
            }
          case 125: break;
          case 46: 
            { if (allowXPath2Syntax) { readComment(); return XPath2TokenTypes.COMMENT; } else { yypushback(1); return XPathTokenTypes.LPAREN; }
            }
          case 126: break;
          case 47: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.BEFORE; } else { yypushback(1); return XPathTokenTypes.LT; }
            }
          case 127: break;
          case 48: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.LE;
            }
          case 128: break;
          case 49: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.AFTER;  } else { yypushback(1); return XPathTokenTypes.GT; }
            }
          case 129: break;
          case 50: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.GE;
            }
          case 130: break;
          case 51: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.ANY_PATH;
            }
          case 131: break;
          case 52: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.NE;
            }
          case 132: break;
          case 53: 
            { if (allowXPath2Syntax) { yybegin(TYPE); return XPath2TokenTypes.AS;        } else { return ncName(); }
            }
          case 133: break;
          case 54: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.TO;        } else { return ncName(); }
            }
          case 134: break;
          case 55: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.OR;
            }
          case 135: break;
          case 56: 
            { if (allowXPath2Syntax) { yybegin(TYPE); return XPath2TokenTypes.OF;        } else { return ncName(); }
            }
          case 136: break;
          case 57: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.IN;        } else { return ncName(); }
            }
          case 137: break;
          case 58: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 4;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return XPathTokenTypes.VARIABLE_PREFIX;
            }
          case 138: break;
          case 59: 
            { if (allowXPath2Syntax) { return XPath2TokenTypes.FOR;       } else { return ncName(); }
            }
          case 139: break;
          case 60: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.AND;
            }
          case 140: break;
          case 61: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.DIV;
            }
          case 141: break;
          case 62: 
            { yybegin(YYINITIAL);   return XPathTokenTypes.MOD;
            }
          case 142: break;
          case 63: 
            { yybegin(S1);          return XPathTokenTypes.NODE_TYPE;
            }
          case 143: break;
          case 64: 
            { yybegin(S1);          return XPathTokenTypes.AXIS_NAME;
            }
          case 144: break;
          case 65: 
            { if (allowXPath2Syntax) { return XPath2TokenTypes.SOME;      } else { return ncName(); }
            }
          case 145: break;
          case 66: 
            { if (allowXPath2Syntax) { return XPath2TokenTypes.CAST;      } else { return ncName(); }
            }
          case 146: break;
          case 67: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.ELSE;      } else { return ncName(); }
            }
          case 147: break;
          case 68: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.THEN;      } else { return ncName(); }
            }
          case 148: break;
          case 69: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.IDIV; } else { return ncName(); }
            }
          case 149: break;
          case 70: 
            { return  XPath2TokenTypes.ITEM;
            }
          case 150: break;
          case 71: 
            { if (allowXPath2Syntax) { return XPath2TokenTypes.EVERY;     } else { return ncName(); }
            }
          case 151: break;
          case 72: 
            { if (allowXPath2Syntax) { return XPath2TokenTypes.TREAT;     } else { return ncName(); }
            }
          case 152: break;
          case 73: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.UNION;     } else { return ncName(); }
            }
          case 153: break;
          case 74: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.EXCEPT;    } else { return ncName(); }
            }
          case 154: break;
          case 75: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.RETURN;    } else { return ncName(); }
            }
          case 155: break;
          case 76: 
            { if (allowXPath2Syntax) { return XPath2TokenTypes.CASTABLE;  } else { return ncName(); }
            }
          case 156: break;
          case 77: 
            { if (allowXPath2Syntax) { return XPath2TokenTypes.INSTANCE;  } else { return ncName(); }
            }
          case 157: break;
          case 78: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.SATISFIES; } else { return ncName(); }
            }
          case 158: break;
          case 79: 
            { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.INTERSECT; } else { return ncName(); }
            }
          case 159: break;
          case 80: 
            { yybegin(YYINITIAL); return XPath2TokenTypes.EMPTY_SEQUENCE;
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
