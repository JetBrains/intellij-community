// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Sh.flex

package com.intellij.sh.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.IntStack;
import com.intellij.lexer.FlexLexer;
import static com.intellij.sh.lexer.ShTokenTypes.*;
import com.intellij.openapi.util.text.StringUtil;


public class _ShLexerGen implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int OLD_ARITHMETIC_EXPRESSION = 2;
  public static final int LET_EXPRESSION = 4;
  public static final int EVAL_EXPRESSION = 6;
  public static final int TEST_EXPRESSION = 8;
  public static final int CONDITIONAL_EXPRESSION = 10;
  public static final int IF_CONDITION = 12;
  public static final int OTHER_CONDITIONS = 14;
  public static final int CASE_CONDITION = 16;
  public static final int CASE_PATTERN = 18;
  public static final int STRING_EXPRESSION = 20;
  public static final int REGULAR_EXPRESSION = 22;
  public static final int HERE_STRING = 24;
  public static final int HERE_DOC_START_MARKER = 26;
  public static final int HERE_DOC_END_MARKER = 28;
  public static final int HERE_DOC_PIPELINE = 30;
  public static final int HERE_DOC_BODY = 32;
  public static final int PARAMETER_EXPANSION = 34;
  public static final int PARAMETER_EXPANSION_WITHOUT_SEPARATOR = 36;
  public static final int PARAMETER_EXPANSION_EXPR = 38;
  public static final int PARENTHESES_COMMAND_SUBSTITUTION = 40;
  public static final int BACKQUOTE_COMMAND_SUBSTITUTION = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10,  0,  1,  0,  1, 
    11, 12, 13, 14, 15, 15, 16, 16, 17, 18, 19, 19, 20, 20, 21, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 28,  0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\3\27\1\30\1\31\1\32\2\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\6\43\21\44\1\45"+
    "\2\44\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\43\1\55\1\56\1\57\1\60\1\44\1\61\1\62"+
    "\2\44\1\63\1\44\1\64\1\65\2\44\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\45\2\44\1\74\1\75"+
    "\1\76\1\77\53\0\1\100\12\0\1\100\4\0\1\100"+
    "\5\0\27\100\1\101\37\100\1\101\u01ca\100\4\0\14\100"+
    "\16\0\5\100\7\0\1\100\1\0\1\100\201\0\5\100"+
    "\1\0\2\100\2\0\4\100\1\0\1\100\6\0\1\100"+
    "\1\0\3\100\1\0\1\100\1\0\24\100\1\0\123\100"+
    "\1\0\213\100\10\0\246\100\1\0\46\100\2\0\1\100"+
    "\6\0\51\100\107\0\33\100\4\0\4\100\55\0\53\100"+
    "\25\0\12\102\4\0\2\100\1\0\143\100\1\0\1\100"+
    "\17\0\2\100\7\0\2\100\12\102\3\100\2\0\1\100"+
    "\20\0\1\100\1\0\36\100\35\0\131\100\13\0\1\100"+
    "\16\0\12\102\41\100\11\0\2\100\4\0\1\100\5\0"+
    "\26\100\4\0\1\100\11\0\1\100\3\0\1\100\27\0"+
    "\31\100\7\0\13\100\65\0\25\100\1\0\10\100\106\0"+
    "\66\100\3\0\1\100\22\0\1\100\7\0\12\100\4\0"+
    "\12\102\1\0\20\100\4\0\10\100\2\0\2\100\2\0"+
    "\26\100\1\0\7\100\1\0\1\100\3\0\4\100\3\0"+
    "\1\100\20\0\1\100\15\0\2\100\1\0\3\100\4\0"+
    "\12\102\2\100\12\0\1\100\10\0\6\100\4\0\2\100"+
    "\2\0\26\100\1\0\7\100\1\0\2\100\1\0\2\100"+
    "\1\0\2\100\37\0\4\100\1\0\1\100\7\0\12\102"+
    "\2\0\3\100\20\0\11\100\1\0\3\100\1\0\26\100"+
    "\1\0\7\100\1\0\2\100\1\0\5\100\3\0\1\100"+
    "\22\0\1\100\17\0\2\100\4\0\12\102\11\0\1\100"+
    "\13\0\10\100\2\0\2\100\2\0\26\100\1\0\7\100"+
    "\1\0\2\100\1\0\5\100\3\0\1\100\36\0\2\100"+
    "\1\0\3\100\4\0\12\102\1\0\1\100\21\0\1\100"+
    "\1\0\6\100\3\0\3\100\1\0\4\100\3\0\2\100"+
    "\1\0\1\100\1\0\2\100\3\0\2\100\3\0\3\100"+
    "\3\0\14\100\26\0\1\100\25\0\12\102\25\0\10\100"+
    "\1\0\3\100\1\0\27\100\1\0\20\100\3\0\1\100"+
    "\32\0\3\100\5\0\2\100\4\0\12\102\20\0\1\100"+
    "\4\0\10\100\1\0\3\100\1\0\27\100\1\0\12\100"+
    "\1\0\5\100\3\0\1\100\40\0\1\100\1\0\2\100"+
    "\4\0\12\102\1\0\2\100\22\0\10\100\1\0\3\100"+
    "\1\0\51\100\2\0\1\100\20\0\1\100\5\0\3\100"+
    "\10\0\3\100\4\0\12\102\12\0\6\100\5\0\22\100"+
    "\3\0\30\100\1\0\11\100\1\0\1\100\2\0\7\100"+
    "\37\0\12\102\21\0\60\100\1\0\2\100\14\0\7\100"+
    "\11\0\12\102\47\0\2\100\1\0\1\100\1\0\5\100"+
    "\1\0\30\100\1\0\1\100\1\0\12\100\1\0\2\100"+
    "\11\0\1\100\2\0\5\100\1\0\1\100\11\0\12\102"+
    "\2\0\4\100\40\0\1\100\37\0\12\102\26\0\10\100"+
    "\1\0\44\100\33\0\5\100\163\0\53\100\24\0\1\100"+
    "\12\102\6\0\6\100\4\0\4\100\3\0\1\100\3\0"+
    "\2\100\7\0\3\100\4\0\15\100\14\0\1\100\1\0"+
    "\12\102\6\0\46\100\1\0\1\100\5\0\1\100\2\0"+
    "\53\100\1\0\115\100\1\0\4\100\2\0\7\100\1\0"+
    "\1\100\1\0\4\100\2\0\51\100\1\0\4\100\2\0"+
    "\41\100\1\0\4\100\2\0\7\100\1\0\1\100\1\0"+
    "\4\100\2\0\17\100\1\0\71\100\1\0\4\100\2\0"+
    "\103\100\45\0\20\100\20\0\126\100\2\0\6\100\3\0"+
    "\u016c\100\2\0\21\100\1\0\32\100\5\0\113\100\6\0"+
    "\10\100\7\0\15\100\1\0\4\100\16\0\22\100\16\0"+
    "\22\100\16\0\15\100\1\0\3\100\17\0\64\100\43\0"+
    "\1\100\4\0\1\100\3\0\12\102\46\0\12\102\6\0"+
    "\131\100\7\0\5\100\2\0\42\100\1\0\1\100\5\0"+
    "\106\100\12\0\37\100\47\0\12\102\36\100\2\0\5\100"+
    "\13\0\54\100\4\0\32\100\6\0\12\102\46\0\27\100"+
    "\11\0\65\100\53\0\12\102\6\0\12\102\15\0\1\100"+
    "\135\0\57\100\21\0\7\100\4\0\12\102\51\0\36\100"+
    "\15\0\2\100\12\102\54\100\32\0\44\100\34\0\12\102"+
    "\3\0\3\100\12\102\44\100\2\0\11\100\7\0\53\100"+
    "\2\0\3\100\51\0\4\100\1\0\6\100\1\0\2\100"+
    "\3\0\1\100\5\0\300\100\100\0\26\100\2\0\6\100"+
    "\2\0\46\100\2\0\6\100\2\0\10\100\1\0\1\100"+
    "\1\0\1\100\1\0\1\100\1\0\37\100\2\0\65\100"+
    "\1\0\7\100\1\0\1\100\3\0\3\100\1\0\7\100"+
    "\3\0\4\100\2\0\6\100\4\0\15\100\5\0\3\100"+
    "\1\0\7\100\164\0\1\100\15\0\1\100\20\0\15\100"+
    "\145\0\1\100\4\0\1\100\2\0\12\100\1\0\1\100"+
    "\3\0\5\100\6\0\1\100\1\0\1\100\1\0\1\100"+
    "\1\0\4\100\1\0\13\100\2\0\4\100\5\0\5\100"+
    "\4\0\1\100\64\0\2\100\u017b\0\57\100\1\0\57\100"+
    "\1\0\205\100\6\0\4\100\3\0\2\100\14\0\46\100"+
    "\1\0\1\100\5\0\1\100\2\0\70\100\7\0\1\100"+
    "\20\0\27\100\11\0\7\100\1\0\7\100\1\0\7\100"+
    "\1\0\7\100\1\0\7\100\1\0\7\100\1\0\7\100"+
    "\1\0\7\100\120\0\1\100\325\0\2\100\52\0\5\100"+
    "\5\0\2\100\4\0\126\100\6\0\3\100\1\0\132\100"+
    "\1\0\4\100\5\0\53\100\1\0\136\100\21\0\33\100"+
    "\65\0\306\100\112\0\360\100\20\0\215\100\103\0\56\100"+
    "\2\0\15\100\3\0\20\100\12\102\2\100\24\0\57\100"+
    "\20\0\37\100\2\0\106\100\61\0\11\100\2\0\147\100"+
    "\2\0\65\100\2\0\5\100\60\0\13\100\1\0\3\100"+
    "\1\0\4\100\1\0\27\100\35\0\64\100\16\0\62\100"+
    "\34\0\12\102\30\0\6\100\3\0\1\100\1\0\2\100"+
    "\1\0\12\102\34\100\12\0\27\100\31\0\35\100\7\0"+
    "\57\100\34\0\1\100\12\102\6\0\5\100\1\0\12\100"+
    "\12\102\5\100\1\0\51\100\27\0\3\100\1\0\10\100"+
    "\4\0\12\102\6\0\27\100\3\0\1\100\3\0\62\100"+
    "\1\0\1\100\3\0\2\100\2\0\5\100\2\0\1\100"+
    "\1\0\1\100\30\0\3\100\2\0\13\100\7\0\3\100"+
    "\14\0\6\100\2\0\6\100\2\0\6\100\11\0\7\100"+
    "\1\0\7\100\1\0\53\100\1\0\14\100\10\0\163\100"+
    "\15\0\12\102\6\0\244\100\14\0\27\100\4\0\61\100"+
    "\4\0\156\100\2\0\152\100\46\0\7\100\14\0\5\100"+
    "\5\0\1\100\1\0\12\100\1\0\15\100\1\0\5\100"+
    "\1\0\1\100\1\0\2\100\1\0\2\100\1\0\154\100"+
    "\41\0\153\100\22\0\100\100\2\0\66\100\50\0\14\100"+
    "\164\0\5\100\1\0\207\100\23\0\12\102\7\0\32\100"+
    "\6\0\32\100\13\0\131\100\3\0\6\100\2\0\6\100"+
    "\2\0\6\100\2\0\3\100\43\0\14\100\1\0\32\100"+
    "\1\0\23\100\1\0\2\100\1\0\17\100\2\0\16\100"+
    "\42\0\173\100\205\0\35\100\3\0\61\100\57\0\40\100"+
    "\15\0\24\100\1\0\10\100\6\0\46\100\12\0\36\100"+
    "\2\0\44\100\4\0\10\100\60\0\236\100\2\0\12\102"+
    "\6\0\44\100\4\0\44\100\4\0\50\100\10\0\64\100"+
    "\234\0\67\100\11\0\26\100\12\0\10\100\230\0\6\100"+
    "\2\0\1\100\1\0\54\100\1\0\2\100\3\0\1\100"+
    "\2\0\27\100\12\0\27\100\11\0\37\100\101\0\23\100"+
    "\1\0\2\100\12\0\26\100\12\0\32\100\106\0\70\100"+
    "\6\0\2\100\100\0\1\100\17\0\4\100\1\0\3\100"+
    "\1\0\35\100\52\0\35\100\3\0\35\100\43\0\10\100"+
    "\1\0\34\100\33\0\66\100\12\0\26\100\12\0\23\100"+
    "\15\0\22\100\156\0\111\100\67\0\63\100\15\0\63\100"+
    "\15\0\44\100\14\0\12\102\306\0\35\100\12\0\1\100"+
    "\10\0\26\100\232\0\27\100\14\0\65\100\56\0\12\102"+
    "\23\0\55\100\40\0\31\100\7\0\12\102\11\0\44\100"+
    "\17\0\12\102\4\0\1\100\13\0\43\100\3\0\1\100"+
    "\14\0\60\100\16\0\4\100\13\0\12\102\1\100\1\0"+
    "\1\100\43\0\22\100\1\0\31\100\124\0\7\100\1\0"+
    "\1\100\1\0\4\100\1\0\17\100\1\0\12\100\7\0"+
    "\57\100\21\0\12\102\13\0\10\100\2\0\2\100\2\0"+
    "\26\100\1\0\7\100\1\0\2\100\1\0\5\100\3\0"+
    "\1\100\22\0\1\100\14\0\5\100\236\0\65\100\22\0"+
    "\4\100\5\0\12\102\5\0\1\100\40\0\60\100\24\0"+
    "\2\100\1\0\1\100\10\0\12\102\246\0\57\100\51\0"+
    "\4\100\44\0\60\100\24\0\1\100\13\0\12\102\46\0"+
    "\53\100\15\0\1\100\7\0\12\102\66\0\33\100\25\0"+
    "\12\102\306\0\54\100\164\0\100\100\12\102\25\0\1\100"+
    "\240\0\10\100\2\0\47\100\20\0\1\100\1\0\1\100"+
    "\34\0\1\100\12\0\50\100\7\0\1\100\25\0\1\100"+
    "\13\0\56\100\23\0\1\100\42\0\71\100\7\0\11\100"+
    "\1\0\45\100\21\0\1\100\17\0\12\102\30\0\36\100"+
    "\160\0\7\100\1\0\2\100\1\0\46\100\25\0\1\100"+
    "\11\0\12\102\6\0\6\100\1\0\2\100\1\0\40\100"+
    "\16\0\1\100\7\0\12\102\u0136\0\23\100\15\0\232\100"+
    "\346\0\304\100\274\0\57\100\321\0\107\100\271\0\71\100"+
    "\7\0\37\100\1\0\12\102\146\0\36\100\22\0\60\100"+
    "\20\0\4\100\14\0\12\102\11\0\25\100\5\0\23\100"+
    "\260\0\100\100\200\0\113\100\5\0\1\100\102\0\15\100"+
    "\100\0\2\100\1\0\1\100\34\0\370\100\10\0\363\100"+
    "\15\0\37\100\61\0\3\100\21\0\4\100\10\0\u018c\100"+
    "\4\0\153\100\5\0\15\100\3\0\11\100\7\0\12\100"+
    "\146\0\125\100\1\0\107\100\1\0\2\100\2\0\1\100"+
    "\2\0\2\100\2\0\4\100\1\0\14\100\1\0\1\100"+
    "\1\0\7\100\1\0\101\100\1\0\4\100\2\0\10\100"+
    "\1\0\7\100\1\0\34\100\1\0\4\100\1\0\5\100"+
    "\1\0\1\100\3\0\7\100\1\0\u0154\100\2\0\31\100"+
    "\1\0\31\100\1\0\37\100\1\0\31\100\1\0\37\100"+
    "\1\0\31\100\1\0\37\100\1\0\31\100\1\0\37\100"+
    "\1\0\31\100\1\0\10\100\2\0\62\102\55\100\12\0"+
    "\7\100\2\0\12\102\4\0\1\100\u0171\0\54\100\4\0"+
    "\12\102\6\0\305\100\73\0\104\100\7\0\1\100\4\0"+
    "\12\102\246\0\4\100\1\0\33\100\1\0\2\100\1\0"+
    "\1\100\2\0\1\100\1\0\12\100\1\0\4\100\1\0"+
    "\1\100\1\0\1\100\6\0\1\100\4\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\3\100\1\0\2\100\1\0"+
    "\1\100\2\0\1\100\1\0\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\2\100\1\0\1\100\2\0"+
    "\4\100\1\0\7\100\1\0\4\100\1\0\4\100\1\0"+
    "\1\100\1\0\12\100\1\0\21\100\5\0\3\100\1\0"+
    "\5\100\1\0\21\100\104\0\327\100\51\0\65\100\13\0"+
    "\336\100\2\0\u0182\100\16\0\u0131\100\37\0\36\100\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\35\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\10\5\15\1\16"+
    "\1\17\1\20\1\21\1\10\1\22\1\1\1\23\1\24"+
    "\12\10\1\25\1\26\1\27\1\6\1\4\1\30\1\11"+
    "\1\31\1\32\1\33\1\34\1\10\1\35\5\15\1\36"+
    "\1\17\1\20\1\21\1\37\1\10\1\1\1\40\1\26"+
    "\1\41\1\1\2\42\1\43\1\44\1\10\1\45\1\2"+
    "\2\46\1\45\1\1\2\45\1\47\1\4\1\11\1\50"+
    "\1\26\1\4\1\16\4\10\1\51\6\10\1\52\1\53"+
    "\2\52\1\1\1\54\1\10\1\55\2\10\1\56\1\57"+
    "\1\1\1\10\1\60\2\61\1\60\1\10\2\62\1\10"+
    "\1\62\1\10\1\62\1\10\2\63\3\1\1\64\1\65"+
    "\1\66\1\65\1\66\2\67\1\70\2\71\1\72\1\73"+
    "\2\74\1\75\1\76\1\72\1\76\1\75\1\76\5\77"+
    "\1\75\1\72\1\100\1\72\1\75\1\101\1\102\1\103"+
    "\1\46\12\10\3\0\1\104\1\0\1\105\1\104\1\106"+
    "\1\107\1\0\1\110\5\111\1\112\1\12\1\113\1\114"+
    "\1\10\2\15\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\10\1\125\1\126\2\2\1\127\1\10"+
    "\1\130\3\10\1\131\2\10\1\132\1\133\6\10\1\134"+
    "\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144"+
    "\1\145\1\146\1\0\1\147\1\114\1\0\2\15\1\150"+
    "\1\151\1\152\1\153\1\154\1\123\2\0\1\10\1\155"+
    "\1\156\1\10\1\45\1\0\1\45\1\10\2\157\1\160"+
    "\1\10\1\0\6\10\4\0\2\10\1\0\1\10\1\2"+
    "\2\10\12\0\1\76\1\161\1\72\1\0\2\77\1\162"+
    "\1\72\1\0\1\10\1\130\3\10\1\131\2\10\1\132"+
    "\1\133\6\10\1\2\3\0\1\10\2\111\1\163\1\164"+
    "\1\165\1\166\1\167\1\0\10\10\1\170\5\10\1\164"+
    "\1\171\1\172\1\173\1\2\1\0\1\10\2\0\5\10"+
    "\1\55\1\10\2\60\1\0\1\10\2\63\2\65\1\73"+
    "\1\174\10\10\1\170\6\10\1\0\1\12\1\175\1\176"+
    "\1\177\1\200\1\201\1\202\1\203\2\10\1\204\1\205"+
    "\3\10\1\0\1\10\1\2\1\10\1\46\1\2\1\175"+
    "\1\176\1\177\1\200\1\201\1\202\2\10\1\204\1\205"+
    "\2\10\1\0\1\10\1\0\2\10\1\206\1\207\3\10"+
    "\1\206\1\207\1\203\1\10\1\210\1\10\1\210\2\10"+
    "\2\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[469];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u0797"+
    "\0\u081d\0\u0860\0\u0797\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af"+
    "\0\u0797\0\u0797\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41"+
    "\0\u0b84\0\u0797\0\u0bc7\0\u0797\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\u0d16\0\u0797\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8"+
    "\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0797\0\u0ff7\0\u0797\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u0797\0\u11cc\0\u120f"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u0797\0\u13e4"+
    "\0\u1427\0\u146a\0\u0797\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u0797"+
    "\0\u15b9\0\u0797\0\u15fc\0\u0797\0\u0797\0\u163f\0\u1682\0\u16c5"+
    "\0\u0797\0\u1708\0\u08e6\0\u174b\0\u0797\0\u178e\0\u0797\0\u17d1"+
    "\0\u1814\0\u0797\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u0797\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b"+
    "\0\u1bbe\0\u0797\0\u1c01\0\u0797\0\u1c44\0\u0797\0\u1c87\0\u1cca"+
    "\0\u1d0d\0\u08e6\0\u0797\0\u0797\0\u1d50\0\u1d93\0\u1dd6\0\u0797"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u096c\0\u0797\0\u1ee2\0\u0c0a\0\u1f25"+
    "\0\u0ff7\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u0797\0\u2180\0\u21c3\0\u0797\0\u2206\0\u2249\0\u0797"+
    "\0\u228c\0\u0797\0\u22cf\0\u0797\0\u2312\0\u0797\0\u2355\0\u08e6"+
    "\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d"+
    "\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u0797\0\u0797\0\u26ff"+
    "\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917"+
    "\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u0797\0\u2aec"+
    "\0\u0797\0\u2b2f\0\u0797\0\u0797\0\u2b72\0\u0797\0\u0797\0\u2bb5"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u0797\0\u0797\0\u2d04\0\u2d47"+
    "\0\u2d8a\0\u2dcd\0\u0797\0\u0797\0\u2e10\0\u0797\0\u0797\0\u0797"+
    "\0\u0797\0\u0797\0\u2e53\0\u0797\0\u0797\0\u2e96\0\u2ed9\0\u0797"+
    "\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u0c4d\0\u306b\0\u30ae"+
    "\0\u0c4d\0\u0c4d\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240"+
    "\0\u0797\0\u0797\0\u3283\0\u0797\0\u0797\0\u0797\0\u0797\0\u0797"+
    "\0\u0797\0\u0797\0\u0797\0\u14f0\0\u0797\0\u32c6\0\u3309\0\u334c"+
    "\0\u338f\0\u33d2\0\u0797\0\u0797\0\u0797\0\u0797\0\u3415\0\u3458"+
    "\0\u15b9\0\u349b\0\u0797\0\u0797\0\u34de\0\u3521\0\u174b\0\u3564"+
    "\0\u0797\0\u0797\0\u35a7\0\u0c4d\0\u35ea\0\u362d\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u1c44\0\u1d50\0\u3802\0\u3845"+
    "\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u20b7"+
    "\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u21c3\0\u3bac\0\u3bef"+
    "\0\u3c32\0\u0797\0\u3c75\0\u3cb8\0\u2679\0\u3cfb\0\u3d3e\0\u0797"+
    "\0\u3d81\0\u2742\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u14ad"+
    "\0\u3f13\0\u3f56\0\u14ad\0\u14ad\0\u3f99\0\u3fdc\0\u401f\0\u4062"+
    "\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a"+
    "\0\u42bd\0\u0797\0\u2d47\0\u0797\0\u0797\0\u0797\0\u0cd3\0\u4300"+
    "\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5\0\u0c4d"+
    "\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u3309\0\u0797\0\u0797"+
    "\0\u14ad\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9"+
    "\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11"+
    "\0\u4a54\0\u4a97\0\u0797\0\u4ada\0\u4b1d\0\u4b60\0\u3cb8\0\u4ba3"+
    "\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2\0\u4d35\0\u4d78\0\u14ad"+
    "\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d\0\u2aec"+
    "\0\u0c4d\0\u0c4d\0\u0c4d\0\u0c4d\0\u0c4d\0\u0c4d\0\u4f90\0\u4fd3"+
    "\0\u5016\0\u0c4d\0\u0c4d\0\u5059\0\u509c\0\u50df\0\u5122\0\u5165"+
    "\0\u51a8\0\u51eb\0\u19e9\0\u522e\0\u14ad\0\u14ad\0\u14ad\0\u14ad"+
    "\0\u14ad\0\u14ad\0\u5271\0\u52b4\0\u14ad\0\u14ad\0\u52f7\0\u533a"+
    "\0\u0860\0\u537d\0\u53c0\0\u5403\0\u5446\0\u0c4d\0\u0c4d\0\u5489"+
    "\0\u54cc\0\u550f\0\u14ad\0\u14ad\0\u5552\0\u5595\0\u0c4d\0\u55d8"+
    "\0\u14ad\0\u561b\0\u565e\0\u0c4d\0\u14ad";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[469];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\36\1\37\1\40\1\37\1\41\1\37\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\4\46\1\55\1\56\2\57\1\60\2\61\1\46"+
    "\1\62\1\63\1\64\1\65\2\53\3\66\1\67\1\70"+
    "\1\71\1\46\1\66\1\72\1\66\1\73\1\74\1\75"+
    "\1\76\1\66\1\77\1\100\3\66\1\101\1\102\1\103"+
    "\1\66\1\104\1\105\1\106\1\107\1\46\1\66\2\46"+
    "\1\36\1\37\1\40\1\37\1\41\1\37\1\42\1\43"+
    "\1\110\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\4\46\1\55\1\56\2\57\1\60\2\61\1\46"+
    "\1\62\1\63\1\64\1\65\2\53\3\66\1\67\1\70"+
    "\1\71\1\46\1\66\1\72\1\66\1\73\1\74\1\75"+
    "\1\76\1\66\1\77\1\100\3\66\1\101\1\102\1\103"+
    "\1\66\1\104\1\105\1\106\1\107\1\46\1\66\2\46"+
    "\1\36\1\37\1\40\1\37\1\41\1\37\1\111\1\43"+
    "\1\44\1\45\1\112\1\113\1\50\1\51\1\52\1\114"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\1\123\2\124"+
    "\1\125\2\126\1\127\1\62\1\130\1\131\1\132\1\133"+
    "\1\120\3\134\1\67\1\135\1\71\1\136\1\134\1\72"+
    "\20\134\1\105\1\137\1\107\1\140\1\141\3\36\1\37"+
    "\1\40\1\37\1\41\1\37\1\111\1\43\1\110\1\45"+
    "\1\112\1\113\1\50\1\51\1\52\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\2\124\1\125\2\126"+
    "\1\127\1\62\1\130\1\131\1\132\1\133\1\120\3\134"+
    "\1\67\1\135\1\71\1\136\1\134\1\72\20\134\1\105"+
    "\1\137\1\107\1\140\1\141\3\36\1\37\1\142\1\37"+
    "\1\143\1\37\1\111\1\144\1\44\1\45\1\112\1\113"+
    "\1\50\1\51\1\52\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\2\124\1\125\2\126\1\127\1\145"+
    "\1\130\1\131\1\132\1\133\1\120\3\134\1\67\1\135"+
    "\1\71\1\136\1\134\1\72\7\134\1\146\10\134\1\105"+
    "\1\137\1\107\1\140\1\141\3\36\1\37\1\142\1\37"+
    "\1\143\1\37\1\111\1\144\1\110\1\45\1\112\1\113"+
    "\1\50\1\51\1\52\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\2\124\1\125\2\126\1\127\1\145"+
    "\1\130\1\131\1\132\1\133\1\120\3\134\1\67\1\135"+
    "\1\71\1\136\1\134\1\72\7\134\1\146\10\134\1\105"+
    "\1\137\1\107\1\140\1\141\2\36\1\147\1\150\1\151"+
    "\1\150\1\152\1\37\1\147\1\43\1\147\1\153\2\147"+
    "\1\154\1\155\1\151\16\147\1\151\11\147\1\156\3\147"+
    "\1\157\21\147\1\151\5\147\1\36\1\37\1\142\1\37"+
    "\1\143\1\37\1\160\1\43\1\44\1\45\1\46\1\161"+
    "\1\50\1\51\1\151\1\53\1\54\4\46\1\55\1\56"+
    "\2\57\1\60\2\61\1\46\1\145\1\63\1\64\1\65"+
    "\2\53\3\66\1\67\1\70\1\71\1\46\1\66\1\162"+
    "\20\66\1\105\1\163\1\107\1\46\1\66\2\46\1\36"+
    "\1\37\1\142\1\37\1\143\1\37\1\160\1\43\1\110"+
    "\1\45\1\46\1\161\1\50\1\51\1\151\1\53\1\54"+
    "\4\46\1\55\1\56\2\57\1\60\2\61\1\46\1\145"+
    "\1\63\1\64\1\65\2\53\3\66\1\67\1\70\1\71"+
    "\1\46\1\66\1\162\20\66\1\105\1\163\1\107\1\46"+
    "\1\66\2\46\1\36\1\37\1\40\1\37\1\41\1\37"+
    "\1\164\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\4\46\1\55\1\56\2\57\1\60"+
    "\2\61\1\46\1\62\1\63\1\131\1\65\2\53\3\66"+
    "\1\67\1\70\1\71\1\46\1\66\1\72\20\66\1\105"+
    "\1\106\1\107\1\46\1\66\2\46\1\36\1\37\1\40"+
    "\1\37\1\41\1\37\1\164\1\43\1\110\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\4\46\1\55"+
    "\1\56\2\57\1\60\2\61\1\46\1\62\1\63\1\131"+
    "\1\65\2\53\3\66\1\67\1\70\1\71\1\46\1\66"+
    "\1\72\20\66\1\105\1\106\1\107\1\46\1\66\2\46"+
    "\1\36\1\37\1\40\1\37\1\41\1\37\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\4\46\1\55\1\56\2\57\1\60\2\61\1\46"+
    "\1\165\1\63\1\64\1\65\2\53\3\66\1\67\1\70"+
    "\1\71\1\46\1\66\1\72\1\66\1\73\1\74\1\75"+
    "\1\76\1\66\1\166\1\100\3\66\1\101\1\102\1\103"+
    "\1\66\1\104\1\105\1\106\1\107\1\46\1\66\2\46"+
    "\1\36\1\37\1\40\1\37\1\41\1\37\1\42\1\43"+
    "\1\110\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\4\46\1\55\1\56\2\57\1\60\2\61\1\46"+
    "\1\165\1\63\1\64\1\65\2\53\3\66\1\67\1\70"+
    "\1\71\1\46\1\66\1\72\1\66\1\73\1\74\1\75"+
    "\1\76\1\66\1\166\1\100\3\66\1\101\1\102\1\103"+
    "\1\66\1\104\1\105\1\106\1\107\1\46\1\66\2\46"+
    "\1\167\1\37\1\40\1\37\1\41\1\37\1\170\1\43"+
    "\1\44\1\45\1\171\1\167\1\50\1\51\1\172\2\173"+
    "\14\171\1\167\1\174\1\167\1\175\2\173\3\171\1\167"+
    "\1\176\1\167\2\171\1\167\3\171\1\177\1\200\13\171"+
    "\1\167\1\106\1\167\4\171\1\167\1\37\1\40\1\37"+
    "\1\41\1\37\1\170\1\43\1\110\1\45\1\171\1\167"+
    "\1\50\1\51\1\172\2\173\14\171\1\167\1\174\1\167"+
    "\1\175\2\173\3\171\1\167\1\176\1\167\2\171\1\167"+
    "\3\171\1\177\1\200\13\171\1\167\1\106\1\167\4\171"+
    "\7\201\1\202\1\201\1\203\3\201\1\204\31\201\1\205"+
    "\3\201\1\206\27\201\1\207\1\210\1\36\1\211\1\36"+
    "\1\210\1\207\1\43\1\207\1\212\2\207\1\50\1\213"+
    "\1\214\30\207\1\215\3\207\1\206\27\207\1\216\1\217"+
    "\1\220\1\217\1\221\1\222\1\216\1\43\1\223\1\45"+
    "\1\216\1\224\1\50\2\225\16\216\1\225\1\226\1\216"+
    "\1\227\6\216\1\230\3\216\1\225\21\216\1\231\6\216"+
    "\1\217\1\220\1\217\1\221\1\222\1\216\1\43\1\232"+
    "\1\45\1\216\1\224\1\50\2\225\16\216\1\225\1\226"+
    "\1\216\1\227\6\216\1\230\3\216\1\225\21\216\1\231"+
    "\5\216\1\233\1\37\1\142\1\234\1\143\1\37\1\233"+
    "\1\235\3\233\1\36\1\236\2\36\16\233\1\36\11\233"+
    "\1\237\25\233\1\36\5\233\1\240\1\241\1\242\1\243"+
    "\1\242\1\241\1\240\1\242\3\240\4\242\16\240\1\242"+
    "\11\240\1\244\25\240\1\242\5\240\1\36\1\37\1\245"+
    "\1\37\1\246\1\37\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\4\46\1\55"+
    "\1\56\2\57\1\60\2\61\1\46\1\62\1\63\1\64"+
    "\1\65\2\53\3\66\1\67\1\70\1\71\1\46\1\66"+
    "\1\72\20\66\1\105\1\106\1\107\1\46\1\66\2\46"+
    "\1\36\1\37\1\245\1\37\1\246\1\37\1\42\1\43"+
    "\1\110\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\4\46\1\55\1\56\2\57\1\60\2\61\1\46"+
    "\1\62\1\63\1\64\1\65\2\53\3\66\1\67\1\70"+
    "\1\71\1\46\1\66\1\72\20\66\1\105\1\106\1\107"+
    "\1\46\1\66\2\46\2\247\1\250\1\247\1\251\76\247"+
    "\1\252\1\253\1\254\1\253\1\255\1\253\1\256\1\43"+
    "\1\257\1\260\1\261\1\252\1\50\2\252\2\256\1\262"+
    "\1\256\1\252\1\263\1\264\1\265\2\266\1\267\2\270"+
    "\1\271\2\252\1\256\1\252\2\256\3\272\1\273\1\274"+
    "\1\252\1\275\1\272\1\206\20\272\1\276\1\252\1\277"+
    "\5\252\1\253\1\254\1\253\1\255\1\253\1\252\1\43"+
    "\1\252\1\260\2\252\1\50\10\252\1\264\1\265\2\266"+
    "\1\267\2\270\7\252\3\272\1\273\1\274\2\252\1\272"+
    "\1\206\20\272\1\276\1\252\1\277\4\252\7\300\1\151"+
    "\1\300\1\151\12\300\1\151\22\300\1\301\3\300\1\151"+
    "\22\300\1\151\4\300\1\36\1\37\1\40\1\37\1\41"+
    "\1\37\1\111\1\43\1\44\1\45\1\112\1\113\1\50"+
    "\1\51\1\52\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\2\124\1\125\2\126\1\127\1\62\1\130"+
    "\1\131\1\132\1\133\1\120\3\134\1\67\1\135\1\71"+
    "\1\136\1\134\1\72\1\134\1\302\1\303\1\304\1\305"+
    "\1\134\1\306\1\307\3\134\1\310\1\311\1\312\1\134"+
    "\1\313\1\105\1\137\1\107\1\140\1\141\3\36\1\37"+
    "\1\40\1\37\1\41\1\37\1\111\1\43\1\110\1\45"+
    "\1\112\1\113\1\50\1\51\1\52\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\2\124\1\125\2\126"+
    "\1\127\1\62\1\130\1\131\1\132\1\133\1\120\3\134"+
    "\1\67\1\135\1\71\1\136\1\134\1\72\1\134\1\302"+
    "\1\303\1\304\1\305\1\134\1\306\1\307\3\134\1\310"+
    "\1\311\1\312\1\134\1\313\1\105\1\137\1\107\1\140"+
    "\1\141\2\36\104\0\1\37\1\0\1\37\1\0\1\37"+
    "\41\0\1\314\35\0\1\40\115\0\1\315\30\0\1\316"+
    "\34\0\2\44\1\0\1\44\1\0\76\44\6\0\1\317"+
    "\1\0\2\317\2\0\1\320\1\321\1\0\1\317\2\0"+
    "\1\317\2\0\7\317\5\0\2\317\3\322\1\323\3\0"+
    "\1\322\1\0\20\322\1\324\3\0\1\322\10\0\1\46"+
    "\1\0\1\46\1\0\1\46\4\0\16\46\4\0\5\46"+
    "\1\0\1\325\1\0\2\46\1\0\20\46\3\0\4\46"+
    "\13\0\1\326\6\0\1\327\2\0\1\327\1\330\2\331"+
    "\1\332\2\333\4\0\1\334\42\0\14\50\1\335\66\50"+
    "\6\0\1\46\1\0\1\46\1\0\1\46\2\0\1\315"+
    "\1\0\16\46\4\0\5\46\1\316\1\325\1\0\2\46"+
    "\1\0\20\46\3\0\4\46\6\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\0\1\315\1\0\16\46\2\0\1\336"+
    "\1\0\5\46\1\316\1\325\1\0\2\46\1\0\20\46"+
    "\3\0\4\46\6\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\6\46\6\337\2\46\4\0\4\46\1\340\1\0"+
    "\1\325\1\0\2\46\1\0\20\46\3\0\4\46\6\0"+
    "\1\46\1\0\1\46\1\0\1\46\4\0\6\46\7\61"+
    "\1\46\4\0\5\46\1\0\1\325\1\0\2\46\1\0"+
    "\20\46\3\0\4\46\6\0\1\46\1\0\1\341\1\0"+
    "\1\46\4\0\6\46\7\61\1\46\4\0\5\46\1\0"+
    "\1\325\1\0\2\46\1\0\20\46\3\0\4\46\6\0"+
    "\1\46\1\0\1\341\1\0\1\46\4\0\6\46\3\61"+
    "\4\342\1\46\4\0\5\46\1\0\1\325\1\0\2\46"+
    "\1\0\20\46\3\0\4\46\6\0\1\46\1\0\1\341"+
    "\1\0\1\46\4\0\6\46\7\342\1\46\4\0\5\46"+
    "\1\0\1\325\1\0\2\46\1\0\20\46\3\0\4\46"+
    "\13\0\1\343\1\0\1\344\20\0\1\345\1\0\1\346"+
    "\55\0\1\347\1\0\1\350\22\0\1\351\34\0\1\352"+
    "\13\0\1\46\1\0\1\46\1\0\1\46\4\0\1\46"+
    "\1\353\4\46\7\66\1\46\2\0\1\354\1\0\2\46"+
    "\3\66\1\0\1\325\1\0\1\46\1\66\1\0\20\66"+
    "\3\0\1\46\1\66\2\46\46\0\1\355\34\0\2\46"+
    "\1\356\1\46\1\357\76\46\50\0\1\360\40\0\1\46"+
    "\1\0\1\46\1\0\1\46\4\0\1\46\1\353\4\46"+
    "\7\66\1\46\2\0\1\354\1\0\2\46\3\66\1\0"+
    "\1\325\1\0\1\46\1\66\1\0\1\361\17\66\3\0"+
    "\1\46\1\66\2\46\6\0\1\46\1\0\1\46\1\0"+
    "\1\46\4\0\1\46\1\353\4\46\7\66\1\46\2\0"+
    "\1\354\1\0\2\46\3\66\1\0\1\325\1\0\1\46"+
    "\1\66\1\0\11\66\1\362\6\66\3\0\1\46\1\66"+
    "\2\46\6\0\1\46\1\0\1\46\1\0\1\46\4\0"+
    "\1\46\1\353\4\46\7\66\1\46\2\0\1\354\1\0"+
    "\2\46\3\66\1\0\1\325\1\0\1\46\1\66\1\0"+
    "\7\66\1\363\3\66\1\364\2\66\1\365\1\66\3\0"+
    "\1\46\1\66\2\46\6\0\1\46\1\0\1\46\1\0"+
    "\1\46\4\0\1\46\1\353\4\46\7\66\1\46\2\0"+
    "\1\354\1\0\2\46\3\66\1\0\1\325\1\0\1\46"+
    "\1\66\1\0\6\66\1\366\2\66\1\367\3\66\1\370"+
    "\2\66\3\0\1\46\1\66\2\46\6\0\1\46\1\0"+
    "\1\46\1\0\1\46\4\0\1\46\1\353\4\46\7\66"+
    "\1\46\2\0\1\354\1\0\2\46\3\66\1\0\1\325"+
    "\1\0\1\46\1\66\1\0\4\66\1\371\3\66\1\372"+
    "\7\66\3\0\1\46\1\66\2\46\6\0\1\46\1\0"+
    "\1\46\1\0\1\46\4\0\1\46\1\353\4\46\7\66"+
    "\1\46\2\0\1\354\1\0\2\46\3\66\1\0\1\325"+
    "\1\0\1\46\1\66\1\0\3\66\1\373\14\66\3\0"+
    "\1\46\1\66\2\46\6\0\1\46\1\0\1\46\1\0"+
    "\1\46\4\0\1\46\1\353\4\46\7\66\1\46\2\0"+
    "\1\354\1\0\2\46\3\66\1\0\1\325\1\0\1\46"+
    "\1\66\1\0\3\66\1\374\14\66\3\0\1\46\1\66"+
    "\2\46\6\0\1\46\1\0\1\46\1\0\1\46\4\0"+
    "\1\46\1\353\4\46\7\66\1\46\2\0\1\354\1\0"+
    "\2\46\3\66\1\0\1\325\1\0\1\46\1\66\1\0"+
    "\3\66\1\375\1\66\1\376\12\66\3\0\1\46\1\66"+
    "\2\46\6\0\1\46\1\0\1\46\1\0\1\46\4\0"+
    "\1\46\1\353\4\46\7\66\1\46\2\0\1\354\1\0"+
    "\2\46\3\66\1\0\1\325\1\0\1\46\1\66\1\0"+
    "\10\66\1\377\7\66\3\0\1\46\1\66\2\46\6\0"+
    "\1\46\1\0\1\46\1\0\1\46\4\0\1\46\1\353"+
    "\4\46\7\66\1\46\2\0\1\354\1\0\2\46\3\66"+
    "\1\0\1\325\1\0\1\46\1\66\1\0\5\66\1\u0100"+
    "\12\66\3\0\1\46\1\66\2\46\13\0\1\u0101\61\0"+
    "\1\u0102\5\0\2\44\1\0\1\44\1\0\1\44\1\u0103"+
    "\74\44\37\0\1\u0104\102\0\1\u0105\56\0\1\326\6\0"+
    "\1\327\2\0\1\327\1\330\2\331\1\332\2\333\3\0"+
    "\1\u0106\1\334\61\0\1\u0107\17\0\1\u0108\63\0\1\u0109"+
    "\16\0\1\336\65\0\1\u010a\14\0\1\u010b\51\0\1\120"+
    "\1\0\1\120\12\0\1\120\1\0\7\120\6\0\4\120"+
    "\1\0\1\u010c\2\0\1\120\1\0\20\120\46\0\1\u010d"+
    "\70\0\6\u010e\12\0\1\u010f\62\0\7\126\57\0\1\u0110"+
    "\14\0\7\126\57\0\1\u0110\14\0\3\126\4\u0111\57\0"+
    "\1\u0110\14\0\7\u0111\62\0\1\343\1\0\1\344\20\0"+
    "\1\u0112\1\u0113\1\346\101\0\1\u0114\37\0\1\u0115\16\0"+
    "\1\347\1\0\1\350\21\0\1\u0116\1\u0117\34\0\1\352"+
    "\13\0\1\120\1\0\1\120\7\0\1\u0118\2\0\1\120"+
    "\1\0\7\134\3\0\1\354\2\0\1\120\3\134\1\0"+
    "\1\u010c\2\0\1\134\1\0\20\134\4\0\1\u0119\2\0"+
    "\4\120\1\u011a\76\120\37\0\1\u011b\56\0\1\u0101\23\0"+
    "\1\u011c\35\0\1\u0102\25\0\1\u0118\4\0\7\u0119\3\0"+
    "\1\354\3\0\3\u0119\4\0\1\u0119\1\0\20\u0119\4\0"+
    "\1\u0119\4\0\1\142\106\0\1\120\1\0\1\120\7\0"+
    "\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354\2\0"+
    "\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0\3\134"+
    "\1\u011d\14\134\4\0\1\u0119\2\0\2\147\1\0\1\147"+
    "\2\0\1\147\1\0\1\147\1\0\2\147\3\0\16\147"+
    "\1\0\11\147\1\156\3\147\1\0\21\147\1\0\6\147"+
    "\1\150\1\0\1\150\1\0\1\37\1\147\1\0\1\147"+
    "\1\0\2\147\3\0\16\147\1\0\11\147\1\u011e\3\147"+
    "\1\0\21\147\1\0\5\147\2\0\1\151\100\0\14\u011f"+
    "\1\335\66\u011f\4\147\1\u0120\42\147\1\156\33\147\15\0"+
    "\1\315\21\0\1\u0121\6\0\1\316\47\0\1\151\6\0"+
    "\1\327\2\0\1\327\1\330\2\331\1\332\2\333\4\0"+
    "\1\334\55\0\1\u0101\61\0\1\151\22\0\1\315\21\0"+
    "\1\u0104\6\0\1\316\47\0\1\u0122\21\0\1\u0123\53\0"+
    "\1\46\1\0\1\46\1\0\1\46\4\0\1\46\1\353"+
    "\4\46\7\66\1\46\2\0\1\354\1\0\2\46\3\66"+
    "\1\0\1\325\1\0\1\46\1\66\1\0\4\66\1\371"+
    "\3\66\1\u0124\7\66\3\0\1\46\1\66\2\46\1\167"+
    "\5\0\1\170\1\0\1\167\1\0\2\167\3\0\2\170"+
    "\14\167\1\0\3\167\2\170\4\167\1\u0125\3\167\1\0"+
    "\21\167\1\0\6\167\5\0\1\170\1\0\1\167\1\0"+
    "\2\167\1\0\1\u0126\1\0\2\170\14\167\1\0\3\167"+
    "\2\170\3\167\1\u0127\1\u0125\3\167\1\0\21\167\1\0"+
    "\6\167\5\0\1\173\1\0\1\171\1\0\1\171\1\167"+
    "\3\0\2\173\14\171\1\0\3\167\2\173\3\171\1\167"+
    "\1\u0128\1\167\2\171\1\0\20\171\1\167\1\0\1\167"+
    "\4\171\1\167\5\0\1\173\1\0\1\171\1\0\1\171"+
    "\1\167\1\0\1\u0126\1\0\2\173\14\171\1\0\3\167"+
    "\2\173\3\171\1\u0127\1\u0128\1\167\2\171\1\0\20\171"+
    "\1\167\1\0\1\167\4\171\1\167\5\0\1\170\1\0"+
    "\1\167\1\0\2\167\1\0\1\344\1\0\2\170\14\167"+
    "\1\0\3\167\2\170\4\167\1\u0125\3\167\1\0\21\167"+
    "\1\0\6\167\5\0\1\170\1\0\1\167\1\0\2\167"+
    "\1\0\1\350\1\0\2\170\14\167\1\0\3\167\2\170"+
    "\4\167\1\u0125\3\167\1\0\21\167\1\352\5\167\2\171"+
    "\1\356\1\171\1\u0129\1\171\1\173\10\171\2\173\20\171"+
    "\2\173\4\171\1\u012a\33\171\1\167\5\0\1\173\1\0"+
    "\1\171\1\0\1\171\1\167\3\0\2\173\14\171\1\0"+
    "\3\167\2\173\3\171\1\167\1\u0128\1\167\2\171\1\0"+
    "\13\171\1\u012b\4\171\1\167\1\0\1\167\4\171\1\167"+
    "\5\0\1\173\1\0\1\171\1\0\1\171\1\167\3\0"+
    "\2\173\14\171\1\0\3\167\2\173\3\171\1\167\1\u0128"+
    "\1\167\2\171\1\0\11\171\1\u012c\6\171\1\167\1\0"+
    "\1\167\4\171\7\201\1\0\1\201\1\0\3\201\1\0"+
    "\31\201\1\u012d\3\201\1\0\27\201\6\0\1\317\1\0"+
    "\2\317\3\0\1\321\1\0\1\317\2\0\1\317\2\0"+
    "\7\317\5\0\2\317\3\322\1\323\3\0\1\322\1\0"+
    "\20\322\1\324\3\0\1\322\2\0\103\201\1\207\2\0"+
    "\1\207\2\0\1\207\1\0\1\207\1\0\2\207\3\0"+
    "\30\207\1\u012e\3\207\1\0\27\207\1\0\1\210\1\0"+
    "\1\210\1\0\1\210\41\0\1\u012f\33\0\1\207\1\210"+
    "\1\0\1\211\1\0\1\210\1\207\1\0\1\207\1\0"+
    "\2\207\3\0\30\207\1\u0130\3\207\1\0\31\207\1\0"+
    "\100\207\2\216\1\0\1\216\2\0\1\216\1\0\1\216"+
    "\1\0\1\216\4\0\16\216\1\0\2\216\1\0\6\216"+
    "\1\u0131\3\216\1\0\21\216\1\0\6\216\1\217\1\0"+
    "\1\217\1\0\1\222\1\216\1\0\1\216\1\0\1\216"+
    "\4\0\16\216\1\0\2\216\1\0\6\216\1\u0132\3\216"+
    "\1\0\21\216\1\0\5\216\2\0\1\220\101\0\1\222"+
    "\1\0\1\222\1\0\1\222\41\0\1\u0133\33\0\2\223"+
    "\1\0\1\223\1\0\1\44\1\223\1\44\1\223\1\44"+
    "\1\223\4\44\16\223\1\44\2\223\1\44\6\223\1\u0134"+
    "\3\223\1\44\21\223\1\44\5\223\2\216\1\0\1\216"+
    "\2\0\1\216\1\0\1\216\1\0\1\216\1\343\1\0"+
    "\1\344\1\0\16\216\1\0\2\216\1\346\6\216\1\u0131"+
    "\3\216\1\0\21\216\1\0\7\216\1\u0135\1\216\1\u0136"+
    "\42\216\1\u0131\33\216\2\223\1\0\1\223\1\0\1\44"+
    "\1\u0137\1\44\1\223\1\44\1\223\4\44\16\223\1\44"+
    "\2\223\1\44\6\223\1\u0134\3\223\1\44\21\223\1\44"+
    "\5\223\1\233\2\0\1\233\2\0\1\233\1\0\3\233"+
    "\4\0\16\233\1\0\11\233\1\u0138\25\233\1\0\6\233"+
    "\1\37\1\0\1\234\1\0\1\37\1\233\1\0\3\233"+
    "\4\0\16\233\1\0\11\233\1\u0139\25\233\1\0\5\233"+
    "\1\u013a\2\0\1\u013a\2\0\1\u013a\1\0\3\u013a\4\0"+
    "\16\u013a\1\0\11\u013a\1\u013b\25\u013a\1\0\5\u013a\1\u013c"+
    "\2\0\1\u013c\2\0\1\u013c\1\0\3\u013c\4\0\16\u013c"+
    "\1\0\11\u013c\1\u013d\25\u013c\1\0\5\u013c\2\233\1\0"+
    "\100\233\1\240\2\0\1\240\2\0\1\240\1\0\3\240"+
    "\4\0\16\240\1\0\11\240\1\u013e\25\240\1\0\5\240"+
    "\1\0\1\241\1\0\1\241\1\0\1\241\41\0\1\u013f"+
    "\33\0\1\240\1\241\1\0\1\243\1\0\1\241\1\240"+
    "\1\0\3\240\4\0\16\240\1\0\11\240\1\u0140\25\240"+
    "\1\0\7\240\1\0\100\240\2\0\1\245\100\0\2\247"+
    "\1\0\1\247\1\0\76\247\2\0\1\250\101\0\1\253"+
    "\1\0\1\253\1\0\1\253\41\0\1\u0141\35\0\1\254"+
    "\110\0\1\u0142\104\0\1\u0142\111\0\1\256\105\0\1\u0142"+
    "\103\0\6\u0143\1\272\7\0\2\272\1\u0144\1\0\1\u0145"+
    "\2\0\1\272\1\0\20\272\34\0\7\270\7\0\3\272"+
    "\1\0\1\u0145\2\0\1\272\1\0\20\272\17\0\1\u0146"+
    "\14\0\7\270\7\0\3\272\1\0\1\u0145\2\0\1\272"+
    "\1\0\20\272\17\0\1\u0146\14\0\3\270\4\u0147\7\0"+
    "\3\272\1\0\1\u0145\2\0\1\272\1\0\20\272\17\0"+
    "\1\u0146\14\0\7\u0147\7\0\3\272\1\0\1\u0145\2\0"+
    "\1\272\1\0\20\272\27\0\1\256\1\0\1\256\14\0"+
    "\1\256\1\0\1\256\66\0\7\272\7\0\3\272\1\0"+
    "\1\u0145\2\0\1\272\1\0\20\272\55\0\1\u0148\34\0"+
    "\4\272\1\u0149\76\272\51\0\1\256\31\0\7\300\1\0"+
    "\1\300\1\0\12\300\1\0\22\300\1\u014a\3\300\1\0"+
    "\22\300\1\0\6\300\1\0\100\300\6\0\1\120\1\0"+
    "\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0"+
    "\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134"+
    "\1\0\1\u014b\17\134\4\0\1\u0119\10\0\1\120\1\0"+
    "\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0"+
    "\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134"+
    "\1\0\11\134\1\u014c\6\134\4\0\1\u0119\10\0\1\120"+
    "\1\0\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134"+
    "\3\0\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0"+
    "\1\134\1\0\7\134\1\u014d\3\134\1\u014e\2\134\1\u014f"+
    "\1\134\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0"+
    "\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354\2\0"+
    "\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0\6\134"+
    "\1\u0150\2\134\1\u0151\3\134\1\u0152\2\134\4\0\1\u0119"+
    "\10\0\1\120\1\0\1\120\7\0\1\u0118\2\0\1\120"+
    "\1\0\7\134\3\0\1\354\2\0\1\120\3\134\1\0"+
    "\1\u010c\2\0\1\134\1\0\4\134\1\u0153\3\134\1\u0154"+
    "\7\134\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0"+
    "\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354\2\0"+
    "\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0\3\134"+
    "\1\u0155\14\134\4\0\1\u0119\10\0\1\120\1\0\1\120"+
    "\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354"+
    "\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0"+
    "\3\134\1\u0156\14\134\4\0\1\u0119\10\0\1\120\1\0"+
    "\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0"+
    "\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134"+
    "\1\0\3\134\1\u0157\1\134\1\u0158\12\134\4\0\1\u0119"+
    "\10\0\1\120\1\0\1\120\7\0\1\u0118\2\0\1\120"+
    "\1\0\7\134\3\0\1\354\2\0\1\120\3\134\1\0"+
    "\1\u010c\2\0\1\134\1\0\10\134\1\u0159\7\134\4\0"+
    "\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118\2\0"+
    "\1\120\1\0\7\134\3\0\1\354\2\0\1\120\3\134"+
    "\1\0\1\u010c\2\0\1\134\1\0\5\134\1\u015a\12\134"+
    "\4\0\1\u0119\4\0\1\37\1\0\1\u015b\76\0\16\u015c"+
    "\1\0\64\u015c\103\u015d\14\320\1\335\32\320\1\u015e\33\320"+
    "\25\0\7\322\7\0\3\322\4\0\1\322\1\0\20\322"+
    "\4\0\1\322\2\0\4\46\1\u015f\76\46\25\0\7\333"+
    "\57\0\1\u0160\14\0\7\333\57\0\1\u0160\14\0\3\333"+
    "\4\u0161\57\0\1\u0160\14\0\7\u0161\107\0\1\u0162\50\0"+
    "\1\46\1\0\1\46\1\0\1\46\4\0\6\46\6\337"+
    "\2\46\4\0\5\46\1\0\1\325\1\0\2\46\1\0"+
    "\20\46\3\0\4\46\6\0\1\46\1\0\1\46\1\0"+
    "\1\46\4\0\6\46\7\u0163\1\46\4\0\2\46\1\u0163"+
    "\2\46\1\0\1\325\1\0\2\46\1\0\5\u0163\13\46"+
    "\3\0\4\46\6\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\6\46\7\341\1\46\4\0\2\46\3\341\1\0"+
    "\1\325\1\0\2\46\1\0\20\341\3\0\1\46\1\341"+
    "\1\46\1\341\6\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\6\46\7\342\1\46\4\0\5\46\1\0\1\325"+
    "\1\0\2\46\1\0\20\46\3\0\4\46\22\0\1\u0164"+
    "\13\0\1\u0165\52\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\16\46\2\0\1\u0166\1\0\5\46\1\0\1\325"+
    "\1\0\2\46\1\0\20\46\3\0\4\46\6\0\1\46"+
    "\1\0\1\46\1\0\1\46\4\0\16\46\4\0\5\46"+
    "\1\0\1\u0167\1\0\2\46\1\0\20\46\3\0\4\46"+
    "\2\0\1\356\3\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\16\46\4\0\5\46\1\0\1\u0167\1\0\2\46"+
    "\1\0\20\46\3\0\4\46\6\0\1\46\1\0\1\46"+
    "\1\0\1\46\4\0\1\46\1\353\4\46\7\66\1\46"+
    "\2\0\1\354\1\0\2\46\3\66\1\0\1\325\1\0"+
    "\1\46\1\66\1\0\13\66\1\u0168\4\66\3\0\1\46"+
    "\1\66\2\46\6\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\1\46\1\353\4\46\7\66\1\46\2\0\1\354"+
    "\1\0\2\46\3\66\1\0\1\325\1\0\1\46\1\66"+
    "\1\0\10\66\1\u0169\7\66\3\0\1\46\1\66\2\46"+
    "\6\0\1\46\1\0\1\46\1\0\1\46\4\0\1\46"+
    "\1\353\4\46\7\66\1\46\2\0\1\354\1\0\2\46"+
    "\3\66\1\0\1\325\1\0\1\46\1\66\1\0\6\66"+
    "\1\u016a\4\66\1\u016b\4\66\3\0\1\46\1\66\2\46"+
    "\6\0\1\46\1\0\1\46\1\0\1\46\4\0\1\46"+
    "\1\353\4\46\7\66\1\46\2\0\1\354\1\0\2\46"+
    "\3\66\1\0\1\325\1\0\1\46\1\66\1\0\1\u016c"+
    "\17\66\3\0\1\46\1\66\2\46\6\0\1\46\1\0"+
    "\1\46\1\0\1\46\4\0\1\46\1\353\4\46\7\66"+
    "\1\46\2\0\1\354\1\0\2\46\3\66\1\0\1\325"+
    "\1\0\1\46\1\66\1\0\1\u016d\17\66\3\0\1\46"+
    "\1\66\2\46\6\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\1\46\1\353\4\46\7\66\1\46\2\0\1\354"+
    "\1\0\2\46\3\66\1\0\1\325\1\0\1\46\1\66"+
    "\1\0\12\66\1\u016e\5\66\3\0\1\46\1\66\2\46"+
    "\6\0\1\46\1\0\1\46\1\0\1\46\4\0\1\46"+
    "\1\353\4\46\7\66\1\46\2\0\1\354\1\0\2\46"+
    "\3\66\1\0\1\325\1\0\1\46\1\66\1\0\10\66"+
    "\1\u016f\7\66\3\0\1\46\1\66\2\46\6\0\1\46"+
    "\1\0\1\46\1\0\1\46\4\0\1\46\1\353\4\46"+
    "\7\66\1\46\2\0\1\354\1\0\2\46\3\66\1\0"+
    "\1\325\1\0\1\46\1\66\1\0\14\66\1\u0170\3\66"+
    "\3\0\1\46\1\66\2\46\6\0\1\46\1\0\1\46"+
    "\1\0\1\46\4\0\1\46\1\353\4\46\7\66\1\46"+
    "\2\0\1\354\1\0\2\46\3\66\1\0\1\325\1\0"+
    "\1\46\1\66\1\0\7\66\1\u0171\10\66\3\0\1\46"+
    "\1\66\2\46\6\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\1\46\1\353\4\46\7\66\1\46\2\0\1\354"+
    "\1\0\2\46\3\66\1\0\1\325\1\0\1\46\1\66"+
    "\1\0\13\66\1\u0172\4\66\3\0\1\46\1\66\2\46"+
    "\6\0\1\46\1\0\1\46\1\0\1\46\4\0\1\46"+
    "\1\353\4\46\7\66\1\46\2\0\1\354\1\0\2\46"+
    "\3\66\1\0\1\325\1\0\1\46\1\66\1\0\3\66"+
    "\1\u0173\14\66\3\0\1\46\1\66\2\46\6\0\1\46"+
    "\1\0\1\46\1\0\1\46\4\0\1\46\1\353\4\46"+
    "\7\66\1\46\2\0\1\354\1\0\2\46\3\66\1\0"+
    "\1\325\1\0\1\46\1\66\1\0\14\66\1\u0174\3\66"+
    "\3\0\1\46\1\66\2\46\6\0\1\46\1\0\1\46"+
    "\1\0\1\46\4\0\1\46\1\353\4\46\7\66\1\46"+
    "\2\0\1\354\1\0\2\46\3\66\1\0\1\325\1\0"+
    "\1\46\1\66\1\0\6\66\1\u0175\11\66\3\0\1\46"+
    "\1\66\2\46\2\u0103\1\0\1\u0103\1\0\76\u0103\25\0"+
    "\6\u010e\75\0\7\u0176\7\0\1\u0176\10\0\5\u0176\47\0"+
    "\7\u0110\7\0\3\u0110\6\0\20\u0110\4\0\1\u0110\1\0"+
    "\1\u0110\25\0\7\u0111\71\0\1\u0164\13\0\1\u0165\1\u0177"+
    "\102\0\1\u0178\102\0\1\u0166\45\0\1\120\3\0\1\120"+
    "\1\0\1\120\12\0\1\120\1\0\7\120\6\0\4\120"+
    "\1\0\1\u010c\2\0\1\120\1\0\20\120\15\0\1\120"+
    "\1\0\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134"+
    "\3\0\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0"+
    "\1\134\1\0\14\134\1\u0179\3\134\4\0\1\u0119\2\0"+
    "\2\147\1\150\1\147\1\u017a\42\147\1\156\37\147\2\0"+
    "\1\147\1\0\1\147\1\0\2\147\3\0\16\147\1\0"+
    "\11\147\1\156\3\147\1\0\21\147\1\0\5\147\13\0"+
    "\1\u0122\67\0\2\167\1\u017b\1\167\1\u017c\1\167\1\170"+
    "\10\167\2\170\20\167\2\170\4\167\1\u0125\33\167\16\u017d"+
    "\1\0\64\u017d\1\167\5\u017e\1\170\1\u017e\1\167\1\u017e"+
    "\2\167\3\u017e\2\170\14\167\1\u017e\3\167\2\170\4\167"+
    "\1\u0125\3\167\1\u017e\21\167\1\u017e\5\167\2\171\1\u017f"+
    "\1\171\1\u0180\1\171\1\173\10\171\2\173\20\171\2\173"+
    "\4\171\1\u012a\33\171\1\167\1\0\1\356\3\0\1\173"+
    "\1\0\1\171\1\0\1\171\1\167\3\0\2\173\14\171"+
    "\1\0\3\167\2\173\3\171\1\167\1\u0181\1\167\2\171"+
    "\1\0\20\171\1\167\1\0\1\167\4\171\2\167\1\u017b"+
    "\1\167\1\u017c\1\167\1\173\1\167\1\171\1\167\1\171"+
    "\4\167\2\173\14\171\4\167\2\173\3\171\1\167\1\u0128"+
    "\1\167\2\171\1\167\20\171\3\167\4\171\1\167\5\0"+
    "\1\173\1\0\1\171\1\0\1\171\1\167\3\0\2\173"+
    "\14\171\1\0\3\167\2\173\3\171\1\167\1\u0128\1\167"+
    "\2\171\1\0\1\u0182\17\171\1\167\1\0\1\167\4\171"+
    "\1\167\5\0\1\173\1\0\1\171\1\0\1\171\1\167"+
    "\3\0\2\173\14\171\1\0\3\167\2\173\3\171\1\167"+
    "\1\u0128\1\167\2\171\1\0\12\171\1\u0183\5\171\1\167"+
    "\1\0\1\167\4\171\2\0\1\210\1\0\1\u0184\76\0"+
    "\2\207\1\210\1\207\1\u0185\76\207\2\216\1\0\44\216"+
    "\1\u0131\35\216\1\222\1\216\1\u0186\42\216\1\u0131\33\216"+
    "\2\0\1\222\1\0\1\u0187\76\0\2\223\1\0\1\223"+
    "\1\216\42\223\1\u0134\33\223\47\0\1\u0188\33\0\2\216"+
    "\1\u0135\1\216\2\0\1\216\1\0\1\216\1\0\1\216"+
    "\4\0\16\216\1\0\2\216\1\0\6\216\1\230\3\216"+
    "\1\0\21\216\1\0\5\216\2\u0137\1\0\1\u0137\1\0"+
    "\1\u0103\1\u0137\1\u0103\1\u0137\1\u0103\1\u0137\4\u0103\16\u0137"+
    "\1\u0103\2\u0137\1\u0103\6\u0137\1\u0189\3\u0137\1\u0103\21\u0137"+
    "\1\u0103\5\u0137\2\233\1\37\1\233\1\u018a\76\233\1\u013a"+
    "\2\0\1\u013a\2\0\1\u013a\1\u018b\3\u013a\4\0\16\u013a"+
    "\1\0\11\u013a\1\u013b\25\u013a\1\0\7\u013a\1\0\100\u013a"+
    "\1\u013c\2\0\1\u013c\2\0\1\u013c\1\0\3\u013c\1\0"+
    "\1\u018b\2\0\16\u013c\1\0\11\u013c\1\u013d\25\u013c\1\0"+
    "\7\u013c\1\0\100\u013c\2\0\1\241\1\0\1\u018c\76\0"+
    "\2\240\1\241\1\240\1\u018d\76\240\2\0\1\253\1\0"+
    "\1\u018e\123\0\6\u0143\1\272\7\0\3\272\1\0\1\u0145"+
    "\2\0\1\272\1\0\20\272\34\0\7\u018f\7\0\1\u018f"+
    "\2\272\1\0\1\u0145\2\0\1\272\1\0\5\u018f\13\272"+
    "\34\0\7\u0146\7\0\3\u0146\6\0\20\u0146\4\0\1\u0146"+
    "\1\0\1\u0146\25\0\7\u0147\7\0\3\272\1\0\1\u0145"+
    "\2\0\1\272\1\0\20\272\11\0\1\272\22\0\7\272"+
    "\7\0\3\272\1\0\1\u0145\2\0\1\272\1\0\20\272"+
    "\15\0\1\120\1\0\1\120\7\0\1\u0118\2\0\1\120"+
    "\1\0\7\134\3\0\1\354\2\0\1\120\3\134\1\0"+
    "\1\u010c\2\0\1\134\1\0\13\134\1\u0190\4\134\4\0"+
    "\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118\2\0"+
    "\1\120\1\0\7\134\3\0\1\354\2\0\1\120\3\134"+
    "\1\0\1\u010c\2\0\1\134\1\0\10\134\1\u0191\7\134"+
    "\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118"+
    "\2\0\1\120\1\0\7\134\3\0\1\354\2\0\1\120"+
    "\3\134\1\0\1\u010c\2\0\1\134\1\0\6\134\1\u0192"+
    "\4\134\1\u0193\4\134\4\0\1\u0119\10\0\1\120\1\0"+
    "\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0"+
    "\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134"+
    "\1\0\1\u0194\17\134\4\0\1\u0119\10\0\1\120\1\0"+
    "\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0"+
    "\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134"+
    "\1\0\1\u0195\17\134\4\0\1\u0119\10\0\1\120\1\0"+
    "\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0"+
    "\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134"+
    "\1\0\12\134\1\u0196\5\134\4\0\1\u0119\10\0\1\120"+
    "\1\0\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134"+
    "\3\0\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0"+
    "\1\134\1\0\10\134\1\u0197\7\134\4\0\1\u0119\10\0"+
    "\1\120\1\0\1\120\7\0\1\u0118\2\0\1\120\1\0"+
    "\7\134\3\0\1\354\2\0\1\120\3\134\1\0\1\u010c"+
    "\2\0\1\134\1\0\14\134\1\u0198\3\134\4\0\1\u0119"+
    "\10\0\1\120\1\0\1\120\7\0\1\u0118\2\0\1\120"+
    "\1\0\7\134\3\0\1\354\2\0\1\120\3\134\1\0"+
    "\1\u010c\2\0\1\134\1\0\7\134\1\u0199\10\134\4\0"+
    "\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118\2\0"+
    "\1\120\1\0\7\134\3\0\1\354\2\0\1\120\3\134"+
    "\1\0\1\u010c\2\0\1\134\1\0\13\134\1\u019a\4\134"+
    "\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118"+
    "\2\0\1\120\1\0\7\134\3\0\1\354\2\0\1\120"+
    "\3\134\1\0\1\u010c\2\0\1\134\1\0\3\134\1\u019b"+
    "\14\134\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0"+
    "\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354\2\0"+
    "\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0\14\134"+
    "\1\u019c\3\134\4\0\1\u0119\10\0\1\120\1\0\1\120"+
    "\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354"+
    "\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0"+
    "\6\134\1\u019d\11\134\4\0\1\u0119\3\0\3\37\1\0"+
    "\1\37\41\0\1\314\33\0\16\u015c\1\u019e\64\u015c\50\0"+
    "\1\u019f\32\0\14\320\1\u01a0\32\320\1\u015e\33\320\2\0"+
    "\1\46\3\0\1\46\1\0\1\46\1\0\1\46\4\0"+
    "\16\46\4\0\5\46\1\0\1\325\1\0\2\46\1\0"+
    "\20\46\3\0\4\46\25\0\7\u0160\7\0\3\u0160\6\0"+
    "\20\u0160\4\0\1\u0160\1\0\1\u0160\25\0\7\u0161\55\0"+
    "\1\46\1\0\1\46\1\0\1\46\4\0\1\46\1\353"+
    "\4\46\7\66\1\46\2\0\1\354\1\0\2\46\3\66"+
    "\1\0\1\325\1\0\1\46\1\66\1\0\3\66\1\u01a1"+
    "\14\66\3\0\1\46\1\66\2\46\6\0\1\46\1\0"+
    "\1\46\1\0\1\46\4\0\1\46\1\353\4\46\7\66"+
    "\1\46\2\0\1\354\1\0\2\46\3\66\1\0\1\325"+
    "\1\0\1\46\1\66\1\0\3\66\1\u01a2\14\66\3\0"+
    "\1\46\1\66\2\46\6\0\1\46\1\0\1\46\1\0"+
    "\1\46\4\0\1\46\1\353\4\46\7\66\1\46\2\0"+
    "\1\354\1\0\2\46\3\66\1\0\1\325\1\0\1\46"+
    "\1\66\1\0\4\66\1\u01a3\13\66\3\0\1\46\1\66"+
    "\2\46\6\0\1\46\1\0\1\46\1\0\1\46\4\0"+
    "\1\46\1\353\4\46\7\66\1\46\2\0\1\354\1\0"+
    "\2\46\3\66\1\0\1\325\1\0\1\46\1\66\1\0"+
    "\3\66\1\u01a4\14\66\3\0\1\46\1\66\2\46\6\0"+
    "\1\46\1\0\1\46\1\0\1\46\4\0\1\46\1\353"+
    "\4\46\7\66\1\46\2\0\1\354\1\0\2\46\3\66"+
    "\1\0\1\325\1\0\1\46\1\66\1\0\1\66\1\u01a5"+
    "\16\66\3\0\1\46\1\66\2\46\6\0\1\46\1\0"+
    "\1\46\1\0\1\46\4\0\1\46\1\353\4\46\7\66"+
    "\1\46\2\0\1\354\1\0\2\46\3\66\1\0\1\325"+
    "\1\0\1\46\1\66\1\0\7\66\1\u01a6\10\66\3\0"+
    "\1\46\1\66\2\46\1\0\1\u01a7\1\0\1\u01a7\1\0"+
    "\1\u01a7\1\46\1\0\1\46\1\0\1\46\4\0\1\46"+
    "\1\353\4\46\7\66\1\46\2\0\1\354\1\0\2\46"+
    "\3\66\1\0\1\325\1\0\1\46\1\66\1\0\20\66"+
    "\3\0\1\46\1\66\2\46\6\0\1\46\1\0\1\46"+
    "\1\0\1\46\4\0\1\46\1\353\4\46\7\66\1\46"+
    "\2\0\1\354\1\0\2\46\3\66\1\0\1\325\1\0"+
    "\1\46\1\66\1\0\1\66\1\u01a8\16\66\3\0\1\46"+
    "\1\66\2\46\6\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\1\46\1\353\4\46\7\66\1\46\2\0\1\354"+
    "\1\0\2\46\3\66\1\0\1\325\1\0\1\46\1\66"+
    "\1\0\3\66\1\u01a9\14\66\3\0\1\46\1\66\2\46"+
    "\6\0\1\46\1\0\1\46\1\0\1\46\4\0\1\46"+
    "\1\353\4\46\7\66\1\46\2\0\1\354\1\0\2\46"+
    "\3\66\1\0\1\325\1\0\1\46\1\66\1\0\14\66"+
    "\1\u01aa\3\66\3\0\1\46\1\66\2\46\6\0\1\46"+
    "\1\0\1\46\1\0\1\46\4\0\1\46\1\353\4\46"+
    "\7\66\1\46\2\0\1\354\1\0\2\46\3\66\1\0"+
    "\1\325\1\0\1\46\1\66\1\0\10\66\1\u01ab\7\66"+
    "\3\0\1\46\1\66\2\46\6\0\1\46\1\0\1\46"+
    "\1\0\1\46\4\0\1\46\1\353\4\46\7\66\1\46"+
    "\2\0\1\354\1\0\2\46\3\66\1\0\1\325\1\0"+
    "\1\46\1\66\1\0\6\66\1\u01ac\11\66\3\0\1\46"+
    "\1\66\2\46\6\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\1\46\1\353\4\46\7\66\1\46\2\0\1\354"+
    "\1\0\2\46\3\66\1\0\1\325\1\0\1\46\1\66"+
    "\1\0\7\66\1\u01ad\10\66\3\0\1\46\1\66\2\46"+
    "\1\147\3\150\1\0\1\37\1\147\1\0\1\147\1\0"+
    "\2\147\3\0\16\147\1\0\11\147\1\u011e\3\147\1\0"+
    "\21\147\1\0\5\147\1\167\5\0\1\170\1\0\1\167"+
    "\1\0\2\167\3\0\2\170\14\167\1\0\3\167\2\170"+
    "\4\167\1\u01ae\3\167\1\0\21\167\1\0\6\167\1\0"+
    "\1\u017b\3\0\1\170\1\0\1\167\1\0\2\167\3\0"+
    "\2\170\14\167\1\0\3\167\2\170\4\167\1\u0125\3\167"+
    "\1\0\21\167\1\0\5\167\16\u017d\1\167\64\u017d\50\0"+
    "\1\u01af\32\0\1\167\5\0\1\173\1\0\1\171\1\0"+
    "\1\171\1\167\3\0\2\173\14\171\1\0\3\167\2\173"+
    "\3\171\1\167\1\u01b0\1\167\2\171\1\0\20\171\1\167"+
    "\1\0\1\167\4\171\1\167\1\0\1\u017f\3\0\1\173"+
    "\1\0\1\171\1\0\1\171\1\167\3\0\2\173\14\171"+
    "\1\0\3\167\2\173\3\171\1\167\1\u0128\1\167\2\171"+
    "\1\0\20\171\1\167\1\0\1\167\6\171\1\u01b1\1\171"+
    "\1\u01b2\1\171\1\173\10\171\2\173\20\171\2\173\4\171"+
    "\1\u012a\33\171\1\167\5\0\1\173\1\0\1\171\1\0"+
    "\1\171\1\167\3\0\2\173\14\171\1\0\3\167\2\173"+
    "\3\171\1\167\1\u0128\1\167\2\171\1\0\1\171\1\u01b3"+
    "\16\171\1\167\1\0\1\167\4\171\1\167\1\u01a7\1\0"+
    "\1\u01a7\1\0\1\u01a7\1\173\1\0\1\171\1\0\1\171"+
    "\1\167\3\0\2\173\14\171\1\0\3\167\2\173\3\171"+
    "\1\167\1\u0128\1\167\2\171\1\0\20\171\1\167\1\0"+
    "\1\167\4\171\1\0\3\210\1\0\1\210\41\0\1\u012f"+
    "\33\0\1\207\2\210\1\211\1\0\1\210\1\207\1\0"+
    "\1\207\1\0\2\207\3\0\30\207\1\u0130\3\207\1\0"+
    "\27\207\1\216\1\217\1\222\1\217\1\0\1\222\1\216"+
    "\1\0\1\216\1\0\1\216\4\0\16\216\1\0\2\216"+
    "\1\0\6\216\1\u0132\3\216\1\0\21\216\1\0\5\216"+
    "\1\0\3\222\1\0\1\222\41\0\1\u0133\35\0\1\u0135"+
    "\1\0\1\u01b4\76\0\2\u0137\1\0\1\u0137\1\216\42\u0137"+
    "\1\u0189\33\u0137\1\233\2\37\1\234\1\0\1\37\1\233"+
    "\1\0\3\233\4\0\16\233\1\0\11\233\1\u0139\25\233"+
    "\1\0\5\233\1\0\3\241\1\0\1\241\41\0\1\u013f"+
    "\33\0\1\240\2\241\1\243\1\0\1\241\1\240\1\0"+
    "\3\240\4\0\16\240\1\0\11\240\1\u0140\25\240\1\0"+
    "\5\240\1\0\3\253\1\0\1\253\41\0\1\u0141\41\0"+
    "\1\120\1\0\1\120\7\0\1\u0118\2\0\1\120\1\0"+
    "\7\134\3\0\1\354\2\0\1\120\3\134\1\0\1\u010c"+
    "\2\0\1\134\1\0\3\134\1\u01b5\14\134\4\0\1\u0119"+
    "\10\0\1\120\1\0\1\120\7\0\1\u0118\2\0\1\120"+
    "\1\0\7\134\3\0\1\354\2\0\1\120\3\134\1\0"+
    "\1\u010c\2\0\1\134\1\0\3\134\1\u01b6\14\134\4\0"+
    "\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118\2\0"+
    "\1\120\1\0\7\134\3\0\1\354\2\0\1\120\3\134"+
    "\1\0\1\u010c\2\0\1\134\1\0\4\134\1\u01b7\13\134"+
    "\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118"+
    "\2\0\1\120\1\0\7\134\3\0\1\354\2\0\1\120"+
    "\3\134\1\0\1\u010c\2\0\1\134\1\0\3\134\1\u01b8"+
    "\14\134\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0"+
    "\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354\2\0"+
    "\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0\1\134"+
    "\1\u01b9\16\134\4\0\1\u0119\10\0\1\120\1\0\1\120"+
    "\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354"+
    "\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0"+
    "\7\134\1\u01ba\10\134\4\0\1\u0119\3\0\1\u01a7\1\0"+
    "\1\u01a7\1\0\1\u01a7\1\120\1\0\1\120\7\0\1\u0118"+
    "\2\0\1\120\1\0\7\134\3\0\1\354\2\0\1\120"+
    "\3\134\1\0\1\u010c\2\0\1\134\1\0\20\134\4\0"+
    "\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118\2\0"+
    "\1\120\1\0\7\134\3\0\1\354\2\0\1\120\3\134"+
    "\1\0\1\u010c\2\0\1\134\1\0\1\134\1\u01bb\16\134"+
    "\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118"+
    "\2\0\1\120\1\0\7\134\3\0\1\354\2\0\1\120"+
    "\3\134\1\0\1\u010c\2\0\1\134\1\0\3\134\1\u01bc"+
    "\14\134\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0"+
    "\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354\2\0"+
    "\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0\14\134"+
    "\1\u01bd\3\134\4\0\1\u0119\10\0\1\120\1\0\1\120"+
    "\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354"+
    "\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0"+
    "\10\134\1\u01be\7\134\4\0\1\u0119\10\0\1\120\1\0"+
    "\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0"+
    "\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134"+
    "\1\0\6\134\1\u01bf\11\134\4\0\1\u0119\10\0\1\120"+
    "\1\0\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134"+
    "\3\0\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0"+
    "\1\134\1\0\7\134\1\u01c0\10\134\4\0\1\u0119\10\0"+
    "\1\u01c1\10\0\2\u01c1\20\0\2\u01c1\110\0\1\u01c2\33\0"+
    "\1\u01a7\1\0\1\u01a7\1\0\1\u01a7\41\0\1\u01c3\41\0"+
    "\1\46\1\0\1\46\1\0\1\46\4\0\1\46\1\353"+
    "\4\46\7\66\1\46\2\0\1\354\1\0\2\46\3\66"+
    "\1\0\1\325\1\0\1\46\1\66\1\0\14\66\1\u01c4"+
    "\3\66\3\0\1\46\1\66\2\46\6\0\1\46\1\0"+
    "\1\46\1\0\1\46\4\0\1\46\1\353\4\46\7\66"+
    "\1\46\2\0\1\354\1\0\2\46\3\66\1\0\1\325"+
    "\1\0\1\46\1\66\1\0\1\66\1\u01c5\16\66\3\0"+
    "\1\46\1\66\2\46\6\0\1\46\1\0\1\46\1\0"+
    "\1\46\4\0\1\46\1\353\4\46\7\66\1\46\2\0"+
    "\1\354\1\0\2\46\3\66\1\0\1\325\1\0\1\46"+
    "\1\66\1\0\7\66\1\u01c6\10\66\3\0\1\46\1\66"+
    "\2\46\6\0\1\46\1\0\1\46\1\0\1\46\4\0"+
    "\1\46\1\353\4\46\7\66\1\46\2\0\1\354\1\0"+
    "\2\46\3\66\1\0\1\325\1\0\1\46\1\66\1\0"+
    "\3\66\1\u01c7\14\66\3\0\1\46\1\66\2\46\2\167"+
    "\1\0\3\167\1\170\10\167\2\170\20\167\2\170\4\167"+
    "\1\u0125\33\167\50\0\1\167\32\0\2\171\1\46\1\171"+
    "\1\u01c8\1\171\1\173\10\171\2\173\20\171\2\173\4\171"+
    "\1\u012a\33\171\1\167\5\0\1\173\1\0\1\171\1\0"+
    "\1\171\1\167\3\0\2\173\14\171\1\0\3\167\2\173"+
    "\3\171\1\167\1\176\1\167\2\171\1\0\20\171\1\167"+
    "\1\0\1\167\4\171\1\167\1\0\1\u01b1\3\0\1\173"+
    "\1\0\1\171\1\0\1\171\1\167\3\0\2\173\14\171"+
    "\1\0\3\167\2\173\3\171\1\167\1\u0181\1\167\2\171"+
    "\1\0\20\171\1\167\1\0\1\167\4\171\2\0\1\u0135"+
    "\44\0\1\u0188\41\0\1\120\1\0\1\120\7\0\1\u0118"+
    "\2\0\1\120\1\0\7\134\3\0\1\354\2\0\1\120"+
    "\3\134\1\0\1\u010c\2\0\1\134\1\0\14\134\1\u01c9"+
    "\3\134\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0"+
    "\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354\2\0"+
    "\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0\1\134"+
    "\1\u01ca\16\134\4\0\1\u0119\10\0\1\120\1\0\1\120"+
    "\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0\1\354"+
    "\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134\1\0"+
    "\7\134\1\u01cb\10\134\4\0\1\u0119\10\0\1\120\1\0"+
    "\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134\3\0"+
    "\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0\1\134"+
    "\1\0\3\134\1\u01cc\14\134\4\0\1\u0119\10\0\1\u01c1"+
    "\10\0\2\u01c1\20\0\2\u01c1\5\0\1\u01c2\34\0\1\u01a7"+
    "\1\0\1\u01cd\104\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\1\46\1\353\4\46\7\66\1\46\2\0\1\354"+
    "\1\0\2\46\3\66\1\0\1\325\1\0\1\46\1\66"+
    "\1\0\6\66\1\u01ce\11\66\3\0\1\46\1\66\2\46"+
    "\6\0\1\46\1\0\1\46\1\0\1\46\4\0\1\46"+
    "\1\353\4\46\7\66\1\46\2\0\1\354\1\0\2\46"+
    "\3\66\1\0\1\325\1\0\1\46\1\66\1\0\14\66"+
    "\1\u01cf\3\66\3\0\1\46\1\66\2\46\1\167\1\0"+
    "\1\46\3\0\1\173\1\0\1\171\1\0\1\171\1\167"+
    "\3\0\2\173\14\171\1\0\3\167\2\173\3\171\1\167"+
    "\1\u0128\1\167\2\171\1\0\20\171\1\167\1\0\1\167"+
    "\4\171\6\0\1\120\1\0\1\120\7\0\1\u0118\2\0"+
    "\1\120\1\0\7\134\3\0\1\354\2\0\1\120\3\134"+
    "\1\0\1\u010c\2\0\1\134\1\0\6\134\1\u01d0\11\134"+
    "\4\0\1\u0119\10\0\1\120\1\0\1\120\7\0\1\u0118"+
    "\2\0\1\120\1\0\7\134\3\0\1\354\2\0\1\120"+
    "\3\134\1\0\1\u010c\2\0\1\134\1\0\14\134\1\u01d1"+
    "\3\134\4\0\1\u0119\3\0\3\u01a7\1\0\1\u01a7\41\0"+
    "\1\u01c3\41\0\1\46\1\0\1\46\1\0\1\46\4\0"+
    "\1\46\1\353\4\46\7\66\1\46\2\0\1\354\1\0"+
    "\2\46\3\66\1\0\1\325\1\0\1\46\1\66\1\0"+
    "\11\66\1\u01d2\6\66\3\0\1\46\1\66\2\46\6\0"+
    "\1\120\1\0\1\120\7\0\1\u0118\2\0\1\120\1\0"+
    "\7\134\3\0\1\354\2\0\1\120\3\134\1\0\1\u010c"+
    "\2\0\1\134\1\0\11\134\1\u01d3\6\134\4\0\1\u0119"+
    "\10\0\1\46\1\0\1\46\1\0\1\46\4\0\1\46"+
    "\1\353\4\46\7\66\1\46\2\0\1\354\1\0\2\46"+
    "\3\66\1\0\1\325\1\0\1\46\1\66\1\0\10\66"+
    "\1\u01d4\7\66\3\0\1\46\1\66\2\46\6\0\1\120"+
    "\1\0\1\120\7\0\1\u0118\2\0\1\120\1\0\7\134"+
    "\3\0\1\354\2\0\1\120\3\134\1\0\1\u010c\2\0"+
    "\1\134\1\0\10\134\1\u01d5\7\134\4\0\1\u0119\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22177];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\35\0\1\11\1\1\1\11\2\1\1\11\5\1\2\11"+
    "\7\1\1\11\1\1\1\11\5\1\1\11\12\1\1\11"+
    "\1\1\1\11\6\1\1\11\10\1\1\11\3\1\1\11"+
    "\4\1\1\11\1\1\1\11\1\1\2\11\3\1\1\11"+
    "\3\1\1\11\1\1\1\11\2\1\1\11\7\1\1\11"+
    "\7\1\1\11\1\1\1\11\1\1\1\11\4\1\2\11"+
    "\3\1\1\11\4\1\1\11\14\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\17\1\2\11\14\1\3\0\1\11\1\0\1\11\1\1"+
    "\2\11\1\0\2\11\5\1\2\11\4\1\2\11\1\1"+
    "\5\11\1\1\2\11\2\1\1\11\20\1\2\11\1\1"+
    "\10\11\1\0\1\11\1\1\1\0\3\1\4\11\1\1"+
    "\2\0\1\1\2\11\2\1\1\0\1\1\2\11\3\1"+
    "\1\0\6\1\4\0\2\1\1\0\4\1\12\0\1\11"+
    "\2\1\1\0\2\1\1\11\1\1\1\0\21\1\3\0"+
    "\3\1\1\11\1\1\3\11\1\0\17\1\2\11\2\1"+
    "\1\0\1\1\2\0\11\1\1\0\2\1\1\11\23\1"+
    "\1\0\17\1\1\0\21\1\1\0\1\1\1\0\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[469];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _ShLexerGen() {
    this(null);
  }

  private static final int LT_GT_PARENTHESES = 3;
  private static final int PARENTHESES = 1;

  private boolean isBackquoteOpen;
  private boolean isQuoteOpen;
  private String heredocMarker;
  private boolean heredocWithWhiteSpaceIgnore;
  private int regexStart = -1;
  private int regexGroups = 0;
  private int herestringStartPosition = -1;
  private final IntStack stateStack = new IntStack(1_000);
  private final IntStack parenStack = new IntStack(1_000);

  private void pushState(int state) {
    int currentState = yystate();
    assert currentState != YYINITIAL || stateStack.empty() : "Can't push initial state into the not empty stack";
    stateStack.push(currentState);
    yybegin(state);
  }

  private void popState() {
    assert !stateStack.empty() : "States stack is empty";
    yybegin(stateStack.pop());
  }

  private void popState(int currentState) {
    if (yystate() == currentState) {
      assert !stateStack.empty() : "States stack is empty";
      yybegin(stateStack.pop());
    }
  }

  private void pushParentheses(int parentheses) {
    parenStack.push(parentheses);
  }

  private void popParentheses() {
    assert !parenStack.empty() : "Parentheses stack is empty";
    parenStack.pop();
  }

  private boolean shouldCloseLgGtParen() {
    return !parenStack.empty() && parenStack.peek() == LT_GT_PARENTHESES;
  }

  private boolean shouldCloseSingleParen() {
    return !parenStack.empty() && parenStack.peek() == PARENTHESES;
  }

  private boolean isPreviousChar(char expectedChar) {
    if (zzCurrentPos == 0) return false;
    return zzBuffer.charAt(zzCurrentPos - 1) == expectedChar;
  }

  protected void onReset() {
    stateStack.clear();
    parenStack.clear();
    heredocWithWhiteSpaceIgnore = false;
    heredocMarker = null;
    isQuoteOpen = false;
    isBackquoteOpen = false;
    herestringStartPosition = -1;
    regexStart = -1;
    regexGroups = 0;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ShLexerGen(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 138: break;
          case 2:
            { return WHITESPACE;
            }
          // fall through
          case 139: break;
          case 3:
            { return LINEFEED;
            }
          // fall through
          case 140: break;
          case 4:
            { return BANG;
            }
          // fall through
          case 141: break;
          case 5:
            { pushState(STRING_EXPRESSION); return OPEN_QUOTE;
            }
          // fall through
          case 142: break;
          case 6:
            { return COMMENT;
            }
          // fall through
          case 143: break;
          case 7:
            { return DOLLAR;
            }
          // fall through
          case 144: break;
          case 8:
            { return WORD;
            }
          // fall through
          case 145: break;
          case 9:
            { return AMP;
            }
          // fall through
          case 146: break;
          case 10:
            { return RAW_STRING;
            }
          // fall through
          case 147: break;
          case 11:
            { if (!isPreviousChar('$') && yystate() != CONDITIONAL_EXPRESSION)
                                      pushState(PARENTHESES_COMMAND_SUBSTITUTION);
                                    pushParentheses(PARENTHESES); return LEFT_PAREN;
            }
          // fall through
          case 148: break;
          case 12:
            { if (shouldCloseLgGtParen()) {
                                      popParentheses();
                                      return RIGHT_PAREN;
                                    }
                                    if (shouldCloseSingleParen())
                                      popParentheses();
                                    popState(PARENTHESES_COMMAND_SUBSTITUTION);
                                    if (yystate() == CASE_PATTERN) popState();
                                    return RIGHT_PAREN;
            }
          // fall through
          case 149: break;
          case 13:
            { return INT;
            }
          // fall through
          case 150: break;
          case 14:
            { return SEMI;
            }
          // fall through
          case 151: break;
          case 15:
            { return LT;
            }
          // fall through
          case 152: break;
          case 16:
            { return ASSIGN;
            }
          // fall through
          case 153: break;
          case 17:
            { return GT;
            }
          // fall through
          case 154: break;
          case 18:
            { pushState(CONDITIONAL_EXPRESSION); return LEFT_SQUARE;
            }
          // fall through
          case 155: break;
          case 19:
            { switch (yystate()) {
                                      case OLD_ARITHMETIC_EXPRESSION: popState(); return ARITH_SQUARE_RIGHT;
                                      case CONDITIONAL_EXPRESSION: popState(); return RIGHT_SQUARE;
                                      default: return RIGHT_SQUARE; }
            }
          // fall through
          case 156: break;
          case 20:
            { if (yystate() == BACKQUOTE_COMMAND_SUBSTITUTION) { popState(); isBackquoteOpen = false; return CLOSE_BACKQUOTE; }
                                    else { pushState(BACKQUOTE_COMMAND_SUBSTITUTION); isBackquoteOpen = true; return OPEN_BACKQUOTE; }
            }
          // fall through
          case 157: break;
          case 21:
            { return LEFT_CURLY;
            }
          // fall through
          case 158: break;
          case 22:
            { return PIPE;
            }
          // fall through
          case 159: break;
          case 23:
            { return RIGHT_CURLY;
            }
          // fall through
          case 160: break;
          case 24:
            { return MOD;
            }
          // fall through
          case 161: break;
          case 25:
            { return MULT;
            }
          // fall through
          case 162: break;
          case 26:
            { return PLUS;
            }
          // fall through
          case 163: break;
          case 27:
            { return COMMA;
            }
          // fall through
          case 164: break;
          case 28:
            { return MINUS;
            }
          // fall through
          case 165: break;
          case 29:
            { return DIV;
            }
          // fall through
          case 166: break;
          case 30:
            { return COLON;
            }
          // fall through
          case 167: break;
          case 31:
            { return QMARK;
            }
          // fall through
          case 168: break;
          case 32:
            { return XOR;
            }
          // fall through
          case 169: break;
          case 33:
            { return BITWISE_NEGATION;
            }
          // fall through
          case 170: break;
          case 34:
            { popState(); return LINEFEED;
            }
          // fall through
          case 171: break;
          case 35:
            { if (isQuoteOpen) { isQuoteOpen = false; return CLOSE_QUOTE; }
                                    else { isQuoteOpen = true; return OPEN_QUOTE; }
            }
          // fall through
          case 172: break;
          case 36:
            { popState(); return SEMI;
            }
          // fall through
          case 173: break;
          case 37:
            { return EVAL_CONTENT;
            }
          // fall through
          case 174: break;
          case 38:
            { popState(); yypushback(yylength());
            }
          // fall through
          case 175: break;
          case 39:
            { if (isBackquoteOpen) { popState(); yypushback(yylength()); }
                                   else { pushState(BACKQUOTE_COMMAND_SUBSTITUTION); isBackquoteOpen = true; return OPEN_BACKQUOTE; }
            }
          // fall through
          case 176: break;
          case 40:
            { if (isBackquoteOpen) { popState(); yypushback(yylength()); }
                                    else { pushState(BACKQUOTE_COMMAND_SUBSTITUTION); isBackquoteOpen = true; return OPEN_BACKQUOTE; }
            }
          // fall through
          case 177: break;
          case 41:
            { popState(); return RIGHT_PAREN;
            }
          // fall through
          case 178: break;
          case 42:
            { return STRING_CONTENT;
            }
          // fall through
          case 179: break;
          case 43:
            { popState(); return CLOSE_QUOTE;
            }
          // fall through
          case 180: break;
          case 44:
            { pushState(BACKQUOTE_COMMAND_SUBSTITUTION); isBackquoteOpen = true; return OPEN_BACKQUOTE;
            }
          // fall through
          case 181: break;
          case 45:
            { if (regexGroups <= 0 && regexStart != getTokenStart()) { regexStart = -1; popState(); }; return WHITESPACE;
            }
          // fall through
          case 182: break;
          case 46:
            { regexGroups++; return WORD;
            }
          // fall through
          case 183: break;
          case 47:
            { if (regexGroups <= 0) { regexGroups = 0; popState(); return RIGHT_PAREN; } else { regexGroups--; return WORD; }
            }
          // fall through
          case 184: break;
          case 48:
            { if (herestringStartPosition != getTokenStart()) { herestringStartPosition=-1; popState(); } return WHITESPACE;
            }
          // fall through
          case 185: break;
          case 49:
            { herestringStartPosition=-1; popState(); return LINEFEED;
            }
          // fall through
          case 186: break;
          case 50:
            { herestringStartPosition=-1; popState(); yypushback(1);
            }
          // fall through
          case 187: break;
          case 51:
            { if ((yycharat(yylength()-1) == '\'' || yycharat(yylength()-1) == '"') && yylength() > 2)
                                      heredocMarker = yytext().subSequence(1, yylength()-1).toString();
                                    else heredocMarker = yytext().toString();
                                    heredocMarker = heredocMarker.replaceAll("(\\\\)(.)", "$2");
                                    yybegin(HERE_DOC_PIPELINE);
                                    return HEREDOC_MARKER_START;
            }
          // fall through
          case 188: break;
          case 52:
            { if (yytext().toString().equals(heredocMarker))
                                  { heredocMarker = null; heredocWithWhiteSpaceIgnore = false; popState(); return HEREDOC_MARKER_END; }
                                    else { yypushback(yylength()); yybegin(HERE_DOC_BODY); }
            }
          // fall through
          case 189: break;
          case 53:
            { if (!heredocWithWhiteSpaceIgnore) yybegin(HERE_DOC_BODY); return HEREDOC_CONTENT;
            }
          // fall through
          case 190: break;
          case 54:
            { yypushback(yylength()); yybegin(HERE_DOC_BODY);
            }
          // fall through
          case 191: break;
          case 55:
            { yybegin(HERE_DOC_END_MARKER); return LINEFEED;
            }
          // fall through
          case 192: break;
          case 56:
            { return HEREDOC_CONTENT;
            }
          // fall through
          case 193: break;
          case 57:
            { yybegin(HERE_DOC_END_MARKER); return HEREDOC_CONTENT;
            }
          // fall through
          case 194: break;
          case 58:
            { popState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR); return WORD;
            }
          // fall through
          case 195: break;
          case 59:
            { popState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR); return WHITESPACE;
            }
          // fall through
          case 196: break;
          case 60:
            { popState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR); return LINEFEED;
            }
          // fall through
          case 197: break;
          case 61:
            { pushState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR); return PARAM_SEPARATOR;
            }
          // fall through
          case 198: break;
          case 62:
            { pushState(PARAMETER_EXPANSION_EXPR); return PARAM_SEPARATOR;
            }
          // fall through
          case 199: break;
          case 63:
            { popState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR); return INT;
            }
          // fall through
          case 200: break;
          case 64:
            { popState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR); pushState(CONDITIONAL_EXPRESSION); return LEFT_SQUARE;
            }
          // fall through
          case 201: break;
          case 65:
            { popState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR);             return LEFT_CURLY;
            }
          // fall through
          case 202: break;
          case 66:
            { if (yystate() == PARAMETER_EXPANSION_WITHOUT_SEPARATOR)
                                        { popState(); yypushback(yylength()); }
                                        else { popState(); return RIGHT_CURLY; }
            }
          // fall through
          case 203: break;
          case 67:
            { popState(); return WORD;
            }
          // fall through
          case 204: break;
          case 68:
            { return VAR;
            }
          // fall through
          case 205: break;
          case 69:
            { pushState(PARENTHESES_COMMAND_SUBSTITUTION); yypushback(1); return DOLLAR;
            }
          // fall through
          case 206: break;
          case 70:
            { pushState(OLD_ARITHMETIC_EXPRESSION); return ARITH_SQUARE_LEFT;
            }
          // fall through
          case 207: break;
          case 71:
            { pushState(PARAMETER_EXPANSION); yypushback(1); return DOLLAR;
            }
          // fall through
          case 208: break;
          case 72:
            { return AND_AND;
            }
          // fall through
          case 209: break;
          case 73:
            { return FILEDESCRIPTOR;
            }
          // fall through
          case 210: break;
          case 74:
            { return REDIRECT_AMP_GREATER;
            }
          // fall through
          case 211: break;
          case 75:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 212: break;
          case 76:
            { return OCTAL;
            }
          // fall through
          case 213: break;
          case 77:
            { return REDIRECT_LESS_AMP;
            }
          // fall through
          case 214: break;
          case 78:
            { pushParentheses(LT_GT_PARENTHESES); return INPUT_PROCESS_SUBSTITUTION;
            }
          // fall through
          case 215: break;
          case 79:
            { if (yystate() != HERE_DOC_PIPELINE)
                                    { pushState(HERE_DOC_START_MARKER); return HEREDOC_MARKER_TAG; }
                                    else return SHIFT_LEFT;
            }
          // fall through
          case 216: break;
          case 80:
            { return REDIRECT_LESS_GREATER;
            }
          // fall through
          case 217: break;
          case 81:
            { return REDIRECT_GREATER_AMP;
            }
          // fall through
          case 218: break;
          case 82:
            { pushParentheses(LT_GT_PARENTHESES); return OUTPUT_PROCESS_SUBSTITUTION;
            }
          // fall through
          case 219: break;
          case 83:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 220: break;
          case 84:
            { return REDIRECT_GREATER_BAR;
            }
          // fall through
          case 221: break;
          case 85:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return WORD;
            }
          // fall through
          case 222: break;
          case 86:
            { pushState(CONDITIONAL_EXPRESSION); return LEFT_DOUBLE_BRACKET;
            }
          // fall through
          case 223: break;
          case 87:
            { popState(CONDITIONAL_EXPRESSION); return RIGHT_DOUBLE_BRACKET;
            }
          // fall through
          case 224: break;
          case 88:
            { return DO;
            }
          // fall through
          case 225: break;
          case 89:
            { popState(IF_CONDITION); return FI;
            }
          // fall through
          case 226: break;
          case 90:
            { pushState(IF_CONDITION); return IF;
            }
          // fall through
          case 227: break;
          case 91:
            { return IN;
            }
          // fall through
          case 228: break;
          case 92:
            { return PIPE_AMP;
            }
          // fall through
          case 229: break;
          case 93:
            { return OR_OR;
            }
          // fall through
          case 230: break;
          case 94:
            { if (getTokenStart() == 0) return SHEBANG; else return COMMENT;
            }
          // fall through
          case 231: break;
          case 95:
            { return NE;
            }
          // fall through
          case 232: break;
          case 96:
            { return MOD_ASSIGN;
            }
          // fall through
          case 233: break;
          case 97:
            { return BIT_AND_ASSIGN;
            }
          // fall through
          case 234: break;
          case 98:
            { return EXPONENT;
            }
          // fall through
          case 235: break;
          case 99:
            { return MULT_ASSIGN;
            }
          // fall through
          case 236: break;
          case 100:
            { return PLUS_PLUS;
            }
          // fall through
          case 237: break;
          case 101:
            { return MINUS_MINUS;
            }
          // fall through
          case 238: break;
          case 102:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 239: break;
          case 103:
            { return DIV_ASSIGN;
            }
          // fall through
          case 240: break;
          case 104:
            { return SHIFT_LEFT;
            }
          // fall through
          case 241: break;
          case 105:
            { return LE;
            }
          // fall through
          case 242: break;
          case 106:
            { return EQ;
            }
          // fall through
          case 243: break;
          case 107:
            { regexStart = getTokenEnd(); regexGroups = 0; pushState(REGULAR_EXPRESSION); return REGEXP;
            }
          // fall through
          case 244: break;
          case 108:
            { return GE;
            }
          // fall through
          case 245: break;
          case 109:
            { return BIT_XOR_ASSIGN;
            }
          // fall through
          case 246: break;
          case 110:
            { return BIT_OR_ASSIGN;
            }
          // fall through
          case 247: break;
          case 111:
            { pushState(CASE_PATTERN);    return CASE_END;
            }
          // fall through
          case 248: break;
          case 112:
            { if (yystate() == CASE_CONDITION) {pushState(CASE_PATTERN); return IN; } else return WORD;
            }
          // fall through
          case 249: break;
          case 113:
            { popState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR); return OCTAL;
            }
          // fall through
          case 250: break;
          case 114:
            { popState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR); pushState(CONDITIONAL_EXPRESSION); return LEFT_DOUBLE_BRACKET;
            }
          // fall through
          case 251: break;
          case 115:
            { return REDIRECT_AMP_GREATER_GREATER;
            }
          // fall through
          case 252: break;
          case 116:
            { return HEX;
            }
          // fall through
          case 253: break;
          case 117:
            { if (yystate() != HERE_DOC_PIPELINE)
                                    { pushState(HERE_DOC_START_MARKER); heredocWithWhiteSpaceIgnore = true; return HEREDOC_MARKER_TAG; }
                                    else return SHIFT_LEFT;
            }
          // fall through
          case 254: break;
          case 118:
            { herestringStartPosition = getTokenEnd(); pushState(HERE_STRING); return REDIRECT_HERE_STRING;
            }
          // fall through
          case 255: break;
          case 119:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return WORD;
            }
          // fall through
          case 256: break;
          case 120:
            { pushState(LET_EXPRESSION); return LET;
            }
          // fall through
          case 257: break;
          case 121:
            { return SHIFT_LEFT_ASSIGN;
            }
          // fall through
          case 258: break;
          case 122:
            { return SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 259: break;
          case 123:
            { return LET;
            }
          // fall through
          case 260: break;
          case 124:
            { popState(PARAMETER_EXPANSION_WITHOUT_SEPARATOR); return HEX;
            }
          // fall through
          case 261: break;
          case 125:
            { pushState(CASE_CONDITION); return CASE;
            }
          // fall through
          case 262: break;
          case 126:
            { popState(OTHER_CONDITIONS); return DONE;
            }
          // fall through
          case 263: break;
          case 127:
            { return ELIF;
            }
          // fall through
          case 264: break;
          case 128:
            { return ELSE;
            }
          // fall through
          case 265: break;
          case 129:
            { popState(CASE_CONDITION); return ESAC;
            }
          // fall through
          case 266: break;
          case 130:
            { pushState(EVAL_EXPRESSION); return EVAL;
            }
          // fall through
          case 267: break;
          case 131:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { pushState(OTHER_CONDITIONS); return FOR;
            }
          // fall through
          case 268: break;
          case 132:
            { pushState(TEST_EXPRESSION); return TEST;
            }
          // fall through
          case 269: break;
          case 133:
            { return THEN;
            }
          // fall through
          case 270: break;
          case 134:
            { pushState(OTHER_CONDITIONS); return UNTIL;
            }
          // fall through
          case 271: break;
          case 135:
            { pushState(OTHER_CONDITIONS); return WHILE;
            }
          // fall through
          case 272: break;
          case 136:
            { pushState(OTHER_CONDITIONS); return SELECT;
            }
          // fall through
          case 273: break;
          case 137:
            { return FUNCTION;
            }
          // fall through
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
