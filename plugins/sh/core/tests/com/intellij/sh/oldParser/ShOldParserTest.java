// Copyright 2000-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.intellij.sh.oldParser;

import com.intellij.openapi.application.PluginPathManager;
import com.intellij.sh.parser.ShParserDefinition;
import com.intellij.testFramework.ParsingTestCase;

public class ShOldParserTest extends ParsingTestCase {
  public ShOldParserTest() {
    super("oldParser", "sh", true, new ShParserDefinition());
  }

  @Override
  protected String getTestDataPath() {
    return PluginPathManager.getPluginHomePath("sh") + "/core/testData";
  }

  public void testAppendAssignment()                    { doTest(true); }
  public void testArithForCommand1()                    { doTest(true); }
  public void testArithmeticArrayRefs()                 { doTest(true); }
  public void testArithmeticComplexExpressions()        { doTest(true); }
  public void testArithmeticForLoop()                   { doTest(true); }
  public void testArithmeticForLoopVarError()           { doTest(true); }
  public void testArithmeticNumbers()                   { doTest(true); }
  public void testArithmeticParse()                     { doTest(true); }
  public void testArithmeticParseAssignments()          { doTest(true); }
  public void testArithmeticParseAssignmentsErrors()    { doTest(true); }
  public void testArithmeticParseList()                 { doTest(true); }
  public void testArithmeticParseParentheses()          { doTest(true); }
  public void testArithmeticParseSquareMode()           { doTest(true); }
  public void testArithmeticTristateOperator()          { doTest(true); }
  public void testArithmeticVarAssignment()             { doTest(true); }
  public void testArrayAssignment()                     { doTest(true); }
  public void testArrayVar()                            { doTest(true); }
  public void testAssigmentCommands()                   { doTest(true); }
  public void testBackquoteCommand()                    { doTest(true); }
  public void testBackquoteCommandErrors()              { doTest(true); }
  public void testBacktickParsing()                     { doTest(true); }
  public void testBodyWithErrors()                      { doTest(true); }
  public void testBuildInCommandDeclare()               { doTest(true); }
  public void testCaseSimple1()                         { doTest(true); }
  public void testCheckErrorMarkers()                   { doTest(true); }
  public void testCommandParseAssignment()              { doTest(true); }
  public void testCommandWithErrors()                   { doTest(true); }
  public void testComplicatedHereDoc()                  { doTest(true); }
  public void testComplicatedHereDocs()                 { doTest(true); }
  public void testComposedCommand()                     { doTest(true); }
  public void testComposedDefaultValue()                { doTest(true); }
  public void testConditionalAdvancedExpressions()      { doTest(true); }
  public void testConditionalSingleTest()               { doTest(true); }
  public void testConditionalWithBackquote()            { doTest(true); }
  public void testDeclareParse()                        { doTest(true); }
  public void testDollarCommand()                       { doTest(true); }
  public void testEchoWithUmlauts()                     { doTest(true); }
  public void testEmbeddedVars()                        { doTest(true); }
  public void testEmptyArithmeticExpression()           { doTest(true); }
  public void testEvalParse()                           { doTest(true); }
  public void testExportParse()                         { doTest(true); }
  public void testFileParsing3()                        { doTest(true); }
  public void testFileParsing4()                        { doTest(true); }
  public void testForCommand()                          { doTest(true); }
  public void testForLoopCompoundBlock()                { doTest(true); }
  public void testFunction()                            { doTest(true); }
  public void testFunction2()                           { doTest(true); }
  public void testFunctionDefinition()                  { doTest(true); }
  public void testFunctionWithReadArgs()                { doTest(true); }
  public void testGetoptsBuiltin()                      { doTest(true); }
  public void testGetoptsIsValid()                      { doTest(true); }
  public void testHereDocMarkerExclamation()            { doTest(true); }
  public void testHereDocVar()                          { doTest(true); }
  public void testHereStrings()                         { doTest(true); }
  public void testHereWhitespacePrefix()                { doTest(true); }
  public void testHeredocInLoop()                       { doTest(true); }
  public void testHeredocTwice()                        { doTest(true); }
  public void testIfExpression()                        { doTest(true); }
  public void testIfCommand1()                          { doTest(true); }
  public void testIfCommand2()                          { doTest(true); }
  public void testIfCommand3()                          { doTest(true); }
  public void testIfCommand4()                          { doTest(true); }
  public void testIfParse()                             { doTest(true); }
  public void testIfWithFaultyRedirect()                { doTest(true); }
  public void testIfWithLocalVarRedirect()              { doTest(true); }
  public void testIfWithNormalRedirect()                { doTest(true); }
  public void testIfWithReadRedirect()                  { doTest(true); }
  public void testIncludeCommandParseErrors()           { doTest(true); }
  public void testIncludeCommandParseSimpleDot()        { doTest(true); }
  public void testIncludeCommandParseSimpleSource()     { doTest(true); }
  public void testIntegration1()                        { doTest(true); }
  public void testIntegration10()                       { doTest(true); }
  public void testIntegration11()                       { doTest(true); }
  public void testIntegration12()                       { doTest(true); }
  public void testIntegration13()                       { doTest(true); }
  public void testIntegration14()                       { doTest(true); }
  public void testIntegration15()                       { doTest(true); }
  public void testIntegration16()                       { doTest(true); }
  public void testIntegration2()                        { doTest(true); }
  public void testIntegration3()                        { doTest(true); }
  public void testIntegration4()                        { doTest(true); }
  public void testIntegration5()                        { doTest(true); }
  public void testIntegration6()                        { doTest(true); }
  public void testIntegration7()                        { doTest(true); }
  public void testIntegration8()                        { doTest(true); }
  public void testIntegration9()                        { doTest(true); }
  public void testInvalidHereDoc()                      { doTest(true); }
  public void testIsBackquoteCommand()                  { doTest(true); }
  public void testIssue118()                            { doTest(true); }
  public void testIssue125()                            { doTest(true); }
  public void testIssue201()                            { doTest(true); }
  public void testIssue243()                            { doTest(true); }
  public void testIssue265()                            { doTest(true); }
  public void testIssue272()                            { doTest(true); }
  public void testIssue302()                            { doTest(true); }
  public void testIssue312()                            { doTest(true); }
  public void testIssue320()                            { doTest(true); }
  public void testIssue329()                            { doTest(true); }
  public void testIssue330()                            { doTest(true); }
  public void testIssue333()                            { doTest(true); }
  public void testIssue341()                            { doTest(true); }
  public void testIssue350()                            { doTest(true); }
  public void testIssue351()                            { doTest(true); }
  public void testIssue389()                            { doTest(true); }
  public void testIssue393()                            { doTest(true); }
  public void testIssue401()                            { doTest(true); }
  public void testIssue431()                            { doTest(true); }
  public void testIssue432()                            { doTest(true); }
  public void testIssue458()                            { doTest(true); }
  public void testIssue474()                            { doTest(true); }
  public void testIssue515()                            { doTest(true); }
  public void testIssue657()                            { doTest(true); }
  public void testIssue89()                             { doTest(true); }
  public void testIssue244()                            { doTest(true); }
  public void testIssue367()                            { doTest(true); }
  public void testIssue412()                            { doTest(true); }
  public void testIssue460()                            { doTest(true); }
  public void testLetParse()                            { doTest(true); }
  public void testLocalParsing()                        { doTest(true); }
  public void testLocalParsingEmbedded()                { doTest(true); }
  public void testMapfileParse()                        { doTest(true); }
  public void testMultiwordPattern()                    { doTest(true); }
  public void testNegationOperator()                    { doTest(true); }
  public void testNestedIf()                            { doTest(true); }
  public void testNestedInIf()                          { doTest(true); }
  public void testNestedStatements()                    { doTest(true); }
  public void testNewlinesAfterCommand()                { doTest(true); }
  public void testParameterExpansionParse()             { doTest(true); }
  public void testParse1()                              { doTest(true); }
  public void testParse2()                              { doTest(true); }
  public void testParse3()                              { doTest(true); }
  public void testParse4()                              { doTest(true); }
  public void testParseAdvanced()                       { doTest(true); }
  public void testParseArithmeticCommand1()             { doTest(true); }
  public void testParseArrayAssignment()                { doTest(true); }
  public void testParseArrayVarAssign()                 { doTest(true); }
  public void testParseArrayVarRef()                    { doTest(true); }
  public void testParseAssignment()                     { doTest(true); }
  public void testParseAssignment1()                    { doTest(true); }
  public void testParseCombinedCommand()                { doTest(true); }
  public void testParseCompoundList()                   { doTest(true); }
  public void testParseCompoundList0()                  { doTest(true); }
  public void testParseCompoundList1()                  { doTest(true); }
  public void testParseCompoundList2()                  { doTest(true); }
  public void testParseCompoundList3()                  { doTest(true); }
  public void testParseCompoundList5()                  { doTest(true); }
  public void testParseCompoundList6()                  { doTest(true); }
  public void testParseEmbeddedVar()                    { doTest(true); }
  public void testParseError1()                         { doTest(true); }
  public void testParseGroupCommand()                   { doTest(true); }
  public void testParseInvalidLengthExpansion()         { doTest(true); }
  public void testParseLengthExpansion()                { doTest(true); }
  public void testParseList1Complex1()                  { doTest(true); }
  public void testParseList1Error1()                    { doTest(true); }
  public void testParseList1SimpleWithNewlines()        { doTest(true); }
  public void testParsePipelineCommand2()               { doTest(true); }
  public void testParsePipelineCommand3()               { doTest(true); }
  public void testParsePipelineCommand4()               { doTest(true); }
  public void testPiplelineParse()                      { doTest(true); }
  public void testParseReplace()                        { doTest(true); }
  public void testParseSimpleCommand2()                 { doTest(true); }
  public void testParseSimpleCommandCombined()          { doTest(true); }
  public void testParseSimpleCommandCombined3()         { doTest(true); }
  public void testParseSimpleCommandCombinedError()     { doTest(true); }
  public void testParseSimpleList1()                    { doTest(true); }
  public void testParseSimpleList2()                    { doTest(true); }
  public void testParseSimpleList3()                    { doTest(true); }
  public void testParseSimpleListError1()               { doTest(true); }
  public void testParseSubstitution()                   { doTest(true); }
  public void testParseSubstitution2()                  { doTest(true); }
  public void testParseWord2()                          { doTest(true); }
  public void testParsingArrayVar()                     { doTest(true); }
  public void testPipelineWithConditional()             { doTest(true); }
  public void testPrintfNoVar()                         { doTest(true); }
  public void testPrintfVarDef()                        { doTest(true); }
  public void testProcessSubstitution()                 { doTest(true); }
  public void testRedirectionProcessSubstitution()      { doTest(true); }
  public void testReadIsValid()                         { doTest(true); }
  public void testReadarrayParse()                      { doTest(true); }
  public void testRedirectErrors()                      { doTest(true); }
  public void testRedirectWithArithmeticCommand()       { doTest(true); }
  public void testRedirects()                           { doTest(true); }
  public void testRegExp()                              { doTest(true); }
  public void testSelectCommand1()                      { doTest(true); }
  public void testSelectLoop()                          { doTest(true); }
  public void testShebang()                             { doTest(true); }
  public void testSimpleHereDocs()                      { doTest(true); }
  public void testSimpleListParsing()                   { doTest(true); }
  public void testSpecialVars()                         { doTest(true); }
  public void testSquareArithmetic()                    { doTest(true); }
  public void testSubshell()                            { doTest(true); }
  public void testSubshellCommand1()                    { doTest(true); }
  public void testTrapParse()                           { doTest(true); }
  public void testTypesetParse()                        { doTest(true); }
  public void testUnsetArrayAssignment()                { doTest(true); }
  public void testUntilParse()                          { doTest(true); }
  public void testVariableArrayParsing()                { doTest(true); }
  public void testVariableDollar()                      { doTest(true); }
  public void testVariableParsing()                     { doTest(true); }
  public void testWhileLoopSimple()                     { doTest(true); }
  public void testWhileLoopSimple2()                    { doTest(true); }
  public void testWhileParse()                          { doTest(true); }
  public void testIfCommandError1()                     { doTest(true); }
  public void testIfCommandError2()                     { doTest(true); }
  public void testIfErrorConstruct()                    { doTest(true); }
  public void testIfIncompleteParse()                   { doTest(true); }
  public void testSelectIncompleteParse()               { doTest(true); }
  public void testWhileErrorConstruct()                 { doTest(true); }
  public void testWhileIncompleteParse()                { doTest(true); }
  public void testWhileLoopError1()                     { doTest(true); }
  public void testUntilIncompleteParse()                { doTest(true); }
  public void testCaseError1()                          { doTest(true); }
  public void testCaseError2()                          { doTest(true); }
  public void testForIncompleteParse()                  { doTest(true); }
  public void testFunctionDefError()                    { doTest(true); }
  public void testParseSimpleCommandAssignment1()       { doTest(true); }
  public void testConditionalError()                    { doTest(true); }
  public void testParseGroupCommandError()              { doTest(true); }
  public void testSelectErrors()                        { doTest(true); }
  public void testForCommandError1()                    { doTest(true); }
  public void testForErrors()                           { doTest(true); }
}
