// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: IJPerf.flex

package com.jetbrains.performanceScripts.lang.lexer;

import com.jetbrains.performanceScripts.lang.psi.IJPerfElementTypes;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;


class IJPerfLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_INPUT = 2;
  public static final int WAITING_TEXT = 4;
  public static final int WAITING_LAST_OPTION = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\2\u0100\1\u1b00\1\u1c00"+
    "\1\u1d00\12\u1e00\1\u1f00\1\u2000\1\u2100\1\u1e00\1\u2200\1\u2300"+
    "\2\u1e00\31\u0100\1\u2400\126\u0100\1\u2500\1\u0100\1\u2600\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\53\u0100\1\u2c00\41\u1e00\1\u0100"+
    "\1\u2d00\1\u2e00\1\u0100\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u0100\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u1e00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\3\u0100\1\u5000"+
    "\1\u5100\1\u5200\11\u1e00\1\u5300\4\u0100\1\u5400\17\u1e00\2\u0100"+
    "\1\u5500\41\u1e00\2\u0100\1\u5600\1\u5700\2\u1e00\1\u5800\1\u5900"+
    "\27\u0100\1\u5a00\4\u0100\1\u5b00\1\u5c00\41\u1e00\1\u5d00\1\u0100"+
    "\1\u5e00\1\u5f00\11\u1e00\1\u6000\22\u1e00\1\u6100\1\u1e00\1\u6200"+
    "\1\u6300\1\u1e00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1e00\1\u6800"+
    "\4\u1e00\1\u6900\1\u6a00\1\u6b00\1\u6c00\1\u1e00\1\u6d00\2\u1e00"+
    "\1\u6e00\1\u6f00\1\u7000\2\u1e00\1\u7100\1\u1e00\1\u7200\14\u1e00"+
    "\1\u7300\4\u1e00\246\u0100\1\u7400\20\u0100\1\u7500\1\u7600\25\u0100"+
    "\1\u7700\34\u0100\1\u7800\14\u1e00\2\u0100\1\u7900\5\u1e00\23\u0100"+
    "\1\u7a00\17\u0100\1\u7b00\u0adc\u1e00\1\u7c00\1\u7d00\u02fe\u1e00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\6\1\0\1\10\6\6\1\11"+
    "\1\12\1\13\1\14\12\15\1\16\2\6\1\17\3\6"+
    "\32\0\1\6\1\20\2\6\1\0\1\6\32\0\1\6"+
    "\1\21\2\6\6\0\1\22\32\0\2\6\4\0\4\6"+
    "\1\0\2\6\1\0\7\6\1\0\4\6\1\0\5\6"+
    "\27\0\1\6\37\0\1\6\u01ca\0\4\6\14\0\16\6"+
    "\5\0\7\6\1\0\1\6\1\0\21\6\165\0\1\6"+
    "\2\0\2\6\4\0\1\6\1\0\6\6\1\0\1\6"+
    "\3\0\1\6\1\0\1\6\24\0\1\6\123\0\1\6"+
    "\213\0\1\6\5\0\2\6\246\0\1\6\46\0\2\6"+
    "\1\0\6\6\51\0\6\6\1\0\1\6\55\0\1\6"+
    "\1\0\1\6\2\0\1\6\2\0\1\6\1\0\10\6"+
    "\33\0\4\6\4\0\15\6\6\0\5\6\1\0\4\6"+
    "\13\0\1\6\1\0\3\6\100\0\12\15\4\6\146\0"+
    "\1\6\11\0\1\6\12\0\1\6\6\0\12\15\3\0"+
    "\2\6\1\0\17\6\74\0\2\6\145\0\16\6\12\15"+
    "\54\0\4\6\1\0\2\6\61\0\22\6\34\0\4\6"+
    "\13\0\5\6\30\0\1\6\6\0\1\6\2\0\6\6"+
    "\314\0\2\6\12\15\1\6\23\0\1\6\10\0\2\6"+
    "\2\0\2\6\26\0\1\6\7\0\1\6\1\0\3\6"+
    "\4\0\2\6\11\0\2\6\2\0\2\6\4\0\10\6"+
    "\1\0\4\6\2\0\1\6\5\0\2\6\12\15\4\0"+
    "\7\6\2\0\1\6\1\0\2\6\3\0\1\6\6\0"+
    "\4\6\2\0\2\6\26\0\1\6\7\0\1\6\2\0"+
    "\1\6\2\0\1\6\2\0\2\6\1\0\1\6\5\0"+
    "\4\6\2\0\2\6\3\0\3\6\1\0\7\6\4\0"+
    "\1\6\1\0\7\6\12\15\6\0\13\6\3\0\1\6"+
    "\11\0\1\6\3\0\1\6\26\0\1\6\7\0\1\6"+
    "\2\0\1\6\5\0\2\6\12\0\1\6\3\0\1\6"+
    "\3\0\2\6\1\0\17\6\4\0\2\6\12\15\1\6"+
    "\1\0\7\6\7\0\1\6\3\0\1\6\10\0\2\6"+
    "\2\0\2\6\26\0\1\6\7\0\1\6\2\0\1\6"+
    "\5\0\2\6\11\0\2\6\2\0\2\6\3\0\7\6"+
    "\3\0\4\6\2\0\1\6\5\0\2\6\12\15\1\6"+
    "\1\0\20\6\2\0\1\6\6\0\3\6\3\0\1\6"+
    "\4\0\3\6\2\0\1\6\1\0\1\6\2\0\3\6"+
    "\2\0\3\6\3\0\3\6\14\0\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\0\6\6\1\0\16\6"+
    "\12\15\11\6\1\0\6\6\15\0\1\6\3\0\1\6"+
    "\27\0\1\6\20\0\2\6\11\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\1\6\3\0\2\6\1\0\2\6"+
    "\4\0\2\6\12\15\20\6\4\0\1\6\10\0\1\6"+
    "\3\0\1\6\27\0\1\6\12\0\1\6\5\0\2\6"+
    "\11\0\1\6\3\0\1\6\4\0\7\6\2\0\6\6"+
    "\2\0\1\6\4\0\2\6\12\15\1\6\3\0\14\6"+
    "\15\0\1\6\3\0\1\6\63\0\1\6\3\0\1\6"+
    "\5\0\5\6\4\0\7\6\5\0\2\6\12\15\12\6"+
    "\6\0\1\6\3\0\1\6\22\0\3\6\30\0\1\6"+
    "\11\0\1\6\1\0\2\6\7\0\3\6\1\0\4\6"+
    "\6\0\1\6\1\0\1\6\10\0\6\6\12\15\2\6"+
    "\2\0\15\6\72\0\4\6\20\0\1\6\12\15\47\6"+
    "\2\0\1\6\1\0\1\6\5\0\1\6\30\0\1\6"+
    "\1\0\1\6\27\0\2\6\5\0\1\6\1\0\1\6"+
    "\7\0\1\6\12\15\2\6\4\0\40\6\1\0\27\6"+
    "\2\0\6\6\12\15\13\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\12\0\1\6\44\0\4\6\24\0\1\6"+
    "\22\0\1\6\44\0\11\6\1\0\71\6\100\0\12\15"+
    "\6\6\100\0\12\15\4\0\2\6\46\0\1\6\1\0"+
    "\5\6\1\0\2\6\53\0\1\6\115\0\1\6\4\0"+
    "\2\6\7\0\1\6\1\0\1\6\4\0\2\6\51\0"+
    "\1\6\4\0\2\6\41\0\1\6\4\0\2\6\7\0"+
    "\1\6\1\0\1\6\4\0\2\6\17\0\1\6\71\0"+
    "\1\6\4\0\2\6\103\0\2\6\3\0\40\6\20\0"+
    "\20\6\126\0\2\6\6\0\3\6\u016c\0\2\6\21\0"+
    "\1\6\32\0\5\6\113\0\3\6\13\0\7\6\26\0"+
    "\11\6\26\0\13\6\24\0\14\6\15\0\1\6\3\0"+
    "\1\6\2\0\14\6\124\0\3\6\1\0\3\6\3\0"+
    "\2\6\12\15\41\6\5\0\12\15\6\6\131\0\7\6"+
    "\53\0\5\6\106\0\12\6\37\0\1\6\14\0\4\6"+
    "\14\0\12\6\12\15\36\0\2\6\5\0\13\6\54\0"+
    "\4\6\32\0\6\6\12\15\46\6\34\0\4\6\77\0"+
    "\1\6\35\0\2\6\1\0\12\15\6\6\12\15\15\6"+
    "\1\0\10\6\16\0\1\6\20\0\61\6\115\0\3\6"+
    "\12\15\21\6\11\0\14\6\60\0\12\15\72\0\14\6"+
    "\70\0\10\6\12\15\3\6\3\0\12\15\44\0\2\6"+
    "\11\0\7\6\53\0\2\6\3\0\20\6\3\0\1\6"+
    "\47\0\5\6\26\0\2\6\6\0\2\6\46\0\2\6"+
    "\6\0\2\6\10\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\37\0\2\6\65\0\1\6\7\0\1\6"+
    "\1\0\3\6\3\0\1\6\7\0\3\6\4\0\2\6"+
    "\6\0\4\6\15\0\5\6\3\0\1\6\7\0\16\6"+
    "\5\0\30\6\2\3\5\0\20\6\2\0\23\6\1\0"+
    "\13\6\5\0\1\6\12\0\1\6\1\0\15\6\1\0"+
    "\20\6\15\0\3\6\41\0\17\6\15\0\4\6\1\0"+
    "\3\6\14\0\21\6\1\0\4\6\1\0\2\6\12\0"+
    "\1\6\1\0\3\6\5\0\6\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\6\13\0\2\6\4\0"+
    "\5\6\5\0\4\6\1\0\21\6\51\0\u0177\6\345\0"+
    "\6\6\11\0\14\6\46\0\1\6\1\0\5\6\1\0"+
    "\2\6\70\0\7\6\1\0\17\6\30\0\11\6\7\0"+
    "\1\6\7\0\1\6\7\0\1\6\7\0\1\6\7\0"+
    "\1\6\7\0\1\6\7\0\1\6\7\0\1\6\40\0"+
    "\57\6\1\0\325\6\3\0\31\6\17\0\1\6\5\0"+
    "\2\6\5\0\4\6\126\0\2\6\2\0\2\6\3\0"+
    "\1\6\132\0\1\6\4\0\5\6\53\0\1\6\136\0"+
    "\21\6\40\0\60\6\320\0\100\6\215\0\103\6\56\0"+
    "\2\6\15\0\3\6\20\0\12\15\2\0\24\6\60\0"+
    "\4\6\12\0\1\6\163\0\45\6\11\0\2\6\147\0"+
    "\2\6\100\0\5\6\2\0\1\6\1\0\1\6\5\0"+
    "\30\6\66\0\4\6\1\0\13\6\1\0\7\6\64\0"+
    "\14\6\106\0\12\6\12\15\6\6\30\0\3\6\1\0"+
    "\1\6\3\0\12\15\44\0\2\6\44\0\14\6\35\0"+
    "\3\6\101\0\16\6\1\0\12\15\6\6\20\0\12\15"+
    "\5\0\1\6\67\0\11\6\16\0\2\6\12\15\6\6"+
    "\27\0\3\6\111\0\30\6\3\0\2\6\20\0\2\6"+
    "\5\0\12\6\6\0\2\6\6\0\2\6\6\0\11\6"+
    "\7\0\1\6\7\0\1\6\53\0\1\6\16\0\6\6"+
    "\173\0\1\6\2\0\2\6\12\15\6\6\244\0\14\6"+
    "\27\0\4\6\61\0\4\6\156\0\2\6\152\0\46\6"+
    "\7\0\14\6\5\0\5\6\14\0\1\6\15\0\1\6"+
    "\5\0\1\6\1\0\1\6\2\0\1\6\2\0\1\6"+
    "\154\0\41\6\153\0\22\6\100\0\2\6\66\0\50\6"+
    "\15\0\3\6\20\0\20\6\20\0\3\6\2\0\30\6"+
    "\3\0\31\6\1\0\6\6\5\0\1\6\207\0\2\6"+
    "\1\0\4\6\1\0\13\6\12\15\7\6\32\0\4\6"+
    "\1\0\1\6\32\0\13\6\131\0\3\6\6\0\2\6"+
    "\6\0\2\6\6\0\2\6\3\0\3\6\2\0\3\6"+
    "\2\0\22\6\3\0\4\6\14\0\1\6\32\0\1\6"+
    "\23\0\1\6\2\0\1\6\17\0\2\6\16\0\42\6"+
    "\173\0\105\6\65\0\210\6\1\0\202\6\35\0\3\6"+
    "\61\0\17\6\1\0\37\6\40\0\15\6\36\0\5\6"+
    "\53\0\5\6\36\0\2\6\44\0\4\6\10\0\1\6"+
    "\5\0\52\6\236\0\2\6\12\15\6\6\44\0\4\6"+
    "\44\0\4\6\50\0\10\6\64\0\14\6\13\0\1\6"+
    "\17\0\1\6\7\0\1\6\2\0\1\6\13\0\1\6"+
    "\17\0\1\6\7\0\1\6\2\0\103\6\67\0\11\6"+
    "\26\0\12\6\10\0\30\6\6\0\1\6\52\0\1\6"+
    "\11\0\105\6\6\0\2\6\1\0\1\6\54\0\1\6"+
    "\2\0\3\6\1\0\2\6\27\0\12\6\27\0\11\6"+
    "\37\0\101\6\23\0\1\6\2\0\12\6\26\0\12\6"+
    "\32\0\106\6\70\0\6\6\2\0\100\6\4\0\1\6"+
    "\2\0\5\6\10\0\1\6\3\0\1\6\35\0\2\6"+
    "\3\0\4\6\1\0\40\6\35\0\3\6\35\0\43\6"+
    "\10\0\1\6\36\0\31\6\66\0\12\6\26\0\12\6"+
    "\23\0\15\6\22\0\156\6\111\0\67\6\63\0\15\6"+
    "\63\0\15\6\50\0\10\6\12\15\u0146\6\52\0\1\6"+
    "\2\0\3\6\2\0\113\6\40\0\12\6\1\0\10\6"+
    "\41\0\37\6\26\0\52\6\25\0\33\6\27\0\11\6"+
    "\107\0\37\6\12\15\6\0\11\6\74\0\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\2\6\31\0\7\6\12\15"+
    "\6\6\65\0\1\6\12\15\4\6\4\0\10\6\44\0"+
    "\2\6\1\0\11\6\105\0\4\6\4\0\1\6\2\0"+
    "\12\15\1\0\1\6\1\0\43\6\22\0\1\6\45\0"+
    "\6\6\4\0\76\6\7\0\1\6\1\0\1\6\4\0"+
    "\1\6\17\0\1\6\12\0\7\6\73\0\5\6\12\15"+
    "\6\6\4\0\1\6\10\0\2\6\2\0\2\6\26\0"+
    "\1\6\7\0\1\6\2\0\1\6\5\0\1\6\12\0"+
    "\2\6\2\0\2\6\3\0\2\6\1\0\6\6\1\0"+
    "\5\6\7\0\2\6\7\0\3\6\5\0\213\6\113\0"+
    "\5\6\12\15\4\6\4\0\36\6\106\0\1\6\1\0"+
    "\10\6\12\15\246\6\66\0\2\6\11\0\27\6\6\0"+
    "\42\6\101\0\3\6\1\0\13\6\12\15\46\6\71\0"+
    "\7\6\12\15\66\6\33\0\2\6\17\0\4\6\12\15"+
    "\6\6\7\0\271\6\73\0\145\6\100\0\12\15\25\6"+
    "\10\0\2\6\1\0\2\6\10\0\1\6\2\0\1\6"+
    "\36\0\1\6\2\0\2\6\11\0\14\6\12\0\106\6"+
    "\10\0\2\6\56\0\2\6\10\0\1\6\2\0\33\6"+
    "\77\0\10\6\1\0\10\6\112\0\3\6\1\0\22\6"+
    "\111\0\7\6\11\0\1\6\55\0\1\6\11\0\17\6"+
    "\12\15\30\6\36\0\2\6\26\0\1\6\16\0\111\6"+
    "\7\0\1\6\2\0\1\6\54\0\3\6\1\0\1\6"+
    "\2\0\1\6\11\0\10\6\12\15\6\6\6\0\1\6"+
    "\2\0\1\6\45\0\1\6\2\0\1\6\6\0\7\6"+
    "\12\15\u0136\6\27\0\11\6\21\0\1\6\51\0\3\6"+
    "\5\0\15\6\12\0\126\6\1\0\54\6\4\0\37\6"+
    "\232\0\146\6\157\0\21\6\304\0\u014c\6\141\0\17\6"+
    "\126\0\252\6\107\0\271\6\71\0\7\6\37\0\1\6"+
    "\12\15\6\6\117\0\1\6\12\0\6\6\36\0\2\6"+
    "\5\0\13\6\67\0\11\6\4\0\14\6\12\15\11\6"+
    "\25\0\5\6\23\0\260\6\100\0\200\6\113\0\4\6"+
    "\71\0\7\6\21\0\100\6\2\0\1\6\2\0\13\6"+
    "\2\0\16\6\370\0\10\6\326\0\52\6\11\0\u01e7\6"+
    "\4\0\1\6\7\0\1\6\2\0\1\6\43\0\17\6"+
    "\1\0\35\6\3\0\2\6\1\0\16\6\4\0\10\6"+
    "\u018c\0\4\6\153\0\5\6\15\0\3\6\11\0\7\6"+
    "\12\0\3\6\2\0\1\6\4\0\134\6\56\0\2\6"+
    "\27\0\u011e\6\5\0\3\6\26\0\2\6\7\0\36\6"+
    "\4\0\224\6\3\0\273\6\125\0\1\6\107\0\1\6"+
    "\2\0\2\6\1\0\2\6\2\0\2\6\4\0\1\6"+
    "\14\0\1\6\1\0\1\6\7\0\1\6\101\0\1\6"+
    "\4\0\2\6\10\0\1\6\7\0\1\6\34\0\1\6"+
    "\4\0\1\6\5\0\1\6\1\0\3\6\7\0\1\6"+
    "\u0154\0\2\6\31\0\1\6\31\0\1\6\37\0\1\6"+
    "\31\0\1\6\37\0\1\6\31\0\1\6\37\0\1\6"+
    "\31\0\1\6\37\0\1\6\31\0\1\6\10\0\2\6"+
    "\62\15\67\0\4\6\62\0\10\6\1\0\16\6\1\0"+
    "\26\6\5\0\1\6\17\0\120\6\37\0\6\6\6\0"+
    "\325\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\5\6\76\0\41\6\1\0\160\6\55\0"+
    "\3\6\16\0\2\6\12\15\4\6\1\0\u0141\6\37\0"+
    "\21\6\60\0\12\15\5\6\1\0\320\6\52\0\346\6"+
    "\7\0\1\6\4\0\1\6\2\0\1\6\17\0\1\6"+
    "\305\0\13\6\7\0\51\6\114\0\4\6\12\15\u0156\6"+
    "\1\0\117\6\4\0\1\6\33\0\1\6\2\0\1\6"+
    "\1\0\2\6\1\0\1\6\12\0\1\6\4\0\1\6"+
    "\1\0\1\6\1\0\6\6\1\0\4\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\6\2\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\1\0\2\6"+
    "\4\0\1\6\7\0\1\6\4\0\1\6\4\0\1\6"+
    "\1\0\1\6\12\0\1\6\21\0\5\6\3\0\1\6"+
    "\5\0\1\6\21\0\u0134\6\12\0\6\6\340\0\40\6"+
    "\72\0\6\6\336\0\2\6\u0182\0\16\6\u0131\0\37\6"+
    "\36\0\342\6\113\0\5\6\u0160\0\121\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32256];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\2\3\1\4\1\5\1\2"+
    "\1\4\1\3\1\4\1\6\1\7\1\2\2\10\1\11"+
    "\1\4\1\11\1\12\1\13\1\4\1\0\1\4\1\6"+
    "\1\0\1\4\4\0\1\4\2\2\1\14\2\4\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\23\0\46\0\71\0\114\0\137\0\162\0\205"+
    "\0\230\0\253\0\276\0\321\0\344\0\367\0\u010a\0\u011d"+
    "\0\u0130\0\u0143\0\u0156\0\46\0\u0169\0\u017c\0\205\0\205"+
    "\0\205\0\u018f\0\u01a2\0\u01b5\0\u01c8\0\u01db\0\321\0\u01ee"+
    "\0\u0201\0\u0214\0\367\0\u0143\0\u017c\0\u018f\0\u0227\0\u023a"+
    "\0\u024d\0\u0260\0\u0273\0\u0286";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\6\1\7\1\5\1\10\1\11"+
    "\1\10\2\5\6\10\1\7\1\12\1\13\1\6\1\14"+
    "\1\6\1\14\1\15\1\16\2\10\2\17\1\20\1\21"+
    "\2\10\1\20\1\10\1\22\1\23\1\24\1\6\3\24"+
    "\14\23\1\24\1\12\1\25\1\6\1\26\1\6\1\26"+
    "\1\15\1\16\1\10\1\27\2\17\1\20\1\21\1\10"+
    "\1\30\1\20\1\31\1\32\1\5\2\0\1\5\1\0"+
    "\3\5\2\0\1\5\2\0\1\5\4\0\1\5\1\0"+
    "\5\6\14\0\1\6\1\5\2\6\1\7\1\6\1\7"+
    "\2\5\2\0\1\5\2\0\1\5\4\0\1\7\23\0"+
    "\1\5\2\0\1\5\1\0\2\5\1\0\1\33\1\0"+
    "\2\5\6\0\1\5\1\12\2\0\1\15\1\0\2\15"+
    "\1\34\2\0\1\17\1\20\1\35\1\12\1\36\1\0"+
    "\1\35\1\0\1\12\1\0\1\13\4\6\14\0\1\6"+
    "\1\15\2\6\1\37\1\6\1\37\2\15\2\0\1\15"+
    "\2\0\1\15\4\0\1\37\1\15\2\0\1\15\1\0"+
    "\3\15\2\0\1\15\2\0\1\15\4\0\1\15\1\40"+
    "\1\41\10\0\3\41\1\40\2\0\1\42\1\0\1\40"+
    "\1\12\2\0\1\15\1\0\2\15\1\34\2\0\1\17"+
    "\2\20\1\12\2\0\1\20\1\0\1\12\1\35\6\0"+
    "\1\43\2\0\3\20\1\35\2\0\1\20\1\0\2\35"+
    "\6\0\1\43\2\0\2\20\1\35\1\21\1\36\1\0"+
    "\1\35\1\0\1\35\1\12\2\6\1\37\1\6\1\37"+
    "\1\15\1\34\2\0\1\17\1\20\1\35\1\12\1\36"+
    "\1\0\1\35\1\0\1\44\2\23\1\0\20\23\1\0"+
    "\1\25\4\6\14\0\1\6\1\15\2\6\1\45\1\6"+
    "\1\45\2\15\2\0\1\15\2\0\1\15\4\0\1\45"+
    "\1\12\2\6\1\45\1\6\1\45\1\15\1\34\2\0"+
    "\1\17\1\20\1\35\1\12\1\36\1\0\1\35\1\0"+
    "\1\46\1\5\2\0\1\5\1\0\2\5\3\0\2\5"+
    "\3\0\1\47\2\0\1\5\1\50\1\41\1\0\1\15"+
    "\1\0\3\15\2\0\1\51\2\41\1\50\2\0\1\42"+
    "\1\0\1\50\1\35\6\0\1\43\2\0\2\20\2\35"+
    "\1\36\1\0\1\35\1\0\1\35\1\20\11\0\2\20"+
    "\1\35\1\20\1\36\1\0\1\35\1\0\1\20\1\40"+
    "\1\41\5\0\1\20\2\0\2\41\1\52\1\40\1\53"+
    "\1\0\1\52\1\0\1\40\2\41\5\0\1\20\2\0"+
    "\4\41\2\0\1\41\1\0\3\41\5\0\1\20\2\0"+
    "\4\41\2\0\1\54\1\0\1\41\2\47\1\0\2\47"+
    "\1\0\15\47\1\50\1\41\1\0\1\15\1\0\2\15"+
    "\1\17\2\0\1\51\1\41\1\52\1\50\1\53\1\0"+
    "\1\52\1\0\1\50\1\51\1\41\1\0\1\15\1\0"+
    "\2\15\1\17\2\0\1\51\2\41\1\51\2\0\1\41"+
    "\1\0\1\51\2\41\5\0\1\20\2\0\2\41\1\52"+
    "\1\41\1\53\1\0\1\52\1\0\3\41\10\0\2\41"+
    "\1\52\1\41\1\53\1\0\1\52\1\0\1\41\1\40"+
    "\1\41\5\0\1\20\2\0\3\41\1\40\2\0\1\41"+
    "\1\0\1\40";

  private static int [] zzUnpacktrans() {
    int [] result = new int[665];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\3\1\1\11\16\1\3\11\1\1\1\0\2\1"+
    "\1\0\1\1\4\0\6\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  IJPerfLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(WAITING_INPUT); return IJPerfElementTypes.COMMAND;
            }
          // fall through
          case 13: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 14: break;
          case 3:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 15: break;
          case 4:
            { yybegin(WAITING_LAST_OPTION); return IJPerfElementTypes.IDENTIFIER;
            }
          // fall through
          case 16: break;
          case 5:
            { yybegin(WAITING_LAST_OPTION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 17: break;
          case 6:
            { yybegin(WAITING_LAST_OPTION); return IJPerfElementTypes.FILE_PATH;
            }
          // fall through
          case 18: break;
          case 7:
            { yybegin(WAITING_LAST_OPTION); return IJPerfElementTypes.NUMBER;
            }
          // fall through
          case 19: break;
          case 8:
            { yybegin(YYINITIAL); return IJPerfElementTypes.TEXT;
            }
          // fall through
          case 20: break;
          case 9:
            { yybegin(WAITING_LAST_OPTION); return IJPerfElementTypes.OPTIONS_SEPARATOR;
            }
          // fall through
          case 21: break;
          case 10:
            { yybegin(WAITING_LAST_OPTION); return IJPerfElementTypes.ASSIGNMENT_OPERATOR;
            }
          // fall through
          case 22: break;
          case 11:
            { yybegin(WAITING_TEXT); return IJPerfElementTypes.PIPE;
            }
          // fall through
          case 23: break;
          case 12:
            { yybegin(YYINITIAL); return IJPerfElementTypes.COMMENT;
            }
          // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
