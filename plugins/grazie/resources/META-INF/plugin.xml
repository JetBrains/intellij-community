<idea-plugin package="com.intellij.grazie" allow-bundled-update="true">
  <id>tanvd.grazi</id>
  <name>Natural Languages</name>
  <vendor>JetBrains</vendor>
  <category>Languages</category>

  <incompatible-with>com.intellij.jetbrains.client</incompatible-with>

  <description><![CDATA[
    <p>Intelligent spelling and grammar checks for any text you write in the IDE.</p>
    <ul>
      <li>
        Supports over 20 languages, including English, German, Russian, and Chinese.
        English is enabled by default.
        To add other languages, open <b>Settings/Preferences | Editor | Natural Languages</b>.
      </li>
      <li>
        Works with natural languages in programming language constructs (Python, Java, and others),
        markup languages (Markdown, HTML, XML, and others), comments, and commit messages.
      </li>
      <li>Uses <a href="https://www.languagetool.org/">LanguageTool</a> as its proofreading engine.</li>
    </ul>
    <p>Data privacy: all verification is performed locally, inside your IDE.</p>
  ]]></description>

  <dependencies>
    <module name="intellij.libraries.lucene.common"/>
    <module name="intellij.spellchecker"/>
    <module name="intellij.platform.vcs.impl"/>
    <module name="intellij.libraries.grpc"/>
  </dependencies>

  <content>
    <module name="intellij.grazie.java"/>
    <module name="intellij.grazie.json"/>
    <module name="intellij.grazie.markdown"/>
    <module name="intellij.grazie.properties"/>
    <module name="intellij.grazie.xml"/>
    <module name="intellij.grazie.yaml"/>
    <module name="intellij.libraries.ai.grazie.spell.gec.engine.local" loading="embedded"/>
  </content>

  <extensions defaultExtensionNs="com.intellij">
    <projectConfigurable parentId="proofread" instance="com.intellij.grazie.spellcheck.settings.SpellCheckerSettingsManager"
                         id="reference.settings.ide.settings.spelling"
                         key="spelling"
                         bundle="messages.SpellCheckerBundle" />

    <applicationService serviceImplementation="com.intellij.grazie.GrazieConfig"/>

    <backgroundPostStartupActivity implementation="com.intellij.grazie.ide.notification.GrazieNotificationComponent"/>
    <postStartupActivity implementation="com.intellij.grazie.spellcheck.engine.GrazieSpellCheckerEngine$SpellerLoadActivity"/>

    <!-- getDisplayName is overridden in GrazieInspection itself! Placeholder is required to suppress validation. -->
    <localInspection bundle="messages.GrazieBundle" groupKey="grazie.group.name" enabledByDefault="true" shortName="GrazieInspectionRunner"
                     implementationClass="com.intellij.grazie.ide.inspection.grammar.GrazieInspection"
                     level="NON_SWITCHABLE_WARNING" key="grazie.grammar.inspection.grammar.text" language=""/>

    <localInspection bundle="messages.GrazieBundle" groupKey="grazie.group.name" enabledByDefault="true" shortName="GrazieInspection"
                     implementationClass="com.intellij.grazie.ide.inspection.grammar.GrazieInspection$Grammar"
                     level="GRAMMAR_ERROR" key="grazie.grammar.inspection.grammar.text" language=""/>

    <localInspection groupKey="grazie.group.name" enabledByDefault="true" shortName="GrazieStyle"
                     implementationClass="com.intellij.grazie.ide.inspection.grammar.GrazieInspection$Style"
                     level="STYLE_SUGGESTION" key="grazie.style.inspection.display.name" language=""
                     bundle="messages.GrazieBundle"/>

    <localInspection bundle="messages.GrazieBundle" groupKey="grazie.group.name" enabledByDefault="true"
                     shortName="LanguageDetectionInspection"
                     implementationClass="com.intellij.grazie.ide.inspection.detection.LanguageDetectionInspection"
                     level="WEAK WARNING" key="grazie.detection.inspection.text" language=""/>

    <localInspection shortName="SpellCheckingInspection" bundle="messages.SpellCheckerBundle"
                     key="spellchecking.inspection.name" groupKey="proofread" enabledByDefault="true" level="TYPO"
                     language=""
                     implementationClass="com.intellij.grazie.spellcheck.GrazieSpellCheckingInspection"/>

    <projectService serviceImplementation="com.intellij.grazie.spellcheck.engine.GrazieSpellCheckerEngine"
                    serviceInterface="com.intellij.spellchecker.engine.SpellCheckerEngine"/>

    <applicationConfigurable parentId="editor" instance="com.intellij.grazie.ide.ui.proofreading.ProofreadConfigurable" id="proofread"
                             key="configurable.group.proofread.settings.display.name" bundle="messages.OptionsBundle"/>

    <applicationConfigurable parentId="proofread" instance="com.intellij.grazie.ide.ui.grammar.GrazieConfigurable"
                             id="reference.settingsdialog.project.grazie"
                             key="grazie.settings.page.name" bundle="messages.GrazieBundle"/>

    <search.optionContributor implementation="com.intellij.grazie.ide.ui.search.GrazieSearchableOptionContributor"/>

    <statistics.applicationUsagesCollector implementation="com.intellij.grazie.ide.fus.GrazieFUSState"/>
    <statistics.counterUsagesCollector implementationClass="com.intellij.grazie.ide.fus.GrazieFUSCounter"/>
    <statistics.notificationIdsHolder implementation="com.intellij.grazie.ide.notification.GrazieNotificationIds"/>

    <spellchecker.dictionary.runtimeDictionaryProvider implementation="com.intellij.grazie.spellcheck.GrazieDictionaryProvider"/>
    <spellchecker.dictionary.customDictionaryProvider implementation="com.intellij.grazie.spellcheck.hunspell.HunspellDictionaryProvider"/>
    <notificationGroup id="Proofreading missing languages information" displayType="STICKY_BALLOON" bundle="messages.GrazieBundle"
                       key="grazie.notification.missing-languages.group"/>

    <notificationGroup displayType="STICKY_BALLOON"
                       id="Grazie notifications"
                       bundle="messages.GrazieBundle"
                       key="grazie.notification.grazie.group"/>

    <annotator language="TEXT" implementationClass="com.intellij.grazie.ide.language.commit.CommitAnnotator"/>

    <additionalTextAttributes scheme="Default" file="colorSchemes/GrazieDefault.xml"/>
    <additionalTextAttributes scheme="Darcula" file="colorSchemes/GrazieDarcula.xml"/>

    <severitiesProvider implementation="com.intellij.grazie.ide.TextProblemSeverities"/>
    <spellchecker.lifecycle implementation="com.intellij.grazie.spellcheck.GrazieSpellcheckerLifecycle"/>
    <nameSuggestionProvider id="SpellcheckingSuggestionProvider" implementation="com.intellij.grazie.spellcheck.suggestion.SpellcheckingNameSuggestionProvider" order="first"/>

    <registryKey key="spellchecker.grazie.enabled" defaultValue="true" description="Enables Grazie text-level spellchecking"/>
    <registryKey key="grazie.skip.precommit.checks"
                 defaultValue="true"
                 description="Controls whether expensive linguistic checks should be performed during pre-commit code analysis"/>

    <!-- Order matters here, please do not change it until it's on purpose -->
    <grazie.textChecker implementation="com.intellij.grazie.text.AsyncTreeRuleChecker$Grammar" id="treeRules"/>
    <grazie.textChecker implementation="com.intellij.grazie.grammar.LanguageToolChecker" id="languageTool"/>
    <grazie.textChecker implementation="com.intellij.grazie.mlec.MlecChecker" id="mlec"/>
    <grazie.textChecker implementation="com.intellij.grazie.text.AsyncTreeRuleChecker$GrammarLowPriority" id="grammarLowPriority"/>
    <grazie.textChecker implementation="com.intellij.grazie.text.AsyncTreeRuleChecker$Style" id="styleTreeRules"/>

    <grazie.problemFilter language="" implementationClass="com.intellij.grazie.text.TreeRuleChecker$DocProblemFilter"/>

    <intentionAction>
      <language/>
      <bundleName>messages.GrazieBundle</bundleName>
      <categoryKey>intention.category.natural.languages</categoryKey>
      <className>com.intellij.grazie.ide.inspection.rephrase.RephraseAction</className>
      <descriptionDirectoryName>RephraseAction</descriptionDirectoryName>
    </intentionAction>
  </extensions>

  <extensions defaultExtensionNs="com.intellij.grazie">
    <textExtractor language="TEXT" implementationClass="com.intellij.grazie.text.PlainTextExtractor"/>

    <problemFilter language="" implementationClass="com.intellij.grazie.text.CodeProblemFilter"/>
    <problemFilter language="TEXT" implementationClass="com.intellij.grazie.text.CodeProblemFilter$InPlainText"/>

    <problemFilter language="" implementationClass="com.intellij.grazie.text.CommentProblemFilter"/>
  </extensions>

  <extensionPoints>
    <extensionPoint qualifiedName="com.intellij.grazie.grammar.strategy" beanClass="com.intellij.lang.LanguageExtensionPoint"
                    dynamic="true">
      <with attribute="implementationClass" implements="com.intellij.grazie.grammar.strategy.GrammarCheckingStrategy"/>
    </extensionPoint>
    <extensionPoint qualifiedName="com.intellij.grazie.textExtractor" beanClass="com.intellij.lang.LanguageExtensionPoint"
                    dynamic="true">
      <with attribute="implementationClass" implements="com.intellij.grazie.text.TextExtractor"/>
    </extensionPoint>
    <extensionPoint qualifiedName="com.intellij.grazie.problemFilter" beanClass="com.intellij.lang.LanguageExtensionPoint"
                    dynamic="true">
      <with attribute="implementationClass" implements="com.intellij.grazie.text.ProblemFilter"/>
    </extensionPoint>
    <extensionPoint qualifiedName="com.intellij.grazie.textChecker" interface="com.intellij.grazie.text.TextChecker"
                    dynamic="true"/>
    <extensionPoint qualifiedName="com.intellij.grazie.disableChecking"
                    beanClass="com.intellij.grazie.config.CheckingContext$DisableChecking"
                    dynamic="true"/>
    <extensionPoint qualifiedName="com.intellij.grazie.textContentModificationTrackerProvider"
                    beanClass="com.intellij.lang.LanguageExtensionPoint"
                    dynamic="true">
      <with attribute="implementationClass" implements="com.intellij.grazie.text.TextContentModificationTrackerProvider"/>
    </extensionPoint>
    <extensionPoint qualifiedName="com.intellij.grazie.cloudConnector"
                    interface="com.intellij.grazie.cloud.GrazieCloudConnector"
                    dynamic="true"/>
  </extensionPoints>
</idea-plugin>
