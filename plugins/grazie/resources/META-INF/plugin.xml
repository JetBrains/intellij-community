<idea-plugin package="com.intellij.grazie">
  <id>tanvd.grazi</id>
  <name>Grazie</name>
  <vendor>JetBrains</vendor>

  <description><![CDATA[
    <p>Provides intelligent spelling and grammar checks for text that you write in the IDE.</p>

    <ul>
        <li>Supports over 15 languages, including English, German, Russian, Chinese, and others.</li>
        <li>Recognizes natural language constructs in programming languages (Python, Java and others),
            markup languages (Latex, Markdown, XML, HTML), comments, commits messages, and more.</li>
      <li>Uses <a href="https://www.languagetool.org/">LanguageTool</a> as its proofreading engine.</li>
    </ul>

    <p>English is enabled by default when you install the plugin. To enable other languages, open <strong>Settings/Preferences</strong>
       and select <strong>Editor</strong> > <strong>Proofreading</strong>.</p>

    <p><strong>NOTE:</strong> All verification is performed locally, inside your IDE.</p>
    ]]></description>

  <content>
    <module name="intellij.grazie.java"/>
    <module name="intellij.grazie.json"/>
    <module name="intellij.grazie.markdown"/>
    <module name="intellij.grazie.properties"/>
    <module name="intellij.grazie.xml"/>
    <module name="intellij.grazie.yaml"/>
  </content>

  <extensions defaultExtensionNs="com.intellij">
    <applicationService serviceImplementation="com.intellij.grazie.GrazieConfig"/>

    <backgroundPostStartupActivity implementation="com.intellij.grazie.ide.notification.GrazieNotificationComponent"/>

    <!-- getDisplayName is overridden in GrazieInspection itself! Placeholder is required to suppress validation. -->
    <localInspection bundle="messages.GrazieBundle" groupKey="grazie.group.name" enabledByDefault="true" shortName="GrazieInspection"
                     implementationClass="com.intellij.grazie.ide.inspection.grammar.GrazieInspection"
                     level="TYPO" key="grazie.grammar.inspection.grammar.text"/>

    <localInspection bundle="messages.GrazieBundle" groupKey="grazie.group.name" enabledByDefault="true" shortName="LanguageDetectionInspection"
                     implementationClass="com.intellij.grazie.ide.inspection.detection.LanguageDetectionInspection"
                     level="WARNING" key="grazie.detection.inspection.text"/>

    <applicationConfigurable parentId="editor" instance="com.intellij.grazie.ide.ui.proofreading.ProofreadConfigurable" id="proofread"/>

    <applicationConfigurable parentId="proofread" instance="com.intellij.grazie.ide.ui.grammar.GrazieConfigurable"
                             id="reference.settingsdialog.project.grazie"/>

    <search.optionContributor implementation="com.intellij.grazie.ide.ui.search.GrazieSearchableOptionContributor"/>

    <statistics.applicationUsagesCollector implementation="com.intellij.grazie.ide.fus.GrazieFUSState"/>
    <statistics.counterUsagesCollector groupId="grazie.count" version="3"/>

    <spellchecker.dictionary.runtimeDictionaryProvider implementation="com.intellij.grazie.spellcheck.GrazieDictionaryProvider"/>
    <notificationGroup id="Proofreading missing languages information" displayType="STICKY_BALLOON" bundle="messages.GrazieBundle" key="grazie.notification.missing-languages.group"/>
  </extensions>

  <extensions defaultExtensionNs="com.intellij.grazie">
    <textChecker implementation="com.intellij.grazie.grammar.LanguageToolChecker" id="languageTool"/>

    <textExtractor language="TEXT" implementationClass="com.intellij.grazie.text.PlainTextExtractor"/>

    <problemFilter language="" implementationClass="com.intellij.grazie.text.CommentProblemFilter"/>
  </extensions>

  <extensions defaultExtensionNs="com.intellij">
    <annotator language="TEXT" implementationClass="com.intellij.grazie.ide.language.commit.CommitAnnotator"/>
  </extensions>

  <extensionPoints>
    <extensionPoint qualifiedName="com.intellij.grazie.grammar.strategy" beanClass="com.intellij.lang.LanguageExtensionPoint"
                    dynamic="true">
      <with attribute="implementationClass" implements="com.intellij.grazie.grammar.strategy.GrammarCheckingStrategy"/>
    </extensionPoint>
    <extensionPoint qualifiedName="com.intellij.grazie.textExtractor" beanClass="com.intellij.lang.LanguageExtensionPoint"
                    dynamic="true">
      <with attribute="implementationClass" implements="com.intellij.grazie.text.TextExtractor"/>
    </extensionPoint>
    <extensionPoint qualifiedName="com.intellij.grazie.problemFilter" beanClass="com.intellij.lang.LanguageExtensionPoint"
                    dynamic="true">
      <with attribute="implementationClass" implements="com.intellij.grazie.text.ProblemFilter"/>
    </extensionPoint>
    <extensionPoint qualifiedName="com.intellij.grazie.textChecker" interface="com.intellij.grazie.text.TextChecker"
                    dynamic="true"/>
  </extensionPoints>
</idea-plugin>
