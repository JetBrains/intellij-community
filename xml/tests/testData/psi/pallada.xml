<project name="pallada" default="all">
  
  
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- The task requires the following libraries from IntelliJ IDEA distribution: -->
  <!--   javac2.jar; jdom.jar; bcel.jar -->
  <taskdef name="javac2" classname="com.intellij.ant.Javac2"/>
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="256m"/>
  <patternset id="compiler.excluded">
    <exclude name="D:/work/Pallada/tools/parserGen/testSource/**"/>
    <exclude name="D:/work/Pallada/tools/parserGen/source/com/intellij/parserGen/**"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.xsd"/>
    <include name="**/?*.ft"/>
    <include name="**/?*.html"/>
    <include name="**/?*.template"/>
    <include name="**/primes.bin"/>
    <include name="**/?*.ico"/>
  </patternset>
  <!-- JDK definitions -->
  
  <property name="jdk.home.idea_jdk" value="D:/java/j2sdk1.4.2_04"/>
  <path id="jdk.classpath.idea_jdk">
    <fileset dir="${jdk.home.idea_jdk}">
      <include name="jre/lib/charsets.jar"/>
      <include name="lib/tools.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/sunrsasign.jar"/>
      <include name="jre/lib/tools.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/ldapsec.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="lib/tools.jar"/>
    </fileset>
  </path>
  
  <property name="jdk.home.jdk_131" value="D:/java/jdk1.3.1_10"/>
  <path id="jdk.classpath.jdk_131">
    <fileset dir="${jdk.home.jdk_131}">
      <include name="jre/lib/i18n.jar"/>
      <include name="jre/lib/jaws.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/sunrsasign.jar"/>
      <include name="jre/lib/tools.jar"/>
    </fileset>
  </path>
  
  <property name="jdk.home.jdk_122" value="D:/java/jdk1.2.2"/>
  <path id="jdk.classpath.jdk_122">
    <fileset dir="${jdk.home.jdk_122}">
      <include name="jre/lib/i18n.jar"/>
      <include name="jre/lib/jaws.jar"/>
      <include name="jre/lib/plugprov.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/tools.jar"/>
      <include name="jre/lib/ext/iiimp.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.idea_jdk}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.idea_jdk"/>
  <!-- Project Libraries -->
  
  <path id="library.generic_collections.classpath">
    <pathelement location="${basedir}/lib/generics/collect.jar"/>
  </path>
  
  <path id="library.jdom.classpath">
    <pathelement location="${basedir}/lib/jdom.jar"/>
  </path>
  
  <path id="library.junit.classpath">
    <pathelement location="${basedir}/lib/junit.jar"/>
  </path>
  
  <path id="library.ant.classpath">
    <pathelement location="${basedir}/lib/ant/lib/ant-jakarta-oro.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-apache-resolver.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-nodeps.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-xalan2.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-xalan1.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-vaj.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-antlr.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-jakarta-log4j.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-jmf.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/xml-apis.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-icontract.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-jakarta-regexp.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-javamail.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-netrexx.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-jdepend.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-commons-logging.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-swing.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-jai.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-xslp.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-junit.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-launcher.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-commons-net.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-weblogic.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-jakarta-bcel.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-stylebook.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-apache-bsf.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/xercesImpl.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-starteam.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-trax.jar"/>
    <pathelement location="${basedir}/lib/ant/lib/ant-jsch.jar"/>
  </path>
  
  <path id="library.mocks.classpath">
    <pathelement location="${basedir}/lib/dev/easymock-3.4.jar"/>
    <pathelement location="${basedir}/lib/dev/mockobjects-core-0.09.jar"/>
  </path>

  <path id="library.velocity.classpath">
    <pathelement location="${basedir}/lib/velocity.jar"/>
  </path>
  
  <path id="library.jasper2.classpath">
    <pathelement location="${basedir}/lib/rt/jasper2/commons-collections.jar"/>
    <pathelement location="${basedir}/lib/rt/jasper2/commons-el.jar"/>
    <pathelement location="${basedir}/lib/rt/jasper2/commons-logging-api.jar"/>
    <pathelement location="${basedir}/lib/rt/jasper2/jasper-compiler.jar"/>
    <pathelement location="${basedir}/lib/rt/jasper2/jasper-runtime.jar"/>
    <pathelement location="${basedir}/lib/rt/jasper2/jsp-api.jar"/>
    <pathelement location="${basedir}/lib/rt/jasper2/servlet-api.jar"/>
  </path>
  
  <path id="library.bcel.classpath">
    <pathelement location="${basedir}/lib/bcel.jar"/>
  </path>
  
  <path id="library.log4j.classpath">
    <pathelement location="${basedir}/lib/log4j.jar"/>
  </path>
  
  <path id="library.mockweblogic.classpath">
    <pathelement location="${basedir}/lib/dev/mockweblogic.jar"/>
  </path>
  
  <path id="library.trove4j.classpath">
    <pathelement location="${basedir}/lib/trove4j.jar"/>
  </path>
  
  <path id="library.servlets.classpath">
    <pathelement location="${basedir}/lib/servlet.jar"/>
  </path>
  <!-- Global Libraries -->
  
  
  <dirname property="module.internalresources.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.internalresources" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.internalresources" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.internalresources" value="${compiler.args}"/>
  
  <property name="internalresources.output.dir" value="${module.internalresources.basedir}/internalResources/classes"/>
  <property name="internalresources.testoutput.dir" value="${module.internalresources.basedir}/internalResources/classes"/>
  
  <path id="internalresources.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="internalresources.module.classpath">
    <path refid="${module.jdk.classpath.internalresources}"/>
  </path>
  
  
  <patternset id="excluded.from.module.internalresources"/>
  
  <patternset id="excluded.from.compilation.internalresources">
    <patternset refid="excluded.from.module.internalresources"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="internalresources.module.sourcepath">
    <dirset dir="${module.internalresources.basedir}/internalResources">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.internalresources" depends="compile.module.internalresources.production,compile.module.internalresources.tests" description="compile module internalResources"/>
  
  <target name="compile.module.internalresources.production" description="compile module internalResources production classes">
    <mkdir dir="${internalresources.output.dir}"/>
    <javac2 destdir="${internalresources.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.internalresources}/bin/javac">
      <compilerarg line="${compiler.args.internalresources}"/>
      <bootclasspath refid="internalresources.module.bootclasspath"/>
      <classpath refid="internalresources.module.classpath"/>
      <src refid="internalresources.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.internalresources"/>
    </javac2>
    <copy todir="${internalresources.output.dir}">
      <fileset dir="${module.internalresources.basedir}/internalResources/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.internalresources"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.internalresources.tests" depends="compile.module.internalresources.production" description="compile module internalResources test classes" unless="skip.tests"/>
  
  <target name="clean.module.internalresources" description="cleanup module">
    <delete dir="${internalresources.output.dir}"/>
    <delete dir="${internalresources.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.forms_rt.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.forms_rt" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.forms_rt" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.forms_rt" value="${compiler.args}"/>
  
  <property name="forms_rt.output.dir" value="${module.forms_rt.basedir}/forms_rt/classes"/>
  <property name="forms_rt.testoutput.dir" value="${module.forms_rt.basedir}/forms_rt/classes"/>
  
  <path id="forms_rt.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="forms_rt.module.classpath">
    <path refid="${module.jdk.classpath.forms_rt}"/>
  </path>
  
  
  <patternset id="excluded.from.module.forms_rt"/>
  
  <patternset id="excluded.from.compilation.forms_rt">
    <patternset refid="excluded.from.module.forms_rt"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="forms_rt.module.sourcepath">
    <dirset dir="${module.forms_rt.basedir}/forms_rt">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.forms_rt" depends="compile.module.forms_rt.production,compile.module.forms_rt.tests" description="compile module forms_rt"/>
  
  <target name="compile.module.forms_rt.production" description="compile module forms_rt production classes">
    <mkdir dir="${forms_rt.output.dir}"/>
    <javac2 destdir="${forms_rt.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.forms_rt}/bin/javac">
      <compilerarg line="${compiler.args.forms_rt}"/>
      <bootclasspath refid="forms_rt.module.bootclasspath"/>
      <classpath refid="forms_rt.module.classpath"/>
      <src refid="forms_rt.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.forms_rt"/>
    </javac2>
    <copy todir="${forms_rt.output.dir}">
      <fileset dir="${module.forms_rt.basedir}/forms_rt/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.forms_rt"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.forms_rt.tests" depends="compile.module.forms_rt.production" description="compile module forms_rt test classes" unless="skip.tests"/>
  
  <target name="clean.module.forms_rt" description="cleanup module">
    <delete dir="${forms_rt.output.dir}"/>
    <delete dir="${forms_rt.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.uidesignercore.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.uidesignercore" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.uidesignercore" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.uidesignercore" value="${compiler.args}"/>
  
  <property name="uidesignercore.output.dir" value="${module.uidesignercore.basedir}/UIDesignerCore/classes"/>
  <property name="uidesignercore.testoutput.dir" value="${module.uidesignercore.basedir}/UIDesignerCore/testClasses"/>
  
  <path id="uidesignercore.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="uidesignercore.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.uidesignercore}"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.bcel.classpath"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${forms_rt.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.uidesignercore"/>
  
  <patternset id="excluded.from.compilation.uidesignercore">
    <patternset refid="excluded.from.module.uidesignercore"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="uidesignercore.module.sourcepath">
    <dirset dir="${module.uidesignercore.basedir}/UIDesignerCore">
      <include name="src"/>
    </dirset>
  </path>
  
  <path id="uidesignercore.module.test.sourcepath">
    <dirset dir="${module.uidesignercore.basedir}/UIDesignerCore">
      <include name="testSource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.uidesignercore" depends="compile.module.uidesignercore.production,compile.module.uidesignercore.tests" description="compile module UIDesignerCore"/>
  
  <target name="compile.module.uidesignercore.production" depends="compile.module.forms_rt" description="compile module UIDesignerCore production classes">
    <mkdir dir="${uidesignercore.output.dir}"/>
    <javac2 destdir="${uidesignercore.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.uidesignercore}/bin/javac">
      <compilerarg line="${compiler.args.uidesignercore}"/>
      <bootclasspath refid="uidesignercore.module.bootclasspath"/>
      <classpath refid="uidesignercore.module.classpath"/>
      <src refid="uidesignercore.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.uidesignercore"/>
    </javac2>
    <copy todir="${uidesignercore.output.dir}">
      <fileset dir="${module.uidesignercore.basedir}/UIDesignerCore/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.uidesignercore"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.uidesignercore.tests" depends="compile.module.uidesignercore.production" description="compile module UIDesignerCore test classes" unless="skip.tests">
    <mkdir dir="${uidesignercore.testoutput.dir}"/>
    <javac2 destdir="${uidesignercore.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.uidesignercore}/bin/javac">
      <compilerarg line="${compiler.args.uidesignercore}"/>
      <classpath refid="uidesignercore.module.classpath"/>
      <classpath location="${uidesignercore.output.dir}"/>
      <src refid="uidesignercore.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.uidesignercore"/>
    </javac2>
    <copy todir="${uidesignercore.testoutput.dir}">
      <fileset dir="${module.uidesignercore.basedir}/UIDesignerCore/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.uidesignercore"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.uidesignercore" description="cleanup module">
    <delete dir="${uidesignercore.output.dir}"/>
    <delete dir="${uidesignercore.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.javac2.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.javac2" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.javac2" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.javac2" value="${compiler.args}"/>
  
  <property name="javac2.output.dir" value="${module.javac2.basedir}/javac2/classes"/>
  <property name="javac2.testoutput.dir" value="${module.javac2.basedir}/javac2/classes"/>
  
  <path id="javac2.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="javac2.module.classpath">
    <path refid="${module.jdk.classpath.javac2}"/>
    <path refid="library.ant.classpath"/>
    <pathelement location="${uidesignercore.output.dir}"/>
    <pathelement location="${uidesignercore.testoutput.dir}"/>
    <path refid="library.bcel.classpath"/>
    <pathelement location="${forms_rt.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.javac2"/>
  
  <patternset id="excluded.from.compilation.javac2">
    <patternset refid="excluded.from.module.javac2"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="javac2.module.sourcepath">
    <dirset dir="${module.javac2.basedir}/javac2">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.javac2" depends="compile.module.javac2.production,compile.module.javac2.tests" description="compile module javac2"/>
  
  <target name="compile.module.javac2.production" depends="compile.module.uidesignercore,compile.module.forms_rt" description="compile module javac2 production classes">
    <mkdir dir="${javac2.output.dir}"/>
    <javac2 destdir="${javac2.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.javac2}/bin/javac">
      <compilerarg line="${compiler.args.javac2}"/>
      <bootclasspath refid="javac2.module.bootclasspath"/>
      <classpath refid="javac2.module.classpath"/>
      <src refid="javac2.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.javac2"/>
    </javac2>
    <copy todir="${javac2.output.dir}">
      <fileset dir="${module.javac2.basedir}/javac2/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.javac2"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.javac2.tests" depends="compile.module.javac2.production" description="compile module javac2 test classes" unless="skip.tests"/>
  
  <target name="clean.module.javac2" description="cleanup module">
    <delete dir="${javac2.output.dir}"/>
    <delete dir="${javac2.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.idea_rt.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.idea_rt" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.idea_rt" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.idea_rt" value="${compiler.args}"/>
  
  <property name="idea_rt.output.dir" value="${module.idea_rt.basedir}/classes/rt"/>
  <property name="idea_rt.testoutput.dir" value="${module.idea_rt.basedir}/classes/rt"/>
  
  <path id="idea_rt.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="idea_rt.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.idea_rt}"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.ant.classpath"/>
    <path refid="library.jasper2.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.idea_rt"/>
  
  <patternset id="excluded.from.compilation.idea_rt">
    <patternset refid="excluded.from.module.idea_rt"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="idea_rt.module.sourcepath">
    <dirset dir="${module.idea_rt.basedir}">
      <include name="runtimesource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.idea_rt" depends="compile.module.idea_rt.production,compile.module.idea_rt.tests" description="compile module idea_rt"/>
  
  <target name="compile.module.idea_rt.production" description="compile module idea_rt production classes">
    <mkdir dir="${idea_rt.output.dir}"/>
    <javac2 destdir="${idea_rt.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.idea_rt}/bin/javac">
      <compilerarg line="${compiler.args.idea_rt}"/>
      <bootclasspath refid="idea_rt.module.bootclasspath"/>
      <classpath refid="idea_rt.module.classpath"/>
      <src refid="idea_rt.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.idea_rt"/>
    </javac2>
    <copy todir="${idea_rt.output.dir}">
      <fileset dir="${module.idea_rt.basedir}/runtimesource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.idea_rt"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.idea_rt.tests" depends="compile.module.idea_rt.production" description="compile module idea_rt test classes" unless="skip.tests"/>
  
  <target name="clean.module.idea_rt" description="cleanup module">
    <delete dir="${idea_rt.output.dir}"/>
    <delete dir="${idea_rt.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.weblogicwrapper.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.weblogicwrapper" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.weblogicwrapper" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.weblogicwrapper" value="${compiler.args}"/>
  
  <property name="weblogicwrapper.output.dir" value="${module.weblogicwrapper.basedir}/plugins/weblogic/weblogicWrapper/classes"/>
  <property name="weblogicwrapper.testoutput.dir" value="${module.weblogicwrapper.basedir}/plugins/weblogic/weblogicWrapper/classes"/>
  
  <path id="weblogicwrapper.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="weblogicwrapper.module.classpath">
    <path refid="${module.jdk.classpath.weblogicwrapper}"/>
  </path>
  
  
  <patternset id="excluded.from.module.weblogicwrapper"/>
  
  <patternset id="excluded.from.compilation.weblogicwrapper">
    <patternset refid="excluded.from.module.weblogicwrapper"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="weblogicwrapper.module.sourcepath">
    <dirset dir="${module.weblogicwrapper.basedir}/plugins/weblogic/weblogicWrapper">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.weblogicwrapper" depends="compile.module.weblogicwrapper.production,compile.module.weblogicwrapper.tests" description="compile module weblogicWrapper"/>
  
  <target name="compile.module.weblogicwrapper.production" description="compile module weblogicWrapper production classes">
    <mkdir dir="${weblogicwrapper.output.dir}"/>
    <javac2 destdir="${weblogicwrapper.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.weblogicwrapper}/bin/javac">
      <compilerarg line="${compiler.args.weblogicwrapper}"/>
      <bootclasspath refid="weblogicwrapper.module.bootclasspath"/>
      <classpath refid="weblogicwrapper.module.classpath"/>
      <src refid="weblogicwrapper.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.weblogicwrapper"/>
    </javac2>
    <copy todir="${weblogicwrapper.output.dir}">
      <fileset dir="${module.weblogicwrapper.basedir}/plugins/weblogic/weblogicWrapper/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.weblogicwrapper"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.weblogicwrapper.tests" depends="compile.module.weblogicwrapper.production" description="compile module weblogicWrapper test classes" unless="skip.tests"/>
  
  <target name="clean.module.weblogicwrapper" description="cleanup module">
    <delete dir="${weblogicwrapper.output.dir}"/>
    <delete dir="${weblogicwrapper.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.weblogicwrapperimpl.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.weblogicwrapperimpl" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.weblogicwrapperimpl" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.weblogicwrapperimpl" value="${compiler.args}"/>
  
  <property name="weblogicwrapperimpl.output.dir" value="${module.weblogicwrapperimpl.basedir}/plugins/weblogic/weblogicLogin/classes"/>
  <property name="weblogicwrapperimpl.testoutput.dir" value="${module.weblogicwrapperimpl.basedir}/plugins/weblogic/weblogicLogin/classes"/>
  
  <path id="weblogicwrapperimpl.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="weblogicwrapperimpl.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.weblogicwrapperimpl}"/>
    <pathelement location="${weblogicwrapper.output.dir}"/>
    <path refid="library.mockweblogic.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.weblogicwrapperimpl"/>
  
  <patternset id="excluded.from.compilation.weblogicwrapperimpl">
    <patternset refid="excluded.from.module.weblogicwrapperimpl"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="weblogicwrapperimpl.module.sourcepath">
    <dirset dir="${module.weblogicwrapperimpl.basedir}/plugins/weblogic/weblogicLogin">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.weblogicwrapperimpl" depends="compile.module.weblogicwrapperimpl.production,compile.module.weblogicwrapperimpl.tests" description="compile module weblogicWrapperImpl"/>
  
  <target name="compile.module.weblogicwrapperimpl.production" depends="compile.module.weblogicwrapper" description="compile module weblogicWrapperImpl production classes">
    <mkdir dir="${weblogicwrapperimpl.output.dir}"/>
    <javac2 destdir="${weblogicwrapperimpl.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.weblogicwrapperimpl}/bin/javac">
      <compilerarg line="${compiler.args.weblogicwrapperimpl}"/>
      <bootclasspath refid="weblogicwrapperimpl.module.bootclasspath"/>
      <classpath refid="weblogicwrapperimpl.module.classpath"/>
      <src refid="weblogicwrapperimpl.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.weblogicwrapperimpl"/>
    </javac2>
    <copy todir="${weblogicwrapperimpl.output.dir}">
      <fileset dir="${module.weblogicwrapperimpl.basedir}/plugins/weblogic/weblogicLogin/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.weblogicwrapperimpl"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.weblogicwrapperimpl.tests" depends="compile.module.weblogicwrapperimpl.production" description="compile module weblogicWrapperImpl test classes" unless="skip.tests"/>
  
  <target name="clean.module.weblogicwrapperimpl" description="cleanup module">
    <delete dir="${weblogicwrapperimpl.output.dir}"/>
    <delete dir="${weblogicwrapperimpl.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.resources.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.resources" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.resources" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.resources" value="${compiler.args}"/>
  
  <property name="resources.output.dir" value="${module.resources.basedir}/resources/classes"/>
  <property name="resources.testoutput.dir" value="${module.resources.basedir}/resources/classes"/>
  
  <path id="resources.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="resources.module.classpath">
    <path refid="${module.jdk.classpath.resources}"/>
  </path>
  
  
  <patternset id="excluded.from.module.resources"/>
  
  <patternset id="excluded.from.compilation.resources">
    <patternset refid="excluded.from.module.resources"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="resources.module.sourcepath">
    <dirset dir="${module.resources.basedir}/resources">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.resources" depends="compile.module.resources.production,compile.module.resources.tests" description="compile module resources"/>
  
  <target name="compile.module.resources.production" description="compile module resources production classes">
    <mkdir dir="${resources.output.dir}"/>
    <javac2 destdir="${resources.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.resources}/bin/javac">
      <compilerarg line="${compiler.args.resources}"/>
      <bootclasspath refid="resources.module.bootclasspath"/>
      <classpath refid="resources.module.classpath"/>
      <src refid="resources.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.resources"/>
    </javac2>
    <copy todir="${resources.output.dir}">
      <fileset dir="${module.resources.basedir}/resources/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.resources"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.resources.tests" depends="compile.module.resources.production" description="compile module resources test classes" unless="skip.tests"/>
  
  <target name="clean.module.resources" description="cleanup module">
    <delete dir="${resources.output.dir}"/>
    <delete dir="${resources.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.util.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.util" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.util" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.util" value="${compiler.args}"/>
  
  <property name="util.output.dir" value="${module.util.basedir}/util/classes"/>
  <property name="util.testoutput.dir" value="${module.util.basedir}/util/classes"/>
  
  <path id="util.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="util.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.util}"/>
    <path refid="library.bcel.classpath"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.log4j.classpath"/>
    <path refid="library.trove4j.classpath"/>
    <pathelement location="${module.util.basedir}/lib/yjp-controller-api-redist.jar"/>
  </path>
  
  
  <patternset id="excluded.from.module.util"/>
  
  <patternset id="excluded.from.compilation.util">
    <patternset refid="excluded.from.module.util"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="util.module.sourcepath">
    <dirset dir="${module.util.basedir}/util">
      <include name="src"/>
    </dirset>
  </path>
  
  <path id="util.module.test.sourcepath">
    <dirset dir="${module.util.basedir}/util">
      <include name="testSource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.util" depends="compile.module.util.production,compile.module.util.tests" description="compile module util"/>
  
  <target name="compile.module.util.production" description="compile module util production classes">
    <mkdir dir="${util.output.dir}"/>
    <javac2 destdir="${util.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.util}/bin/javac">
      <compilerarg line="${compiler.args.util}"/>
      <bootclasspath refid="util.module.bootclasspath"/>
      <classpath refid="util.module.classpath"/>
      <src refid="util.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.util"/>
    </javac2>
    <copy todir="${util.output.dir}">
      <fileset dir="${module.util.basedir}/util/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.util"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.util.tests" depends="compile.module.util.production" description="compile module util test classes" unless="skip.tests">
    <mkdir dir="${util.testoutput.dir}"/>
    <javac2 destdir="${util.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.util}/bin/javac">
      <compilerarg line="${compiler.args.util}"/>
      <classpath refid="util.module.classpath"/>
      <classpath location="${util.output.dir}"/>
      <src refid="util.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.util"/>
    </javac2>
    <copy todir="${util.testoutput.dir}">
      <fileset dir="${module.util.basedir}/util/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.util"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.util" description="cleanup module">
    <delete dir="${util.output.dir}"/>
    <delete dir="${util.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.parsergen.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.parsergen" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.parsergen" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.parsergen" value="${compiler.args}"/>
  
  <property name="parsergen.output.dir" value="${module.parsergen.basedir}/tools/parserGen/classes/main"/>
  <property name="parsergen.testoutput.dir" value="${module.parsergen.basedir}/tools/parserGen/classes/test"/>
  
  <path id="parsergen.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="parsergen.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.parsergen}"/>
    <pathelement location="${module.parsergen.basedir}/lib/xerces.jar"/>
    <pathelement location="${module.parsergen.basedir}/tools/parserGen/lib/antlr-2.7.1.jar"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.velocity.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.parsergen"/>
  
  <patternset id="excluded.from.compilation.parsergen">
    <patternset refid="excluded.from.module.parsergen"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="parsergen.module.sourcepath">
    <dirset dir="${module.parsergen.basedir}/tools/parserGen">
      <include name="internalResources"/>
      <include name="source"/>
    </dirset>
  </path>
  
  <path id="parsergen.module.test.sourcepath">
    <dirset dir="${module.parsergen.basedir}/tools/parserGen">
      <include name="testSource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.parsergen" depends="compile.module.parsergen.production,compile.module.parsergen.tests" description="compile module parserGen"/>
  
  <target name="compile.module.parsergen.production" description="compile module parserGen production classes">
    <mkdir dir="${parsergen.output.dir}"/>
    <javac2 destdir="${parsergen.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.parsergen}/bin/javac">
      <compilerarg line="${compiler.args.parsergen}"/>
      <bootclasspath refid="parsergen.module.bootclasspath"/>
      <classpath refid="parsergen.module.classpath"/>
      <src refid="parsergen.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.parsergen"/>
    </javac2>
    <copy todir="${parsergen.output.dir}">
      <fileset dir="${module.parsergen.basedir}/tools/parserGen/internalResources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.parsergen"/>
      </fileset>
      <fileset dir="${module.parsergen.basedir}/tools/parserGen/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.parsergen"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.parsergen.tests" depends="compile.module.parsergen.production" description="compile module parserGen test classes" unless="skip.tests">
    <mkdir dir="${parsergen.testoutput.dir}"/>
    <javac2 destdir="${parsergen.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.parsergen}/bin/javac">
      <compilerarg line="${compiler.args.parsergen}"/>
      <classpath refid="parsergen.module.classpath"/>
      <classpath location="${parsergen.output.dir}"/>
      <src refid="parsergen.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.parsergen"/>
    </javac2>
    <copy todir="${parsergen.testoutput.dir}">
      <fileset dir="${module.parsergen.basedir}/tools/parserGen/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.parsergen"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.parsergen" description="cleanup module">
    <delete dir="${parsergen.output.dir}"/>
    <delete dir="${parsergen.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.openapi.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.openapi" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.openapi" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.openapi" value="${compiler.args}"/>
  
  <property name="openapi.output.dir" value="${module.openapi.basedir}/openapi/classes"/>
  <property name="openapi.testoutput.dir" value="${module.openapi.basedir}/openapi/classes"/>
  
  <path id="openapi.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="openapi.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.openapi}"/>
    <pathelement location="${util.output.dir}"/>
    <pathelement location="${idea_rt.output.dir}"/>
    <pathelement location="${parsergen.output.dir}"/>
    <pathelement location="${parsergen.testoutput.dir}"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${forms_rt.output.dir}"/>
    <path refid="library.trove4j.classpath"/>
    <path refid="library.jasper2.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.openapi"/>
  
  <patternset id="excluded.from.compilation.openapi">
    <patternset refid="excluded.from.module.openapi"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="openapi.module.sourcepath">
    <dirset dir="${module.openapi.basedir}/openapi">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.openapi" depends="compile.module.openapi.production,compile.module.openapi.tests" description="compile module openapi"/>
  
  <target name="compile.module.openapi.production" depends="compile.module.util,compile.module.idea_rt,compile.module.parsergen,compile.module.forms_rt" description="compile module openapi production classes">
    <mkdir dir="${openapi.output.dir}"/>
    <javac2 destdir="${openapi.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.openapi}/bin/javac">
      <compilerarg line="${compiler.args.openapi}"/>
      <bootclasspath refid="openapi.module.bootclasspath"/>
      <classpath refid="openapi.module.classpath"/>
      <src refid="openapi.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.openapi"/>
    </javac2>
    <copy todir="${openapi.output.dir}">
      <fileset dir="${module.openapi.basedir}/openapi/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.openapi"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.openapi.tests" depends="compile.module.openapi.production" description="compile module openapi test classes" unless="skip.tests"/>
  
  <target name="clean.module.openapi" description="cleanup module">
    <delete dir="${openapi.output.dir}"/>
    <delete dir="${openapi.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.weblogic.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.weblogic" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.weblogic" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.weblogic" value="${compiler.args}"/>
  
  <property name="weblogic.output.dir" value="${module.weblogic.basedir}/plugins/weblogic/classes"/>
  <property name="weblogic.testoutput.dir" value="${module.weblogic.basedir}/plugins/weblogic/classes"/>
  
  <path id="weblogic.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="weblogic.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.weblogic}"/>
    <pathelement location="${idea_rt.output.dir}"/>
    <pathelement location="${util.output.dir}"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${openapi.output.dir}"/>
    <pathelement location="${forms_rt.output.dir}"/>
    <pathelement location="${weblogicwrapper.output.dir}"/>
    <pathelement location="${weblogicwrapperimpl.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.weblogic"/>
  
  <patternset id="excluded.from.compilation.weblogic">
    <patternset refid="excluded.from.module.weblogic"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="weblogic.module.sourcepath">
    <dirset dir="${module.weblogic.basedir}/plugins/weblogic">
      <include name="source"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.weblogic" depends="compile.module.weblogic.production,compile.module.weblogic.tests" description="compile module weblogic"/>
  
  <target name="compile.module.weblogic.production" depends="compile.module.idea_rt,compile.module.util,compile.module.openapi,compile.module.forms_rt,compile.module.weblogicwrapper,compile.module.weblogicwrapperimpl" description="compile module weblogic production classes">
    <mkdir dir="${weblogic.output.dir}"/>
    <javac2 destdir="${weblogic.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.weblogic}/bin/javac">
      <compilerarg line="${compiler.args.weblogic}"/>
      <bootclasspath refid="weblogic.module.bootclasspath"/>
      <classpath refid="weblogic.module.classpath"/>
      <src refid="weblogic.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.weblogic"/>
    </javac2>
    <copy todir="${weblogic.output.dir}">
      <fileset dir="${module.weblogic.basedir}/plugins/weblogic/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.weblogic"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.weblogic.tests" depends="compile.module.weblogic.production" description="compile module weblogic test classes" unless="skip.tests"/>
  
  <target name="clean.module.weblogic" description="cleanup module">
    <delete dir="${weblogic.output.dir}"/>
    <delete dir="${weblogic.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.jsr45debug.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.jsr45debug" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.jsr45debug" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.jsr45debug" value="${compiler.args}"/>
  
  <property name="jsr45debug.output.dir" value="${module.jsr45debug.basedir}/plugins/jsr45debug/classes"/>
  <property name="jsr45debug.testoutput.dir" value="${module.jsr45debug.basedir}/plugins/jsr45debug/testClasses"/>
  
  <path id="jsr45debug.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="jsr45debug.module.classpath">
    <path refid="${module.jdk.classpath.jsr45debug}"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${util.output.dir}"/>
    <pathelement location="${openapi.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.jsr45debug"/>
  
  <patternset id="excluded.from.compilation.jsr45debug">
    <patternset refid="excluded.from.module.jsr45debug"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="jsr45debug.module.sourcepath">
    <dirset dir="${module.jsr45debug.basedir}/plugins/jsr45debug">
      <include name="source"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.jsr45debug" depends="compile.module.jsr45debug.production,compile.module.jsr45debug.tests" description="compile module jsr45debug"/>
  
  <target name="compile.module.jsr45debug.production" depends="compile.module.util,compile.module.openapi" description="compile module jsr45debug production classes">
    <mkdir dir="${jsr45debug.output.dir}"/>
    <javac2 destdir="${jsr45debug.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.jsr45debug}/bin/javac">
      <compilerarg line="${compiler.args.jsr45debug}"/>
      <bootclasspath refid="jsr45debug.module.bootclasspath"/>
      <classpath refid="jsr45debug.module.classpath"/>
      <src refid="jsr45debug.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jsr45debug"/>
    </javac2>
    <copy todir="${jsr45debug.output.dir}">
      <fileset dir="${module.jsr45debug.basedir}/plugins/jsr45debug/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.jsr45debug"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.jsr45debug.tests" depends="compile.module.jsr45debug.production" description="compile module jsr45debug test classes" unless="skip.tests"/>
  
  <target name="clean.module.jsr45debug" description="cleanup module">
    <delete dir="${jsr45debug.output.dir}"/>
    <delete dir="${jsr45debug.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.tomcatintegration.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.tomcatintegration" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.tomcatintegration" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.tomcatintegration" value="${compiler.args}"/>
  
  <property name="tomcatintegration.output.dir" value="${module.tomcatintegration.basedir}/plugins/tomcatIntegration/classes"/>
  <property name="tomcatintegration.testoutput.dir" value="${module.tomcatintegration.basedir}/plugins/tomcatIntegration/testClasses"/>
  
  <path id="tomcatintegration.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="tomcatintegration.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.tomcatintegration}"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${util.output.dir}"/>
    <pathelement location="${openapi.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.tomcatintegration"/>
  
  <patternset id="excluded.from.compilation.tomcatintegration">
    <patternset refid="excluded.from.module.tomcatintegration"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="tomcatintegration.module.sourcepath">
    <dirset dir="${module.tomcatintegration.basedir}/plugins/tomcatIntegration">
      <include name="source"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.tomcatintegration" depends="compile.module.tomcatintegration.production,compile.module.tomcatintegration.tests" description="compile module tomcatIntegration"/>
  
  <target name="compile.module.tomcatintegration.production" depends="compile.module.util,compile.module.openapi" description="compile module tomcatIntegration production classes">
    <mkdir dir="${tomcatintegration.output.dir}"/>
    <javac2 destdir="${tomcatintegration.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.tomcatintegration}/bin/javac">
      <compilerarg line="${compiler.args.tomcatintegration}"/>
      <bootclasspath refid="tomcatintegration.module.bootclasspath"/>
      <classpath refid="tomcatintegration.module.classpath"/>
      <src refid="tomcatintegration.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.tomcatintegration"/>
    </javac2>
    <copy todir="${tomcatintegration.output.dir}">
      <fileset dir="${module.tomcatintegration.basedir}/plugins/tomcatIntegration/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.tomcatintegration"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.tomcatintegration.tests" depends="compile.module.tomcatintegration.production" description="compile module tomcatIntegration test classes" unless="skip.tests"/>
  
  <target name="clean.module.tomcatintegration" description="cleanup module">
    <delete dir="${tomcatintegration.output.dir}"/>
    <delete dir="${tomcatintegration.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.starteamintegration.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.starteamintegration" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.starteamintegration" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.starteamintegration" value="${compiler.args}"/>
  
  <property name="starteamintegration.output.dir" value="${module.starteamintegration.basedir}/plugins/starteam/classes"/>
  <property name="starteamintegration.testoutput.dir" value="${module.starteamintegration.basedir}/plugins/starteam/classes"/>
  
  <path id="starteamintegration.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="starteamintegration.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.starteamintegration}"/>
    <pathelement location="${module.starteamintegration.basedir}/plugins/starteam/lib/starteam-sdk.jar"/>
    <pathelement location="${util.output.dir}"/>
    <pathelement location="${openapi.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.starteamintegration"/>
  
  <patternset id="excluded.from.compilation.starteamintegration">
    <patternset refid="excluded.from.module.starteamintegration"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="starteamintegration.module.sourcepath">
    <dirset dir="${module.starteamintegration.basedir}/plugins/starteam">
      <include name="source"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.starteamintegration" depends="compile.module.starteamintegration.production,compile.module.starteamintegration.tests" description="compile module starteamIntegration"/>
  
  <target name="compile.module.starteamintegration.production" depends="compile.module.util,compile.module.openapi" description="compile module starteamIntegration production classes">
    <mkdir dir="${starteamintegration.output.dir}"/>
    <javac2 destdir="${starteamintegration.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.starteamintegration}/bin/javac">
      <compilerarg line="${compiler.args.starteamintegration}"/>
      <bootclasspath refid="starteamintegration.module.bootclasspath"/>
      <classpath refid="starteamintegration.module.classpath"/>
      <src refid="starteamintegration.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.starteamintegration"/>
    </javac2>
    <copy todir="${starteamintegration.output.dir}">
      <fileset dir="${module.starteamintegration.basedir}/plugins/starteam/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.starteamintegration"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.starteamintegration.tests" depends="compile.module.starteamintegration.production" description="compile module starteamIntegration test classes" unless="skip.tests"/>
  
  <target name="clean.module.starteamintegration" description="cleanup module">
    <delete dir="${starteamintegration.output.dir}"/>
    <delete dir="${starteamintegration.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.samples.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.samples" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.samples" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.samples" value="${compiler.args}"/>
  
  <property name="samples.output.dir" value="${module.samples.basedir}/doc/classes"/>
  <property name="samples.testoutput.dir" value="${module.samples.basedir}/doc/classes"/>
  
  <path id="samples.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="samples.module.classpath">
    <path refid="${module.jdk.classpath.samples}"/>
    <pathelement location="${openapi.output.dir}"/>
    <pathelement location="${util.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.samples"/>
  
  <patternset id="excluded.from.compilation.samples">
    <patternset refid="excluded.from.module.samples"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="samples.module.sourcepath">
    <dirset dir="${module.samples.basedir}/doc">
      <include name="openapi/examples/actions/src"/>
      <include name="openapi/examples/plugin/src"/>
      <include name="openapi/examples/toolWindow/src"/>
      <include name="openapi/examples/vfs/src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.samples" depends="compile.module.samples.production,compile.module.samples.tests" description="compile module samples"/>
  
  <target name="compile.module.samples.production" depends="compile.module.openapi,compile.module.util" description="compile module samples production classes">
    <mkdir dir="${samples.output.dir}"/>
    <javac2 destdir="${samples.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.samples}/bin/javac">
      <compilerarg line="${compiler.args.samples}"/>
      <bootclasspath refid="samples.module.bootclasspath"/>
      <classpath refid="samples.module.classpath"/>
      <src refid="samples.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.samples"/>
    </javac2>
    <copy todir="${samples.output.dir}">
      <fileset dir="${module.samples.basedir}/doc/openapi/examples/actions/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.samples"/>
      </fileset>
      <fileset dir="${module.samples.basedir}/doc/openapi/examples/plugin/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.samples"/>
      </fileset>
      <fileset dir="${module.samples.basedir}/doc/openapi/examples/toolWindow/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.samples"/>
      </fileset>
      <fileset dir="${module.samples.basedir}/doc/openapi/examples/vfs/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.samples"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.samples.tests" depends="compile.module.samples.production" description="compile module samples test classes" unless="skip.tests"/>
  
  <target name="clean.module.samples" description="cleanup module">
    <delete dir="${samples.output.dir}"/>
    <delete dir="${samples.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.inspectiongadgetsplugin.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.inspectiongadgetsplugin" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.inspectiongadgetsplugin" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.inspectiongadgetsplugin" value="${compiler.args}"/>
  
  <property name="inspectiongadgetsplugin.output.dir" value="${module.inspectiongadgetsplugin.basedir}/plugins/InspectionGadgets/classes"/>
  <property name="inspectiongadgetsplugin.testoutput.dir" value="${module.inspectiongadgetsplugin.basedir}/plugins/InspectionGadgets/classes"/>
  
  <path id="inspectiongadgetsplugin.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="inspectiongadgetsplugin.module.classpath">
    <path refid="${module.jdk.classpath.inspectiongadgetsplugin}"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.log4j.classpath"/>
    <pathelement location="${openapi.output.dir}"/>
    <pathelement location="${util.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.inspectiongadgetsplugin"/>
  
  <patternset id="excluded.from.compilation.inspectiongadgetsplugin">
    <patternset refid="excluded.from.module.inspectiongadgetsplugin"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="inspectiongadgetsplugin.module.sourcepath">
    <dirset dir="${module.inspectiongadgetsplugin.basedir}/plugins/InspectionGadgets">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.inspectiongadgetsplugin" depends="compile.module.inspectiongadgetsplugin.production,compile.module.inspectiongadgetsplugin.tests" description="compile module InspectionGadgetsPlugin"/>
  
  <target name="compile.module.inspectiongadgetsplugin.production" depends="compile.module.openapi,compile.module.util" description="compile module InspectionGadgetsPlugin production classes">
    <mkdir dir="${inspectiongadgetsplugin.output.dir}"/>
    <javac2 destdir="${inspectiongadgetsplugin.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.inspectiongadgetsplugin}/bin/javac">
      <compilerarg line="${compiler.args.inspectiongadgetsplugin}"/>
      <bootclasspath refid="inspectiongadgetsplugin.module.bootclasspath"/>
      <classpath refid="inspectiongadgetsplugin.module.classpath"/>
      <src refid="inspectiongadgetsplugin.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.inspectiongadgetsplugin"/>
    </javac2>
    <copy todir="${inspectiongadgetsplugin.output.dir}">
      <fileset dir="${module.inspectiongadgetsplugin.basedir}/plugins/InspectionGadgets/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.inspectiongadgetsplugin"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.inspectiongadgetsplugin.tests" depends="compile.module.inspectiongadgetsplugin.production" description="compile module InspectionGadgetsPlugin test classes" unless="skip.tests"/>
  
  <target name="clean.module.inspectiongadgetsplugin" description="cleanup module">
    <delete dir="${inspectiongadgetsplugin.output.dir}"/>
    <delete dir="${inspectiongadgetsplugin.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.intentionpowerpackplugin.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.intentionpowerpackplugin" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.intentionpowerpackplugin" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.intentionpowerpackplugin" value="${compiler.args}"/>
  
  <property name="intentionpowerpackplugin.output.dir" value="${module.intentionpowerpackplugin.basedir}/plugins/IntentionPowerPak/classes"/>
  <property name="intentionpowerpackplugin.testoutput.dir" value="${module.intentionpowerpackplugin.basedir}/plugins/IntentionPowerPak/classes"/>
  
  <path id="intentionpowerpackplugin.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="intentionpowerpackplugin.module.classpath">
    <path refid="${module.jdk.classpath.intentionpowerpackplugin}"/>
    <pathelement location="${openapi.output.dir}"/>
    <pathelement location="${util.output.dir}"/>
    <path refid="library.log4j.classpath"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.junit.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.intentionpowerpackplugin"/>
  
  <patternset id="excluded.from.compilation.intentionpowerpackplugin">
    <patternset refid="excluded.from.module.intentionpowerpackplugin"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="intentionpowerpackplugin.module.sourcepath">
    <dirset dir="${module.intentionpowerpackplugin.basedir}/plugins/IntentionPowerPak">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.intentionpowerpackplugin" depends="compile.module.intentionpowerpackplugin.production,compile.module.intentionpowerpackplugin.tests" description="compile module IntentionPowerPackPlugin"/>
  
  <target name="compile.module.intentionpowerpackplugin.production" depends="compile.module.openapi,compile.module.util" description="compile module IntentionPowerPackPlugin production classes">
    <mkdir dir="${intentionpowerpackplugin.output.dir}"/>
    <javac2 destdir="${intentionpowerpackplugin.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.intentionpowerpackplugin}/bin/javac">
      <compilerarg line="${compiler.args.intentionpowerpackplugin}"/>
      <bootclasspath refid="intentionpowerpackplugin.module.bootclasspath"/>
      <classpath refid="intentionpowerpackplugin.module.classpath"/>
      <src refid="intentionpowerpackplugin.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.intentionpowerpackplugin"/>
    </javac2>
    <copy todir="${intentionpowerpackplugin.output.dir}">
      <fileset dir="${module.intentionpowerpackplugin.basedir}/plugins/IntentionPowerPak/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.intentionpowerpackplugin"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.intentionpowerpackplugin.tests" depends="compile.module.intentionpowerpackplugin.production" description="compile module IntentionPowerPackPlugin test classes" unless="skip.tests"/>
  
  <target name="clean.module.intentionpowerpackplugin" description="cleanup module">
    <delete dir="${intentionpowerpackplugin.output.dir}"/>
    <delete dir="${intentionpowerpackplugin.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.icons.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.icons" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.icons" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.icons" value="${compiler.args}"/>
  
  <property name="icons.output.dir" value="${module.icons.basedir}/icons/classes"/>
  <property name="icons.testoutput.dir" value="${module.icons.basedir}/icons/classes"/>
  
  <path id="icons.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="icons.module.classpath">
    <path refid="${module.jdk.classpath.icons}"/>
  </path>
  
  
  <patternset id="excluded.from.module.icons"/>
  
  <patternset id="excluded.from.compilation.icons">
    <patternset refid="excluded.from.module.icons"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="icons.module.sourcepath">
    <dirset dir="${module.icons.basedir}/icons">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.icons" depends="compile.module.icons.production,compile.module.icons.tests" description="compile module icons"/>
  
  <target name="compile.module.icons.production" description="compile module icons production classes">
    <mkdir dir="${icons.output.dir}"/>
    <javac2 destdir="${icons.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.icons}/bin/javac">
      <compilerarg line="${compiler.args.icons}"/>
      <bootclasspath refid="icons.module.bootclasspath"/>
      <classpath refid="icons.module.classpath"/>
      <src refid="icons.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.icons"/>
    </javac2>
    <copy todir="${icons.output.dir}">
      <fileset dir="${module.icons.basedir}/icons/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.icons"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.icons.tests" depends="compile.module.icons.production" description="compile module icons test classes" unless="skip.tests"/>
  
  <target name="clean.module.icons" description="cleanup module">
    <delete dir="${icons.output.dir}"/>
    <delete dir="${icons.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.jasper2.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.jasper2" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.jasper2" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.jasper2" value="${compiler.args}"/>
  
  <property name="jasper2.output.dir" value="${module.jasper2.basedir}/jasper2/classes"/>
  <property name="jasper2.testoutput.dir" value="${module.jasper2.basedir}/jasper2/classes"/>
  
  <path id="jasper2.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="jasper2.module.classpath">
    <path refid="${module.jdk.classpath.jasper2}"/>
    <path refid="library.jasper2.classpath"/>
    <path refid="library.ant.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.jasper2"/>
  
  <patternset id="excluded.from.compilation.jasper2">
    <patternset refid="excluded.from.module.jasper2"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="jasper2.module.sourcepath">
    <dirset dir="${module.jasper2.basedir}/jasper2">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.jasper2" depends="compile.module.jasper2.production,compile.module.jasper2.tests" description="compile module jasper2"/>
  
  <target name="compile.module.jasper2.production" description="compile module jasper2 production classes">
    <mkdir dir="${jasper2.output.dir}"/>
    <javac2 destdir="${jasper2.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.jasper2}/bin/javac">
      <compilerarg line="${compiler.args.jasper2}"/>
      <bootclasspath refid="jasper2.module.bootclasspath"/>
      <classpath refid="jasper2.module.classpath"/>
      <src refid="jasper2.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jasper2"/>
    </javac2>
    <copy todir="${jasper2.output.dir}">
      <fileset dir="${module.jasper2.basedir}/jasper2/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.jasper2"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.jasper2.tests" depends="compile.module.jasper2.production" description="compile module jasper2 test classes" unless="skip.tests"/>
  
  <target name="clean.module.jasper2" description="cleanup module">
    <delete dir="${jasper2.output.dir}"/>
    <delete dir="${jasper2.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.license_common.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.license_common" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.license_common" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.license_common" value="${compiler.args}"/>
  
  <property name="license_common.output.dir" value="${module.license_common.basedir}/licenseCommon/classes"/>
  <property name="license_common.testoutput.dir" value="${module.license_common.basedir}/licenseCommon/testClasses"/>
  
  <path id="license_common.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="license_common.module.classpath">
    <path refid="${module.jdk.classpath.license_common}"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.mocks.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.license_common"/>
  
  <patternset id="excluded.from.compilation.license_common">
    <patternset refid="excluded.from.module.license_common"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="license_common.module.sourcepath">
    <dirset dir="${module.license_common.basedir}/licenseCommon">
      <include name="source"/>
    </dirset>
  </path>
  
  <path id="license_common.module.test.sourcepath">
    <dirset dir="${module.license_common.basedir}/licenseCommon">
      <include name="testSource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.license_common" depends="compile.module.license_common.production,compile.module.license_common.tests" description="compile module license_common"/>
  
  <target name="compile.module.license_common.production" description="compile module license_common production classes">
    <mkdir dir="${license_common.output.dir}"/>
    <javac2 destdir="${license_common.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.license_common}/bin/javac">
      <compilerarg line="${compiler.args.license_common}"/>
      <bootclasspath refid="license_common.module.bootclasspath"/>
      <classpath refid="license_common.module.classpath"/>
      <src refid="license_common.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.license_common"/>
    </javac2>
    <copy todir="${license_common.output.dir}">
      <fileset dir="${module.license_common.basedir}/licenseCommon/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.license_common"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.license_common.tests" depends="compile.module.license_common.production" description="compile module license_common test classes" unless="skip.tests">
    <mkdir dir="${license_common.testoutput.dir}"/>
    <javac2 destdir="${license_common.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.license_common}/bin/javac">
      <compilerarg line="${compiler.args.license_common}"/>
      <classpath refid="license_common.module.classpath"/>
      <classpath location="${license_common.output.dir}"/>
      <src refid="license_common.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.license_common"/>
    </javac2>
    <copy todir="${license_common.testoutput.dir}">
      <fileset dir="${module.license_common.basedir}/licenseCommon/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.license_common"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.license_common" description="cleanup module">
    <delete dir="${license_common.output.dir}"/>
    <delete dir="${license_common.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.pallada.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.pallada" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.pallada" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.pallada" value="${compiler.args}"/>
  
  <property name="pallada.output.dir" value="${module.pallada.basedir}/classes/main"/>
  <property name="pallada.testoutput.dir" value="${module.pallada.basedir}/classes/test"/>
  
  <path id="pallada.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="pallada.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.pallada}"/>
    <pathelement location="${module.pallada.basedir}/lib/xerces.jar"/>
    <pathelement location="${idea_rt.output.dir}"/>
    <pathelement location="${module.pallada.basedir}/lib/GLUE.jar"/>
    <pathelement location="${module.pallada.basedir}/lib/jh.jar"/>
    <pathelement location="${module.pallada.basedir}/lib/JNIWrap.jar"/>
    <pathelement location="${module.pallada.basedir}/lib/xmlrpc-1.1.jar"/>
    <pathelement location="${parsergen.output.dir}"/>
    <pathelement location="${parsergen.testoutput.dir}"/>
    <pathelement location="${license_common.output.dir}"/>
    <pathelement location="${license_common.testoutput.dir}"/>
    <pathelement location="${module.pallada.basedir}/lib/ui.jar"/>
    <pathelement location="${module.pallada.basedir}/lib/JLmgr.jar"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.ant.classpath"/>
    <path refid="library.mocks.classpath"/>
    <path refid="library.velocity.classpath"/>
    <pathelement location="${util.output.dir}"/>
    <path refid="library.bcel.classpath"/>
    <path refid="library.log4j.classpath"/>
    <pathelement location="${uidesignercore.output.dir}"/>
    <pathelement location="${uidesignercore.testoutput.dir}"/>
    <pathelement location="${openapi.output.dir}"/>
    <pathelement location="${jasper2.output.dir}"/>
    <pathelement location="${forms_rt.output.dir}"/>
    <path refid="library.trove4j.classpath"/>
    <path refid="library.servlets.classpath"/>
    <pathelement location="${module.pallada.basedir}/lib/yjp-controller-api-redist.jar"/>
    <pathelement location="${internalresources.output.dir}"/>
    <pathelement location="${icons.output.dir}"/>
    <pathelement location="${resources.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.pallada"/>
  
  <patternset id="excluded.from.compilation.pallada">
    <patternset refid="excluded.from.module.pallada"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="pallada.module.sourcepath">
    <dirset dir="${module.pallada.basedir}">
      <include name="rtaspectsource"/>
      <include name="source"/>
    </dirset>
  </path>
  
  <path id="pallada.module.test.sourcepath">
    <dirset dir="${module.pallada.basedir}">
      <include name="testSource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.pallada" depends="compile.module.pallada.production,compile.module.pallada.tests" description="compile module pallada"/>
  
  <target name="compile.module.pallada.production" depends="compile.module.idea_rt,compile.module.parsergen,compile.module.license_common,compile.module.util,compile.module.uidesignercore,compile.module.openapi,compile.module.jasper2,compile.module.forms_rt,compile.module.internalresources,compile.module.icons,compile.module.resources" description="compile module pallada production classes">
    <mkdir dir="${pallada.output.dir}"/>
    <javac2 destdir="${pallada.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.pallada}/bin/javac">
      <compilerarg line="${compiler.args.pallada}"/>
      <bootclasspath refid="pallada.module.bootclasspath"/>
      <classpath refid="pallada.module.classpath"/>
      <src refid="pallada.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.pallada"/>
    </javac2>
    <copy todir="${pallada.output.dir}">
      <fileset dir="${module.pallada.basedir}/rtaspectsource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.pallada"/>
      </fileset>
      <fileset dir="${module.pallada.basedir}/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.pallada"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.pallada.tests" depends="compile.module.pallada.production" description="compile module pallada test classes" unless="skip.tests">
    <mkdir dir="${pallada.testoutput.dir}"/>
    <javac2 destdir="${pallada.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.pallada}/bin/javac">
      <compilerarg line="${compiler.args.pallada}"/>
      <classpath refid="pallada.module.classpath"/>
      <classpath location="${pallada.output.dir}"/>
      <src refid="pallada.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.pallada"/>
    </javac2>
    <copy todir="${pallada.testoutput.dir}">
      <fileset dir="${module.pallada.basedir}/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.pallada"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.pallada" description="cleanup module">
    <delete dir="${pallada.output.dir}"/>
    <delete dir="${pallada.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.weblogictests.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.weblogictests" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.weblogictests" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.weblogictests" value="${compiler.args}"/>
  
  <property name="weblogictests.output.dir" value="${module.weblogictests.basedir}/plugins/weblogic/classes/testClasses"/>
  <property name="weblogictests.testoutput.dir" value="${module.weblogictests.basedir}/plugins/weblogic/classes/testClasses"/>
  
  <path id="weblogictests.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="weblogictests.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.weblogictests}"/>
    <pathelement location="${pallada.output.dir}"/>
    <pathelement location="${pallada.testoutput.dir}"/>
    <pathelement location="${openapi.output.dir}"/>
    <pathelement location="${util.output.dir}"/>
    <pathelement location="${weblogic.output.dir}"/>
    <pathelement location="${forms_rt.output.dir}"/>
    <pathelement location="${idea_rt.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.jdom.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.weblogictests"/>
  
  <patternset id="excluded.from.compilation.weblogictests">
    <patternset refid="excluded.from.module.weblogictests"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="weblogictests.module.test.sourcepath">
    <dirset dir="${module.weblogictests.basedir}/plugins/weblogic">
      <include name="testSource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.weblogictests" depends="compile.module.weblogictests.production,compile.module.weblogictests.tests" description="compile module weblogicTests"/>
  
  <target name="compile.module.weblogictests.production" depends="compile.module.pallada,compile.module.openapi,compile.module.util,compile.module.weblogic,compile.module.forms_rt,compile.module.idea_rt" description="compile module weblogicTests production classes"/>
  
  <target name="compile.module.weblogictests.tests" depends="compile.module.weblogictests.production" description="compile module weblogicTests test classes" unless="skip.tests">
    <mkdir dir="${weblogictests.testoutput.dir}"/>
    <javac2 destdir="${weblogictests.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.weblogictests}/bin/javac">
      <compilerarg line="${compiler.args.weblogictests}"/>
      <classpath refid="weblogictests.module.classpath"/>
      <classpath location="${weblogictests.output.dir}"/>
      <src refid="weblogictests.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.weblogictests"/>
    </javac2>
    <copy todir="${weblogictests.testoutput.dir}">
      <fileset dir="${module.weblogictests.basedir}/plugins/weblogic/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.weblogictests"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.weblogictests" description="cleanup module">
    <delete dir="${weblogictests.output.dir}"/>
    <delete dir="${weblogictests.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.internalplugins.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.internalplugins" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.internalplugins" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.internalplugins" value="${compiler.args}"/>
  
  <property name="internalplugins.output.dir" value="${module.internalplugins.basedir}/internalPlugins/classes"/>
  <property name="internalplugins.testoutput.dir" value="${module.internalplugins.basedir}/internalPlugins/testClasses"/>
  
  <path id="internalplugins.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="internalplugins.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.internalplugins}"/>
    <pathelement location="${openapi.output.dir}"/>
    <pathelement location="${util.output.dir}"/>
    <pathelement location="${pallada.output.dir}"/>
    <pathelement location="${pallada.testoutput.dir}"/>
    <path refid="library.junit.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.internalplugins"/>
  
  <patternset id="excluded.from.compilation.internalplugins">
    <patternset refid="excluded.from.module.internalplugins"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="internalplugins.module.sourcepath">
    <dirset dir="${module.internalplugins.basedir}/plugins/comparingReferences">
      <include name="source"/>
    </dirset>
    <dirset dir="${module.internalplugins.basedir}/plugins/conditionalOperatorConvertor">
      <include name="source"/>
    </dirset>
    <dirset dir="${module.internalplugins.basedir}/plugins/performance">
      <include name="source"/>
    </dirset>
  </path>
  
  <path id="internalplugins.module.test.sourcepath">
    <dirset dir="${module.internalplugins.basedir}/plugins/conditionalOperatorConvertor">
      <include name="testSrc"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.internalplugins" depends="compile.module.internalplugins.production,compile.module.internalplugins.tests" description="compile module internalPlugins"/>
  
  <target name="compile.module.internalplugins.production" depends="compile.module.openapi,compile.module.util,compile.module.pallada" description="compile module internalPlugins production classes">
    <mkdir dir="${internalplugins.output.dir}"/>
    <javac2 destdir="${internalplugins.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.internalplugins}/bin/javac">
      <compilerarg line="${compiler.args.internalplugins}"/>
      <bootclasspath refid="internalplugins.module.bootclasspath"/>
      <classpath refid="internalplugins.module.classpath"/>
      <src refid="internalplugins.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.internalplugins"/>
    </javac2>
    <copy todir="${internalplugins.output.dir}">
      <fileset dir="${module.internalplugins.basedir}/plugins/comparingReferences/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.internalplugins"/>
      </fileset>
      <fileset dir="${module.internalplugins.basedir}/plugins/conditionalOperatorConvertor/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.internalplugins"/>
      </fileset>
      <fileset dir="${module.internalplugins.basedir}/plugins/performance/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.internalplugins"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.internalplugins.tests" depends="compile.module.internalplugins.production" description="compile module internalPlugins test classes" unless="skip.tests">
    <mkdir dir="${internalplugins.testoutput.dir}"/>
    <javac2 destdir="${internalplugins.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.internalplugins}/bin/javac">
      <compilerarg line="${compiler.args.internalplugins}"/>
      <classpath refid="internalplugins.module.classpath"/>
      <classpath location="${internalplugins.output.dir}"/>
      <src refid="internalplugins.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.internalplugins"/>
    </javac2>
    <copy todir="${internalplugins.testoutput.dir}">
      <fileset dir="${module.internalplugins.basedir}/plugins/conditionalOperatorConvertor/testSrc">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.internalplugins"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.internalplugins" description="cleanup module">
    <delete dir="${internalplugins.output.dir}"/>
    <delete dir="${internalplugins.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.structuralsearch.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.structuralsearch" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.structuralsearch" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.structuralsearch" value="${compiler.args}"/>
  
  <property name="structuralsearch.output.dir" value="${module.structuralsearch.basedir}/plugins/structuralsearch/classes"/>
  <property name="structuralsearch.testoutput.dir" value="${module.structuralsearch.basedir}/plugins/structuralsearch/testClasses"/>
  
  <path id="structuralsearch.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="structuralsearch.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.structuralsearch}"/>
    <pathelement location="${pallada.output.dir}"/>
    <pathelement location="${pallada.testoutput.dir}"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${util.output.dir}"/>
    <path refid="library.jdom.classpath"/>
    <pathelement location="${openapi.output.dir}"/>
    <path refid="library.trove4j.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.structuralsearch"/>
  
  <patternset id="excluded.from.compilation.structuralsearch">
    <patternset refid="excluded.from.module.structuralsearch"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="structuralsearch.module.sourcepath">
    <dirset dir="${module.structuralsearch.basedir}/plugins/structuralsearch">
      <include name="source"/>
    </dirset>
  </path>
  
  <path id="structuralsearch.module.test.sourcepath">
    <dirset dir="${module.structuralsearch.basedir}/plugins/structuralsearch">
      <include name="testSource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.structuralsearch" depends="compile.module.structuralsearch.production,compile.module.structuralsearch.tests" description="compile module structuralsearch"/>
  
  <target name="compile.module.structuralsearch.production" depends="compile.module.pallada,compile.module.util,compile.module.openapi" description="compile module structuralsearch production classes">
    <mkdir dir="${structuralsearch.output.dir}"/>
    <javac2 destdir="${structuralsearch.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.structuralsearch}/bin/javac">
      <compilerarg line="${compiler.args.structuralsearch}"/>
      <bootclasspath refid="structuralsearch.module.bootclasspath"/>
      <classpath refid="structuralsearch.module.classpath"/>
      <src refid="structuralsearch.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.structuralsearch"/>
    </javac2>
    <copy todir="${structuralsearch.output.dir}">
      <fileset dir="${module.structuralsearch.basedir}/plugins/structuralsearch/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.structuralsearch"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.structuralsearch.tests" depends="compile.module.structuralsearch.production" description="compile module structuralsearch test classes" unless="skip.tests">
    <mkdir dir="${structuralsearch.testoutput.dir}"/>
    <javac2 destdir="${structuralsearch.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.structuralsearch}/bin/javac">
      <compilerarg line="${compiler.args.structuralsearch}"/>
      <classpath refid="structuralsearch.module.classpath"/>
      <classpath location="${structuralsearch.output.dir}"/>
      <src refid="structuralsearch.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.structuralsearch"/>
    </javac2>
    <copy todir="${structuralsearch.testoutput.dir}">
      <fileset dir="${module.structuralsearch.basedir}/plugins/structuralsearch/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.structuralsearch"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.structuralsearch" description="cleanup module">
    <delete dir="${structuralsearch.output.dir}"/>
    <delete dir="${structuralsearch.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.cc_special.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.cc_special" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.cc_special" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.cc_special" value="${compiler.args}"/>
  
  <property name="cc_special.output.dir" value="${module.cc_special.basedir}/cc_special/classes"/>
  <property name="cc_special.testoutput.dir" value="${module.cc_special.basedir}/cc_special/classes"/>
  
  <path id="cc_special.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="cc_special.module.classpath">
    <path refid="${module.jdk.classpath.cc_special}"/>
    <pathelement location="${util.output.dir}"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${module.cc_special.basedir}/lib/optional.jar"/>
    <path refid="library.ant.classpath"/>
    <pathelement location="${pallada.output.dir}"/>
    <pathelement location="${pallada.testoutput.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.cc_special"/>
  
  <patternset id="excluded.from.compilation.cc_special">
    <patternset refid="excluded.from.module.cc_special"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="cc_special.module.sourcepath">
    <dirset dir="${module.cc_special.basedir}/cc_special">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.cc_special" depends="compile.module.cc_special.production,compile.module.cc_special.tests" description="compile module cc_special"/>
  
  <target name="compile.module.cc_special.production" depends="compile.module.util,compile.module.pallada" description="compile module cc_special production classes">
    <mkdir dir="${cc_special.output.dir}"/>
    <javac2 destdir="${cc_special.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.cc_special}/bin/javac">
      <compilerarg line="${compiler.args.cc_special}"/>
      <bootclasspath refid="cc_special.module.bootclasspath"/>
      <classpath refid="cc_special.module.classpath"/>
      <src refid="cc_special.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.cc_special"/>
    </javac2>
    <copy todir="${cc_special.output.dir}">
      <fileset dir="${module.cc_special.basedir}/cc_special/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.cc_special"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.cc_special.tests" depends="compile.module.cc_special.production" description="compile module cc_special test classes" unless="skip.tests"/>
  
  <target name="clean.module.cc_special" description="cleanup module">
    <delete dir="${cc_special.output.dir}"/>
    <delete dir="${cc_special.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.cvs_support.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.cvs_support" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.cvs_support" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.cvs_support" value="${compiler.args}"/>
  
  <property name="cvs_support.output.dir" value="${module.cvs_support.basedir}/plugins/cvs2/classes"/>
  <property name="cvs_support.testoutput.dir" value="${module.cvs_support.basedir}/plugins/cvs2/testClasses"/>
  
  <path id="cvs_support.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="cvs_support.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.cvs_support}"/>
    <pathelement location="${pallada.output.dir}"/>
    <pathelement location="${pallada.testoutput.dir}"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${util.output.dir}"/>
    <pathelement location="${openapi.output.dir}"/>
    <pathelement location="${forms_rt.output.dir}"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/sshtools-zlib.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/maverick-ssh1.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/sshtools-ant.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/maverick-ssh2.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/maverick-sftp.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/sshtools-net.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/sshtools-cipher.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/maverick.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/sshtools-scp.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/sshtools-sftp.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/sshtools-util.jar"/>
    <pathelement location="${module.cvs_support.basedir}/plugins/cvs2/lib/sshtools-publickey.jar"/>
  </path>
  
  
  <patternset id="excluded.from.module.cvs_support"/>
  
  <patternset id="excluded.from.compilation.cvs_support">
    <patternset refid="excluded.from.module.cvs_support"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="cvs_support.module.sourcepath">
    <dirset dir="${module.cvs_support.basedir}/plugins/cvs2">
      <include name="javacvs-src"/>
      <include name="maverick/examples"/>
      <include name="maverick_utils"/>
      <include name="smartcvs-src"/>
      <include name="source"/>
    </dirset>
  </path>
  
  <path id="cvs_support.module.test.sourcepath">
    <dirset dir="${module.cvs_support.basedir}/plugins/cvs2">
      <include name="testSource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.cvs_support" depends="compile.module.cvs_support.production,compile.module.cvs_support.tests" description="compile module cvs_support"/>
  
  <target name="compile.module.cvs_support.production" depends="compile.module.pallada,compile.module.util,compile.module.openapi,compile.module.forms_rt" description="compile module cvs_support production classes">
    <mkdir dir="${cvs_support.output.dir}"/>
    <javac2 destdir="${cvs_support.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.cvs_support}/bin/javac">
      <compilerarg line="${compiler.args.cvs_support}"/>
      <bootclasspath refid="cvs_support.module.bootclasspath"/>
      <classpath refid="cvs_support.module.classpath"/>
      <src refid="cvs_support.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.cvs_support"/>
    </javac2>
    <copy todir="${cvs_support.output.dir}">
      <fileset dir="${module.cvs_support.basedir}/plugins/cvs2/javacvs-src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.cvs_support"/>
      </fileset>
      <fileset dir="${module.cvs_support.basedir}/plugins/cvs2/maverick/examples">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.cvs_support"/>
      </fileset>
      <fileset dir="${module.cvs_support.basedir}/plugins/cvs2/maverick_utils">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.cvs_support"/>
      </fileset>
      <fileset dir="${module.cvs_support.basedir}/plugins/cvs2/smartcvs-src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.cvs_support"/>
      </fileset>
      <fileset dir="${module.cvs_support.basedir}/plugins/cvs2/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.cvs_support"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.cvs_support.tests" depends="compile.module.cvs_support.production" description="compile module cvs_support test classes" unless="skip.tests">
    <mkdir dir="${cvs_support.testoutput.dir}"/>
    <javac2 destdir="${cvs_support.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.cvs_support}/bin/javac">
      <compilerarg line="${compiler.args.cvs_support}"/>
      <classpath refid="cvs_support.module.classpath"/>
      <classpath location="${cvs_support.output.dir}"/>
      <src refid="cvs_support.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.cvs_support"/>
    </javac2>
    <copy todir="${cvs_support.testoutput.dir}">
      <fileset dir="${module.cvs_support.basedir}/plugins/cvs2/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.cvs_support"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.cvs_support" description="cleanup module">
    <delete dir="${cvs_support.output.dir}"/>
    <delete dir="${cvs_support.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.license_server.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.license_server" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.license_server" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.license_server" value="${compiler.args}"/>
  
  <property name="license_server.output.dir" value="${module.license_server.basedir}/licenseServer/classes"/>
  <property name="license_server.testoutput.dir" value="${module.license_server.basedir}/licenseServer/testClasses"/>
  
  <path id="license_server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="license_server.module.classpath">
    <path refid="${module.jdk.classpath.license_server}"/>
    <pathelement location="${license_common.output.dir}"/>
    <pathelement location="${license_common.testoutput.dir}"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.junit.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.license_server"/>
  
  <patternset id="excluded.from.compilation.license_server">
    <patternset refid="excluded.from.module.license_server"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  <path id="license_server.module.sourcepath">
    <dirset dir="${module.license_server.basedir}/licenseServer">
      <include name="source"/>
    </dirset>
  </path>
  
  <path id="license_server.module.test.sourcepath">
    <dirset dir="${module.license_server.basedir}/licenseServer">
      <include name="testSource"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.license_server" depends="compile.module.license_server.production,compile.module.license_server.tests" description="compile module license_server"/>
  
  <target name="compile.module.license_server.production" depends="compile.module.license_common" description="compile module license_server production classes">
    <mkdir dir="${license_server.output.dir}"/>
    <javac2 destdir="${license_server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.license_server}/bin/javac">
      <compilerarg line="${compiler.args.license_server}"/>
      <bootclasspath refid="license_server.module.bootclasspath"/>
      <classpath refid="license_server.module.classpath"/>
      <src refid="license_server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.license_server"/>
    </javac2>
    <copy todir="${license_server.output.dir}">
      <fileset dir="${module.license_server.basedir}/licenseServer/source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.license_server"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.license_server.tests" depends="compile.module.license_server.production" description="compile module license_server test classes" unless="skip.tests">
    <mkdir dir="${license_server.testoutput.dir}"/>
    <javac2 destdir="${license_server.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memoryMaximumSize="${compiler.max.memory}" fork="true" executable="${module.jdk.home.license_server}/bin/javac">
      <compilerarg line="${compiler.args.license_server}"/>
      <classpath refid="license_server.module.classpath"/>
      <classpath location="${license_server.output.dir}"/>
      <src refid="license_server.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.license_server"/>
    </javac2>
    <copy todir="${license_server.testoutput.dir}">
      <fileset dir="${module.license_server.basedir}/licenseServer/testSource">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
        <patternset refid="excluded.from.compilation.license_server"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.license_server" description="cleanup module">
    <delete dir="${license_server.output.dir}"/>
    <delete dir="${license_server.testoutput.dir}"/>
  </target>
  
  
  <dirname property="module.main.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.main" value="${project.jdk.home}"/>
  <property name="module.jdk.classpath.main" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.main" value="${compiler.args}"/>
  
  <property name="main.output.dir" value="undefined"/>
  <property name="main.testoutput.dir" value="undefined"/>
  
  <path id="main.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="main.module.classpath">
    <path refid="library.generic_collections.classpath"/>
    <path refid="${module.jdk.classpath.main}"/>
    <pathelement location="${pallada.output.dir}"/>
    <pathelement location="${pallada.testoutput.dir}"/>
    <pathelement location="${cvs_support.output.dir}"/>
    <pathelement location="${cvs_support.testoutput.dir}"/>
    <pathelement location="${forms_rt.output.dir}"/>
    <pathelement location="${idea_rt.output.dir}"/>
    <pathelement location="${jasper2.output.dir}"/>
    <pathelement location="${javac2.output.dir}"/>
    <pathelement location="${jsr45debug.output.dir}"/>
    <pathelement location="${jsr45debug.testoutput.dir}"/>
    <pathelement location="${license_common.output.dir}"/>
    <pathelement location="${license_common.testoutput.dir}"/>
    <pathelement location="${license_server.output.dir}"/>
    <pathelement location="${license_server.testoutput.dir}"/>
    <pathelement location="${openapi.output.dir}"/>
    <pathelement location="${parsergen.output.dir}"/>
    <pathelement location="${parsergen.testoutput.dir}"/>
    <pathelement location="${starteamintegration.output.dir}"/>
    <pathelement location="${structuralsearch.output.dir}"/>
    <pathelement location="${structuralsearch.testoutput.dir}"/>
    <pathelement location="${tomcatintegration.output.dir}"/>
    <pathelement location="${tomcatintegration.testoutput.dir}"/>
    <pathelement location="${uidesignercore.output.dir}"/>
    <pathelement location="${uidesignercore.testoutput.dir}"/>
    <pathelement location="${util.output.dir}"/>
    <pathelement location="${weblogic.output.dir}"/>
    <pathelement location="${inspectiongadgetsplugin.output.dir}"/>
    <pathelement location="${intentionpowerpackplugin.output.dir}"/>
    <pathelement location="${icons.output.dir}"/>
    <pathelement location="${internalplugins.output.dir}"/>
    <pathelement location="${internalplugins.testoutput.dir}"/>
    <pathelement location="${internalresources.output.dir}"/>
    <pathelement location="${resources.output.dir}"/>
    <pathelement location="${samples.output.dir}"/>
    <pathelement location="${weblogicwrapper.output.dir}"/>
    <pathelement location="${weblogicwrapperimpl.output.dir}"/>
    <path refid="library.junit.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.main"/>
  
  <patternset id="excluded.from.compilation.main">
    <patternset refid="excluded.from.module.main"/>
    <patternset refid="compiler.excluded"/>
  </patternset>
  
  
  <target name="compile.module.main" depends="compile.module.main.production,compile.module.main.tests" description="compile module main"/>
  
  <target name="compile.module.main.production" depends="compile.module.pallada,compile.module.cvs_support,compile.module.forms_rt,compile.module.idea_rt,compile.module.jasper2,compile.module.javac2,compile.module.jsr45debug,compile.module.license_common,compile.module.license_server,compile.module.openapi,compile.module.parsergen,compile.module.starteamintegration,compile.module.structuralsearch,compile.module.tomcatintegration,compile.module.uidesignercore,compile.module.util,compile.module.weblogic,compile.module.inspectiongadgetsplugin,compile.module.intentionpowerpackplugin,compile.module.icons,compile.module.internalplugins,compile.module.internalresources,compile.module.resources,compile.module.samples,compile.module.weblogicwrapper,compile.module.weblogicwrapperimpl" description="compile module main production classes"/>
  
  <target name="compile.module.main.tests" depends="compile.module.main.production" description="compile module main test classes" unless="skip.tests"/>
  
  <target name="clean.module.main" description="cleanup module">
    <delete dir="${main.output.dir}"/>
    <delete dir="${main.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.license_server, clean.module.cc_special, clean.module.openapi, clean.module.tomcatintegration, clean.module.jasper2, clean.module.cvs_support, clean.module.weblogic, clean.module.parsergen, clean.module.weblogicwrapperimpl, clean.module.icons, clean.module.jsr45debug, clean.module.intentionpowerpackplugin, clean.module.internalplugins, clean.module.starteamintegration, clean.module.license_common, clean.module.inspectiongadgetsplugin, clean.module.javac2, clean.module.forms_rt, clean.module.structuralsearch, clean.module.internalresources, clean.module.util, clean.module.samples, clean.module.weblogictests, clean.module.resources, clean.module.idea_rt, clean.module.uidesignercore, clean.module.pallada, clean.module.weblogicwrapper, clean.module.main" description="cleanup all"/>
  
  <target name="all" depends="init, clean, compile.module.internalresources, compile.module.forms_rt, compile.module.uidesignercore, compile.module.javac2, compile.module.idea_rt, compile.module.weblogicwrapper, compile.module.weblogicwrapperimpl, compile.module.resources, compile.module.util, compile.module.parsergen, compile.module.openapi, compile.module.weblogic, compile.module.jsr45debug, compile.module.tomcatintegration, compile.module.starteamintegration, compile.module.samples, compile.module.inspectiongadgetsplugin, compile.module.intentionpowerpackplugin, compile.module.icons, compile.module.jasper2, compile.module.license_common, compile.module.pallada, compile.module.weblogictests, compile.module.internalplugins, compile.module.structuralsearch, compile.module.cc_special, compile.module.cvs_support, compile.module.license_server, compile.module.main" description="build all"/>
</project>