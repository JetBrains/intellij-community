<?xml version="1.0" ?>

<schema xmlns="http://www.w3.org/2001/XMLSchema"
    targetNamespace="http://www.w3.org/1999/XSL/Transform"
    elementFormDefault="qualified"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <annotation>
        <documentation>

          This is a schema for XSLT 2.0 stylesheets.

          It defines all the elements that appear in the XSLT namespace; it also
          provides hooks that allow the inclusion of user-defined literal result elements,
          extension instructions, and top-level data elements.

          The schema is derived (with kind permission) from a schema for XSLT 1.0 stylesheets
          produced by Asir S Vedamuthu of WebMethods Inc.

          This schema is available for use under the conditions of the W3C Software License
          published at http://www.w3.org/Consortium/Legal/copyright-software-19980720

          The schema is organized as follows:

          PART A: definitions of complex types and model groups used as the basis
                  for element definitions
          PART B: definitions of individual XSLT elements
          PART C: definitions for literal result elements
          PART D: definitions of simple types used in attribute definitions

          This schema does not attempt to define all the constraints that apply to a valid
          XSLT 2.0 stylesheet. It is the intention that all valid stylesheets should conform
          to this schema; however, the schema is non-normative and in the event of any
          conflict, the text of the Recommendation takes precedence.

          This version is dated 2002-07-19
          Author: Michael H Kay, Software AG

        </documentation>
    </annotation>
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!--

    The declaration of xml:space and xml:lang has been commented out because
    of problems processing the schema using various tools

    <import namespace="http://www.w3.org/XML/1998/namespace"
      schemaLocation="http://www.w3.org/2001/xml.xsd"/>

    -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <annotation>
        <documentation>
          PART A: definitions of complex types and model groups used as the basis
                  for element definitions
        </documentation>
    </annotation>
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <complexType name="generic-element-type">
        <attribute name="extension-element-prefixes" type="xsl:tokens"/>
        <attribute name="exclude-result-prefixes" type="xsl:tokens"/>
        <attribute name="exclude-prefixes" type="xsl:tokens"/>
        <attribute name="default-xpath-namespace" type="anyURI"/>
        <!--attribute ref="xml:space"/-->
        <!--attribute ref="xml:lang"/-->
        <anyAttribute namespace="##other" processContents="skip"/>
    </complexType>

    <complexType name="versioned-element-type">
        <complexContent>
            <extension base="xsl:generic-element-type">
                <attribute name="version" type="decimal" use="optional"/>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="content-constructor" mixed="true">
        <complexContent>
            <extension base="xsl:versioned-element-type">
                <group ref="xsl:content-constructor-group" minOccurs="0" maxOccurs="unbounded"/>
            </extension>
        </complexContent>
    </complexType>

    <group name="content-constructor-group">
        <sequence>
            <choice minOccurs="0" maxOccurs="unbounded">
                <element ref="xsl:variable"/>
                <element ref="xsl:instruction"/>
                <group ref="xsl:result-elements"/>
            </choice>
        </sequence>
    </group>

    <element name="declaration" type="xsl:generic-element-type" abstract="true"/>

    <element name="instruction" type="xsl:versioned-element-type" abstract="true"/>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <annotation>
        <documentation>
          PART B: definitions of individual XSLT elements
          Elements are listed in alphabetical order.
        </documentation>
    </annotation>
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <element name="analyze-string" substitutionGroup="xsl:instruction">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence>
                        <element ref="xsl:matching-substring" minOccurs="0" maxOccurs="1"/>
                        <element ref="xsl:non-matching-substring" minOccurs="0" maxOccurs="1"/>
                    </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="apply-imports" substitutionGroup="xsl:instruction">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence minOccurs="0" maxOccurs="unbounded">
                        <element ref="xsl:with-param"/>
                    </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="apply-templates" substitutionGroup="xsl:instruction">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <choice minOccurs="0" maxOccurs="unbounded">
                        <element ref="xsl:sort"/>
                        <element ref="xsl:with-param"/>
                    </choice>
                    <attribute name="select" type="xsl:expression" use="optional" default="node()"/>
                    <attribute name="mode" type="xsl:mode"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="attribute" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="name" type="xsl:avt" use="required"/>
                    <attribute name="namespace" type="xsl:avt"/>
                    <attribute name="disable-output-escaping" type="xsl:yes-or-no"/>
                    <attribute name="type-annotation" type="QName"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="attribute-set" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence minOccurs="0" maxOccurs="unbounded">
                        <element ref="xsl:attribute"/>
                    </sequence>
                    <attribute name="name" type="QName" use="required"/>
                    <attribute name="use-attribute-sets" type="xsl:QNames" use="optional"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="call-template" substitutionGroup="xsl:instruction">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence minOccurs="0" maxOccurs="unbounded">
                        <element ref="xsl:with-param"/>
                    </sequence>
                    <attribute name="name" type="QName" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="choose" substitutionGroup="xsl:instruction">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence>
                        <element ref="xsl:when" minOccurs="1" maxOccurs="unbounded"/>
                        <element ref="xsl:otherwise" minOccurs="0" maxOccurs="1"/>
                    </sequence>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="comment" substitutionGroup="xsl:instruction" type="xsl:content-constructor"/>

    <element name="copy" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="use-attribute-sets" type="xsl:QNames" use="optional"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="copy-of" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="select" type="xsl:expression" use="required"/>
                    <attribute name="separator" type="xsl:avt"/>
                    <attribute name="copy-type-annotations" type="xsl:yes-or-no"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="decimal-format" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="name" type="QName"/>
                    <attribute name="decimal-separator" type="xsl:char" use="optional" default="."/>
                    <attribute name="grouping-separator" type="xsl:char" use="optional" default=","/>
                    <attribute name="infinity" type="string" use="optional" default="Infinity"/>
                    <attribute name="minus-sign" type="xsl:char" use="optional" default="-"/>
                    <attribute name="NaN" type="string" use="optional" default="NaN"/>
                    <attribute name="percent" type="xsl:char" use="optional" default="%"/>
                    <attribute name="per-mille" type="xsl:char" use="optional" default="&#x2030;"/>
                    <attribute name="zero-digit" type="xsl:char" use="optional" default="0"/>
                    <attribute name="digit" type="xsl:char" use="optional" default="#"/>
                    <attribute name="pattern-separator" type="xsl:char" use="optional" default=";"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="element" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="name" type="xsl:avt" use="required"/>
                    <attribute name="namespace" type="xsl:avt" use="optional"/>
                    <attribute name="use-attribute-sets" type="xsl:QNames" use="optional"/>
                    <attribute name="type-annotation" type="QName"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="fallback" substitutionGroup="xsl:instruction" type="xsl:content-constructor"/>

    <element name="for-each" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence>
                        <element ref="xsl:sort" minOccurs="0" maxOccurs="unbounded"/>
                        <group ref="xsl:content-constructor-group"/>
                    </sequence>
                    <attribute name="select" type="xsl:expression" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="for-each-group" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence>
                        <element ref="xsl:sort" minOccurs="0" maxOccurs="unbounded"/>
                        <group ref="xsl:content-constructor-group"/>
                    </sequence>
                    <attribute name="select" type="xsl:expression" use="required"/>
                    <attribute name="group-by" type="xsl:expression"/>
                    <attribute name="group-adjacent" type="xsl:expression"/>
                    <attribute name="group-starting-with" type="xsl:pattern"/>
                    <attribute name="group-ending-with" type="xsl:pattern"/>
                    <attribute name="collation" type="anyURI"/>
                    <attribute name="type" type="QName"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="function" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence>
                        <element ref="xsl:param" minOccurs="0" maxOccurs="unbounded"/>
                        <choice>
                            <element ref="xsl:variable"/>
                            <element ref="xsl:message"/>
                        </choice>
                        <element ref="xsl:result"/>
                    </sequence>
                    <attribute name="name" type="QName" use="required"/>
                    <attribute name="override" type="xsl:yes-or-no" default="yes"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="if" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="test" type="xsl:expression" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="import">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="href" type="anyURI" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="import-schema" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="namespace" type="anyURI"/>
                    <attribute name="schema-location" type="anyURI"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="include" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="href" type="anyURI" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="key" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="name" type="QName" use="required"/>
                    <attribute name="match" type="xsl:pattern" use="required"/>
                    <attribute name="use" type="xsl:expression" use="required"/>
                    <attribute name="collation" type="anyURI"/>
                    <attribute name="type" type="QName"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="matching-substring" type="xsl:content-constructor"/>

    <element name="message" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="terminate" default="no" type="xsl:avt"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="namespace" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="name" type="xsl:avt" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="namespace-alias" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="stylesheet-prefix" type="xsl:prefix-or-default" use="required"/>
                    <attribute name="result-prefix" type="xsl:prefix-or-default" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="non-matching-substring" type="xsl:content-constructor"/>

    <element name="number" substitutionGroup="xsl:instruction">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="level" type="xsl:level" default="single"/>
                    <attribute name="count" type="xsl:pattern"/>
                    <attribute name="from" type="xsl:pattern"/>
                    <attribute name="value" type="xsl:expression"/>
                    <attribute name="format" type="xsl:avt" use="optional" default="1"/>
                    <attribute name="lang" type="xsl:avt"/>
                    <attribute name="letter-value" type="xsl:avt"/>
                    <attribute name="grouping-separator" type="xsl:avt"/>
                    <attribute name="grouping-size" type="xsl:avt"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="output" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:generic-element-type">
                    <attribute name="method" type="xsl:method"/>
                    <attribute name="version" type="NMTOKEN"/>
                    <attribute name="encoding" type="string"/>
                    <attribute name="omit-xml-declaration" type="xsl:yes-or-no"/>
                    <attribute name="standalone" type="xsl:yes-or-no"/>
                    <attribute name="doctype-public" type="string"/>
                    <attribute name="doctype-system" type="string"/>
                    <attribute name="cdata-section-elements" type="xsl:QNames"/>
                    <attribute name="escape-uri-attributes" type="xsl:yes-or-no"/>
                    <attribute name="include-content-type" type="xsl:yes-or-no"/>
                    <attribute name="indent" type="xsl:yes-or-no"/>
                    <attribute name="media-type" type="string"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="otherwise" type="xsl:content-constructor"/>

    <element name="param">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="name" type="QName" use="required"/>
                    <attribute name="select" type="xsl:expression"/>
                    <attribute name="type" type="xsl:sequence-type"/>
                    <attribute name="type-information" type="xsl:type-information-type"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="preserve-space" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="elements" type="xsl:nametests" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="principal-result-document" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="format" type="QName"/>
                    <attribute name="href" type="xsl:avt"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="processing-instruction" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="name" type="xsl:avt" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="result">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="select" type="xsl:expression" use="optional"/>
                    <attribute name="type" type="xsl:sequence-type" use="optional"/>
                    <attribute name="type-information" type="xsl:type-information-type"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="result-document" substitutionGroup="xsl:instruction">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="format" type="QName"/>
                    <attribute name="href" type="xsl:avt"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="sort">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="select" type="xsl:expression" use="optional" default="."/>
                    <attribute name="lang" type="xsl:avt"/>
                    <attribute name="data-type" type="xsl:avt" use="optional" default="text"/>
                    <attribute name="order" type="xsl:avt" use="optional" default="ascending"/>
                    <attribute name="case-order" type="xsl:avt"/>
                    <attribute name="type" type="xsl:avt"/>
                    <attribute name="collation" type="xsl:avt"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="sort-key" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence minOccurs="1" maxOccurs="unbounded">
                        <element ref="xsl:sort"/>
                    </sequence>
                    <attribute name="name" type="QName" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="strip-space" substitutionGroup="xsl:declaration">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="elements" type="xsl:nametests" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="stylesheet" substitutionGroup="xsl:transform"/>

    <element name="template" substitutionGroup="xsl:declaration">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <sequence>
                        <element ref="xsl:param" minOccurs="0" maxOccurs="unbounded"/>
                        <group ref="xsl:content-constructor-group"/>
                    </sequence>
                    <attribute name="match" type="xsl:pattern"/>
                    <attribute name="priority" type="decimal"/>
                    <attribute name="mode" type="xsl:modes"/>
                    <attribute name="name" type="QName"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="text" substitutionGroup="xsl:instruction">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="disable-output-escaping" type="xsl:yes-or-no" default="no"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="transform">
        <complexType>
            <complexContent>
                <extension base="xsl:generic-element-type">
                    <sequence>
                        <element ref="xsl:import" minOccurs="0" maxOccurs="unbounded"/>
                        <choice minOccurs="0" maxOccurs="unbounded">
                            <element ref="xsl:declaration"/>
                            <element ref="xsl:variable"/>
                            <element ref="xsl:param"/>
                            <any namespace="##other" processContents="skip"/> <!-- weaker than XSLT 1.0 -->
                        </choice>
                    </sequence>
                    <attribute name="id" type="ID"/>
                    <attribute name="version" type="decimal" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="value-of" substitutionGroup="xsl:instruction">
        <complexType>
            <complexContent>
                <extension base="xsl:versioned-element-type">
                    <attribute name="select" type="xsl:expression" use="required"/>
                    <attribute name="separator" type="xsl:avt"/>
                    <attribute name="disable-output-escaping" type="xsl:yes-or-no" default="no"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="variable">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="name" type="QName" use="required"/>
                    <attribute name="select" type="xsl:expression" use="optional"/>
                    <attribute name="type" type="xsl:sequence-type" use="optional"/>
                    <attribute name="type-information" type="xsl:type-information-type"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="when">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="test" type="xsl:expression" use="required"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <element name="with-param">
        <complexType mixed="true">
            <complexContent>
                <extension base="xsl:content-constructor">
                    <attribute name="name" type="QName" use="required"/>
                    <attribute name="select" type="xsl:expression" use="optional"/>
                    <attribute name="type-information" type="xsl:type-information-type"/>
                </extension>
            </complexContent>
        </complexType>
    </element>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <annotation>
        <documentation>
          PART C: definition of literal result elements

          There are three ways to define the literal result elements
          permissible in a stylesheet.

          (a) do nothing. This allows any element to be used as a literal
              result element, provided it is not in the XSLT namespace

          (b) declare all permitted literal result elements as members
              of the xsl:literal-result-element substitution group

          (c) redefine the model group xsl:result-elements to accommodate
              all permitted literal result elements.

          Literal result elements are allowed to take certain attributes
          in the XSLT namespace. These are defined in the attribute group
          literal-result-element-attributes, which can be included in the
          definition of any literal result element.

        </documentation>
    </annotation>
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <element name="literal-result-element" abstract="true" type="anyType"/>

    <attributeGroup name="literal-result-element-attributes">
        <attribute name="extension-element-prefixes" form="qualified" type="string"/>
        <attribute name="exclude-result-prefixes" form="qualified" type="string"/>
        <attribute name="exclude-prefixes" form="qualified" type="string"/>
        <attribute name="use-attribute-sets" form="qualified" type="xsl:QNames"/>
        <attribute name="version" form="qualified" type="decimal"/>
        <attribute name="type-annotation" form="qualified" type="QName"/>
        <anyAttribute namespace="##other" processContents="skip"/>
    </attributeGroup>

    <group name="result-elements">
        <choice>
            <element ref="xsl:literal-result-element"/>
            <any namespace="##other" processContents="skip"/>
        </choice>
    </group>


    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <annotation>
        <documentation>
          PART D: definitions of simple types used in stylesheet attributes
        </documentation>
    </annotation>
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <simpleType name="avt">
        <annotation>
            <documentation>
              This type is used for all attributes that allow an attribute value template.
              The general rules for the syntax of attribute value templates, and the specific
              rules for each such attribute, are described in the XSLT 2.0 Recommendation.
            </documentation>
        </annotation>
        <restriction base="string"/>
    </simpleType>

    <simpleType name="char">
        <annotation>
            <documentation>
              A string containing exactly one character.
            </documentation>
        </annotation>
        <restriction base="string">
            <length value="1"/>
        </restriction>
    </simpleType>

    <simpleType name="expression">
        <annotation>
            <documentation>
              An XPath 2.0 expression.
            </documentation>
        </annotation>
        <restriction base="string">
            <pattern value=".+"/>
        </restriction>
    </simpleType>

    <simpleType name="level">
        <annotation>
            <documentation>
              The level attribute of xsl:number:
              one of single, multiple, or any.
            </documentation>
        </annotation>
        <restriction base="NCName">
            <enumeration value="single"/>
            <enumeration value="multiple"/>
            <enumeration value="any"/>
        </restriction>
    </simpleType>

    <simpleType name="mode">
        <annotation>
            <documentation>
              The mode attribute of xsl:apply-templates:
              either a QName, or #current, or #default.
            </documentation>
        </annotation>
        <union memberTypes="QName">
            <simpleType>
                <restriction base="string">
                    <enumeration value="#default"/>
                    <enumeration value="#current"/>
                </restriction>
            </simpleType>
        </union>
    </simpleType>

    <simpleType name="modes">
        <annotation>
            <documentation>
              The mode attribute of xsl:template:
              a list, each member being either a QName, or #default.
            </documentation>
        </annotation>
        <list>
            <simpleType>
                <union memberTypes="QName">
                    <simpleType>
                        <restriction base="string">
                            <enumeration value="#default"/>
                        </restriction>
                    </simpleType>
                </union>
            </simpleType>
        </list>
    </simpleType>

    <simpleType name="nametests">
        <annotation>
            <documentation>
              A list of NameTests, as defined in the XPath 2.0 Recommendation.
              Each NameTest is either a QName, or "*", or "prefix:*", or "*:localname"
            </documentation>
        </annotation>
        <list>
            <simpleType>
                <union memberTypes="QName">
                    <simpleType>
                        <restriction base="string">
                            <pattern value="\*"/>
                            <pattern value="\i\c*:\*"/>
                            <pattern value="\*:\i\c*"/>
                        </restriction>
                    </simpleType>
                </union>
            </simpleType>
        </list>
    </simpleType>

    <simpleType name="tokens">
        <list itemType="token"/>
    </simpleType>

    <simpleType name="method">
        <annotation>
            <documentation>
              The method attribute of xsl:output:
              Either one of the recognized names "xml", "xhtml", "html", "text",
              or a QName that must include a prefix.
            </documentation>
        </annotation>
        <union>
            <simpleType>
                <restriction base="NCName">
                    <enumeration value="xml"/>
                    <enumeration value="xhtml"/>
                    <enumeration value="html"/>
                    <enumeration value="text"/>
                </restriction>
            </simpleType>
            <simpleType>
                <restriction base="QName">
                    <pattern value="\c*:\c*"/>
                </restriction>
            </simpleType>
        </union>
    </simpleType>

    <simpleType name="pattern">
        <annotation>
            <documentation>
              A match pattern as defined in the XSLT 2.0 Recommendation.
              The syntax for patterns is a restricted form of the syntax for
              XPath 2.0 expressions.
            </documentation>
        </annotation>
        <restriction base="xsl:expression"/>
    </simpleType>

    <simpleType name="prefix-or-default">
        <annotation>
            <documentation>
              Either a namespace prefix, or #default.
              Used in the xsl:namespace-alias element.
            </documentation>
        </annotation>
        <union memberTypes="NCName">
            <simpleType>
                <restriction base="string">
                    <enumeration value="#default"/>
                </restriction>
            </simpleType>
        </union>
    </simpleType>

    <simpleType name="QNames">
        <annotation>
            <documentation>
              A list of QNames.
              Used in the [xsl:]use-attribute-sets attribute of various elements,
              and in the cdata-section-elements attribute of xsl:output
            </documentation>
        </annotation>
        <list itemType="QName"/>
    </simpleType>

    <simpleType name="sequence-type">
        <annotation>
            <documentation>
              The description of a data type, conforming to the
              SequenceType production defined in the XPath 2.0 Recommendation
            </documentation>
        </annotation>
        <restriction base="string">
            <pattern value=".+"/>
        </restriction>
    </simpleType>

    <simpleType name="type-information-type">
        <annotation>
            <documentation>
              Describes different ways of handling type information in a newly constructed tree.
            </documentation>
        </annotation>
        <restriction base="string">
            <enumeration value="strict"/>
            <enumeration value="lax"/>
            <enumeration value="preserve"/>
            <enumeration value="none"/>
        </restriction>
    </simpleType>



    <simpleType name="yes-or-no">
        <annotation>
            <documentation>
              One of the values "yes" or "no".
            </documentation>
        </annotation>
        <restriction base="string">
            <enumeration value="yes"/>
            <enumeration value="no"/>
        </restriction>
    </simpleType>

</schema>
