<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/core"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.mulesoft.org/schema/mule/core"
            attributeFormDefault="unqualified"
            elementFormDefault="qualified">


    <!--==============================================================-->
    <!--   Structure                                                  -->
    <!--==============================================================-->

    <!-- This defines the structure in abstract terms (except for a few simple/unique things like
         global properties).  We then provide some implementations below.  Other modules
         can provide other implementations. -->

    <xsd:complexType name="annotationsType">
        <xsd:sequence>
            <xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="annotatedType" abstract="true">
        <xsd:sequence>
            <xsd:element name="annotations" type="annotationsType" minOccurs="0"/>
        </xsd:sequence>
        <xsd:anyAttribute namespace="##other" processContents="lax">
            <xsd:annotation>
                <xsd:documentation>
                    Allow any third-parties to annotate these elements with global attributes. All types for
                    top-level elements must extend this.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:anyAttribute>
    </xsd:complexType>

    <xsd:complexType name="annotatedMixedContentType" abstract="true" mixed="true">
        <xsd:sequence>
            <xsd:element name="annotations" type="annotationsType" minOccurs="0"/>
        </xsd:sequence>
        <xsd:anyAttribute namespace="##other" processContents="lax">
            <xsd:annotation>
                <xsd:documentation>
                    Allow any third-parties to annotate these elements with global attributes
                </xsd:documentation>
            </xsd:annotation>
        </xsd:anyAttribute>
    </xsd:complexType>

    <xsd:element name="mule" type="muleType">
        <xsd:annotation>
            <xsd:documentation>
                Either the root element of a Mule configuration, or a "top-level" element in a Spring configuration that
                contains further Mule elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="muleType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Holds any kind of documentation that accompanies this configuration file. It is intended
                                to be "human readable" only and is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:choice minOccurs="0" maxOccurs="unbounded">
                        <xsd:group ref="muleRootElements"/>
                    </xsd:choice>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:group name="muleRootElements">
        <xsd:choice>
            <xsd:element ref="global-property"/>
            <xsd:element ref="configuration"/>
            <xsd:element ref="notifications"/>
            <xsd:element ref="abstract-extension"/>
            <xsd:element ref="abstract-shared-extension"/>
            <xsd:element ref="abstract-mixed-content-extension"/>
            <xsd:element ref="abstract-security-manager"/>
            <xsd:element ref="abstract-transaction-manager"/>
            <xsd:element ref="abstract-shared-transaction-manager"/>
            <xsd:element ref="abstract-connector"/>
            <xsd:element ref="abstract-shared-connector"/>
            <xsd:element ref="abstract-global-endpoint"/>
            <xsd:element ref="abstract-exception-strategy"/>
            <xsd:element ref="abstract-on-error"/>
            <xsd:element ref="abstract-flow-construct"/>
            <xsd:element ref="flow"/>
            <xsd:element ref="sub-flow"/>
            <xsd:element ref="top-level-processor"/>
            <xsd:element ref="abstract-global-intercepting-message-processor"/>
            <xsd:element ref="abstract-object-store"/>
        </xsd:choice>
    </xsd:group>

    <xsd:complexType name="descriptionType">
        <xsd:complexContent mixed="true">
            <xsd:extension base="xsd:anyType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="import" type="importType" substitutionGroup="abstract-shared-extension">
        <xsd:annotation>
            <xsd:documentation>
                References a file with configuration to import. It will be loaded from the classpath of the artifact.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="importType">
        <xsd:complexContent>
            <xsd:extension base="abstractExtensionType">
                <xsd:attribute name="file" type="substitutableString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The location of the file with the mule configuration to use. It may be a location in the
                            classpath or an absolute location.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="configuration-properties" type="configurationPropertiesType"
                 substitutionGroup="abstract-shared-extension">
        <xsd:annotation>
            <xsd:documentation>
                References a file with configuration properties. Each property has a key and a value. The key can be
                referenced
                from the mule configuration files using the following semantics: ${key_name}. This allows to externalize
                configuration and change it based
                on the environment the application is being deployed to.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="configurationPropertiesType">
        <xsd:complexContent>
            <xsd:extension base="abstractExtensionType">
                <xsd:attribute name="file" type="substitutableString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The location of the file with the configuration properties to use. It may be a location in
                            the classpath or an absolute location. The file location
                            value may also contains references to properties that will only be resolved based on system
                            properties or properties set at deployment time.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="global-property" type="globalPropertyType">
        <xsd:annotation>
            <xsd:documentation>
                A global property is a named string. It can be inserted in most attribute values using standard
                (ant-style) Spring placeholders.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="configuration" type="configurationType">
        <xsd:annotation>
            <xsd:documentation>
                Specifies defaults and general settings for the Mule instance.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="notifications" type="notificationManagerType">
        <xsd:annotation>
            <xsd:documentation>
                Registers listeners for notifications and associates interfaces with particular events.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="abstract-shared-extension" abstract="true" type="abstractExtensionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for arbitrary extensions as children of the 'mule' element or 'mule-domain'. Other
                transports and modules can extend this if they need to add global elements to the configuration (but
                consider the more specific elements like abstract-connector first).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-extension" abstract="true" type="abstractExtensionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for arbitrary extensions as children of the 'mule' element. Other transports and modules
                can extend this if they need to add global elements to the configuration (but consider the more specific
                elements like abstract-connector first).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractExtensionType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-mixed-content-extension" abstract="true" type="abstractMixedContentExtensionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for arbitrary extensions as children of the 'mule' element. Other transports and modules
                can extend this if they need to add global elements with mixed content to the configuration (but
                consider the more specific elements like abstract-connector first).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractMixedContentExtensionType">
        <xsd:complexContent mixed="true">
            <xsd:extension base="annotatedMixedContentType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-shared-connector" abstract="true" type="abstractConnectorType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for connector elements. Connector elements allow properties to be configured across all
                message processors that use the same connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-connector" abstract="true" type="abstractConnectorType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for connector elements. Connector elements allow properties to be configured across all
                message processors that use the same connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractConnectorType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="substitutableName" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the connector so that other elements can reference it.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-global-endpoint" abstract="true" type="abstractGlobalEndpointType">
        <xsd:annotation>
            <xsd:documentation>
                @Deprecated since 4.0.
                A placeholder for global endpoint elements. Global endpoints are named templates that allow you to
                define an endpoint once and refer to it in several places. The same template can be used for both
                inbound and outbound endpoints.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractGlobalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="substitutableName" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the endpoint so that other elements can reference it. This name can also be
                            referenced in the MuleClient.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Message Validator -->
    <xsd:element name="abstract-validator" abstract="true" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for validator message processor elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <!-- Message Processors -->
    <xsd:element name="abstract-message-processor" abstract="true" type="abstractMessageProcessorType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for message processor elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-mixed-content-message-processor" abstract="true"
                 type="abstractMixedContentMessageProcessorType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for message processor elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractMixedContentMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="annotatedMixedContentType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!--Operators-->
    <xsd:element name="abstract-operator" abstract="true" type="abstractOperatorType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for operator elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractOperatorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:element name="error-mapping" type="errorMappingType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Adds an error mapping.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="errorMappingType">
        <xsd:annotation>
            <xsd:documentation>
                Determines that an error thrown by this operation should be mapped to another.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute type="errorIdentifierType" name="sourceType" default="ANY"/>
        <xsd:attribute type="errorIdentifierType" name="targetType" use="required"/>
    </xsd:complexType>


    <xsd:group name="messageProcessorOrMixedContentMessageProcessor">
        <xsd:choice>
            <xsd:element ref="abstract-message-processor">
                <xsd:annotation>
                    <xsd:documentation>
                        A message processor
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element ref="abstract-operator">
                <xsd:annotation>
                    <xsd:documentation>
                        Operators
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element ref="abstract-mixed-content-message-processor"/>
        </xsd:choice>
    </xsd:group>

    <xsd:element name="route" type="messageProcessorChainType">
        <xsd:annotation>
            <xsd:documentation>
                One of n routes in a router such as scatter-gather, first-successful or round-robin.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="messageProcessorChainType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This can hold any kind of documentation related to the processor chain. It is intended
                                to be "human readable" only and
                                is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="name" type="substitutableName" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the message processor in the registry.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="top-level-processor" abstract="true" type="topLevelProcessorType"
                 substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for processors that can be defined as top level elements and referenced in flows.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="topLevelProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:attribute name="name" type="substitutableName" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the message processor in the registry.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="sub-flow" type="subFlowType">
        <xsd:annotation>
            <xsd:documentation>
                A chain of message processors declared globally that can be referenced and reused.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="subFlowType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This can hold any kind of documentation related to the sub-flow. It is intended to be
                                "human readable" only and is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="name" type="nonBlankString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the sub-flow in the registry.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="object" type="objectType" substitutionGroup="abstract-shared-extension">
        <xsd:annotation>
            <xsd:documentation>
                Element to declare a java object. Objects declared globally can be referenced from other parts of the
                configuration or recovered programmatically
                through org.mule.runtime.api.artifact.Registry.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="objectType">
        <xsd:complexContent>
            <xsd:extension base="abstractExtensionType">
                <xsd:sequence>
                    <xsd:group ref="propertiesGroup"/>
                </xsd:sequence>
                <xsd:attribute name="ref" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            @Deprecated since 4.0. Only meant to be used for backward compatibility.
                            Reference to another object defined in the mule configuration or any other provider of
                            objects.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="name" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Name to use to reference this object.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="class" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Creates an instance of the class provided as argument.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="async" type="asyncType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Processes the nested list of message processors asynchronously.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="asyncType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="name" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Name that will be used to identify the async scheduling tasks.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxConcurrency">
                    <xsd:annotation>
                        <xsd:documentation>
                            The maximum concurrency. This value determines the maximum level of parallelism that this
                            async router can use to optimize its performance when processing messages.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="substitutableInt"/>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="logger" type="loggerType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Performs logging using an expression that determines what should be logged. By default the current
                messages is
                logged using the INFO level to the 'org.mule.runtime.core.api.processor.LoggerMessageProcessor' category
                but the level and
                category can both be configured to suit your needs.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="loggerType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:attribute name="message" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Message that will be logged. Embedded expressions can be used to extract value from the
                            current message. If no message is
                            specified then the current message is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="level" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The logging level to be used. Default is INFO.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                            <xsd:enumeration value="ERROR"/>
                            <xsd:enumeration value="WARN"/>
                            <xsd:enumeration value="INFO"/>
                            <xsd:enumeration value="DEBUG"/>
                            <xsd:enumeration value="TRACE"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="category" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Sets the logger category.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="try" type="tryType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Processes the nested list of message processors, within a transaction and with it's own error handler if
                required.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="tryType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" maxOccurs="unbounded"/>
                    <xsd:element ref="abstract-exception-strategy" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="transactionalAction" type="transactionalActionType" default="INDIFFERENT"/>
                <xsd:attribute name="transactionType" type="transactionType" default="LOCAL"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType name="transactionalActionType">
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="INDIFFERENT"/>
            <xsd:enumeration value="ALWAYS_BEGIN"/>
            <xsd:enumeration value="BEGIN_OR_JOIN"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="transactionType">
        <xsd:annotation>
            <xsd:documentation>
                Transaction types supported. Availability will depend on the runtime version, though LOCAL is always
                available.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="LOCAL"/>
            <xsd:enumeration value="XA"/>
        </xsd:restriction>
    </xsd:simpleType>


    <!-- Message Sources -->
    <xsd:element name="abstract-message-source" abstract="true" type="abstractMessageSourceType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for message source elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractMessageSourceType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:group name="messageSource">
        <xsd:choice>
            <xsd:element ref="abstract-message-source">
                <xsd:annotation>
                    <xsd:documentation>
                        A message source
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:choice>
    </xsd:group>

    <xsd:complexType name="globalPropertyType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="substitutableName" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the property. This is used inside Spring placeholders.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="value" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The value of the property. This replaces each occurence of a Spring placeholder.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-transaction-manager" abstract="true" type="abstractTransactionManagerType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for transaction manager elements, which are used to coordinate transactions.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-shared-transaction-manager" abstract="true" type="abstractTransactionManagerType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for transaction manager elements that can be defined as shared resource, which are used to
                coordinate transactions.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractTransactionManagerType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-configuration-element" abstract="true" type="abstractConfigurationElement">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for configuration elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractConfigurationElement">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="configurationType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element ref="abstract-configuration-element" minOccurs="0"/>
                    <xsd:element ref="abstract-reconnection-strategy" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default reconnection strategy, used by connectors and sources. This can also be
                                configured on connectors, in which case the connector configuration is used instead of
                                this default.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="dynamic-config-expiration" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                Configuration about how should the runtime handle the expiration of dynamic
                                configurations
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="expression-language" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Configuration of Mule Expression Language
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:complexContent mixed="true">
                                <xsd:extension base="abstractMixedContentExtensionType">
                                    <xsd:sequence>
                                        <xsd:element minOccurs="0" maxOccurs="unbounded" name="import">
                                            <xsd:complexType>
                                                <xsd:attribute name="name" type="nonBlankString"/>
                                                <xsd:attribute name="class" use="required" type="substitutableClass"/>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element minOccurs="0" maxOccurs="unbounded" name="alias">
                                            <xsd:complexType>
                                                <xsd:attribute name="name" use="required" type="nonBlankString"/>
                                                <xsd:attribute name="expression" use="required" type="nonBlankString"/>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element minOccurs="0" maxOccurs="1" name="global-functions">
                                            <xsd:complexType mixed="true">
                                                <xsd:attribute name="file" type="nonBlankString"/>
                                            </xsd:complexType>
                                        </xsd:element>
                                    </xsd:sequence>
                                    <xsd:attribute name="autoResolveVariables" default="true"
                                                   type="substitutableBoolean"/>
                                </xsd:extension>
                            </xsd:complexContent>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element ref="abstract-configuration-extension" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Mule application configuration extensions. Extensions can be defined as child of the
                                configuration elements and then accessed by each module that defines it.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="defaultResponseTimeout" type="xsd:string" default="10000">
                    <xsd:annotation>
                        <xsd:documentation>
                            The default period (ms) to wait for a synchronous response.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="defaultTransactionTimeout" type="xsd:string" default="30000">
                    <xsd:annotation>
                        <xsd:documentation>
                            The default timeout (ms) for transactions. This can also be configured on transactions, in
                            which case the transaction configuration is used instead of this default.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="defaultErrorHandler-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The default error handler for every flow. This must be a reference to a global error
                            handler.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="shutdownTimeout" type="substitutableInt" default="5000">
                    <xsd:annotation>
                        <xsd:documentation>
                            (As of Mule 2.2.2) The time in milliseconds to wait for any in-progress work to finish
                            running before Mule shuts down. After this threshold has been reached, Mule starts stopping
                            schedulers and interrupting threads, and messages can be lost. If you have a very large
                            number of services in the same Mule instance, if you have components that take more than a
                            couple seconds to process, or if you are using large payloads and/or slower transports, you
                            should increase this value to allow more time for graceful shutdown. The value you specify
                            is applied to services and separately to dispatchers, so the default value of 5000
                            milliseconds specifies that Mule has ten seconds to process and dispatch messages gracefully
                            after shutdown is initiated.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxQueueTransactionFilesSize" type="substitutableInt" default="500">
                    <xsd:annotation>
                        <xsd:documentation>
                            The approximated maximum space in megabytes used by the transaction log files for
                            transactional persistent queues. Take into account that this number applies both to the set
                            of transaction log files for XA and for local transactions. If both type of transactions are
                            used then the approximated maximum space used will be twice the configured value.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="defaultObjectSerializer-ref" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            An optional reference to an ObjectSerializer to be used as the application's default
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-configuration-extension" abstract="true" type="abstractConfigurationExtensionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for arbitrary extensions as children of the 'configuration' element. Other transports and
                modules can extend this if they need to add elements to the configuration.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractConfigurationExtensionType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="notificationManagerType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element name="notification" type="defineNotificationType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Associates an event with an interface. Listeners that implement the interface will
                                receive instances of the event.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="disable-notification" type="disableNotificationType" minOccurs="0"
                                 maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Blocks the association of an event with a particular interface. This filters events
                                after the association with a particular interface (and so takes precedence).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="notification-listener" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Registers a bean as a listener with the notification system. Events are dispatched by
                                reflection - the listener will receive all events associated with any interfaces it
                                implements. The relationship between interfaces and events is configured by the
                                notification and disable-notification elements.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:attribute name="ref" type="xsd:string" use="required">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        The bean that will receive notifications.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:attribute>
                            <xsd:attribute name="subscription" type="xsd:string">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        An optional string that is compared with the event resource identifier. Only
                                        events with matching identifiers will be sent. If no value is given, all events
                                        are sent.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:attribute>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="dynamic" type="substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            If the notification manager is dynamic, listeners can be registered dynamically at runtime
                            via the MuleContext, and the configured notification can be changed. Otherwise, some parts
                            of Mule will cache notification configuration for efficiency and will not generate events
                            for newly enabled notifications or listeners. The default value is false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="defineNotificationType">
        <xsd:attribute name="event-class" type="substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The class associated with a notification event that will be delivered to the interface. This can be
                    used instead of the 'event' attribute to specify a custom class.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="event" type="notificationTypes">
            <xsd:annotation>
                <xsd:documentation>
                    The notification event to deliver.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface-class" type="substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The interface (class name) that will receive the notification event.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface" type="notificationTypes">
            <xsd:annotation>
                <xsd:documentation>
                    The interface that will receive the notification event.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="disableNotificationType">
        <xsd:attribute name="event-class" type="substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The class associated with an event that will no longer be delivered to any interface. This can be
                    used instead of the 'event' attribute to specify a custom class.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="event" type="notificationTypes">
            <xsd:annotation>
                <xsd:documentation>
                    The event you no longer want to deliver.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface-class" type="substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The interface (class name) that will no longer receive the event.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interface" type="notificationTypes">
            <xsd:annotation>
                <xsd:documentation>
                    The interface that will no longer receive the event.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:simpleType name="notificationTypes">
        <xsd:union memberTypes="coreNotificationTypes extendedNotificationTypes"/>
    </xsd:simpleType>

    <xsd:simpleType name="coreNotificationTypes">
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="CONTEXT"/>
            <xsd:enumeration value="SECURITY"/>
            <xsd:enumeration value="ASYNC-MESSAGE"/>
            <xsd:enumeration value="CONNECTOR-MESSAGE"/>
            <xsd:enumeration value="PIPELINE-MESSAGE"/>
            <xsd:enumeration value="MANAGEMENT"/>
            <xsd:enumeration value="MESSAGE-PROCESSOR"/>
            <xsd:enumeration value="EXCEPTION-STRATEGY"/>
            <xsd:enumeration value="CONNECTION"/>
            <xsd:enumeration value="REGISTRY"/>
            <xsd:enumeration value="CUSTOM"/>
            <xsd:enumeration value="EXCEPTION"/>
            <xsd:enumeration value="TRANSACTION"/>
            <xsd:enumeration value="ROUTING"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="extendedNotificationTypes">
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:pattern value="[a-zA-Z]+:[A-Z\-]+">
                <xsd:annotation>
                    <xsd:documentation>
                        Allows artifacts to define their own notifications, in format "[artifactID]:[NOTIFICATION-ID]".
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:pattern>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:element name="abstract-exception-strategy" abstract="true" type="exceptionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for an exception strategy element. Exception strategies define how Mule should react to
                errors.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="abstract-on-error" abstract="true" type="exceptionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for an on-error element. These handlers define how Mule should react to errors.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="exceptionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                Base type for every exception strategy.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="abstractOnErrorType">
        <xsd:annotation>
            <xsd:documentation>
                Base type for every on error handler.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="abstractNotificationExceptionStrategyType">
                <xsd:attribute name="type" type="errorIdentifierType" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The full name of the error type to match against or a comma separated list of full names, to
                            match against any of them.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType name="errorIdentifierType">
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The full name of the error type to match against or a comma separated list of full names, to
                            match against any of them.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:restriction>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="ANY">
                        <xsd:annotation>
                            <xsd:documentation>
                                Used to match against any error type.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="REDELIVERY_EXHAUSTED">
                        <xsd:annotation>
                            <xsd:documentation>
                                Occurs when there's a source that has a redelivery policy and the message has exceeded
                                the maximum supported redelivery count.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="TRANSFORMATION">
                        <xsd:annotation>
                            <xsd:documentation>
                                Occurs when there's a transformation that fails.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="EXPRESSION">
                        <xsd:annotation>
                            <xsd:documentation>
                                Occurs when there's an error executing an expression.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="SECURITY">
                        <xsd:annotation>
                            <xsd:documentation>
                                Occurs when there's a security error.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="CLIENT_SECURITY">
                        <xsd:annotation>
                            <xsd:documentation>
                                Occurs when there's a security error related to security failures calling external
                                endpoint.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="SERVER_SECURITY">
                        <xsd:annotation>
                            <xsd:documentation>
                                Occurs when there's a security error related to security enforced within the mule
                                runtime.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="ROUTING">
                        <xsd:annotation>
                            <xsd:documentation>
                                Occurs when there's an error executing a router.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="CONNECTIVITY">
                        <xsd:annotation>
                            <xsd:documentation>
                                Occurs when there's a connection error.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="RETRY_EXHAUSTED">
                        <xsd:annotation>
                            <xsd:documentation>
                                Specialization of CONNECTIVITY error, that occurs when all reconnection attempts have
                                failed.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="TIMEOUT">
                        <xsd:annotation>
                            <xsd:documentation>
                                Occurs when timeout is produced.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:complexType name="abstractNotificationExceptionStrategyType">
        <xsd:complexContent>
            <xsd:extension base="exceptionStrategyType">
                <xsd:attribute name="enableNotifications" type="xsd:boolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Determines whether ExceptionNotifications will be fired from this strategy when an exception
                            occurs. Default is true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="name" type="substitutableName" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Name of the exception strategy that will be used in ref attribute of 'exception-strategy'
                            element
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="when" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expression that will be evaluated to determine if this exception strategy should be
                            executed. This should always be a boolean expression.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="logException" use="optional" type="expressionBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Determines whether the handled exception will be logged to its standard logger in the ERROR
                            level before being handled.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Reconnection strategies                                    -->
    <!--==============================================================-->

    <xsd:element name="abstract-reconnection-strategy" abstract="true" type="abstractReconnectionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a reconnection strategy element. Reconnection strategies define how Mule should
                attempt to handle a connection failure.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractReconnectionStrategyType">
        <xsd:sequence>
            <xsd:element ref="abstract-reconnect-notifier" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="blocking" type="substitutableBoolean" default="true">
            <xsd:annotation>
                <xsd:documentation>If false, the reconnection strategy will run in a separate scheduler
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="abstract-reconnect-notifier" abstract="true" type="abstractReconnectNotifierType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a reconnection notifier element. The RetryNotifier interface is a callback that allows
                actions to be performed after each reconnection attempt, e.g., firing server notification events on
                success or failure.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractReconnectNotifierType"/>

    <xsd:element name="reconnection" type="reconnectionConfigType">
        <xsd:annotation>
            <xsd:documentation>
                Configures the default reconnection behaviour for a connected component.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="reconnectionConfigType">
        <xsd:sequence>
            <xsd:element ref="abstract-reconnection-strategy" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="failsDeployment" type="substitutableBoolean" default="false" use="optional">
            <xsd:annotation>
                <xsd:documentation>When the application is deployed, a connectivity test is performed on all connectors.
                    If set to
                    true, deployment will fail if the test doesn't pass after exhausting the associated reconnection
                    strategy
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="reconnect" type="reconnectSimpleStrategyType"
                 substitutionGroup="abstract-reconnection-strategy">
        <xsd:annotation>
            <xsd:documentation>
                A reconnection strategy that allows the user to configure how many times a reconnection should be
                attempted and how long to wait between attempts.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="reconnectSimpleStrategyType">
        <xsd:complexContent>
            <xsd:extension base="abstractReconnectionStrategyType">
                <xsd:attribute name="frequency" type="substitutableLong" default="2000">
                    <xsd:annotation>
                        <xsd:documentation>How often (in ms) to reconnect</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="count" type="substitutableInt" default="2">
                    <xsd:annotation>
                        <xsd:documentation>How many reconnection attempts to make</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="reconnect-forever" type="reconnectForeverStrategyType"
                 substitutionGroup="abstract-reconnection-strategy">
        <xsd:annotation>
            <xsd:documentation>
                A reconnection strategy that retries an infinite number of times at the specified frequency.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="reconnectForeverStrategyType">
        <xsd:complexContent>
            <xsd:extension base="abstractReconnectionStrategyType">
                <xsd:attribute name="frequency" type="substitutableLong" default="2000">
                    <xsd:annotation>
                        <xsd:documentation>How often (in ms) to reconnect</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Flow Constructs                                            -->
    <!--==============================================================-->

    <xsd:element name="abstract-flow-construct" abstract="true" type="abstractFlowConstructType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a flow construct element.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractFlowConstructType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="name" type="nonBlankString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name used to identify this flow construct.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="abstract" type="xsd:boolean" use="optional" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Determines if the flow construct is abstract (ie a parent that will be inherited in concrete
                            constructs).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="parent" type="xsd:NMTOKEN" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Determines if the flow construct inherits part of its configuration from a parent construct.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="baseFlowConstructType">
        <xsd:annotation>
            <xsd:documentation>
                Base support for a flow construct.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="abstractFlowConstructType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This can hold any kind of documentation related to the flow construct. It is intended to
                                be "human readable" only and is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="initialState" default="started">
                    <xsd:annotation>
                        <xsd:documentation>
                            The initial state of the flow. Usually a flow is started automatically ("started"), but this
                            attribute can be used to disable initial startup ("stopped").
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="started"/>
                            <xsd:enumeration value="stopped"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:element name="flow-ref" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Allows a 'flow' to be referenced such that the message processing will continue in the referenced flow
                before returning.
                Message processing in the referenced 'flow' will occur within the context of the referenced flow and
                will therefore use its error handler etc.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="abstractMessageProcessorType">
                    <xsd:attribute name="name" type="xsd:string" use="required"/>
                    <xsd:attribute name="target" type="substitutableString">
                        <xsd:annotation>
                            <xsd:documentation>
                                Variable where to save processed payload
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="targetValue" type="expressionString" default="#[payload]">
                        <xsd:annotation>
                            <xsd:documentation>
                                An expression that will be evaluated against the operation's output and the outcome of
                                that expression will be stored in the target variable
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!--==============================================================-->
    <!--   Transactions                                               -->
    <!--==============================================================-->

    <xsd:element name="abstract-transaction" abstract="true" type="abstractTransactionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for transaction elements. Transactions allow a series of operations to be grouped
                together.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-xa-transaction" abstract="true" type="abstractTransactionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for XA transaction elements. XA transactions allow a series of operations to be grouped
                together spanning different transports, such as JMS and JDBC.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="abstract-multi-transaction" abstract="true" type="abstractTransactionType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for multi-transaction elements.
                Multi-transactions allow a series of operations to be grouped together spanning different
                transports, e.g. JMS and JDBC, but without the overhead of XA. The trade-off is that XA
                reliability guarantees aren't available, and services must be ready to handle duplicates.
                This is very similar to a 1.5 PC concept. EE-only feature.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractTransactionType">
        <xsd:attribute name="action" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The type of action the transaction should take, one of the following:
                    NONE - Never participate in a transaction.
                    ALWAYS_BEGIN - Always start a new transaction when receiving a message. An exception will be thrown
                    if a transaction already exists.
                    BEGIN_OR_JOIN - If a transaction is already in progress when a message is received, join the
                    transaction if possible. Otherwise, start a new transaction.
                    ALWAYS_JOIN - Always expects a transaction to be in progress when a message is received. If there is
                    no transaction, an exception is thrown.
                    JOIN_IF_POSSIBLE - Join the current transaction if one is available. Otherwise, no transaction is
                    created.
                    NOT_SUPPORTED - Execute outside any existent transaction
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="NONE"/>
                    <xsd:enumeration value="ALWAYS_BEGIN"/>
                    <xsd:enumeration value="BEGIN_OR_JOIN"/>
                    <xsd:enumeration value="ALWAYS_JOIN"/>
                    <xsd:enumeration value="JOIN_IF_POSSIBLE"/>
                    <xsd:enumeration value="NOT_SUPPORTED"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="timeout" type="substitutableInt">
            <xsd:annotation>
                <xsd:documentation>
                    Timeout for the transaction (ms).
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="baseTransactionType">
        <xsd:complexContent>
            <xsd:extension base="abstractTransactionType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="xa-transaction" type="xaTransactionType" substitutionGroup="abstract-transaction">
        <xsd:annotation>
            <xsd:documentation>
                An XA transaction.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="xaTransactionType">
        <xsd:complexContent>
            <xsd:extension base="baseTransactionType">
                <xsd:attribute name="interactWithExternal" type="xsd:boolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            If this is set to "true", Mule interacts with transactions begun outside of Mule. E.g. if an
                            external transaction is active, then BEGIN_OR_JOIN wil join it, and ALWAYS_BEGIN will cause
                            an exception to be thrown.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="transactionManagerType">
        <xsd:complexContent>
            <xsd:extension base="abstractTransactionManagerType">
                <xsd:attribute name="name" type="substitutableName" default="transactionManager" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            An optional name for the transaction manager. The default value is "transactionManager".
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="scheduling-strategy" type="schedulingStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for scheduling strategies
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="schedulingStrategyType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element ref="abstract-scheduling-strategy" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-scheduling-strategy" abstract="true" type="abstractSchedulingStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for scheduling strategies
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractSchedulingStrategyType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="fixedSchedulerType">
        <xsd:complexContent>
            <xsd:extension base="abstractSchedulingStrategyType">
                <xsd:attribute name="frequency" type="substitutableLong" default="1000">
                    <xsd:annotation>
                        <xsd:documentation>
                            Polling frequency in milliseconds. Default frequency is 1000ms (1s).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="timeUnit" default="MILLISECONDS" type="timeUnitType">
                    <xsd:annotation>
                        <xsd:documentation>
                            The time unit for the frequency value
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="startDelay" type="substitutableLong" default="0">
                    <xsd:annotation>
                        <xsd:documentation>
                            The delay time in time units that sheduler needs to wait before start
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="fixed-frequency" type="fixedSchedulerType" substitutionGroup="abstract-scheduling-strategy"/>

    <xsd:element name="scheduler" type="schedulerMessageSourceType" substitutionGroup="abstract-message-source">
        <xsd:annotation>
            <xsd:documentation>
                Source that schedules periodic execution of a flow. By default it will used a fixed frequency
                scheduling of 1 second.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="schedulerMessageSourceType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageSourceType">
                <xsd:sequence>
                    <xsd:element ref="scheduling-strategy" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
                <xsd:attribute name="disallowConcurrentExecution" default="false" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            If set to 'true', executions triggered while the flow is still running from a previous
                            trigger will be ignored, effectively avoiding different triggers of the flow to run
                            concurrently.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="cron" type="cronSchedulerType" substitutionGroup="abstract-scheduling-strategy"/>

    <xsd:complexType name="cronSchedulerType">
        <xsd:complexContent>
            <xsd:extension base="abstractSchedulingStrategyType">
                <xsd:attribute name="expression" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Cron scheduler expression
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="timeZone" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The ID of the time zone in which the expression will be based. Refer to <a
                                href="https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html">
                            java.util.TimeZone
                        </a> for the format and possible values of the timeZone ID.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-security-filter" abstract="true" type="abstractSecurityFilterType"
                 substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for security filter elements, which control access to the system.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractSecurityFilterType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="username-password-filter" type="usernamePasswordFilterType"
                 substitutionGroup="abstract-security-filter">
        <xsd:annotation>
            <xsd:documentation>
                Authenticates a message based on username and password expressions.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="usernamePasswordFilterType">
        <xsd:complexContent>
            <xsd:extension base="abstractSecurityFilterType">
                <xsd:attribute name="username" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            A Mule expression which extracts the username from the message. Defaults to
                            #[mel:message.inboundProperties.username].
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="password" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            A Mule expression which extracts the password from the message. Defaults to
                            #[mel:message.inboundProperties.password].
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-security-filter" type="customSecurityFilterType"
                 substitutionGroup="abstract-security-filter">
        <xsd:annotation>
            <xsd:documentation>
                Allows developers to configure custom security filters
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="customSecurityFilterType">
        <xsd:complexContent>
            <xsd:extension base="abstractSecurityFilterType">
                <xsd:attribute name="ref" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the security filter to use.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Interceptor elements                                       -->
    <!--==============================================================-->

    <xsd:element name="abstract-interceptor" abstract="true" type="abstractInterceptorType"
                 substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for an interceptor element.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractInterceptorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:group name="interceptorGroup">
        <xsd:sequence>
            <xsd:choice maxOccurs="unbounded">
                <xsd:element ref="abstract-interceptor"/>
            </xsd:choice>
        </xsd:sequence>
    </xsd:group>

    <xsd:element name="timer-interceptor" type="abstractInterceptorType" substitutionGroup="abstract-interceptor">
        <xsd:annotation>
            <xsd:documentation>
                The timer interceptor (ported from 1.x).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="logging-interceptor" type="abstractInterceptorType" substitutionGroup="abstract-interceptor">
        <xsd:annotation>
            <xsd:documentation>
                The logging interceptor (ported from 1.x).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <!-- security filters -->

    <xsd:element name="encryption-security-filter" type="encryptionSecurityFilterType"
                 substitutionGroup="abstract-security-filter">
        <xsd:annotation>
            <xsd:documentation>
                A filter that provides password-based encyption.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="encryptionSecurityFilterType">
        <xsd:complexContent>
            <xsd:extension base="abstractSecurityFilterType">
                <xsd:attribute name="strategy-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the encryption strategy to use. This should be configured using the
                            'password-encryption-strategy' element, inside a 'security-manager' element at the top
                            level.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="abstractAddPropertyProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:attributeGroup ref="mimeTypeAttributes">
                    <xsd:annotation>
                        <xsd:documentation>
                            The mime type of the value assigned to the property
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attributeGroup>
                <xsd:attribute name="encoding" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The encoding of the value assigned to the property
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="set-variable" type="setVariableType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A processor that adds variables.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="setVariableType">
        <xsd:complexContent>
            <xsd:extension base="abstractAddPropertyProcessorType">
                <xsd:attribute name="variableName" type="nonEmptyAttributeType" use="required"/>
                <xsd:attribute name="value" type="attributeType" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="remove-variable" type="removeVariableType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A processor that removes variables by name or a wildcard expression.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="removeVariableType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:attribute name="variableName" type="attributeType" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="parse-template" type="parseTemplateProcessorType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A processor that parses a template defined inline as output.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="parseTemplateProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:sequence minOccurs="0" maxOccurs="1">
                    <xsd:element name="content" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Template to be processed
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="location" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The location of the template. The order in which the processor will attempt to load the file
                            is: from the file system, from a URL or from the classpath.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="target" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Variable where to save processed payload
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="targetValue" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Expression to apply to the output when saved to a target
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="set-payload" type="setPayloadTransformerType" substitutionGroup="top-level-processor">
        <xsd:annotation>
            <xsd:documentation>
                A processor that sets the payload with the provided value.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="setPayloadTransformerType">
        <xsd:complexContent>
            <xsd:extension base="topLevelProcessorType">
                <xsd:attributeGroup ref="mimeTypeAttributes">
                    <xsd:annotation>
                        <xsd:documentation>
                            The mime type of the value assigned to the payload
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attributeGroup>
                <xsd:attribute name="encoding" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The encoding of the value assigned to the payload
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="value" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The value to be set on the payload. Supports expressions.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:attributeGroup name="expressionAttributes">
        <xsd:attribute name="expression" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>The expression to evaluate.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="optionalExpressionAttributes">
        <xsd:attribute name="expression" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>The expression to evaluate.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:complexType name="extractValueExtractorTemplateType">
        <xsd:attributeGroup ref="valueExtractorTemplateAttributes"/>
    </xsd:complexType>

    <xsd:attributeGroup name="valueExtractorTemplateAttributes">
        <xsd:attribute name="pattern" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    A regular expression used to match against a source value. The regular expression should contain a
                    capture group which value will be returned.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="target" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The enricher expression used to enrich the current message with the result the processing of the
                    regular expression.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="failIfNoMatch" type="substitutableBoolean" default="true">
            <xsd:annotation>
                <xsd:documentation>
                    Determines if there should be an error in case the pattern is not matched by the source value.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValue" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    The default value used to enrich the message when the source value does not match the pattern.
                    Useful only when failIfNoMatch is false.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <!--==============================================================-->
    <!--   Shared elements                                             -->
    <!--==============================================================-->

    <xsd:element name="abstract-security-manager" type="abstractSecurityManagerType" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                A security manager is a container for security providers. More than one security manager may be
                configured; each contains providers from a particular module and has that module type. This element is
                abstract - a security-related module or transport will provide a suitable implementation.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractSecurityManagerType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:annotation>
                    <xsd:documentation>
                        An empty holder that can be extended by modules that want to provide security managers.
                        Typically it will contain elements called 'module:type-security-provider', which extend
                        securityProviderType where "module" might be "spring-security" and "type" might de "delegate",
                        for example. It can also contain encryption strategies, which should follow a similar scheme and
                        extend encryptionStrategyType.
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:attribute name="id"/>
                <xsd:attribute name="name"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="security-manager" type="securityManagerType" substitutionGroup="abstract-security-manager">
        <xsd:annotation>
            <xsd:documentation>
                The default security manager.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="securityManagerType">
        <xsd:annotation>
            <xsd:documentation>
                The default security manager (type 'defaultSecurityManagerType') provides basic support for security
                functions. Other modules (PGP, Spring Security) provide more advanced functionality.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="abstractSecurityManagerType">
                <xsd:sequence>
                    <xsd:element name="custom-security-provider" type="customSecurityProviderType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                A custom implementation of SecurityProvider.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="custom-encryption-strategy" type="customEncryptionStrategyType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                A custom implementation of EncryptionStrategy.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="secret-key-encryption-strategy" type="secretKeyEncryptionStrategyType"
                                 minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Provides secret key-based encryption using JCE.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="password-encryption-strategy" type="passwordEncryptionStrategyType"
                                 minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Provides password-based encryption using JCE. Users must specify a password and
                                optionally a salt and iteration count as well. The default algorithm is
                                PBEWithMD5AndDES, but users can specify any valid algorithm supported by JCE.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="securityProviderType">
        <xsd:annotation>
            <xsd:documentation>
                A security provider is a source of specific security-related functionality.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="substitutableName" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="encryptionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                An encryption strategy provides support for a specific encryption algorithm.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="substitutableName" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="customSecurityProviderType">
        <xsd:complexContent>
            <xsd:extension base="securityProviderType">
                <xsd:sequence>
                    <xsd:group ref="propertiesGroup"/>
                </xsd:sequence>
                <xsd:attribute name="provider-ref" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the security provider to use.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="customEncryptionStrategyType">
        <xsd:complexContent>
            <xsd:extension base="encryptionStrategyType">
                <xsd:sequence>
                    <xsd:group ref="propertiesGroup"/>
                </xsd:sequence>
                <xsd:attribute name="strategy-ref" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            A reference to the encryption strategy (which may be a Spring bean that implements the
                            EncryptionStrategy interface).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="passwordEncryptionStrategyType">
        <xsd:complexContent>
            <xsd:extension base="encryptionStrategyType">
                <xsd:attribute name="password" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The password to use.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="salt" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The salt to use (this helps prevent dictionary attacks).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="iterationCount" type="substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            The number of iterations to use.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="secretKeyEncryptionStrategyType">
        <xsd:complexContent>
            <xsd:extension base="encryptionStrategyType">
                <xsd:attribute name="key" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The key to use. This and the 'keyFactory-ref' attribute are mutually exclusive.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="keyFactory-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the key factory to use. This should implement the ObjectFactory interface and
                            return a byte array. This and the 'key' attribute are mutually exclusive.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Exception strategies                                       -->
    <!--==============================================================-->

    <xsd:element name="error-handler" type="errorHandlerType"
                 substitutionGroup="abstract-exception-strategy">
        <xsd:annotation>
            <xsd:documentation>
                Allows the definition of internal selective handlers. It will route the error to the first handler that
                matches it. If there's no match, then a default error handler will be executed.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="on-error" type="onErrorType"
                 substitutionGroup="abstract-on-error">
        <xsd:annotation>
            <xsd:documentation>
                Error handler used to reference others.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="on-error-continue" type="onErrorContinueType"
                 substitutionGroup="abstract-on-error">
        <xsd:annotation>
            <xsd:documentation>
                Error handler used to handle errors. It will commit any transaction as if the message was consumed
                successfully.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="on-error-propagate" type="onErrorPropagateType"
                 substitutionGroup="abstract-on-error">
        <xsd:annotation>
            <xsd:documentation>
                Error handler used to propagate errors. It will rollback any transaction and not consume messages.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="errorHandlerType">
        <xsd:complexContent>
            <xsd:extension base="exceptionStrategyType">
                <xsd:sequence>
                    <xsd:element ref="abstract-on-error" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="name" type="substitutableName" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Name of the error handler that will be used in ref attribute of other 'error-handler'
                            elements.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="ref" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the error handler to reuse.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="onErrorType">
        <xsd:complexContent>
            <xsd:extension base="exceptionStrategyType">
                <xsd:attribute name="ref" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the 'on-error' to reuse.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="onErrorContinueType">
        <xsd:complexContent>
            <xsd:extension base="abstractOnErrorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>Destination to which a MuleMessage with an ExceptionPayload will be sent;
                                this could be any message processor.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:group>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="onErrorPropagateType">
        <xsd:complexContent>
            <xsd:extension base="abstractOnErrorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>Destination to which the message will be sent; this could be a router, or
                                message processor.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:group>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--  Routing                                                     -->
    <!--==============================================================-->

    <!--==================================-->
    <!-- Simple (1-1) Message Processors  -->
    <!--==================================-->

    <xsd:element name="abstract-intercepting-message-processor" abstract="true"
                 type="abstractInterceptingMessageProcessorType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for intercepting router elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractInterceptingMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-global-intercepting-message-processor" abstract="true"
                 type="abstractGlobalInterceptingMessageProcessorType"
                 substitutionGroup="abstract-intercepting-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for intercepting router elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractGlobalInterceptingMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractInterceptingMessageProcessorType">
                <xsd:attribute name="name" type="substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the processor so that other elements can reference it. Required if the processor
                            is defined at the global level.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="idempotent-message-validator" type="idempotentMessageValidatorType"
                 substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Ensures that only unique messages are received by a service by checking the unique ID of the incoming
                message. Note that the ID used can be generated from the message using an expression defined in the
                'idExpression' attribute. Otherwise, a 'DUPLICATE_MESSAGE' error is generated.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="idempotentMessageValidatorType">
        <xsd:complexContent>
            <xsd:extension base="abstractInterceptingMessageProcessorType">
                <xsd:sequence minOccurs="0" maxOccurs="1">
                    <xsd:element ref="abstract-private-object-store">
                        <xsd:annotation>
                            <xsd:documentation>
                                Object store defined privately for message validation
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="idExpression" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expression to use when extracting the ID from the message. If this property is not set,
                            '#[correlationId]' will be used by default.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="valueExpression" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expression to use when extracting the value from the message.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="objectStore" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The object store where the IDs of the processed events are going to be stored.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="storePrefix" type="substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            Defines the prefix of the object store names. This will only be used for the internally
                            built object store.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-redelivery-policy" abstract="true" type="abstractRedeliveryPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a redelivery policy. Redelivery policies determine what action to take when the same
                message
                is redelivered repeatedly.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractRedeliveryPolicyType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="maxRedeliveryCount" type="substitutableInt" default="5">
                    <xsd:annotation>
                        <xsd:documentation>
                            The maximum number of times a message can be redelivered and processed unsuccessfully before
                            triggering
                            process-failed-message
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="redelivery-policy" type="idempotentRedeliveryPolicyType"
                 substitutionGroup="abstract-redelivery-policy">
        <xsd:annotation>
            <xsd:documentation>
                Defines a policy for processing the redelivery of the same message
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="singleTarget">
        <xsd:complexContent>
            <xsd:extension base="abstractRoutingMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="idempotentRedeliveryPolicyType">
        <xsd:complexContent>
            <xsd:extension base="abstractRedeliveryPolicyType">
                <xsd:sequence minOccurs="0" maxOccurs="1">
                    <xsd:element ref="abstract-private-object-store">
                        <xsd:annotation>
                            <xsd:documentation>
                                Object store defined privately for message validation
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="useSecureHash" type="xsd:boolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to use a secure hash algorithm to identify a redelivered message
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="messageDigestAlgorithm" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The secure hashing algorithm to use. If not set, the default is SHA-256.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="idExpression" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Defines one or more expressions to use to determine when a message has been redelivered.
                            This property may only be set if useSecureHash is false..
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="objectStore" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The object store where the redelivery counter for each message is going to be stored.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="whenMessageProcessorExpressionPairType">
        <xsd:sequence>
            <!-- if the first message processor is a filter, it determines
                 whether this when clause is chosen or not.  This is only allowed when
                 no expression is specified -->
            <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="expression" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>The expression to evaluate.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="otherwiseMessageProcessorExpressionPairType">
        <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" minOccurs="1" maxOccurs="unbounded"/>
    </xsd:complexType>

    <xsd:element name="foreach" type="foreachProcessorType"
                 substitutionGroup="abstract-intercepting-message-processor"/>
    <xsd:complexType name="foreachProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractInterceptingMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" minOccurs="1"
                               maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="collection" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Expression that defines the collection to iterate over.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="batchSize" use="optional" type="substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            Partitions the collection in sub-collections of the specified size.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="rootMessageVariableName" use="optional" default="rootMessage" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Variable name for the original message.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="counterVariableName" use="optional" default="counter" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Variable name for the item number being processed.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="raise-error" type="raiseErrorType" substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Throws an error with the specified type and description.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="raiseErrorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType">
                <xsd:attribute name="type" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The error type to raise.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="description" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The description of this error.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!--==================================-->
    <!-- Routing (1-n) Message Processors  -->
    <!--==================================-->

    <xsd:element name="abstract-routing-message-processor" abstract="true" type="abstractRoutingMessageProcessorType"
                 substitutionGroup="abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for intercepting router elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractRoutingMessageProcessorType">
        <xsd:complexContent>
            <xsd:extension base="abstractMessageProcessorType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="selectiveOutboundRouterType">
        <xsd:complexContent>
            <xsd:extension base="abstractRoutingMessageProcessorType">
                <xsd:sequence>
                    <xsd:element name="when" type="whenMessageProcessorExpressionPairType" minOccurs="1"
                                 maxOccurs="unbounded"/>
                    <xsd:element name="otherwise" type="otherwiseMessageProcessorExpressionPairType" minOccurs="0"
                                 maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="choice" type="selectiveOutboundRouterType"
                 substitutionGroup="abstract-routing-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Sends the message to the first message processor whose condition is satisfied. If none of the conditions
                are satisfied, it sends the message to the configured default message processor or fails if there is
                none.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="processorWithAtLeastOneTargetType">
        <xsd:complexContent>
            <xsd:extension base="abstractRoutingMessageProcessorType">
                <xsd:sequence>
                    <xsd:element ref="route" minOccurs="1" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="processorWithExactlyOneTargetType">
        <xsd:complexContent>
            <xsd:extension base="abstractRoutingMessageProcessorType">
                <xsd:sequence>
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="first-successful" substitutionGroup="abstract-routing-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Sends a message to a list of message processors until one processes it
                successfully
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="processorWithAtLeastOneTargetType">
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="until-successful" substitutionGroup="abstract-routing-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Attempts to route a message to the message processor it contains in an asynchronous manner.
                Routing is considered successful if no error has been raised and, optionally, if the response matches an
                expression
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="abstractRoutingMessageProcessorType">
                    <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" minOccurs="1"
                               maxOccurs="unbounded"/>
                    <xsd:attribute name="maxRetries" type="substitutableInt" use="optional" default="5">
                        <xsd:annotation>
                            <xsd:documentation>
                                Specifies the maximum number of processing retries that will be performed.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="millisBetweenRetries" type="substitutableInt" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>
                                Specifies the minimum time interval between two process retries in milliseconds.
                                The actual time interval depends on the previous execution but should not exceed twice
                                this number.
                                Default value is 60000 (one minute)
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="scatter-gather" substitutionGroup="abstract-routing-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Sends the same message to multiple message processors in parallel.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="abstractRoutingMessageProcessorType">
                    <xsd:sequence>
                        <xsd:element ref="route" minOccurs="2" maxOccurs="unbounded"/>
                        <xsd:element ref="abstract-fork-join-strategy" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Strategy that determines how multiple routes should be processed and how their
                                    results are aggregated.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                    <xsd:attribute name="timeout" type="substitutableLong">
                        <xsd:annotation>
                            <xsd:documentation>
                                Sets a timeout in milliseconds for each route. The default behaviour is that of no
                                timeout.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="maxConcurrency" type="substitutableInt">
                        <xsd:annotation>
                            <xsd:documentation>
                                The maximum concurrency. This value determines the maximum level of parallelism that
                                will be used by this router. By default all routes will run in parallel (assuming
                                available resources) but this can be limited or sequential behaviour achieved via the
                                use of this attribute.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="target" type="substitutableString">
                        <xsd:annotation>
                            <xsd:documentation>
                                Variable where to save processed payload
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="targetValue" type="expressionString" default="#[payload]">
                        <xsd:annotation>
                            <xsd:documentation>
                                An expression that will be evaluated against the operation's output and the outcome of
                                that expression will be stored in the target variable
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="split-aggregate" substitutionGroup="abstract-routing-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Splits the same message and processes each part in parallel.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="abstractRoutingMessageProcessorType">
                    <xsd:sequence>
                        <xsd:element name="collection" type="xsd:string" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Expression that defines the collection of parts to be processed in parallel.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:group ref="messageProcessorOrMixedContentMessageProcessor" minOccurs="1"
                                   maxOccurs="unbounded"/>
                    </xsd:sequence>
                    <xsd:attribute name="timeout" type="substitutableLong">
                        <xsd:annotation>
                            <xsd:documentation>
                                Sets a timeout in milliseconds for each route. The default behaviour is that of no
                                timeout.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="maxConcurrency" type="substitutableInt">
                        <xsd:annotation>
                            <xsd:documentation>
                                The maximum concurrency. This value determines the maximum level of parallelism that
                                will be used by this router. By default all routes will run in parallel (assuming
                                available resources) but this can be limited or sequential behaviour achieved via the
                                use of this attribute.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="target" type="substitutableString">
                        <xsd:annotation>
                            <xsd:documentation>
                                Variable where to save processed payload
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="targetValue" type="expressionString" default="#[payload]">
                        <xsd:annotation>
                            <xsd:documentation>
                                An expression that will be evaluated against the operation's output and the outcome of
                                that expression will be stored in the target variable
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="abstract-fork-join-strategy" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for route resolver elements, which return a set of routes.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="collect-list" substitutionGroup="abstract-fork-join-strategy">
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="annotatedType"/>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="round-robin" substitutionGroup="abstract-routing-message-processor"
                 type="processorWithAtLeastOneTargetType">
        <xsd:annotation>
            <xsd:documentation>
                Send each message received to the next message processor in a circular list of targets.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractDynamicRoutingMessageProcessor">
        <xsd:complexContent>
            <xsd:extension base="abstractRoutingMessageProcessorType">
                <xsd:sequence minOccurs="1" maxOccurs="1">
                    <xsd:element ref="abstract-dynamic-route-resolver"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-dynamic-route-resolver" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for route resolver elements, which return a set of routes.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <!--=================-->
    <!-- Bytes Streaming -->
    <!--=================-->

    <xsd:element name="abstract-byte-streaming-strategy" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for a bytes streaming strategy element. This element allows to configure repeatable
                streams behaviour
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="repeatable-in-memory-stream" type="repeatableInMemoryStreamType"
                 substitutionGroup="abstract-byte-streaming-strategy">
        <xsd:annotation>
            <xsd:documentation>
                This strategy uses an in-memory buffer to provide repeatable access to any input stream.
                It uses a buffer with an initial buffer size, which can be expanded up to a configurable threshold.
                This is the most performant way of providing repeatable access, as long as the size of all the
                concurrent
                stream contents fits into memory
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="repeatableInMemoryStreamType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="initialBufferSize" type="substitutableInt" use="optional" default="512">
                    <xsd:annotation>
                        <xsd:documentation>
                            This is the amount of memory that will be allocated in order to consume the stream and
                            provide random
                            access to it. If the stream contains more data than can be fit into this buffer, then it
                            will be expanded
                            by according to the bufferSizeIncrement attribute, with an upper limit of maxInMemorySize.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="bufferSizeIncrement" type="substitutableInt" use="optional" default="512">
                    <xsd:annotation>
                        <xsd:documentation>
                            This is by how much will be buffer size by expanded if it exceeds its initial size. Setting
                            a value of zero or
                            lower will mean that the buffer should not expand, meaning that a
                            STREAM_MAXIMUM_SIZE_EXCEEDED error will be raised
                            when the buffer gets full.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxBufferSize" type="substitutableInt" use="optional" default="1024">
                    <xsd:annotation>
                        <xsd:documentation>
                            This is the maximum amount of memory that will be used. If more than that is used then a
                            STREAM_MAXIMUM_SIZE_EXCEEDED error will be raised.
                            A value lower or equal to zero means no limit.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="bufferUnit" type="dataUnitType" use="optional" default="KB">
                    <xsd:annotation>
                        <xsd:documentation>
                            The unit in which all these attributes are expressed
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="non-repeatable-stream" type="nonRepeatableStreamType"
                 substitutionGroup="abstract-byte-streaming-strategy">
        <xsd:annotation>
            <xsd:documentation>
                This strategy only allows the input stream to be read. It will not allow to seek randomly
                which will limit the transformations that DW can perform on this stream.
                Use this option for use cases which just require moving data around from one system to another to get
                optimum performance.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="nonRepeatableStreamType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!--===================-->
    <!-- Objects Streaming -->
    <!--===================-->

    <xsd:element name="abstract-object-streaming-strategy" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for an object streaming strategy element. This element allows to configure repeatable
                streams behaviour
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="repeatable-in-memory-iterable" type="repeatableInMemoryIterableType"
                 substitutionGroup="abstract-object-streaming-strategy">
        <xsd:annotation>
            <xsd:documentation>
                This strategy uses an in-memory buffer to provide repeatable access to the object stream. It uses a
                buffer
                with an initial buffer size, which can be expanded up to a configurable threshold. This is the most
                performant way
                of providing repeatable access, as long as the size of all the concurrent stream contents fits into
                memory.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="repeatableInMemoryIterableType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:attribute name="initialBufferSize" type="substitutableInt" use="optional" default="100">
                    <xsd:annotation>
                        <xsd:documentation>
                            This is the amount of instances that will be initially be allowed to be kept in memory in
                            order to
                            consume the stream and provide random access to it. If the stream contains more data than
                            can fit
                            into this buffer, then it will be expanded according to the bufferSizeIncrement attribute,
                            with an upper
                            limit of maxInMemorySize. Default value is 100 instances.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="bufferSizeIncrement" type="substitutableInt" use="optional" default="100">
                    <xsd:annotation>
                        <xsd:documentation>
                            This is by how much will the buffer size by expanded if it exceeds its initial size. Setting
                            a value of zero or
                            lower will mean that the buffer should not expand, meaning that a
                            STREAM_MAXIMUM_SIZE_EXCEEDED error will be raised
                            when the buffer gets full. Default value is 100 instances.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxBufferSize" type="substitutableInt" use="optional" default="500">
                    <xsd:annotation>
                        <xsd:documentation>
                            This is the maximum amount of instances that will be kept in memory. If more than that are
                            required,
                            then a STREAM_MAXIMUM_SIZE_EXCEEDED error will be raised. A value lower or equal to zero
                            means no limit.
                            Default value is 500 instances.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="non-repeatable-iterable" type="nonRepeatableIterableType"
                 substitutionGroup="abstract-object-streaming-strategy">
        <xsd:annotation>
            <xsd:documentation>
                This strategy only allows the stream to be read once. It will not allow to seek randomly
                which will limit the transformations that DW can perform on this stream.
                Use this option for use cases which just require moving data around from one system to another to get
                optimum performance.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="nonRepeatableIterableType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--  Extensions                                                  -->
    <!--==============================================================-->

    <xsd:element name="dynamic-config-expiration" type="dynamicConfigExpirationType">
        <xsd:annotation>
            <xsd:documentation>
                Configuration about how should the runtime handle the expiration of dynamic configurations
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="dynamicConfigExpirationType">
        <xsd:sequence>
            <xsd:element ref="expiration-policy" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="frequency" type="substitutableLong" use="optional" default="5">
            <xsd:annotation>
                <xsd:documentation>
                    A scalar time value for how often should the platform check for expirable dynamic configs
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="timeUnit" type="timeUnitType" use="optional" default="MINUTES">
            <xsd:annotation>
                <xsd:documentation>
                    A time unit that qualifies the frequency attribute
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="abstractConnectionProvider" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                Connection Providers are responsible for configuring, creating and managing
                connections
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractConnectionProviderType">
        <xsd:annotation>
            <xsd:documentation>
                Abstract type for ConnectionProvider elements.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="expiration-policy" type="expirationPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Configures the minimum amount of time that a dynamic configuration instance can remain idle
                before the runtime considers it eligible for expiration. This does not mean that the platform
                will expire the instance at the exact moment that it becomes eligible. The runtime will actually
                purge the instances when it sees it fit.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="expirationPolicyType">
        <xsd:attribute name="maxIdleTime" type="substitutableLong" use="optional" default="5">
            <xsd:annotation>
                <xsd:documentation>
                    A scalar time value for the maximum amount of time a dynamic configuration instance should be
                    allowed
                    to be idle before it's considered eligible for expiration
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="timeUnit" type="timeUnitType" use="optional" default="MINUTES">
            <xsd:annotation>
                <xsd:documentation>
                    A time unit that qualifies the maxIdleTime attribute
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:simpleType name="operationTransactionalActionType">
        <xsd:annotation>
            <xsd:documentation>
                The type of joining action that operations can take
                regarding transactions. Possible values are:
                ALWAYS_JOIN - Always expects a transaction to be in progress when a message is received. If there is no
                transaction, an exception is thrown.
                JOIN_IF_POSSIBLE - Join the current transaction if one is available. Otherwise, no transaction is
                created.
                NOT_SUPPORTED - Execute outside any existent transaction.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="ALWAYS_JOIN"/>
            <xsd:enumeration value="JOIN_IF_POSSIBLE"/>
            <xsd:enumeration value="NOT_SUPPORTED"/>
        </xsd:restriction>
    </xsd:simpleType>

    <!--==============================================================-->
    <!--  Pooling                                                     -->
    <!--==============================================================-->

    <xsd:element name="abstract-pooling-profile" abstract="true" type="abstractPoolingProfileType"/>
    <xsd:complexType name="abstractPoolingProfileType"/>

    <xsd:element name="pooling-profile" type="poolingProfileType" substitutionGroup="abstract-pooling-profile"/>
    <xsd:complexType name="poolingProfileType">
        <xsd:annotation>
            <xsd:documentation>
                A pooling profile is used to configure the pooling behaviour of Mule components. Each component can have
                its own pooling profile.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="abstractPoolingProfileType">
                <xsd:attribute name="maxActive" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Controls the maximum number of Mule components that can be borrowed from a
                            session at one time. When set to a negative value, there is no limit to the number of
                            components that may be active at one time. When maxActive is exceeded, the pool is said to
                            be exhausted.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxIdle" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Controls the maximum number of Mule components that can sit idle in the pool
                            at any time. When set to a negative value, there is no limit to the number of Mule
                            components that may be idle at one time.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="initialisationPolicy" default="INITIALISE_ONE">
                    <xsd:annotation>
                        <xsd:documentation>Determines how components in a pool should be initialized. The possible
                            values are: INITIALISE_NONE (will not load any components into the pool on startup),
                            INITIALISE_ONE (will load one initial component into the pool on startup), or INITIALISE_ALL
                            (will load all components in the pool on startup)
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="INITIALISE_NONE"/>
                            <xsd:enumeration value="INITIALISE_ONE"/>
                            <xsd:enumeration value="INITIALISE_ALL"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="exhaustedAction" default="WHEN_EXHAUSTED_GROW">
                    <xsd:annotation>
                        <xsd:documentation>Specifies the behavior of the Mule component pool when the pool is exhausted.
                            Possible values are: "WHEN_EXHAUSTED_FAIL", which will throw a NoSuchElementException,
                            "WHEN_EXHAUSTED_WAIT", which will block by invoking Object.wait(long) until a new or idle
                            object is available, or WHEN_EXHAUSTED_GROW, which will create a new Mule instance and
                            return it, essentially making maxActive meaningless. If a positive maxWait value is
                            supplied, it will block for at most that many milliseconds, after which a
                            NoSuchElementException will be thrown. If 'maxWait' is a negative value, it will block
                            indefinitely.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="WHEN_EXHAUSTED_GROW"/>
                            <xsd:enumeration value="WHEN_EXHAUSTED_WAIT"/>
                            <xsd:enumeration value="WHEN_EXHAUSTED_FAIL"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="maxWait" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Specifies the number of milliseconds to wait for a pooled component to become
                            available when the pool is exhausted and the exhaustedAction is set to WHEN_EXHAUSTED_WAIT.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="evictionCheckIntervalMillis" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Specifies the number of milliseconds between runs of the object evictor. When
                            non-positive, no object evictor is executed.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="minEvictionMillis" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Determines the minimum amount of time an object may sit idle in the pool
                            before it is eligible for eviction. When non-positive, no objects will be evicted from the
                            pool due to idle time alone.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="disabled" type="substitutableBoolean" use="optional" default="false">
                    <xsd:annotation>
                        <xsd:documentation>Whether pooling should be disabled</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--  Utils / Standard Types                                      -->
    <!--==============================================================-->

    <xsd:simpleType name="keystoreType">
        <xsd:annotation>
            <xsd:documentation>
                A type that defines a Java keystore.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="jks">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default Java KeyStore. If no keystore type is specified, "jks" will be used.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="jceks">
                        <xsd:annotation>
                            <xsd:documentation>
                                Used by the Java Cryptography Extension
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="pkcs12">
                        <xsd:annotation>
                            <xsd:documentation>
                                A format commonly used to store private keys.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
                </xsd:restriction>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Any other keystore type.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="propertyPlaceholderType">
        <xsd:annotation>
            <xsd:documentation>
                A type that defines a Mule-style property placeholder.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="((\#|\!)\[.+\]|\$\{[^\}]+\})"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="substitutableClass">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:NMTOKEN-like type that also allows for Ant-style property placeholders and a leading "[".
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:pattern value="\[?[A-Za-z0-9_\.$]+"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="nonBlankString">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:string-like type that cannot be empty.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:pattern value=".*[^ ]+.*"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="substitutableName">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:NMTOKEN type that also allows for Ant-style property placeholders.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="substitutableString">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:string type that also allows for Ant-style property placeholders.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="substitutablePortNumber">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:int type that also allows for Ant-style property placeholders and restricts the int value
                to a valid port number.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:int">
                    <xsd:minInclusive value="0"/>
                    <xsd:maxInclusive value="65536"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="substitutableInt">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:int type that also allows for Ant-style property placeholders.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:int"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="substitutableDecimal">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:decimal type that also allows for Ant-style property placeholders.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:decimal"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="substitutableDateTime">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:dateTime type that also allows for Ant-style property placeholders.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:dateTime"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="substitutableLong">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:long type that also allows for Ant-style property placeholders.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:long"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="substitutableBoolean">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:boolean type that also allows for Ant-style property placeholders.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:boolean"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>


    <xsd:simpleType name="expression">
        <xsd:annotation>
            <xsd:documentation>
                A custom xsd:string-like type that represents a MEL expression.
                Attributes should use this type to declare that they support expressions.
                It allows property placeholders and requires the value to not be blank.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="nonBlankString"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="expressionString">
        <xsd:annotation>
            <xsd:documentation>
                An embeddable expression that outputs a String
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="expressionBoolean">
        <xsd:annotation>
            <xsd:documentation>
                A non-embeddable expression that outputs a Boolean
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="expressionInt">
        <xsd:annotation>
            <xsd:documentation>
                A non-embeddable expression that outputs an Integer
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="expressionLong">
        <xsd:annotation>
            <xsd:documentation>
                A non-embeddable expression that outputs a Long
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="expressionDouble">
        <xsd:annotation>
            <xsd:documentation>
                A non-embeddable expression that outputs a Double
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="expressionDecimal">
        <xsd:annotation>
            <xsd:documentation>
                A non-embeddable expression that outputs a Decimal
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="expressionObject">
        <xsd:annotation>
            <xsd:documentation>
                A non-embeddable expression that outputs a generic object
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="expressionList">
        <xsd:annotation>
            <xsd:documentation>
                A non-embeddable expression that outputs a Collection type
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="expressionMap">
        <xsd:annotation>
            <xsd:documentation>
                A non-embeddable expression that outputs a Map
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="expressionDateTime">
        <xsd:annotation>
            <xsd:documentation>
                A non-embeddable expression that outputs a Date
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="expression"/>
    </xsd:simpleType>

    <xsd:simpleType name="timeUnitType">
        <xsd:annotation>
            <xsd:documentation>
                Supported time units enumeration
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="NANOSECONDS"/>
            <xsd:enumeration value="MICROSECONDS"/>
            <xsd:enumeration value="MILLISECONDS"/>
            <xsd:enumeration value="SECONDS"/>
            <xsd:enumeration value="MINUTES"/>
            <xsd:enumeration value="DAYS"/>
            <xsd:enumeration value="HOURS"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="dataUnitType">
        <xsd:annotation>
            <xsd:documentation>
                Data units enumeration
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="BYTE"/>
            <xsd:enumeration value="KB"/>
            <xsd:enumeration value="MB"/>
            <xsd:enumeration value="GB"/>
        </xsd:restriction>
    </xsd:simpleType>

    <!-- i found this a bit confusing, so here is some background...
         this type is typically called from something like
           <xsd:element name="properties" type="mapType/>
         and the "properties" element generates a ChildMapDefinitionParser that
         can "receive" the map entries generated by the embedded spring <entry..>
         elements and which is then set via "setProperties" on the parent.
         in other words, it's a map, and despite the name "properties" has
         nothing to do with the spring <property ...> element.
         spring elements like <entry...> are handled by
         MuleHierarchicalBeanDefinitionParserDelegate which punts them to
         the spring handler -->
    <xsd:element name="properties" type="mapType">
        <xsd:annotation>
            <xsd:documentation>
                A map of Mule properties.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <!-- mapType has ref attribute to allow decoupling from spring, using
         mule 4 parsing mechanism -->
    <xsd:complexType name="mapType">
        <xsd:attribute name="ref" type="xsd:string"/>
    </xsd:complexType>

    <xsd:group name="propertiesGroup">
        <xsd:sequence>
            <xsd:choice>
                <xsd:element name="property" type="keyValueType" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                        <xsd:documentation>
                            Sets a Mule property. This is a name/value pair that can be set on components, services,
                            etc., and which provide a generic way of configuring the system. Typically, you shouldn't
                            need to use a generic property like this, since almost all functionality is exposed via
                            dedicated elements.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element ref="properties" minOccurs="0"/>
            </xsd:choice>
        </xsd:sequence>
    </xsd:group>

    <xsd:complexType name="keyType">
        <xsd:attribute name="key" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="keyValueType">
        <xsd:complexContent>
            <xsd:extension base="keyType">
                <xsd:attribute name="value" type="xsd:string"/>
                <xsd:attribute name="value-ref" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType name="attributeType">
        <xsd:restriction base="xsd:string"/>
    </xsd:simpleType>

    <xsd:simpleType name="nonEmptyAttributeType">
        <xsd:restriction base="xsd:string">
            <xsd:minLength value="1"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="dataReferenceType" mixed="true">
        <xsd:attribute name="file" type="xsd:string"/>
        <xsd:attribute name="ref" type="xsd:string"/>
        <!--I don't like this flag, may be we could use content-type mappings... -->
        <xsd:attribute name="binary" type="substitutableBoolean"/>
    </xsd:complexType>

    <xsd:attributeGroup name="mimeTypeAttributes">
        <xsd:attribute name="mimeType" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The mime type, e.g. text/plain or application/json
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <!-- these cannot be references (unless we use qualified attribute names, which are ugly),
         but serve as templates to cut+paste in individual transports

    <xsd:attribute name="path" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                A file location.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:attribute>

    <xsd:attribute name="user" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                A username.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:attribute>

    <xsd:attribute name="password" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                A password.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:attribute>

    <xsd:attribute name="host" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                An IP address (eg www.mulesoft.com, localhost, 127.0.0.1).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:attribute>

    <xsd:attribute name="port" type="substitutablePortNumber">
        <xsd:annotation>
            <xsd:documentation>
                A port number.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:attribute>

    -->

    <!--==============================================================-->
    <!--  Cache                                                       -->
    <!--==============================================================-->

    <xsd:element name="abstract-caching-strategy" abstract="true" type="abstractCachingStrategyType"
                 substitutionGroup="abstract-extension">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for caching strategies elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractCachingStrategyType">
        <xsd:complexContent>
            <xsd:extension base="abstractExtensionType">
                <xsd:attribute name="name" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name of the caching strategy.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Object Store -->
    <xsd:element name="global-abstract-object-store" substitutionGroup="abstract-shared-extension" abstract="true"
                 type="abstractObjectStoreType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for global object store elements.Global means that any element can access it.
                Used for elements that reference an object-store but the implementation is in the connector
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="abstract-object-store" abstract="true" type="abstractObjectStoreType">
        <xsd:annotation>
            <xsd:documentation>
                Deprecated, use 'global-abstract-object-store' instead
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="abstract-private-object-store" abstract="true" type="abstractObjectStoreType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for private object store elements.Private means that only the component that defines it
                will be able to access it.
                Used for elements that reference an object-store but the implementation is in the connector
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractObjectStoreType">
        <xsd:complexContent>
            <xsd:extension base="abstractExtensionType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="flow" type="flowType">
        <xsd:annotation>
            <xsd:documentation>
                A pipeline of message processors processed using a given processingStrategy.
                Called when a new message is received from a message source, a flow-ref, or programmatically.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="flowType">
        <xsd:complexContent>
            <xsd:extension base="annotatedType">
                <xsd:sequence>
                    <xsd:element name="description" type="descriptionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This can hold any kind of documentation related to the flow construct. It is intended to
                                be "human readable" only and is not used by the system.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:group ref="messageSource" minOccurs="0" maxOccurs="1"/>
                    <xsd:choice minOccurs="1" maxOccurs="unbounded">
                        <xsd:group ref="messageProcessorOrMixedContentMessageProcessor"/>
                    </xsd:choice>
                    <xsd:choice minOccurs="0" maxOccurs="1">
                        <xsd:element ref="abstract-exception-strategy" minOccurs="0"/>
                    </xsd:choice>
                </xsd:sequence>
                <xsd:attribute name="name" type="nonBlankString" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The name used to identify this flow construct.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="initialState" default="started">
                    <xsd:annotation>
                        <xsd:documentation>
                            The initial state of the flow. Usually a flow is started automatically ("started"), but this
                            attribute can be used to disable initial startup ("stopped").
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:union>
                            <xsd:simpleType>
                                <xsd:restriction base="propertyPlaceholderType"/>
                            </xsd:simpleType>
                            <xsd:simpleType>
                                <xsd:restriction base="xsd:NMTOKEN">
                                    <xsd:enumeration value="started"/>
                                    <xsd:enumeration value="stopped"/>
                                </xsd:restriction>
                            </xsd:simpleType>
                        </xsd:union>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="maxConcurrency">
                    <xsd:annotation>
                        <xsd:documentation>
                            The maximum concurrency. This value determines the maximum level of parallelism that the
                            Flow can use to optimize its performance when processing messages.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="substitutableInt"/>
                    </xsd:simpleType>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


</xsd:schema>