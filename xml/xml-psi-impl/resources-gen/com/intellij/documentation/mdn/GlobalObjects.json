{
  "license": {
    "name": "CC-BY-SA 2.5",
    "url": "https://creativecommons.org/licenses/by-sa/2.5/"
  },
  "author": {
    "name": "Mozilla Contributors",
    "url": "https://github.com/mdn/content"
  },
  "lang": "en-us",
  "symbols": {
    "aggregateerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "71",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>AggregateError</code></strong> object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/any\"><code>Promise.any()</code></a>, when all promises passed to it reject.\n<p><code>AggregateError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "aggregateerror.aggregateerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror/aggregateerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "71",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>AggregateError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a> objects.",
      "parameters": {
        "errors": "An iterable of errors, may not actually be <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instances.",
        "message": "An optional human-readable description of the aggregate error.",
        "options": "An object that has the following properties:\n<dl>\n<dt id=\"cause\"><a href=\"#cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n</dd>\n</dl>"
      }
    },
    "aggregateerror.errors": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror/errors",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "71",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>errors</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a> instance contains an array representing the errors that were aggregated."
    },
    "array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Array</code></strong> object, as with arrays in other programming languages, enables <a href=\"$MDN_URL$/Learn_web_development/Core/Scripting/Arrays\">storing a collection of multiple items under a single variable name</a>, and has members for <a href=\"#examples\">performing common array operations</a>."
    },
    "array.array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> objects.",
      "parameters": {
        "element1<br>\n…<br>\nelementN": "A JavaScript array is initialized with the given elements, except in the case where\na single argument is passed to the <code>Array</code> constructor and that argument is\na number (see the <code>arrayLength</code> parameter below). Note that this special case only\napplies to JavaScript arrays created with the <code>Array</code> constructor, not\narray literals created with the square bracket syntax.",
        "arrayLength": "If the only argument passed to the <code>Array</code> constructor is an integer\nbetween 0 and 2<sup>32</sup> - 1 (inclusive), this returns a new JavaScript array with\nits <code>length</code> property set to that number (<strong>Note:</strong> this\nimplies an array of <code>arrayLength</code> empty slots, not slots with actual\n<code>undefined</code> values — see <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#sparse_arrays\">sparse arrays</a>)."
      },
      "throws": {
        "RangeError": "Thrown if there's only one argument (<code>arrayLength</code>) that is a number, but its value is not an integer or not between 0 and 2<sup>32</sup> - 1 (inclusive)."
      }
    },
    "array.at": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/at",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "92",
        "ChromeAndroid": "92",
        "Edge": "92",
        "Firefox": "90",
        "FirefoxAndroid": "90",
        "Opera": "78",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "16.6.0",
        "Deno": "1.12"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2022-03-14",
        "highDate": "2024-09-14"
      },
      "doc": "The <strong><code>at()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.",
      "parameters": {
        "index": "Zero-based index of the array element to be returned, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. Negative index counts back from the end of the array — if <code>index &lt; 0</code>, <code>index + array.length</code> is accessed."
      },
      "returns": "The element in the array matching the given index. Always returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if <code>index &lt; -array.length</code> or <code>index &gt;= array.length</code> without attempting to access the corresponding property."
    },
    "array.concat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/concat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>concat()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances is used to merge two or more arrays.\nThis method does not change the existing arrays, but instead returns a new array.",
      "parameters": {
        "value1, …, valueN": "Arrays and/or values to concatenate into a new array. If all\n<code>valueN</code> parameters are omitted, <code>concat</code> returns a\n<a href=\"$MDN_URL$/Glossary/Shallow_copy\">shallow copy</a> of the existing array on which it is called. See the description below\nfor more details."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance."
    },
    "array.copywithin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/copywithin",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "32",
        "FirefoxAndroid": "32",
        "Opera": "32",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>copyWithin()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances shallow copies part of this array to another location in the same array and returns this array without modifying its length.",
      "parameters": {
        "target": "Zero-based index at which to copy the sequence to, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. This corresponds to where the element at <code>start</code> will be copied to, and all elements between <code>start</code> and <code>end</code> are copied to succeeding indices.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= target &lt; 0</code>, <code>target + array.length</code> is used.</li>\n<li>If <code>target &lt; -array.length</code>, <code>0</code> is used.</li>\n<li>If <code>target &gt;= array.length</code>, nothing is copied.</li>\n<li>If <code>target</code> is positioned after <code>start</code> after normalization, copying only happens until the end of <code>array.length</code> (in other words, <code>copyWithin()</code> never extends the array).</li>\n</ul>",
        "start": "Zero-based index at which to start copying elements from, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= start &lt; 0</code>, <code>start + array.length</code> is used.</li>\n<li>If <code>start &lt; -array.length</code>, <code>0</code> is used.</li>\n<li>If <code>start &gt;= array.length</code>, nothing is copied.</li>\n</ul>",
        "end": "Zero-based index at which to end copying elements from, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>copyWithin()</code> copies up to but not including <code>end</code>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= end &lt; 0</code>, <code>end + array.length</code> is used.</li>\n<li>If <code>end &lt; -array.length</code>, <code>0</code> is used.</li>\n<li>If <code>end &gt;= array.length</code> or <code>end</code> is omitted or <code>undefined</code>, <code>array.length</code> is used, causing all elements until the end to be copied.</li>\n<li>If <code>end</code> implies a position before or at the position that <code>start</code> implies, nothing is copied.</li>\n</ul>"
      },
      "returns": "The modified array."
    },
    "array.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "28",
        "FirefoxAndroid": "28",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>entries()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that contains the key/value pairs for each index in the array.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "array.every": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/every",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1.5",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>every()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances tests whether\nall elements in the array pass the test implemented by the provided function. It\nreturns a Boolean value.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>every()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<code>true</code> unless <code>callbackFn</code> returns a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value for an array element, in which case <code>false</code> is immediately returned."
    },
    "array.fill": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/fill",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "31",
        "FirefoxAndroid": "31",
        "Opera": "32",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-01",
        "highDate": "2018-03-01"
      },
      "doc": "The <strong><code>fill()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances changes all elements within a range of indices in an array to a static value. It returns the modified array.",
      "parameters": {
        "value": "Value to fill the array with. Note all elements in the array will be this exact value: if <code>value</code> is an object, each slot in the array will reference that object.",
        "start": "Zero-based index at which to start filling, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= start &lt; 0</code>, <code>start + array.length</code> is used.</li>\n<li>If <code>start &lt; -array.length</code> or <code>start</code> is omitted, <code>0</code> is used.</li>\n<li>If <code>start &gt;= array.length</code>, no index is filled.</li>\n</ul>",
        "end": "Zero-based index at which to end filling, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>fill()</code> fills up to but not including <code>end</code>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= end &lt; 0</code>, <code>end + array.length</code> is used.</li>\n<li>If <code>end &lt; -array.length</code>, <code>0</code> is used.</li>\n<li>If <code>end &gt;= array.length</code> or <code>end</code> is omitted or <code>undefined</code>, <code>array.length</code> is used, causing all indices until the end to be filled.</li>\n<li>If <code>end</code> implies a position before or at the position that <code>start</code> implies, nothing is filled.</li>\n</ul>"
      },
      "returns": "The modified array, filled with <code>value</code>."
    },
    "array.filter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/filter",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1.5",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>filter()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances creates a <a href=\"$MDN_URL$/Glossary/Shallow_copy\">shallow copy</a> of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to keep the element in the resulting array, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>filter()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A <a href=\"$MDN_URL$/Glossary/Shallow_copy\">shallow copy</a> of the given array containing just the elements that pass the test. If no elements pass the test, an empty array is returned."
    },
    "array.find": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/find",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "4",
        "Opera": "32",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-01",
        "highDate": "2018-03-01"
      },
      "doc": "The <strong><code>find()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns the first element in the provided array that satisfies the provided testing function.\nIf no values satisfy the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.\n<ul>\n<li>If you need the <strong>index</strong> of the found element in the array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>.</li>\n<li>If you need to find the <strong>index of a value</strong>, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a>.\n(It's similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>, but checks each element for equality with the value instead of using a testing function.)</li>\n<li>If you need to find if a value <strong>exists</strong> in an array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a>.\nAgain, it checks each element for equality with the value instead of using a testing function.</li>\n<li>If you need to find if any element satisfies the provided testing function, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some()</code></a>.</li>\n<li>If you need to find all elements that satisfy the provided testing function, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter()</code></a>.</li>\n</ul>",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>find()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The first element in the array that satisfies the provided testing function.\nOtherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned."
    },
    "array.findindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/findindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "4",
        "Opera": "32",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-01",
        "highDate": "2018-03-01"
      },
      "doc": "The <strong><code>findIndex()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns the index of the first element in an array that satisfies the provided testing function.\nIf no elements satisfy the testing function, -1 is returned.\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a> method, which returns the first element that satisfies the testing function (rather than its index).",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>findIndex()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The index of the first element in the array that passes the test. Otherwise, <code>-1</code>."
    },
    "array.findlast": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/findlast",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "97",
        "ChromeAndroid": "97",
        "Edge": "97",
        "Firefox": "104",
        "FirefoxAndroid": "104",
        "Opera": "83",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "18.0.0",
        "Deno": "1.16"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2022-08-23",
        "highDate": "2025-02-23"
      },
      "doc": "The <strong><code>findLast()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances iterates the array in reverse order and returns the value of the first element that satisfies the provided testing function.\nIf no elements satisfy the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.\n<p>If you need to find:\n<ul>\n<li>the <em>first</em> element that matches, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a>.</li>\n<li>the <em>index</em> of the last matching element in the array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>findLastIndex()</code></a>.</li>\n<li>the <em>index of a value</em>, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a>.\n(It's similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>, but checks each element for equality with the value instead of using a testing function.)</li>\n<li>whether a value <em>exists</em> in an array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a>.\nAgain, it checks each element for equality with the value instead of using a testing function.</li>\n<li>if any element satisfies the provided testing function, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some()</code></a>.</li>\n</ul>",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>findLast()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The last (highest-index) element in the array that satisfies the provided testing function; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no matching element is found."
    },
    "array.findlastindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/findlastindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "97",
        "ChromeAndroid": "97",
        "Edge": "97",
        "Firefox": "104",
        "FirefoxAndroid": "104",
        "Opera": "83",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "18.0.0",
        "Deno": "1.16"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2022-08-23",
        "highDate": "2025-02-23"
      },
      "doc": "The <strong><code>findLastIndex()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances iterates the array in reverse order and returns the index of the first element that satisfies the provided testing function.\nIf no elements satisfy the testing function, -1 is returned.\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>findLast()</code></a> method, which returns the value of last element that satisfies the testing function (rather than its index).",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>findLastIndex()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The index of the last (highest-index) element in the array that passes the test.\nOtherwise <code>-1</code> if no matching element is found."
    },
    "array.flat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/flat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "69",
        "ChromeAndroid": "69",
        "Edge": "79",
        "Firefox": "62",
        "FirefoxAndroid": "62",
        "Opera": "56",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "11.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>flat()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances creates a new array with all sub-array\nelements concatenated into it recursively up to the specified depth.",
      "parameters": {
        "depth": "The depth level specifying how deep a nested array structure should be flattened.\nDefaults to 1."
      },
      "returns": "A new array with the sub-array elements concatenated into it."
    },
    "array.flatmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/flatmap",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "69",
        "ChromeAndroid": "69",
        "Edge": "79",
        "Firefox": "62",
        "FirefoxAndroid": "62",
        "Opera": "56",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "11.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>flatMap()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a> followed by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a> of depth 1 (<code>arr.map(...args).flat()</code>), but slightly more efficient than calling those two methods separately.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return an array containing new elements of the new array, or a single non-array value to be added to the new array. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>flatMap()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A new array with each element being the result of the callback function and flattened\nby a depth of 1."
    },
    "array.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/foreach",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1.5",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>forEach()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances executes a provided function once\nfor each array element.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. Its return value is discarded. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>forEach()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>)."
    },
    "array.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/from",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "32",
        "FirefoxAndroid": "32",
        "Opera": "32",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Array.from()</code></strong> static method creates a new, shallow-copied <code>Array</code> instance from an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> or <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like</a> object.",
      "parameters": {
        "arrayLike": "An iterable or array-like object to convert to an array.",
        "mapFn": "A function to call on every element of the array. If provided, every value to be added to the array is first passed through this function, and <code>mapFn</code>'s return value is added to the array instead. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n</dl>",
        "thisArg": "Value to use as <code>this</code> when executing <code>mapFn</code>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance."
    },
    "array.fromasync": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/fromasync",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "121",
        "ChromeAndroid": "121",
        "Edge": "121",
        "Firefox": "115",
        "FirefoxAndroid": "115",
        "Opera": "107",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "22.0.0",
        "Deno": "1.38"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-01-25"
      },
      "doc": "The <strong><code>Array.fromAsync()</code></strong> static method creates a new, shallow-copied <code>Array</code> instance from an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a>, or <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like</a> object.",
      "parameters": {
        "arrayLike": "An async iterable, iterable, or array-like object to convert to an array.",
        "mapFn": "A function to call on every element of the array. If provided, every value to be added to the array is first passed through this function, and <code>mapFn</code>'s return value is added to the array instead (after being <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/await\">awaited</a>). The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array. Because all elements are first <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/await\">awaited</a>, this value will never be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise#thenables\">thenable</a>.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n</dl>",
        "thisArg": "Value to use as <code>this</code> when executing <code>mapFn</code>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> whose fulfillment value is a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance."
    },
    "array.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/includes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "14",
        "Firefox": "43",
        "FirefoxAndroid": "43",
        "Opera": "34",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-08-02",
        "highDate": "2019-02-02"
      },
      "doc": "The <strong><code>includes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances determines whether an array\nincludes a certain value among its entries, returning <code>true</code> or\n<code>false</code> as appropriate.",
      "parameters": {
        "searchElement": "The value to search for.",
        "fromIndex": "Zero-based index at which to start searching, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= fromIndex &lt; 0</code>, <code>fromIndex + array.length</code> is used. However, the array is still searched from front to back in this case.</li>\n<li>If <code>fromIndex &lt; -array.length</code> or <code>fromIndex</code> is omitted, <code>0</code> is used, causing the entire array to be searched.</li>\n<li>If <code>fromIndex &gt;= array.length</code>, the array is not searched and <code>false</code> is returned.</li>\n</ul>"
      },
      "returns": "A boolean value which is <code>true</code> if the value <code>searchElement</code> is found within the array (or the part of the array indicated by the index <code>fromIndex</code>, if specified)."
    },
    "array.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/indexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1.5",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>indexOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns the first index at which a\ngiven element can be found in the array, or -1 if it is not present.",
      "parameters": {
        "searchElement": "Element to locate in the array.",
        "fromIndex": "Zero-based index at which to start searching, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= fromIndex &lt; 0</code>, <code>fromIndex + array.length</code> is used. Note, the array is still searched from front to back in this case.</li>\n<li>If <code>fromIndex &lt; -array.length</code> or <code>fromIndex</code> is omitted, <code>0</code> is used, causing the entire array to be searched.</li>\n<li>If <code>fromIndex &gt;= array.length</code>, the array is not searched and <code>-1</code> is returned.</li>\n</ul>"
      },
      "returns": "The first index of <code>searchElement</code> in the array; <code>-1</code> if not found."
    },
    "array.isarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/isarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Array.isArray()</code></strong> static method determines whether the passed value is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>.",
      "parameters": {
        "value": "The value to be checked."
      },
      "returns": "<code>true</code> if <code>value</code> is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>; otherwise, <code>false</code>. <code>false</code> is always returned if <code>value</code> is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance."
    },
    "array.join": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/join",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>join()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances creates and\nreturns a new string by concatenating all of the elements in this array,\nseparated by commas or a specified separator string. If the array has\nonly one item, then that item will be returned without using the separator.",
      "parameters": {
        "separator": "A string to separate each pair of adjacent elements of the array. If omitted, the array elements are separated with a comma (\",\")."
      },
      "returns": "A string with all array elements joined. If <code>array.length</code> is <code>0</code>, the empty string is returned."
    },
    "array.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/keys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "28",
        "FirefoxAndroid": "28",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>keys()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that contains the keys for each index in the array.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "array.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1.5",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>lastIndexOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns the last index at which\na given element can be found in the array, or -1 if it is not present. The array is\nsearched backwards, starting at <code>fromIndex</code>.",
      "parameters": {
        "searchElement": "Element to locate in the array.",
        "fromIndex": "Zero-based index at which to start searching backwards, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= fromIndex &lt; 0</code>, <code>fromIndex + array.length</code> is used.</li>\n<li>If <code>fromIndex &lt; -array.length</code>, the array is not searched and <code>-1</code> is returned. You can think of it conceptually as starting at a nonexistent position before the beginning of the array and going backwards from there. There are no array elements on the way, so <code>searchElement</code> is never found.</li>\n<li>If <code>fromIndex &gt;= array.length</code> or <code>fromIndex</code> is omitted or <code>undefined</code>, <code>array.length - 1</code> is used, causing the entire array to be searched. You can think of it conceptually as starting at a nonexistent position beyond the end of the array and going backwards from there. It eventually reaches the real end position of the array, at which point it starts searching backwards through the actual array elements.</li>\n</ul>"
      },
      "returns": "The last index of <code>searchElement</code> in the array; <code>-1</code> if not found."
    },
    "array.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/length",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>length</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance represents the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array."
    },
    "array.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/map",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1.5",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>map()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances creates\na new array populated with the results of calling a provided function on\nevery element in the calling array.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. Its return value is added as a single element in the new array. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>map()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A new array with each element being the result of the callback function."
    },
    "array.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/of",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "39",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "26",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Array.of()</code></strong> static method creates a new <code>Array</code>\ninstance from a variable number of arguments, regardless of number or type of the\narguments.",
      "parameters": {
        "element1<br>\n…<br>\nelementN": "Elements used to create the array."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance."
    },
    "array.pop": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/pop",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>pop()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances removes the <strong>last</strong>\nelement from an array and returns that element. This method changes the length of the\narray.",
      "returns": "The removed element from the array; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the array is empty."
    },
    "array.push": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/push",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>push()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances adds the specified elements to the end of\nan array and returns the new length of the array.",
      "parameters": {
        "element1<br>\n…<br>\nelementN": "The element(s) to add to the end of the array."
      },
      "returns": "The new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property of the object upon which the method was called."
    },
    "array.reduce": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reduce",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "3",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "3.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>reduce()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.\n<p>The first time that the callback is run there is no \"return value of the previous calculation\". If supplied, an initial value may be used in its place. Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. Its return value becomes the value of the <code>accumulator</code> parameter on the next invocation of <code>callbackFn</code>. For the last invocation, the return value becomes the return value of <code>reduce()</code>. The function is called with the following arguments:\n<dl>\n<dt id=\"accumulator\"><a href=\"#accumulator\"><code>accumulator</code></a></dt>\n<dd>\n<p>The value resulting from the previous call to <code>callbackFn</code>. On the first call, its value is <code>initialValue</code> if the latter is specified; otherwise its value is <code>array[0]</code>.\n</dd>\n<dt id=\"currentvalue\"><a href=\"#currentvalue\"><code>currentValue</code></a></dt>\n<dd>\n<p>The value of the current element. On the first call, its value is <code>array[0]</code> if <code>initialValue</code> is specified; otherwise its value is <code>array[1]</code>.\n</dd>\n<dt id=\"currentindex\"><a href=\"#currentindex\"><code>currentIndex</code></a></dt>\n<dd>\n<p>The index position of <code>currentValue</code> in the array. On the first call, its value is <code>0</code> if <code>initialValue</code> is specified, otherwise <code>1</code>.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>reduce()</code> was called upon.\n</dd>\n</dl>",
        "initialValue": "A value to which <code>accumulator</code> is initialized the first time the callback is called.\nIf <code>initialValue</code> is specified, <code>callbackFn</code> starts executing with the first value in the array as <code>currentValue</code>.\nIf <code>initialValue</code> is <em>not</em> specified, <code>accumulator</code> is initialized to the first value in the array, and <code>callbackFn</code> starts executing with the second value in the array as <code>currentValue</code>. In this case, if the array is empty (so that there's no first value to return as <code>accumulator</code>), an error is thrown."
      },
      "returns": "The value that results from running the \"reducer\" callback function to completion over the entire array.",
      "throws": {
        "TypeError": "Thrown if the array contains no elements and <code>initialValue</code> is not provided."
      }
    },
    "array.reduceright": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reduceright",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "3",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "3.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>reduceRight()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.\n<p>See also <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>Array.prototype.reduce()</code></a> for left-to-right.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. Its return value becomes the value of the <code>accumulator</code> parameter on the next invocation of <code>callbackFn</code>. For the last invocation, the return value becomes the return value of <code>reduceRight()</code>. The function is called with the following arguments:\n<dl>\n<dt id=\"accumulator\"><a href=\"#accumulator\"><code>accumulator</code></a></dt>\n<dd>\n<p>The value resulting from the previous call to <code>callbackFn</code>. On the first call, its value is <code>initialValue</code> if the latter is specified; otherwise its value is the last element of the array.\n</dd>\n<dt id=\"currentvalue\"><a href=\"#currentvalue\"><code>currentValue</code></a></dt>\n<dd>\n<p>The value of the current element. On the first call, its value is the last element if <code>initialValue</code> is specified; otherwise its value is the second-to-last element.\n</dd>\n<dt id=\"currentindex\"><a href=\"#currentindex\"><code>currentIndex</code></a></dt>\n<dd>\n<p>The index position of <code>currentValue</code> in the array. On the first call, its value is <code>array.length - 1</code> if <code>initialValue</code> is specified, otherwise <code>array.length - 2</code>.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>reduceRight()</code> was called upon.\n</dd>\n</dl>",
        "initialValue": "Value to use as accumulator to the first call of the <code>callbackFn</code>. If no initial value is supplied, the last element in the array will be used and skipped. Calling <code>reduceRight()</code> on an empty array without an initial value creates a <code>TypeError</code>."
      },
      "returns": "The value that results from the reduction."
    },
    "array.reverse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reverse",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>reverse()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances reverses an array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em> and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first. In other words, elements order in the array will be turned towards the direction opposite to that previously stated.\n<p>To reverse the elements in an array without mutating the original array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"><code>toReversed()</code></a>.",
      "returns": "The reference to the original array, now reversed. Note that the array is reversed <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em>, and no copy is made."
    },
    "array.shift": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/shift",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>shift()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances removes the <strong>first</strong>\nelement from an array and returns that removed element. This method changes the length\nof the array.",
      "returns": "The removed element from the array; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the array is empty."
    },
    "array.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>slice()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns a <a href=\"$MDN_URL$/Glossary/Shallow_copy\">shallow copy</a> of a portion of\nan array into a new array object selected from <code>start</code> to <code>end</code>\n(<code>end</code> not included) where <code>start</code> and <code>end</code> represent\nthe index of items in that array. The original array will not be modified.",
      "parameters": {
        "start": "Zero-based index at which to start extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= start &lt; 0</code>, <code>start + array.length</code> is used.</li>\n<li>If <code>start &lt; -array.length</code> or <code>start</code> is omitted, <code>0</code> is used.</li>\n<li>If <code>start &gt;= array.length</code>, an empty array is returned.</li>\n</ul>",
        "end": "Zero-based index at which to end extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>slice()</code> extracts up to but not including <code>end</code>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= end &lt; 0</code>, <code>end + array.length</code> is used.</li>\n<li>If <code>end &lt; -array.length</code>, <code>0</code> is used.</li>\n<li>If <code>end &gt;= array.length</code> or <code>end</code> is omitted or <code>undefined</code>, <code>array.length</code> is used, causing all elements until the end to be extracted.</li>\n<li>If <code>end</code> implies a position before or at the position that <code>start</code> implies, an empty array is returned.</li>\n</ul>"
      },
      "returns": "A new array containing the extracted elements."
    },
    "array.some": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/some",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1.5",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>some()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances tests whether\nat least one element in the array passes the test implemented by the provided\nfunction. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The array <code>some()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<code>false</code> unless <code>callbackFn</code> returns a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value for an array element, in which case <code>true</code> is immediately returned."
    },
    "array.sort": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/sort",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>sort()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances sorts the elements of an array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em> and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code unit values.\n<p>The time and space complexity of the sort cannot be guaranteed as it depends on the\nimplementation.\n<p>To sort the elements in an array without mutating the original array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"><code>toSorted()</code></a>.",
      "parameters": {
        "compareFn": "A function that determines the order of the elements. The function is called with the following arguments:\n<dl>\n<dt id=\"a\"><a href=\"#a\"><code>a</code></a></dt>\n<dd>\n<p>The first element for comparison. Will never be <code>undefined</code>.\n</dd>\n<dt id=\"b\"><a href=\"#b\"><code>b</code></a></dt>\n<dd>\n<p>The second element for comparison. Will never be <code>undefined</code>.\n</dd>\n</dl>\n<p>It should return a number where:\n<ul>\n<li>A negative value indicates that <code>a</code> should come before <code>b</code>.</li>\n<li>A positive value indicates that <code>a</code> should come after <code>b</code>.</li>\n<li>Zero or <code>NaN</code> indicates that <code>a</code> and <code>b</code> are considered equal.</li>\n</ul>\n<p>To memorize this, remember that <code>(a, b) =&gt; a - b</code> sorts numbers in ascending order.\n<p>If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value."
      },
      "returns": "The reference to the original array, now sorted. Note that the array is sorted <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em>, and no copy is made."
    },
    "array.splice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/splice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>splice()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances changes the contents of an array by\nremoving or replacing existing elements and/or adding new elements <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a>.\n<p>To create a new array with a segment removed and/or replaced without mutating the original array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toSpliced\"><code>toSpliced()</code></a>. To access part of an array without modifying it, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a>.",
      "parameters": {
        "start": "Zero-based index at which to start changing the array, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= start &lt; 0</code>, <code>start + array.length</code> is used.</li>\n<li>If <code>start &lt; -array.length</code>, <code>0</code> is used.</li>\n<li>If <code>start &gt;= array.length</code>, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided.</li>\n<li>If <code>start</code> is omitted (and <code>splice()</code> is called with no arguments), nothing is deleted. This is different from passing <code>undefined</code>, which is converted to <code>0</code>.</li>\n</ul>",
        "deleteCount": "An integer indicating the number of elements in the array to remove from <code>start</code>.\n<p>If <code>deleteCount</code> is omitted, or if its value is greater than or equal to the number of elements after the position specified by <code>start</code>, then all the elements from <code>start</code> to the end of the array will be deleted. However, if you wish to pass any <code>itemN</code> parameter, you should pass <code>Infinity</code> as <code>deleteCount</code> to delete all elements after <code>start</code>, because an explicit <code>undefined</code> gets <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted</a> to <code>0</code>.\n<p>If <code>deleteCount</code> is <code>0</code> or negative, no elements are removed.\nIn this case, you should specify at least one new element (see below).",
        "item1, …, itemN": "The elements to add to the array, beginning from <code>start</code>.\n<p>If you do not specify any elements, <code>splice()</code> will only remove elements from the array."
      },
      "returns": "An array containing the deleted elements.\n<p>If only one element is removed, an array of one element is returned.\n<p>If no elements are removed, an empty array is returned."
    },
    "array.symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/symbol.iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>[Symbol.iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows arrays to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator object</a> that yields the value of each index in the array.\n<p>The initial value of this property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values</code></a> property.",
      "returns": "The same return value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values()</code></a>: a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the value of each index in the array."
    },
    "array.symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/symbol.species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "79",
        "Firefox": "48",
        "FirefoxAndroid": "48",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>Array[Symbol.species]</code></strong> static accessor property returns the constructor used to construct return values from array methods.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nThe existence of <code>[Symbol.species]</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible. Modern array methods, such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"><code>toReversed()</code></a>, do not use <code>[Symbol.species]</code> and always return a new <code>Array</code> base class instance.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get [Symbol.species]</code> was called. The return value is used to construct return values from array methods that create new arrays."
    },
    "array.symbol.unscopables": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/symbol.unscopables",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "48",
        "FirefoxAndroid": "48",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[Symbol.unscopables]</code></strong> data property of <code>Array.prototype</code> is shared by all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances. It contains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/with\"><code>with</code></a> statement-binding purposes."
    },
    "array.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns a string representing\nthe elements of the array. The elements are converted to strings using their\n<code>toLocaleString</code> methods and these strings are separated by a locale-specific\nstring (such as a comma \",\").",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object with configuration properties. What you can pass here depends on what elements are being converted. For example, for numbers, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code></a>."
      },
      "returns": "A string representing the elements of the array."
    },
    "array.toreversed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/toreversed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "FirefoxAndroid": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-07-04"
      },
      "doc": "The <strong><code>toReversed()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> counterpart of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>reverse()</code></a> method. It returns a new array with the elements in reversed order.",
      "returns": "A new array containing the elements in reversed order."
    },
    "array.tosorted": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tosorted",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "FirefoxAndroid": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-07-04"
      },
      "doc": "The <strong><code>toSorted()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>sort()</code></a> method. It returns a new array with the elements sorted in ascending order.",
      "parameters": {
        "compareFn": "A function that determines the order of the elements. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>sort()</code></a> for more information."
      },
      "returns": "A new array with the elements sorted in ascending order."
    },
    "array.tospliced": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tospliced",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "FirefoxAndroid": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-07-04"
      },
      "doc": "The <strong><code>toSpliced()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> method. It returns a new array with some elements removed and/or replaced at a given index.",
      "parameters": {
        "start": "Zero-based index at which to start changing the array, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= start &lt; 0</code>, <code>start + array.length</code> is used.</li>\n<li>If <code>start &lt; -array.length</code> or <code>start</code> is omitted, <code>0</code> is used.</li>\n<li>If <code>start &gt;= array.length</code>, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided.</li>\n</ul>",
        "skipCount": "An integer indicating the number of elements in the array to remove (or, to skip) from <code>start</code>.\n<p>If <code>skipCount</code> is omitted, or if its value is greater than or equal to the number of elements after the position specified by <code>start</code>, then all the elements from <code>start</code> to the end of the array will be deleted. However, if you wish to pass any <code>itemN</code> parameter, you should pass <code>Infinity</code> as <code>skipCount</code> to delete all elements after <code>start</code>, because an explicit <code>undefined</code> gets <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted</a> to <code>0</code>.\n<p>If <code>skipCount</code> is <code>0</code> or negative, no elements are removed.\nIn this case, you should specify at least one new element (see below).",
        "item1, …, itemN": "The elements to add to the array, beginning from <code>start</code>.\n<p>If you do not specify any elements, <code>toSpliced()</code> will only remove elements from the array."
      },
      "returns": "A new array that consists of all elements before <code>start</code>, <code>item1</code>, <code>item2</code>, …, <code>itemN</code>, and all elements after <code>start + skipCount</code>."
    },
    "array.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns a string representing the\nspecified array and its elements.",
      "returns": "A string representing the elements of the array."
    },
    "array.unshift": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/unshift",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>unshift()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances adds the specified elements to the\nbeginning of an array and returns the new length of the array.",
      "parameters": {
        "element1<br>\n…<br>\nelementN": "The elements to add to the front of the <code>arr</code>."
      },
      "returns": "The new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property of the object upon which the\nmethod was called."
    },
    "array.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "66",
        "ChromeAndroid": "66",
        "Edge": "14",
        "Firefox": "60",
        "FirefoxAndroid": "60",
        "Opera": "53",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "10.9.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2018-05-09",
        "highDate": "2020-11-09"
      },
      "doc": "The <strong><code>values()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that iterates the value of each item in the array.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "array.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/with",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "FirefoxAndroid": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-07-04"
      },
      "doc": "The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation\">bracket notation</a> to change the value of a given index. It returns a new array with the element at the given index replaced with the given value.",
      "parameters": {
        "index": "Zero-based index at which to change the array, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the array — if <code>-array.length &lt;= index &lt; 0</code>, <code>index + array.length</code> is used.</li>\n<li>If the index after normalization is out of bounds, a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown.</li>\n</ul>",
        "value": "Any value to be assigned to the given index."
      },
      "returns": "A new array with the element at <code>index</code> replaced with <code>value</code>.",
      "throws": {
        "RangeError": "Thrown if <code>index &gt;= array.length</code> or <code>index &lt; -array.length</code>."
      }
    },
    "arraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>ArrayBuffer</code></strong> object is used to represent a generic raw binary data buffer.\n<p>It is an array of bytes, often referred to in other languages as a \"byte array\". You cannot directly manipulate the contents of an <code>ArrayBuffer</code>; instead, you create one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\">typed array objects</a> or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.\n<p>The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer\"><code>ArrayBuffer()</code></a> constructor creates a new <code>ArrayBuffer</code> of the given length in bytes. You can also get an array buffer from existing data, for example, from a <a href=\"$MDN_URL$/Glossary/Base64\">Base64</a> string or <a href=\"$MDN_URL$/Web/API/FileReader/readAsArrayBuffer\">from a local file</a>.\n<p><code>ArrayBuffer</code> is a <a href=\"$MDN_URL$/Web/API/Web_Workers_API/Transferable_objects\">transferable object</a>."
    },
    "arraybuffer.arraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/arraybuffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>ArrayBuffer()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> objects.",
      "parameters": {
        "length": "The size, in bytes, of the array buffer to create.",
        "options": "An object, which can contain the following properties:\n<dl>\n<dt id=\"maxbytelength\"><a href=\"#maxbytelength\"><code>maxByteLength</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The maximum size, in bytes, that the array buffer can be resized to.\n</dd>\n</dl>"
      },
      "returns": "A new <code>ArrayBuffer</code> object of the specified size, with its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> property set to the specified <code>maxByteLength</code> if one was specified. Its contents are initialized to 0.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>length</code> or <code>maxByteLength</code> is larger than <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> (≥ 2<sup>53</sup>) or negative.</li>\n<li><code>length</code> is larger than <code>maxByteLength</code>.</li>\n</ul>"
      }
    },
    "arraybuffer.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/bytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>byteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances returns the length (in bytes) of this array buffer."
    },
    "arraybuffer.detached": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/detached",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "114",
        "ChromeAndroid": "114",
        "Edge": "114",
        "Firefox": "122",
        "FirefoxAndroid": "122",
        "Opera": "100",
        "Safari": "17.4",
        "SafariIOS": "17.4",
        "Nodejs": "21.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-03-05"
      },
      "doc": "The <strong><code>detached</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances returns a boolean indicating whether or not this buffer has been detached (transferred)."
    },
    "arraybuffer.isview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/isview",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "19",
        "Safari": "7",
        "SafariIOS": "7",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>ArrayBuffer.isView()</code></strong> static method determines whether the\npassed value is one of the <code>ArrayBuffer</code> views,\nsuch as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\">typed array objects</a>\nor a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "value": "The value to be checked."
      },
      "returns": "<code>true</code> if the given argument is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> views;\notherwise, <code>false</code>."
    },
    "arraybuffer.maxbytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/maxbytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Firefox": "128",
        "FirefoxAndroid": "128",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-07-09"
      },
      "doc": "The <strong><code>maxByteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances returns the maximum length (in bytes) that this array buffer can be resized to."
    },
    "arraybuffer.resizable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/resizable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Firefox": "128",
        "FirefoxAndroid": "128",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-07-09"
      },
      "doc": "The <strong><code>resizable</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances returns whether this array buffer can be resized or not."
    },
    "arraybuffer.resize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/resize",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Firefox": "128",
        "FirefoxAndroid": "128",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-07-09"
      },
      "doc": "The <strong><code>resize()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances resizes the <code>ArrayBuffer</code> to the specified size, in bytes.",
      "parameters": {
        "newLength": "The new length, in bytes, to resize the <code>ArrayBuffer</code> to."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).",
      "throws": {
        "TypeError": "Thrown if the <code>ArrayBuffer</code> is detached or is not resizable.",
        "RangeError": "Thrown if <code>newLength</code> is larger than the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> of the <code>ArrayBuffer</code>."
      }
    },
    "arraybuffer.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "17",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "12",
        "FirefoxAndroid": "14",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "6",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>slice()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances returns a new <code>ArrayBuffer</code> whose contents are a copy of this <code>ArrayBuffer</code>'s bytes from <code>start</code>, inclusive, up to <code>end</code>, exclusive. If either <code>start</code> or <code>end</code> is negative, it refers to an index from the end of the array, as opposed to from the beginning.",
      "parameters": {
        "start": "Zero-based index at which to start extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the buffer — if <code>-buffer.length &lt;= start &lt; 0</code>, <code>start + buffer.length</code> is used.</li>\n<li>If <code>start &lt; -buffer.length</code> or <code>start</code> is omitted, <code>0</code> is used.</li>\n<li>If <code>start &gt;= buffer.length</code>, an empty buffer is returned.</li>\n</ul>",
        "end": "Zero-based index at which to end extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>slice()</code> extracts up to but not including <code>end</code>.\n<ul>\n<li>Negative index counts back from the end of the buffer — if <code>-buffer.length &lt;= end &lt; 0</code>, <code>end + buffer.length</code> is used.</li>\n<li>If <code>end &lt; -buffer.length</code>, <code>0</code> is used.</li>\n<li>If <code>end &gt;= buffer.length</code> or <code>end</code> is omitted is <code>undefined</code>, <code>buffer.length</code> is used, causing all elements until the end to be extracted.</li>\n<li>If <code>end</code> implies a position before or at the position that <code>start</code> implies, an empty buffer is returned.</li>\n</ul>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> containing the extracted elements. It is not <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resizable\">resizable</a>, even if the original was."
    },
    "arraybuffer.symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/symbol.species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "48",
        "FirefoxAndroid": "48",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>ArrayBuffer[Symbol.species]</code></strong> static accessor property returns the constructor used to construct return values from array buffer methods.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nThe existence of <code>[Symbol.species]</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get [Symbol.species]</code> was called. The return value is used to construct return values from array buffer methods that create new array buffers."
    },
    "arraybuffer.transfer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/transfer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "114",
        "ChromeAndroid": "114",
        "Edge": "114",
        "Firefox": "122",
        "FirefoxAndroid": "122",
        "Opera": "100",
        "Safari": "17.4",
        "SafariIOS": "17.4",
        "Nodejs": "21.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-03-05"
      },
      "doc": "The <strong><code>transfer()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances creates a new <code>ArrayBuffer</code> with the same byte content as this buffer, then detaches this buffer.",
      "parameters": {
        "newByteLength": "The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength\"><code>byteLength</code></a> of the new <code>ArrayBuffer</code>. Defaults to the <code>byteLength</code> of this <code>ArrayBuffer</code>.\n<ul>\n<li>If <code>newByteLength</code> is smaller than the <code>byteLength</code> of this <code>ArrayBuffer</code>, the \"overflowing\" bytes are dropped.</li>\n<li>If <code>newByteLength</code> is larger than the <code>byteLength</code> of this <code>ArrayBuffer</code>, the extra bytes are filled with zeros.</li>\n<li>If this <code>ArrayBuffer</code> is resizable, <code>newByteLength</code> must not be greater than its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength\"><code>maxByteLength</code></a>.</li>\n</ul>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object. Its contents are initialized to the contents of this <code>ArrayBuffer</code>, and extra bytes, if any, are filled with zeros. The new <code>ArrayBuffer</code> is resizable if and only if this <code>ArrayBuffer</code> is resizable, in which case its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> is the same as this <code>ArrayBuffer</code>'s. The original <code>ArrayBuffer</code> is detached.",
      "throws": {
        "RangeError": "Thrown if this <code>ArrayBuffer</code> is resizable and <code>newByteLength</code> is greater than the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> of this <code>ArrayBuffer</code>.",
        "TypeError": "Thrown if this <code>ArrayBuffer</code> is already detached."
      }
    },
    "arraybuffer.transfertofixedlength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/transfertofixedlength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "114",
        "ChromeAndroid": "114",
        "Edge": "114",
        "Firefox": "122",
        "FirefoxAndroid": "122",
        "Opera": "100",
        "Safari": "17.4",
        "SafariIOS": "17.4",
        "Nodejs": "21.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-03-05"
      },
      "doc": "The <strong><code>transferToFixedLength()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances creates a new non-resizable <code>ArrayBuffer</code> with the same byte content as this buffer, then detaches this buffer.",
      "parameters": {
        "newByteLength": "The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength\"><code>byteLength</code></a> of the new <code>ArrayBuffer</code>. Defaults to the <code>byteLength</code> of this <code>ArrayBuffer</code>.\n<ul>\n<li>If <code>newByteLength</code> is smaller than the <code>byteLength</code> of this <code>ArrayBuffer</code>, the \"overflowing\" bytes are dropped.</li>\n<li>If <code>newByteLength</code> is larger than the <code>byteLength</code> of this <code>ArrayBuffer</code>, the extra bytes are filled with zeros.</li>\n</ul>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object. Its contents are initialized to the contents of this <code>ArrayBuffer</code>, and extra bytes, if any, are filled with zeros. The new <code>ArrayBuffer</code> is always non-resizable. The original <code>ArrayBuffer</code> is detached.",
      "throws": {
        "TypeError": "Thrown if this <code>ArrayBuffer</code> is already detached."
      }
    },
    "asyncfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "15",
        "Firefox": "52",
        "FirefoxAndroid": "52",
        "Opera": "42",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.6.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>AsyncFunction</code></strong> object provides methods for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/async_function\">async functions</a>. In JavaScript, every async function is actually an <code>AsyncFunction</code> object.\n<p>Note that <code>AsyncFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div>\n```js\nconst AsyncFunction = async function () {}.constructor;\n```\n</div>\n<p><code>AsyncFunction</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>."
    },
    "asyncfunction.asyncfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncfunction/asyncfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "15",
        "Firefox": "52",
        "FirefoxAndroid": "52",
        "Opera": "42",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.6.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>AsyncFunction()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncFunction\"><code>AsyncFunction</code></a> objects.\n<p>Note that <code>AsyncFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div>\n```js\nconst AsyncFunction = async function () {}.constructor;\n```\n</div>\n<p>The <code>AsyncFunction()</code> constructor is not intended to be used directly, and all caveats mentioned in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function()</code></a> description apply to <code>AsyncFunction()</code>."
    },
    "asyncgenerator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgenerator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "FirefoxAndroid": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>AsyncGenerator</code></strong> object is returned by an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/async_function*\">async generator function</a> and it conforms to both the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable protocol and the async iterator protocol</a>.\n<p>Async generator methods always yield <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> objects.\n<p><code>AsyncGenerator</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncIterator\"><code>AsyncIterator</code></a> class."
    },
    "asyncgenerator.next": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgenerator/next",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "FirefoxAndroid": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>next()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\"><code>AsyncGenerator</code></a> instances returns the next value in the sequence.",
      "parameters": {
        "value": "An optional value used to modify the internal state of the generator. A value passed to the <code>next()</code> method will be received by <code>yield</code>"
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which when resolved returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n<dt id=\"done\"><a href=\"#done\"><code>done</code></a></dt>\n<dd>\n<p>A boolean value:\n<ul>\n<li><code>true</code> if the generator is past the end of its control flow. In this case <code>value</code> specifies the <em>return value</em> of the generator (which may be undefined).</li>\n<li><code>false</code> if the generator is able to produce more values.</li>\n</ul>\n</dd>\n<dt id=\"value_2\"><a href=\"#value_2\"><code>value</code></a></dt>\n<dd>\n<p>Any JavaScript value yielded or returned by the generator.\n</dd>\n</dl>"
    },
    "asyncgenerator.return": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgenerator/return",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "FirefoxAndroid": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>return()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\"><code>AsyncGenerator</code></a> instances acts as if a <code>return</code> statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a> block.",
      "parameters": {
        "value": "The value to return."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which resolves with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n<dt id=\"done\"><a href=\"#done\"><code>done</code></a></dt>\n<dd>\n<p>A boolean value:\n<ul>\n<li><code>true</code> if the generator function's control flow has reached the end.</li>\n<li><code>false</code> if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the <code>return</code> is captured in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a> and there are more <code>yield</code> expressions in the <code>finally</code> block.</li>\n</ul>\n</dd>\n<dt id=\"value_2\"><a href=\"#value_2\"><code>value</code></a></dt>\n<dd>\n<p>The value that is given as an argument, or, if the <code>yield</code> expression is wrapped in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a>, the value yielded/returned from the <code>finally</code> block.\n</dd>\n</dl>"
    },
    "asyncgenerator.throw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgenerator/throw",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "FirefoxAndroid": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>throw()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\"><code>AsyncGenerator</code></a> instances acts as if a <code>throw</code> statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",
      "parameters": {
        "exception": "The exception to throw. For debugging purposes, it is useful to make it an <code>instanceof</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
      },
      "returns": "If the thrown error is not caught, it will return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which rejects with the exception passed in.\n<p>If the exception is caught by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> and the generator resumes to yield more values, it will return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which resolves with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n<dt id=\"done\"><a href=\"#done\"><code>done</code></a></dt>\n<dd>\n<p>A boolean value:\n<ul>\n<li><code>true</code> if the generator function's control flow has reached the end.</li>\n<li><code>false</code> if the generator function is able to produce more values.</li>\n</ul>\n</dd>\n<dt id=\"value\"><a href=\"#value\"><code>value</code></a></dt>\n<dd>\n<p>The value yielded from the next <code>yield</code> expression.\n</dd>\n</dl>"
    },
    "asyncgeneratorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgeneratorfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "FirefoxAndroid": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>AsyncGeneratorFunction</code></strong> object provides methods for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/async_function*\">async generator functions</a>. In JavaScript, every async generator function is actually an <code>AsyncGeneratorFunction</code> object.\n<p>Note that <code>AsyncGeneratorFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div>\n```js\nconst AsyncGeneratorFunction = async function* () {}.constructor;\n```\n</div>\n<p><code>AsyncGeneratorFunction</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>."
    },
    "asyncgeneratorfunction.asyncgeneratorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgeneratorfunction/asyncgeneratorfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "FirefoxAndroid": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>AsyncGeneratorFunction()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\"><code>AsyncGeneratorFunction</code></a> objects.\n<p>Note that <code>AsyncGeneratorFunction</code> is not a global object. It could be obtained by evaluating the following code.\n<div>\n```js\nconst AsyncGeneratorFunction = async function* () {}.constructor;\n```\n</div>\n<p>The <code>AsyncGeneratorFunction()</code> constructor is not intended to be used directly, and all caveats mentioned in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function()</code></a> description apply to <code>AsyncGeneratorFunction()</code>."
    },
    "asyncgeneratorfunction.prototype": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgeneratorfunction/prototype",
      "doc": "The <strong><code>prototype</code></strong> property of <code>AsyncGeneratorFunction.prototype</code> is shared by all async generator functions. Its value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\"><code>AsyncGenerator.prototype</code></a>. Each async generator function created with the <code>async function*</code> syntax or the <code>AsyncGeneratorFunction()</code> constructor also has its own <code>prototype</code> property, whose prototype is <code>AsyncGeneratorFunction.prototype.prototype</code>. When the async generator function is called, its <code>prototype</code> property becomes the prototype of the returned async generator object."
    },
    "asynciterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asynciterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "57",
        "FirefoxAndroid": "57",
        "Opera": "50",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "An <strong><code>AsyncIterator</code></strong> object is an object that conforms to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterator protocol</a> by providing a <code>next()</code> method that returns a promise fulfilling to an iterator result object. The <code>AsyncIterator.prototype</code> object is a hidden global object that all built-in async iterators inherit from. It provides an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncIterator/Symbol.asyncIterator\"><code>[Symbol.asyncIterator]()</code></a> method that returns the async iterator object itself, making the async iterator also <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable</a>.\n<p>Note that <code>AsyncIterator</code> is <em>not</em> a global object, although it will be in the future with the <a href=\"https://github.com/tc39/proposal-async-iterator-helpers\" class=\"external\" target=\"_blank\">async iterator helpers proposal</a>. The <code>AsyncIterator.prototype</code> object shared by all built-in async iterators can be obtained with the following code:\n<div>\n```js\nconst AsyncIteratorPrototype = Object.getPrototypeOf(\n  Object.getPrototypeOf(Object.getPrototypeOf((async function* () {})())),\n);\n```\n</div>"
    },
    "asynciterator.symbol.asynciterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asynciterator/symbol.asynciterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "57",
        "FirefoxAndroid": "57",
        "Opera": "50",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>[Symbol.asyncIterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncIterator\"><code>AsyncIterator</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable protocol</a> and allows built-in async iterators to be consumed by most syntaxes expecting async iterables, such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for-await...of\"><code>for await...of</code></a> loops. It returns the value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>, which is the async iterator object itself.",
      "returns": "The value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>, which is the async iterator object itself."
    },
    "atomics": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics</code></strong> namespace object contains static methods for carrying out atomic operations. They are used with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> objects."
    },
    "atomics.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/add",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.add()</code></strong> static\nmethod adds a given value at a given position in the array and returns the old value at\nthat position. This atomic operation guarantees that no other write happens until the\nmodified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to add a\n<code>value</code> to.",
        "value": "The number to add."
      },
      "returns": "The old value at the given position\n(<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.and": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/and",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.and()</code></strong> static\nmethod computes a bitwise AND with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to compute the bitwise AND.",
        "value": "The number to compute the bitwise AND with."
      },
      "returns": "The old value at the given position\n(<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.compareexchange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/compareexchange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.compareExchange()</code></strong> static method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to exchange a <code>replacementValue</code>.",
        "expectedValue": "The value to check for equality.",
        "replacementValue": "The number to exchange."
      },
      "returns": "The old value at the given position (<code>typedArray[index]</code>). If the return value is equal to <code>expectedValue</code>, the exchange was successful; otherwise, the exchange failed.",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.exchange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/exchange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.exchange()</code></strong> static method exchanges a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to exchange a <code>value</code>.",
        "value": "The number to exchange."
      },
      "returns": "The old value at the given position (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.islockfree": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/islockfree",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.isLockFree()</code></strong> static method is used to determine whether the <code>Atomics</code> methods use locks or atomic hardware operations when applied to typed arrays with the given element byte size. It is intended as an optimization primitive, so that high-performance algorithms can determine whether to use locks or atomic operations in critical sections. If an atomic primitive is not lock-free, it is often more efficient for an algorithm to provide its own locking.",
      "parameters": {
        "size": "The size in bytes to check."
      },
      "returns": "A <code>true</code> or <code>false</code> value indicating whether the operation is lock free.\n<ul>\n<li>Always <code>true</code> if <code>size</code> is 4, because all known platforms support 4-byte atomic operations.</li>\n<li>Always <code>false</code> if the given size is not one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> property of integer TypedArray types.</li>\n</ul>"
    },
    "atomics.load": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/load",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.load()</code></strong> static\nmethod returns a value at a given position in the array.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to load from."
      },
      "returns": "The value at the given position (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.notify": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/notify",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.notify()</code></strong> static\nmethod notifies up some agents that are sleeping in the wait queue.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis operation only works with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> that views a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.\nIt will return <code>0</code> on non-shared <code>ArrayBuffer</code> objects.\n</div>",
      "parameters": {
        "typedArray": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> that views a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.",
        "index": "The position in the <code>typedArray</code> to wake up on.",
        "count": "The number of sleeping agents to notify. Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>."
      },
      "returns": "<ul>\n<li>Returns the number of woken up agents.</li>\n<li>Returns <code>0</code>, if a non-shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object is used.</li>\n</ul>",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> that views a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.or": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/or",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.or()</code></strong> static\nmethod computes a bitwise OR with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to compute the bitwise OR.",
        "value": "The number to compute the bitwise OR with."
      },
      "returns": "The old value at the given position\n(<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.pause": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/pause",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "133",
        "ChromeAndroid": "133",
        "Edge": "133",
        "Firefox": "137",
        "FirefoxAndroid": "137",
        "Opera": "118",
        "Safari": "18.4",
        "SafariIOS": "18.4"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-04-01"
      },
      "doc": "The <strong><code>Atomics.pause()</code></strong> static method provides a micro-wait primitive that hints to the CPU that the caller is spinning while waiting on access to a shared resource. This allows the system to reduce the resources allocated to the core (such as power) or thread, without yielding the current thread.\n<p><code>pause()</code> has no observable behavior other than timing. The exact behavior is dependent on the CPU architecture and the operating system. For example, in Intel x86, it may be a <code>pause</code> instruction as per <a href=\"https://www.intel.com/content/www/us/en/content-details/671488/intel-64-and-ia-32-architectures-optimization-reference-manual-volume-1.html\" class=\"external\" target=\"_blank\">Intel's optimization manual</a>. It could be a no-op in certain platforms.",
      "parameters": {
        "durationHint": "An integer that an implementation may use to determine how long to wait. For a value <code>n + 1</code>, an implementation waits at least as long as it does for a given value <code>n</code>. The exact number has no physical meaning. There may be an internal upper bound on the maximum amount of time paused on the order of tens to hundreds of nanoseconds. This can be used to implement a <a href=\"#backoff_strategies\">backoff strategy</a> by increasing the <code>durationHint</code> passed in. There is no guarantee that an implementation will make use of this hint."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).",
      "throws": {
        "TypeError": "Thrown if <code>durationHint</code> is not an integer or <code>undefined</code>."
      }
    },
    "atomics.store": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/store",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.store()</code></strong> static\nmethod stores a given value at the given position in the array and returns that value.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to store a\n<code>value</code> in.",
        "value": "The number to store."
      },
      "returns": "The value that has been stored.",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.sub": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/sub",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.sub()</code></strong> static method subtracts a given value\nat a given position in the array and returns the old value at that position. This atomic\noperation guarantees that no other write happens until the modified value is written\nback.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to subtract a\n<code>value</code> from.",
        "value": "The number to subtract."
      },
      "returns": "The old value at the given position\n(<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.wait": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/wait",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.wait()</code></strong> static\nmethod verifies that a shared memory location still contains a\ngiven value and if so sleeps, awaiting a wake-up notification or times out. It returns a string which\nis either <code>\"ok\"</code>, <code>\"not-equal\"</code>, or <code>\"timed-out\"</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis operation only works with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> that views a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>, and may not be allowed on the main thread.\nFor a non-blocking, asynchronous version of this method, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Atomics/waitAsync\"><code>Atomics.waitAsync()</code></a>.\n</div>",
      "parameters": {
        "typedArray": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> that views a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.",
        "index": "The position in the <code>typedArray</code> to wait on.",
        "value": "The expected value to test.",
        "timeout": "Time to wait in milliseconds. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> (and values that get converted to <code>NaN</code>, such as <code>undefined</code>) becomes <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>. Negative values become <code>0</code>."
      },
      "returns": "A string which is either <code>\"ok\"</code>, <code>\"not-equal\"</code>, or <code>\"timed-out\"</code>.\n<ul>\n<li><code>\"ok\"</code> is returned if woken up by a call to <code>Atomics.notify()</code>, <strong>regardless of if the expected value has changed</strong></li>\n<li><code>\"not-equal\"</code> is returned immediately if the initial <code>value</code> does not equal what is stored at <code>index</code></li>\n<li><code>\"timed-out\"</code> is returned if a sleeping wait exceeds the specified <code>timeout</code> without being woken up by <code>Atomics.notify()</code></li>\n</ul>",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>If <code>typedArray</code> is not an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> that views a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.</li>\n<li>If the current thread cannot be blocked (for example, because it's the main thread).</li>\n</ul>",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.waitasync": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/waitasync",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "89",
        "Edge": "87",
        "Opera": "75",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "16.0.0",
        "Deno": "1.4"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>Atomics.waitAsync()</code></strong> static method waits asynchronously on a shared memory location and returns an object representing the result of the operation.\n<p>Unlike <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Atomics/wait\"><code>Atomics.wait()</code></a>, <code>waitAsync</code> is non-blocking and usable on the main thread.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis operation only works with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> that views a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.\n</div>",
      "parameters": {
        "typedArray": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> that views a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.",
        "index": "The position in the <code>typedArray</code> to wait on.",
        "value": "The expected value to test.",
        "timeout": "Time to wait in milliseconds. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> (and values that get converted to <code>NaN</code>, such as <code>undefined</code>) becomes <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>. Negative values become <code>0</code>."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with the following properties:\n<dl>\n<dt id=\"async\"><a href=\"#async\"><code>async</code></a></dt>\n<dd>\n<p>A boolean indicating whether the <code>value</code> property is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> or not.\n</dd>\n<dt id=\"value_2\"><a href=\"#value_2\"><code>value</code></a></dt>\n<dd>\n<p>If <code>async</code> is <code>false</code>, it will be a string which is either <code>\"not-equal\"</code> or <code>\"timed-out\"</code> (only when the <code>timeout</code> parameter is <code>0</code>). If <code>async</code> is <code>true</code>, it will be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which is fulfilled with a string value, either <code>\"ok\"</code> or <code>\"timed-out\"</code>. The promise is never rejected.\n</dd>\n</dl>",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> that views a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.xor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/xor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>Atomics.xor()</code></strong> static\nmethod computes a bitwise XOR with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to compute the bitwise XOR.",
        "value": "The number to compute the bitwise XOR with."
      },
      "returns": "The old value at the given position (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "bigint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "<strong><code>BigInt</code></strong> values represent integer values which are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">too high</a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\">too low</a> to be represented by the <code>number</code> <a href=\"$MDN_URL$/Glossary/Primitive\">primitive</a>."
    },
    "bigint.asintn": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/asintn",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>BigInt.asIntN()</code></strong> static method truncates a <code>BigInt</code> value to the given number of least significant bits and returns that value as a signed integer.",
      "parameters": {
        "bits": "The amount of bits available for the returned BigInt. Should be an integer between 0 and 2<sup>53</sup> - 1, inclusive.",
        "bigint": "The BigInt value to truncate to fit into the supplied bits."
      },
      "returns": "The value of <code>bigint</code> modulo 2^<code>bits</code>, as a signed integer.",
      "throws": {
        "RangeError": "Thrown if <code>bits</code> is negative or greater than 2<sup>53</sup> - 1."
      }
    },
    "bigint.asuintn": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/asuintn",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>BigInt.asUintN()</code></strong> static method truncates a <code>BigInt</code> value to the given number of least significant bits and returns that value as an unsigned integer.",
      "parameters": {
        "bits": "The amount of bits available for the returned BigInt. Should be an integer between 0 and 2<sup>53</sup> - 1, inclusive.",
        "bigint": "The BigInt value to truncate to fit into the supplied bits."
      },
      "returns": "The value of <code>bigint</code> modulo 2^<code>bits</code>, as an unsigned integer.",
      "throws": {
        "RangeError": "Thrown if <code>bits</code> is negative or greater than 2<sup>53</sup> - 1."
      }
    },
    "bigint.bigint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/bigint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>BigInt()</code></strong> function returns primitive values of type BigInt.",
      "parameters": {
        "value": "The value to be converted to a BigInt value. It may be a string, an integer, a boolean, or another <code>BigInt</code>."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> value. Number values must be integers and are converted to BigInts. The boolean value <code>true</code> becomes <code>1n</code>, and <code>false</code> becomes <code>0n</code>. Strings are parsed as if they are source text for integer literals, which means they can have leading and trailing whitespaces and can be prefixed with <code>0b</code>, <code>0o</code>, or <code>0x</code>.",
      "throws": {
        "RangeError": "Thrown if the parameter is a non-integral number.",
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>The parameter cannot be converted to a primitive.</li>\n<li>After conversion to a primitive, the result is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>symbol</code></a>.</li>\n</ul>",
        "SyntaxError": "Thrown if the parameter is a string that cannot be parsed as a <code>BigInt</code>."
      }
    },
    "bigint.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> values returns a string with a language-sensitive representation of this BigInt. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code> API</a> support, this method delegates to <code>Intl.NumberFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\"><code>format()</code></a> method, because a <code>NumberFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor.\n<p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options\"><code>options</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor.\n<p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored."
      },
      "returns": "A string representing the given BigInt according to language-specific conventions.\n<p>In implementations with <code>Intl.NumberFormat</code>, this is equivalent to <code>new Intl.NumberFormat(locales, options).format(number)</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>"
    },
    "bigint.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> values returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> value. The trailing \"n\" is not part of the string.",
      "parameters": {
        "radix": "An integer in the range 2 through 36 specifying the base to use for representing the BigInt value. Defaults to 10."
      },
      "returns": "A string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> value.",
      "throws": {
        "RangeError": "Thrown if <code>radix</code> is less than 2 or greater than 36."
      }
    },
    "bigint.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> values returns the wrapped primitive value\nof a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object.",
      "returns": "A BigInt representing the primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object."
    },
    "bigint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>BigInt64Array</code></strong> typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>BigInt64Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "bigint64array.bigint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint64array/bigint64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>BigInt64Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> objects. The contents are initialized to <code>0n</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "biguint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/biguint64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>BigUint64Array</code></strong> typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>BigUint64Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "biguint64array.biguint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/biguint64array/biguint64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>BigUint64Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a> objects. The contents are initialized to <code>0n</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "boolean": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "<strong><code>Boolean</code></strong> values can be one of two values: <code>true</code> or <code>false</code>, representing the truth value of a logical proposition."
    },
    "boolean.boolean": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/boolean",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Boolean()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> objects. When called as a function, it returns primitive values of type Boolean.",
      "parameters": {
        "value": "The initial value of the <code>Boolean</code> object."
      },
      "returns": "When <code>Boolean()</code> is called as a function (without <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>), it returns <code>value</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to a boolean primitive</a>.\n<p>When <code>Boolean()</code> is called as a constructor (with <code>new</code>), it coerces <code>value</code> to a boolean primitive and returns a wrapping <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object, which is <strong>not</strong> a primitive.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nYou should rarely find yourself using <code>Boolean</code> as a constructor.\n</div>"
    },
    "boolean.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> values returns a string representing the specified boolean value.",
      "returns": "A string representing the specified boolean value."
    },
    "boolean.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> values returns the primitive value of a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object.",
      "returns": "The primitive value of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object."
    },
    "dataview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>DataView</code></strong> view provides a low-level interface for reading and writing multiple number types in a binary <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, without having to care about the platform's <a href=\"$MDN_URL$/Glossary/Endianness\">endianness</a>."
    },
    "dataview.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/buffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>buffer</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances returns the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> referenced by this view at construction time."
    },
    "dataview.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/bytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>byteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances returns the length (in bytes) of this view."
    },
    "dataview.byteoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/byteoffset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>byteOffset</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances returns the offset (in bytes) of this view from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>."
    },
    "dataview.dataview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/dataview",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>DataView()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> objects.",
      "parameters": {
        "buffer": "An existing <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> to use as\nthe storage backing the new <code>DataView</code> object.",
        "byteOffset": "The offset, in bytes, to the first byte in the above buffer for the new view to\nreference. If unspecified, the buffer view starts with the first byte.",
        "byteLength": "The number of elements in the byte array. If unspecified, the view's length will\nmatch the buffer's length."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> object representing the specified data buffer.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> or <code>byteLength</code> parameter values result in the view extending past the end of the buffer. In other words, <code>byteOffset + byteLength &gt; buffer.byteLength</code>."
      }
    },
    "dataview.getbigint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getbigint64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>getBigInt64()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 8 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 64-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> from -2<sup>63</sup> to 2<sup>63</sup>-1, inclusive.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getbiguint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getbiguint64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>getBigUint64()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 8 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 64-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> from 0 to 2<sup>64</sup>-1, inclusive.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getfloat16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getfloat16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "135",
        "ChromeAndroid": "135",
        "Edge": "135",
        "Firefox": "129",
        "FirefoxAndroid": "129",
        "Opera": "120",
        "Safari": "18.2",
        "SafariIOS": "18.2",
        "Deno": "1.43"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-04-04"
      },
      "doc": "The <strong><code>getFloat16()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 2 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 16-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A floating point number from <code>-65504</code> to <code>65504</code>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getfloat32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getfloat32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getFloat32()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 4 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 32-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A floating point number from <code>-3.4e38</code> to <code>3.4e38</code>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getfloat64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getfloat64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getFloat64()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 8 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 64-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "Any number value.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getInt16()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 2 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 16-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "An integer from -32768 to 32767, inclusive.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getInt32()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 4 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 32-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "An integer from -2147483648 to 2147483647, inclusive.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint8",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getInt8()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 1 byte at the specified byte offset of this <code>DataView</code> and interprets it as an 8-bit signed integer.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from."
      },
      "returns": "An integer from -128 to 127, inclusive.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getuint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUint16()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 2 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 16-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "An integer from 0 to 65535, inclusive.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getuint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUint32()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 4 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 32-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "An integer from 0 to 4294967295, inclusive.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.getuint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint8",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUint8()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances reads 1 byte at the specified byte offset of this <code>DataView</code> and interprets it as an 8-bit unsigned integer.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from."
      },
      "returns": "An integer from 0 to 255, inclusive.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would read beyond the end of the view."
      }
    },
    "dataview.setbigint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setbigint64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>setBigInt64()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this <code>DataView</code>. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setbiguint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setbiguint64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "FirefoxAndroid": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>setBigUint64()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this <code>DataView</code>. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setfloat16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setfloat16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "135",
        "ChromeAndroid": "135",
        "Edge": "135",
        "Firefox": "129",
        "FirefoxAndroid": "129",
        "Opera": "120",
        "Safari": "18.2",
        "SafariIOS": "18.2",
        "Deno": "1.43"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-04-04"
      },
      "doc": "The <strong><code>setFloat16()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a number and stores it as a 16-bit floating point number in the 2 bytes starting at the specified byte offset of this <code>DataView</code>. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setfloat32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setfloat32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setFloat32()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a number and stores it as a 32-bit floating point number in the 4 bytes starting at the specified byte offset of this <code>DataView</code>. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setfloat64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setfloat64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setFloat64()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a number and stores it as a 64-bit floating point number in the 8 bytes starting at the specified byte offset of this <code>DataView</code>. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setInt16()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a number and stores it as a 16-bit signed integer in the 2 bytes starting at the specified byte offset of this <code>DataView</code>. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setInt32()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a number and stores it as a 32-bit signed integer in the 4 bytes starting at the specified byte offset of this <code>DataView</code>. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint8",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setInt8()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this <code>DataView</code>.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setuint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUint16()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a number and stores it as a 16-bit unsigned integer in the 2 bytes starting at the specified byte offset of this <code>DataView</code>. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setuint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUint32()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a number and stores it as a 32-bit unsigned integer in the 4 bytes starting at the specified byte offset of this <code>DataView</code>. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>.",
        "littleEndian": "Indicates whether the data is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "dataview.setuint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint8",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUint8()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this <code>DataView</code>.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data in.",
        "value": "The value to set. For how the value is encoded in bytes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization\">Value encoding and normalization</a>."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> is set such that it would store beyond the end of the view."
      }
    },
    "date": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "JavaScript <strong><code>Date</code></strong> objects represent a single moment in time in a platform-independent format. <code>Date</code> objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the <em>epoch</em>).\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nWith the introduction of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal\"><code>Temporal</code></a> API, the <code>Date</code> object is considered a legacy feature. Consider using <code>Temporal</code> for new code and migrate existing code over to it if possible (check the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#browser_compatibility\">browser compatibility</a>. We will be writing a usage guide soon!\n</div>"
    },
    "date.date": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/date",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Date()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> objects. When called as a function, it returns a string representing the current time.",
      "parameters": {
        "value": "An integer value representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a> (the number of milliseconds since midnight at the beginning of January 1, 1970, UTC — a.k.a. the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>).",
        "dateString": "A string value representing a date, parsed and interpreted using the same algorithm implemented by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/parse\"><code>Date.parse()</code></a>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">date time string format</a> for caveats on using different formats.",
        "dateObject": "An existing <code>Date</code> object. This effectively makes a copy of the existing <code>Date</code> object with the same date and time. This is equivalent to <code>new Date(dateObject.valueOf())</code>, except the <code>valueOf()</code> method is not called.",
        "year": "Integer value representing the year. Values from <code>0</code> to <code>99</code> map to the years <code>1900</code> to <code>1999</code>. All other values are the actual year. See the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years\">example</a>.",
        "monthIndex": "Integer value representing the month, beginning with <code>0</code> for January to <code>11</code> for December.",
        "day": "Integer value representing the day of the month. Defaults to <code>1</code>.",
        "hours": "Integer value between <code>0</code> and <code>23</code> representing the hour of the day. Defaults to <code>0</code>.",
        "minutes": "Integer value representing the minute segment of a time. Defaults to <code>0</code>.",
        "seconds": "Integer value representing the second segment of a time. Defaults to <code>0</code>.",
        "milliseconds": "Integer value representing the millisecond segment of a time. Defaults to <code>0</code>."
      },
      "returns": "Calling <code>new Date()</code> (the <code>Date()</code> constructor) returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object. If called with an invalid date string, or if the date to be constructed will have a timestamp less than <code>-8,640,000,000,000,000</code> or greater than <code>8,640,000,000,000,000</code> milliseconds, it returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid date</a> (a <code>Date</code> object whose <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toString\"><code>toString()</code></a> method returns <code>\"Invalid Date\"</code> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/valueOf\"><code>valueOf()</code></a> method returns <code>NaN</code>).\n<p>Calling the <code>Date()</code> function (without the <code>new</code> keyword) returns a string representation of the current date and time, exactly as <code>new Date().toString()</code> does. Any arguments given in a <code>Date()</code> function call (without the <code>new</code> keyword) are ignored; regardless of whether it's called with an invalid date string — or even called with any arbitrary object or other primitive as an argument — it always returns a string representation of the current date and time."
    },
    "date.getdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getdate",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the day of the month for this date according to local time.",
      "returns": "An integer, between 1 and 31, representing the day of the month for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getday",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getDay()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the day of the week for this date according to local time, where 0 represents Sunday. For the day of the month, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getDate\"><code>Date.prototype.getDate()</code></a>.",
      "returns": "An integer, between 0 and 6, representing the day of the week for the given date according to local time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getfullyear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getFullYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the year for this date according to local time.\n<p>Use this method instead of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getYear\"><code>getYear()</code></a> method.",
      "returns": "An integer representing the year for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.gethours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gethours",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getHours()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the hours for this date according to local time.",
      "returns": "An integer, between 0 and 23, representing the hours for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getMilliseconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the milliseconds for this date according to local time.",
      "returns": "An integer, between 0 and 999, representing the milliseconds for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getminutes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getMinutes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the minutes for this date according to local time.",
      "returns": "An integer, between 0 and 59, representing the minutes for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getmonth",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getMonth()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the month for this date according to local time, as a zero-based value (where zero indicates the first month of the year).",
      "returns": "An integer, between 0 and 11, representing the month for the given date according to local time: 0 for January, 1 for February, and so on. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getSeconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the seconds for this date according to local time.",
      "returns": "An integer, between 0 and 59, representing the seconds for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.gettime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gettime",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the number of milliseconds for this date since the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>, in milliseconds, of this date. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.gettimezoneoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gettimezoneoffset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getTimezoneOffset()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the difference, in minutes, between this date as evaluated in the UTC time zone, and the same date as evaluated in the local time zone.",
      "returns": "A number representing the difference, in minutes, between the date as evaluated in the UTC time zone and as evaluated in the local time zone. The actual local time algorithm is implementation-defined, and the return value is allowed to be zero in runtimes without appropriate data. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcdate",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUTCDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the day of the month for this date according to universal time.",
      "returns": "An integer, between 1 and 31, representing day of month for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcday",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUTCDay()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the day of the week for this date according to universal time, where 0 represents Sunday.",
      "returns": "An integer corresponding to the day of the week for the given date according to universal time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcfullyear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUTCFullYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the year for this date according to universal time.",
      "returns": "An integer representing the year for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutchours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutchours",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUTCHours()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the hours for this date according to universal time.",
      "returns": "An integer, between 0 and 23, representing the hours for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUTCMilliseconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the milliseconds for this date according to universal time.",
      "returns": "An integer, between 0 and 999, representing the milliseconds for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>.\n<p>Not to be confused with the timestamp. To get the total milliseconds since the epoch, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getTime\"><code>getTime()</code></a> method."
    },
    "date.getutcminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcminutes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUTCMinutes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the minutes for this date according to universal time.",
      "returns": "An integer, between 0 and 59, representing the minutes for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcmonth",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUTCMonth()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the month for this date according to universal time, as a zero-based value (where zero indicates the first month of the year).",
      "returns": "An integer, between 0 and 11, representing the month for the given date according to universal time: 0 for January, 1 for February, and so on. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>getUTCSeconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the seconds in the specified date according to universal time.",
      "returns": "An integer, between 0 and 59, representing the seconds for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getyear",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>getYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the year for this date according to local time. Because <code>getYear()</code> does not return full years (\"year 2000 problem\"), it is deprecated and has been replaced by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\"><code>getFullYear()</code></a> method.",
      "returns": "An integer representing the year for the given date according to local time, minus 1900. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>.\n<ul>\n<li>For years greater than or equal to 2000, the value is 100 or greater. For example, if the year is 2026, <code>getYear()</code> returns 126.</li>\n<li>For years between and including 1900 and 1999, the value returned by <code>getYear()</code> is between 0 and 99. For example, if the year is 1976, <code>getYear()</code> returns 76.</li>\n<li>For years less than 1900, the value returned by <code>getYear()</code> is less than 0. For example, if the year is 1800, <code>getYear()</code> returns -100.</li>\n</ul>\n<p>This method essentially returns the value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\"><code>getFullYear()</code></a> minus 1900. You should use <code>getFullYear()</code> instead, so that the year is specified in full."
    },
    "date.now": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/now",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "4",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Date.now()</code></strong> static method returns the number of milliseconds elapsed since the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>, in milliseconds, of the current time."
    },
    "date.parse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/parse",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Date.parse()</code></strong> static method parses a string representation of a date, and returns the date's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>.",
      "parameters": {
        "dateString": "A string in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">the date time string format</a>. See the linked reference for caveats on using different formats."
      },
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a> of the given date. If <code>dateString</code> fails to be parsed as a valid date, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned."
    },
    "date.setdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setdate",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the day of the month for this date according to local time.",
      "parameters": {
        "dateValue": "An integer representing the day of the month."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>dateValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setfullyear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setFullYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the year, month, and/or day of month for this date according to local time.",
      "parameters": {
        "yearValue": "An integer representing the year. For example, 1995.",
        "monthValue": "An integer representing the month: 0 for January, 1 for February, and so on.",
        "dateValue": "An integer between 1 and 31 representing the day of the month. If you specify <code>dateValue</code>, you must also specify <code>monthValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.sethours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/sethours",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setHours()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the hours, minutes, seconds, and/or milliseconds for this date according to local time.",
      "parameters": {
        "hoursValue": "An integer between 0 and 23 representing the hours.",
        "minutesValue": "An integer between 0 and 59 representing the minutes.",
        "secondsValue": "An integer between 0 and 59 representing the seconds. If you specify <code>secondsValue</code>, you must also specify <code>minutesValue</code>.",
        "msValue": "An integer between 0 and 999 representing the milliseconds. If you specify <code>msValue</code>, you must also specify <code>minutesValue</code> and <code>secondsValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setMilliseconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the milliseconds for this date according to local time.",
      "parameters": {
        "millisecondsValue": "An integer between 0 and 999 representing the milliseconds."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>millisecondsValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setminutes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setMinutes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the minutes for this date according to local time.",
      "parameters": {
        "minutesValue": "An integer between 0 and 59 representing the minutes.",
        "secondsValue": "An integer between 0 and 59 representing the seconds. If you specify <code>secondsValue</code>, you must also specify <code>minutesValue</code>.",
        "msValue": "An integer between 0 and 999 representing the milliseconds. If you specify <code>msValue</code>, you must also specify <code>minutesValue</code> and <code>secondsValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setmonth",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setMonth()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the month and/or day of the month for this date according to local time.",
      "parameters": {
        "monthValue": "An integer representing the month: 0 for January, 1 for February, and so on.",
        "dateValue": "An integer from 1 to 31 representing the day of the month."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setSeconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the seconds and/or milliseconds for this date according to local time.",
      "parameters": {
        "secondsValue": "An integer between 0 and 59 representing the seconds.",
        "msValue": "An integer between 0 and 999 representing the milliseconds."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.settime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/settime",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a> for this date, which is the number of milliseconds since the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>, defined as the midnight at the beginning of January 1, 1970, UTC.",
      "parameters": {
        "timeValue": "An integer representing the new timestamp — the number of milliseconds since the midnight at the beginning of January 1, 1970, UTC."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>timeValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcdate",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUTCDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the day of the month for this date according to universal time.",
      "parameters": {
        "dateValue": "An integer from 1 to 31 representing the day of the month."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>dateValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcfullyear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUTCFullYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the year for this date according to universal time.",
      "parameters": {
        "yearValue": "An integer representing the year. For example, 1995.",
        "monthValue": "An integer representing the month: 0 for January, 1 for February, and so on.",
        "dateValue": "An integer between 1 and 31 representing the day of the month. If you specify <code>dateValue</code>, you must also specify <code>monthValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutchours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutchours",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUTCHours()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the hours, minutes, seconds, and/or milliseconds for this date according to universal time.",
      "parameters": {
        "hoursValue": "An integer between 0 and 23 representing the hours.",
        "minutesValue": "An integer between 0 and 59 representing the minutes.",
        "secondsValue": "An integer between 0 and 59 representing the seconds. If you specify <code>secondsValue</code>, you must also specify <code>minutesValue</code>.",
        "msValue": "An integer between 0 and 999 representing the milliseconds. If you specify <code>msValue</code>, you must also specify <code>minutesValue</code> and <code>secondsValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUTCMilliseconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the milliseconds for this date according to universal time.",
      "parameters": {
        "millisecondsValue": "An integer between 0 and 999 representing the milliseconds."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>millisecondsValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcminutes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUTCMinutes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the minutes for this date according to universal time.",
      "parameters": {
        "minutesValue": "An integer between 0 and 59 representing the minutes.",
        "secondsValue": "An integer between 0 and 59 representing the seconds. If you specify <code>secondsValue</code>, you must also specify <code>minutesValue</code>.",
        "msValue": "An integer between 0 and 999 representing the milliseconds. If you specify <code>msValue</code>, you must also specify <code>minutesValue</code> and <code>secondsValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcmonth",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUTCMonth()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the month and/or day of the month for this date according to universal time.",
      "parameters": {
        "monthValue": "An integer representing the month: 0 for January, 1 for February, and so on.",
        "dateValue": "An integer from 1 to 31 representing the day of the month."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>setUTCSeconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the seconds and/or milliseconds for this date according to universal time.",
      "parameters": {
        "secondsValue": "An integer between 0 and 59 representing the seconds.",
        "msValue": "An integer between 0 and 999 representing the milliseconds."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setyear",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>setYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances sets the year for a specified date according to local time.\n<p>However, the way the legacy <code>setYear()</code> method sets year values is different from how the preferred <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\"><code>setFullYear()</code></a> method sets year values — and in some cases, also different from how <code>new Date()</code> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/parse\"><code>Date.parse()</code></a> set year values. Specifically, given two-digit numbers, such as <code>22</code> and <code>61</code>:\n<ul>\n<li>\n<p><code>setYear()</code> interprets any two-digit number as an offset to <code>1900</code>; so <code>date.setYear(22)</code> results in the year value being set to <code>1922</code>, and <code>date.setYear(61)</code> results in the year value being set to <code>1961</code>. (In contrast, while <code>new Date(61, 1)</code> also results in the year value being set to <code>1961</code>, <code>new Date(\"2/1/22\")</code> results in the year value being set to <code>2022</code>; and similarly for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/parse\"><code>Date.parse()</code></a>).\n</li>\n<li>\n<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\"><code>setFullYear()</code></a> does no special interpretation but instead uses the literal two-digit value as-is to set the year; so <code>date.setFullYear(61)</code> results in the year value being set to <code>0061</code>, and <code>date.setFullYear(22)</code> results in the year value being set to <code>0022</code>.\n</li>\n</ul>\n<p>Because of those differences in behavior, you should no longer use the legacy <code>setYear()</code> method, but should instead use the preferred <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\"><code>setFullYear()</code></a> method.",
      "parameters": {
        "yearValue": "An integer."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>yearValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.symbol.toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/symbol.toprimitive",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "15",
        "Firefox": "44",
        "FirefoxAndroid": "44",
        "Opera": "34",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>[Symbol.toPrimitive]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a primitive value representing this date. It may either be a string or a number, depending on the hint given.",
      "parameters": {
        "hint": "A string representing the type of the primitive value to return. The following values are valid:\n<ul>\n<li><code>\"string\"</code> or <code>\"default\"</code>: The method should return a string.</li>\n<li><code>\"number\"</code>: The method should return a number.</li>\n</ul>"
      },
      "returns": "If <code>hint</code> is <code>\"string\"</code> or <code>\"default\"</code>, this method returns a string by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coercing the <code>this</code> value to a string</a> (first trying <code>toString()</code> then trying <code>valueOf()</code>).\n<p>If <code>hint</code> is <code>\"number\"</code>, this method returns a number by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coercing the <code>this</code> value to a number</a> (first trying <code>valueOf()</code> then trying <code>toString()</code>).",
      "throws": {
        "TypeError": "Thrown if the <code>hint</code> argument is not one of the three valid values."
      }
    },
    "date.todatestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/todatestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toDateString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing the date portion of this date interpreted in the local timezone.",
      "returns": "A string representing the date portion of the given date (see description for the format). Returns <code>\"Invalid Date\"</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.toisostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/toisostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "3.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toISOString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing this date in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">date time string format</a>, a <em>simplified</em> format based on <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" class=\"external\" target=\"_blank\">ISO 8601</a>, which is always 24 or 27 characters long (<code>YYYY-MM-DDTHH:mm:ss.sssZ</code> or <code>±YYYYYY-MM-DDTHH:mm:ss.sssZ</code>, respectively). The timezone is always UTC, as denoted by the suffix <code>Z</code>.",
      "returns": "A string representing the given date in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">date time string format</a> according to universal time. It's the same format as the one required to be recognized by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/parse\"><code>Date.parse()</code></a>.",
      "throws": {
        "RangeError": "Thrown if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a> or if it corresponds to a year that cannot be represented in the date string format."
      }
    },
    "date.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tojson",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "3.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing this date in the same ISO format as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toISOString\"><code>toISOString()</code></a>.",
      "returns": "A string representing the given date in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">date time string format</a> according to universal time, or <code>null</code> when the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>. For valid dates, the return value is the same as that of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toISOString\"><code>toISOString()</code></a>."
    },
    "date.tolocaledatestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocaledatestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toLocaleDateString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string with a language-sensitive representation of the date portion of this date in the local timezone. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.\n<p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. The <code>timeStyle</code> option must be undefined, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> would be thrown. If <code>weekday</code>, <code>year</code>, <code>month</code>, and <code>day</code> are all undefined, then <code>year</code>, <code>month</code>, and <code>day</code> will be set to <code>\"numeric\"</code>.\n<p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored."
      },
      "returns": "A string representing the date portion of the given date according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(date)</code>, where <code>options</code> has been normalized as described above.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleDateString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleDateString()</code> to hardcoded constants.\n</div>"
    },
    "date.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string with a language-sensitive representation of this date in the local timezone. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.\n<p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. If <code>weekday</code>, <code>year</code>, <code>month</code>, <code>day</code>, <code>dayPeriod</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, and <code>fractionalSecondDigits</code> are all undefined, then <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code> will be set to <code>\"numeric\"</code>.\n<p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored."
      },
      "returns": "A string representing the given date according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(date)</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>"
    },
    "date.tolocaletimestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocaletimestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toLocaleTimeString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string with a language-sensitive representation of the time portion of this date in the local timezone. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code>.\n<p>Every time <code>toLocaleTimeString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.\n<p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. If <code>dayPeriod</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, and <code>fractionalSecondDigits</code> are all undefined, then <code>hour</code>, <code>minute</code>, <code>second</code> will be set to <code>\"numeric\"</code>.\n<p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored."
      },
      "returns": "A string representing the time portion of the given date according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(date)</code>, where <code>options</code> has been normalized as described above.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleTimeString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleTimeString()</code> to hardcoded constants.\n</div>"
    },
    "date.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing this date interpreted in the local timezone.",
      "returns": "A string representing the given date (see description for the format). Returns <code>\"Invalid Date\"</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.totemporalinstant": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/totemporalinstant",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toTemporalInstant()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> object with the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/epochMilliseconds\"><code>epochMilliseconds</code></a> value as this date's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>.\n<p>Use this method to convert legacy <code>Date</code> values to the <code>Temporal</code> API, then further convert it to other <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal\"><code>Temporal</code></a> classes as necessary.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> object with the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/epochMilliseconds\"><code>epochMilliseconds</code></a> value as this date's timestamp. Its microsecond and nanosecond components are always <code>0</code>.",
      "throws": {
        "RangeError": "Thrown if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a> (it has a timestamp of <code>NaN</code>)."
      }
    },
    "date.totimestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/totimestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toTimeString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing the time portion of this date interpreted in the local timezone.",
      "returns": "A string representing the time portion of the given date (see description for the format). Returns <code>\"Invalid Date\"</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.toutcstring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/toutcstring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toUTCString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing this date in the <a href=\"https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.1.1\" class=\"external\" target=\"_blank\">RFC 7231</a> format, with negative years allowed. The timezone is always UTC. <code>toGMTString()</code> is an alias of this method.",
      "returns": "A string representing the given date using the UTC time zone (see description for the format). Returns <code>\"Invalid Date\"</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.utc": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/utc",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Date.UTC()</code></strong> static method accepts parameters representing the date and time components similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.",
      "parameters": {
        "year": "Integer value representing the year. Values from <code>0</code> to <code>99</code> map to the years <code>1900</code> to <code>1999</code>. All other values are the actual year. See the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years\">example</a>.",
        "monthIndex": "Integer value representing the month, beginning with <code>0</code> for January to <code>11</code> for December. Defaults to <code>0</code>.",
        "day": "Integer value representing the day of the month. Defaults to <code>1</code>.",
        "hours": "Integer value between <code>0</code> and <code>23</code> representing the hour of the day. Defaults to <code>0</code>.",
        "minutes": "Integer value representing the minute segment of a time. Defaults to <code>0</code>.",
        "seconds": "Integer value representing the second segment of a time. Defaults to <code>0</code>.",
        "milliseconds": "Integer value representing the millisecond segment of a time. Defaults to <code>0</code>."
      },
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a> of the given date. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the number of milliseconds for this date since the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>, in milliseconds, of this date. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "decodeuri": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/decodeuri",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>decodeURI()</code></strong> function decodes a Uniform Resource Identifier (URI) previously created by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a> or a similar routine.",
      "parameters": {
        "encodedURI": "A complete, encoded Uniform Resource Identifier."
      },
      "returns": "A new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).",
      "throws": {
        "URIError": "Thrown if <code>encodedURI</code> contains a <code>%</code> not followed by two hexadecimal digits, or if the escape sequence does not encode a valid UTF-8 character."
      }
    },
    "decodeuricomponent": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/decodeuricomponent",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>decodeURIComponent()</code></strong> function decodes a Uniform Resource Identifier (URI) component previously created by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent()</code></a> or by a similar routine.",
      "parameters": {
        "encodedURI": "An encoded component of a Uniform Resource Identifier."
      },
      "returns": "A new string representing the decoded version of the given encoded Uniform Resource Identifier (URI) component.",
      "throws": {
        "URIError": "Thrown if <code>encodedURI</code> contains a <code>%</code> not followed by two hexadecimal digits, or if the escape sequence does not encode a valid UTF-8 character."
      }
    },
    "encodeuri": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/encodeuri",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>encodeURI()</code></strong> function encodes a <a href=\"$MDN_URL$/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a href=\"$MDN_URL$/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent()</code></a>, this function encodes fewer characters, preserving those that are part of the URI syntax.",
      "parameters": {
        "uri": "A string to be encoded as a URI."
      },
      "returns": "A new string representing the provided string encoded as a URI.",
      "throws": {
        "URIError": "Thrown if <code>uri</code> contains a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogate</a>."
      }
    },
    "encodeuricomponent": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/encodeuricomponent",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>encodeURIComponent()</code></strong> function encodes a <a href=\"$MDN_URL$/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a href=\"$MDN_URL$/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a>, this function encodes more characters, including those that are part of the URI syntax.",
      "parameters": {
        "uriComponent": "A string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">converted to strings</a>."
      },
      "returns": "A new string representing the provided <code>uriComponent</code> encoded as a URI component.",
      "throws": {
        "URIError": "Thrown if <code>uriComponent</code> contains a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogate</a>."
      }
    },
    "error": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "<strong><code>Error</code></strong> objects are thrown when runtime errors occur. The <code>Error</code> object can also be used as a base object for user-defined exceptions. See below for standard built-in error types."
    },
    "error.capturestacktrace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/capturestacktrace",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "138",
        "FirefoxAndroid": "138",
        "Opera": "15",
        "Safari": "17.3",
        "SafariIOS": "17.3",
        "Nodejs": ""
      },
      "doc": "The <strong><code>Error.captureStackTrace()</code></strong> static method installs stack trace information on a provided object as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error/stack\"><code>stack</code></a> property.",
      "parameters": {
        "object": "The object on which to add the <code>stack</code> property.",
        "constructor": "A function, typically the constructor where the <code>object</code> was created. When collecting the stack trace, all frames above the topmost call to this function, including that call, are left out of the stack trace."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).\n<p>The <code>object</code> is modified in-place with an extra own property called <code>stack</code> defined, whose string value follows the same format as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error/stack\"><code>Error.prototype.stack</code></a>. This property is non-enumerable and configurable. In V8, it is a getter-setter pair. In SpiderMonkey and JavaScriptCore, it is a data property that is writable."
    },
    "error.cause": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/cause",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "93",
        "ChromeAndroid": "93",
        "Edge": "93",
        "Firefox": "91",
        "FirefoxAndroid": "91",
        "Opera": "79",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "16.9.0",
        "Deno": "1.13"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>cause</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance indicates the specific original cause of the error.\n<p>It is used when catching and re-throwing an error with a more-specific or useful error message in order to still have access to the original error."
    },
    "error.columnnumber": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/columnnumber",
      "compatibility": {
        "Firefox": "",
        "FirefoxAndroid": "4"
      },
      "doc": "<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>columnNumber</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance contains the column number in the line of the file that raised this error."
    },
    "error.error": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/error",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Error()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> objects.",
      "parameters": {
        "message": "A human-readable description of the error.",
        "options": "An object that has the following properties:\n<dl>\n<dt id=\"cause\"><a href=\"#cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A value indicating the specific cause of the error, reflected in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error/cause\"><code>cause</code></a> property. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n</dd>\n</dl>",
        "fileName": "The path to the file that raised this error, reflected in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error/fileName\"><code>fileName</code></a> property. Defaults to the name of the file containing the code that called the <code>Error()</code> constructor.",
        "lineNumber": "The line number within the file on which the error was raised, reflected in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\"><code>lineNumber</code></a> property. Defaults to the line number containing the <code>Error()</code> constructor invocation."
      }
    },
    "error.filename": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/filename",
      "compatibility": {
        "Firefox": "",
        "FirefoxAndroid": "4"
      },
      "doc": "<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>fileName</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance contains the path to the file that raised this error."
    },
    "error.iserror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/iserror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "134",
        "ChromeAndroid": "134",
        "Edge": "134",
        "Firefox": "138",
        "FirefoxAndroid": "138",
        "Opera": "119",
        "Deno": "2.2"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>Error.isError()</code></strong> static method determines whether the passed value is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>.",
      "parameters": {
        "value": "The value to be checked."
      },
      "returns": "<code>true</code> if <code>value</code> is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>; otherwise, <code>false</code>."
    },
    "error.linenumber": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/linenumber",
      "compatibility": {
        "Firefox": "",
        "FirefoxAndroid": "4"
      },
      "doc": "<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>lineNumber</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance contains the line number in the file that raised this error."
    },
    "error.message": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/message",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>message</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance is a human-readable description of the error."
    },
    "error.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/name",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>name</code></strong> data property of <code>Error.prototype</code> is shared by all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instances. It represents the name for the type of error. For <code>Error.prototype.name</code>, the initial value is <code>\"Error\"</code>. Subclasses like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a> provide their own <code>name</code> properties."
    },
    "error.stack": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/stack",
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "6",
        "SafariIOS": "6",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThe <code>stack</code> property is de facto implemented by all major JavaScript engines, and <a href=\"https://github.com/tc39/proposal-error-stacks\" class=\"external\" target=\"_blank\">the JavaScript standards committee is looking to standardize it</a>. You cannot rely on the precise content of the stack string due to implementation inconsistencies, but you can generally assume it exists and use it for debugging purposes.\n</div>\n<p>The non-standard <strong><code>stack</code></strong> property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call."
    },
    "error.stacktracelimit": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/stacktracelimit",
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "79",
        "Opera": "15",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "16.17.0"
      },
      "doc": "<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis feature is part of the currently non-standard <a href=\"https://v8.dev/docs/stack-trace-api\" class=\"external\" target=\"_blank\">V8 stack trace API</a>. However, for compatibility reasons, it is also implemented by JavaScriptCore.\n</div>\n<p>The <strong><code>Error.stackTraceLimit</code></strong> static data property indicates the maximum number of stack frames captured by the stack trace of an error. It can be set by user code to change the engine's behavior.\n<p>Generally, <em>reading</em> this property is not very useful, but you can <em>set</em> it to a new value. Setting it to a larger value can be useful for debugging, as it allows you to see more of the call stack. Setting it to a smaller value can improve performance as it reduces the amount of stack captured."
    },
    "error.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instances returns a string representing this error.",
      "returns": "A string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> object."
    },
    "escape": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/escape",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>escape()</code> is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a> if possible.\n</div>\n<p>The <strong><code>escape()</code></strong> function computes a new string in which certain characters have been replaced by hexadecimal escape sequences.",
      "parameters": {
        "str": "A string to be encoded."
      },
      "returns": "A new string in which certain characters have been escaped."
    },
    "eval": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/eval",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nExecuting JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use <code>eval()</code>. See <a href=\"#never_use_direct_eval!\">Never use direct eval()!</a>, below.\n</div>\n<p>The <strong><code>eval()</code></strong> function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.",
      "parameters": {
        "script": "A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects. It will be parsed as a script, so <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/import\"><code>import</code></a> declarations (which can only exist in modules) are not allowed."
      },
      "returns": "The completion value of evaluating the given code. If the completion value is empty, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned. If <code>script</code> is not a string primitive, <code>eval()</code> returns the argument unchanged."
    },
    "evalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/evalerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>EvalError</code></strong> object indicates an error regarding the global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function. This exception is not thrown by JavaScript anymore, however the <code>EvalError</code> object remains for compatibility.\n<p><code>EvalError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/Window/structuredClone\" ><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>EvalError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "evalerror.evalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/evalerror/evalerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>EvalError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/EvalError\"><code>EvalError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties:\n<dl>\n<dt id=\"cause\"><a href=\"#cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n</dd>\n</dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "finalizationregistry": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "A <strong><code>FinalizationRegistry</code></strong> object lets you request a callback when a value is garbage-collected."
    },
    "finalizationregistry.finalizationregistry": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/finalizationregistry",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>FinalizationRegistry()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> objects.",
      "parameters": {
        "callback": "A function to be invoked each time a registered target value is garbage collected. Its return value is ignored. The function is called with the following arguments:\n<dl>\n<dt id=\"heldvalue\"><a href=\"#heldvalue\"><code>heldValue</code></a></dt>\n<dd>\n<p>The value that was passed to the second parameter of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register\"><code>register()</code></a> method when the <code>target</code> object was registered.\n</dd>\n</dl>"
      }
    },
    "finalizationregistry.register": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/register",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>register()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> instances registers an value with this <code>FinalizationRegistry</code> so that if the value is garbage-collected, the registry's callback may get called.",
      "parameters": {
        "target": "The target value to register.",
        "heldValue": "The value to pass to the finalizer for this <code>target</code>. This cannot be the <code>target</code> itself but can be anything else, including functions and primitives.",
        "unregisterToken": "A token that may be used with the <code>unregister</code> method later to unregister the target value. If provided (and not <code>undefined</code>), this must be an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>. If not provided, the target cannot be unregistered."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>target</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a> (object as opposed to primitives; functions are objects as well)</li>\n<li><code>target</code> is the same as <code>heldValue</code> (<code>target === heldValue</code>)</li>\n<li><code>unregisterToken</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a></li>\n</ul>"
      }
    },
    "finalizationregistry.unregister": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/unregister",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>unregister()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> instances unregisters a target value from this <code>FinalizationRegistry</code>.",
      "parameters": {
        "unregisterToken": "The token used with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register\"><code>register()</code></a> method when registering the target value. Multiple cells registered with the same <code>unregisterToken</code> will be unregistered together."
      },
      "returns": "A boolean value that is <code>true</code> if at least one cell was unregistered and <code>false</code> if no cell was unregistered.",
      "throws": {
        "TypeError": "Thrown if <code>unregisterToken</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      }
    },
    "float16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "135",
        "ChromeAndroid": "135",
        "Edge": "135",
        "Firefox": "129",
        "FirefoxAndroid": "129",
        "Opera": "120",
        "Safari": "18.2",
        "SafariIOS": "18.2",
        "Deno": "1.43"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-04-04"
      },
      "doc": "The <strong><code>Float16Array</code></strong> typed array represents an array of 16-bit floating point numbers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Float16Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nFloat16 support is not universal, both in the JavaScript API and the underlying CPU architecture. Using it may result in slower performance on some platforms. It is intended for interacting with highly optimized and performance-sensitive systems such as <a href=\"https://github.com/w3c/ColorWeb-CG/blob/main/canvas_float.md\" class=\"external\" target=\"_blank\">float-backed canvases</a>, WebGPU, WebGL, and deep learning models including <a href=\"https://github.com/huggingface/blog/blob/main/stable_diffusion.md\" class=\"external\" target=\"_blank\">stable diffusion</a>.\n</div>"
    },
    "float16array.float16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float16array/float16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "135",
        "ChromeAndroid": "135",
        "Edge": "135",
        "Firefox": "129",
        "FirefoxAndroid": "129",
        "Opera": "120",
        "Safari": "18.2",
        "SafariIOS": "18.2",
        "Deno": "1.43"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-04-04"
      },
      "doc": "The <strong><code>Float16Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Float16Array\"><code>Float16Array</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "float32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Float32Array</code></strong> typed array represents an array of 32-bit floating point numbers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Float32Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "float32array.float32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float32array/float32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Float32Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "float64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Float64Array</code></strong> typed array represents an array of 64-bit floating point numbers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Float64Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "float64array.float64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float64array/float64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Float64Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Float64Array\"><code>Float64Array</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "function": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Function</code></strong> object provides methods for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions\">functions</a>. In JavaScript, every function is actually a <code>Function</code> object."
    },
    "function.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/apply",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>apply()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances calls this function with a given <code>this</code> value, and <code>arguments</code> provided as an array (or an <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like object</a>).",
      "parameters": {
        "thisArg": "The value of <code>this</code> provided for the call to <code>func</code>. If the function is not in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> will be replaced with the global object, and primitive values will be converted to objects.",
        "argsArray": "An array-like object, specifying the arguments with which <code>func</code> should be called, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no arguments should be provided to the function."
      },
      "returns": "The result of calling the function with the specified <code>this</code> value and arguments."
    },
    "function.arguments": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/arguments",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThe <code>arguments</code> property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> objects is deprecated. The recommended way to access the <code>arguments</code> object is to refer to the variable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> available within functions.\n</div>\n<p>The <strong><code>arguments</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances returns the arguments passed to this function. For <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict</a>, arrow, async, and generator functions, accessing the <code>arguments</code> property throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>."
    },
    "function.bind": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/bind",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "6",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>bind()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances creates a new function that, when called, calls this function with its <code>this</code> keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.",
      "parameters": {
        "thisArg": "The value to be passed as the <code>this</code> parameter to the target function <code>func</code> when the bound function is called. If the function is not in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> will be replaced with the global object, and primitive values will be converted to objects. The value is ignored if the bound function is constructed using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator.",
        "arg1, …, argN": "Arguments to prepend to arguments provided to the bound function when invoking <code>func</code>."
      },
      "returns": "A copy of the given function with the specified <code>this</code> value, and initial arguments (if provided)."
    },
    "function.call": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/call",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>call()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances calls this function with a given <code>this</code> value and arguments provided individually.",
      "parameters": {
        "thisArg": "The value to use as <code>this</code> when calling <code>func</code>. If the function is not in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> will be replaced with the global object, and primitive values will be converted to objects.",
        "arg1, …, argN": "Arguments for the function."
      },
      "returns": "The result of calling the function with the specified <code>this</code> value and arguments."
    },
    "function.caller": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/caller",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "9.6",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, accessing <code>caller</code> of a function throws an error — the API is removed with no replacement. This is to prevent code from being able to \"walk the stack\", which both poses security risks and severely limits the possibility of optimizations like inlining and tail-call optimization. For more explanation, you can read <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/arguments/callee#description\">the rationale for the deprecation of <code>arguments.callee</code></a>.\n</div>\n<p>The <strong><code>caller</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances returns the function that invoked this function. For <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict</a>, arrow, async, and generator functions, accessing the <code>caller</code> property throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>."
    },
    "function.displayname": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/displayname",
      "compatibility": {
        "Firefox": "13",
        "FirefoxAndroid": "14"
      },
      "doc": "<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The optional <strong><code>displayName</code></strong> property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instance specifies the display name of the function."
    },
    "function.function": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/function",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Function()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> objects. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a>. However, unlike <code>eval</code> (which may have access to the local scope), the <code>Function</code> constructor creates functions which execute in the global scope only.",
      "parameters": {
        "arg1, …, argN": "Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript parameter (any of plain <a href=\"$MDN_URL$/Glossary/Identifier\">identifier</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/rest_parameters\">rest parameter</a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Destructuring\">destructured</a> parameter, optionally with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/Default_parameters\">default</a>), or a list of such strings separated with commas.\n<p>As the parameters are parsed in the same way as function expressions, whitespace and comments are accepted. For example: <code>\"x\", \"theValue = 42\", \"[a, b] /* numbers */\"</code> — or <code>\"x, theValue = 42, [a, b] /* numbers */\"</code>. (<code>\"x, theValue = 42\", \"[a, b]\"</code> is also correct, though very confusing to read.)",
        "functionBody": "A string containing the JavaScript statements comprising the function definition."
      }
    },
    "function.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/length",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>length</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instance indicates the number of parameters expected by the function."
    },
    "function.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/name",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "15",
        "ChromeAndroid": "18",
        "Edge": "14",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "6",
        "SafariIOS": "6",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-08-02",
        "highDate": "2019-02-02"
      },
      "doc": "The <strong><code>name</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instance indicates the function's name as specified when it was created, or it may be either <code>anonymous</code> or <code>''</code> (an empty string) for functions created anonymously."
    },
    "function.prototype": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/prototype",
      "doc": "The <strong><code>prototype</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instance is used when the function is used as a constructor with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator. It will become the new object's prototype.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nNot all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> objects have the <code>prototype</code> property — see <a href=\"#description\">description</a>.\n</div>"
    },
    "function.symbol.hasinstance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/symbol.hasinstance",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "15",
        "Firefox": "50",
        "FirefoxAndroid": "50",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>[Symbol.hasInstance]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances specifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. It is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator.",
      "parameters": {
        "value": "The object to test. Primitive values always return <code>false</code>."
      },
      "returns": "<code>true</code> if <code>func.prototype</code> is in the prototype chain of <code>value</code>; otherwise, <code>false</code>. Always returns <code>false</code> if <code>value</code> is not an object or <code>this</code> is not a function. If <code>this</code> is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function/bind\">bound function</a>, returns the result of a <code>instanceof</code> test on <code>value</code> and the underlying target function.",
      "throws": {
        "TypeError": "Thrown if <code>this</code> is not a bound function and <code>this.prototype</code> is not an object."
      }
    },
    "function.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances returns a string representing the source code of this function.",
      "returns": "A string representing the source code of the function."
    },
    "generator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "FirefoxAndroid": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Generator</code></strong> object is returned by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/function*\">generator function</a> and it conforms to both the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable protocol</a> and the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\">iterator protocol</a>.\n<p><code>Generator</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> class."
    },
    "generator.next": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/next",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "FirefoxAndroid": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>next()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Generator\"><code>Generator</code></a> instances returns an\nobject with two properties <code>done</code> and <code>value</code>. You can also\nprovide a parameter to the <code>next</code> method to send a value to the\ngenerator.",
      "parameters": {
        "value": "The value to send to the generator.\n<p>The value will be assigned as a result of a <code>yield</code> expression. For\nexample, in <code>variable = yield expression</code>, the value\npassed to the <code>.next()</code> function will be assigned to\n<code>variable</code>."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n<dt id=\"done\"><a href=\"#done\"><code>done</code></a></dt>\n<dd>\n<p>A boolean value:\n<ul>\n<li><code>true</code> if the generator is past the end of its control flow. In this case <code>value</code> specifies the <em>return value</em> of the generator (which may be undefined).</li>\n<li><code>false</code> if the generator is able to produce more values.</li>\n</ul>\n</dd>\n<dt id=\"value_2\"><a href=\"#value_2\"><code>value</code></a></dt>\n<dd>\n<p>Any JavaScript value yielded or returned by the generator.\n</dd>\n</dl>",
      "throws": {
        "TypeError": "Thrown if the generator is already running."
      }
    },
    "generator.return": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/return",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "13",
        "Firefox": "38",
        "FirefoxAndroid": "38",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>return()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Generator\"><code>Generator</code></a> instances acts as if a <code>return</code> statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a> block.",
      "parameters": {
        "value": "The value to return."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n<dt id=\"done\"><a href=\"#done\"><code>done</code></a></dt>\n<dd>\n<p>A boolean value:\n<ul>\n<li><code>true</code> if the generator function's control flow has reached the end.</li>\n<li><code>false</code> if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the <code>return</code> is captured in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a> and there are more <code>yield</code> expressions in the <code>finally</code> block.</li>\n</ul>\n</dd>\n<dt id=\"value_2\"><a href=\"#value_2\"><code>value</code></a></dt>\n<dd>\n<p>The value that is given as an argument, or, if the <code>yield</code> expression is wrapped in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a>, the value yielded/returned from the <code>finally</code> block.\n</dd>\n</dl>",
      "throws": {
        "TypeError": "Thrown if the generator is already running."
      }
    },
    "generator.throw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/throw",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "FirefoxAndroid": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>throw()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Generator\"><code>Generator</code></a> instances acts as if a <code>throw</code> statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",
      "parameters": {
        "exception": "The exception to throw. For debugging purposes, it is useful to make it an <code>instanceof</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
      },
      "returns": "If the thrown exception is caught by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> and the generator resumes to yield more values, it will return an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n<dt id=\"done\"><a href=\"#done\"><code>done</code></a></dt>\n<dd>\n<p>A boolean value:\n<ul>\n<li><code>true</code> if the generator function's control flow has reached the end.</li>\n<li><code>false</code> if the generator function is able to produce more values.</li>\n</ul>\n</dd>\n<dt id=\"value\"><a href=\"#value\"><code>value</code></a></dt>\n<dd>\n<p>The value yielded from the next <code>yield</code> expression.\n</dd>\n</dl>",
      "throws": {
        "TypeError": "Thrown if the generator is already running."
      }
    },
    "generatorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generatorfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "FirefoxAndroid": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>GeneratorFunction</code></strong> object provides methods for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/function*\">generator functions</a>. In JavaScript, every generator function is actually a <code>GeneratorFunction</code> object.\n<p>Note that <code>GeneratorFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div>\n```js\nconst GeneratorFunction = function* () {}.constructor;\n```\n</div>\n<p><code>GeneratorFunction</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>."
    },
    "generatorfunction.generatorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generatorfunction/generatorfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "FirefoxAndroid": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>GeneratorFunction()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a> objects.\n<p>Note that <code>GeneratorFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div>\n```js\nconst GeneratorFunction = function* () {}.constructor;\n```\n</div>\n<p>The <code>GeneratorFunction()</code> constructor is not intended to be used directly, and all caveats mentioned in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function()</code></a> description apply to <code>GeneratorFunction()</code>."
    },
    "generatorfunction.prototype": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generatorfunction/prototype",
      "doc": "The <strong><code>prototype</code></strong> property of <code>GeneratorFunction.prototype</code> is shared by all generator functions. Its value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Generator\"><code>Generator.prototype</code></a>. Each generator function created with the <code>function*</code> syntax or the <code>GeneratorFunction()</code> constructor also has its own <code>prototype</code> property, whose prototype is <code>GeneratorFunction.prototype.prototype</code>. When the generator function is called, its <code>prototype</code> property becomes the prototype of the returned generator object."
    },
    "globalthis": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/globalthis",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "FirefoxAndroid": "65",
        "Opera": "58",
        "Safari": "12.1",
        "SafariIOS": "12.2",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>globalThis</code></strong> global property contains the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this#global_context\">global <code>this</code></a> value, which is usually akin to the <a href=\"$MDN_URL$/Glossary/Global_object\">global object</a>."
    },
    "infinity": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/infinity",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Infinity</code></strong> global property is a numeric value representing infinity."
    },
    "int16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Int16Array</code></strong> typed array represents an array of 16-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Int16Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "int16array.int16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int16array/int16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Int16Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "int32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Int32Array</code></strong> typed array represents an array of 32-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Int32Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "int32array.int32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int32array/int32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Int32Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "int8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int8array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Int8Array</code></strong> typed array represents an array of 8-bit signed integers. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Int8Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "int8array.int8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int8array/int8array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Int8Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "internalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/internalerror",
      "compatibility": {
        "Firefox": "",
        "FirefoxAndroid": "4"
      },
      "doc": "<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>InternalError</code></strong> object indicates an error that occurred internally in the JavaScript engine.\n<p>Example cases are mostly when something is too large, e.g.:\n<ul>\n<li>\"too many switch cases\",</li>\n<li>\"too many parentheses in regular expression\",</li>\n<li>\"array initializer too large\",</li>\n<li>\"too much recursion\".</li>\n</ul>\n<p><code>InternalError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "internalerror.internalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/internalerror/internalerror",
      "compatibility": {
        "Firefox": "",
        "FirefoxAndroid": "4"
      },
      "doc": "<div class=\"notecard nonstandard\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>InternalError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/InternalError\"><code>InternalError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties:\n<dl>\n<dt id=\"cause\"><a href=\"#cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n</dd>\n</dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "intl": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl</code></strong> namespace object contains several constructors as well as functionality common to the internationalization constructors and other language sensitive functions. Collectively, they comprise the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, date and time formatting, and more."
    },
    "intl.collator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl.Collator</code></strong> object enables language-sensitive string comparison."
    },
    "intl.collator.collator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/collator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl.Collator()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance, or an array of such locale identifiers. The runtime's default locale is used when <code>undefined</code> is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.\n<p>The following Unicode extension keys are allowed:\n<dl>\n<dt id=\"co\"><a href=\"#co\"><code>co</code></a></dt>\n<dd>\n<p>See <a href=\"#collation\"><code>collation</code></a>.\n</dd>\n<dt id=\"kn\"><a href=\"#kn\"><code>kn</code></a></dt>\n<dd>\n<p>See <a href=\"#numeric\"><code>numeric</code></a>.\n</dd>\n<dt id=\"kf\"><a href=\"#kf\"><code>kf</code></a></dt>\n<dd>\n<p>See <a href=\"#casefirst\"><code>caseFirst</code></a>.\n</dd>\n</dl>\n<p>These keys can also be set with <code>options</code> (as listed below). When both are set, the <code>options</code> property takes precedence.",
        "options": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n<dl>\n<dt id=\"usage\"><a href=\"#usage\"><code>usage</code></a></dt>\n<dd>\n<p>Whether the comparison is for sorting a list of strings or fuzzy (for the Latin script diacritic-insensitive and case-insensitive) filtering a list of strings by key. Possible values are:\n<dl>\n<dt id=\"sort\"><a href=\"#sort\"><code>\"sort\"</code> (default)</a></dt>\n<dd>\n<p>For sorting a list of strings.\n</dd>\n<dt id=\"search\"><a href=\"#search\"><code>\"search\"</code></a></dt>\n<dd>\n<p>For filtering a list of strings by testing each list item for a full-string match against a key. With <code>\"search\"</code>, the caller should only pay attention to whether <code>compare()</code> returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use <code>\"search\"</code> for sorting/ordering.\n</dd>\n</dl>\n</dd>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Locale identification and negotiation</a>.\n</dd>\n<dt id=\"collation\"><a href=\"#collation\"><code>collation</code></a></dt>\n<dd>\n<p>Variant collations for certain locales, such as <code>\"emoji\"</code>, <code>\"pinyin\"</code>, <code>\"stroke\"</code>, and so on. Only has an effect when <code>usage</code> is <code>\"sort\"</code> (because <code>\"search\"</code> is underlyingly its own collation type). For a list of supported collation types, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_collation_types\"><code>Intl.supportedValuesOf()</code></a>; the default is <code>\"default\"</code>. This option can also be set through the <code>co</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence.\n</dd>\n<dt id=\"numeric\"><a href=\"#numeric\"><code>numeric</code></a></dt>\n<dd>\n<p>Whether numeric collation should be used, such that \"1\" &lt; \"2\" &lt; \"10\". Possible values are <code>true</code> and <code>false</code>; the default is <code>false</code>. This option can also be set through the <code>kn</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence.\n</dd>\n<dt id=\"casefirst\"><a href=\"#casefirst\"><code>caseFirst</code></a></dt>\n<dd>\n<p>Whether upper case or lower case should sort first. Possible values are <code>\"upper\"</code>, <code>\"lower\"</code>, and <code>\"false\"</code> (use the locale's default); the default is <code>\"false\"</code>. This option can also be set through the <code>kf</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence.\n</dd>\n<dt id=\"sensitivity\"><a href=\"#sensitivity\"><code>sensitivity</code></a></dt>\n<dd>\n<p>Which differences in the strings should lead to non-zero result values. Possible values are:\n<dl>\n<dt id=\"base\"><a href=\"#base\"><code>\"base\"</code></a></dt>\n<dd>\n<p>Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A. In the Unicode collation algorithm, this is equivalent to the primary strength level.\n</dd>\n<dt id=\"accent\"><a href=\"#accent\"><code>\"accent\"</code></a></dt>\n<dd>\n<p>Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a ≠ b, a ≠ á, a = A. In the Unicode collation algorithm, this is equivalent to the secondary strength level.\n</dd>\n<dt id=\"case\"><a href=\"#case\"><code>\"case\"</code></a></dt>\n<dd>\n<p>Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A. In the Unicode collation algorithm, this is equivalent to the primary strength level with case level handling.\n</dd>\n<dt id=\"variant\"><a href=\"#variant\"><code>\"variant\"</code></a></dt>\n<dd>\n<p>Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A. In the Unicode collation algorithm, this is equivalent to the tertiary strength level.\n</dd>\n</dl>\n<p>The default is <code>\"variant\"</code> for usage <code>\"sort\"</code>; it's locale dependent for usage <code>\"search\"</code> per spec, but is usually also <code>\"variant\"</code>. Because the core functionality of <code>\"search\"</code> is accent-insensitive and case-insensitive filtering, setting it to <code>\"base\"</code> makes the most sense (and perhaps <code>\"case\"</code>).\n</dd>\n<dt id=\"ignorepunctuation\"><a href=\"#ignorepunctuation\"><code>ignorePunctuation</code></a></dt>\n<dd>\n<p>Whether punctuation should be ignored. Possible values are <code>true</code> and <code>false</code>. The default is <code>true</code> for Thai (<code>th</code>) and <code>false</code> for all other languages.\n</dd>\n</dl>"
      },
      "throws": {
        "RangeError": "Thrown if <code>locales</code> or <code>options</code> contain invalid values."
      }
    },
    "intl.collator.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/compare",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>compare()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> instances compares two\nstrings according to the sort order of this collator object.",
      "parameters": {
        "string1, string2": "The strings to compare against each other."
      },
      "returns": "A number indicating how <code>string1</code> and <code>string2</code> compare to each other according to the sort order of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> object:\n<ul>\n<li>A negative value if <code>string1</code> comes before <code>string2</code>;</li>\n<li>A positive value if <code>string1</code> comes after <code>string2</code>;</li>\n<li>0 if they are considered equal.</li>\n</ul>"
    },
    "intl.collator.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> instances returns a new object with properties reflecting the options computed during initialization of this <code>Collator</code> object.",
      "returns": "A new object with properties reflecting the options computed during the initialization of this <code>Collator</code> object. The object has the following properties, in the order they are listed:\n<dl>\n<dt id=\"locale\"><a href=\"#locale\"><code>locale</code></a></dt>\n<dd>\n<p>The BCP 47 language tag for the locale actually used, determined by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">locale negotiation</a> process. Only the <code>co</code>, <code>kn</code>, and <code>kf</code> Unicode extension keys, if requested and supported, may be included in the output.\n</dd>\n<dt id=\"usage\"><a href=\"#usage\"><code>usage</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"sort\"</code> or <code>\"search\"</code>. The default is <code>\"sort\"</code>.\n</dd>\n<dt id=\"sensitivity\"><a href=\"#sensitivity\"><code>sensitivity</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"base\"</code>, <code>\"accent\"</code>, <code>\"case\"</code>, or <code>\"variant\"</code>. The default is <code>\"variant\"</code> for usage <code>\"sort\"</code>; it's locale dependent for usage <code>\"search\"</code>.\n</dd>\n<dt id=\"ignorepunctuation\"><a href=\"#ignorepunctuation\"><code>ignorePunctuation</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is a boolean. The default is <code>true</code> for Thai (<code>th</code>) and <code>false</code> for all other languages.\n</dd>\n<dt id=\"collation\"><a href=\"#collation\"><code>collation</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, or using the Unicode extension key <code>\"co\"</code>, with default filled in as needed. It is a supported <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_collation_types\">collation type</a> for this locale. The default is <code>\"default\"</code>.\n</dd>\n<dt id=\"numeric\"><a href=\"#numeric\"><code>numeric</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, or using the Unicode extension key <code>\"kn\"</code>, with default filled in as needed. It is a boolean. The default is <code>false</code>. If the implementation does not support this Unicode extension key, this property is omitted.\n</dd>\n<dt id=\"casefirst\"><a href=\"#casefirst\"><code>caseFirst</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, or using the Unicode extension key <code>\"kf\"</code>, with default filled in as needed. It is either <code>\"upper\"</code>, <code>\"lower\"</code>, or <code>\"false\"</code>. The default is <code>\"false\"</code>. If the implementation does not support this Unicode extension key, this property is omitted.\n</dd>\n</dl>"
    },
    "intl.collator.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl.Collator.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page.\n</dd>\n</dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale."
    },
    "intl.datetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl.DateTimeFormat</code></strong> object enables language-sensitive date and time formatting."
    },
    "intl.datetimeformat.datetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/datetimeformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl.DateTimeFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance, or an array of such locale identifiers. The runtime's default locale is used when <code>undefined</code> is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.\n<p>The following Unicode extension keys are allowed:\n<dl>\n<dt id=\"nu\"><a href=\"#nu\"><code>nu</code></a></dt>\n<dd>\n<p>See <a href=\"#numberingsystem\"><code>numberingSystem</code></a>.\n</dd>\n<dt id=\"ca\"><a href=\"#ca\"><code>ca</code></a></dt>\n<dd>\n<p>See <a href=\"#calendar\"><code>calendar</code></a>.\n</dd>\n<dt id=\"hc\"><a href=\"#hc\"><code>hc</code></a></dt>\n<dd>\n<p>See <a href=\"#hourcycle\"><code>hourCycle</code></a>.\n</dd>\n</dl>\n<p>These keys can also be set with <code>options</code> (as listed below). When both are set, the <code>options</code> property takes precedence.",
        "options": "An object. For ease of reading, the property list is broken into sections based on their purposes, including <a href=\"#locale_options\">locale options</a>, <a href=\"#date-time_component_options\">date-time component options</a>, and <a href=\"#style_shortcuts\">style shortcuts</a>.",
        "localeMatcher": "The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Locale identification and negotiation</a>.",
        "calendar": "The calendar to use, such as <code>\"chinese\"</code>, <code>\"gregory\"</code>, <code>\"persian\"</code>, and so on. For a list of supported calendar types, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types\"><code>Intl.supportedValuesOf()</code></a>. This option can also be set through the <code>ca</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence.",
        "numberingSystem": "The numbering system to use for number formatting, such as <code>\"arab\"</code>, <code>\"hans\"</code>, <code>\"mathsans\"</code>, and so on. For a list of supported numbering system types, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\"><code>Intl.supportedValuesOf()</code></a>. This option can also be set through the <code>nu</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence.",
        "hour12": "Whether to use 12-hour time (as opposed to 24-hour time). Possible values are <code>true</code> and <code>false</code>; the default is locale dependent. When <code>true</code>, this option sets <code>hourCycle</code> to either <code>\"h11\"</code> or <code>\"h12\"</code>, depending on the locale. When <code>false</code>, it sets <code>hourCycle</code> to <code>\"h23\"</code>. <code>hour12</code> overrides both the <code>hc</code> locale extension tag and the <code>hourCycle</code> option, should either or both of those be present.",
        "hourCycle": "The hour cycle to use. Possible values are <code>\"h11\"</code>, <code>\"h12\"</code>, <code>\"h23\"</code>, and <code>\"h24\"</code>. This option can also be set through the <code>hc</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence.",
        "timeZone": "The time zone to use. Time zone names correspond to the Zone and Link names of the <a href=\"https://www.iana.org/time-zones\" class=\"external\" target=\"_blank\">IANA Time Zone Database</a>, such as <code>\"UTC\"</code>, <code>\"Asia/Shanghai\"</code>, <code>\"Asia/Kolkata\"</code>, and <code>\"America/New_York\"</code>. Additionally, time zones can be given as UTC offsets in the format \"±hh:mm\", \"±hhmm\", or \"±hh\", for example as <code>\"+01:00\"</code>, <code>\"-2359\"</code>, or <code>\"+23\"</code>. The default is the runtime's default time zone.",
        "weekday": "The representation of the weekday. Possible values are:\n<dl>\n<dt id=\"long\"><a href=\"#long\"><code>\"long\"</code></a></dt>\n<dd>\n<p>E.g., <code>Thursday</code>\n</dd>\n<dt id=\"short\"><a href=\"#short\"><code>\"short\"</code></a></dt>\n<dd>\n<p>E.g., <code>Thu</code>\n</dd>\n<dt id=\"narrow\"><a href=\"#narrow\"><code>\"narrow\"</code></a></dt>\n<dd>\n<p>E.g., <code>T</code>. Two weekdays may have the same narrow style for some locales (e.g., <code>Tuesday</code>'s narrow style is also <code>T</code>).\n</dd>\n</dl>",
        "era": "The representation of the era. Possible values are:\n<dl>\n<dt id=\"long_2\"><a href=\"#long_2\"><code>\"long\"</code></a></dt>\n<dd>\n<p>E.g., <code>Anno Domini</code>\n</dd>\n<dt id=\"short_2\"><a href=\"#short_2\"><code>\"short\"</code></a></dt>\n<dd>\n<p>E.g., <code>AD</code>\n</dd>\n<dt id=\"narrow_2\"><a href=\"#narrow_2\"><code>\"narrow\"</code></a></dt>\n<dd>\n<p>E.g., <code>A</code>\n</dd>\n</dl>",
        "year": "The representation of the year. Possible values are <code>\"numeric\"</code> and <code>\"2-digit\"</code>.",
        "month": "The representation of the month. Possible values are:\n<dl>\n<dt id=\"numeric\"><a href=\"#numeric\"><code>\"numeric\"</code></a></dt>\n<dd>\n<p>E.g., <code>3</code>\n</dd>\n<dt id=\"2-digit\"><a href=\"#2-digit\"><code>\"2-digit\"</code></a></dt>\n<dd>\n<p>E.g., <code>03</code>\n</dd>\n<dt id=\"long_3\"><a href=\"#long_3\"><code>\"long\"</code></a></dt>\n<dd>\n<p>E.g., <code>March</code>\n</dd>\n<dt id=\"short_3\"><a href=\"#short_3\"><code>\"short\"</code></a></dt>\n<dd>\n<p>E.g., <code>Mar</code>\n</dd>\n<dt id=\"narrow_3\"><a href=\"#narrow_3\"><code>\"narrow\"</code></a></dt>\n<dd>\n<p>E.g., <code>M</code>). Two months may have the same narrow style for some locales (e.g., <code>May</code>'s narrow style is also <code>M</code>).\n</dd>\n</dl>",
        "day": "The representation of the day. Possible values are <code>\"numeric\"</code> and <code>\"2-digit\"</code>.",
        "dayPeriod": "The formatting style used for day periods like \"in the morning\", \"am\", \"noon\", \"n\" etc. Possible values are\n<code>\"narrow\"</code>, <code>\"short\"</code>, and <code>\"long\"</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis option only has an effect if a 12-hour clock (<code>hourCycle: \"h12\"</code> or <code>hourCycle: \"h11\"</code>) is used. Many locales use the same string irrespective of the width specified.\n</div>",
        "hour": "The representation of the hour. Possible values are <code>\"numeric\"</code> and <code>\"2-digit\"</code>.",
        "minute": "The representation of the minute. Possible values are <code>\"numeric\"</code> and <code>\"2-digit\"</code>.",
        "second": "The representation of the second. Possible values are <code>\"numeric\"</code> and <code>\"2-digit\"</code>.",
        "fractionalSecondDigits": "The number of digits used to represent fractions of a second (any additional digits are truncated). Possible values are from <code>1</code> to <code>3</code>.",
        "timeZoneName": "The localized representation of the time zone name. Possible values are:\n<dl>\n<dt id=\"long_4\"><a href=\"#long_4\"><code>\"long\"</code></a></dt>\n<dd>\n<p>Long localized form (e.g., <code>Pacific Standard Time</code>, <code>Nordamerikanische Westküsten-Normalzeit</code>)\n</dd>\n<dt id=\"short_4\"><a href=\"#short_4\"><code>\"short\"</code></a></dt>\n<dd>\n<p>Short localized form (e.g.: <code>PST</code>, <code>GMT-8</code>)\n</dd>\n<dt id=\"shortoffset\"><a href=\"#shortoffset\"><code>\"shortOffset\"</code></a></dt>\n<dd>\n<p>Short localized GMT format (e.g., <code>GMT-8</code>)\n</dd>\n<dt id=\"longoffset\"><a href=\"#longoffset\"><code>\"longOffset\"</code></a></dt>\n<dd>\n<p>Long localized GMT format (e.g., <code>GMT-08:00</code>)\n</dd>\n<dt id=\"shortgeneric\"><a href=\"#shortgeneric\"><code>\"shortGeneric\"</code></a></dt>\n<dd>\n<p>Short generic non-location format (e.g.: <code>PT</code>, <code>Los Angeles Zeit</code>).\n</dd>\n<dt id=\"longgeneric\"><a href=\"#longgeneric\"><code>\"longGeneric\"</code></a></dt>\n<dd>\n<p>Long generic non-location format (e.g.: <code>Pacific Time</code>, <code>Nordamerikanische Westküstenzeit</code>)\n</dd>\n</dl>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nTimezone display may fall back to another format if a required string is unavailable. For example, the non-location formats should display the timezone without a specific country/city location like \"Pacific Time\", but may fall back to a timezone like \"Los Angeles Time\".\n</div>",
        "formatMatcher": "The format matching algorithm to use. Possible values are <code>\"basic\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. The algorithm for <code>\"best fit\"</code> is implementation-defined, and <code>\"basic\"</code> is <a href=\"https://tc39.es/ecma402/#sec-basicformatmatcher\" class=\"external\" target=\"_blank\">defined by the spec</a>. This option is only used when both <code>dateStyle</code> and <code>timeStyle</code> are <code>undefined</code> (so that each date-time component's format is individually customizable).",
        "dateStyle": "The <a href=\"https://cldr.unicode.org/translation/date-time/date-time-patterns#h.aa5zjyepm6vh\" class=\"external\" target=\"_blank\">date formatting style</a> to use. Possible values are <code>\"full\"</code>, <code>\"long\"</code>, <code>\"medium\"</code>, and <code>\"short\"</code>. It expands to styles for <code>weekday</code>, <code>day</code>, <code>month</code>, <code>year</code>, and <code>era</code>, with the exact combination of values depending on the locale. When formatting objects such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a>, and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a>, <code>dateStyle</code> will resolve to only those fields relevant to the object.",
        "timeStyle": "The <a href=\"https://cldr.unicode.org/translation/date-time/date-time-patterns#h.588vo3awdscu\" class=\"external\" target=\"_blank\">time formatting style</a> to use. Possible values are <code>\"full\"</code>, <code>\"long\"</code>, <code>\"medium\"</code>, and <code>\"short\"</code>. It expands to styles for <code>hour</code>, <code>minute</code>, <code>second</code>, and <code>timeZoneName</code>, with the exact combination of values depending on the locale."
      },
      "returns": "A new <code>Intl.DateTimeFormat</code> object.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThe text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the <a href=\"#browser_compatibility\">browser compatibility table</a>.\n</div>\n<p>Normally, <code>Intl.DateTimeFormat()</code> can be called with or without <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>, and a new <code>Intl.DateTimeFormat</code> instance is returned in both cases. However, if the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> value is an object that is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> <code>Intl.DateTimeFormat</code> (doesn't necessarily mean it's created via <code>new Intl.DateTimeFormat</code>; just that it has <code>Intl.DateTimeFormat.prototype</code> in its prototype chain), then the value of <code>this</code> is returned instead, with the newly created <code>Intl.DateTimeFormat</code> object hidden in a <code>[Symbol(IntlLegacyConstructedSymbol)]</code> property (a unique symbol that's reused between instances).\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const formatter = Intl.DateTimeFormat.call(\n  { __proto__: Intl.DateTimeFormat.prototype },\n  \"en-US\",\n  { dateStyle: \"full\" },\n);\nconsole.log(Object.getOwnPropertyDescriptors(formatter));\n// {\n//   [Symbol(IntlLegacyConstructedSymbol)]: {\n//     value: DateTimeFormat [Intl.DateTimeFormat] {},\n//     writable: false,\n//     enumerable: false,\n//     configurable: false\n//   }\n// }\n</code></pre></div>\n<p>Note that there's only one actual <code>Intl.DateTimeFormat</code> instance here: the one hidden in <code>[Symbol(IntlLegacyConstructedSymbol)]</code>. Calling the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions\"><code>resolvedOptions()</code></a> methods on <code>formatter</code> would correctly use the options stored in that instance, but calling all other methods (e.g., <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange\"><code>formatRange()</code></a>) would fail: \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n<p>This behavior, called <code>ChainDateTimeFormat</code>, does not happen when <code>Intl.DateTimeFormat()</code> is called without <code>new</code> but with <code>this</code> set to anything else that's not an <code>instanceof Intl.DateTimeFormat</code>. If you call it directly as <code>Intl.DateTimeFormat()</code>, the <code>this</code> value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a>, and a new <code>Intl.DateTimeFormat</code> instance is created normally.",
      "throws": {
        "RangeError": "Thrown if <code>locales</code> or <code>options</code> contain invalid values."
      }
    },
    "intl.datetimeformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/format",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>format()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances formats a date according to the locale and formatting options of this <code>Intl.DateTimeFormat</code> object.",
      "parameters": {
        "date": "The date to format. Can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object. Additionally can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> object if the <code>DateTimeFormat</code> object was configured to print at least one relevant part of the date.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nA <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object will always throw a <code>TypeError</code>; use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/toLocaleString\"><code>Temporal.ZonedDateTime.prototype.toLocaleString()</code></a> or convert it to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object instead.\n</div>\n<p>Omitting it results in formatting the current date (as returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/now\"><code>Date.now()</code></a>), which could be slightly confusing, so it is advisable to always explicitly pass a date."
      },
      "returns": "A string representing the given <code>date</code> formatted according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>format()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>format()</code> to hardcoded constants.\n</div>"
    },
    "intl.datetimeformat.formatrange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formatrange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "76",
        "ChromeAndroid": "76",
        "Edge": "79",
        "Firefox": "91",
        "FirefoxAndroid": "91",
        "Opera": "63",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.9.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-08-10",
        "highDate": "2024-02-10"
      },
      "doc": "The <strong><code>formatRange()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances formats a\ndate range in the most concise way based on the locales and\noptions provided when instantiating this\n<code>Intl.DateTimeFormat</code> object.",
      "parameters": {
        "startDate": "The start of the date range. Can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object. Additionally can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> object if the <code>DateTimeFormat</code> object was configured to print at least one relevant part of the date.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nA <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object will always throw a <code>TypeError</code>; use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/toLocaleString\"><code>Temporal.ZonedDateTime.prototype.toLocaleString()</code></a> or convert it to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object instead.\n</div>",
        "endDate": "The end of the date range. Must have the same type as <code>startDate</code>."
      },
      "returns": "A string representing the given date range formatted according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object."
    },
    "intl.datetimeformat.formatrangetoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formatrangetoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "76",
        "ChromeAndroid": "76",
        "Edge": "79",
        "Firefox": "91",
        "FirefoxAndroid": "91",
        "Opera": "63",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.9.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-08-10",
        "highDate": "2024-02-10"
      },
      "doc": "The <strong><code>formatRangeToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances returns an array of objects representing each part of the formatted string that would be returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange\"><code>formatRange()</code></a>. It is useful for building custom strings from the locale-specific tokens.",
      "parameters": {
        "startDate": "The start of the date range. Can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object. Additionally can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> object if the <code>DateTimeFormat</code> object was configured to print at least one relevant part of the date.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nA <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object will always throw a <code>TypeError</code>; use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/toLocaleString\"><code>Temporal.ZonedDateTime.prototype.toLocaleString()</code></a> or convert it to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object instead.\n</div>",
        "endDate": "The end of the date range. Must have the same type as <code>startDate</code>."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted date range in parts. Each object has three properties, <code>type</code>, <code>value</code>, and <code>source</code>, each containing a string. The string concatenation of <code>value</code>, in the order provided, will result in the same string as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange\"><code>formatRange()</code></a>. The <code>type</code> may have the same values as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts\"><code>formatToParts()</code></a>. The <code>source</code> can be one of the following:\n<dl>\n<dt id=\"startrange\"><a href=\"#startrange\"><code>startRange</code></a></dt>\n<dd>\n<p>The token is a part of the start date.\n</dd>\n<dt id=\"endrange\"><a href=\"#endrange\"><code>endRange</code></a></dt>\n<dd>\n<p>The token is a part of the end date.\n</dd>\n<dt id=\"shared\"><a href=\"#shared\"><code>shared</code></a></dt>\n<dd>\n<p>The token is shared between the start and end; for example, if the start and end dates share the same day period, that token may get reused. All literals that are part of the range pattern itself, such as the <code>\" – \"</code> separator, are also marked as <code>shared</code>.\n</dd>\n</dl>\n<p>If the start and end dates are equivalent at the precision of the output, then the output has the same list of tokens as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts\"><code>formatToParts()</code></a> on the start date, with all tokens marked as <code>source: \"shared\"</code>."
    },
    "intl.datetimeformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "18",
        "Firefox": "51",
        "FirefoxAndroid": "56",
        "Opera": "44",
        "Safari": "11",
        "SafariIOS": "11",
        "Nodejs": "8.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2018-10-02",
        "highDate": "2021-04-02"
      },
      "doc": "The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances returns an array of objects representing each part of the formatted string that would be returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a>. It is useful for building custom strings from the locale-specific tokens.",
      "parameters": {
        "date": "The date to format. Can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object. Additionally can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> object if the <code>DateTimeFormat</code> object was configured to print at least one relevant part of the date.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nA <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object will always throw a <code>TypeError</code>; use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/toLocaleString\"><code>Temporal.ZonedDateTime.prototype.toLocaleString()</code></a> or convert it to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object instead.\n</div>\n<p>Omitting it results in formatting the current date (as returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/now\"><code>Date.now()</code></a>), which could be slightly confusing, so it is advisable to always explicitly pass a date."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted date in parts. Each object has two properties, <code>type</code> and <code>value</code>, each containing a string. The string concatenation of <code>value</code>, in the order provided, will result in the same string as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a>. The <code>type</code> may be one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#date-time_component_options\">date-time components</a>:\n<dl>\n<dt id=\"weekday\"><a href=\"#weekday\"><code>weekday</code></a></dt>\n<dd>\n<p>For example <code>\"M\"</code>, <code>\"Monday\"</code>, or <code>\"Montag\"</code>.\n</dd>\n<dt id=\"era\"><a href=\"#era\"><code>era</code></a></dt>\n<dd>\n<p>For example <code>\"BC\"</code> or <code>\"AD\"</code>.\n</dd>\n<dt id=\"year\"><a href=\"#year\"><code>year</code></a></dt>\n<dd>\n<p>For example <code>\"2012\"</code> or <code>\"96\"</code>.\n</dd>\n<dt id=\"month\"><a href=\"#month\"><code>month</code></a></dt>\n<dd>\n<p>For example <code>\"12\"</code> or <code>\"January\"</code>.\n</dd>\n<dt id=\"day\"><a href=\"#day\"><code>day</code></a></dt>\n<dd>\n<p>For example <code>\"17\"</code>.\n</dd>\n<dt id=\"dayperiod\"><a href=\"#dayperiod\"><code>dayPeriod</code></a></dt>\n<dd>\n<p>For example <code>\"AM\"</code>, <code>\"PM\"</code>, <code>\"in the morning\"</code>, or <code>\"noon\"</code>.\n</dd>\n<dt id=\"hour\"><a href=\"#hour\"><code>hour</code></a></dt>\n<dd>\n<p>For example <code>\"3\"</code> or <code>\"03\"</code>.\n</dd>\n<dt id=\"minute\"><a href=\"#minute\"><code>minute</code></a></dt>\n<dd>\n<p>For example <code>\"00\"</code>.\n</dd>\n<dt id=\"second\"><a href=\"#second\"><code>second</code></a></dt>\n<dd>\n<p>For example <code>\"07\"</code> or <code>\"42\"</code>.\n</dd>\n<dt id=\"fractionalsecond\"><a href=\"#fractionalsecond\"><code>fractionalSecond</code></a></dt>\n<dd>\n<p>For example <code>\"0\"</code>, <code>\"00\"</code>, or <code>\"000\"</code>.\n</dd>\n<dt id=\"timezonename\"><a href=\"#timezonename\"><code>timeZoneName</code></a></dt>\n<dd>\n<p>For example <code>\"UTC\"</code>, <code>\"CET\"</code>, or <code>\"Central European Time\"</code>.\n</dd>\n</dl>\n<p>The <code>type</code> may also be one of the following:\n<dl>\n<dt id=\"literal\"><a href=\"#literal\"><code>literal</code></a></dt>\n<dd>\n<p>Any string that's a part of the format pattern and not influenced by the <code>date</code>; for example <code>\"/\"</code>, <code>\", \"</code>, <code>\"o'clock\"</code>, <code>\"de\"</code>, <code>\" \"</code>, etc.\n</dd>\n<dt id=\"relatedyear\"><a href=\"#relatedyear\"><code>relatedYear</code></a></dt>\n<dd>\n<p>A 4-digit Gregorian year, in the event that the calendar's representation would be a <code>yearName</code> instead of a year; for example <code>\"2019\"</code>. See <a href=\"#named_years\">named years</a> for more details.\n</dd>\n<dt id=\"yearname\"><a href=\"#yearname\"><code>yearName</code></a></dt>\n<dd>\n<p>The name given to the year, usually in calendars without the concept of continuous years; for example <code>\"geng-zi\"</code>.\n</dd>\n<dt id=\"unknown\"><a href=\"#unknown\"><code>unknown</code></a></dt>\n<dd>\n<p>Reserved for any token that's not recognized as any of the above; should be rarely encountered.\n</dd>\n</dl>"
    },
    "intl.datetimeformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances returns a new object with properties reflecting the options computed during initialization of this <code>DateTimeFormat</code> object.",
      "returns": "A new object with properties reflecting the options computed during the initialization of this <code>DateTimeFormat</code> object. The object has the following properties, in the order they are listed:\n<dl>\n<dt id=\"locale\"><a href=\"#locale\"><code>locale</code></a></dt>\n<dd>\n<p>The BCP 47 language tag for the locale actually used, determined by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">locale negotiation</a> process. Only the <code>ca</code>, <code>hc</code>, and <code>nu</code> Unicode extension keys, if requested, may be included in the output.\n</dd>\n<dt id=\"calendar\"><a href=\"#calendar\"><code>calendar</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, or using the Unicode extension key <code>\"ca\"</code>, with default filled in as needed. It is a supported <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types\">calendar type</a> for this locale. The default is locale dependent.\n</dd>\n<dt id=\"numberingsystem\"><a href=\"#numberingsystem\"><code>numberingSystem</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, or using the Unicode extension key <code>\"nu\"</code>, with default filled in as needed. It is a supported <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\">numbering system</a> for this locale. The default is locale dependent.\n</dd>\n<dt id=\"timezone\"><a href=\"#timezone\"><code>timeZone</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">IANA time zone name</a>. The default is the runtime's default time zone.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThe standardization of <code>Temporal</code> requires browsers to use the same identifier as originally specified, without canonicalization to a different alias. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information.\n</div>\n</dd>\n<dt id=\"hourcycle\"><a href=\"#hourcycle\"><code>hourCycle</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, or using the Unicode extension key <code>\"hc\"</code>, with default filled in as needed. If <code>hour12</code> was provided in the <code>options</code>, then that overrides other <code>hourCycle</code> settings. It is only present if the resolved options also include <code>hour</code> or <code>timeStyle</code>. It is either <code>\"h11\"</code>, <code>\"h12\"</code>, <code>\"h23\"</code>, or <code>\"h24\"</code>. The default is locale dependent, although <code>\"h24\"</code> is never a default.\n</dd>\n<dt id=\"hour12\"><a href=\"#hour12\"><code>hour12</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Calculated from <code>hourCycle</code>. It is only present if the resolved options also include <code>hour</code> or <code>timeStyle</code>. It is <code>true</code> if <code>hourCycle</code> is <code>\"h11\"</code> or <code>\"h12\"</code>, and <code>false</code> if <code>hourCycle</code> is <code>\"h23\"</code> or <code>\"h24\"</code>.\n</dd>\n<dt id=\"weekday\"><a href=\"#weekday\"><code>weekday</code>, <code>era</code>, <code>year</code>, <code>month</code>, <code>day</code>, <code>dayPeriod</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, <code>fractionalSecondDigits</code>, <code>timeZoneName</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The values resulting from format matching between the corresponding properties in the <code>options</code> argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output. <code>weekday</code>, <code>era</code>, and <code>dayPeriod</code> are either <code>\"narrow\"</code>, <code>\"short\"</code>, or <code>\"long\"</code>; <code>year</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, and <code>second</code> are either <code>\"numeric\"</code>, <code>\"2-digit\"</code>, or <code>\"narrow\"</code>; <code>month</code> is either <code>\"numeric\"</code>, <code>\"2-digit\"</code>, <code>\"narrow\"</code>, <code>\"short\"</code>, or <code>\"long\"</code>; <code>fractionalSecondDigits</code> is either <code>1</code>, <code>2</code>, or <code>3</code>; <code>timeZoneName</code> is either <code>\"short\"</code>, <code>\"long\"</code>, <code>\"shortOffset\"</code>, <code>\"longOffset\"</code>, <code>\"shortGeneric\"</code>, or <code>\"longGeneric\"</code>.\n<p>If these properties were requested in <code>options</code>, the constructor prevents <code>dateStyle</code> and <code>timeStyle</code> from being specified, so the below group will never be present.\n</dd>\n<dt id=\"datestyle\"><a href=\"#datestyle\"><code>dateStyle</code>, <code>timeStyle</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The values provided for these properties in the <code>options</code> argument. They are either <code>\"full\"</code>, <code>\"long\"</code>, <code>\"medium\"</code>, <code>\"short\"</code>, or <code>\"none\"</code>. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output.\n<p>If these properties were requested in <code>options</code>, the constructor prevents individual date time component options from being specified, so the above group will never be present.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAlthough <code>dateStyle</code> and <code>timeStyle</code> are shortcuts for individual date and time component styles, the exact (locale dependent) component styles they resolve to are not included in the resolved options. This ensures the result of <code>resolvedOptions()</code> can be passed directly to the <code>Intl.DateTimeFormat()</code> constructor (because an <code>options</code> object with both <code>dateStyle</code> or <code>timeStyle</code> and individual date or time component styles is not valid).\n</div>\n</dd>\n</dl>"
    },
    "intl.datetimeformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl.DateTimeFormat.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page.\n</dd>\n</dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale."
    },
    "intl.displaynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "FirefoxAndroid": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>Intl.DisplayNames</code></strong> object enables the consistent translation of language, region and script display names."
    },
    "intl.displaynames.displaynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/displaynames",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "FirefoxAndroid": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>Intl.DisplayNames()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\"><code>Intl.DisplayNames</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance, or an array of such locale identifiers. The runtime's default locale is used when <code>undefined</code> is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object containing the following properties, in the order they are retrieved:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Locale identification and negotiation</a>.\n</dd>\n<dt id=\"style\"><a href=\"#style\"><code>style</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The formatting style to use. Possible values are <code>\"narrow\"</code>, <code>\"short\"</code>, and <code>\"long\"</code>; the default is <code>\"long\"</code>.\n</dd>\n<dt id=\"type\"><a href=\"#type\"><code>type</code></a></dt>\n<dd>\n<p>The type of display names to return from <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of\"><code>of()</code></a>. Possible values are <code>\"language\"</code>, <code>\"region\"</code>, <code>\"script\"</code>, <code>\"currency\"</code>, <code>\"calendar\"</code>, and <code>\"dateTimeField\"</code>.\n</dd>\n<dt id=\"fallback\"><a href=\"#fallback\"><code>fallback</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>What to return from <code>of()</code> if the input is structurally valid but there's no matching display name. Possible values are:\n<dl>\n<dt id=\"code\"><a href=\"#code\"><code>\"code\"</code> (default)</a></dt>\n<dd>\n<p>Return the input code itself.\n</dd>\n<dt id=\"none\"><a href=\"#none\"><code>\"none\"</code></a></dt>\n<dd>\n<p>Return <code>undefined</code>.\n</dd>\n</dl>\n</dd>\n<dt id=\"languagedisplay\"><a href=\"#languagedisplay\"><code>languageDisplay</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>How language names should be displayed. Only usable along with <code>type: \"language\"</code>. Possible values are:\n<dl>\n<dt id=\"dialect\"><a href=\"#dialect\"><code>\"dialect\"</code> (default)</a></dt>\n<dd>\n<p>Display special regional dialects using their own name. E.g. <code>\"nl-BE\"</code> will be displayed as <code>\"Flemish\"</code>.\n</dd>\n<dt id=\"standard\"><a href=\"#standard\"><code>\"standard\"</code></a></dt>\n<dd>\n<p>Display all languages using standard format. E.g. <code>\"nl-BE\"</code> will be displayed as <code>\"Dutch (Belgium)\"</code>.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "throws": {
        "TypeError": "Thrown if <code>options.type</code> is not provided.",
        "RangeError": "Thrown if <code>locales</code> or <code>options</code> contain invalid values."
      }
    },
    "intl.displaynames.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/of",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "FirefoxAndroid": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>of()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\"><code>Intl.DisplayNames</code></a> instances receives a code and returns a string based on the locale and options provided when instantiating this <code>Intl.DisplayNames</code> object.",
      "parameters": {
        "code": "The <code>code</code> to provide depends on the <code>type</code>:\n<ul>\n<li>If the type is \"region\", <code>code</code> should be either an <a href=\"https://www.iso.org/iso-3166-country-codes.html\" class=\"external\" target=\"_blank\">two-letter ISO 3166 region code</a>, or a <a href=\"https://unstats.un.org/unsd/methodology/m49/\" class=\"external\" target=\"_blank\">three-digit UN M49 geographic region</a>. It is required to follow the <a href=\"https://unicode.org/reports/tr35/#unicode_region_subtag\" class=\"external\" target=\"_blank\"><code>unicode_region_subtag</code></a> grammar. Use uppercase codes (e.g., <code>\"US\"</code>), because lowercase ones (e.g., <code>\"us\"</code>) may not work reliably everywhere.</li>\n<li>If the type is \"script\", <code>code</code> should be an <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" class=\"external\" target=\"_blank\">four-letter ISO 15924 script code</a>. It is required to follow the <a href=\"https://unicode.org/reports/tr35/#unicode_script_subtag\" class=\"external\" target=\"_blank\"><code>unicode_script_subtag</code></a> grammar.</li>\n<li>If the type is \"language\", <code>code</code> should be matched by the <a href=\"https://unicode.org/reports/tr35/#Unicode_language_identifier\" class=\"external\" target=\"_blank\"><code>unicode_language_id</code></a> nonterminal.</li>\n<li>If the type is \"currency\", <code>code</code> should be a <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" class=\"external\" target=\"_blank\">three-letter ISO 4217 currency code</a>. It is required to have exactly three alphabetic characters.</li>\n<li>If the type is \"dateTimeField\", <code>code</code> should be one of: <code>\"era\"</code>, <code>\"year\"</code>, <code>\"quarter\"</code>, <code>\"month\"</code>, <code>\"weekOfYear\"</code>, <code>\"weekday\"</code>, <code>\"day\"</code>, <code>\"dayPeriod\"</code>, <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"timeZoneName\"</code>.</li>\n<li>If the type is \"calendar\", <code>code</code> should be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar\">calendar key</a>. It is required to follow the <code>type</code> grammar of a <a href=\"https://unicode.org/reports/tr35/#32-unicode-locale-identifier\" class=\"external\" target=\"_blank\">Unicode locale identifier</a>.</li>\n</ul>"
      },
      "returns": "A language-specific formatted string, or <code>undefined</code> if there's no data for the input and <code>fallback</code> is <code>\"none\"</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>fallback</code> is only used if <code>code</code> is structurally valid. See <a href=\"#using_fallback\">using fallback</a>.\n</div>",
      "throws": {
        "RangeError": "Thrown if <code>code</code> is not structurally valid for the given <code>type</code>."
      }
    },
    "intl.displaynames.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "FirefoxAndroid": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\"><code>Intl.DisplayNames</code></a> instances returns a new object with properties reflecting the options computed during initialization of this <code>DisplayNames</code> object.",
      "returns": "A new object with properties reflecting the options computed during the initialization of this <code>DisplayNames</code> object. The object has the following properties, in the order they are listed:\n<dl>\n<dt id=\"locale\"><a href=\"#locale\"><code>locale</code></a></dt>\n<dd>\n<p>The BCP 47 language tag for the locale actually used, determined by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">locale negotiation</a> process. No Unicode extension key will be included in the output.\n</dd>\n<dt id=\"style\"><a href=\"#style\"><code>style</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"narrow\"</code>, <code>\"short\"</code>, or <code>\"long\"</code>. The default is <code>\"long\"</code>.\n</dd>\n<dt id=\"type\"><a href=\"#type\"><code>type</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument. It is either <code>\"language\"</code>, <code>\"region\"</code>, <code>\"script\"</code>, <code>\"currency\"</code>, <code>\"calendar\"</code>, or <code>\"dateTimeField\"</code>. It is required so there is no default.\n</dd>\n<dt id=\"fallback\"><a href=\"#fallback\"><code>fallback</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument. It is either <code>\"code\"</code> or <code>\"none\"</code>. The default is <code>\"code\"</code>.\n</dd>\n<dt id=\"languagedisplay\"><a href=\"#languagedisplay\"><code>languageDisplay</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument. It is either <code>\"dialect\"</code> or <code>\"standard\"</code>. The default is <code>\"dialect\"</code>.\n</dd>\n</dl>"
    },
    "intl.displaynames.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "FirefoxAndroid": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>Intl.DisplayNames.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in display names without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page.\n</dd>\n</dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in display names without having to fall back to the runtime's default locale."
    },
    "intl.durationformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "129",
        "ChromeAndroid": "129",
        "Edge": "129",
        "Firefox": "136",
        "FirefoxAndroid": "136",
        "Opera": "115",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "23.0.0",
        "Deno": "1.46"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-04"
      },
      "doc": "The <strong><code>Intl.DurationFormat</code></strong> object enables language-sensitive duration formatting."
    },
    "intl.durationformat.durationformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/durationformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "129",
        "ChromeAndroid": "129",
        "Edge": "129",
        "Firefox": "136",
        "FirefoxAndroid": "136",
        "Opera": "115",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "23.0.0",
        "Deno": "1.46"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-04"
      },
      "doc": "The <strong><code>Intl.DurationFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance, or an array of such locale identifiers. The runtime's default locale is used when <code>undefined</code> is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.\n<p>The following Unicode extension key is allowed:\n<dl>\n<dt id=\"nu\"><a href=\"#nu\"><code>nu</code></a></dt>\n<dd>\n<p>See <a href=\"#numberingsystem\"><code>numberingSystem</code></a>.\n</dd>\n</dl>\n<p>This key can also be set with <code>options</code> (as listed below). When both are set, the <code>options</code> property takes precedence.",
        "options": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Locale identification and negotiation</a>.\n</dd>\n<dt id=\"numberingsystem\"><a href=\"#numberingsystem\"><code>numberingSystem</code></a></dt>\n<dd>\n<p>The numbering system to use for number formatting, such as <code>\"arab\"</code>, <code>\"hans\"</code>, <code>\"mathsans\"</code>, and so on. For a list of supported numbering system types, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\"><code>Intl.supportedValuesOf()</code></a>. This option can also be set through the <code>nu</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence.\n</dd>\n<dt id=\"style\"><a href=\"#style\"><code>style</code></a></dt>\n<dd>\n<p>The style of the formatted duration. This value is used as the default for all other unit options, and also corresponds to the <code>style</code> option of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat\"><code>Intl.ListFormat()</code></a> when concatenating the list of duration units. Possible values are:\n<dl>\n<dt id=\"long\"><a href=\"#long\"><code>\"long\"</code></a></dt>\n<dd>\n<p>E.g., 1 hour and 50 minutes\n</dd>\n<dt id=\"short\"><a href=\"#short\"><code>\"short\"</code> (default)</a></dt>\n<dd>\n<p>E.g., 1 hr, 50 min\n</dd>\n<dt id=\"narrow\"><a href=\"#narrow\"><code>\"narrow\"</code></a></dt>\n<dd>\n<p>E.g., 1h 50m\n</dd>\n<dt id=\"digital\"><a href=\"#digital\"><code>\"digital\"</code></a></dt>\n<dd>\n<p>E.g., 1:50:00\n</dd>\n</dl>\n</dd>\n<dt id=\"years\"><a href=\"#years\"><code>years</code></a></dt>\n<dd>\n<p>The style of the formatted years. Possible values are <code>\"long\"</code>, <code>\"short\"</code>, and <code>\"narrow\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"short\"</code> otherwise.\n</dd>\n<dt id=\"yearsdisplay\"><a href=\"#yearsdisplay\"><code>yearsDisplay</code></a></dt>\n<dd>\n<p>Whether to always display years, or only if nonzero. Possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>years</code> is unspecified, and <code>\"always\"</code> otherwise.\n</dd>\n<dt id=\"months\"><a href=\"#months\"><code>months</code></a></dt>\n<dd>\n<p>The style of the formatted months. Possible values are <code>\"long\"</code>, <code>\"short\"</code>, and <code>\"narrow\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"short\"</code> otherwise.\n</dd>\n<dt id=\"monthsdisplay\"><a href=\"#monthsdisplay\"><code>monthsDisplay</code></a></dt>\n<dd>\n<p>Whether to always display months, or only if nonzero. Possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>months</code> is unspecified, and <code>\"always\"</code> otherwise.\n</dd>\n<dt id=\"weeks\"><a href=\"#weeks\"><code>weeks</code></a></dt>\n<dd>\n<p>The style of the formatted weeks. Possible values are <code>\"long\"</code>, <code>\"short\"</code>, and <code>\"narrow\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"short\"</code> otherwise.\n</dd>\n<dt id=\"weeksdisplay\"><a href=\"#weeksdisplay\"><code>weeksDisplay</code></a></dt>\n<dd>\n<p>Whether to always display weeks, or only if nonzero. Possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>weeks</code> is unspecified, and <code>\"always\"</code> otherwise.\n</dd>\n<dt id=\"days\"><a href=\"#days\"><code>days</code></a></dt>\n<dd>\n<p>The style of the formatted days. Possible values are <code>\"long\"</code>, <code>\"short\"</code>, and <code>\"narrow\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"short\"</code> otherwise.\n</dd>\n<dt id=\"daysdisplay\"><a href=\"#daysdisplay\"><code>daysDisplay</code></a></dt>\n<dd>\n<p>Whether to always display days, or only if nonzero. Possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>days</code> is unspecified, and <code>\"always\"</code> otherwise.\n</dd>\n<dt id=\"hours\"><a href=\"#hours\"><code>hours</code></a></dt>\n<dd>\n<p>The style of the formatted hours. Possible values are <code>\"long\"</code>, <code>\"short\"</code>, <code>\"narrow\"</code>, <code>\"numeric\"</code>, and <code>\"2-digit\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"numeric\"</code> otherwise.\n</dd>\n<dt id=\"hoursdisplay\"><a href=\"#hoursdisplay\"><code>hoursDisplay</code></a></dt>\n<dd>\n<p>Whether to always display hours, or only if nonzero. Possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>hours</code> is unspecified and <code>options.style</code> is not <code>\"digital\"</code>, and <code>\"always\"</code> otherwise.\n</dd>\n<dt id=\"minutes\"><a href=\"#minutes\"><code>minutes</code></a></dt>\n<dd>\n<p>The style of the formatted minutes.\n<ul>\n<li>If <code>hours</code> is <code>\"numeric\"</code> or <code>\"2-digit\"</code>, possible values are <code>\"numeric\"</code> and <code>\"2-digit\"</code>, and <code>\"numeric\"</code> is normalized to <code>\"2-digit\"</code>; the default is <code>\"numeric\"</code>.</li>\n<li>Otherwise, possible values are <code>\"long\"</code>, <code>\"short\"</code>, <code>\"narrow\"</code>, <code>\"numeric\"</code>, and <code>\"2-digit\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"numeric\"</code> otherwise.</li>\n</ul>\n</dd>\n<dt id=\"minutesdisplay\"><a href=\"#minutesdisplay\"><code>minutesDisplay</code></a></dt>\n<dd>\n<p>Whether to always display minutes, or only if nonzero. Possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>minutes</code> is unspecified and <code>options.style</code> is not <code>\"digital\"</code>, and <code>\"always\"</code> otherwise.\n</dd>\n<dt id=\"seconds\"><a href=\"#seconds\"><code>seconds</code></a></dt>\n<dd>\n<p>The style of the formatted seconds.\n<ul>\n<li>If <code>minutes</code> is <code>\"numeric\"</code> or <code>\"2-digit\"</code>, possible values are <code>\"numeric\"</code> and <code>\"2-digit\"</code>, and <code>\"numeric\"</code> is normalized to <code>\"2-digit\"</code>; the default is <code>\"numeric\"</code>.</li>\n<li>Otherwise, possible values are <code>\"long\"</code>, <code>\"short\"</code>, <code>\"narrow\"</code>, <code>\"numeric\"</code>, and <code>\"2-digit\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"numeric\"</code> otherwise.</li>\n</ul>\n</dd>\n<dt id=\"secondsdisplay\"><a href=\"#secondsdisplay\"><code>secondsDisplay</code></a></dt>\n<dd>\n<p>Whether to always display seconds, or only if nonzero. Possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>seconds</code> is unspecified and <code>options.style</code> is not <code>\"digital\"</code>, and <code>\"always\"</code> otherwise.\n</dd>\n<dt id=\"milliseconds\"><a href=\"#milliseconds\"><code>milliseconds</code></a></dt>\n<dd>\n<p>The style of the formatted milliseconds.\n<ul>\n<li>If <code>seconds</code> is <code>\"numeric\"</code> or <code>\"2-digit\"</code>, the only possible value is <code>\"numeric\"</code>; the default is <code>\"numeric\"</code>.</li>\n<li>Otherwise, possible values are <code>\"long\"</code>, <code>\"short\"</code>, <code>\"narrow\"</code>, and <code>\"numeric\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"numeric\"</code> otherwise.</li>\n</ul>\n</dd>\n<dt id=\"millisecondsdisplay\"><a href=\"#millisecondsdisplay\"><code>millisecondsDisplay</code></a></dt>\n<dd>\n<p>Whether to always display milliseconds, or only if nonzero.\n<ul>\n<li>If <code>seconds</code> is <code>\"numeric\"</code> or <code>\"2-digit\"</code>, the only possible value is <code>\"auto\"</code>; the default is only <code>\"auto\"</code> when <code>milliseconds</code> is unspecified.</li>\n<li>Otherwise, possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>milliseconds</code> is unspecified, and <code>\"always\"</code> otherwise.</li>\n</ul>\n</dd>\n<dt id=\"microseconds\"><a href=\"#microseconds\"><code>microseconds</code></a></dt>\n<dd>\n<p>The style of the formatted microseconds.\n<ul>\n<li>If <code>milliseconds</code> is <code>\"numeric\"</code>, the only possible value is <code>\"numeric\"</code>; the default is <code>\"numeric\"</code>.</li>\n<li>Otherwise, possible values are <code>\"long\"</code>, <code>\"short\"</code>, <code>\"narrow\"</code>, and <code>\"numeric\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"numeric\"</code> otherwise.</li>\n</ul>\n</dd>\n<dt id=\"microsecondsdisplay\"><a href=\"#microsecondsdisplay\"><code>microsecondsDisplay</code></a></dt>\n<dd>\n<p>Whether to always display microseconds, or only if nonzero.\n<ul>\n<li>If <code>milliseconds</code> is <code>\"numeric\"</code>, the only possible value is <code>\"auto\"</code>; the default is only <code>\"auto\"</code> when <code>microseconds</code> is unspecified.</li>\n<li>Otherwise, possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>microseconds</code> is unspecified, and <code>\"always\"</code> otherwise.</li>\n</ul>\n</dd>\n<dt id=\"nanoseconds\"><a href=\"#nanoseconds\"><code>nanoseconds</code></a></dt>\n<dd>\n<p>The style of the formatted nanoseconds.\n<ul>\n<li>If <code>microseconds</code> is <code>\"numeric\"</code>, the only possible value is <code>\"numeric\"</code>; the default is <code>\"numeric\"</code>.</li>\n<li>Otherwise, possible values are <code>\"long\"</code>, <code>\"short\"</code>, <code>\"narrow\"</code>, and <code>\"numeric\"</code>; the default is <code>options.style</code> if it's not <code>\"digital\"</code>, and <code>\"numeric\"</code> otherwise.</li>\n</ul>\n</dd>\n<dt id=\"nanosecondsdisplay\"><a href=\"#nanosecondsdisplay\"><code>nanosecondsDisplay</code></a></dt>\n<dd>\n<p>Whether to always display nanoseconds, or only if nonzero.\n<ul>\n<li>If <code>microseconds</code> is <code>\"numeric\"</code>, the only possible value is <code>\"auto\"</code>; the default is only <code>\"auto\"</code> when <code>nanoseconds</code> is unspecified.</li>\n<li>Otherwise, possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"auto\"</code> if <code>nanoseconds</code> is unspecified, and <code>\"always\"</code> otherwise.</li>\n</ul>\n</dd>\n<dt id=\"fractionaldigits\"><a href=\"#fractionaldigits\"><code>fractionalDigits</code></a></dt>\n<dd>\n<p>Number of how many fractional second digits to display in the output. Possible values are from <code>0</code> to <code>9</code>; the default is <code>undefined</code> (include as many fractional digits as necessary).\n</dd>\n</dl>"
      },
      "throws": {
        "RangeError": "Thrown if <code>locales</code> or <code>options</code> contain invalid values."
      }
    },
    "intl.durationformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/format",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "129",
        "ChromeAndroid": "129",
        "Edge": "129",
        "Firefox": "136",
        "FirefoxAndroid": "136",
        "Opera": "115",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "23.0.0",
        "Deno": "1.46"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-04"
      },
      "doc": "The <strong><code>format()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> instances formats a duration according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> object.",
      "parameters": {
        "duration": "The duration object to be formatted. It should include some or all of the following properties: <code>years</code>, <code>months</code>, <code>weeks</code>, <code>days</code>, <code>hours</code>, <code>minutes</code>, <code>seconds</code>, <code>milliseconds</code>, <code>microseconds</code>, <code>nanoseconds</code>. Each property's value should be an integer, and their signs should be consistent. This can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object; see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> documentation for more information about these properties."
      },
      "returns": "A string representing the given <code>duration</code> formatted according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> object.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>format()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>format()</code> to hardcoded constants.\n</div>"
    },
    "intl.durationformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "129",
        "ChromeAndroid": "129",
        "Edge": "129",
        "Firefox": "136",
        "FirefoxAndroid": "136",
        "Opera": "115",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "23.0.0",
        "Deno": "1.46"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-04"
      },
      "doc": "The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> instances returns an array of objects representing each part of the formatted string that would be returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/format\"><code>format()</code></a>. It is useful for building custom strings from the locale-specific tokens.",
      "parameters": {
        "duration": "The duration object to be formatted. It should include some or all of the following properties: <code>years</code>, <code>months</code>, <code>weeks</code>, <code>days</code>, <code>hours</code>, <code>minutes</code>, <code>seconds</code>, <code>milliseconds</code>, <code>microseconds</code>, <code>nanoseconds</code>. Each property's value should be an integer, and their signs should be consistent. This can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object; see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> documentation for more information about these properties."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted duration in parts. Each object has two or three properties, <code>type</code>, <code>value</code>, and optionally <code>unit</code>, each containing a string. The string concatenation of <code>value</code>, in the order provided, will result in the same string as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/format\"><code>format()</code></a>. The parts can be thought of as directly obtained from calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts\"><code>Intl.NumberFormat.prototype.formatToParts()</code></a> with the numeric value and their respective units. All tokens that are produced by the <code>NumberFormat</code> have an additional <code>unit</code> property, which is the singular form of the input <code>unit</code>; this is for programmatic usage and is not localized. The localized unit is output as a separate <code>unit</code> token as part of the <code>NumberFormat</code> result. The parts from each duration unit are concatenated together in the same fashion as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/formatToParts\"><code>Intl.ListFormat.prototype.formatToParts()</code></a> with <code>{ type: \"unit\" }</code>, so additional literal tokens are inserted."
    },
    "intl.durationformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "129",
        "ChromeAndroid": "129",
        "Edge": "129",
        "Firefox": "136",
        "FirefoxAndroid": "136",
        "Opera": "115",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "23.0.0",
        "Deno": "1.46"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-04"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> instances returns a new object with properties reflecting the options computed during initialization of this <code>DurationFormat</code> object.",
      "returns": "A new object with properties reflecting the options computed during the initialization of this <code>DurationFormat</code> object. The object has the following properties, in the order they are listed:\n<dl>\n<dt id=\"locale\"><a href=\"#locale\"><code>locale</code></a></dt>\n<dd>\n<p>The BCP 47 language tag for the locale actually used, determined by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">locale negotiation</a> process. Only the <code>nu</code> Unicode extension key, if requested, may be included in the output.\n</dd>\n<dt id=\"numberingsystem\"><a href=\"#numberingsystem\"><code>numberingSystem</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, or using the Unicode extension key <code>\"nu\"</code>, with default filled in as needed. It is a supported <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\">numbering system</a> for this locale. The default is locale dependent.\n</dd>\n<dt id=\"style\"><a href=\"#style\"><code>style</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"long\"</code>, <code>\"short\"</code>, <code>\"narrow\"</code>, or <code>\"digital\"</code>. The default is <code>\"short\"</code>.\n</dd>\n<dt id=\"years\"><a href=\"#years\"><code>years</code>, <code>yearsDisplay</code>, <code>months</code>, <code>monthsDisplay</code>, <code>weeks</code>, <code>weeksDisplay</code>, <code>days</code>, <code>daysDisplay</code>, <code>hours</code>, <code>hoursDisplay</code>, <code>minutes</code>, <code>minutesDisplay</code>, <code>seconds</code>, <code>secondsDisplay</code>, <code>milliseconds</code>, <code>millisecondsDisplay</code>, <code>nanoseconds</code>, <code>nanosecondsDisplay</code></a></dt>\n<dd>\n<p>The values provided for these properties in the <code>options</code> argument, with defaults filled in as needed. For the valid values and defaults for each, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/DurationFormat#options\"><code>options</code></a> argument of the constructor.\n</dd>\n<dt id=\"fractionaldigits\"><a href=\"#fractionaldigits\"><code>fractionalDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument. It is only present if specified in <code>options</code>. It is an integer from 0 to 9, inclusive.\n</dd>\n</dl>"
    },
    "intl.durationformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "129",
        "ChromeAndroid": "129",
        "Edge": "129",
        "Firefox": "136",
        "FirefoxAndroid": "136",
        "Opera": "115",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "23.0.0",
        "Deno": "1.46"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-04"
      },
      "doc": "The <strong><code>Intl.DurationFormat.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in duration formatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page.\n</dd>\n</dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in duration formatting without having to fall back to the runtime's default locale."
    },
    "intl.getcanonicallocales": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/getcanonicallocales",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "16",
        "Firefox": "48",
        "FirefoxAndroid": "56",
        "Opera": "41",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-10-17",
        "highDate": "2020-04-17"
      },
      "doc": "The <strong><code>Intl.getCanonicalLocales()</code></strong> static method returns an array\ncontaining the canonical locale names. Duplicates will be omitted and elements will be\nvalidated as structurally valid language tags.",
      "parameters": {
        "locales": "A list of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values for which to get the canonical locale names."
      },
      "returns": "An array containing the canonical locale names."
    },
    "intl.listformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>Intl.ListFormat</code></strong> object enables language-sensitive list formatting."
    },
    "intl.listformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/format",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>format()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\"><code>Intl.ListFormat</code></a> instances returns a string with a\nlanguage-specific representation of the list.",
      "parameters": {
        "list": "An iterable object, such as an Array, containing strings. Omitting it results in formatting the empty array, which could be slightly confusing, so it is advisable to always explicitly pass a list."
      },
      "returns": "A language-specific formatted string representing the elements of the list.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>format()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>format()</code> to hardcoded constants.\n</div>"
    },
    "intl.listformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\"><code>Intl.ListFormat</code></a> instances returns an array of objects representing each part of the formatted string that would be returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format\"><code>format()</code></a>. It is useful for building custom strings from the locale-specific tokens.",
      "parameters": {
        "list": "An iterable object, such as an Array, containing strings. Omitting it results in formatting the empty array, which could be slightly confusing, so it is advisable to always explicitly pass a list."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted list in parts. Each object has two properties, <code>type</code> and <code>value</code>, each containing a string. The string concatenation of <code>value</code>, in the order provided, will result in the same string as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format\"><code>format()</code></a>. The <code>type</code> may be one of the following:\n<dl>\n<dt id=\"literal\"><a href=\"#literal\"><code>literal</code></a></dt>\n<dd>\n<p>Any string that's a part of the format pattern; for example <code>\", \"</code>, <code>\", and\"</code>, etc.\n</dd>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>An element of the list, exactly as provided.\n</dd>\n</dl>"
    },
    "intl.listformat.listformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/listformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>Intl.ListFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\"><code>Intl.ListFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance, or an array of such locale identifiers. The runtime's default locale is used when <code>undefined</code> is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Locale identification and negotiation</a>.\n</dd>\n<dt id=\"type\"><a href=\"#type\"><code>type</code></a></dt>\n<dd>\n<p>Indicates the type of grouping. Possible values are:\n<dl>\n<dt id=\"conjunction\"><a href=\"#conjunction\"><code>\"conjunction\"</code> (default)</a></dt>\n<dd>\n<p>For \"and\"-based grouping of the list items: \"A, B, and C\"\n</dd>\n<dt id=\"disjunction\"><a href=\"#disjunction\"><code>\"disjunction\"</code></a></dt>\n<dd>\n<p>For \"or\"-based grouping of the list items: \"A, B, or C\"\n</dd>\n<dt id=\"unit\"><a href=\"#unit\"><code>\"unit\"</code></a></dt>\n<dd>\n<p>For grouping the list items as a compound unit (neither \"and\"-based nor \"or\"-based): \"A, B, C\"\n</dd>\n</dl>\n</dd>\n<dt id=\"style\"><a href=\"#style\"><code>style</code></a></dt>\n<dd>\n<p>The grouping style (for example, whether list separators and conjunctions are included). Possible values are:\n<dl>\n<dt id=\"long\"><a href=\"#long\"><code>\"long\"</code> (default)</a></dt>\n<dd>\n<p>The typical list format. For example, \"A, B, and C\"\n</dd>\n<dt id=\"short\"><a href=\"#short\"><code>\"short\"</code></a></dt>\n<dd>\n<p>The spacing, the length or presence of a conjunction, and the separators may change. Usually, you would want the input elements to be abbreviated too. For example, \"A, B, &amp; C\"\n</dd>\n<dt id=\"narrow\"><a href=\"#narrow\"><code>\"narrow\"</code></a></dt>\n<dd>\n<p>Where possible, the list format is further abbreviated, so that the output is as short as possible. For example, \"A, B, C\"\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "throws": {
        "RangeError": "Thrown if <code>locales</code> or <code>options</code> contain invalid values."
      }
    },
    "intl.listformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\"><code>Intl.ListFormat</code></a> instances returns a new object with properties reflecting the options computed during initialization of this <code>ListFormat</code> object.",
      "returns": "A new object with properties reflecting the options computed during the initialization of this <code>ListFormat</code> object. The object has the following properties, in the order they are listed:\n<dl>\n<dt id=\"locale\"><a href=\"#locale\"><code>locale</code></a></dt>\n<dd>\n<p>The BCP 47 language tag for the locale actually used, determined by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">locale negotiation</a> process. No Unicode extension key will be included in the output.\n</dd>\n<dt id=\"type\"><a href=\"#type\"><code>type</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"conjunction\"</code>, <code>\"disjunction\"</code>, or <code>\"unit\"</code>. The default is <code>\"conjunction\"</code>.\n</dd>\n<dt id=\"style\"><a href=\"#style\"><code>style</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"long\"</code>, <code>\"short\"</code>, or <code>\"narrow\"</code>. The default is <code>\"long\"</code>.\n</dd>\n</dl>"
    },
    "intl.listformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>Intl.ListFormat.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in list formatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page.\n</dd>\n</dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in list formatting without having to fall back to the runtime's default locale."
    },
    "intl.locale": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>Intl.Locale</code></strong> object is a standard built-in property of the Intl object that represents a Unicode locale identifier."
    },
    "intl.locale.basename": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/basename",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>baseName</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a substring of this locale's string representation, containing core information about this locale, including the language, and the script and region if available."
    },
    "intl.locale.calendar": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/calendar",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>calendar</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the calendar type for this locale."
    },
    "intl.locale.casefirst": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/casefirst",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>caseFirst</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns whether case is taken into account for this locale's collation rules."
    },
    "intl.locale.collation": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/collation",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>collation</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the <a href=\"https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_Collation\" class=\"external\" target=\"_blank\">collation type</a> for this locale, which is used to order strings according to the locale's rules."
    },
    "intl.locale.getcalendars": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/getcalendars",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "130",
        "ChromeAndroid": "130",
        "Edge": "130",
        "Opera": "115",
        "Safari": "17",
        "SafariIOS": "17",
        "Deno": "1.19"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>getCalendars()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of one or more unique calendar identifiers for this locale.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn some versions of some browsers, this method was implemented as an accessor property called <code>calendars</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.calendars === locale.calendars</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing all calendars commonly used for the <code>Locale</code>, sorted in descending preference. If the <code>Locale</code> already has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar\"><code>calendar</code></a>, then the returned array contains that single value.\n<p>For a list of supported calendar types, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types\"><code>Intl.supportedValuesOf()</code></a>."
    },
    "intl.locale.getcollations": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/getcollations",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "130",
        "ChromeAndroid": "130",
        "Edge": "130",
        "Opera": "115",
        "Safari": "17",
        "SafariIOS": "17",
        "Deno": "1.19"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>getCollations()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of one or more <a href=\"https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_collation\" class=\"external\" target=\"_blank\">collation types</a> for this locale.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn some versions of some browsers, this method was implemented as an accessor property called <code>collations</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.collations === locale.collations</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing all collation types commonly used for the <code>Locale</code>, sorted in alphabetical order, with the <code>standard</code> and <code>search</code> values always excluded. If the <code>Locale</code> already has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation\"><code>collation</code></a>, then the returned array contains that single value.\n<p>For a list of supported collation types, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_collation_types\"><code>Intl.supportedValuesOf()</code></a>."
    },
    "intl.locale.gethourcycles": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/gethourcycles",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "130",
        "ChromeAndroid": "130",
        "Edge": "130",
        "Opera": "115",
        "Safari": "17",
        "SafariIOS": "17",
        "Deno": "1.19"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>getHourCycles()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of one or more unique hour cycle identifiers for this locale.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn some versions of some browsers, this method was implemented as an accessor property called <code>hourCycles</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.hourCycles === locale.hourCycles</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing all hour cycle types commonly used for the <code>Locale</code>, sorted in descending preference. If the <code>Locale</code> already has an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle\"><code>hourCycle</code></a>, then the returned array contains that single value.\n<p>Below is a list of supported hour cycle types."
    },
    "intl.locale.getnumberingsystems": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/getnumberingsystems",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "130",
        "ChromeAndroid": "130",
        "Edge": "130",
        "Opera": "115",
        "Safari": "17",
        "SafariIOS": "17",
        "Deno": "1.19"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>getNumberingSystems()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of one or more unique <a href=\"https://en.wikipedia.org/wiki/Numeral_system\" class=\"external\" target=\"_blank\">numbering system</a> identifiers for this locale.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn some versions of some browsers, this method was implemented as an accessor property called <code>numberingSystems</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.numberingSystems === locale.numberingSystems</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing all numbering systems commonly used for the <code>Locale</code>, sorted in descending preference. If the <code>Locale</code> already has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem\"><code>numberingSystem</code></a>, then the returned array contains that single value.\n<p>For a list of supported numbering system types, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\"><code>Intl.supportedValuesOf()</code></a>."
    },
    "intl.locale.gettextinfo": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/gettextinfo",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "130",
        "ChromeAndroid": "130",
        "Edge": "130",
        "Opera": "115",
        "Safari": "17",
        "SafariIOS": "17"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>getTextInfo()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the ordering of characters indicated by either <code>ltr</code> (left-to-right) or by <code>rtl</code> (right-to-left) for this locale.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn some versions of some browsers, this method was implemented as an accessor property called <code>textInfo</code>. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of <code>locale.textInfo === locale.textInfo</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An object representing text typesetting information associated with the Locale data specified in <a href=\"https://www.unicode.org/reports/tr35/tr35-general.html#Layout_Elements\" class=\"external\" target=\"_blank\">UTS 35's Layouts Elements</a>. It has the following properties:\n<dl>\n<dt id=\"direction\"><a href=\"#direction\"><code>direction</code></a></dt>\n<dd>\n<p>A string indicating the direction of text for the locale. Can be either <code>\"ltr\"</code> (left-to-right) or <code>\"rtl\"</code> (right-to-left).\n</dd>\n</dl>"
    },
    "intl.locale.gettimezones": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/gettimezones",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "130",
        "ChromeAndroid": "130",
        "Edge": "130",
        "Opera": "115",
        "Safari": "17",
        "SafariIOS": "17",
        "Deno": "1.19"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>getTimeZones()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of supported time zones for this locale.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn some versions of some browsers, this method was implemented as an accessor property called <code>timeZones</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.timeZones === locale.timeZones</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing supported time zones for the associated <code>Locale</code>, where each value is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">IANA time zone canonical name</a>, sorted in alphabetical order. If the locale identifier does not contain a region subtag, the returned value is <code>undefined</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThe standardization of <code>Temporal</code> requires browsers to always return the primary identifier in the IANA database, which may change over time. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information.\n</div>"
    },
    "intl.locale.getweekinfo": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/getweekinfo",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "130",
        "ChromeAndroid": "130",
        "Edge": "130",
        "Opera": "115",
        "Safari": "17",
        "SafariIOS": "17",
        "Deno": "2.1"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>getWeekInfo()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a <code>weekInfo</code> object with the properties <code>firstDay</code>, <code>weekend</code> and <code>minimalDays</code> for this locale.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn some versions of some browsers, this method was implemented as an accessor property called <code>weekInfo</code>. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of <code>locale.weekInfo === locale.weekInfo</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An object representing week information associated with the Locale data specified in <a href=\"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements\" class=\"external\" target=\"_blank\">UTS 35's Week Elements</a>. It has the following properties:\n<dl>\n<dt id=\"firstday\"><a href=\"#firstday\"><code>firstDay</code></a></dt>\n<dd>\n<p>An integer between 1 (Monday) and 7 (Sunday) indicating the first day of the week for the locale. Commonly 1, 5, 6, or 7.\n</dd>\n<dt id=\"weekend\"><a href=\"#weekend\"><code>weekend</code></a></dt>\n<dd>\n<p>An array of integers between 1 and 7 indicating the weekend days for the locale. This is usually continuous because UTS 35 stores <code>weekendStart</code> and <code>weekendEnd</code> instead.\n</dd>\n<dt id=\"minimaldays\"><a href=\"#minimaldays\"><code>minimalDays</code></a></dt>\n<dd>\n<p>An integer between 1 and 7 (commonly 1 and 4) indicating the minimal days required in the first week of a month or year, for week-of-year or week-of-month calculations (e.g., The 20th week of the year). For example, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" class=\"external\" target=\"_blank\">ISO 8601</a> calendar, the first week of a year must have at least 4 days in this year, so if January 1 is a Friday, Saturday, or Sunday, it will be numbered as part of the last week of the previous year.\n</dd>\n</dl>"
    },
    "intl.locale.hourcycle": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/hourcycle",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>hourCycle</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the hour cycle type for this locale."
    },
    "intl.locale.language": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/language",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>language</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the language associated with this locale."
    },
    "intl.locale.locale": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/locale",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>Intl.Locale()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> objects.",
      "parameters": {
        "tag": "The Unicode locale identifier string. For the syntax of locale identifier strings, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">Intl main page</a>. Note that the <code>Intl.Locale</code> constructor, unlike most other <code>Intl</code> constructors, does not accept an array of locales or <code>undefined</code>.",
        "options": "An object that contains configuration for the Locale. Option values here take priority over extension keys in the locale identifier. Possible properties are:\n<dl>\n<dt id=\"language\"><a href=\"#language\"><code>language</code></a></dt>\n<dd>\n<p>The language. Any syntactically valid string following the <a href=\"https://unicode.org/reports/tr35/#unicode_language_subtag\" class=\"external\" target=\"_blank\"><code>unicode_language_subtag</code></a> grammar (2–3 or 5–8 letters) is accepted, but the implementation only recognizes certain kinds.\n</dd>\n<dt id=\"script\"><a href=\"#script\"><code>script</code></a></dt>\n<dd>\n<p>The script. Any syntactically valid string following the <a href=\"https://unicode.org/reports/tr35/#unicode_script_subtag\" class=\"external\" target=\"_blank\"><code>unicode_script_subtag</code></a> grammar (4 letters) is accepted, but the implementation only recognizes certain kinds.\n</dd>\n<dt id=\"region\"><a href=\"#region\"><code>region</code></a></dt>\n<dd>\n<p>The region. Any syntactically valid string following the <a href=\"https://unicode.org/reports/tr35/#unicode_region_subtag\" class=\"external\" target=\"_blank\"><code>unicode_region_subtag</code></a> grammar (either 2 letters or 3 digits) is accepted, but the implementation only recognizes certain kinds.\n</dd>\n<dt id=\"calendar\"><a href=\"#calendar\"><code>calendar</code></a></dt>\n<dd>\n<p>The calendar. Any syntactically valid string following the <a href=\"https://unicode.org/reports/tr35/#Unicode_locale_identifier\" class=\"external\" target=\"_blank\"><code>type</code></a> grammar (one or more segments of 3–8 alphanumerals, joined by hyphens) is accepted, but the implementation only recognizes certain kinds, which are listed in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types\"><code>Intl.supportedValuesOf()</code></a>.\n</dd>\n<dt id=\"collation\"><a href=\"#collation\"><code>collation</code></a></dt>\n<dd>\n<p>The collation. Any syntactically valid string following the <code>type</code> grammar is accepted, but the implementation only recognizes certain kinds, which are listed in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_collation_types\"><code>Intl.supportedValuesOf()</code></a>.\n</dd>\n<dt id=\"numberingsystem\"><a href=\"#numberingsystem\"><code>numberingSystem</code></a></dt>\n<dd>\n<p>The numbering system. Any syntactically valid string following the <code>type</code> grammar is accepted, but the implementation only recognizes certain kinds, which are listed in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\"><code>Intl.supportedValuesOf()</code></a>.\n</dd>\n<dt id=\"casefirst\"><a href=\"#casefirst\"><code>caseFirst</code></a></dt>\n<dd>\n<p>The case-first sort option. Possible values are <code>\"upper\"</code>, <code>\"lower\"</code>, or <code>\"false\"</code>.\n</dd>\n<dt id=\"hourcycle\"><a href=\"#hourcycle\"><code>hourCycle</code></a></dt>\n<dd>\n<p>The hour cycle. Possible values are <code>\"h23\"</code>, <code>\"h12\"</code>, <code>\"h11\"</code>, or the practically unused <code>\"h24\"</code>, which are explained in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles#supported_hour_cycle_types\"><code>Intl.Locale.prototype.getHourCycles</code></a>\n</dd>\n<dt id=\"numeric\"><a href=\"#numeric\"><code>numeric</code></a></dt>\n<dd>\n<p>The numeric sort option. A boolean.\n</dd>\n</dl>"
      }
    },
    "intl.locale.maximize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/maximize",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>maximize()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances gets the\nmost likely values for the language, script, and region of this locale based on\nexisting values.",
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance whose <code>baseName</code> property returns\nthe result of the <a href=\"https://www.unicode.org/reports/tr35/#Likely_Subtags\" class=\"external\" target=\"_blank\">Add Likely Subtags</a> algorithm executed against <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName\"><code>locale.baseName</code></a></em>."
    },
    "intl.locale.minimize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/minimize",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>minimize()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances attempts to\nremove information about this locale that would be added by calling\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize\"><code>maximize()</code></a>.",
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance whose <code>baseName</code> property returns\nthe result of the <a href=\"https://www.unicode.org/reports/tr35/#Likely_Subtags\" class=\"external\" target=\"_blank\">Remove Likely Subtags</a> algorithm\nexecuted against <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName\"><code>locale.baseName</code></a></em>."
    },
    "intl.locale.numberingsystem": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/numberingsystem",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>numberingSystem</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the <a href=\"https://en.wikipedia.org/wiki/Numeral_system\" class=\"external\" target=\"_blank\">numeral system</a> for this locale."
    },
    "intl.locale.numeric": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/numeric",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>numeric</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns whether this locale has special collation handling for numeric characters."
    },
    "intl.locale.region": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/region",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>region</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the region of the world (usually a country) associated with this locale."
    },
    "intl.locale.script": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/script",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>script</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the script used for writing the particular language used in this locale."
    },
    "intl.locale.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "FirefoxAndroid": "79",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns this Locale's full <a href=\"https://www.unicode.org/reports/tr35/#Unicode_locale_identifier\" class=\"external\" target=\"_blank\">locale identifier string</a>.",
      "returns": "The <em>locale</em>'s Unicode locale identifier string."
    },
    "intl.numberformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl.NumberFormat</code></strong> object enables language-sensitive number formatting."
    },
    "intl.numberformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/format",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>format()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances formats a number according to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters\">locale and formatting options</a> of this <code>Intl.NumberFormat</code> object.",
      "parameters": {
        "number": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>, or string, to format. Strings are parsed in the same way as in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">number conversion</a>, except that <code>format()</code> will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number."
      },
      "returns": "A string representing the given <code>number</code> formatted according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> object.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>format()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>format()</code> to hardcoded constants.\n</div>"
    },
    "intl.numberformat.formatrange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/formatrange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "106",
        "ChromeAndroid": "106",
        "Edge": "106",
        "Firefox": "116",
        "FirefoxAndroid": "116",
        "Opera": "92",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "19.0.0"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-08-01"
      },
      "doc": "The <strong><code>formatRange()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances formats a range of numbers according to the locale and formatting options of this <code>Intl.NumberFormat</code> object.",
      "parameters": {
        "startRange": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>, or string, to format. Strings are parsed in the same way as in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">number conversion</a>, except that <code>formatRange()</code> will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number.",
        "endRange": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>, or string, to format."
      },
      "returns": "A string representing the given range of numbers formatted according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> object.",
      "throws": {
        "RangeError": "Thrown if either <code>startRange</code> or <code>endRange</code> is <code>NaN</code> or an inconvertible string.",
        "TypeError": "Thrown if either <code>startRange</code> or <code>endRange</code> is undefined."
      }
    },
    "intl.numberformat.formatrangetoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/formatrangetoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "106",
        "ChromeAndroid": "106",
        "Edge": "106",
        "Firefox": "116",
        "FirefoxAndroid": "116",
        "Opera": "92",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "19.0.0"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-08-01"
      },
      "doc": "The <strong><code>formatRangeToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the locale-specific tokens from which it is possible to build custom strings while preserving the locale-specific parts. This makes it possible to provide locale-aware custom formatting ranges of number strings.",
      "parameters": {
        "startRange": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>, or string, to format. Strings are parsed in the same way as in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">number conversion</a>, except that <code>formatRangeToParts()</code> will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number.",
        "endRange": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>, or string, to format."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted range in parts. Each object has three properties, <code>type</code>, <code>value</code>, and <code>source</code>, each containing a string. The string concatenation of <code>value</code>, in the order provided, will result in the same string as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange\"><code>formatRange()</code></a>. The <code>type</code> may have the same values as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts\"><code>formatToParts()</code></a>. The <code>source</code> can be one of the following:\n<dl>\n<dt id=\"startrange_2\"><a href=\"#startrange_2\"><code>startRange</code></a></dt>\n<dd>\n<p>The token is a part of the start number.\n</dd>\n<dt id=\"endrange_2\"><a href=\"#endrange_2\"><code>endRange</code></a></dt>\n<dd>\n<p>The token is a part of the end number.\n</dd>\n<dt id=\"shared\"><a href=\"#shared\"><code>shared</code></a></dt>\n<dd>\n<p>The token is shared between the start and end; for example, the currency symbol. All literals that are part of the range pattern itself, such as the <code>\"–\"</code> separator, are also marked as <code>shared</code>.\n</dd>\n</dl>\n<p>If the start and end numbers are equivalent, then the output has the same list of tokens as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts\"><code>formatToParts()</code></a> on the start number, with all tokens marked as <code>source: \"shared\"</code>.",
      "throws": {
        "RangeError": "Thrown if either <code>startRange</code> or <code>endRange</code> is <code>NaN</code> or an inconvertible string.",
        "TypeError": "Thrown if either <code>startRange</code> or <code>endRange</code> is undefined."
      }
    },
    "intl.numberformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "64",
        "ChromeAndroid": "64",
        "Edge": "12",
        "Firefox": "58",
        "FirefoxAndroid": "58",
        "Opera": "51",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2019-09-19",
        "highDate": "2022-03-19"
      },
      "doc": "The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances returns an array of objects representing each part of the formatted string that would be returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\"><code>format()</code></a>. It is useful for building custom strings from the locale-specific tokens.",
      "parameters": {
        "number": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>, or string, to format. Strings are parsed in the same way as in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">number conversion</a>, except that <code>formatToParts()</code> will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted number in parts. Each object has two properties, <code>type</code> and <code>value</code>, each containing a string. The string concatenation of <code>value</code>, in the order provided, will result in the same string as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\"><code>format()</code></a>. The <code>type</code> may be one of the following:\n<dl>\n<dt id=\"literal\"><a href=\"#literal\"><code>literal</code></a></dt>\n<dd>\n<p>Any string that's a part of the format pattern; for example <code>\" \"</code>. Note that common tokens like the decimal separator or the plus/minus signs have their own token types.\n</dd>\n<dt id=\"integer\"><a href=\"#integer\"><code>integer</code></a></dt>\n<dd>\n<p>The integral part of the number, or a segment of it if using grouping (controlled by <code>options.useGrouping</code>).\n</dd>\n<dt id=\"group\"><a href=\"#group\"><code>group</code></a></dt>\n<dd>\n<p>The group separator string, such as <code>\",\"</code>. Only present when using grouping (controlled by <code>options.useGrouping</code>).\n</dd>\n<dt id=\"decimal\"><a href=\"#decimal\"><code>decimal</code></a></dt>\n<dd>\n<p>The decimal separator string, such as <code>\".\"</code>. Only present when <code>fraction</code> is present.\n</dd>\n<dt id=\"fraction\"><a href=\"#fraction\"><code>fraction</code></a></dt>\n<dd>\n<p>The fractional part of the number.\n</dd>\n<dt id=\"compact\"><a href=\"#compact\"><code>compact</code></a></dt>\n<dd>\n<p>The compact exponent, such as <code>\"M\"</code> or <code>\"thousands\"</code>. Only present when <code>options.notation</code> is <code>\"compact\"</code>. The form (<code>\"short\"</code> or <code>\"long\"</code>) can be controlled via <code>options.compactDisplay</code>.\n</dd>\n<dt id=\"exponentseparator\"><a href=\"#exponentseparator\"><code>exponentSeparator</code></a></dt>\n<dd>\n<p>The exponent separator, such as <code>\"E\"</code>. Only present when <code>options.notation</code> is <code>\"scientific\"</code> or <code>\"engineering\"</code>.\n</dd>\n<dt id=\"exponentminussign\"><a href=\"#exponentminussign\"><code>exponentMinusSign</code></a></dt>\n<dd>\n<p>The exponent minus sign string, such as <code>\"-\"</code>. Only present when <code>options.notation</code> is <code>\"scientific\"</code> or <code>\"engineering\"</code> and the exponent is negative.\n</dd>\n<dt id=\"exponentinteger\"><a href=\"#exponentinteger\"><code>exponentInteger</code></a></dt>\n<dd>\n<p>The exponent's integer value. Only present when <code>options.notation</code> is <code>\"scientific\"</code> or <code>\"engineering\"</code>.\n</dd>\n<dt id=\"nan\"><a href=\"#nan\"><code>nan</code></a></dt>\n<dd>\n<p>A string representing <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, such as <code>\"NaN\"</code>. This is the sole token representing the number itself when the number is <code>NaN</code>.\n</dd>\n<dt id=\"infinity\"><a href=\"#infinity\"><code>infinity</code></a></dt>\n<dd>\n<p>A string representing <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> or <code>-Infinity</code>, such as <code>\"∞\"</code>. This is the sole token representing the number itself when the number is <code>Infinity</code> or <code>-Infinity</code>.\n</dd>\n<dt id=\"plussign\"><a href=\"#plussign\"><code>plusSign</code></a></dt>\n<dd>\n<p>The plus sign, such as <code>\"+\"</code>.\n</dd>\n<dt id=\"minussign\"><a href=\"#minussign\"><code>minusSign</code></a></dt>\n<dd>\n<p>The minus sign, such as <code>\"-\"</code>.\n</dd>\n<dt id=\"percentsign\"><a href=\"#percentsign\"><code>percentSign</code></a></dt>\n<dd>\n<p>The percent sign, such as <code>\"%\"</code>. Only present when <code>options.style</code> is <code>\"percent\"</code>.\n</dd>\n<dt id=\"unit\"><a href=\"#unit\"><code>unit</code></a></dt>\n<dd>\n<p>The unit string, such as <code>\"l\"</code> or <code>\"litres\"</code>. Only present when <code>options.style</code> is <code>\"unit\"</code>. The form (<code>\"short\"</code>, <code>\"narrow\"</code>, or <code>\"long\"</code>) can be controlled via <code>options.unitDisplay</code>.\n</dd>\n<dt id=\"currency\"><a href=\"#currency\"><code>currency</code></a></dt>\n<dd>\n<p>The currency string, such as <code>\"$\"</code>, <code>\"€\"</code>, <code>\"Dollar\"</code>, or <code>\"Euro\"</code>. Only present when <code>options.style</code> is <code>\"currency\"</code>. The form (<code>\"code\"</code>, <code>\"symbol\"</code>, <code>\"narrowSymbol\"</code>, or <code>\"name\"</code>) can be controlled via <code>options.currencyDisplay</code>.\n</dd>\n<dt id=\"unknown\"><a href=\"#unknown\"><code>unknown</code></a></dt>\n<dd>\n<p>Reserved for any token that's not recognized as one of the above; should be rarely encountered.\n</dd>\n</dl>"
    },
    "intl.numberformat.numberformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/numberformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl.NumberFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance, or an array of such locale identifiers. The runtime's default locale is used when <code>undefined</code> is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.\n<p>The following Unicode extension key is allowed:\n<dl>\n<dt id=\"nu\"><a href=\"#nu\"><code>nu</code></a></dt>\n<dd>\n<p>See <a href=\"#numberingsystem\"><code>numberingSystem</code></a>.\n</dd>\n</dl>\n<p>This key can also be set with <code>options</code> (as listed below). When both are set, the <code>options</code> property takes precedence.",
        "options": "An object. For ease of reading, the property list is broken into sections based on their purposes, including <a href=\"#locale_options\">locale options</a>, <a href=\"#style_options\">style options</a>, <a href=\"#digit_options\">digit options</a>, and <a href=\"#other_options\">other options</a>.",
        "localeMatcher": "The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>.\nFor information about this option, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Locale identification and negotiation</a>.",
        "numberingSystem": "The numbering system to use for number formatting, such as <code>\"arab\"</code>, <code>\"hans\"</code>, <code>\"mathsans\"</code>, and so on. For a list of supported numbering system types, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\"><code>Intl.supportedValuesOf()</code></a>. This option can also be set through the <code>nu</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence.",
        "style": "The formatting style to use.\n<dl>\n<dt id=\"decimal\"><a href=\"#decimal\"><code>\"decimal\"</code> (default)</a></dt>\n<dd>\n<p>For plain number formatting.\n</dd>\n<dt id=\"currency\"><a href=\"#currency\"><code>\"currency\"</code></a></dt>\n<dd>\n<p>For currency formatting.\n</dd>\n<dt id=\"percent\"><a href=\"#percent\"><code>\"percent\"</code></a></dt>\n<dd>\n<p>For percent formatting.\n</dd>\n<dt id=\"unit\"><a href=\"#unit\"><code>\"unit\"</code></a></dt>\n<dd>\n<p>For unit formatting.\n</dd>\n</dl>",
        "currency": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as <code>\"USD\"</code> for the US dollar, <code>\"EUR\"</code> for the euro, or <code>\"CNY\"</code> for the Chinese RMB — see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_currency_identifiers\"><code>Intl.supportedValuesOf()</code></a>. There is no default value; if the <code>style</code> is <code>\"currency\"</code>, the <code>currency</code> property must be provided. It is normalized to uppercase.",
        "currencyDisplay": "How to display the currency in currency formatting.\n<dl>\n<dt id=\"code\"><a href=\"#code\"><code>\"code\"</code></a></dt>\n<dd>\n<p>Use the ISO currency code.\n</dd>\n<dt id=\"symbol\"><a href=\"#symbol\"><code>\"symbol\"</code> (default)</a></dt>\n<dd>\n<p>Use a localized currency symbol such as €.\n</dd>\n<dt id=\"narrowsymbol\"><a href=\"#narrowsymbol\"><code>\"narrowSymbol\"</code></a></dt>\n<dd>\n<p>Use a narrow format symbol (\"$100\" rather than \"US$100\").\n</dd>\n<dt id=\"name\"><a href=\"#name\"><code>\"name\"</code></a></dt>\n<dd>\n<p>Use a localized currency name such as <code>\"dollar\"</code>.\n</dd>\n</dl>",
        "currencySign": "In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. Possible values are <code>\"standard\"</code> and <code>\"accounting\"</code>; the default is <code>\"standard\"</code>.",
        "unit": "The unit to use in <code>unit</code> formatting, Possible values are listed in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_unit_identifiers\"><code>Intl.supportedValuesOf()</code></a>. Pairs of simple units can be concatenated with \"-per-\" to make a compound unit. There is no default value; if the <code>style</code> is <code>\"unit\"</code>, the <code>unit</code> property must be provided.",
        "unitDisplay": "The unit formatting style to use in <code>unit</code> formatting. Possible values are:\n<dl>\n<dt id=\"short\"><a href=\"#short\"><code>\"short\"</code> (default)</a></dt>\n<dd>\n<p>E.g., <code>16 l</code>.\n</dd>\n<dt id=\"narrow\"><a href=\"#narrow\"><code>\"narrow\"</code></a></dt>\n<dd>\n<p>E.g., <code>16l</code>.\n</dd>\n<dt id=\"long\"><a href=\"#long\"><code>\"long\"</code></a></dt>\n<dd>\n<p>E.g., <code>16 litres</code>.\n</dd>\n</dl>",
        "minimumIntegerDigits": "The minimum number of integer digits to use. A value with a smaller number of integer digits than this number will be left-padded with zeros (to the specified length) when formatted. Possible values are from <code>1</code> to <code>21</code>; the default is <code>1</code>.",
        "minimumFractionDigits": "The minimum number of fraction digits to use. Possible values are from <code>0</code> to <code>100</code>; the default for plain number and percent formatting is <code>0</code>; the default for currency formatting is the number of minor unit digits provided by the <a href=\"https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml\" class=\"external\" target=\"_blank\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information). See <a href=\"#significantdigitsfractiondigits_default_values\">SignificantDigits/FractionDigits default values</a> for when this default gets applied.",
        "maximumFractionDigits": "The maximum number of fraction digits to use. Possible values are from <code>0</code> to <code>100</code>; the default for plain number formatting is the larger of <code>minimumFractionDigits</code> and <code>3</code>; the default for currency formatting is the larger of <code>minimumFractionDigits</code> and the number of minor unit digits provided by the <a href=\"https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml\" class=\"external\" target=\"_blank\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information); the default for percent formatting is the larger of <code>minimumFractionDigits</code> and 0. See <a href=\"#significantdigitsfractiondigits_default_values\">SignificantDigits/FractionDigits default values</a> for when this default gets applied.",
        "minimumSignificantDigits": "The minimum number of significant digits to use. Possible values are from <code>1</code> to <code>21</code>; the default is <code>1</code>. See <a href=\"#significantdigitsfractiondigits_default_values\">SignificantDigits/FractionDigits default values</a> for when this default gets applied.",
        "maximumSignificantDigits": "The maximum number of significant digits to use. Possible values are from <code>1</code> to <code>21</code>; the default is <code>21</code>. See <a href=\"#significantdigitsfractiondigits_default_values\">SignificantDigits/FractionDigits default values</a> for when this default gets applied.",
        "roundingPriority": "Specify how rounding conflicts will be resolved if both \"FractionDigits\" (<a href=\"#minimumfractiondigits\"><code>minimumFractionDigits</code></a>/<a href=\"#maximumfractiondigits\"><code>maximumFractionDigits</code></a>) and \"SignificantDigits\" (<a href=\"#minimumsignificantdigits\"><code>minimumSignificantDigits</code></a>/<a href=\"#maximumsignificantdigits\"><code>maximumSignificantDigits</code></a>) are specified.\nPossible values are:\n<dl>\n<dt id=\"auto\"><a href=\"#auto\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>The result from the significant digits property is used.\n</dd>\n<dt id=\"moreprecision\"><a href=\"#moreprecision\"><code>\"morePrecision\"</code></a></dt>\n<dd>\n<p>The result from the property that results in more precision is used.\n</dd>\n<dt id=\"lessprecision\"><a href=\"#lessprecision\"><code>\"lessPrecision\"</code></a></dt>\n<dd>\n<p>The result from the property that results in less precision is used.\n</dd>\n</dl>\n<p>The value <code>\"auto\"</code> is normalized to <code>\"morePrecision\"</code> if <code>notation</code> is <code>\"compact\"</code> and none of the four \"FractionDigits\"/\"SignificantDigits\" options are set.\n<p>Note that for values other than <code>auto</code> the result with more precision is calculated from the <a href=\"#minimumsignificantdigits\"><code>maximumSignificantDigits</code></a> and <a href=\"#maximumfractiondigits\"><code>maximumFractionDigits</code></a> (minimum fractional and significant digit settings are ignored).",
        "roundingIncrement": "Indicates the increment at which rounding should take place relative to the calculated rounding magnitude. Possible values are <code>1</code>, <code>2</code>, <code>5</code>, <code>10</code>, <code>20</code>, <code>25</code>, <code>50</code>, <code>100</code>, <code>200</code>, <code>250</code>, <code>500</code>, <code>1000</code>, <code>2000</code>, <code>2500</code>, and <code>5000</code>; the default is <code>1</code>. It cannot be mixed with significant-digits rounding or any setting of <code>roundingPriority</code> other than <code>auto</code>.",
        "roundingMode": "How decimals should be rounded. Possible values are:\n<dl>\n<dt id=\"ceil\"><a href=\"#ceil\"><code>\"ceil\"</code></a></dt>\n<dd>\n<p>Round toward +∞. Positive values round up. Negative values round \"more positive\".\n</dd>\n<dt id=\"floor\"><a href=\"#floor\"><code>\"floor\"</code></a></dt>\n<dd>\n<p>Round toward -∞. Positive values round down. Negative values round \"more negative\".\n</dd>\n<dt id=\"expand\"><a href=\"#expand\"><code>\"expand\"</code></a></dt>\n<dd>\n<p>Round away from 0. The <em>magnitude</em> of the value is always increased by rounding. Positive values round up. Negative values round \"more negative\".\n</dd>\n<dt id=\"trunc\"><a href=\"#trunc\"><code>\"trunc\"</code></a></dt>\n<dd>\n<p>Round toward 0. This <em>magnitude</em> of the value is always reduced by rounding. Positive values round down. Negative values round \"less negative\".\n</dd>\n<dt id=\"halfceil\"><a href=\"#halfceil\"><code>\"halfCeil\"</code></a></dt>\n<dd>\n<p>Ties toward +∞. Values above the half-increment round like <code>\"ceil\"</code> (towards +∞), and below like <code>\"floor\"</code> (towards -∞). On the half-increment, values round like <code>\"ceil\"</code>.\n</dd>\n<dt id=\"halffloor\"><a href=\"#halffloor\"><code>\"halfFloor\"</code></a></dt>\n<dd>\n<p>Ties toward -∞. Values above the half-increment round like <code>\"ceil\"</code> (towards +∞), and below like <code>\"floor\"</code> (towards -∞). On the half-increment, values round like <code>\"floor\"</code>.\n</dd>\n<dt id=\"halfexpand\"><a href=\"#halfexpand\"><code>\"halfExpand\"</code> (default)</a></dt>\n<dd>\n<p>Ties away from 0. Values above the half-increment round like <code>\"expand\"</code> (away from zero), and below like <code>\"trunc\"</code> (towards 0). On the half-increment, values round like <code>\"expand\"</code>.\n</dd>\n<dt id=\"halftrunc\"><a href=\"#halftrunc\"><code>\"halfTrunc\"</code></a></dt>\n<dd>\n<p>Ties toward 0. Values above the half-increment round like <code>\"expand\"</code> (away from zero), and below like <code>\"trunc\"</code> (towards 0). On the half-increment, values round like <code>\"trunc\"</code>.\n</dd>\n<dt id=\"halfeven\"><a href=\"#halfeven\"><code>\"halfEven\"</code></a></dt>\n<dd>\n<p>Ties towards the nearest even integer. Values above the half-increment round like <code>\"expand\"</code> (away from zero), and below like <code>\"trunc\"</code> (towards 0). On the half-increment values round towards the nearest even digit.\n</dd>\n</dl>\n<p>These options reflect the <a href=\"https://unicode-org.github.io/icu/userguide/format_parse/numbers/rounding-modes.html\" class=\"external\" target=\"_blank\">ICU user guide</a>, where \"expand\" and \"trunc\" map to ICU \"UP\" and \"DOWN\", respectively.\nThe <a href=\"#rounding_modes\">rounding modes</a> example below demonstrates how each mode works.",
        "trailingZeroDisplay": "The strategy for displaying trailing zeros on whole numbers. Possible values are:\n<dl>\n<dt id=\"auto_2\"><a href=\"#auto_2\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>Keep trailing zeros according to <code>minimumFractionDigits</code> and <code>minimumSignificantDigits</code>.\n</dd>\n<dt id=\"stripifinteger\"><a href=\"#stripifinteger\"><code>\"stripIfInteger\"</code></a></dt>\n<dd>\n<p>Remove the fraction digits <em>if</em> they are all zero. This is the same as <code>\"auto\"</code> if any of the fraction digits is non-zero.\n</dd>\n</dl>",
        "notation": "The formatting that should be displayed for the number. Possible values are:\n<dl>\n<dt id=\"standard\"><a href=\"#standard\"><code>\"standard\"</code> (default)</a></dt>\n<dd>\n<p>Plain number formatting.\n</dd>\n<dt id=\"scientific\"><a href=\"#scientific\"><code>\"scientific\"</code></a></dt>\n<dd>\n<p>Return the order-of-magnitude for formatted number.\n</dd>\n<dt id=\"engineering\"><a href=\"#engineering\"><code>\"engineering\"</code></a></dt>\n<dd>\n<p>Return the exponent of ten when divisible by three.\n</dd>\n<dt id=\"compact\"><a href=\"#compact\"><code>\"compact\"</code></a></dt>\n<dd>\n<p>String representing exponent; defaults to using the \"short\" form.\n</dd>\n</dl>",
        "compactDisplay": "Only used when <code>notation</code> is <code>\"compact\"</code>. Possible values are <code>\"short\"</code> and <code>\"long\"</code>; the default is <code>\"short\"</code>.",
        "useGrouping": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.\n<dl>\n<dt id=\"always\"><a href=\"#always\"><code>\"always\"</code></a></dt>\n<dd>\n<p>Display grouping separators even if the locale prefers otherwise.\n</dd>\n<dt id=\"auto_3\"><a href=\"#auto_3\"><code>\"auto\"</code></a></dt>\n<dd>\n<p>Display grouping separators based on the locale preference, which may also be dependent on the currency.\n</dd>\n<dt id=\"min2\"><a href=\"#min2\"><code>\"min2\"</code></a></dt>\n<dd>\n<p>Display grouping separators when there are at least 2 digits in a group.\n</dd>\n<dt id=\"true\"><a href=\"#true\"><code>true</code></a></dt>\n<dd>\n<p>Same as <code>\"always\"</code>.\n</dd>\n<dt id=\"false\"><a href=\"#false\"><code>false</code></a></dt>\n<dd>\n<p>Display no grouping separators.\n</dd>\n</dl>\n<p>The default is <code>\"min2\"</code> if <code>notation</code> is <code>\"compact\"</code>, and <code>\"auto\"</code> otherwise. The string values <code>\"true\"</code> and <code>\"false\"</code> are accepted, but are always converted to the default value.",
        "signDisplay": "When to display the sign for the number. Possible values are:\n<dl>\n<dt id=\"auto_4\"><a href=\"#auto_4\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>Sign display for negative numbers only, including negative zero.\n</dd>\n<dt id=\"always_2\"><a href=\"#always_2\"><code>\"always\"</code></a></dt>\n<dd>\n<p>Always display sign.\n</dd>\n<dt id=\"exceptzero\"><a href=\"#exceptzero\"><code>\"exceptZero\"</code></a></dt>\n<dd>\n<p>Sign display for positive and negative numbers, but not zero.\n</dd>\n<dt id=\"negative\"><a href=\"#negative\"><code>\"negative\"</code></a></dt>\n<dd>\n<p>Sign display for negative numbers only, excluding negative zero.\n</dd>\n<dt id=\"never\"><a href=\"#never\"><code>\"never\"</code></a></dt>\n<dd>\n<p>Never display sign.\n</dd>\n</dl>"
      },
      "returns": "A new <code>Intl.NumberFormat</code> object.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThe text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the <a href=\"#browser_compatibility\">browser compatibility table</a>.\n</div>\n<p>Normally, <code>Intl.NumberFormat()</code> can be called with or without <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>, and a new <code>Intl.NumberFormat</code> instance is returned in both cases. However, if the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> value is an object that is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> <code>Intl.NumberFormat</code> (doesn't necessarily mean it's created via <code>new Intl.NumberFormat</code>; just that it has <code>Intl.NumberFormat.prototype</code> in its prototype chain), then the value of <code>this</code> is returned instead, with the newly created <code>Intl.NumberFormat</code> object hidden in a <code>[Symbol(IntlLegacyConstructedSymbol)]</code> property (a unique symbol that's reused between instances).\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const formatter = Intl.NumberFormat.call(\n  { __proto__: Intl.NumberFormat.prototype },\n  \"en-US\",\n  { notation: \"scientific\" },\n);\nconsole.log(Object.getOwnPropertyDescriptors(formatter));\n// {\n//   [Symbol(IntlLegacyConstructedSymbol)]: {\n//     value: NumberFormat [Intl.NumberFormat] {},\n//     writable: false,\n//     enumerable: false,\n//     configurable: false\n//   }\n// }\n</code></pre></div>\n<p>Note that there's only one actual <code>Intl.NumberFormat</code> instance here: the one hidden in <code>[Symbol(IntlLegacyConstructedSymbol)]</code>. Calling the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\"><code>format()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions\"><code>resolvedOptions()</code></a> methods on <code>formatter</code> would correctly use the options stored in that instance, but calling all other methods (e.g., <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange\"><code>formatRange()</code></a>) would fail with \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n<p>This behavior, called <code>ChainNumberFormat</code>, does not happen when <code>Intl.NumberFormat()</code> is called without <code>new</code> but with <code>this</code> set to anything else that's not an <code>instanceof Intl.NumberFormat</code>. If you call it directly as <code>Intl.NumberFormat()</code>, the <code>this</code> value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a>, and a new <code>Intl.NumberFormat</code> instance is created normally.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>A property that takes enumerated values (such as <code>style</code>, <code>units</code>, <code>currency</code>, and so on) is set to an invalid value.</li>\n<li>Both <code>maximumFractionDigits</code> and <code>minimumFractionDigits</code> are set, and they are set to different values.\nNote that depending on various formatting options, these properties can have default values.\nIt is therefore possible to get this error even if you only set one of the properties.</li>\n</ul>",
        "TypeError": "Thrown if the <code>options.style</code> property is set to \"unit\" or \"currency\", and no value has been set for the corresponding property <code>options.unit</code> or <code>options.currency</code>."
      }
    },
    "intl.numberformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances returns a new object with properties reflecting the options computed during initialization of this <code>NumberFormat</code> object.",
      "returns": "A new object with properties reflecting the options computed during the initialization of this <code>NumberFormat</code> object. The object has the following properties, in the order they are listed:\n<dl>\n<dt id=\"locale\"><a href=\"#locale\"><code>locale</code></a></dt>\n<dd>\n<p>The BCP 47 language tag for the locale actually used, determined by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">locale negotiation</a> process. Only the <code>nu</code> Unicode extension key, if requested, may be included in the output.\n</dd>\n<dt id=\"numberingsystem\"><a href=\"#numberingsystem\"><code>numberingSystem</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, or using the Unicode extension key <code>\"nu\"</code>, with default filled in as needed. It is a supported <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\">numbering system</a> for this locale. The default is locale dependent.\n</dd>\n<dt id=\"style\"><a href=\"#style\"><code>style</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"decimal\"</code>, <code>\"percent\"</code>, <code>\"currency\"</code>, or <code>\"unit\"</code>. The default is <code>\"decimal\"</code>.\n</dd>\n<dt id=\"currency\"><a href=\"#currency\"><code>currency</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument. It is only present if <code>style</code> is <code>\"currency\"</code>. It is an ISO 4217 currency code; see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_currency_identifiers\"><code>Intl.supportedValuesOf()</code></a>. It is required if <code>style</code> is <code>\"currency\"</code> so there is no default.\n</dd>\n<dt id=\"currencydisplay\"><a href=\"#currencydisplay\"><code>currencyDisplay</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is only present if <code>style</code> is <code>\"currency\"</code>. It is either <code>\"code\"</code>, <code>\"symbol\"</code>, <code>\"narrowSymbol\"</code>, or <code>\"name\"</code>. The default is <code>\"symbol\"</code>.\n</dd>\n<dt id=\"currencysign\"><a href=\"#currencysign\"><code>currencySign</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is only present if <code>style</code> is <code>\"currency\"</code>. It is either <code>\"standard\"</code> or <code>\"accounting\"</code>. The default is <code>\"standard\"</code>.\n</dd>\n<dt id=\"unit\"><a href=\"#unit\"><code>unit</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument. It is only present if <code>style</code> is <code>\"unit\"</code>. It is a <a href=\"https://tc39.es/ecma402/#table-sanctioned-single-unit-identifiers\" class=\"external\" target=\"_blank\">sanctioned unit identifier</a> from the <a href=\"https://github.com/unicode-org/cldr/blob/main/common/validity/unit.xml\" class=\"external\" target=\"_blank\">full CLDR list</a>. It is required if <code>style</code> is <code>\"unit\"</code> so there is no default.\n</dd>\n<dt id=\"unitdisplay\"><a href=\"#unitdisplay\"><code>unitDisplay</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is only present if <code>style</code> is <code>\"unit\"</code>. It is either <code>\"short\"</code>, <code>\"narrow\"</code>, or <code>\"long\"</code>. The default is <code>\"short\"</code>.\n</dd>\n<dt id=\"minimumintegerdigits\"><a href=\"#minimumintegerdigits\"><code>minimumIntegerDigits</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is an integer between <code>1</code> and <code>21</code>. The default is <code>1</code>.\n</dd>\n<dt id=\"minimumfractiondigits\"><a href=\"#minimumfractiondigits\"><code>minimumFractionDigits</code>, <code>maximumFractionDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for these properties in the <code>options</code> argument, with defaults filled in as needed. They are only present if necessary; see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#digit_options\">digit options</a>. It is an integer between <code>0</code> and <code>100</code>.\n</dd>\n<dt id=\"minimumsignificantdigits\"><a href=\"#minimumsignificantdigits\"><code>minimumSignificantDigits</code>, <code>maximumSignificantDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for these properties in the <code>options</code> argument, with defaults filled in as needed. They are only present if necessary; see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#digit_options\">digit options</a>. It is an integer between <code>1</code> and <code>21</code>.\n</dd>\n<dt id=\"usegrouping\"><a href=\"#usegrouping\"><code>useGrouping</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed, and with some values normalized. It is either <code>\"always\"</code>, <code>\"auto\"</code>, <code>\"min2\"</code>, or the boolean <code>false</code>. The default is <code>\"min2\"</code> if <code>notation</code> is <code>\"compact\"</code>, and <code>\"auto\"</code> otherwise.\n</dd>\n<dt id=\"notation\"><a href=\"#notation\"><code>notation</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"standard\"</code>, <code>\"scientific\"</code>, <code>\"engineering\"</code>, or <code>\"compact\"</code>. The default is <code>\"standard\"</code>.\n</dd>\n<dt id=\"compactdisplay\"><a href=\"#compactdisplay\"><code>compactDisplay</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is only present if <code>notation</code> is <code>\"compact\"</code>. It is either <code>\"short\"</code> or <code>\"long\"</code>. The default is <code>\"short\"</code>.\n</dd>\n<dt id=\"signdisplay\"><a href=\"#signdisplay\"><code>signDisplay</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"auto\"</code>, <code>\"always\"</code>, <code>\"exceptZero\"</code>, <code>\"negative\"</code>, or <code>\"never\"</code>. The default is <code>\"auto\"</code>.\n</dd>\n<dt id=\"roundingincrement\"><a href=\"#roundingincrement\"><code>roundingIncrement</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is one of <code>1</code>, <code>2</code>, <code>5</code>, <code>10</code>, <code>20</code>, <code>25</code>, <code>50</code>, <code>100</code>, <code>200</code>, <code>250</code>, <code>500</code>, <code>1000</code>, <code>2000</code>, <code>2500</code>, and <code>5000</code>. The default is <code>1</code>.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is one of <code>\"ceil\"</code>, <code>\"floor\"</code>, <code>\"expand\"</code>, <code>\"trunc\"</code>, <code>\"halfCeil\"</code>, <code>\"halfFloor\"</code>, <code>\"halfExpand\"</code>, <code>\"halfTrunc\"</code>, and <code>\"halfEven\"</code>. The default is <code>\"halfExpand\"</code>.\n</dd>\n<dt id=\"roundingpriority\"><a href=\"#roundingpriority\"><code>roundingPriority</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"auto\"</code>, <code>\"morePrecision\"</code>, or <code>\"lessPrecision\"</code>. The default is <code>\"auto\"</code>.\n</dd>\n<dt id=\"trailingzerodisplay\"><a href=\"#trailingzerodisplay\"><code>trailingZeroDisplay</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"auto\"</code> or <code>\"stripIfInteger\"</code>. The default is <code>\"auto\"</code>.\n</dd>\n</dl>"
    },
    "intl.numberformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "56",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-09-28",
        "highDate": "2020-03-28"
      },
      "doc": "The <strong><code>Intl.NumberFormat.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page.\n</dd>\n</dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in number formatting without having to fall back to the runtime's default locale."
    },
    "intl.pluralrules": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "FirefoxAndroid": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2019-09-19",
        "highDate": "2022-03-19"
      },
      "doc": "The <strong><code>Intl.PluralRules</code></strong> object enables plural-sensitive formatting and plural-related language rules."
    },
    "intl.pluralrules.pluralrules": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/pluralrules",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "FirefoxAndroid": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2019-09-19",
        "highDate": "2022-03-19"
      },
      "doc": "The <strong><code>Intl.PluralRules()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\"><code>Intl.PluralRules</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance, or an array of such locale identifiers. The runtime's default locale is used when <code>undefined</code> is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Locale identification and negotiation</a>.\n</dd>\n<dt id=\"type\"><a href=\"#type\"><code>type</code></a></dt>\n<dd>\n<p>The type to use. Possible values are:\n<dl>\n<dt id=\"cardinal\"><a href=\"#cardinal\"><code>\"cardinal\"</code> (default)</a></dt>\n<dd>\n<p>For cardinal numbers (referring to the quantity of things).\n</dd>\n<dt id=\"ordinal\"><a href=\"#ordinal\"><code>\"ordinal\"</code></a></dt>\n<dd>\n<p>For ordinal number (referring to the ordering or ranking of things, e.g., \"1st\", \"2nd\", \"3rd\" in English).\n</dd>\n</dl>\n</dd>\n</dl>\n<p><code>Intl.PluralRules</code> also supports the <code>Intl.NumberFormat()</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#digit_options\">digit options</a> (see <code>Intl.NumberFormat()</code> for details):\n<ul>\n<li><code>minimumIntegerDigits</code></li>\n<li><code>minimumFractionDigits</code></li>\n<li><code>maximumFractionDigits</code></li>\n<li><code>minimumSignificantDigits</code></li>\n<li><code>maximumSignificantDigits</code></li>\n<li><code>roundingPriority</code></li>\n<li><code>roundingIncrement</code></li>\n<li><code>roundingMode</code></li>\n</ul>\n<p>These options are interpreted as if the <code>notation</code> option from <code>Intl.NumberFormat</code> is <code>\"standard\"</code> and <code>style</code> is <code>\"decimal\"</code>."
      },
      "throws": {
        "RangeError": "Thrown if <code>locales</code> or <code>options</code> contain invalid values."
      }
    },
    "intl.pluralrules.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "FirefoxAndroid": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2019-09-19",
        "highDate": "2022-03-19"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\"><code>Intl.PluralRules</code></a> instances returns a new object with properties reflecting the options computed during initialization of this <code>PluralRules</code> object.",
      "returns": "A new object with properties reflecting the options computed during the initialization of this <code>PluralRules</code> object. The object has the following properties, in the order they are listed:\n<dl>\n<dt id=\"locale\"><a href=\"#locale\"><code>locale</code></a></dt>\n<dd>\n<p>The BCP 47 language tag for the locale actually used, determined by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">locale negotiation</a> process. No Unicode extension key will be included in the output.\n</dd>\n<dt id=\"type\"><a href=\"#type\"><code>type</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"cardinal\"</code> or <code>\"ordinal\"</code>. The default is <code>\"cardinal\"</code>.\n</dd>\n<dt id=\"minimumintegerdigits\"><a href=\"#minimumintegerdigits\"><code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>, <code>maximumFractionDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for these properties in the <code>options</code> argument, with defaults filled in as needed. These properties are present only if neither <code>minimumSignificantDigits</code> nor <code>maximumSignificantDigits</code> was provided in the <code>options</code> argument.\n</dd>\n<dt id=\"minimumsignificantdigits\"><a href=\"#minimumsignificantdigits\"><code>minimumSignificantDigits</code>, <code>maximumSignificantDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The value provided for these properties in the <code>options</code> argument, with defaults filled in as needed. These properties are present only if at least one of them was provided in the <code>options</code> argument.\n</dd>\n<dt id=\"pluralcategories\"><a href=\"#pluralcategories\"><code>pluralCategories</code></a></dt>\n<dd>\n<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of plural categories used by the given locale, selected from the list <code>\"zero\"</code>, <code>\"one\"</code>, <code>\"two\"</code>, <code>\"few\"</code>, <code>\"many\"</code> and <code>\"other\"</code>.\n</dd>\n<dt id=\"roundingincrement\"><a href=\"#roundingincrement\"><code>roundingIncrement</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is one of <code>1</code>, <code>2</code>, <code>5</code>, <code>10</code>, <code>20</code>, <code>25</code>, <code>50</code>, <code>100</code>, <code>200</code>, <code>250</code>, <code>500</code>, <code>1000</code>, <code>2000</code>, <code>2500</code>, and <code>5000</code>. The default is <code>1</code>.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is one of <code>\"ceil\"</code>, <code>\"floor\"</code>, <code>\"expand\"</code>, <code>\"trunc\"</code>, <code>\"halfCeil\"</code>, <code>\"halfFloor\"</code>, <code>\"halfExpand\"</code>, <code>\"halfTrunc\"</code>, and <code>\"halfEven\"</code>. The default is <code>\"halfExpand\"</code>.\n</dd>\n<dt id=\"roundingpriority\"><a href=\"#roundingpriority\"><code>roundingPriority</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"auto\"</code>, <code>\"morePrecision\"</code>, or <code>\"lessPrecision\"</code>. The default is <code>\"auto\"</code>.\n</dd>\n<dt id=\"trailingzerodisplay\"><a href=\"#trailingzerodisplay\"><code>trailingZeroDisplay</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"auto\"</code> or <code>\"stripIfInteger\"</code>. The default is <code>\"auto\"</code>.\n</dd>\n</dl>"
    },
    "intl.pluralrules.select": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/select",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "FirefoxAndroid": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2019-09-19",
        "highDate": "2022-03-19"
      },
      "doc": "The <strong><code>select()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\"><code>Intl.PluralRules</code></a> instances returns a string indicating which plural rule to use for locale-aware formatting of a number.",
      "parameters": {
        "number": "The number to get a plural rule for."
      },
      "returns": "A string representing the pluralization category of the <code>number</code>.\nThis can be one of <code>zero</code>, <code>one</code>, <code>two</code>, <code>few</code>, <code>many</code>, or <code>other</code>."
    },
    "intl.pluralrules.selectrange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/selectrange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "106",
        "ChromeAndroid": "106",
        "Edge": "106",
        "Firefox": "116",
        "FirefoxAndroid": "116",
        "Opera": "92",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "19.0.0"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-08-01"
      },
      "doc": "The <strong><code>selectRange()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\"><code>Intl.PluralRules</code></a> instances receives two values and returns a string indicating which plural rule to use for locale-aware formatting of the indicated range.",
      "parameters": {
        "startRange": "A number representing the start of the range.",
        "endRange": "A number representing the end of the range."
      },
      "returns": "A string representing the pluralization category of the specified range.\nThis can be one of <code>zero</code>, <code>one</code>, <code>two</code>, <code>few</code>, <code>many</code> or <code>other</code>, that are relevant for the locale whose localization is specified in <a href=\"https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html\" class=\"external\" target=\"_blank\">LDML Language Plural Rules</a>."
    },
    "intl.pluralrules.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "FirefoxAndroid": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2019-09-19",
        "highDate": "2022-03-19"
      },
      "doc": "The <strong><code>Intl.PluralRules.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in plural rules without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page.\n</dd>\n</dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in plural rules without having to fall back to the runtime's default locale."
    },
    "intl.relativetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "FirefoxAndroid": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>Intl.RelativeTimeFormat</code></strong> object enables language-sensitive relative time formatting."
    },
    "intl.relativetimeformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/format",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "FirefoxAndroid": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>format()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> instances formats a <code>value</code> and <code>unit</code> according to the locale and formatting options of this <code>Intl.RelativeTimeFormat</code> object.",
      "parameters": {
        "value": "Numeric value to use in the internationalized relative time message.",
        "unit": "Unit to use in the relative time internationalized message. Possible values are: <code>\"year\"</code>, <code>\"quarter\"</code>, <code>\"month\"</code>, <code>\"week\"</code>, <code>\"day\"</code>, <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>. Plural forms are also permitted."
      },
      "returns": "A string representing the given <code>value</code> and <code>unit</code> formatted according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> object.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>format()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>format()</code> to hardcoded constants.\n</div>"
    },
    "intl.relativetimeformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "70",
        "FirefoxAndroid": "79",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> instances returns an array of objects representing each part of the formatted string that would be returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format\"><code>format()</code></a>. It is useful for building custom strings from the locale-specific tokens.",
      "parameters": {
        "value": "Numeric value to use in the internationalized relative time message.",
        "unit": "Unit to use in the relative time internationalized message. Possible values are: <code>\"year\"</code>, <code>\"quarter\"</code>, <code>\"month\"</code>, <code>\"week\"</code>, <code>\"day\"</code>, <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>. Plural forms are also permitted."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted relative time in parts. Each object has two or three properties, <code>type</code>, <code>value</code>, and optionally <code>unit</code>, each containing a string. The string concatenation of <code>value</code>, in the order provided, will result in the same string as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format\"><code>format()</code></a>. The parts can be thought of as directly obtained from calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts\"><code>Intl.NumberFormat.prototype.formatToParts()</code></a> with the numeric value, passing only the <code>numberingSystem</code> option, and then adding additional <code>type: \"literal\"</code> tokens, such as <code>\"in \"</code>, <code>\" days ago\"</code>, etc. All tokens that are produced by the <code>NumberFormat</code> have an additional <code>unit</code> property, which is the singular form of the input <code>unit</code>; this is for programmatic usage and is not localized. The localized unit is output as a part of a literal token.\n<p>When <code>options.numeric</code> is <code>\"auto\"</code>, and there's a special string for the value, the returned array is a single literal token."
    },
    "intl.relativetimeformat.relativetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/relativetimeformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "FirefoxAndroid": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>Intl.RelativeTimeFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance, or an array of such locale identifiers. The runtime's default locale is used when <code>undefined</code> is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.\n<p>The following Unicode extension key is allowed:\n<dl>\n<dt id=\"nu\"><a href=\"#nu\"><code>nu</code></a></dt>\n<dd>\n<p>See <a href=\"#numberingsystem\"><code>numberingSystem</code></a>.\n</dd>\n</dl>\n<p>This key can also be set with <code>options</code> (as listed below). When both are set, the <code>options</code> property takes precedence.",
        "options": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Locale identification and negotiation</a>.\n</dd>\n<dt id=\"numberingsystem\"><a href=\"#numberingsystem\"><code>numberingSystem</code></a></dt>\n<dd>\n<p>The numbering system to use for number formatting, such as <code>\"arab\"</code>, <code>\"hans\"</code>, <code>\"mathsans\"</code>, and so on. For a list of supported numbering system types, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\"><code>Intl.supportedValuesOf()</code></a>. This option can also be set through the <code>nu</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence.\n</dd>\n<dt id=\"style\"><a href=\"#style\"><code>style</code></a></dt>\n<dd>\n<p>The style of the formatted relative time. Possible values are:\n<dl>\n<dt id=\"long\"><a href=\"#long\"><code>\"long\"</code> (default)</a></dt>\n<dd>\n<p>E.g., \"in 1 month\"\n</dd>\n<dt id=\"short\"><a href=\"#short\"><code>\"short\"</code></a></dt>\n<dd>\n<p>E.g., \"in 1 mo.\"\n</dd>\n<dt id=\"narrow\"><a href=\"#narrow\"><code>\"narrow\"</code></a></dt>\n<dd>\n<p>E.g., \"in 1 mo.\". The narrow style could be similar to the short style for some locales.\n</dd>\n</dl>\n</dd>\n<dt id=\"numeric\"><a href=\"#numeric\"><code>numeric</code></a></dt>\n<dd>\n<p>Whether to use numeric values in the output. Possible values are <code>\"always\"</code> and <code>\"auto\"</code>; the default is <code>\"always\"</code>. When set to <code>\"auto\"</code>, the output may use more idiomatic phrasing such as <code>\"yesterday\"</code> instead of <code>\"1 day ago\"</code>.\n</dd>\n</dl>"
      },
      "throws": {
        "RangeError": "Thrown if <code>locales</code> or <code>options</code> contain invalid values."
      }
    },
    "intl.relativetimeformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "FirefoxAndroid": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> instances returns a new object with properties reflecting the options computed during initialization of this <code>RelativeTimeFormat</code> object.",
      "returns": "A new object with properties reflecting the options computed during the initialization of this <code>RelativeTimeFormat</code> object. The object has the following properties, in the order they are listed:\n<dl>\n<dt id=\"locale\"><a href=\"#locale\"><code>locale</code></a></dt>\n<dd>\n<p>The BCP 47 language tag for the locale actually used, determined by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">locale negotiation</a> process. Only the <code>nu</code> Unicode extension key, if requested, may be included in the output.\n</dd>\n<dt id=\"style\"><a href=\"#style\"><code>style</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"long\"</code>, <code>\"short\"</code>, or <code>\"narrow\"</code>. The default is <code>\"long\"</code>.\n</dd>\n<dt id=\"numeric\"><a href=\"#numeric\"><code>numeric</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"always\"</code> or <code>\"auto\"</code>. The default is <code>\"always\"</code>.\n</dd>\n<dt id=\"numberingsystem\"><a href=\"#numberingsystem\"><code>numberingSystem</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, or using the Unicode extension key <code>\"nu\"</code>, with default filled in as needed. It is a supported <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_numbering_system_types\">numbering system</a> for this locale. The default is locale dependent.\n</dd>\n</dl>"
    },
    "intl.relativetimeformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "FirefoxAndroid": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>Intl.RelativeTimeFormat.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in relative time formatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page.\n</dd>\n</dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in relative time formatting without having to fall back to the runtime's default locale."
    },
    "intl.segmenter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Firefox": "125",
        "FirefoxAndroid": "125",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "The <strong><code>Intl.Segmenter</code></strong> object enables locale-sensitive text segmentation, enabling you to get meaningful items (graphemes, words or sentences) from a string."
    },
    "intl.segmenter.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Firefox": "125",
        "FirefoxAndroid": "125",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> instances returns a new object with properties reflecting the options computed during initialization of this <code>Segmenter</code> object.",
      "returns": "A new object with properties reflecting the options computed during the initialization of this <code>Segmenter</code> object. The object has the following properties, in the order they are listed:\n<dl>\n<dt id=\"locale\"><a href=\"#locale\"><code>locale</code></a></dt>\n<dd>\n<p>The BCP 47 language tag for the locale actually used, determined by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">locale negotiation</a> process. No Unicode extension key will be included in the output.\n</dd>\n<dt id=\"granularity\"><a href=\"#granularity\"><code>granularity</code></a></dt>\n<dd>\n<p>The value provided for this property in the <code>options</code> argument, with default filled in as needed. It is either <code>\"grapheme\"</code>, <code>\"word\"</code>, or <code>\"sentence\"</code>. The default is <code>\"grapheme\"</code>.\n</dd>\n</dl>"
    },
    "intl.segmenter.segment": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Firefox": "125",
        "FirefoxAndroid": "125",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "The <strong><code>segment()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> instances segments a string according to the locale and granularity of this <code>Intl.Segmenter</code> object.",
      "parameters": {
        "input": "The text to be segmented as a string."
      },
      "returns": "A new iterable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments\"><code>Segments</code></a> object containing the segments of the input string, using the segmenter's locale and granularity."
    },
    "intl.segmenter.segment.segments": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment/segments",
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "A <strong><code>Segments</code></strong> object is an iterable collection of the segments of a text string. It is returned by a call to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment\"><code>segment()</code></a> method of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> object."
    },
    "intl.segmenter.segment.segments.containing": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment/segments/containing",
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "The <strong><code>containing()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments\"><code>Segments</code></a> instances returns an object describing the segment in the string that includes the code unit at the specified index.",
      "parameters": {
        "codeUnitIndex": "A number specifying the index of the code unit in the original input string. If the value is omitted, it defaults to <code>0</code>."
      },
      "returns": "An object describing the segment of the original string with the following properties, or <code>undefined</code> if the supplied index value is out of bounds.\n<dl>\n<dt id=\"segment\"><a href=\"#segment\"><code>segment</code></a></dt>\n<dd>\n<p>A string containing the segment extracted from the original input string.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The code unit index in the original input string at which the segment begins.\n</dd>\n<dt id=\"input\"><a href=\"#input\"><code>input</code></a></dt>\n<dd>\n<p>The complete input string that was segmented.\n</dd>\n<dt id=\"iswordlike\"><a href=\"#iswordlike\"><code>isWordLike</code></a></dt>\n<dd>\n<p>A boolean value only if <code>granularity</code> is <code>\"word\"</code>; otherwise, <code>undefined</code>. If <code>granularity</code> is <code>\"word\"</code>, then <code>isWordLike</code> is <code>true</code> when the segment is word-like (i.e., consists of letters/numbers/ideographs/etc.); otherwise, <code>false</code>.\n</dd>\n</dl>"
    },
    "intl.segmenter.segment.segments.symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment/segments/symbol.iterator",
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "The <strong><code>[Symbol.iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments\"><code>Segments</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows <code>Segments</code> objects to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">segments iterator object</a> that yields data about each segment.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields data about each segment. Each yielded object has the same properties as the object returned by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing\"><code>containing()</code></a> method."
    },
    "intl.segmenter.segmenter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segmenter",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Firefox": "125",
        "FirefoxAndroid": "125",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "The <strong><code>Intl.Segmenter()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instance, or an array of such locale identifiers. The runtime's default locale is used when <code>undefined</code> is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Locale identification and negotiation</a>.\n</dd>\n<dt id=\"granularity\"><a href=\"#granularity\"><code>granularity</code></a></dt>\n<dd>\n<p>How granularly should the input be split. Possible values are:\n<dl>\n<dt id=\"grapheme\"><a href=\"#grapheme\"><code>\"grapheme\"</code> (default)</a></dt>\n<dd>\n<p>Split the input into segments at grapheme cluster (user-perceived character) boundaries, as determined by the locale.\n</dd>\n<dt id=\"word\"><a href=\"#word\"><code>\"word\"</code></a></dt>\n<dd>\n<p>Split the input into segments at word boundaries, as determined by the locale.\n</dd>\n<dt id=\"sentence\"><a href=\"#sentence\"><code>\"sentence\"</code></a></dt>\n<dd>\n<p>Split the input into segments at sentence boundaries, as determined by the locale.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> instance.",
      "throws": {
        "RangeError": "Thrown if <code>locales</code> or <code>options</code> contain invalid values."
      }
    },
    "intl.segmenter.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Firefox": "125",
        "FirefoxAndroid": "125",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "The <strong><code>Intl.Segmenter.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in segmentation without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property:\n<dl>\n<dt id=\"localematcher\"><a href=\"#localematcher\"><code>localeMatcher</code></a></dt>\n<dd>\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page.\n</dd>\n</dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in segmentation without having to fall back to the runtime's default locale."
    },
    "intl.segments": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment/segments",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Firefox": "125",
        "FirefoxAndroid": "125",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "A <strong><code>Segments</code></strong> object is an iterable collection of the segments of a text string. It is returned by a call to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment\"><code>segment()</code></a> method of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> object."
    },
    "intl.segments.containing": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment/segments/containing",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Firefox": "125",
        "FirefoxAndroid": "125",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "The <strong><code>containing()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments\"><code>Segments</code></a> instances returns an object describing the segment in the string that includes the code unit at the specified index.",
      "parameters": {
        "codeUnitIndex": "A number specifying the index of the code unit in the original input string. If the value is omitted, it defaults to <code>0</code>."
      },
      "returns": "An object describing the segment of the original string with the following properties, or <code>undefined</code> if the supplied index value is out of bounds.\n<dl>\n<dt id=\"segment\"><a href=\"#segment\"><code>segment</code></a></dt>\n<dd>\n<p>A string containing the segment extracted from the original input string.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The code unit index in the original input string at which the segment begins.\n</dd>\n<dt id=\"input\"><a href=\"#input\"><code>input</code></a></dt>\n<dd>\n<p>The complete input string that was segmented.\n</dd>\n<dt id=\"iswordlike\"><a href=\"#iswordlike\"><code>isWordLike</code></a></dt>\n<dd>\n<p>A boolean value only if <code>granularity</code> is <code>\"word\"</code>; otherwise, <code>undefined</code>. If <code>granularity</code> is <code>\"word\"</code>, then <code>isWordLike</code> is <code>true</code> when the segment is word-like (i.e., consists of letters/numbers/ideographs/etc.); otherwise, <code>false</code>.\n</dd>\n</dl>"
    },
    "intl.segments.symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment/segments/symbol.iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Firefox": "125",
        "FirefoxAndroid": "125",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-04-16"
      },
      "doc": "The <strong><code>[Symbol.iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments\"><code>Segments</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows <code>Segments</code> objects to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">segments iterator object</a> that yields data about each segment.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields data about each segment. Each yielded object has the same properties as the object returned by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing\"><code>containing()</code></a> method."
    },
    "intl.supportedvaluesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/supportedvaluesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "99",
        "ChromeAndroid": "99",
        "Edge": "99",
        "Firefox": "93",
        "FirefoxAndroid": "93",
        "Opera": "85",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "18.0.0",
        "Deno": "1.19"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2022-03-14",
        "highDate": "2024-09-14"
      },
      "doc": "The <strong><code>Intl.supportedValuesOf()</code></strong> static method returns an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.\n<p>Duplicates are omitted and the array is sorted in ascending lexicographical order (or more precisely, using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a> with an <code>undefined</code> compare function).\n<p>The method can be used to feature-test whether values are supported in a particular implementation and download a polyfill only if necessary.\nIt can also be used to build UIs that allow users to select their preferred localized values, for example when the UI is created from WebGL or server-side.\n<p>This method is locale-unaware: it is possible that certain identifiers are only supported or preferred in certain locales. If you want to determine the preferred values for a specific locale, you should use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> object, such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars\"><code>Intl.Locale.prototype.getCalendars()</code></a>.",
      "parameters": {
        "key": "A key string indicating the category of values to be returned. This is one of:\n<ul>\n<li><code>\"calendar\"</code>: see <a href=\"#supported_calendar_types\">supported calendar types</a></li>\n<li><code>\"collation\"</code>: see <a href=\"#supported_collation_types\">supported collation types</a></li>\n<li><code>\"currency\"</code>: see <a href=\"#supported_currency_identifiers\">supported currency identifiers</a></li>\n<li><code>\"numberingSystem\"</code>: see <a href=\"#supported_numbering_system_types\">supported numbering system types</a></li>\n<li><code>\"timeZone\"</code>: see <a href=\"#supported_time_zone_identifiers\">supported time zone identifiers</a></li>\n<li><code>\"unit\"</code>: see <a href=\"#supported_unit_identifiers\">supported unit identifiers</a></li>\n</ul>"
      },
      "returns": "A sorted array of unique string values indicating the values supported by the implementation for the given key. The values that could be returned are listed below.\n<h4 id=\"supported_calendar_types\">Supported calendar types</h4>\n<p>Below are all values that are commonly supported by browsers for the <code>calendar</code> key. These values can be used for the <code>calendar</code> option or the <code>ca</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">Unicode extension key</a> when creating objects such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a>, as well as for creating <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal\"><code>Temporal</code></a> date objects.\n<figure class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>buddhist</code></td>\n<td>Thai Buddhist calendar</td>\n</tr>\n<tr>\n<td><code>chinese</code></td>\n<td>Traditional Chinese calendar</td>\n</tr>\n<tr>\n<td><code>coptic</code></td>\n<td>Coptic calendar</td>\n</tr>\n<tr>\n<td><code>dangi</code></td>\n<td>Traditional Korean calendar</td>\n</tr>\n<tr>\n<td><code>ethioaa</code></td>\n<td>Ethiopic calendar, Amete Alem, single-era variant (epoch approx. 5493 B.C.E)</td>\n</tr>\n<tr>\n<td><code>ethiopic</code></td>\n<td>Ethiopic calendar, Amete Mihret, two-era variant (epoch approx, 8 C.E., Amete Alem for years before Amete Mihret)</td>\n</tr>\n<tr>\n<td><code>gregory</code></td>\n<td>Gregorian calendar (proleptic, <em>not</em> Julian hybrid)</td>\n</tr>\n<tr>\n<td><code>hebrew</code></td>\n<td>Traditional Hebrew calendar</td>\n</tr>\n<tr>\n<td><code>indian</code></td>\n<td>Indian calendar</td>\n</tr>\n<tr>\n<td><code>islamic</code></td>\n<td>Hijri calendar, unspecified algorithm. <strong>Note:</strong> As of April 2025, this is an astronomical simulation whose parameters are undocumented and that is not known to match a specific Hijri calendar variant from non-software contexts. For well-specified results, use one of the three specific variants: <code>islamic-umalqura</code>, <code>islamic-tbla</code>, or <code>islamic-civil</code>.</td>\n</tr>\n<tr>\n<td><code>islamic-umalqura</code></td>\n<td>Hijri calendar, Umm al-Qura (uses KACST-calculated months from the start of 1300 AH to the end of 1600 AH and falls back to <code>islamic-civil</code> outside that range)</td>\n</tr>\n<tr>\n<td><code>islamic-tbla</code></td>\n<td>Hijri calendar, tabular/rule-based with leap year rule II (leap years 2,5,7,10,13,16,18,21,24,26,29 in the 30-year cycle (1-based numbering)) and Thursday/astronomical epoch (July 15, 622 Julian / 0622-07-18 ISO)</td>\n</tr>\n<tr>\n<td><code>islamic-civil</code></td>\n<td>Hijri calendar, tabular/rule-based with leap year rule II (leap years 2,5,7,10,13,16,18,21,24,26,29 in the 30-year cycle (1-based numbering)) and Friday/civil epoch (July 16, 622 Julian / 0622-07-19 ISO)</td>\n</tr>\n<tr>\n<td><code>iso8601</code></td>\n<td>ISO calendar (variant of the Gregorian calendar with week rules and formatting parameters made region-independent)</td>\n</tr>\n<tr>\n<td><code>japanese</code></td>\n<td>Japanese Imperial calendar (this calendar adds an era for each new emperor, so the output year and era for a future date may not match the input year and era when your code runs on a future engine version)</td>\n</tr>\n<tr>\n<td><code>persian</code></td>\n<td>Persian calendar</td>\n</tr>\n<tr>\n<td><code>roc</code></td>\n<td>Republic of China calendar</td>\n</tr>\n</tbody>\n</table></figure>\n<p>The types below are specified in CLDR but do not have implementations distinct from the above calendars in browsers.\n<figure class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>islamicc</code> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n<span class=\"visually-hidden\">Deprecated</span>\n</abbr></td>\n<td>Civil (algorithmic) Arabic calendar.</td>\n<td>This is an alias for <code>islamic-civil</code> and therefore is not returned by <code>supportedValuesOf()</code>. Use <code>islamic-civil</code> instead.</td>\n</tr>\n<tr>\n<td><code>islamic-rgsa</code></td>\n<td>Hijri calendar, Saudi Arabia sighting</td>\n<td>Browsers do not have historical sighting data and future sightings have not occurred yet. As of April 2025, this calendar results in the same behavior as <code>islamic</code>. Use <code>islamic-umalqura</code> for a Mecca-based astronomical calculation.</td>\n</tr>\n</tbody>\n</table></figure>\n<p>References:\n<ul>\n<li><a href=\"https://github.com/unicode-org/cldr/blob/main/common/bcp47/calendar.xml\" class=\"external\" target=\"_blank\">CLDR Calendar type keys</a></li>\n<li><a href=\"https://unicode.org/reports/tr35/tr35-dates.html\" class=\"external\" target=\"_blank\">UTS 35, Dates</a></li>\n<li><a href=\"https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\" class=\"external\" target=\"_blank\">Islamic calendar types</a> (CLDR design proposal)</li>\n</ul>\n<h4 id=\"supported_collation_types\">Supported collation types</h4>\n<p>Below are all values that are commonly supported by browsers for the <code>collation</code> key. These values can be used for the <code>collation</code> option or the <code>co</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">Unicode extension key</a> when creating objects such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a>.\n<figure class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>compat</code></td>\n<td>A previous version of the ordering, for compatibility (for Arabic)</td>\n</tr>\n<tr>\n<td><code>dict</code></td>\n<td>Dictionary style ordering (such as in Sinhala). Also recognized as <code>dictionary</code>.</td>\n</tr>\n<tr>\n<td><code>emoji</code></td>\n<td>Recommended ordering for emoji characters</td>\n</tr>\n<tr>\n<td><code>eor</code></td>\n<td>European ordering rules</td>\n</tr>\n<tr>\n<td><code>phonebk</code></td>\n<td>Phonebook style ordering (such as in German). Also recognized as <code>phonebook</code>.</td>\n</tr>\n<tr>\n<td><code>phonetic</code></td>\n<td>Phonetic ordering (sorting based on pronunciation; for Lingala)</td>\n</tr>\n<tr>\n<td><code>pinyin</code></td>\n<td>Pinyin ordering for Latin and for CJK characters (used in Chinese)</td>\n</tr>\n<tr>\n<td><code>searchjl</code></td>\n<td>Special collation type for Korean initial consonant search. <strong>Warning:</strong> This collation is not for sorting, even though you can only use it with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> of <code>usage: \"sort\"</code>.</td>\n</tr>\n<tr>\n<td><code>stroke</code></td>\n<td>Pinyin ordering for Latin, stroke order for CJK characters (used in Chinese)</td>\n</tr>\n<tr>\n<td><code>trad</code></td>\n<td>Traditional style ordering (such as in Spanish). Also recognized as <code>traditional</code>.</td>\n</tr>\n<tr>\n<td><code>unihan</code></td>\n<td>Pinyin ordering for Latin, Unihan radical-stroke ordering for CJK characters (used in Chinese)</td>\n</tr>\n<tr>\n<td><code>zhuyin</code></td>\n<td>Pinyin ordering for Latin, zhuyin order for Bopomofo and CJK characters (used in Chinese)</td>\n</tr>\n</tbody>\n</table></figure>\n<p>The types below are specified in CLDR data, but are deprecated, are discouraged from explicit usage, and/or may not be indicated by browsers as supported for various reasons. Avoid using them:\n<figure class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>big5han</code> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n<span class=\"visually-hidden\">Deprecated</span>\n</abbr></td>\n<td>Pinyin ordering for Latin, big5 charset ordering for CJK characters (used in Chinese)</td>\n<td>Deprecated.</td>\n</tr>\n<tr>\n<td><code>direct</code> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n<span class=\"visually-hidden\">Deprecated</span>\n</abbr></td>\n<td>Binary code point order (used in Hindi)</td>\n<td>Deprecated.</td>\n</tr>\n<tr>\n<td><code>ducet</code></td>\n<td>The default Unicode collation element table order</td>\n<td>The <code>ducet</code> collation type is not available to the Web.</td>\n</tr>\n<tr>\n<td><code>gb2312</code> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n<span class=\"visually-hidden\">Deprecated</span>\n</abbr></td>\n<td>Pinyin ordering for Latin, gb2312han charset ordering for CJK characters (for Chinese). Also recognized as <code>gb2312han</code>.</td>\n<td>Deprecated.</td>\n</tr>\n<tr>\n<td><code>reformed</code> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n<span class=\"visually-hidden\">Deprecated</span>\n</abbr></td>\n<td>Reformed ordering (such as Swedish)</td>\n<td>Deprecated. This is the old name for the default ordering for Swedish <a href=\"https://unicode-org.atlassian.net/browse/CLDR-15603\" class=\"external\" target=\"_blank\">whose collation naming used to differ from other languages</a>. Since this was the default, request <code>sv</code> instead of requesting <code>sv-u-co-reformed</code>.</td>\n</tr>\n<tr>\n<td><code>search</code></td>\n<td>Special collation type for string search</td>\n<td>Do not use as a collation type, since in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a>, this collation is activated via the <code>usage: \"search\"</code> option. There is currently no API for substring search, so this is currently only good for filtering a list of strings by trying a full-string match of the key against each list item.</td>\n</tr>\n<tr>\n<td><code>standard</code></td>\n<td>Default ordering for each language, except Chinese (and, previously, Swedish)</td>\n<td>Do not use explicitly. In general, it's unnecessary to specify this explicitly and specifying this for Swedish is problematic due to the different meaning for Swedish in the past.</td>\n</tr>\n</tbody>\n</table></figure>\n<p>References:\n<ul>\n<li><a href=\"https://github.com/unicode-org/cldr/blob/main/common/bcp47/collation.xml\" class=\"external\" target=\"_blank\">CLDR Collation type keys</a></li>\n<li><a href=\"https://unicode.org/reports/tr35/tr35-collation.html\" class=\"external\" target=\"_blank\">UTS 35, Collation</a></li>\n</ul>\n<h4 id=\"supported_currency_identifiers\">Supported currency identifiers</h4>\n<p>Currency identifiers are three-letter uppercase codes defined in ISO 4217. These values can be used for the <code>currency</code> option when creating objects such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a>, as well as for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of\"><code>Intl.DisplayNames.prototype.of()</code></a>. There are over 300 identifiers in common use so we won't list them. For an exhaustive list of possible identifiers, see the <a href=\"https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes\" class=\"external\" target=\"_blank\">Wikipedia article</a>.\n<p>References:\n<ul>\n<li><a href=\"https://github.com/unicode-org/cldr/blob/main/common/bcp47/currency.xml\" class=\"external\" target=\"_blank\">CLDR Currency type keys</a></li>\n<li><a href=\"https://www.iso.org/iso-4217-currency-codes.html\" class=\"external\" target=\"_blank\">ISO 4217 Currency codes</a></li>\n<li><a href=\"https://unicode.org/reports/tr35/tr35-numbers.html#Currencies\" class=\"external\" target=\"_blank\">UTS 35, Currencies</a></li>\n</ul>\n<h4 id=\"supported_numbering_system_types\">Supported numbering system types</h4>\n<p>Below are all values that are commonly supported by browsers for the <code>numberingSystem</code> key. These values can be used for the <code>numberingSystem</code> option or the <code>nu</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">Unicode extension key</a> when creating objects such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a>. For the rows with \"digit characters\", the runtime translates the digits one-by-one without extra actions. The others marked as \"algorithmic\" need additional algorithms to translate the digits. The higher the Unicode code point is, the newer the numbering system is and the more likely it is unsupported by all browsers.\n<figure class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n<th>Digit characters</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>adlm</code></td>\n<td>Adlam digits</td>\n<td><code>𞥐𞥑𞥒𞥓𞥔𞥕𞥖𞥗𞥘𞥙</code> (U+1E950 to U+1E959)</td>\n</tr>\n<tr>\n<td><code>ahom</code></td>\n<td>Ahom digits</td>\n<td><code>𑜰𑜱𑜲𑜳𑜴𑜵𑜶𑜷𑜸𑜹</code> (U+11730 to U+11739)</td>\n</tr>\n<tr>\n<td><code>arab</code></td>\n<td>Arabic-Indic digits</td>\n<td><code>٠١٢٣٤٥٦٧٨٩</code> (U+0660 to U+0669)</td>\n</tr>\n<tr>\n<td><code>arabext</code></td>\n<td>Extended Arabic-Indic digits</td>\n<td><code>۰۰۱۲۳۴۵۶۷۸۹</code> (U+06F0 to U+06F9)</td>\n</tr>\n<tr>\n<td><code>armn</code></td>\n<td>Armenian upper case numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>armnlow</code></td>\n<td>Armenian lower case numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>bali</code></td>\n<td>Balinese digits</td>\n<td><code>᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙</code> (U+1B50 to U+1B59)</td>\n</tr>\n<tr>\n<td><code>beng</code></td>\n<td>Bengali digits</td>\n<td><code>০১২৩৪৫৬৭৮৯</code> (U+09E6 to U+09EF)</td>\n</tr>\n<tr>\n<td><code>bhks</code></td>\n<td>Bhaiksuki digits</td>\n<td><code>𑱐𑱑𑱒𑱓𑱔𑱕𑱖𑱗𑱘𑱙</code> (U+11C50 to U+11C59)</td>\n</tr>\n<tr>\n<td><code>brah</code></td>\n<td>Brahmi digits</td>\n<td><code>𑁦𑁧𑁨𑁩𑁪𑁫𑁬𑁭𑁮𑁯</code> (U+11066 to U+1106F)</td>\n</tr>\n<tr>\n<td><code>cakm</code></td>\n<td>Chakma digits</td>\n<td><code>𑄶𑄷𑄸𑄹𑄺𑄻𑄼𑄽𑄾𑄿</code> (U+11136 to U+1113F)</td>\n</tr>\n<tr>\n<td><code>cham</code></td>\n<td>Cham digits</td>\n<td><code>꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙</code> (U+AA50 to U+AA59)</td>\n</tr>\n<tr>\n<td><code>cyrl</code></td>\n<td>Cyrillic numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>deva</code></td>\n<td>Devanagari digits</td>\n<td><code>०१२३४५६७८९</code> (U+0966 to U+096F)</td>\n</tr>\n<tr>\n<td><code>diak</code></td>\n<td>Dives Akuru digits</td>\n<td><code>𑥐𑥑𑥒𑥓𑥔𑥕𑥖𑥗𑥘𑥙</code> (U+11950 to U+11959)</td>\n</tr>\n<tr>\n<td><code>ethi</code></td>\n<td>Ethiopic numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>fullwide</code></td>\n<td>Full width digits</td>\n<td><code>０１２３４５６７８９</code> (U+FF10 to U+FF19)</td>\n</tr>\n<tr>\n<td><code>gara</code></td>\n<td>Garay digits</td>\n<td><code>𐵀𐵁𐵂𐵃𐵄𐵅𐵆𐵇𐵈𐵉</code> (U+10D40 to U+10D49)</td>\n</tr>\n<tr>\n<td><code>geor</code></td>\n<td>Georgian numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>gong</code></td>\n<td>Gunjala Gondi digits</td>\n<td><code>𑶠𑶡𑶢𑶣𑶤𑶥𑶦𑶧𑶨𑶩</code> (U+11DA0 to U+11DA9)</td>\n</tr>\n<tr>\n<td><code>gonm</code></td>\n<td>Masaram Gondi digits</td>\n<td><code>𑵐𑵑𑵒𑵓𑵔𑵕𑵖𑵗𑵘𑵙</code> (U+11D50 to U+11D59)</td>\n</tr>\n<tr>\n<td><code>grek</code></td>\n<td>Greek upper case numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>greklow</code></td>\n<td>Greek lower case numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>gujr</code></td>\n<td>Gujarati digits</td>\n<td><code>૦૧૨૩૪૫૬૭૮૯</code> (U+0AE6 to U+0AEF)</td>\n</tr>\n<tr>\n<td><code>gukh</code></td>\n<td>Gurung Khema digits</td>\n<td><code>𖄰𖄱𖄲𖄳𖄴𖄵𖄶𖄷𖄸𖄹</code> (U+16130 to U+16139)</td>\n</tr>\n<tr>\n<td><code>guru</code></td>\n<td>Gurmukhi digits</td>\n<td><code>੦੧੨੩੪੫੬੭੮੯</code> (U+0A66 to U+0A6F)</td>\n</tr>\n<tr>\n<td><code>hanidays</code></td>\n<td>Han-character day-of-month numbering for lunar/other traditional calendars</td>\n<td></td>\n</tr>\n<tr>\n<td><code>hanidec</code></td>\n<td>Positional decimal system using Chinese number ideographs as digits</td>\n<td><code>〇一二三四五六七八九</code> (U+3007, U+4E00, U+4E8C, U+4E09, U+56DB, U+4E94, U+516D, U+4E03, U+516B, U+4E5D)</td>\n</tr>\n<tr>\n<td><code>hans</code></td>\n<td>Simplified Chinese numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>hansfin</code></td>\n<td>Simplified Chinese financial numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>hant</code></td>\n<td>Traditional Chinese numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>hantfin</code></td>\n<td>Traditional Chinese financial numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>hebr</code></td>\n<td>Hebrew numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>hmng</code></td>\n<td>Pahawh Hmong digits</td>\n<td><code>𖭐𖭑𖭒𖭓𖭔𖭕𖭖𖭗𖭘𖭙</code> (U+16B50 to U+16B59)</td>\n</tr>\n<tr>\n<td><code>hmnp</code></td>\n<td>Nyiakeng Puachue Hmong digits</td>\n<td><code>𞅀𞅁𞅂𞅃𞅄𞅅𞅆𞅇𞅈𞅉</code> (U+1E140 to U+1E149)</td>\n</tr>\n<tr>\n<td><code>java</code></td>\n<td>Javanese digits</td>\n<td><code>꧐꧑꧒꧓꧔꧕꧖꧗꧘꧙</code> (U+A9D0 to U+A9D9)</td>\n</tr>\n<tr>\n<td><code>jpan</code></td>\n<td>Japanese numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>jpanfin</code></td>\n<td>Japanese financial numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>jpanyear</code></td>\n<td>Japanese first-year Gannen numbering for Japanese calendar</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>kali</code></td>\n<td>Kayah Li digits</td>\n<td><code>꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉</code> (U+A900 to U+A909)</td>\n</tr>\n<tr>\n<td><code>kawi</code></td>\n<td>Kawi digits</td>\n<td><code>𑽐𑽑𑽒𑽓𑽔𑽕𑽖𑽗𑽘𑽙</code> (U+11F50 to U+11F59)</td>\n</tr>\n<tr>\n<td><code>khmr</code></td>\n<td>Khmer digits</td>\n<td><code>០១២៣៤៥៦៧៨៩</code> (U+17E0 to U+17E9)</td>\n</tr>\n<tr>\n<td><code>knda</code></td>\n<td>Kannada digits</td>\n<td><code>೦೧೨೩೪೫೬೭೮೯</code> (U+0CE6 to U+0CEF)</td>\n</tr>\n<tr>\n<td><code>krai</code></td>\n<td>Kirat Rai digits</td>\n<td><code>𖵰𖵱𖵲𖵳𖵴𖵵𖵶𖵷𖵸𖵹</code> (U+16D70 to U+16D79)</td>\n</tr>\n<tr>\n<td><code>lana</code></td>\n<td>Tai Tham Hora (secular) digits</td>\n<td><code>᪀᪁᪂᪃᪄᪅᪆᪇᪈᪉</code> (U+1A80 to U+1A89)</td>\n</tr>\n<tr>\n<td><code>lanatham</code></td>\n<td>Tai Tham (ecclesiastical) digits</td>\n<td><code>᪐᪑᪒᪓᪔᪕᪖᪗᪘᪙</code> (U+1A90 to U+1A99)</td>\n</tr>\n<tr>\n<td><code>laoo</code></td>\n<td>Lao digits</td>\n<td><code>໐໑໒໓໔໕໖໗໘໙</code> (U+0ED0 to U+0ED9)</td>\n</tr>\n<tr>\n<td><code>latn</code></td>\n<td>Latin digits</td>\n<td><code>0123456789</code> (U+0030 to U+0039)</td>\n</tr>\n<tr>\n<td><code>lepc</code></td>\n<td>Lepcha digits</td>\n<td><code>᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉</code> (U+1C40 to U+1C49)</td>\n</tr>\n<tr>\n<td><code>limb</code></td>\n<td>Limbu digits</td>\n<td><code>᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏</code> (U+1946 to U+194F)</td>\n</tr>\n<tr>\n<td><code>mathbold</code></td>\n<td>Mathematical bold digits</td>\n<td><code>𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗</code> (U+1D7CE to U+1D7D7)</td>\n</tr>\n<tr>\n<td><code>mathdbl</code></td>\n<td>Mathematical double-struck digits</td>\n<td><code>𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡</code> (U+1D7D8 to U+1D7E1)</td>\n</tr>\n<tr>\n<td><code>mathmono</code></td>\n<td>Mathematical monospace digits</td>\n<td><code>𝟶𝟷𝟸𝟹𝟺𝟻𝟼𝟽𝟾𝟿</code> (U+1D7F6 to U+1D7FF)</td>\n</tr>\n<tr>\n<td><code>mathsanb</code></td>\n<td>Mathematical sans-serif bold digits</td>\n<td><code>𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵</code> (U+1D7EC to U+1D7F5)</td>\n</tr>\n<tr>\n<td><code>mathsans</code></td>\n<td>Mathematical sans-serif digits</td>\n<td><code>𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫</code> (U+1D7E2 to U+1D7EB)</td>\n</tr>\n<tr>\n<td><code>mlym</code></td>\n<td>Malayalam digits</td>\n<td><code>൦൧൨൩൪൫൬൭൮൯</code> (U+0D66 to U+0D6F)</td>\n</tr>\n<tr>\n<td><code>modi</code></td>\n<td>Modi digits</td>\n<td><code>𑙐𑙑𑙒𑙓𑙔𑙕𑙖𑙗𑙘𑙙</code> (U+11650 to U+11659)</td>\n</tr>\n<tr>\n<td><code>mong</code></td>\n<td>Mongolian digits</td>\n<td><code>᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙</code> (U+1810 to U+1819)</td>\n</tr>\n<tr>\n<td><code>mroo</code></td>\n<td>Mro digits</td>\n<td><code>𖩠𖩡𖩢𖩣𖩤𖩥𖩦𖩧𖩨𖩩</code> (U+16A60 to U+16A69)</td>\n</tr>\n<tr>\n<td><code>mtei</code></td>\n<td>Meetei Mayek digits</td>\n<td><code>꯰꯱꯲꯳꯴꯵꯶꯷꯸꯹</code> (U+ABF0 to U+ABF9)</td>\n</tr>\n<tr>\n<td><code>mymr</code></td>\n<td>Myanmar digits</td>\n<td><code>၀၁၂၃၄၅၆၇၈၉</code> (U+1040 to U+1049)</td>\n</tr>\n<tr>\n<td><code>mymrepka</code></td>\n<td>Myanmar Eastern Pwo Karen digits</td>\n<td><code>𑛚𑛛𑛜𑛝𑛞𑛟𑛠𑛡𑛢𑛣</code> (U+116DA to U+116E3)</td>\n</tr>\n<tr>\n<td><code>mymrpao</code></td>\n<td>Myanmar Pao digits</td>\n<td><code>𑛐𑛑𑛒𑛓𑛔𑛕𑛖𑛗𑛘𑛙</code> (U+116D0 to U+116D9)</td>\n</tr>\n<tr>\n<td><code>mymrshan</code></td>\n<td>Myanmar Shan digits</td>\n<td><code>႐႑႒႓႔႕႖႗႘႙</code> (U+1090 to U+1099)</td>\n</tr>\n<tr>\n<td><code>mymrtlng</code></td>\n<td>Myanmar Tai Laing digits</td>\n<td><code>꧰꧱꧲꧳꧴꧵꧶꧷꧸꧹</code> (U+A9F0 to U+A9F9)</td>\n</tr>\n<tr>\n<td><code>nagm</code></td>\n<td>Nag Mundari digits</td>\n<td><code>𞓰𞓱𞓲𞓳𞓴𞓵𞓶𞓷𞓸𞓹</code> (U+1E4F0 to U+1E4F9)</td>\n</tr>\n<tr>\n<td><code>newa</code></td>\n<td>Newa digits</td>\n<td><code>𑑐𑑑𑑒𑑓𑑔𑑕𑑖𑑗𑑘𑑙</code> (U+11450 to U+11459)</td>\n</tr>\n<tr>\n<td><code>nkoo</code></td>\n<td>N'Ko digits</td>\n<td><code>߀߁߂߃߄߅߆߇߈߉</code> (U+07C0 to U+07C9)</td>\n</tr>\n<tr>\n<td><code>olck</code></td>\n<td>Ol Chiki digits</td>\n<td><code>᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙</code> (U+1C50 to U+1C59)</td>\n</tr>\n<tr>\n<td><code>onao</code></td>\n<td>Ol Onal digits</td>\n<td><code>𞗱𞗲𞗳𞗴𞗵𞗶𞗷𞗸𞗹𞗺</code> (U+1E5F1 to U+1E5FA)</td>\n</tr>\n<tr>\n<td><code>orya</code></td>\n<td>Oriya digits</td>\n<td><code>୦୧୨୩୪୫୬୭୮୯</code> (U+0B66 to U+0B6F)</td>\n</tr>\n<tr>\n<td><code>osma</code></td>\n<td>Osmanya digits</td>\n<td><code>𐒠𐒡𐒢𐒣𐒤𐒥𐒦𐒧𐒨𐒩</code> (U+104A0 to U+104A9)</td>\n</tr>\n<tr>\n<td><code>outlined</code></td>\n<td>Legacy computing outlined digits</td>\n<td><code>𜳰𜳱𜳲𜳳𜳴𜳵𜳶𜳷𜳸𜳹</code> (U+1CCF0 to U+1CCF9)</td>\n</tr>\n<tr>\n<td><code>rohg</code></td>\n<td>Hanifi Rohingya digits</td>\n<td><code>𐴰𐴱𐴲𐴳𐴴𐴵𐴶𐴷𐴸𐴹</code> (U+10D30 to U+10D39)</td>\n</tr>\n<tr>\n<td><code>roman</code></td>\n<td>Roman upper case numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>romanlow</code></td>\n<td>Roman lowercase numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>saur</code></td>\n<td>Saurashtra digits</td>\n<td><code>꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙</code> (U+A8D0 to U+A8D9)</td>\n</tr>\n<tr>\n<td><code>segment</code></td>\n<td>Legacy computing segmented digits</td>\n<td><code>🯰🯱🯲🯳🯴🯵🯶🯷🯸🯹</code> (U+1FBF0 to U+1FBF9)</td>\n</tr>\n<tr>\n<td><code>shrd</code></td>\n<td>Sharada digits</td>\n<td><code>𑇐𑇑𑇒𑇓𑇔𑇕𑇖𑇗𑇘𑇙</code> (U+111D0 to U+111D9)</td>\n</tr>\n<tr>\n<td><code>sind</code></td>\n<td>Khudawadi digits</td>\n<td><code>𑋰𑋱𑋲𑋳𑋴𑋵𑋶𑋷𑋸𑋹</code> (U+112F0 to U+112F9)</td>\n</tr>\n<tr>\n<td><code>sinh</code></td>\n<td>Sinhala Lith digits</td>\n<td><code>෦෧෨෩෪෫෬෭෮෯</code> (U+0DE6 to U+0DEF)</td>\n</tr>\n<tr>\n<td><code>sora</code></td>\n<td>Sora_Sompeng digits</td>\n<td><code>𑃰𑃱𑃲𑃳𑃴𑃵𑃶𑃷𑃸𑃹</code> (U+110F0 to U+110F9)</td>\n</tr>\n<tr>\n<td><code>sund</code></td>\n<td>Sundanese digits</td>\n<td><code>᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹</code> (U+1BB0 to U+1BB9)</td>\n</tr>\n<tr>\n<td><code>sunu</code></td>\n<td>Sunuwar digits</td>\n<td><code>𑯰𑯱𑯲𑯳𑯴𑯵𑯶𑯷𑯸𑯹</code> (U+11BF0 to U+11BF9)</td>\n</tr>\n<tr>\n<td><code>takr</code></td>\n<td>Takri digits</td>\n<td><code>𑛀𑛁𑛂𑛃𑛄𑛅𑛆𑛇𑛈𑛉</code> (U+116C0 to U+116C9)</td>\n</tr>\n<tr>\n<td><code>talu</code></td>\n<td>New Tai Lue digits</td>\n<td><code>᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙</code> (U+19D0 to U+19D9)</td>\n</tr>\n<tr>\n<td><code>taml</code></td>\n<td>Tamil numerals</td>\n<td>algorithmic</td>\n</tr>\n<tr>\n<td><code>tamldec</code></td>\n<td>Modern Tamil decimal digits</td>\n<td><code>௦௧௨௩௪௫௬௭௮௯</code> (U+0BE6 to U+0BEF)</td>\n</tr>\n<tr>\n<td><code>telu</code></td>\n<td>Telugu digits</td>\n<td><code>౦౧౨౩౪౫౬౭౮౯</code> (U+0C66 to U+0C6F)</td>\n</tr>\n<tr>\n<td><code>thai</code></td>\n<td>Thai digits</td>\n<td><code>๐๑๒๓๔๕๖๗๘๙</code> (U+0E50 to U+0E59)</td>\n</tr>\n<tr>\n<td><code>tibt</code></td>\n<td>Tibetan digits</td>\n<td><code>༠༡༢༣༤༥༦༧༨༩</code> (U+0F20 to U+0F29)</td>\n</tr>\n<tr>\n<td><code>tirh</code></td>\n<td>Tirhuta digits</td>\n<td><code>𑓐𑓑𑓒𑓓𑓔𑓕𑓖𑓗𑓘𑓙</code> (U+114D0 to U+114D9)</td>\n</tr>\n<tr>\n<td><code>tnsa</code></td>\n<td>Tangsa digits</td>\n<td><code>𖫀𖫁𖫂𖫃𖫄𖫅𖫆𖫇𖫈𖫉</code> (U+16AC0 to U+16AC9)</td>\n</tr>\n<tr>\n<td><code>vaii</code></td>\n<td>Vai digits</td>\n<td><code>꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩</code> (U+A620 to U+A629)</td>\n</tr>\n<tr>\n<td><code>wara</code></td>\n<td>Warang Citi digits</td>\n<td><code>𑣠𑣡𑣢𑣣𑣤𑣥𑣦𑣧𑣨𑣩</code> (U+118E0 to U+118E9)</td>\n</tr>\n<tr>\n<td><code>wcho</code></td>\n<td>Wancho digits</td>\n<td><code>𞋰𞋱𞋲𞋳𞋴𞋵𞋶𞋷𞋸𞋹</code> (U+1E2F0 to U+1E2F9)</td>\n</tr>\n</tbody>\n</table></figure>\n<p>There are three special values: <code>native</code>, <code>traditio</code>, and <code>finance</code>, whose meanings are locale-dependent, and will be resolved to the right system depending on the locale. Therefore, the <code>resolvedOptions()</code> methods will never return these values, but <code>Intl.Locale.prototype.numberingSystem</code> will (if provided as input).\n<p>References:\n<ul>\n<li><a href=\"https://github.com/unicode-org/cldr/blob/main/common/bcp47/number.xml\" class=\"external\" target=\"_blank\">CLDR Numbering system type keys</a></li>\n<li><a href=\"https://github.com/unicode-org/cldr/blob/main/common/supplemental/numberingSystems.xml\" class=\"external\" target=\"_blank\">CLDR Numbering system definitions</a></li>\n<li><a href=\"https://unicode.org/reports/tr35/tr35-numbers.html#Numbering_Systems\" class=\"external\" target=\"_blank\">UTS 35, Numbering systems</a></li>\n</ul>\n<h4 id=\"supported_time_zone_identifiers\">Supported time zone identifiers</h4>\n<p>Supported time zone identifiers can be used for the <code>timeZone</code> option when creating objects such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a>, as well as for creating <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal\"><code>Temporal</code></a> date objects. There are over 400 identifiers in common use so we won't list them. For an exhaustive list of possible identifiers, see the <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" class=\"external\" target=\"_blank\">Wikipedia article</a> or the <a href=\"https://www.iana.org/time-zones\" class=\"external\" target=\"_blank\">IANA time zone database</a>.\n<p>As you browse the list, note that the standardization of <code>Temporal</code> requires browsers to always return the primary identifier in the IANA database, which may change over time. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information. For example, the returned array should contain <code>\"Asia/Kolkata\"</code> instead of <code>\"Asia/Calcutta\"</code> because the latter is an alias of the former and they both correspond to India; however, it should contain both <code>\"Africa/Abidjan\"</code> and <code>\"Atlantic/Reykjavik\"</code> because they are in different countries, despite the latter also being an alias of the former.\n<p>References:\n<ul>\n<li><a href=\"https://www.iana.org/time-zones\" class=\"external\" target=\"_blank\">IANA Time Zone Database</a></li>\n<li><a href=\"https://unicode.org/reports/tr35/tr35-dates.html#Time_Zone_Identifiers\" class=\"external\" target=\"_blank\">UTS 35, Time Zone Identifiers</a></li>\n</ul>\n<h4 id=\"supported_unit_identifiers\">Supported unit identifiers</h4>\n<p>Below are all values that are commonly supported by browsers for the <code>unit</code> key. These values can be used for the <code>unit</code> option when creating objects such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a>. This list is a subset of the CLDR explicitly sanctioned by the ECMA-402 specification, so all implementations should be consistent.\n<ul>\n<li><code>acre</code></li>\n<li><code>bit</code></li>\n<li><code>byte</code></li>\n<li><code>celsius</code></li>\n<li><code>centimeter</code></li>\n<li><code>day</code></li>\n<li><code>degree</code></li>\n<li><code>fahrenheit</code></li>\n<li><code>fluid-ounce</code></li>\n<li><code>foot</code></li>\n<li><code>gallon</code></li>\n<li><code>gigabit</code></li>\n<li><code>gigabyte</code></li>\n<li><code>gram</code></li>\n<li><code>hectare</code></li>\n<li><code>hour</code></li>\n<li><code>inch</code></li>\n<li><code>kilobit</code></li>\n<li><code>kilobyte</code></li>\n<li><code>kilogram</code></li>\n<li><code>kilometer</code></li>\n<li><code>liter</code></li>\n<li><code>megabit</code></li>\n<li><code>megabyte</code></li>\n<li><code>meter</code></li>\n<li><code>microsecond</code></li>\n<li><code>mile</code></li>\n<li><code>mile-scandinavian</code></li>\n<li><code>milliliter</code></li>\n<li><code>millimeter</code></li>\n<li><code>millisecond</code></li>\n<li><code>minute</code></li>\n<li><code>month</code></li>\n<li><code>nanosecond</code></li>\n<li><code>ounce</code></li>\n<li><code>percent</code></li>\n<li><code>petabyte</code></li>\n<li><code>pound</code></li>\n<li><code>second</code></li>\n<li><code>stone</code></li>\n<li><code>terabit</code></li>\n<li><code>terabyte</code></li>\n<li><code>week</code></li>\n<li><code>yard</code></li>\n<li><code>year</code></li>\n</ul>\n<p>When specifying units, you can also combine two units with the \"-per-\" separator. For example, <code>meter-per-second</code> or <code>liter-per-megabyte</code>.\n<p>References:\n<ul>\n<li><a href=\"https://tc39.es/ecma402/#table-sanctioned-single-unit-identifiers\" class=\"external\" target=\"_blank\">ECMA-402 sanctioned single units</a></li>\n<li><a href=\"https://github.com/unicode-org/cldr/blob/main/common/validity/unit.xml\" class=\"external\" target=\"_blank\">CLDR Unit validity data</a></li>\n<li><a href=\"https://unicode.org/reports/tr35/tr35-general.html#Unit_Identifiers\" class=\"external\" target=\"_blank\">UTS 35, Unit identifiers</a></li>\n</ul>",
      "throws": {
        "RangeError": "Thrown if an unsupported key was passed as a parameter."
      }
    },
    "isfinite": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/isfinite",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>isFinite()</code></strong> function determines whether a value is finite, first converting the value to a number if necessary. A finite number is one that's not <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> or ±<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>. Because coercion inside the <code>isFinite()</code> function can be <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/isNaN#description\">surprising</a>, you may prefer to use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/isFinite\"><code>Number.isFinite()</code></a>.",
      "parameters": {
        "value": "The value to be tested."
      },
      "returns": "<code>false</code> if the given value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, or <code>-Infinity</code> after being <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">converted to a number</a>; otherwise, <code>true</code>."
    },
    "isnan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/isnan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>isNaN()</code></strong> function determines whether a value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, first converting the value to a number if necessary. Because coercion inside the <code>isNaN()</code> function can be <a href=\"#description\">surprising</a>, you may prefer to use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a>.",
      "parameters": {
        "value": "The value to be tested."
      },
      "returns": "<code>true</code> if the given value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> after being <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">converted to a number</a>; otherwise, <code>false</code>."
    },
    "iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "17",
        "FirefoxAndroid": "17",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "An <strong><code>Iterator</code></strong> object is an object that conforms to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\">iterator protocol</a> by providing a <code>next()</code> method that returns an iterator result object. All built-in iterators inherit from the <code>Iterator</code> class. The <code>Iterator</code> class provides a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator/Symbol.iterator\"><code>[Symbol.iterator]()</code></a> method that returns the iterator object itself, making the iterator also <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a>. It also provides some helper methods for working with iterators."
    },
    "iterator.drop": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/drop",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>drop()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a> that skips the given number of elements at the start of this iterator.",
      "parameters": {
        "limit": "The number of elements to drop from the start of the iteration."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a>. The first time the returned iterator helper's <code>next()</code> method is called, the current iterator is immediately advanced by <code>limit</code> elements, and then the next element (the <code>limit+1</code>-th element) is yielded. The iterator helper then yields the remaining elements one-by-one. If the current iterator has fewer than <code>limit</code> elements, the new iterator helper will be immediately completed the first time <code>next()</code> is called.",
      "throws": {
        "RangeError": "Thrown if <code>limit</code> becomes <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> or negative when <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>."
      }
    },
    "iterator.every": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/every",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>every()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a>: it tests whether all elements produced by the iterator pass the test implemented by the provided function. It returns a boolean value.",
      "parameters": {
        "callbackFn": "A function to execute for each element produced by the iterator. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed.\n</dd>\n</dl>"
      },
      "returns": "<code>true</code> if <code>callbackFn</code> returns a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value for every element. Otherwise, <code>false</code>."
    },
    "iterator.filter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/filter",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>filter()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a> that yields only those elements of the iterator for which the provided callback function returns <code>true</code>.",
      "parameters": {
        "callbackFn": "A function to execute for each element produced by the iterator. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to make the element yielded by the iterator helper, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed.\n</dd>\n</dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a>. Each time the iterator helper's <code>next()</code> method is called, it returns the next element in the iterator for which the callback function returns <code>true</code>. When the underlying iterator is completed, the iterator helper object is also completed (the <code>next()</code> method produces <code>{ value: undefined, done: true }</code>)."
    },
    "iterator.find": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/find",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>find()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>Array.prototype.find()</code></a>: it returns the first element produced by the iterator that satisfies the provided testing function. If no values satisfy the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.",
      "parameters": {
        "callbackFn": "A function to execute for each element produced by the iterator. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed.\n</dd>\n</dl>"
      },
      "returns": "The first element produced by the iterator that satisfies the provided testing function. Otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned."
    },
    "iterator.flatmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/flatmap",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>flatMap()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a> that takes each element in the original iterator, runs it through a mapping function, and yields elements returned by the mapping function (which are contained in another iterator or iterable).",
      "parameters": {
        "callbackFn": "A function to execute for each element produced by the iterator. It should return an iterator or iterable that yields elements to be yielded by <code>flatMap()</code>. Note that unlike <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>Array.prototype.flatMap()</code></a>, you cannot return single non-iterator/iterable values. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the array.\n</dd>\n</dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a>. The first time the iterator helper's <code>next()</code> method is called, it calls <code>callbackFn</code> on the first element produced by the underlying iterator, and the return value, which should be an iterator or iterable, is yielded one-by-one by the iterator helper (like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/yield*\"><code>yield*</code></a>). The next element is fetched from the underlying iterator when the previous one returned by <code>callbackFn</code> is completed. When the underlying iterator is completed, the iterator helper is also completed (the <code>next()</code> method produces <code>{ value: undefined, done: true }</code>).",
      "throws": {
        "TypeError": "Thrown if <code>callbackFn</code> returns a non-iterator/iterable value or a string primitive."
      }
    },
    "iterator.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/foreach",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>forEach()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a>: it executes a provided function once for each element produced by the iterator.",
      "parameters": {
        "callbackFn": "A function to execute for each element produced by the iterator. Its return value is discarded. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed.\n</dd>\n</dl>"
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "iterator.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/from",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>Iterator.from()</code></strong> static method creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> object from an iterator or iterable object.",
      "parameters": {
        "object": "An object that implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> protocol or the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\">iterator</a> protocol."
      },
      "returns": "If <code>object</code> is an iterable, its <code>[Symbol.iterator]()</code> method is called to obtain the iterator. Otherwise, <code>object</code> is assumed to be an iterator. If the iterator is already <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> (which means it has <code>Iterator.prototype</code> in its prototype chain), it is returned directly. Otherwise, a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> object is created that wraps the original iterator."
    },
    "iterator.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>Iterator()</code></strong> constructor is intended to be used as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Classes/extends\">superclass</a> of other classes that create iterators. It throws an error when constructed by itself.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> object.",
      "throws": {
        "TypeError": "When <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a> is the <code>Iterator</code> function itself, i.e., when the <code>Iterator</code> constructor itself is constructed."
      }
    },
    "iterator.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/map",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>map()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a> that yields elements of the iterator, each transformed by a mapping function.",
      "parameters": {
        "callbackFn": "A function to execute for each element produced by the iterator. Its return value is yielded by the iterator helper. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed.\n</dd>\n</dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a>. Each time the iterator helper's <code>next()</code> method is called, it gets the next element from the underlying iterator, applies <code>callbackFn</code>, and yields the return value. When the underlying iterator is completed, the iterator helper is also completed (the <code>next()</code> method produces <code>{ value: undefined, done: true }</code>)."
    },
    "iterator.reduce": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/reduce",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>reduce()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>Array.prototype.reduce</code></a>: it executes a user-supplied \"reducer\" callback function on each element produced by the iterator, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements is a single value.",
      "parameters": {
        "callbackFn": "A function to execute for each element produced by the iterator. Its return value becomes the value of the <code>accumulator</code> parameter on the next invocation of <code>callbackFn</code>. For the last invocation, the return value becomes the return value of <code>reduce()</code>. The function is called with the following arguments:\n<dl>\n<dt id=\"accumulator\"><a href=\"#accumulator\"><code>accumulator</code></a></dt>\n<dd>\n<p>The value resulting from the previous call to <code>callbackFn</code>. On the first call, its value is <code>initialValue</code> if the latter is specified; otherwise its value is the first element of the iterator.\n</dd>\n<dt id=\"currentvalue\"><a href=\"#currentvalue\"><code>currentValue</code></a></dt>\n<dd>\n<p>The value of the current element. On the first call, its value is the first element of the iterator if <code>initialValue</code> is specified; otherwise its value is the second element.\n</dd>\n<dt id=\"currentindex\"><a href=\"#currentindex\"><code>currentIndex</code></a></dt>\n<dd>\n<p>The index position of <code>currentValue</code>. On the first call, its value is <code>0</code> if <code>initialValue</code> is specified, otherwise <code>1</code>.\n</dd>\n</dl>",
        "initialValue": "A value to which <code>accumulator</code> is initialized the first time the callback is called. If <code>initialValue</code> is specified, <code>callbackFn</code> starts executing with the first element as <code>currentValue</code>. If <code>initialValue</code> is <em>not</em> specified, <code>accumulator</code> is initialized to the first element, and <code>callbackFn</code> starts executing with the second element as <code>currentValue</code>. In this case, if the iterator is empty (so that there's no first value to return as <code>accumulator</code>), an error is thrown."
      },
      "returns": "The value that results from running the \"reducer\" callback function to completion over the entire iterator.",
      "throws": {
        "TypeError": "Thrown if the iterator contains no elements and <code>initialValue</code> is not provided."
      }
    },
    "iterator.some": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/some",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>some()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a>: it tests whether at least one element produced by the iterator passes the test implemented by the provided function. It returns a boolean value.",
      "parameters": {
        "callbackFn": "A function to execute for each element produced by the iterator. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed.\n</dd>\n</dl>"
      },
      "returns": "<code>true</code> if the callback function returns a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value for at least one element. Otherwise, <code>false</code>."
    },
    "iterator.symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/symbol.iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>[Symbol.iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows built-in iterators to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns the value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>, which is the iterator object itself.",
      "returns": "The value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>, which is the iterator object itself."
    },
    "iterator.take": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/take",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>take()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a> that yields the given number of elements in this iterator and then terminates.",
      "parameters": {
        "limit": "The number of elements to take from the start of the iteration."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_objects\">iterator helper object</a>. The returned iterator helper yields the elements in the original iterator one-by-one, and then completes (the <code>next()</code> method produces <code>{ value: undefined, done: true }</code>) once <code>limit</code> elements have been yielded, or when the original iterator is exhausted, whichever comes first.",
      "throws": {
        "RangeError": "Thrown if <code>limit</code> becomes <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> or negative when <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>."
      }
    },
    "iterator.toarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/toarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "131",
        "FirefoxAndroid": "131",
        "Opera": "108",
        "Safari": "18.4",
        "SafariIOS": "18.4",
        "Nodejs": "22.0.0",
        "Deno": "1.39"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-03-31"
      },
      "doc": "The <strong><code>toArray()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance populated with the elements yielded from the iterator.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance containing the elements from the iterator in the order they were produced."
    },
    "json": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "3.5",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "4",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>JSON</code></strong> namespace object contains static methods for parsing values from and converting values to <a href=\"https://json.org/\" class=\"external\" target=\"_blank\">JavaScript Object Notation</a> (<a href=\"$MDN_URL$/Glossary/JSON\">JSON</a>)."
    },
    "json.israwjson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/israwjson",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "114",
        "ChromeAndroid": "114",
        "Edge": "114",
        "Firefox": "135",
        "FirefoxAndroid": "135",
        "Opera": "100",
        "Nodejs": "21.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>JSON.isRawJSON()</code></strong> static method tests whether a value is an object returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON\"><code>JSON.rawJSON()</code></a>.",
      "parameters": {
        "value": "The value to test."
      },
      "returns": "<code>true</code> if <code>value</code> is created by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON\"><code>JSON.rawJSON()</code></a>; otherwise, <code>false</code>."
    },
    "json.parse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/parse",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "3.5",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "4",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>JSON.parse()</code></strong> static method parses a JSON string, constructing the JavaScript value or object described by the string. An optional <em>reviver</em> function can be provided to perform a transformation on the resulting object before it is returned.",
      "parameters": {
        "text": "The string to parse as JSON. See the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON\"><code>JSON</code></a> object for a description of JSON syntax.",
        "reviver": "If a function, this prescribes how each value originally produced by parsing is transformed before being returned. Non-callable values are ignored. The function is called with the following arguments:\n<dl>\n<dt id=\"key\"><a href=\"#key\"><code>key</code></a></dt>\n<dd>\n<p>The key associated with the value.\n</dd>\n<dt id=\"value\"><a href=\"#value\"><code>value</code></a></dt>\n<dd>\n<p>The value produced by parsing.\n</dd>\n<dt id=\"context\"><a href=\"#context\"><code>context</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A context object that holds state relevant to the current expression being revived. It is a new object for each invocation of the reviver function. It is only passed when reviving primitive values, but not when <code>value</code> is an object or array. It contains the following property:\n<dl>\n<dt id=\"source\"><a href=\"#source\"><code>source</code></a></dt>\n<dd>\n<p>The original JSON string representing this value.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>, string, number, boolean, or <code>null</code> value corresponding to the given JSON <code>text</code>.",
      "throws": {
        "SyntaxError": "Thrown if the string to parse is not valid JSON."
      }
    },
    "json.rawjson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/rawjson",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "114",
        "ChromeAndroid": "114",
        "Edge": "114",
        "Firefox": "135",
        "FirefoxAndroid": "135",
        "Opera": "100",
        "Nodejs": "21.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>JSON.rawJSON()</code></strong> static method creates a \"raw JSON\" object containing a piece of JSON text. When serialized to JSON, the raw JSON object is treated as if it is already a piece of JSON. This text is required to be valid JSON.",
      "parameters": {
        "string": "The JSON text. Must be valid JSON <strong>representing a primitive value</strong>."
      },
      "returns": "An object that can be used to create JSON text with the exact same content as the <code>string</code> provided, without quotes around the string itself. This object <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects\">has <code>null</code> prototype</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/freeze\">is frozen</a> (so it never gets accidentally serialized as a regular object by any kind of primitive conversion), and the following property:\n<dl>\n<dt id=\"rawjson\"><a href=\"#rawjson\"><code>rawJSON</code></a></dt>\n<dd>\n<p>The original JSON <code>string</code> provided.\n</dd>\n</dl>\n<p>Furthermore, it has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Classes/Private_properties\">private property</a> that marks itself as a raw JSON object. This allows it to be identified by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/isRawJSON\"><code>JSON.isRawJSON()</code></a>.",
      "throws": {
        "SyntaxError": "Thrown if the <code>string</code> is not valid JSON, or if it represents an object or array."
      }
    },
    "json.stringify": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/stringify",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "3.5",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "4",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>JSON.stringify()</code></strong> static method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",
      "parameters": {
        "value": "The value to convert to a JSON string.",
        "replacer": "A function that alters the behavior of the stringification process, or an array of strings and numbers that specifies properties of <code>value</code> to be included in the output. If <code>replacer</code> is an array, all elements in this array that are not strings or numbers (either primitives or wrapper objects), including <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> values, are completely ignored. If <code>replacer</code> is anything other than a function or an array (e.g., <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> or not provided), all string-keyed properties of the object are included in the resulting JSON string.",
        "space": "A string or number that's used to insert white space (including indentation, line break characters, etc.) into the output JSON string for readability purposes.\n<p>If this is a number, it indicates the number of space characters to be used as indentation, clamped to 10 (that is, any number greater than <code>10</code> is treated as if it were <code>10</code>). Values less than 1 indicate that no space should be used.\n<p>If this is a string, the string (or the first 10 characters of the string, if it's longer than that) is inserted before every nested object or array.\n<p>If <code>space</code> is anything other than a string or number (can be either a primitive or a wrapper object) — for example, is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> or not provided — no white space is used."
      },
      "returns": "A JSON string representing the given value, or undefined.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>value</code> contains a circular reference.</li>\n<li>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> value is encountered.</li>\n</ul>"
      }
    },
    "map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Map</code></strong> object holds key-value pairs and remembers the original insertion order of the keys.\nAny value (both objects and <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a>) may be used as either a key or a value."
    },
    "map.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/clear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "19",
        "FirefoxAndroid": "19",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>clear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances removes all elements from this map.",
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>)."
    },
    "map.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/delete",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>delete()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances removes the specified element from this map by\nkey.",
      "parameters": {
        "key": "The key of the element to remove from the <code>Map</code> object."
      },
      "returns": "<code>true</code> if an element in the <code>Map</code> object existed and has been removed, or\n<code>false</code> if the element does not exist."
    },
    "map.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "20",
        "FirefoxAndroid": "20",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>entries()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">map iterator</a></em> object that contains the <code>[key, value]</code> pairs for each element in this map in insertion order.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "map.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/foreach",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>forEach()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances executes a provided function once per each key/value\npair in this map, in insertion order.",
      "parameters": {
        "callbackFn": "A function to execute for each entry in the map. The function is called with the following arguments:\n<dl>\n<dt id=\"value\"><a href=\"#value\"><code>value</code></a></dt>\n<dd>\n<p>Value of each iteration.\n</dd>\n<dt id=\"key\"><a href=\"#key\"><code>key</code></a></dt>\n<dd>\n<p>Key of each iteration.\n</dd>\n<dt id=\"map\"><a href=\"#map\"><code>map</code></a></dt>\n<dd>\n<p>The map being iterated.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>)."
    },
    "map.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/get",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>get()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances returns a specified element from this map. If the\nvalue that is associated to the provided key is an object, then you will get a\nreference to that object and any change made to that object will effectively\nmodify it inside the <code>Map</code> object.",
      "parameters": {
        "key": "The key of the element to return from the <code>Map</code> object."
      },
      "returns": "The element associated with the specified key, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the key can't be found in the <code>Map</code> object."
    },
    "map.groupby": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/groupby",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "117",
        "ChromeAndroid": "117",
        "Edge": "117",
        "Firefox": "119",
        "FirefoxAndroid": "119",
        "Opera": "103",
        "Safari": "17.4",
        "SafariIOS": "17.4",
        "Nodejs": "21.0.0",
        "Deno": "1.37"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-03-05"
      },
      "doc": "<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn some versions of some browsers, this method was implemented as the method <code>Array.prototype.groupToMap()</code>. Due to web compatibility issues, it is now implemented as a static method. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>\n<p>The <strong><code>Map.groupBy()</code></strong> static method groups the elements of a given iterable using the values returned by a provided callback function. The final returned <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> uses the unique values from the test function as keys, which can be used to get the array of elements in each group.\n<p>The method is primarily useful when grouping elements that are associated with an object, and in particular when that object might change over time. If the object is invariant, you might instead represent it using a string, and group elements with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/groupBy\"><code>Object.groupBy()</code></a>.",
      "parameters": {
        "items": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) whose elements will be grouped.",
        "callbackFn": "A function to execute for each element in the iterable. It should return a value (<a href=\"$MDN_URL$/Glossary/Object\">object</a> or <a href=\"$MDN_URL$/Glossary/Primitive\">primitive</a>) indicating the group of the current element. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed.\n</dd>\n</dl>"
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> object with keys for each group, each assigned to an array containing the elements of the associated group."
    },
    "map.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>has()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances returns a boolean indicating whether an element with the\nspecified key exists in this map or not.",
      "parameters": {
        "key": "The key of the element to test for presence in the <code>Map</code> object."
      },
      "returns": "<code>true</code> if an element with the specified key exists in the <code>Map</code> object;\notherwise <code>false</code>."
    },
    "map.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/keys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "20",
        "FirefoxAndroid": "20",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>keys()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">map iterator</a></em> object that contains the keys for each element in this map in insertion order.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "map.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/map",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Map()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> objects.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> or other\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable</a> object\nwhose elements are key-value pairs. (For example, arrays with two elements,\nsuch as <code>[[ 1, 'one' ],[ 2, 'two' ]]</code>.) Each key-value pair is added to the\nnew <code>Map</code>."
      }
    },
    "map.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>set()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances adds or updates an entry in this map with a specified key and a value.",
      "parameters": {
        "key": "The key of the element to add to the <code>Map</code> object. The key may be any <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures\">JavaScript type</a> (any <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_values\">primitive value</a> or any type of <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#objects\">JavaScript object</a>).",
        "value": "The value of the element to add to the <code>Map</code> object. The value may be any <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures\">JavaScript type</a> (any <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_values\">primitive value</a> or any type of <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#objects\">JavaScript object</a>)."
      },
      "returns": "The <code>Map</code> object."
    },
    "map.size": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/size",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "19",
        "FirefoxAndroid": "19",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>size</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances returns the number of elements in this map."
    },
    "map.symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/symbol.iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>[Symbol.iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows <code>Map</code> objects to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">map iterator object</a> that yields the key-value pairs of the map in insertion order.\n<p>The initial value of this property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries</code></a> property.",
      "returns": "The same return value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a>: a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the key-value pairs of the map."
    },
    "map.symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/symbol.species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "41",
        "FirefoxAndroid": "41",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Map[Symbol.species]</code></strong> static accessor property is an unused accessor property specifying how to copy <code>Map</code> objects.",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get [Symbol.species]</code> was called. The return value is used to construct copied <code>Map</code> instances."
    },
    "map.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "20",
        "FirefoxAndroid": "20",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>values()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">map iterator</a></em> object that contains the values for each element in this map in insertion order.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "math": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math</code></strong> namespace object contains static properties and methods for mathematical constants and functions.\n<p><code>Math</code> works with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> type. It doesn't work with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>."
    },
    "math.abs": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/abs",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.abs()</code></strong> static method returns the absolute value of a number.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The absolute value of <code>x</code>. If <code>x</code> is negative or <code>-0</code>, returns its opposite number <code>-x</code> (which is non-negative). Otherwise, returns <code>x</code> itself. The result is therefore always a positive number or <code>0</code>."
    },
    "math.acos": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/acos",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.acos()</code></strong> static method returns the inverse cosine (in radians) of a number. That is,\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mrow><mo>−</mo><mn>1</mn></mrow><mo>,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚌𝚘𝚜</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arccos</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo>,</mo><mi>π</mi><mo stretchy=\"false\">]</mo><mtext> such that </mtext><mo lspace=\"0em\" rspace=\"0em\">cos</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in [{-1}, 1],\\;\\mathtt{\\operatorname{Math.acos}(x)} = \\arccos(x) = \\text{the unique } y \\in [0, \\pi] \\text{ such that } \\cos(y) = x</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number between -1 and 1, inclusive, representing the angle's cosine value."
      },
      "returns": "The inverse cosine (angle in radians between 0 and π, inclusive) of <code>x</code>. If <code>x</code> is less than -1 or greater than 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.acosh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/acosh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.acosh()</code></strong> static method returns the inverse hyperbolic cosine of a number. That is,\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mtable columnalign=\"right left right left right left right left right left\" columnspacing=\"0em\" displaystyle=\"true\"><mtr><mtd><mo>∀</mo><mi>x</mi><mo>≥</mo><mn>1</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚌𝚘𝚜𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">arcosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mo>≥</mo><mn>0</mn><mtext> such that </mtext><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mtd></mtr><mtr><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mrow><mo>(</mo><mrow><mi>x</mi><mo>+</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>1</mn></mrow></msqrt></mrow><mo>)</mo></mrow></mtd></mtr></mtable><annotation encoding=\"TeX\">\\begin{aligned}\\forall x \\geq 1,\\;\\mathtt{\\operatorname{Math.acosh}(x)} &amp;= \\operatorname{arcosh}(x) = \\text{the unique } y \\geq 0 \\text{ such that } \\cosh(y) = x\\\\&amp;= \\ln\\left(x + \\sqrt{x^2 - 1}\\right)\\end{aligned}</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number greater than or equal to 1."
      },
      "returns": "The inverse hyperbolic cosine of <code>x</code>. If <code>x</code> is less than 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.asin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/asin",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.asin()</code></strong> static method returns the inverse sine (in radians) of a number. That is,\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mrow><mo>−</mo><mn>1</mn></mrow><mo>,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚜𝚒𝚗</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arcsin</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mo>∊</mo><mrow><mo>[</mo><mrow><mo>−</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo>,</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><mo>]</mo></mrow><mtext> such that </mtext><mo lspace=\"0em\" rspace=\"0em\">sin</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in [{-1}, 1],\\;\\mathtt{\\operatorname{Math.asin}(x)} = \\arcsin(x) = \\text{the unique } y \\in \\left[-\\frac{\\pi}{2}, \\frac{\\pi}{2}\\right] \\text{ such that } \\sin(y) = x</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number between -1 and 1, inclusive, representing the angle's sine value."
      },
      "returns": "The inverse sine (angle in radians between <math><semantics><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation></semantics></math> and <math><semantics><mfrac><mi>π</mi><mn>2</mn></mfrac><annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation></semantics></math>, inclusive) of <code>x</code>. If <code>x</code> is less than -1 or greater than 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.asinh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/asinh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.asinh()</code></strong> static method returns the inverse hyperbolic sine of a number. That is,\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mtable columnalign=\"right left right left right left right left right left\" columnspacing=\"0em\" displaystyle=\"true\"><mtr><mtd><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚜𝚒𝚗𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">arsinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mtext> such that </mtext><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mtd></mtr><mtr><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mrow><mo>(</mo><mrow><mi>x</mi><mo>+</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn></mrow></msqrt></mrow><mo>)</mo></mrow></mtd></mtr></mtable><annotation encoding=\"TeX\">\\begin{aligned}\\mathtt{\\operatorname{Math.asinh}(x)} &amp;= \\operatorname{arsinh}(x) = \\text{the unique } y \\text{ such that } \\sinh(y) = x \\\\&amp;= \\ln\\left(x + \\sqrt{x^2 + 1}\\right)\\end{aligned}</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The inverse hyperbolic sine of <code>x</code>."
    },
    "math.atan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.atan()</code></strong> static method returns the inverse tangent (in radians) of a number, that is\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚝𝚊𝚗</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arctan</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mo>∊</mo><mrow><mo>[</mo><mrow><mo>−</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo>,</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><mo>]</mo></mrow><mtext> such that </mtext><mo lspace=\"0em\" rspace=\"0em\">tan</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.atan}(x)} = \\arctan(x) = \\text{the unique } y \\in \\left[-\\frac{\\pi}{2}, \\frac{\\pi}{2}\\right] \\text{ such that } \\tan(y) = x</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The inverse tangent (angle in radians between <math><semantics><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation></semantics></math> and <math><semantics><mfrac><mi>π</mi><mn>2</mn></mfrac><annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation></semantics></math>, inclusive) of <code>x</code>. If <code>x</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, it returns <math><semantics><mfrac><mi>π</mi><mn>2</mn></mfrac><annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation></semantics></math>. If <code>x</code> is <code>-Infinity</code>, it returns <math><semantics><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation></semantics></math>."
    },
    "math.atan2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atan2",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.atan2()</code></strong> static method returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for <code>Math.atan2(y, x)</code>.",
      "parameters": {
        "y": "The y coordinate of the point.",
        "x": "The x coordinate of the point."
      },
      "returns": "The angle in radians (between -π and π, inclusive) between the positive x-axis and the ray from (0, 0) to the point (x, y)."
    },
    "math.atanh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atanh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.atanh()</code></strong> static method returns the inverse hyperbolic tangent of a number. That is,\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mtable columnalign=\"right left right left right left right left right left\" columnspacing=\"0em\" displaystyle=\"true\"><mtr><mtd><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">(</mo><mrow><mo>−</mo><mn>1</mn></mrow><mo>,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚝𝚊𝚗𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">artanh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mtext> such that </mtext><mo lspace=\"0em\" rspace=\"0em\">tanh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mtd></mtr><mtr><mtd><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mspace width=\"0.16666666666666666em\"></mspace><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mrow><mo>(</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mi>x</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac><mo>)</mo></mrow></mtd></mtr></mtable><annotation encoding=\"TeX\">\\begin{aligned}\\forall x \\in ({-1}, 1),\\;\\mathtt{\\operatorname{Math.atanh}(x)} &amp;= \\operatorname{artanh}(x) = \\text{the unique } y \\text{ such that } \\tanh(y) = x \\\\&amp;= \\frac{1}{2}\\,\\ln\\left(\\frac{1+x}{1-x}\\right)\\end{aligned}</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number between -1 and 1, inclusive."
      },
      "returns": "The inverse hyperbolic tangent of <code>x</code>. If <code>x</code> is 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>. If <code>x</code> is -1, returns <code>-Infinity</code>. If <code>x</code> is less than -1 or greater than 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.cbrt": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cbrt",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.cbrt()</code></strong> static method returns the cube root of a number. That is\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚌𝚋𝚛𝚝</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mroot><mi>x</mi><mn>3</mn></mroot><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mtext> such that </mtext><msup><mi>y</mi><mn>3</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.cbrt}(x)} = \\sqrt[3]{x} = \\text{the unique } y \\text{ such that } y^3 = x</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The cube root of <code>x</code>."
    },
    "math.ceil": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ceil",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.ceil()</code></strong> static method always rounds up and returns the smallest integer greater than or equal to a given number.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The smallest integer greater than or equal to <code>x</code>. It's the same value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>-Math.floor(-x)</code></a>."
    },
    "math.clz32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/clz32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "31",
        "FirefoxAndroid": "31",
        "Opera": "25",
        "Safari": "7",
        "SafariIOS": "7",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.clz32()</code></strong> static method returns the number of leading zero bits in the 32-bit binary representation of a number.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The number of leading zero bits in the 32-bit binary representation of <code>x</code>."
    },
    "math.cos": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cos",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.cos()</code></strong> static method returns the cosine of a number in radians.",
      "parameters": {
        "x": "A number representing an angle in radians."
      },
      "returns": "The cosine of <code>x</code>, between -1 and 1, inclusive. If <code>x</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, <code>-Infinity</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.cosh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cosh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.cosh()</code></strong> static method returns the hyperbolic cosine of a number. That is,\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚌𝚘𝚜𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>+</mo><msup><mi mathvariant=\"normal\">e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.cosh}(x)} = \\cosh(x) = \\frac{\\mathrm{e}^x + \\mathrm{e}^{-x}}{2}</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The hyperbolic cosine of <code>x</code>."
    },
    "math.e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/e",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.E</code></strong> static data property represents Euler's number, the base of natural logarithms, e, which is approximately 2.718."
    },
    "math.exp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/exp",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.exp()</code></strong> static method returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a> raised to the power of a number. That is\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚎𝚡𝚙</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.exp}(x)} = \\mathrm{e}^x</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number."
      },
      "returns": "A nonnegative number representing e<sup>x</sup>, where e is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">the base of the natural logarithm</a>."
    },
    "math.expm1": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/expm1",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.expm1()</code></strong> static method returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a> raised to the power of a number, subtracted by 1. That is\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚎𝚡𝚙𝚖𝟷</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.expm1}(x)} = \\mathrm{e}^x - 1</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number."
      },
      "returns": "A number representing e<sup>x</sup> - 1, where e is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">the base of the natural logarithm</a>."
    },
    "math.f16round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/f16round",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "135",
        "ChromeAndroid": "135",
        "Edge": "135",
        "Firefox": "129",
        "FirefoxAndroid": "129",
        "Opera": "120",
        "Safari": "18.2",
        "SafariIOS": "18.2",
        "Deno": "1.43"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-04-04"
      },
      "doc": "The <strong><code>Math.f16round()</code></strong> static method returns the nearest <a href=\"https://en.wikipedia.org/wiki/Half-precision_floating-point_format\" class=\"external\" target=\"_blank\">16-bit half precision</a> float representation of a number.",
      "parameters": {
        "doubleFloat": "A number."
      },
      "returns": "The nearest <a href=\"https://en.wikipedia.org/wiki/Half-precision_floating-point_format\" class=\"external\" target=\"_blank\">16-bit half precision</a> float representation of <code>doubleFloat</code>."
    },
    "math.floor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/floor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.floor()</code></strong> static method always rounds down and returns the largest integer less than or equal to a given number.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The largest integer smaller than or equal to <code>x</code>. It's the same value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/ceil\"><code>-Math.ceil(-x)</code></a>."
    },
    "math.fround": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/fround",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "26",
        "FirefoxAndroid": "26",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.fround()</code></strong> static method returns the nearest <a href=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\" class=\"external\" target=\"_blank\">32-bit single precision</a> float representation of a number.",
      "parameters": {
        "doubleFloat": "A number."
      },
      "returns": "The nearest <a href=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\" class=\"external\" target=\"_blank\">32-bit single precision</a> float representation of <code>doubleFloat</code>."
    },
    "math.hypot": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/hypot",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "27",
        "FirefoxAndroid": "27",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.hypot()</code></strong> static method returns the square root of the sum of squares of its arguments. That is,\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mstyle mathvariant=\"monospace\"><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚑𝚢𝚙𝚘𝚝</mo><mo stretchy=\"false\">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo>,</mo><msub><mi>v</mi><mn>2</mn></msub><mo>,</mo><mo>…</mo><mo>,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mstyle><mo>=</mo><msqrt><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>v</mi><mi>i</mi><mn>2</mn></msubsup></mrow></msqrt><mo>=</mo><msqrt><mrow><msubsup><mi>v</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>v</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>…</mo><mo>+</mo><msubsup><mi>v</mi><mi>n</mi><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.hypot}(v_1, v_2, \\dots, v_n)} = \\sqrt{\\sum_{i=1}^n v_i^2} = \\sqrt{v_1^2 + v_2^2 + \\dots + v_n^2}</annotation></semantics>\n</math></figure>",
      "parameters": {
        "value1, …, valueN": "Numbers."
      },
      "returns": "The square root of the sum of squares of the given arguments. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if any of the arguments is ±Infinity. Otherwise, if at least one of the arguments is or is converted to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>. Returns <code>0</code> if no arguments are given or all arguments are ±0."
    },
    "math.imul": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/imul",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "28",
        "ChromeAndroid": "28",
        "Edge": "12",
        "Firefox": "20",
        "FirefoxAndroid": "20",
        "Opera": "16",
        "Safari": "7",
        "SafariIOS": "7",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.imul()</code></strong> static method returns the result of the C-like 32-bit multiplication of the two parameters.",
      "parameters": {
        "a": "First number.",
        "b": "Second number."
      },
      "returns": "The result of the C-like 32-bit multiplication of the given arguments."
    },
    "math.ln10": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ln10",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.LN10</code></strong> static data property represents the natural logarithm of 10, approximately 2.303."
    },
    "math.ln2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ln2",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.LN2</code></strong> static data property represents the natural logarithm of 2, approximately 0.693:"
    },
    "math.log": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.log()</code></strong> static method returns the natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>) of a number. That is\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mtext> such that </mtext><msup><mi>e</mi><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0,\\;\\mathtt{\\operatorname{Math.log}(x)} = \\ln(x) = \\text{the unique } y \\text{ such that } e^y = x</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number greater than or equal to 0."
      },
      "returns": "The natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>) of <code>x</code>. If <code>x</code> is ±0, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\"><code>-Infinity</code></a>. If <code>x &lt; 0</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.log10": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log10",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.log10()</code></strong> static method returns the base 10 logarithm of a number. That is\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝟶</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>10</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mtext> such that </mtext><msup><mn>10</mn><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0,\\;\\mathtt{\\operatorname{Math.log10}(x)} = \\log_{10}(x) = \\text{the unique } y \\text{ such that } 10^y = x</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number greater than or equal to 0."
      },
      "returns": "The base 10 logarithm of <code>x</code>. If <code>x &lt; 0</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.log10e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log10e",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.LOG10E</code></strong> static data property represents the base 10 logarithm of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>, approximately 0.434."
    },
    "math.log1p": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log1p",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.log1p()</code></strong> static method returns the natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>) of <code>1 + x</code>, where <code>x</code> is the argument. That is:\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mo>−</mo><mn>1</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝚙</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"TeX\">\\forall x &gt; -1,\\;\\mathtt{\\operatorname{Math.log1p}(x)} = \\ln(1 + x)</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number greater than or equal to -1."
      },
      "returns": "The natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>) of <code>x + 1</code>. If <code>x</code> is -1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\"><code>-Infinity</code></a>. If <code>x &lt; -1</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.log2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log2",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.log2()</code></strong> static method returns the base 2 logarithm of a number. That is\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟸</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mtext> such that </mtext><msup><mn>2</mn><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0,\\;\\mathtt{\\operatorname{Math.log2}(x)} = \\log_2(x) = \\text{the unique } y \\text{ such that } 2^y = x</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number greater than or equal to 0."
      },
      "returns": "The base 2 logarithm of <code>x</code>. If <code>x &lt; 0</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.log2e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log2e",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.LOG2E</code></strong> static data property represents the base 2 logarithm of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>, approximately 1.443."
    },
    "math.max": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/max",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.max()</code></strong> static method returns the largest of the numbers given as input parameters, or -<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if there are no parameters.",
      "parameters": {
        "value1, …, valueN": "Zero or more numbers among which the largest value will be selected and returned."
      },
      "returns": "The largest of the given numbers. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> if any of the parameters is or is converted into <code>NaN</code>. Returns -<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if no parameters are provided."
    },
    "math.min": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/min",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.min()</code></strong> static method returns the smallest of the numbers given as input parameters, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if there are no parameters.",
      "parameters": {
        "value1, …, valueN": "Zero or more numbers among which the lowest value will be selected and returned."
      },
      "returns": "The smallest of the given numbers. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> if any of the parameters is or is converted into <code>NaN</code>. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if no parameters are provided."
    },
    "math.pi": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/pi",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.PI</code></strong> static data property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159."
    },
    "math.pow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/pow",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.pow()</code></strong> static method returns the value of a base raised to a power. That is\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚙𝚘𝚠</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo>,</mo><mi>𝚢</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msup><mi>x</mi><mi>y</mi></msup></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.pow}(x, y)} = x^y</annotation></semantics>\n</math></figure>",
      "parameters": {
        "base": "The base number.",
        "exponent": "The exponent number."
      },
      "returns": "A number representing <code>base</code> taken to the power of <code>exponent</code>. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> in one of the following cases:\n<ul>\n<li><code>exponent</code> is <code>NaN</code>.</li>\n<li><code>base</code> is <code>NaN</code> and <code>exponent</code> is not <code>0</code>.</li>\n<li><code>base</code> is ±1 and <code>exponent</code> is ±<code>Infinity</code>.</li>\n<li><code>base &lt; 0</code> and <code>exponent</code> is not an integer.</li>\n</ul>"
    },
    "math.random": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/random",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.random()</code></strong> static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1, with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>Math.random()</code> <em>does not</em> provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the <a href=\"$MDN_URL$/Web/API/Crypto/getRandomValues\"><code>Crypto.getRandomValues()</code></a> method.\n</div>",
      "returns": "A floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive)."
    },
    "math.round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/round",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.round()</code></strong> static method returns the value of a number rounded to the nearest integer.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The value of <code>x</code> rounded to the nearest integer."
    },
    "math.sign": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sign",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Math.sign()</code></strong> static method returns 1 or -1, indicating the sign of the number passed as argument. If the input is 0 or -0, it will be returned as-is.",
      "parameters": {
        "x": "A number."
      },
      "returns": "A number representing the sign of <code>x</code>:\n<ul>\n<li>If <code>x</code> is positive, returns <code>1</code>.</li>\n<li>If <code>x</code> is negative, returns <code>-1</code>.</li>\n<li>If <code>x</code> is positive zero, returns <code>0</code>.</li>\n<li>If <code>x</code> is negative zero, returns <code>-0</code>.</li>\n<li>Otherwise, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</li>\n</ul>"
    },
    "math.sin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sin",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.sin()</code></strong> static method returns the sine of a number in radians.",
      "parameters": {
        "x": "A number representing an angle in radians."
      },
      "returns": "The sine of <code>x</code>, between -1 and 1, inclusive. If <code>x</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, <code>-Infinity</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.sinh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sinh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.sinh()</code></strong> static method returns the hyperbolic sine of a number. That is,\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚜𝚒𝚗𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>−</mo><msup><mi mathvariant=\"normal\">e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.sinh}(x)} = \\sinh(x) = \\frac{\\mathrm{e}^x - \\mathrm{e}^{-x}}{2}</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The hyperbolic sine of <code>x</code>."
    },
    "math.sqrt": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sqrt",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.sqrt()</code></strong> static method returns the square root of a number. That is\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mo>∀</mo><mi>x</mi><mo>≥</mo><mn>0</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚜𝚚𝚛𝚝</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msqrt><mi>x</mi></msqrt><mo>=</mo><mtext>the unique </mtext><mi>y</mi><mo>≥</mo><mn>0</mn><mtext> such that </mtext><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\geq 0,\\;\\mathtt{\\operatorname{Math.sqrt}(x)} = \\sqrt{x} = \\text{the unique } y \\geq 0 \\text{ such that } y^2 = x</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number greater than or equal to 0."
      },
      "returns": "The square root of <code>x</code>, a nonnegative number. If <code>x &lt; 0</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.sqrt2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sqrt2",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.SQRT2</code></strong> static data property represents the square root of 2, approximately 1.414."
    },
    "math.sumprecise": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sumprecise",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "137",
        "FirefoxAndroid": "137",
        "Safari": "preview"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Math.sumPrecise()</code></strong> static method takes an iterable of numbers and returns the sum of them. It is more precise than summing them up in a loop, because it avoids floating point precision loss in intermediate results.",
      "parameters": {
        "numbers": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) of numbers."
      },
      "returns": "A number that is the sum of the numbers in the <code>numbers</code> iterable. If the iterable is empty, the return value is <code>-0</code> (<em>not</em> <code>0</code>).",
      "throws": {
        "TypeError": "If <code>numbers</code> is not an iterable, or if any of the numbers in the iterable is not of the number type."
      }
    },
    "math.tan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/tan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.tan()</code></strong> static method returns the tangent of a number in radians.",
      "parameters": {
        "x": "A number representing an angle in radians."
      },
      "returns": "The tangent of <code>x</code>. If <code>x</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, <code>-Infinity</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nDue to floating point precision, it's not possible to obtain the exact value π/2, so the result is always finite if not <code>NaN</code>.\n</div>"
    },
    "math.tanh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/tanh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.tanh()</code></strong> static method returns the hyperbolic tangent of a number. That is,\n<figure class=\"table-container\"><math display=\"block\">\n<semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚝𝚊𝚗𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">tanh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>−</mo><msup><mi mathvariant=\"normal\">e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>+</mo><msup><mi mathvariant=\"normal\">e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi mathvariant=\"normal\">e</mi><mrow><mn>2</mn><mi>x</mi></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><msup><mi mathvariant=\"normal\">e</mi><mrow><mn>2</mn><mi>x</mi></mrow></msup><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.tanh}(x)} = \\tanh(x) = \\frac{\\sinh(x)}{\\cosh(x)} = \\frac{\\mathrm{e}^x - \\mathrm{e}^{-x}}{\\mathrm{e}^x + \\mathrm{e}^{-x}} = \\frac{\\mathrm{e}^{2x} - 1}{\\mathrm{e}^{2x}+1}</annotation></semantics>\n</math></figure>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The hyperbolic tangent of <code>x</code>."
    },
    "math.trunc": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/trunc",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Math.trunc()</code></strong> static method returns the integer part of a number by removing any fractional digits.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The integer part of <code>x</code>."
    },
    "nan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/nan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>NaN</code></strong> global property is a value representing Not-A-Number."
    },
    "number": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "<strong><code>Number</code></strong> values represent floating-point numbers like <code>37</code> or <code>-9.25</code>.\n<p>The <code>Number</code> constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the <code>Number()</code> function."
    },
    "number.epsilon": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/epsilon",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Number.EPSILON</code></strong> static data property represents the difference between 1 and the smallest floating point number greater than 1."
    },
    "number.isfinite": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isfinite",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "19",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "16",
        "FirefoxAndroid": "16",
        "Opera": "15",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Number.isFinite()</code></strong> static method determines whether the passed value is a finite number — that is, it checks that a given value is a number, and the number is neither positive <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, negative <code>Infinity</code>, nor <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.",
      "parameters": {
        "value": "The value to be tested for finiteness."
      },
      "returns": "The boolean value <code>true</code> if the given value is a finite number. Otherwise <code>false</code>."
    },
    "number.isinteger": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isinteger",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "12",
        "Firefox": "16",
        "FirefoxAndroid": "16",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Number.isInteger()</code></strong> static method determines whether the passed value is an integer.",
      "parameters": {
        "value": "The value to be tested for being an integer."
      },
      "returns": "The boolean value <code>true</code> if the given value is an integer. Otherwise <code>false</code>."
    },
    "number.isnan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isnan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "25",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "15",
        "FirefoxAndroid": "15",
        "Opera": "15",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Number.isNaN()</code></strong> static method determines whether the passed value is the number value <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, and returns <code>false</code> if the input is not of the Number type. It is a more robust version of the original, global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/isNaN\"><code>isNaN()</code></a> function.",
      "parameters": {
        "value": "The value to be tested for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
      },
      "returns": "The boolean value <code>true</code> if the given value is a number with value <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>. Otherwise, <code>false</code>."
    },
    "number.issafeinteger": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/issafeinteger",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "12",
        "Firefox": "32",
        "FirefoxAndroid": "32",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Number.isSafeInteger()</code></strong> static method determines whether the provided value is a number that is a <em>safe integer</em>.",
      "parameters": {
        "testValue": "The value to be tested for being a safe integer."
      },
      "returns": "The boolean value <code>true</code> if the given value is a number that is a safe integer. Otherwise <code>false</code>."
    },
    "number.nan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/nan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Number.NaN</code></strong> static data property represents Not-A-Number, which is equivalent to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>. For more information about the behaviors of <code>NaN</code>, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\">description for the global property</a>."
    },
    "number.number": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/number",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Number()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> objects. When called as a function, it returns primitive values of type Number.",
      "parameters": {
        "value": "The numeric value of the object being created."
      },
      "returns": "When <code>Number()</code> is called as a function (without <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>), it returns <code>value</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced to a number primitive</a>. Specially, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInts</a> values are converted to numbers instead of throwing. If <code>value</code> is absent, it becomes <code>0</code>.\n<p>When <code>Number()</code> is called as a constructor (with <code>new</code>), it uses the coercion process above and returns a wrapping <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object, which is <strong>not</strong> a primitive.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nYou should rarely find yourself using <code>Number</code> as a constructor.\n</div>"
    },
    "number.parsefloat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/parsefloat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Number.parseFloat()</code></strong> static method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.",
      "parameters": {
        "string": "The value to parse, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to a string</a>. Leading <a href=\"$MDN_URL$/Glossary/Whitespace\">whitespace</a> in this argument is ignored."
      },
      "returns": "A floating point number parsed from the given <code>string</code>.\n<p>Or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when the first non-whitespace character cannot be converted to a number."
    },
    "number.parseint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/parseint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Number.parseInt()</code></strong> static method parses a string argument and\nreturns an integer of the specified radix or base.",
      "parameters": {
        "string": "The value to parse, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to a string</a>. Leading whitespace in this argument is ignored.",
        "radix": "An integer between <code>2</code> and <code>36</code> that represents the\n<em>radix</em> (the base in mathematical numeral systems) of the\n<code>string</code>.\n<p>If <code>radix</code> is undefined or <code>0</code>, it is assumed to be <code>10</code> except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of <code>16</code> is assumed."
      },
      "returns": "An integer parsed from the given <code>string</code>.\n<p>If the <code>radix</code> is smaller than <code>2</code> or bigger than\n<code>36</code>, or the first non-whitespace character cannot be converted to a number,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned."
    },
    "number.toexponential": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/toexponential",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "7",
        "Safari": "2",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toExponential()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> values returns a string representing\nthis number in exponential notation.",
      "parameters": {
        "fractionDigits": "Optional. An integer specifying the number of digits after the decimal point.\nDefaults to as many digits as necessary to specify the number."
      },
      "returns": "A string representing the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object in exponential notation\nwith one digit before the decimal point, rounded to\n<code>fractionDigits</code> digits after the decimal point.",
      "throws": {
        "RangeError": "Thrown if <code>fractionDigits</code> is not between <code>0</code> and <code>100</code> (inclusive).",
        "TypeError": "Thrown if this method is invoked on an object that is not a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>."
      }
    },
    "number.tofixed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tofixed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "7",
        "Safari": "2",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toFixed()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> values returns a string representing this number using <a href=\"https://en.wikipedia.org/wiki/Fixed-point_arithmetic\" class=\"external\" target=\"_blank\">fixed-point notation</a> with the specified number of decimal places.",
      "parameters": {
        "digits": "The number of digits to appear after the decimal point; should be a value between <code>0</code> and <code>100</code>, inclusive. If this argument is omitted, it is treated as <code>0</code>."
      },
      "returns": "A string representing the given number using fixed-point notation. Scientific notation is used if the number's magnitude (ignoring sign) is greater than or equal to 10<sup>21</sup> (same return value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString()</code></a>).",
      "throws": {
        "RangeError": "Thrown if <code>digits</code> is not between <code>0</code> and <code>100</code> (inclusive).",
        "TypeError": "Thrown if this method is invoked on an object that is not a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>."
      }
    },
    "number.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> values returns a string with a language-sensitive representation of this number. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code> API</a> support, this method delegates to <code>Intl.NumberFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\"><code>format()</code></a> method, because a <code>NumberFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor.\n<p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options\"><code>options</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor.\n<p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored."
      },
      "returns": "A string representing the given number according to language-specific conventions.\n<p>In implementations with <code>Intl.NumberFormat</code>, this is equivalent to <code>new Intl.NumberFormat(locales, options).format(number)</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>"
    },
    "number.toprecision": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/toprecision",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "7",
        "Safari": "2",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toPrecision()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> values returns a string representing this number to the specified number of significant digits.",
      "parameters": {
        "precision": "An integer specifying the number of significant digits."
      },
      "returns": "A string representing the given number, using the given number of significant digits. Scientific notation is used if the exponent is greater than or equal to <code>precision</code> or less than -6. Has the same behavior as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString()</code></a> if the <code>precision</code> argument is omitted.",
      "throws": {
        "RangeError": "Thrown if <code>precision</code> is not between <code>1</code> and <code>100</code> (inclusive).",
        "TypeError": "Thrown if this method is invoked on an object that is not a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>."
      }
    },
    "number.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> values returns a string representing this number value.",
      "parameters": {
        "radix": "An integer in the range <code>2</code> through <code>36</code> specifying the base to use for representing the number value. Defaults to 10."
      },
      "returns": "A string representing the specified number value. Scientific notation is used if radix is 10 and the number's magnitude (ignoring sign) is greater than or equal to 10<sup>21</sup> or less than 10<sup>-6</sup>.",
      "throws": {
        "RangeError": "Thrown if <code>radix</code> is less than 2 or greater than 36.",
        "TypeError": "Thrown if this method is invoked on an object that is not a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>."
      }
    },
    "number.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> values returns the value of this number.",
      "returns": "A number representing the primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object."
    },
    "object": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object</code></strong> type represents one of <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures\">JavaScript's data types</a>. It is used to store various keyed collections and more complex entities. Objects can be created using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>Object()</code></a> constructor or the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer / literal syntax</a>."
    },
    "object.__definegetter__": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/__definegetter__",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis feature is deprecated in favor of defining <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/get\">getters</a> using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer syntax</a> or the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n</div>\n<p>The <strong><code>__defineGetter__()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances binds an object's property to a function to be called when that property is looked up.",
      "parameters": {
        "prop": "A string containing the name of the property that the getter <code>func</code> is bound to.",
        "func": "A function to be bound to a lookup of the specified property."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).",
      "throws": {
        "TypeError": "Thrown if <code>func</code> is not a function."
      }
    },
    "object.__definesetter__": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/__definesetter__",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis feature is deprecated in favor of defining <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/set\">setters</a> using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer syntax</a> or the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n</div>\n<p>The <strong><code>__defineSetter__()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances binds an object's property to a function to be called when an attempt is made to set that property.",
      "parameters": {
        "prop": "A string containing the name of the property that the setter <code>func</code> is bound to.",
        "func": "A function to be called when there is an attempt to set the specified property. This function receives the following parameter:\n<dl>\n<dt id=\"val\"><a href=\"#val\"><code>val</code></a></dt>\n<dd>\n<p>The value attempted to be assigned to <code>prop</code>.\n</dd>\n</dl>"
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).",
      "throws": {
        "TypeError": "Thrown if <code>func</code> is not a function."
      }
    },
    "object.__lookupgetter__": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/__lookupgetter__",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis feature is deprecated in favor of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a> API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n</div>\n<p>The <strong><code>__lookupGetter__()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances returns the function bound as a getter to the specified property.",
      "parameters": {
        "prop": "A string containing the name of the property whose getter should be returned."
      },
      "returns": "The function bound as a getter to the specified property. Returns <code>undefined</code> if no such property is found, or the property is a <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#data_property\">data property</a>."
    },
    "object.__lookupsetter__": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/__lookupsetter__",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis feature is deprecated in favor of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a> API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n</div>\n<p>The <strong><code>__lookupSetter__()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances returns the function bound as a setter to the specified property.",
      "parameters": {
        "prop": "A string containing the name of the property whose setter should be returned."
      },
      "returns": "The function bound as a setter to the specified property. Returns <code>undefined</code> if no such property is found, or the property is a <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#data_property\">data property</a>."
    },
    "object.assign": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/assign",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "34",
        "FirefoxAndroid": "34",
        "Opera": "32",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Object.assign()</code></strong> static method\ncopies all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\">enumerable</a>\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\">own properties</a> from one or more\n<em>source objects</em> to a <em>target object</em>. It returns the modified target\nobject.",
      "parameters": {
        "target": "The target object — what to apply the sources' properties to, which is returned after it is modified. If a primitive value is provided as the target, it will be converted to an object.",
        "source1, …, sourceN": "The source object(s) — objects containing the properties you want to apply."
      },
      "returns": "The target object.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>The <code>target</code> parameter is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</li>\n<li>Assignment of a property on the target object fails; for example, because the property is non-writable on the target object, or because its setter throws an error.</li>\n</ul>"
      }
    },
    "object.constructor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/constructor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>constructor</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instance returns a reference to the constructor function that created the instance object. Note that the value of this property is a reference to <em>the function itself</em>, not a string containing the function's name.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis is a property of JavaScript objects. For the <code>constructor</code> method in classes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Classes/constructor\">its own reference page</a>.\n</div>"
    },
    "object.create": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/create",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.create()</code></strong> static method creates a new object, using an existing object as the prototype of the newly created object.",
      "parameters": {
        "proto": "The object which should be the prototype of the newly-created object.",
        "propertiesObject": "If specified and not <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, an object whose <a href=\"$MDN_URL$/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties\">enumerable own properties</a> specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a>."
      },
      "returns": "A new object with the specified prototype object and properties.",
      "throws": {
        "TypeError": "Thrown if <code>proto</code> is neither <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> nor an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>."
      }
    },
    "object.defineproperties": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/defineproperties",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.defineProperties()</code></strong> static method defines new or\nmodifies existing properties directly on an object, returning the object.",
      "parameters": {
        "obj": "The object on which to define or modify properties.",
        "props": "An object whose keys represent the names of properties to be defined or modified and\nwhose values are objects describing those properties. Each value in <code>props</code>\nmust be either a data descriptor or an accessor descriptor; it cannot be both (see\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> for more details).\n<p>Data descriptors and accessor descriptors may optionally contain the following keys:\n<dl>\n<dt id=\"configurable\"><a href=\"#configurable\"><code>configurable</code></a></dt>\n<dd>\n<p><code>true</code> if and only if the type of this property descriptor may be\nchanged and if the property may be deleted from the corresponding object.\n<strong>Defaults to <code>false</code>.</strong>\n</dd>\n<dt id=\"enumerable\"><a href=\"#enumerable\"><code>enumerable</code></a></dt>\n<dd>\n<p><code>true</code> if and only if this property shows up during enumeration of\nthe properties on the corresponding object.\n<strong>Defaults to <code>false</code>.</strong>\n</dd>\n</dl>\n<p>A data descriptor also has the following optional keys:\n<dl>\n<dt id=\"value\"><a href=\"#value\"><code>value</code></a></dt>\n<dd>\n<p>The value associated with the property. Can be any valid JavaScript value\n(number, object, function, etc.).\n<strong>Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</strong>\n</dd>\n<dt id=\"writable\"><a href=\"#writable\"><code>writable</code></a></dt>\n<dd>\n<p><code>true</code> if and only if the value associated with the property may be\nchanged with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators#assignment_operators\">assignment operator</a>.\n<strong>Defaults to <code>false</code>.</strong>\n</dd>\n</dl>\n<p>An accessor descriptor also has the following optional keys:\n<dl>\n<dt id=\"get\"><a href=\"#get\"><code>get</code></a></dt>\n<dd>\n<p>A function which serves as a getter for the property, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>\nif there is no getter. The function's return value will be used as the value of\nthe property.\n<strong>Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</strong>\n</dd>\n<dt id=\"set\"><a href=\"#set\"><code>set</code></a></dt>\n<dd>\n<p>A function which serves as a setter for the property, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>\nif there is no setter. The function will receive as its only argument the new\nvalue being assigned to the property.\n<strong>Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</strong>\n</dd>\n</dl>\n<p>If a descriptor has neither of <code>value</code>, <code>writable</code>,\n<code>get</code> and <code>set</code> keys, it is treated as a data descriptor. If a\ndescriptor has both <code>value</code> or <code>writable</code> and <code>get</code>\nor <code>set</code> keys, an exception is thrown."
      },
      "returns": "The object that was passed to the function."
    },
    "object.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "6",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.defineProperty()</code></strong> static method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.",
      "parameters": {
        "obj": "The object on which to define the property.",
        "prop": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> specifying the key of the property to be defined or modified.",
        "descriptor": "The descriptor for the property being defined or modified."
      },
      "returns": "The object that was passed to the function, with the specified property added or modified."
    },
    "object.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "14",
        "Firefox": "47",
        "FirefoxAndroid": "47",
        "Opera": "41",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-03-27",
        "highDate": "2019-09-27"
      },
      "doc": "The <strong><code>Object.entries()</code></strong> static method returns an array of a given object's own enumerable string-keyed property key-value pairs.",
      "parameters": {
        "obj": "An object."
      },
      "returns": "An array of the given object's own enumerable string-keyed property key-value pairs. Each key-value pair is an array with two elements: the first element is the property key (which is always a string), and the second element is the property value."
    },
    "object.freeze": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/freeze",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.freeze()</code></strong> static method <em>freezes</em> an object. Freezing an object <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\">prevents extensions</a> and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. <code>freeze()</code> returns the same object that was passed in.\n<p>Freezing an object is the highest integrity level that JavaScript provides.",
      "parameters": {
        "obj": "The object to freeze."
      },
      "returns": "The object that was passed to the function."
    },
    "object.fromentries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/fromentries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "73",
        "ChromeAndroid": "73",
        "Edge": "79",
        "Firefox": "63",
        "FirefoxAndroid": "63",
        "Opera": "60",
        "Safari": "12.1",
        "SafariIOS": "12.2",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>Object.fromEntries()</code></strong> static method transforms a list of key-value pairs into an object.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a>, such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>, containing a list of objects. Each object should have two properties:\n<dl>\n<dt id=\"0\"><a href=\"#0\"><code>0</code></a></dt>\n<dd>\n<p>A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a> representing the property key.\n</dd>\n<dt id=\"1\"><a href=\"#1\"><code>1</code></a></dt>\n<dd>\n<p>The property value.\n</dd>\n</dl>\n<p>Typically, this object is implemented as a two-element array, with the first element being the property key and the second element being the property value."
      },
      "returns": "A new object whose properties are given by the entries of the iterable."
    },
    "object.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "12",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.getOwnPropertyDescriptor()</code></strong> static method returns an\nobject describing the configuration of a specific property on a given object (that is,\none directly present on an object and not in the object's prototype chain). The object\nreturned is mutable but mutating it has no effect on the original property's\nconfiguration.",
      "parameters": {
        "obj": "The object in which to look for the property.",
        "prop": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property whose description is to be\nretrieved."
      },
      "returns": "A property descriptor of the given property if it exists on the object,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> otherwise."
    },
    "object.getownpropertydescriptors": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertydescriptors",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "15",
        "Firefox": "50",
        "FirefoxAndroid": "50",
        "Opera": "41",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "7.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>Object.getOwnPropertyDescriptors()</code></strong> static method returns all\nown property descriptors of a given object.",
      "parameters": {
        "obj": "The object for which to get all own property descriptors."
      },
      "returns": "An object containing all own property descriptors of an object. Might be an empty\nobject, if there are no properties."
    },
    "object.getownpropertynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertynames",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "12",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.getOwnPropertyNames()</code></strong> static method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.",
      "parameters": {
        "obj": "The object whose enumerable and non-enumerable properties are to be returned."
      },
      "returns": "An array of strings that corresponds to the properties found directly in the given object."
    },
    "object.getownpropertysymbols": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertysymbols",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Object.getOwnPropertySymbols()</code></strong> static method returns an array of all symbol properties found directly upon a given object.",
      "parameters": {
        "obj": "The object whose symbol properties are to be returned."
      },
      "returns": "An array of all symbol properties found directly upon the given object."
    },
    "object.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "3.5",
        "FirefoxAndroid": "4",
        "Opera": "12.1",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.getPrototypeOf()</code></strong> static method returns the prototype\n(i.e., the value of the internal <code>[[Prototype]]</code> property) of the specified\nobject.",
      "parameters": {
        "obj": "The object whose prototype is to be returned."
      },
      "returns": "The prototype of the given object, which may be <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>."
    },
    "object.groupby": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/groupby",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "117",
        "ChromeAndroid": "117",
        "Edge": "117",
        "Firefox": "119",
        "FirefoxAndroid": "119",
        "Opera": "103",
        "Safari": "17.4",
        "SafariIOS": "17.4",
        "Nodejs": "21.0.0",
        "Deno": "1.37"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-03-05"
      },
      "doc": "<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn some versions of some browsers, this method was implemented as the method <code>Array.prototype.group()</code>. Due to web compatibility issues, it is now implemented as a static method. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>\n<p>The <strong><code>Object.groupBy()</code></strong> static method groups the elements of a given iterable according to the string values returned by a provided callback function. The returned object has separate properties for each group, containing arrays with the elements in the group.\n<p>This method should be used when group names can be represented by strings. If you need to group elements using a key that is some arbitrary value, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map/groupBy\"><code>Map.groupBy()</code></a> instead.",
      "parameters": {
        "items": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) whose elements will be grouped.",
        "callbackFn": "A function to execute for each element in the iterable. It should return a value that can get coerced into a property key (string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a>) indicating the group of the current element. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed.\n</dd>\n</dl>"
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects\"><code>null</code>-prototype object</a> with properties for all groups, each assigned to an array containing the elements of the associated group."
    },
    "object.hasown": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/hasown",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "93",
        "ChromeAndroid": "93",
        "Edge": "93",
        "Firefox": "92",
        "FirefoxAndroid": "92",
        "Opera": "79",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "16.9.0",
        "Deno": "1.13"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2022-03-14",
        "highDate": "2024-09-14"
      },
      "doc": "The <strong><code>Object.hasOwn()</code></strong> static method returns <code>true</code> if the specified object has the indicated property as its <em>own</em> property.\nIf the property is inherited, or does not exist, the method returns <code>false</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>Object.hasOwn()</code> is intended as a replacement for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a>.\n</div>",
      "parameters": {
        "obj": "The JavaScript object instance to test.",
        "prop": "The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> of the property to test."
      },
      "returns": "<code>true</code> if the specified object has directly defined the specified property.\nOtherwise <code>false</code>"
    },
    "object.hasownproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/hasownproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>hasOwnProperty()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances returns a boolean indicating whether this\nobject has the specified property as its own property (as opposed to inheriting\nit).\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn()</code></a> is recommended over\n<code>hasOwnProperty()</code>, in browsers where it is supported.\n</div>",
      "parameters": {
        "prop": "The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> of the property to test."
      },
      "returns": "Returns <code>true</code> if the object has the specified property as own property; <code>false</code>\notherwise."
    },
    "object.is": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/is",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "19",
        "ChromeAndroid": "25",
        "Edge": "12",
        "Firefox": "22",
        "FirefoxAndroid": "22",
        "Opera": "15",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Object.is()</code></strong> static method determines whether two values are <a href=\"$MDN_URL$/Web/JavaScript/Guide/Equality_comparisons_and_sameness#same-value_equality_using_object.is\">the same value</a>.",
      "parameters": {
        "value1": "The first value to compare.",
        "value2": "The second value to compare."
      },
      "returns": "A boolean indicating whether or not the two arguments are the same value."
    },
    "object.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isextensible",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.isExtensible()</code></strong> static method determines if an object\nis extensible (whether it can have new properties added to it).",
      "parameters": {
        "obj": "The object which should be checked."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given object is extensible."
    },
    "object.isfrozen": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isfrozen",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.isFrozen()</code></strong> static method determines if an object is\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/freeze\">frozen</a>.",
      "parameters": {
        "obj": "The object which should be checked."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given object is frozen."
    },
    "object.isprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>isPrototypeOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances checks if this object exists in another object's prototype chain.\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>isPrototypeOf()</code> differs from the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator. In the expression <code>object instanceof AFunction</code>, <code>object</code>'s prototype chain is checked against <code>AFunction.prototype</code>, not against <code>AFunction</code> itself.\n</div>",
      "parameters": {
        "object": "The object whose prototype chain will be searched."
      },
      "returns": "A boolean indicating whether the calling object (<code>this</code>) lies in the prototype chain of <code>object</code>. Directly returns <code>false</code> when <code>object</code> is not an object (i.e., a primitive).",
      "throws": {
        "TypeError": "Thrown if <code>this</code> is <code>null</code> or <code>undefined</code> (because it can't be <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#object_coercion\">converted to an object</a>)."
      }
    },
    "object.issealed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/issealed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.isSealed()</code></strong> static method determines if an object is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/seal\">sealed</a>.",
      "parameters": {
        "obj": "The object which should be checked."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given object is sealed."
    },
    "object.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/keys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "12",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.keys()</code></strong> static method returns an array of a given object's own enumerable string-keyed property names.",
      "parameters": {
        "obj": "An object."
      },
      "returns": "An array of strings representing the given object's own enumerable string-keyed property keys."
    },
    "object.object": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/object",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object()</code></strong> constructor turns the input into an object. Its behavior depends on the input's type.",
      "parameters": {
        "value": "Any value."
      },
      "returns": "When the <code>Object()</code> constructor itself is called or constructed, its return value is an object:\n<ul>\n<li>If the value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, it creates and returns an empty object.</li>\n<li>If the value is an object already, it returns the value.</li>\n<li>Otherwise, it returns an object of a type that corresponds to the given value. For example, passing a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> primitive returns a <code>BigInt</code> wrapper object.</li>\n</ul>\n<p>When <code>Object()</code> is constructed but <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a> is not the <code>Object</code> constructor itself, the behavior is slightly different — it initializes a new object with <code>new.target.prototype</code> as its prototype. Any argument value is ignored. This may happen, for example, when <code>Object()</code> is implicitly called via <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/super\"><code>super()</code></a> in the constructor of a class that <a href=\"$MDN_URL$/Web/JavaScript/Reference/Classes/extends#extending_object\">extends <code>Object</code></a>. In this case, even if you pass a number to <code>super()</code>, the <code>this</code> value inside the constructor does not become a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> instance."
    },
    "object.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.preventExtensions()</code></strong> static method prevents new\nproperties from ever being added to an object (i.e., prevents future extensions to the\nobject). It also prevents the object's prototype from being re-assigned.",
      "parameters": {
        "obj": "The object which should be made non-extensible."
      },
      "returns": "The object being made non-extensible."
    },
    "object.propertyisenumerable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/propertyisenumerable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>propertyIsEnumerable()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances returns a boolean indicating whether the specified property is this object's <a href=\"$MDN_URL$/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties\">enumerable own</a> property.",
      "parameters": {
        "prop": "The name of the property to test. Can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>."
      },
      "returns": "A boolean value indicating whether the specified property is enumerable and is the object's own property."
    },
    "object.proto": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/proto",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nChanging the <code>[[Prototype]]</code> of an object is, by the nature of how modern JavaScript engines optimize property accesses, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to the time spent in the <code>obj.__proto__ = ...</code> statement, but may extend to <strong><em>any</em></strong> code that has access to any object whose <code>[[Prototype]]</code> has been altered. You can read more in <a href=\"https://mathiasbynens.be/notes/prototypes\" class=\"external\" target=\"_blank\">JavaScript engine fundamentals: optimizing prototypes</a>.\n</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThe use of <code>__proto__</code> is controversial and discouraged. Its existence and exact behavior have only been standardized as a legacy feature to ensure web compatibility, while it presents several security issues and footguns. For better support, prefer <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>/<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf\"><code>Reflect.getPrototypeOf()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>/<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf\"><code>Reflect.setPrototypeOf()</code></a> instead.\n</div>\n<p>The <strong><code>__proto__</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances exposes the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain\"><code>[[Prototype]]</code></a> (either an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>) of this object.\n<p>The <code>__proto__</code> property can also be used in an object literal definition to set the object <code>[[Prototype]]</code> on creation, as an alternative to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>. See: <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer / literal syntax</a>. That syntax is standard and optimized for in implementations, and quite different from <code>Object.prototype.__proto__</code>.",
      "returns": "If used as a getter, returns the object's <code>[[Prototype]]</code>.",
      "throws": {
        "TypeError": "Thrown if attempting to set the prototype of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\">non-extensible</a> object or an <a href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-immutable-prototype-exotic-objects\" class=\"external\" target=\"_blank\">immutable prototype exotic object</a>, such as <code>Object.prototype</code> or <a href=\"$MDN_URL$/Web/API/Window\"><code>window</code></a>."
      }
    },
    "object.seal": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/seal",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Object.seal()</code></strong> static method <em>seals</em> an object. Sealing an object <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\">prevents extensions</a> and makes existing properties non-configurable. A sealed object has a fixed set of properties: new properties cannot be added, existing properties cannot be removed, their enumerability and configurability cannot be changed, and its prototype cannot be re-assigned. Values of existing properties can still be changed as long as they are writable. <code>seal()</code> returns the same object that was passed in.",
      "parameters": {
        "obj": "The object which should be sealed."
      },
      "returns": "The object being sealed."
    },
    "object.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "12",
        "Firefox": "31",
        "FirefoxAndroid": "31",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Object.setPrototypeOf()</code></strong> static method sets the prototype (i.e., the internal <code>[[Prototype]]</code> property) of a specified object to another object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nChanging the <code>[[Prototype]]</code> of an object is, by the nature of how modern JavaScript engines optimize property accesses, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to the time spent in the <code>Object.setPrototypeOf(...)</code> statement, but may extend to <strong><em>any</em></strong> code that has access to any object whose <code>[[Prototype]]</code> has been altered. You can read more in <a href=\"https://mathiasbynens.be/notes/prototypes\" class=\"external\" target=\"_blank\">JavaScript engine fundamentals: optimizing prototypes</a>.\n<p>Because this feature is a part of the language, it is still the burden on engine developers to implement that feature performantly (ideally). Until engine developers address this issue, if you are concerned about performance, you should avoid setting the <code>[[Prototype]]</code> of an object. Instead, create a new object with the desired <code>[[Prototype]]</code> using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>.\n</div>",
      "parameters": {
        "obj": "The object which is to have its prototype set.",
        "prototype": "The object's new prototype (an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>)."
      },
      "returns": "The specified object.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>The <code>obj</code> parameter is <code>undefined</code> or <code>null</code>.</li>\n<li>The <code>obj</code> parameter is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\">non-extensible</a>, or it's an <a href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-immutable-prototype-exotic-objects\" class=\"external\" target=\"_blank\">immutable prototype exotic object</a>, such as <code>Object.prototype</code> or <a href=\"$MDN_URL$/Web/API/Window\"><code>window</code></a>. However, the error is not thrown if the new prototype is the same value as the original prototype of <code>obj</code>.</li>\n<li>The <code>prototype</code> parameter is not an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>.</li>\n</ul>"
      }
    },
    "object.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances returns a string representing this object. This method is meant to be overridden by derived objects for locale-specific purposes.",
      "returns": "The return value of calling <code>this.toString()</code>."
    },
    "object.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances returns a string representing this object. This method is meant to be overridden by derived objects for custom <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#type_coercion\">type coercion</a> logic.",
      "returns": "A string representing the object."
    },
    "object.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances converts the <code>this</code> value <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#object_coercion\">to an object</a>. This method is meant to be overridden by derived objects for custom <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#type_coercion\">type conversion</a> logic.",
      "returns": "The <code>this</code> value, converted to an object.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nIn order for <code>valueOf</code> to be useful during type conversion, it must return a primitive. Because all primitive types have their own <code>valueOf()</code> methods, calling <code>aPrimitiveValue.valueOf()</code> generally does not invoke <code>Object.prototype.valueOf()</code>.\n</div>"
    },
    "object.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "14",
        "Firefox": "47",
        "FirefoxAndroid": "47",
        "Opera": "41",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-03-27",
        "highDate": "2019-09-27"
      },
      "doc": "The <strong><code>Object.values()</code></strong> static method returns an array of a given object's own enumerable string-keyed property values.",
      "parameters": {
        "obj": "An object."
      },
      "returns": "An array containing the given object's own enumerable string-keyed property values."
    },
    "parsefloat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/parsefloat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>parseFloat()</code></strong> function parses a string argument and returns a floating point number.",
      "parameters": {
        "string": "The value to parse, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to a string</a>. Leading <a href=\"$MDN_URL$/Glossary/Whitespace\">whitespace</a> in this argument is ignored."
      },
      "returns": "A floating point number parsed from the given <code>string</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when the first non-whitespace character cannot be converted to a number.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nJavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a> and <code>parseFloat()</code> only differ in their parsing behavior, but not necessarily their return values. For example, <code>parseInt(\"42\")</code> and <code>parseFloat(\"42\")</code> would return the same value: a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> 42.\n</div>"
    },
    "parseint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/parseint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>parseInt()</code></strong> function parses a string argument and returns an integer of the specified <a href=\"https://en.wikipedia.org/wiki/Radix\" class=\"external\" target=\"_blank\">radix</a> (the base in mathematical numeral systems).",
      "parameters": {
        "string": "A string starting with an integer. Leading <a href=\"$MDN_URL$/Glossary/Whitespace\">whitespace</a> in this argument is ignored.",
        "radix": "An integer between <code>2</code> and <code>36</code> that represents the <em>radix</em> (the base in mathematical numeral systems) of the <code>string</code>. It is converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion\">32-bit integer</a>; if it's nonzero and outside the range of [2, 36] after conversion, the function will always return <code>NaN</code>. If <code>0</code> or not provided, the radix will be inferred based on <code>string</code>'s value. Be careful — this does <em>not</em> always default to <code>10</code>! The <a href=\"#description\">description below</a> explains in more detail what happens when <code>radix</code> is not provided."
      },
      "returns": "An integer parsed from the given <code>string</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when\n<ul>\n<li>the <code>radix</code> as a 32-bit integer is smaller than <code>2</code> or bigger than <code>36</code>, or</li>\n<li>the first non-whitespace character cannot be converted to a number.</li>\n</ul>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nJavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. <code>parseInt()</code> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/parseFloat\"><code>parseFloat()</code></a> only differ in their parsing behavior, but not necessarily their return values. For example, <code>parseInt(\"42\")</code> and <code>parseFloat(\"42\")</code> would return the same value: a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> 42.\n</div>"
    },
    "promise": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Promise</code></strong> object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n<p>To learn about the way promises work and how you can use them, we advise you to read <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises\">Using promises</a> first."
    },
    "promise.all": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/all",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Promise.all()</code></strong> static method takes an iterable of promises as input and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises rejects, with this first rejection reason.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) of promises."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is:\n<ul>\n<li><strong>Already fulfilled</strong>, if the <code>iterable</code> passed is empty.</li>\n<li><strong>Asynchronously fulfilled</strong>, when all the promises in the given <code>iterable</code> fulfill. The fulfillment value is an array of fulfillment values, in the order of the promises passed, regardless of completion order. If the <code>iterable</code> passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) fulfilled.</li>\n<li><strong>Asynchronously rejected</strong>, when any of the promises in the given <code>iterable</code> rejects. The rejection reason is the rejection reason of the first promise that was rejected.</li>\n</ul>"
    },
    "promise.allsettled": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/allsettled",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "76",
        "ChromeAndroid": "76",
        "Edge": "79",
        "Firefox": "71",
        "FirefoxAndroid": "79",
        "Opera": "63",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "12.9.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-07-28",
        "highDate": "2023-01-28"
      },
      "doc": "The <strong><code>Promise.allSettled()</code></strong> static method takes an iterable of promises as input and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) of promises."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is:\n<ul>\n<li>\n<p><strong>Already fulfilled</strong>, if the <code>iterable</code> passed is empty.\n</li>\n<li>\n<p><strong>Asynchronously fulfilled</strong>, when all promises in the given <code>iterable</code> have settled (either fulfilled or rejected). The fulfillment value is an array of objects, each describing the outcome of one promise in the <code>iterable</code>, in the order of the promises passed, regardless of completion order. Each outcome object has the following properties:\n<dl>\n<dt id=\"status\"><a href=\"#status\"><code>status</code></a></dt>\n<dd>\n<p>A string, either <code>\"fulfilled\"</code> or <code>\"rejected\"</code>, indicating the eventual state of the promise.\n</dd>\n<dt id=\"value\"><a href=\"#value\"><code>value</code></a></dt>\n<dd>\n<p>Only present if <code>status</code> is <code>\"fulfilled\"</code>. The value that the promise was fulfilled with.\n</dd>\n<dt id=\"reason\"><a href=\"#reason\"><code>reason</code></a></dt>\n<dd>\n<p>Only present if <code>status</code> is <code>\"rejected\"</code>. The reason that the promise was rejected with.\n</dd>\n</dl>\n<p>If the <code>iterable</code> passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) fulfilled.\n</li>\n</ul>"
    },
    "promise.any": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/any",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "71",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-09-16",
        "highDate": "2023-03-16"
      },
      "doc": "The <strong><code>Promise.any()</code></strong> static method takes an iterable of promises as input and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a> containing an array of rejection reasons.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) of promises."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is:\n<ul>\n<li><strong>Already rejected</strong>, if the <code>iterable</code> passed is empty.</li>\n<li><strong>Asynchronously fulfilled</strong>, when any of the promises in the given <code>iterable</code> fulfills. The fulfillment value is the fulfillment value of the first promise that was fulfilled.</li>\n<li><strong>Asynchronously rejected</strong>, when all of the promises in the given <code>iterable</code> reject. The rejection reason is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a> containing an array of rejection reasons in its <code>errors</code> property. The errors are in the order of the promises passed, regardless of completion order. If the <code>iterable</code> passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) rejected.</li>\n</ul>"
    },
    "promise.catch": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/catch",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>catch()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> instances schedules a function to be called when the promise is rejected. It immediately returns another <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object, allowing you to <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises#chaining\">chain</a> calls to other promise methods. It is a shortcut for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>then(undefined, onRejected)</code></a>.",
      "parameters": {
        "onRejected": "A function to asynchronously execute when this promise becomes rejected. Its return value becomes the fulfillment value of the promise returned by <code>catch()</code>. The function is called with the following arguments:\n<dl>\n<dt id=\"reason\"><a href=\"#reason\"><code>reason</code></a></dt>\n<dd>\n<p>The value that the promise was rejected with.\n</dd>\n</dl>"
      },
      "returns": "Returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This new promise is always pending when returned, regardless of the current promise's status. If <code>onRejected</code> is called, the returned promise will resolve based on the return value of this call, or reject with the thrown error from this call. If the current promise fulfills, <code>onRejected</code> is not called and the returned promise fulfills to the same value."
    },
    "promise.finally": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/finally",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "FirefoxAndroid": "58",
        "Opera": "50",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2018-10-02",
        "highDate": "2021-04-02"
      },
      "doc": "The <strong><code>finally()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> instances schedules a function to be called when the promise is settled (either fulfilled or rejected). It immediately returns another <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object, allowing you to <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises#chaining\">chain</a> calls to other promise methods.\n<p>This lets you avoid duplicating code in both the promise's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>then()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>catch()</code></a> handlers.",
      "parameters": {
        "onFinally": "A function to asynchronously execute when this promise becomes settled. Its return value is ignored unless the returned value is a rejected promise. The function is called with no arguments."
      },
      "returns": "Returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> immediately. This new promise is always pending when returned, regardless of the current promise's status. If <code>onFinally</code> throws an error or returns a rejected promise, the new promise will reject with that value. Otherwise, the new promise will settle with the same state as the current promise."
    },
    "promise.promise": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/promise",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Promise()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> objects. It is primarily used to wrap callback-based APIs that do not already support promises.",
      "parameters": {
        "executor": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>function</code></a> to be executed by the constructor. It receives two functions as parameters: <code>resolveFunc</code> and <code>rejectFunc</code>. Any errors thrown in the <code>executor</code> will cause the promise to be rejected, and the return value will be neglected. The semantics of <code>executor</code> are detailed below."
      },
      "returns": "When called via <code>new</code>, the <code>Promise</code> constructor returns a promise object. The promise object will become <em>resolved</em> when either of the functions <code>resolveFunc</code> or <code>rejectFunc</code> are invoked. Note that if you call <code>resolveFunc</code> and pass another promise object as an argument, the initial promise can be said to be \"resolved\", but still not \"settled\". See the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise#description\">Promise description</a> for more explanation."
    },
    "promise.race": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/race",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Promise.race()</code></strong> static method takes an iterable of promises as input and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This returned promise settles with the eventual state of the first promise that settles.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) of promises."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that <strong>asynchronously settles</strong> with the eventual state of the first promise in the <code>iterable</code> to settle. In other words, it fulfills if the first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever if the <code>iterable</code> passed is empty. If the <code>iterable</code> passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) settled."
    },
    "promise.reject": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/reject",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Promise.reject()</code></strong> static method returns a <code>Promise</code> object that is rejected with a given reason.",
      "parameters": {
        "reason": "Reason why this <code>Promise</code> rejected."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is rejected with the given reason."
    },
    "promise.resolve": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/resolve",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Promise.resolve()</code></strong> static method \"resolves\" a given value to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. If the value is a promise, that promise is returned; if the value is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise#thenables\">thenable</a>, <code>Promise.resolve()</code> will call the <code>then()</code> method with two callbacks it prepared; otherwise the returned promise will be fulfilled with the value.\n<p>This function flattens nested layers of promise-like objects (e.g., a promise that fulfills to a promise that fulfills to something) into a single layer — a promise that fulfills to a non-thenable value.",
      "parameters": {
        "value": "Argument to be resolved by this <code>Promise</code>. Can also be a <code>Promise</code> or a thenable to resolve."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is resolved with the given value, or the promise passed as value, if the value was a promise object. A resolved promise can be in any of the states — fulfilled, rejected, or pending. For example, resolving a rejected promise will still result in a rejected promise."
    },
    "promise.symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/symbol.species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "79",
        "Firefox": "48",
        "FirefoxAndroid": "48",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>Promise[Symbol.species]</code></strong> static accessor property returns the constructor used to construct return values from promise methods.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nThe existence of <code>[Symbol.species]</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get [Symbol.species]</code> was called. The return value is used to construct return values from promise chaining methods that create new promises."
    },
    "promise.then": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/then",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>then()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> instances takes up to two arguments: callback functions for the fulfilled and rejected cases of the <code>Promise</code>. It stores the callbacks within the promise it is called on and immediately returns another <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object, allowing you to <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises#chaining\">chain</a> calls to other promise methods.",
      "parameters": {
        "onFulfilled": "A function to asynchronously execute when this promise becomes fulfilled. Its return value becomes the fulfillment value of the promise returned by <code>then()</code>. The function is called with the following arguments:\n<dl>\n<dt id=\"value\"><a href=\"#value\"><code>value</code></a></dt>\n<dd>\n<p>The value that the promise was fulfilled with.\n</dd>\n</dl>\n<p>If it is not a function, it is internally replaced with an <em>identity</em> function (<code>(x) =&gt; x</code>) which simply passes the fulfillment value forward.",
        "onRejected": "A function to asynchronously execute when this promise becomes rejected. Its return value becomes the fulfillment value of the promise returned by <code>then()</code>. The function is called with the following arguments:\n<dl>\n<dt id=\"reason\"><a href=\"#reason\"><code>reason</code></a></dt>\n<dd>\n<p>The value that the promise was rejected with.\n</dd>\n</dl>\n<p>If it is not a function, it is internally replaced with a <em>thrower</em> function (<code>(x) =&gt; { throw x; }</code>) which throws the rejection reason it received."
      },
      "returns": "Returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> immediately. This new promise is always pending when returned, regardless of the current promise's status.\n<p>One of the <code>onFulfilled</code> and <code>onRejected</code> handlers will be executed to handle the current promise's fulfillment or rejection. The call always happens asynchronously, even when the current promise is already settled. The behavior of the returned promise (call it <code>p</code>) depends on the handler's execution result, following a specific set of rules. If the handler function:\n<ul>\n<li>returns a value: <code>p</code> gets fulfilled with the returned value as its value.</li>\n<li>doesn't return anything: <code>p</code> gets fulfilled with <code>undefined</code> as its value.</li>\n<li>throws an error: <code>p</code> gets rejected with the thrown error as its value.</li>\n<li>returns an already fulfilled promise: <code>p</code> gets fulfilled with that promise's value as its value.</li>\n<li>returns an already rejected promise: <code>p</code> gets rejected with that promise's value as its value.</li>\n<li>returns another pending promise: <code>p</code> is pending and becomes fulfilled/rejected with that promise's value as its value immediately after that promise becomes fulfilled/rejected.</li>\n</ul>"
    },
    "promise.try": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/try",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "128",
        "ChromeAndroid": "128",
        "Edge": "128",
        "Firefox": "134",
        "FirefoxAndroid": "134",
        "Opera": "114",
        "Safari": "18.2",
        "SafariIOS": "18.2",
        "Nodejs": "23.0.0",
        "Deno": "1.46"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2025-01-07"
      },
      "doc": "The <strong><code>Promise.try()</code></strong> static method takes a callback of any kind (returns or throws, synchronously or asynchronously) and wraps its result in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>.",
      "parameters": {
        "func": "A function that is called synchronously with the arguments provided (<code>arg1</code>, <code>arg2</code>, …, <code>argN</code>). It can do anything—either return a value, throw an error, or return a promise.",
        "arg1, arg2, …, argN": "Arguments to pass to <code>func</code>."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is:\n<ul>\n<li>Already fulfilled, if <code>func</code> synchronously returns a value.</li>\n<li>Already rejected, if <code>func</code> synchronously throws an error.</li>\n<li>Asynchronously fulfilled or rejected, if <code>func</code> returns a promise.</li>\n</ul>"
    },
    "promise.withresolvers": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/withresolvers",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "119",
        "ChromeAndroid": "119",
        "Edge": "119",
        "Firefox": "121",
        "FirefoxAndroid": "121",
        "Opera": "105",
        "Safari": "17.4",
        "SafariIOS": "17.4",
        "Nodejs": "22.0.0",
        "Deno": "1.38"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-03-05"
      },
      "doc": "The <strong><code>Promise.withResolvers()</code></strong> static method returns an object containing a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object and two functions to resolve or reject it, corresponding to the two parameters passed to the executor of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/Promise\"><code>Promise()</code></a> constructor.",
      "returns": "A plain object containing the following properties:\n<dl>\n<dt id=\"promise\"><a href=\"#promise\"><code>promise</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object.\n</dd>\n<dt id=\"resolve\"><a href=\"#resolve\"><code>resolve</code></a></dt>\n<dd>\n<p>A function that resolves the promise. For its semantics, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/Promise\"><code>Promise()</code></a> constructor reference.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>reject</code></a></dt>\n<dd>\n<p>A function that rejects the promise. For its semantics, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/Promise\"><code>Promise()</code></a> constructor reference.\n</dd>\n</dl>"
    },
    "proxy": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Proxy</code></strong> object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object."
    },
    "proxy.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/apply",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.apply()</code></strong> method is a trap for the <code>[[Call]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as function calls.",
      "parameters": {
        "target": "The target callable object.",
        "thisArg": "The <code>this</code> argument for the call.",
        "argumentsList": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> containing the arguments passed to the function."
      },
      "returns": "The <code>apply()</code> method can return any value, representing the return value of the function call."
    },
    "proxy.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/construct",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.construct()</code></strong> method is a trap for the <code>[[Construct]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself be a valid constructor.",
      "parameters": {
        "target": "The target constructor object.",
        "argumentsList": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> containing the arguments passed to the constructor.",
        "newTarget": "The constructor that was originally called."
      },
      "returns": "The <code>construct()</code> method must return an object, representing the newly created object."
    },
    "proxy.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.defineProperty()</code></strong> method is a trap for the <code>[[DefineOwnProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name.",
        "descriptor": "The descriptor for the property being defined or modified."
      },
      "returns": "The <code>defineProperty()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property has been successfully defined. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[DefineOwnProperty]]</code> internal method returns <code>false</code>."
    },
    "proxy.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/deleteproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.deleteProperty()</code></strong> method is a trap for the <code>[[Delete]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name."
      },
      "returns": "The <code>deleteProperty()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property has been successfully deleted. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator when in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[Delete]]</code> internal method returns <code>false</code>."
    },
    "proxy.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/get",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.get()</code></strong> method is a trap for the <code>[[Get]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessors</a>.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name.",
        "receiver": "The <code>this</code> value for getters; see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/get\"><code>Reflect.get()</code></a>. This is usually either the proxy itself or an object that inherits from the proxy."
      },
      "returns": "The <code>get()</code> method can return any value, representing the property value."
    },
    "proxy.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.getOwnPropertyDescriptor()</code></strong> method is a trap for the <code>[[GetOwnProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name."
      },
      "returns": "The <code>getOwnPropertyDescriptor()</code> method must return an object or <code>undefined</code>, representing the property descriptor. Missing attributes are normalized in the same way as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>."
    },
    "proxy.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "79",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>handler.getPrototypeOf()</code></strong> method is a trap for the <code>[[GetPrototypeOf]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>getPrototypeOf()</code> method must return an object or <code>null</code>, representing the prototype of the target object."
    },
    "proxy.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.has()</code></strong> method is a trap for the <code>[[HasProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> operator.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name."
      },
      "returns": "The <code>has()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property exists. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>."
    },
    "proxy.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/isextensible",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "31",
        "FirefoxAndroid": "31",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.isExtensible()</code></strong> method is a trap for the <code>[[IsExtensible]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>isExtensible()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the target object is extensible. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>."
    },
    "proxy.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/ownkeys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.ownKeys()</code></strong> method is a trap for the <code>[[OwnPropertyKeys]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\"><code>Reflect.ownKeys()</code></a>, etc.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>ownKeys()</code> method must return an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#array-like_objects\">array-like object</a> where each element is either a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> containing no duplicate items."
    },
    "proxy.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "22",
        "FirefoxAndroid": "22",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.preventExtensions()</code></strong> method is a trap for the <code>[[PreventExtensions]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>preventExtensions()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the operation was successful. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[PreventExtensions]]</code> internal method returns <code>false</code>."
    },
    "proxy.proxy": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Proxy()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a> objects.",
      "parameters": {
        "target": "A target object to wrap with <code>Proxy</code>. It can be any sort of object,\nincluding a native array, a function, or even another proxy.",
        "handler": "An object whose properties are functions that define the behavior of the proxy when\nan operation is performed on it."
      }
    },
    "proxy.proxy.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/apply",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.apply()</code></strong> method is a trap for the <code>[[Call]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as function calls.",
      "parameters": {
        "target": "The target callable object.",
        "thisArg": "The <code>this</code> argument for the call.",
        "argumentsList": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> containing the arguments passed to the function."
      },
      "returns": "The <code>apply()</code> method can return any value, representing the return value of the function call."
    },
    "proxy.proxy.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/construct",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.construct()</code></strong> method is a trap for the <code>[[Construct]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself be a valid constructor.",
      "parameters": {
        "target": "The target constructor object.",
        "argumentsList": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> containing the arguments passed to the constructor.",
        "newTarget": "The constructor that was originally called."
      },
      "returns": "The <code>construct()</code> method must return an object, representing the newly created object."
    },
    "proxy.proxy.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/defineproperty",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.defineProperty()</code></strong> method is a trap for the <code>[[DefineOwnProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name.",
        "descriptor": "The descriptor for the property being defined or modified."
      },
      "returns": "The <code>defineProperty()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property has been successfully defined. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[DefineOwnProperty]]</code> internal method returns <code>false</code>."
    },
    "proxy.proxy.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/deleteproperty",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.deleteProperty()</code></strong> method is a trap for the <code>[[Delete]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name."
      },
      "returns": "The <code>deleteProperty()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property has been successfully deleted. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator when in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[Delete]]</code> internal method returns <code>false</code>."
    },
    "proxy.proxy.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/get",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.get()</code></strong> method is a trap for the <code>[[Get]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessors</a>.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name.",
        "receiver": "The <code>this</code> value for getters; see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/get\"><code>Reflect.get()</code></a>. This is usually either the proxy itself or an object that inherits from the proxy."
      },
      "returns": "The <code>get()</code> method can return any value, representing the property value."
    },
    "proxy.proxy.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getownpropertydescriptor",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.getOwnPropertyDescriptor()</code></strong> method is a trap for the <code>[[GetOwnProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name."
      },
      "returns": "The <code>getOwnPropertyDescriptor()</code> method must return an object or <code>undefined</code>, representing the property descriptor. Missing attributes are normalized in the same way as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>."
    },
    "proxy.proxy.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getprototypeof",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>handler.getPrototypeOf()</code></strong> method is a trap for the <code>[[GetPrototypeOf]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>getPrototypeOf()</code> method must return an object or <code>null</code>, representing the prototype of the target object."
    },
    "proxy.proxy.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/has",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.has()</code></strong> method is a trap for the <code>[[HasProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> operator.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name."
      },
      "returns": "The <code>has()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property exists. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>."
    },
    "proxy.proxy.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/isextensible",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.isExtensible()</code></strong> method is a trap for the <code>[[IsExtensible]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>isExtensible()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the target object is extensible. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>."
    },
    "proxy.proxy.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/ownkeys",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.ownKeys()</code></strong> method is a trap for the <code>[[OwnPropertyKeys]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\"><code>Reflect.ownKeys()</code></a>, etc.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>ownKeys()</code> method must return an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#array-like_objects\">array-like object</a> where each element is either a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> containing no duplicate items."
    },
    "proxy.proxy.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/preventextensions",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.preventExtensions()</code></strong> method is a trap for the <code>[[PreventExtensions]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>preventExtensions()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the operation was successful. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[PreventExtensions]]</code> internal method returns <code>false</code>."
    },
    "proxy.proxy.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/set",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.set()</code></strong> method is a trap for the <code>[[Set]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessors</a> to set a property's value.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name.",
        "value": "The new value of the property to set.",
        "receiver": "The <code>this</code> value for setters; see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/set\"><code>Reflect.set()</code></a>. This is usually either the proxy itself or an object that inherits from the proxy."
      },
      "returns": "The <code>set()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the assignment succeeded. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including using property accessors in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[Set]]</code> internal method returns <code>false</code>."
    },
    "proxy.proxy.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/setprototypeof",
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.setPrototypeOf()</code></strong> method is a trap for the <code>[[SetPrototypeOf]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "prototype": "The object's new prototype or <code>null</code>."
      },
      "returns": "The <code>setPrototypeOf()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the prototype was successfully changed. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[SetPrototypeOf]]</code> internal method returns <code>false</code>."
    },
    "proxy.revocable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/revocable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "12",
        "Firefox": "34",
        "FirefoxAndroid": "34",
        "Opera": "50",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-12-06",
        "highDate": "2020-06-06"
      },
      "doc": "The <strong><code>Proxy.revocable()</code></strong> static method creates a revocable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a> object.",
      "parameters": {
        "target": "A target object to wrap with <code>Proxy</code>. It can be any sort of object, including a native array, a function, or even another proxy.",
        "handler": "An object whose properties are functions defining the behavior of <code>proxy</code> when an operation is performed on it."
      },
      "returns": "A plain object with the following two properties:\n<dl>\n<dt id=\"proxy\"><a href=\"#proxy\"><code>proxy</code></a></dt>\n<dd>\n<p>A Proxy object exactly the same as one created with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy\"><code>new Proxy(target, handler)</code></a> call.\n</dd>\n<dt id=\"revoke\"><a href=\"#revoke\"><code>revoke</code></a></dt>\n<dd>\n<p>A function with no parameters to revoke (switch off) the <code>proxy</code>.\n</dd>\n</dl>"
    },
    "proxy.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "18",
        "FirefoxAndroid": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.set()</code></strong> method is a trap for the <code>[[Set]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessors</a> to set a property's value.",
      "parameters": {
        "target": "The target object.",
        "property": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> representing the property name.",
        "value": "The new value of the property to set.",
        "receiver": "The <code>this</code> value for setters; see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/set\"><code>Reflect.set()</code></a>. This is usually either the proxy itself or an object that inherits from the proxy."
      },
      "returns": "The <code>set()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the assignment succeeded. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including using property accessors in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[Set]]</code> internal method returns <code>false</code>."
    },
    "proxy.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>handler.setPrototypeOf()</code></strong> method is a trap for the <code>[[SetPrototypeOf]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "prototype": "The object's new prototype or <code>null</code>."
      },
      "returns": "The <code>setPrototypeOf()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the prototype was successfully changed. Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\">coerced to booleans</a>.\n<p>Many operations, including <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>, throw a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the <code>[[SetPrototypeOf]]</code> internal method returns <code>false</code>."
    },
    "rangeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/rangeerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>RangeError</code></strong> object indicates an error when a value is not in the set or range of allowed values."
    },
    "rangeerror.rangeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/rangeerror/rangeerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>RangeError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties:\n<dl>\n<dt id=\"cause\"><a href=\"#cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n</dd>\n</dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "referenceerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/referenceerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>ReferenceError</code></strong> object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.\n<p><code>ReferenceError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/Window/structuredClone\" ><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>ReferenceError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "referenceerror.referenceerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/referenceerror/referenceerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>ReferenceError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties:\n<dl>\n<dt id=\"cause\"><a href=\"#cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n</dd>\n</dl>",
        "fileName": "The name of the file containing the code that caused the exception.",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "reflect": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect</code></strong> namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy\">proxy handlers</a>."
    },
    "reflect.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/apply",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.apply()</code></strong> static method calls a target function with arguments as specified.",
      "parameters": {
        "target": "The target function to call.",
        "thisArgument": "The value of <code>this</code> provided for the call to <code>target</code>.",
        "argumentsList": "An <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like object</a> specifying the arguments with which <code>target</code> should be called."
      },
      "returns": "The result of calling the given <code>target</code> function with the specified <code>this</code> value and arguments.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not a function or <code>argumentsList</code> is not an object."
      }
    },
    "reflect.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/construct",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.construct()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator, but as a function. It is equivalent to calling <code>new target(...args)</code>. It additionally allows to specify a different <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a> value.",
      "parameters": {
        "target": "The target function to call.",
        "argumentsList": "An <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like object</a> specifying the arguments with which <code>target</code> should be called.",
        "newTarget": "The value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a> expression inside <code>target</code>. Defaults to <code>target</code>. Generally (<a href=\"#changing_new.target\">see example</a>), <code>target</code> specifies the <em>logic</em> to initialize the object, while <code>newTarget.prototype</code> specifies the <em>prototype</em> of the constructed object."
      },
      "returns": "A new instance of <code>target</code> (or <code>newTarget</code>, if present), initialized by <code>target</code> as a constructor with the given <code>argumentsList</code>.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> or <code>newTarget</code> is not a constructor, or if <code>argumentsList</code> is not an object."
      }
    },
    "reflect.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.defineProperty()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> but returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>.",
      "parameters": {
        "target": "The target object on which to define the property.",
        "propertyKey": "The name of the property to be defined or modified.",
        "attributes": "The attributes for the property being defined or modified."
      },
      "returns": "A boolean indicating whether or not the property was successfully defined.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> or <code>attributes</code> is not an object."
      }
    },
    "reflect.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/deleteproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.deleteProperty()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator, but as a function. It deletes a property from an object.",
      "parameters": {
        "target": "The target object on which to delete the property.",
        "propertyKey": "The name of the property to be deleted."
      },
      "returns": "A boolean indicating whether or not the property was successfully deleted.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/get",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.get()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessor</a> syntax, but as a function.",
      "parameters": {
        "target": "The target object on which to get the property.",
        "propertyKey": "The name of the property to get.",
        "receiver": "The value of <code>this</code> provided for the call to <code>target</code> if a getter is encountered."
      },
      "returns": "The value of the property.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.getOwnPropertyDescriptor()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>. It returns a property descriptor of the given property if it exists on the object, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> otherwise.",
      "parameters": {
        "target": "The target object in which to look for the property.",
        "propertyKey": "The name of the property to get an own property descriptor for."
      },
      "returns": "A property descriptor object if the property exists as an own property of <code>target</code>; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.getPrototypeOf()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>. It returns the prototype of the specified object.",
      "parameters": {
        "target": "The target object of which to get the prototype."
      },
      "returns": "The prototype of the given object, which may be an object or <code>null</code>.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.has()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> operator, but\nas a function.",
      "parameters": {
        "target": "The target object in which to look for the property.",
        "propertyKey": "The name of the property to check."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the <code>target</code> has the property.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/isextensible",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.isExtensible()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>. It determines if an object is extensible (whether it can have new properties added to it).",
      "parameters": {
        "target": "The target object which to check if it is extensible."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the target is extensible.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/ownkeys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.ownKeys()</code></strong> static method returns an array of the <code>target</code> object's own property keys.",
      "parameters": {
        "target": "The target object from which to get the own keys."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of the <code>target</code> object's own property keys, including strings and symbols. For most objects, the array will be in the order of:\n<ol>\n<li>Non-negative integer indexes in increasing numeric order (but as strings)</li>\n<li>Other string keys in the order of property creation</li>\n<li>Symbol keys in the order of property creation.</li>\n</ol>",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.preventExtensions()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>. It prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).",
      "parameters": {
        "target": "The target object on which to prevent extensions."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the target was successfully set to prevent extensions.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.set()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessor</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Assignment\">assignment</a> syntax, but as a function.",
      "parameters": {
        "target": "The target object on which to set the property.",
        "propertyKey": "The name of the property to set.",
        "value": "The value to set.",
        "receiver": "The value of <code>this</code> provided for the call to the setter for <code>propertyKey</code> on <code>target</code>. If provided and <code>target</code> does not have a setter for <code>propertyKey</code>, the property will be set on <code>receiver</code> instead."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not setting the property was successful.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "12",
        "Firefox": "42",
        "FirefoxAndroid": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Reflect.setPrototypeOf()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a> but returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>. It sets the prototype (i.e., the internal <code>[[Prototype]]</code> property) of a specified object.",
      "parameters": {
        "target": "The target object of which to set the prototype.",
        "prototype": "The object's new prototype (an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>)."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the prototype was successfully set.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object or if <code>prototype</code> is neither an object nor <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>."
      }
    },
    "regexp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>RegExp</code></strong> object is used for matching text with a pattern.\n<p>For an introduction to regular expressions, read the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions\">Regular expressions chapter</a> in the JavaScript guide. For detailed information of regular expression syntax, read the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Regular_expressions\">regular expression reference</a>."
    },
    "regexp.compile": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/compile",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "6",
        "Safari": "3.1",
        "SafariIOS": "2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThe <code>compile()</code> method is only specified for compatibility reasons. Using <code>compile()</code> causes the otherwise immutable regex source and flags to become mutable, which may break user expectations. You can use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\"><code>RegExp()</code></a> constructor to construct a new regular expression object instead.\n</div>\n<p>The <strong><code>compile()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances is used to recompile a regular expression with new source and flags after the <code>RegExp</code> object has already been created.",
      "parameters": {
        "pattern": "The text of the regular expression.",
        "flags": "Any combination of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp#flags\">flag values</a>."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>)."
    },
    "regexp.dotall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/dotall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "62",
        "ChromeAndroid": "62",
        "Edge": "79",
        "Firefox": "78",
        "FirefoxAndroid": "79",
        "Opera": "49",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-07-28",
        "highDate": "2023-01-28"
      },
      "doc": "The <strong><code>dotAll</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>s</code> flag is used with this regular expression."
    },
    "regexp.escape": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/escape",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "136",
        "ChromeAndroid": "136",
        "Edge": "136",
        "Firefox": "134",
        "FirefoxAndroid": "134",
        "Safari": "18.2",
        "SafariIOS": "18.2"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>RegExp.escape()</code></strong> static method <a href=\"$MDN_URL$/Web/JavaScript/Reference/Regular_expressions#escape_sequences\">escapes</a> any potential regex syntax characters in a string, and returns a new string that can be safely used as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Regular_expressions/Literal_character\">literal</a> pattern for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\"><code>RegExp()</code></a> constructor.\n<p>When dynamically creating a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> with user-provided content, consider using this function to sanitize the input (unless the input is actually intended to contain regex syntax). In addition, don't try to re-implement its functionality by, for example, using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll()</code></a> to insert a <code>\\</code> before all syntax characters. <code>RegExp.escape()</code> is designed to use escape sequences that work in many more edge cases/contexts than hand-crafted code is likely to achieve.",
      "parameters": {
        "string": "The string to escape."
      },
      "returns": "A new string that can be safely used as a literal pattern for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\"><code>RegExp()</code></a> constructor. Namely, the following things in the input string are replaced:\n<ul>\n<li>The first character of the string, if it's either a decimal digit (0–9) or ASCII letter (a–z, A–Z), is escaped using the <code>\\x</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Regular_expressions/Character_escape\">character escape</a> syntax. For example, <code>RegExp.escape(\"foo\")</code> returns <code>\"\\\\x66oo\"</code> (here and after, the two backslashes in a string literal denote a single backslash character). This step ensures that if this escaped string is embedded into a bigger pattern where it's immediately preceded by <code>\\1</code>, <code>\\x0</code>, <code>\\u000</code>, etc., the leading character doesn't get interpreted as part of the escape sequence.</li>\n<li>Regex <a href=\"$MDN_URL$/Web/JavaScript/Reference/Regular_expressions/Literal_character#description\">syntax characters</a>, including <code>^</code>, <code>$</code>, <code>\\</code>, <code>.</code>, <code>*</code>, <code>+</code>, <code>?</code>, <code>(</code>, <code>)</code>, <code>[</code>, <code>]</code>, <code>{</code>, <code>}</code>, and <code>|</code>, as well as the <code>/</code> delimiter, are escaped by inserting a <code>\\</code> character before them. For example, <code>RegExp.escape(\"foo.bar\")</code> returns <code>\"\\\\x66oo\\\\.bar\"</code>, and <code>RegExp.escape(\"(foo)\")</code> returns <code>\"\\\\(foo\\\\)\"</code>.</li>\n<li>Other punctuators, including <code>,</code>, <code>-</code>, <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>#</code>, <code>&amp;</code>, <code>!</code>, <code>%</code>, <code>:</code>, <code>;</code>, <code>@</code>, <code>~</code>, <code>'</code>, <code>`</code>, and <code>\"</code>, are escaped using the <code>\\x</code> syntax. For example, <code>RegExp.escape(\"foo-bar\")</code> returns <code>\"\\\\x66oo\\\\x2dbar\"</code>. These characters cannot be escaped by prefixing with <code>\\</code> because, for example, <code>/foo\\-bar/u</code> is a syntax error.</li>\n<li>The characters with their own <a href=\"$MDN_URL$/Web/JavaScript/Reference/Regular_expressions/Character_escape\">character escape</a> sequences: <code>\\f</code> (U+000C FORM FEED), <code>\\n</code> (U+000A LINE FEED), <code>\\r</code> (U+000D CARRIAGE RETURN), <code>\\t</code> (U+0009 CHARACTER TABULATION), and <code>\\v</code> (U+000B LINE TABULATION), are replaced with their escape sequences. For example, <code>RegExp.escape(\"foo\\nbar\")</code> returns <code>\"\\\\x66oo\\\\nbar\"</code>.</li>\n<li>The space character is escaped as <code>\"\\\\x20\"</code>.</li>\n<li>Other non-ASCII <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#white_space\">line break and white space characters</a> are replaced with one or two <code>\\uXXXX</code> escape sequences representing their UTF-16 code units. For example, <code>RegExp.escape(\"foo\\u2028bar\")</code> returns <code>\"\\\\x66oo\\\\u2028bar\"</code>.</li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">Lone surrogates</a> are replaced with their <code>\\uXXXX</code> escape sequences. For example, <code>RegExp.escape(\"foo\\uD800bar\")</code> returns <code>\"\\\\x66oo\\\\ud800bar\"</code>.</li>\n</ul>",
      "throws": {
        "TypeError": "Thrown if <code>string</code> is not a string."
      }
    },
    "regexp.exec": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/exec",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>exec()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances executes a search with this regular expression for a match in a specified string and returns a result array, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>.",
      "parameters": {
        "str": "The string against which to match the regular expression. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>exec()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want."
      },
      "returns": "If the match fails, the <code>exec()</code> method returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>, and sets the regex's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> to <code>0</code>.\n<p>If the match succeeds, the <code>exec()</code> method returns an array and updates the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> property of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing group of the matched text. The array also has the following additional properties:\n<dl>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The 0-based index of the match in the string.\n</dd>\n<dt id=\"input\"><a href=\"#input\"><code>input</code></a></dt>\n<dd>\n<p>The original string that was matched against.\n</dd>\n<dt id=\"groups\"><a href=\"#groups\"><code>groups</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects\"><code>null</code>-prototype object</a> of named capturing groups, whose keys are the names, and values are the capturing groups, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no named capturing groups were defined. See <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\">capturing groups</a> for more information.\n</dd>\n<dt id=\"indices\"><a href=\"#indices\"><code>indices</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>This property is only present when the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>d</code></a> flag is set. It is an array where each entry represents the bounds of a substring match. The index of each element in this array corresponds to the index of the respective substring match in the array returned by <code>exec()</code>. In other words, the first <code>indices</code> entry represents the entire match, the second <code>indices</code> entry represents the first capturing group, etc. Each entry itself is a two-element array, where the first number represents the match's start index, and the second number, its end index.\n<p>The <code>indices</code> array additionally has a <code>groups</code> property, which holds a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects\"><code>null</code>-prototype object</a> of all named capturing groups. The keys are the names of the capturing groups, and each value is a two-element array, with the first number being the start index, and the second number being the end index of the capturing group. If the regular expression doesn't contain any named capturing groups, <code>groups</code> is <code>undefined</code>.\n</dd>\n</dl>"
    },
    "regexp.flags": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/flags",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "79",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "39",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>flags</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags\">flags</a> of this regular expression."
    },
    "regexp.global": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/global",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>global</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>g</code> flag is used with this regular expression."
    },
    "regexp.hasindices": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/hasindices",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "90",
        "ChromeAndroid": "90",
        "Edge": "90",
        "Firefox": "88",
        "FirefoxAndroid": "88",
        "Opera": "76",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-09-20",
        "highDate": "2024-03-20"
      },
      "doc": "The <strong><code>hasIndices</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>d</code> flag is used with this regular expression."
    },
    "regexp.ignorecase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/ignorecase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>ignoreCase</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>i</code> flag is used with this regular expression."
    },
    "regexp.input": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/input",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "15",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.input</code></strong> static accessor property returns the string against which a regular expression is matched. <code>RegExp.$_</code> is an alias for this property."
    },
    "regexp.lastindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>lastIndex</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instance specifies the index at which to start the next match."
    },
    "regexp.lastmatch": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastmatch",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.lastMatch</code></strong> static accessor property returns the last matched substring. <code>RegExp[\"$&amp;\"]</code> is an alias for this property."
    },
    "regexp.lastparen": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastparen",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.lastParen</code></strong> static accessor property returns the last parenthesized substring match, if any. <code>RegExp[\"$+\"]</code> is an alias for this property."
    },
    "regexp.leftcontext": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/leftcontext",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "8",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.leftContext</code></strong> static accessor property returns the substring preceding the most recent match. <code>RegExp[\"$`\"]</code> is an alias for this property."
    },
    "regexp.multiline": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/multiline",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>multiline</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>m</code> flag is used with this regular expression."
    },
    "regexp.n": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/n",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.$1, …, RegExp.$9</code></strong> static accessor properties return parenthesized substring matches."
    },
    "regexp.regexp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/regexp",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>RegExp()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> objects.\n<p>For an introduction to regular expressions, read the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions\">Regular Expressions chapter</a> in the <a href=\"$MDN_URL$/Web/JavaScript/Guide\">JavaScript Guide</a>.",
      "parameters": {
        "pattern": "The text of the regular expression. This can also be another <code>RegExp</code> object.",
        "flags": "If specified, <code>flags</code> is a string that contains the flags to add. Alternatively, if a <code>RegExp</code> object is supplied for the <code>pattern</code>, the <code>flags</code> string will replace any of that object's flags (and <code>lastIndex</code> will be reset to <code>0</code>).\n<p><code>flags</code> may contain any combination of the following characters:\n<dl>\n<dt id=\"d_indices\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>d</code> (indices)</a></dt>\n<dd>\n<p>Generate indices for substring matches.\n</dd>\n<dt id=\"g_global\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>g</code> (global)</a></dt>\n<dd>\n<p>Find all matches rather than stopping after the first match.\n</dd>\n<dt id=\"i_ignore_case\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>i</code> (ignore case)</a></dt>\n<dd>\n<p>When matching, casing differences are ignored.\n</dd>\n<dt id=\"m_multiline\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>m</code> (multiline)</a></dt>\n<dd>\n<p>Treat beginning and end assertions (<code>^</code> and <code>$</code>) as working over multiple lines. In other words, match the beginning or end of <em>each</em> line (delimited by <code>\\n</code> or <code>\\r</code>), not only the very beginning or end of the whole input string.\n</dd>\n<dt id=\"s_dotall\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>s</code> (dotAll)</a></dt>\n<dd>\n<p>Allows <code>.</code> to match newlines.\n</dd>\n<dt id=\"u_unicode\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>u</code> (unicode)</a></dt>\n<dd>\n<p>Treat <code>pattern</code> as a sequence of Unicode code points.\n</dd>\n<dt id=\"v_unicodesets\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets\"><code>v</code> (unicodeSets)</a></dt>\n<dd>\n<p>An upgrade to the <code>u</code> flag that enables set notation in character classes as well as properties of strings.\n</dd>\n<dt id=\"y_sticky\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>y</code> (sticky)</a></dt>\n<dd>\n<p>Matches only from the index indicated by the <code>lastIndex</code> property of this regular expression in the target string. Does not attempt to match from any later indexes.\n</dd>\n</dl>"
      },
      "returns": "<code>RegExp(pattern)</code> returns <code>pattern</code> directly if all of the following are true:\n<ul>\n<li><code>RegExp()</code> is called without <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>;</li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\"><code>pattern</code> is a regex</a>;</li>\n<li><code>pattern.constructor === RegExp</code> (usually meaning it's not a subclass);</li>\n<li><code>flags</code> is <code>undefined</code>.</li>\n</ul>\n<p>In all other cases, calling <code>RegExp()</code> with or without <code>new</code> both create a new <code>RegExp</code> object. If <code>pattern</code> is a regex, the new object's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/source\">source</a> is <code>pattern.source</code>; otherwise, its source is <code>pattern</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to a string</a>. If the <code>flags</code> parameter is not <code>undefined</code>, the new object's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>flags</code></a> is the parameter's value; otherwise, its <code>flags</code> is <code>pattern.flags</code> (if <code>pattern</code> is a regex).",
      "throws": {
        "SyntaxError": "Thrown in one of the following cases:\n<ul>\n<li><code>pattern</code> cannot be parsed as a valid regular expression.</li>\n<li><code>flags</code> contains repeated characters or any character outside of those allowed.</li>\n</ul>"
      }
    },
    "regexp.rightcontext": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/rightcontext",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "8",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.rightContext</code></strong> static accessor property returns the substring following the most recent match. <code>RegExp[\"$'\"]</code> is an alias for this property."
    },
    "regexp.source": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/source",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>source</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns a string containing the source text of this regular expression, without the two forward slashes on both sides or any flags."
    },
    "regexp.sticky": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/sticky",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "13",
        "Firefox": "3",
        "FirefoxAndroid": "4",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>sticky</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>y</code> flag is used with this regular expression."
    },
    "regexp.symbol.match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/symbol.match",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "13",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>[Symbol.match]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> should behave. In addition, its presence (or absence) can influence whether an object is regarded as a regular expression.",
      "parameters": {
        "str": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> that is a target of the match."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> whose contents depend on the presence or absence of the global (<code>g</code>) flag, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> if no matches are found.\n<ul>\n<li>If the <code>g</code> flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included.</li>\n<li>If the <code>g</code> flag is not used, only the first complete match and its related capturing groups are returned. In this case, <code>match()</code> will return the same result as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a> (an array with some extra properties).</li>\n</ul>"
    },
    "regexp.symbol.matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/symbol.matchall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "73",
        "ChromeAndroid": "73",
        "Edge": "79",
        "Firefox": "67",
        "FirefoxAndroid": "67",
        "Opera": "60",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>[Symbol.matchAll]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll</code></a> should behave.",
      "parameters": {
        "str": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> that is a target of the match."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> (which is not restartable) of matches. Each match is an array with the same shape as the return value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a>."
    },
    "regexp.symbol.replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/symbol.replace",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>[Symbol.replace]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll()</code></a> should behave when the regular expression is passed in as the pattern.",
      "parameters": {
        "str": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> that is a target of the replacement.",
        "replacement": "Can be a string or a function.\n<ul>\n<li>If it's a string, it will replace the substring matched by the current regexp. A number of special replacement patterns are supported; see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_the_replacement\">Specifying a string as the replacement</a> section of <code>String.prototype.replace</code>.</li>\n<li>If it's a function, it will be invoked for every match and the return value is used as the replacement text. The arguments supplied to this function are described in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_the_replacement\">Specifying a function as the replacement</a> section of <code>String.prototype.replace</code>.</li>\n</ul>"
      },
      "returns": "A new string, with one, some, or all matches of the pattern replaced by the specified replacement."
    },
    "regexp.symbol.search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/symbol.search",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "13",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>[Symbol.search]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search</code></a> should behave.",
      "parameters": {
        "str": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> that is a target of the search."
      },
      "returns": "The index of the first match between the regular expression and the given string, or <code>-1</code> if no match was found."
    },
    "regexp.symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/symbol.species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>RegExp[Symbol.species]</code></strong> static accessor property returns the constructor used to construct copied regular expressions in certain <code>RegExp</code> methods.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nThe existence of <code>[Symbol.species]</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get [Symbol.species]</code> was called. The return value is used to construct copied <code>RegExp</code> instances."
    },
    "regexp.symbol.split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/symbol.split",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>[Symbol.split]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split</code></a> should behave when the regular expression is passed in as the separator.",
      "parameters": {
        "str": "The target of the split operation.",
        "limit": "Integer specifying a limit on the number of splits to be found. The <code>[Symbol.split]()</code> method still splits on every match of <code>this</code> RegExp pattern (or, in the Syntax above, <code>regexp</code>), until the number of split items match the <code>limit</code> or the string falls short of <code>this</code> pattern."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> containing substrings as its elements. Capturing groups are included."
    },
    "regexp.test": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/test",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>test()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances executes a search with this regular expression for a match between a regular expression and a specified string. Returns <code>true</code> if there is a match; <code>false</code> otherwise.\n<p>JavaScript <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> objects are <strong>stateful</strong> when they have\nthe <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>global</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>sticky</code></a> flags\nset (e.g., <code>/foo/g</code> or <code>/foo/y</code>). They store a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> from the previous match. Using this\ninternally, <code>test()</code> can be used to iterate over multiple matches in a string\nof text (with capture groups).",
      "parameters": {
        "str": "The string against which to match the regular expression. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>test()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want."
      },
      "returns": "<code>true</code> if there is a match between the regular expression and the string\n<code>str</code>. Otherwise, <code>false</code>."
    },
    "regexp.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns a string representing this regular expression.",
      "returns": "A string representing the given object."
    },
    "regexp.unicode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/unicode",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "12",
        "Firefox": "46",
        "FirefoxAndroid": "46",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>unicode</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>u</code> flag is used with this regular expression."
    },
    "regexp.unicodesets": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/unicodesets",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "112",
        "ChromeAndroid": "112",
        "Edge": "112",
        "Firefox": "116",
        "FirefoxAndroid": "116",
        "Opera": "98",
        "Safari": "17",
        "SafariIOS": "17",
        "Nodejs": "20.0.0",
        "Deno": "1.32"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-09-18"
      },
      "doc": "The <strong><code>unicodeSets</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>v</code> flag is used with this regular expression."
    },
    "set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Set</code></strong> object lets you store unique values of any type, whether <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a> or object references."
    },
    "set.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/add",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>add()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances inserts a new element with a specified value in to this set, if there isn't an element with the same value already in this set",
      "parameters": {
        "value": "The value of the element to add to the <code>Set</code> object."
      },
      "returns": "The <code>Set</code> object with added value."
    },
    "set.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/clear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "19",
        "FirefoxAndroid": "19",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>clear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances removes all elements from this set.",
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>)."
    },
    "set.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/delete",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>delete()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances removes a specified value from this set, if it is in the set.",
      "parameters": {
        "value": "The value to remove from <code>Set</code>."
      },
      "returns": "Returns <code>true</code> if <code>value</code> was already in\n<code>Set</code>; otherwise <code>false</code>."
    },
    "set.difference": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/difference",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "127",
        "FirefoxAndroid": "127",
        "Opera": "108",
        "Safari": "17",
        "SafariIOS": "17",
        "Nodejs": "22.0.0",
        "Deno": "1.42"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-06-11"
      },
      "doc": "The <strong><code>difference()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances takes a set and returns a new set containing elements in this set but not in the given set.",
      "parameters": {
        "other": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects\">set-like</a> object."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object containing elements in this set but not in the <code>other</code> set."
    },
    "set.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "24",
        "FirefoxAndroid": "24",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>entries()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">set iterator</a></em> object that contains <strong>an array of <code>[value, value]</code></strong> for each element in this set, in insertion order. For <code>Set</code> objects there is no <code>key</code> like in <code>Map</code> objects. However, to keep the API similar to the <code>Map</code> object, each <em>entry</em> has the same value for its <em>key</em> and <em>value</em> here, so that an array <code>[value, value]</code> is returned.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "set.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/foreach",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "25",
        "FirefoxAndroid": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>forEach()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances executes a provided function once\nfor each value in this set, in insertion order.",
      "parameters": {
        "callback": "A function to execute for each entry in the set. The function is called with the following arguments:\n<dl>\n<dt id=\"value\"><a href=\"#value\"><code>value</code></a></dt>\n<dd>\n<p>Value of each iteration.\n</dd>\n<dt id=\"key\"><a href=\"#key\"><code>key</code></a></dt>\n<dd>\n<p>Key of each iteration. This is always the same as <code>value</code>.\n</dd>\n<dt id=\"set\"><a href=\"#set\"><code>set</code></a></dt>\n<dd>\n<p>The set being iterated.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>)."
    },
    "set.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>has()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances returns a boolean indicating whether an\nelement with the specified value exists in this set or not.",
      "parameters": {
        "value": "The value to test for presence in the <code>Set</code> object."
      },
      "returns": "Returns <code>true</code> if an element with the specified value exists in the <code>Set</code> object; otherwise <code>false</code>."
    },
    "set.intersection": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/intersection",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "127",
        "FirefoxAndroid": "127",
        "Opera": "108",
        "Safari": "17",
        "SafariIOS": "17",
        "Nodejs": "22.0.0",
        "Deno": "1.42"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-06-11"
      },
      "doc": "The <strong><code>intersection()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances takes a set and returns a new set containing elements in both this set and the given set.",
      "parameters": {
        "other": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects\">set-like</a> object."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object containing elements in both this set and the <code>other</code> set."
    },
    "set.isdisjointfrom": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/isdisjointfrom",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "127",
        "FirefoxAndroid": "127",
        "Opera": "108",
        "Safari": "17",
        "SafariIOS": "17",
        "Nodejs": "22.0.0",
        "Deno": "1.42"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-06-11"
      },
      "doc": "The <strong><code>isDisjointFrom()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances takes a set and returns a boolean indicating if this set has no elements in common with the given set.",
      "parameters": {
        "other": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects\">set-like</a> object."
      },
      "returns": "<code>true</code> if this set has no elements in common with the <code>other</code> set, and <code>false</code> otherwise."
    },
    "set.issubsetof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/issubsetof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "127",
        "FirefoxAndroid": "127",
        "Opera": "108",
        "Safari": "17",
        "SafariIOS": "17",
        "Nodejs": "22.0.0",
        "Deno": "1.42"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-06-11"
      },
      "doc": "The <strong><code>isSubsetOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances takes a set and returns a boolean indicating if all elements of this set are in the given set.",
      "parameters": {
        "other": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects\">set-like</a> object."
      },
      "returns": "<code>true</code> if all elements in this set are also in the <code>other</code> set, and <code>false</code> otherwise."
    },
    "set.issupersetof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/issupersetof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "127",
        "FirefoxAndroid": "127",
        "Opera": "108",
        "Safari": "17",
        "SafariIOS": "17",
        "Nodejs": "22.0.0",
        "Deno": "1.42"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-06-11"
      },
      "doc": "The <strong><code>isSupersetOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances takes a set and returns a boolean indicating if all elements of the given set are in this set.",
      "parameters": {
        "other": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects\">set-like</a> object."
      },
      "returns": "<code>true</code> if all elements in the <code>other</code> set are also in this set, and <code>false</code> otherwise."
    },
    "set.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/keys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "24",
        "FirefoxAndroid": "24",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>keys()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances is an alias for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>values()</code></a> method.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "set.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "13",
        "FirefoxAndroid": "14",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Set()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> objects.",
      "parameters": {
        "iterable": "If an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\">iterable object</a> is passed, all of its elements will be added to the new\n<code>Set</code>.\n<p>If you don't specify this parameter, or its value is <code>null</code>, the new\n<code>Set</code> is empty."
      },
      "returns": "A new <code>Set</code> object."
    },
    "set.size": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/size",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "19",
        "FirefoxAndroid": "19",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>size</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances returns the number of (unique) elements in this set."
    },
    "set.symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/symbol.iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "43",
        "ChromeAndroid": "43",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "30",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>[Symbol.iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows <code>Set</code> objects to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">set iterator object</a> that yields the values of the set in insertion order.\n<p>The initial value of this property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values</code></a> property.",
      "returns": "The same return value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a>: a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the values of the set."
    },
    "set.symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/symbol.species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "41",
        "FirefoxAndroid": "41",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Set[Symbol.species]</code></strong> static accessor property is an unused accessor property specifying how to copy <code>Set</code> objects.",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get [Symbol.species]</code> was called. The return value is used to construct copied <code>Set</code> instances."
    },
    "set.symmetricdifference": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/symmetricdifference",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "127",
        "FirefoxAndroid": "127",
        "Opera": "108",
        "Safari": "17",
        "SafariIOS": "17",
        "Nodejs": "22.0.0",
        "Deno": "1.42"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-06-11"
      },
      "doc": "The <strong><code>symmetricDifference()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances takes a set and returns a new set containing elements which are in either this set or the given set, but not in both.",
      "parameters": {
        "other": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects\">set-like</a> object."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object containing elements which are in either this set or the <code>other</code> set, but not in both."
    },
    "set.union": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/union",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "122",
        "ChromeAndroid": "122",
        "Edge": "122",
        "Firefox": "127",
        "FirefoxAndroid": "127",
        "Opera": "108",
        "Safari": "17",
        "SafariIOS": "17",
        "Nodejs": "22.0.0",
        "Deno": "1.42"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-06-11"
      },
      "doc": "The <strong><code>union()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances takes a set and returns a new set containing elements which are in either or both of this set and the given set.",
      "parameters": {
        "other": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects\">set-like</a> object."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object containing elements which are in either or both of this set and the <code>other</code> set."
    },
    "set.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "24",
        "FirefoxAndroid": "24",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>values()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">set iterator</a></em> object that contains the values for each element in this set in insertion order.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "sharedarraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>SharedArrayBuffer</code></strong> object is used to represent a generic raw binary data buffer, similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object, but in a way that they can be used to create views on shared memory. A <code>SharedArrayBuffer</code> is not a <a href=\"$MDN_URL$/Web/API/Web_Workers_API/Transferable_objects\">Transferable Object</a>, unlike an <code>ArrayBuffer</code> which is transferable."
    },
    "sharedarraybuffer.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/bytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>byteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances returns the length (in bytes) of this <code>SharedArrayBuffer</code>."
    },
    "sharedarraybuffer.grow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/grow",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Firefox": "128",
        "FirefoxAndroid": "128",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-07-09"
      },
      "doc": "The <strong><code>grow()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances grows the <code>SharedArrayBuffer</code> to the specified size, in bytes.",
      "parameters": {
        "newLength": "The new length, in bytes, to resize the <code>SharedArrayBuffer</code> to."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).",
      "throws": {
        "TypeError": "Thrown if the <code>SharedArrayBuffer</code> is not growable.",
        "RangeError": "Thrown if <code>newLength</code> is larger than the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> of the <code>SharedArrayBuffer</code> or smaller than the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength\"><code>byteLength</code></a>."
      }
    },
    "sharedarraybuffer.growable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/growable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Firefox": "128",
        "FirefoxAndroid": "128",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-07-09"
      },
      "doc": "The <strong><code>growable</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances returns whether this <code>SharedArrayBuffer</code> can be grow or not."
    },
    "sharedarraybuffer.maxbytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/maxbytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Firefox": "128",
        "FirefoxAndroid": "128",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.33"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2024-07-09"
      },
      "doc": "The <strong><code>maxByteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances returns the maximum length (in bytes) that this <code>SharedArrayBuffer</code> can be grown to."
    },
    "sharedarraybuffer.sharedarraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/sharedarraybuffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThe <code>SharedArrayBuffer</code> constructor may not always be globally available unless certain <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements\">security requirements</a> are met.\n</div>\n<p>The <strong><code>SharedArrayBuffer()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> objects.",
      "parameters": {
        "length": "The size, in bytes, of the array buffer to create.",
        "options": "An object, which can contain the following properties:\n<dl>\n<dt id=\"maxbytelength\"><a href=\"#maxbytelength\"><code>maxByteLength</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>The maximum size, in bytes, that the shared array buffer can be resized to.\n</dd>\n</dl>"
      },
      "returns": "A new <code>SharedArrayBuffer</code> object of the specified size, with its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> property set to the specified <code>maxByteLength</code> if one was specified. Its contents are\ninitialized to 0."
    },
    "sharedarraybuffer.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>slice()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances returns a new <code>SharedArrayBuffer</code> whose contents are a copy of this <code>SharedArrayBuffer</code>'s bytes from <code>start</code>, inclusive, up to <code>end</code>, exclusive. If either <code>start</code> or <code>end</code> is negative, it refers to an index from the end of the array, as opposed to from the beginning.",
      "parameters": {
        "start": "Zero-based index at which to start extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.\n<ul>\n<li>Negative index counts back from the end of the buffer — if <code>-buffer.length &lt;= start &lt; 0</code>, <code>start + buffer.length</code> is used.</li>\n<li>If <code>start &lt; -buffer.length</code> or <code>start</code> is omitted, <code>0</code> is used.</li>\n<li>If <code>start &gt;= buffer.length</code>, an empty buffer is returned.</li>\n</ul>",
        "end": "Zero-based index at which to end extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>slice()</code> extracts up to but not including <code>end</code>.\n<ul>\n<li>Negative index counts back from the end of the buffer — if <code>-buffer.length &lt;= end &lt; 0</code>, <code>end + buffer.length</code> is used.</li>\n<li>If <code>end &lt; -buffer.length</code>, <code>0</code> is used.</li>\n<li>If <code>end &gt;= buffer.length</code> or <code>end</code> is omitted or <code>undefined</code>, <code>buffer.length</code> is used, causing all elements until the end to be extracted.</li>\n<li>If <code>end</code> implies a position before or at the position that <code>start</code> implies, an empty buffer is returned.</li>\n</ul>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> containing the extracted elements."
    },
    "sharedarraybuffer.symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/symbol.species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-12-13",
        "highDate": "2024-06-13"
      },
      "doc": "The <strong><code>SharedArrayBuffer[Symbol.species]</code></strong> static accessor property returns the constructor used to construct return values from <code>SharedArrayBuffer</code> methods.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nThe existence of <code>[Symbol.species]</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get [Symbol.species]</code> was called. The return value is used to construct return values from array buffer methods that create new array buffer."
    },
    "string": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>String</code></strong> object is used to represent and manipulate a\nsequence of characters."
    },
    "string.anchor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/anchor",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>anchor()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in an <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/a\"><code>&lt;a&gt;</code></a> element with a name (<code>&lt;a name=\"...\"&gt;str&lt;/a&gt;</code>).\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n<p>The HTML specification no longer allows the <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/a\"><code>&lt;a&gt;</code></a> element to have a <code>name</code> attribute, so this method doesn't even create valid markup.\n</div>",
      "parameters": {
        "name": "A string representing a <code>name</code> value to put into the generated <code>&lt;a name=\"...\"&gt;</code> start tag."
      },
      "returns": "A string beginning with an <code>&lt;a name=\"name\"&gt;</code> start tag (double quotes in <code>name</code> are replaced with <code>&amp;quot;</code>), then the text <code>str</code>, and then an <code>&lt;/a&gt;</code> end tag."
    },
    "string.at": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/at",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "92",
        "ChromeAndroid": "92",
        "Edge": "92",
        "Firefox": "90",
        "FirefoxAndroid": "90",
        "Opera": "78",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "16.6.0",
        "Deno": "1.12"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2022-03-14",
        "highDate": "2024-09-14"
      },
      "doc": "The <strong><code>at()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values takes an integer value and returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> consisting of the single UTF-16 code unit located at the specified offset. This method allows for positive and negative integers. Negative integers count back from the last string character.",
      "parameters": {
        "index": "The index (position) of the string character to be returned. Supports relative indexing from the end of the string when passed a negative index; i.e., if a negative number is used, the character returned will be found by counting back from the end of the string."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> consisting of the single UTF-16 code unit located at the specified position. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the given index can not be found."
    },
    "string.big": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/big",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>big()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/big\"><code>&lt;big&gt;</code></a> element (<code>&lt;big&gt;str&lt;/big&gt;</code>), which causes this string to be displayed in a big font.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>big()</code>, the <code>&lt;big&gt;</code> element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;big&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/big&gt;</code> end tag."
    },
    "string.blink": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/blink",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>blink()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <code>&lt;blink&gt;</code> element (<code>&lt;blink&gt;str&lt;/blink&gt;</code>), which used to cause a string to blink in old browsers.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>blink()</code>, the <code>&lt;blink&gt;</code> element itself is removed from modern browsers, and blinking text is frowned upon by several accessibility standards. Avoid using the element in any way.\n</div>",
      "returns": "A string beginning with a <code>&lt;blink&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/blink&gt;</code> end tag."
    },
    "string.bold": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/bold",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>bold()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/b\"><code>&lt;b&gt;</code></a> element (<code>&lt;b&gt;str&lt;/b&gt;</code>), which causes this string to be displayed as bold.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;b&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/b&gt;</code> end tag."
    },
    "string.charat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/charat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>charAt()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a new string consisting of the single UTF-16 code unit at the given index.\n<p><code>charAt()</code> always indexes the string as a sequence of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">UTF-16 code units</a>, so it may return lone surrogates. To get the full Unicode code point at the given index, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>String.prototype.codePointAt()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\"><code>String.fromCodePoint()</code></a>.",
      "parameters": {
        "index": "Zero-based index of the character to be returned. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">Converted to an integer</a> — <code>undefined</code> is converted to 0."
      },
      "returns": "A string representing the character (exactly one UTF-16 code unit) at the specified <code>index</code>. If <code>index</code> is out of the range of <code>0</code> – <code>str.length - 1</code>, <code>charAt()</code> returns an empty string."
    },
    "string.charcodeat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/charcodeat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>charCodeAt()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns an integer between <code>0</code> and <code>65535</code> representing the UTF-16 code unit at the given index.\n<p><code>charCodeAt()</code> always indexes the string as a sequence of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">UTF-16 code units</a>, so it may return lone surrogates. To get the full Unicode code point at the given index, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>String.prototype.codePointAt()</code></a>.",
      "parameters": {
        "index": "Zero-based index of the character to be returned. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">Converted to an integer</a> — <code>undefined</code> is converted to 0."
      },
      "returns": "An integer between <code>0</code> and <code>65535</code> representing the UTF-16 code unit value of the character at the specified <code>index</code>. If <code>index</code> is out of range of <code>0</code> – <code>str.length - 1</code>, <code>charCodeAt()</code> returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "string.codepointat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/codepointat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "41",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>codePointAt()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a non-negative integer that is the Unicode code point value of the character starting at the given index. Note that the index is still based on UTF-16 code units, not Unicode code points.",
      "parameters": {
        "index": "Zero-based index of the character to be returned. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">Converted to an integer</a> — <code>undefined</code> is converted to 0."
      },
      "returns": "A non-negative integer representing the code point value of the character at the given <code>index</code>.\n<ul>\n<li>If <code>index</code> is out of the range of <code>0</code> – <code>str.length - 1</code>, <code>codePointAt()</code> returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</li>\n<li>If the element at <code>index</code> is a UTF-16 leading surrogate, returns the code point of the surrogate <em>pair</em>.</li>\n<li>If the element at <code>index</code> is a UTF-16 trailing surrogate, returns <em>only</em> the trailing surrogate code unit.</li>\n</ul>"
    },
    "string.concat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/concat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>concat()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values concatenates\nthe string arguments to this string and returns a new string.",
      "parameters": {
        "str1, …, strN": "One or more strings to concatenate to <code>str</code>. Though technically permitted, calling <code>String.prototype.concat()</code> with no arguments is a useless operation, because it does not result in observable copying (like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a>), since strings are immutable. It should only happen if you are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spreading</a> an array of strings as arguments, and that array happens to be empty."
      },
      "returns": "A new string containing the combined text of the strings provided."
    },
    "string.endswith": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/endswith",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "17",
        "FirefoxAndroid": "17",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>endsWith()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values determines whether a string ends with the characters of this string, returning <code>true</code> or <code>false</code> as appropriate.",
      "parameters": {
        "searchString": "The characters to be searched for at the end of <code>str</code>. Cannot <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">be a regex</a>. All values that are not regexes are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>endsWith()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "endPosition": "The end position at which <code>searchString</code> is expected to be found (the index of <code>searchString</code>'s last character plus 1). Defaults to <code>str.length</code>."
      },
      "returns": "<strong><code>true</code></strong> if the given characters are found at the end of the string, including when <code>searchString</code> is an empty string; otherwise, <strong><code>false</code></strong>.",
      "throws": {
        "TypeError": "Thrown if <code>searchString</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>."
      }
    },
    "string.fixed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fixed",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>fixed()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/tt\"><code>&lt;tt&gt;</code></a> element (<code>&lt;tt&gt;str&lt;/tt&gt;</code>), which causes this string to be displayed in a fixed-width font.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>fixed()</code>, the <code>&lt;tt&gt;</code> element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;tt&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/tt&gt;</code> end tag."
    },
    "string.fontcolor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fontcolor",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>fontcolor()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/font\"><code>&lt;font&gt;</code></a> element (<code>&lt;font color=\"...\"&gt;str&lt;/font&gt;</code>), which causes this string to be displayed in the specified font color.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>fontcolor()</code>, the <code>&lt;font&gt;</code> element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties instead.\n</div>",
      "parameters": {
        "color": "A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the <a href=\"$MDN_URL$/Web/CSS/color_value\">CSS color reference</a>."
      },
      "returns": "A string beginning with a <code>&lt;font color=\"color\"&gt;</code> start tag (double quotes in <code>color</code> are replaced with <code>&amp;quot;</code>), then the text <code>str</code>, and then a <code>&lt;/font&gt;</code> end tag."
    },
    "string.fontsize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fontsize",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>fontsize()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/font\"><code>&lt;font&gt;</code></a> element (<code>&lt;font size=\"...\"&gt;str&lt;/font&gt;</code>), which causes this string to be displayed in the specified font size.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>fontsize()</code>, the <code>&lt;font&gt;</code> element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties instead.\n</div>",
      "parameters": {
        "size": "An integer between 1 and 7, or a string representing a signed integer between 1 and 7."
      },
      "returns": "A string beginning with a <code>&lt;font size=\"size\"&gt;</code> start tag (double quotes in <code>size</code> are replaced with <code>&amp;quot;</code>), then the text <code>str</code>, and then a <code>&lt;/font&gt;</code> end tag."
    },
    "string.fromcharcode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fromcharcode",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>String.fromCharCode()</code></strong> static method returns a string created from the specified sequence of UTF-16 code units.",
      "parameters": {
        "num1, …, numN": "A number between <code>0</code> and <code>65535</code> (<code>0xFFFF</code>) representing a UTF-16 code unit. Numbers greater than <code>0xFFFF</code> are truncated to the last 16 bits. No validity checks are performed."
      },
      "returns": "A string of length <code>N</code> consisting of the <code>N</code> specified UTF-16 code units."
    },
    "string.fromcodepoint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fromcodepoint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "41",
        "Edge": "12",
        "Firefox": "29",
        "FirefoxAndroid": "29",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>String.fromCodePoint()</code></strong> static method returns a string created from the specified sequence of code points.",
      "parameters": {
        "num1, …, numN": "An integer between <code>0</code> and <code>0x10FFFF</code> (inclusive) representing a Unicode code point."
      },
      "returns": "A string created by using the specified sequence of code points.",
      "throws": {
        "RangeError": "Thrown if <code>numN</code> is not an integer, is less than <code>0</code>, or is greater than <code>0x10FFFF</code> after being converted to a number."
      }
    },
    "string.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/includes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "41",
        "Edge": "12",
        "Firefox": "40",
        "FirefoxAndroid": "40",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>includes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values performs a case-sensitive search to determine whether a given string may be found within this string, returning <code>true</code> or <code>false</code> as appropriate.",
      "parameters": {
        "searchString": "A string to be searched for within <code>str</code>. Cannot <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">be a regex</a>. All values that are not regexes are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>includes()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "position": "The position within the string at which to begin searching for <code>searchString</code>. (Defaults to <code>0</code>.)"
      },
      "returns": "<strong><code>true</code></strong> if the search string is found anywhere within the given string, including when <code>searchString</code> is an empty string; otherwise, <strong><code>false</code></strong>.",
      "throws": {
        "TypeError": "Thrown if <code>searchString</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>."
      }
    },
    "string.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/indexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>indexOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values searches this string and returns the index of the first occurrence of the specified substring. It takes an optional starting position and returns the first occurrence of the specified substring at an index greater than or equal to the specified number.",
      "parameters": {
        "searchString": "Substring to search for. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>indexOf()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "position": "The method returns the index of the first occurrence of the specified substring at a position greater than or equal to <code>position</code>, which defaults to <code>0</code>. If <code>position</code> is greater than the length of the calling string, the method doesn't search the calling string at all. If <code>position</code> is less than zero, the method behaves as it would if <code>position</code> were <code>0</code>.\n<ul>\n<li>\n<p><code>'hello world hello'.indexOf('o', -5)</code> returns <code>4</code> — because it causes the method to behave as if the second argument were <code>0</code>, and the first occurrence of <code>o</code> at a position greater or equal to <code>0</code> is at position <code>4</code>.\n</li>\n<li>\n<p><code>'hello world hello'.indexOf('world', 12)</code> returns <code>-1</code> — because, while it's true the substring <code>world</code> occurs at index <code>6</code>, that position is not greater than or equal to <code>12</code>.\n</li>\n<li>\n<p><code>'hello world hello'.indexOf('o', 99)</code> returns <code>-1</code> — because <code>99</code> is greater than the length of <code>hello world hello</code>, which causes the method to not search the string at all.\n</li>\n</ul>"
      },
      "returns": "The index of the first occurrence of <code>searchString</code> found, or <code>-1</code> if not found.\n<h4 id=\"return_value_when_using_an_empty_search_string\">Return value when using an empty search string</h4>\n<p>Searching for an empty search string produces strange results. With no second argument, or with a second argument whose value is less than the calling string's length, the return value is the same as the value of the second argument:\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>\"hello world\".indexOf(\"\"); // returns 0\n\"hello world\".indexOf(\"\", 0); // returns 0\n\"hello world\".indexOf(\"\", 3); // returns 3\n\"hello world\".indexOf(\"\", 8); // returns 8\n</code></pre></div>\n<p>However, with a second argument whose value is greater than or equal to the string's length, the return value is the string's length:\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>\"hello world\".indexOf(\"\", 11); // returns 11\n\"hello world\".indexOf(\"\", 13); // returns 11\n\"hello world\".indexOf(\"\", 22); // returns 11\n</code></pre></div>\n<p>In the former instance, the method behaves as if it found an empty string just after the position specified in the second argument. In the latter instance, the method behaves as if it found an empty string at the end of the calling string."
    },
    "string.iswellformed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/iswellformed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Firefox": "119",
        "FirefoxAndroid": "119",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.32"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-10-24"
      },
      "doc": "The <strong><code>isWellFormed()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a boolean indicating whether this string contains any <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogates</a>.",
      "returns": "Returns <code>true</code> if this string does not contain any lone surrogates, <code>false</code> otherwise."
    },
    "string.italics": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/italics",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>italics()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in an <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/i\"><code>&lt;i&gt;</code></a> element (<code>&lt;i&gt;str&lt;/i&gt;</code>), which causes this string to be displayed as italic.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with an <code>&lt;i&gt;</code> start tag, then the text <code>str</code>, and then an <code>&lt;/i&gt;</code> end tag."
    },
    "string.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>lastIndexOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values searches this string and returns the index of the last occurrence of the specified substring. It takes an optional starting position and returns the last occurrence of the specified substring at an index less than or equal to the specified number.",
      "parameters": {
        "searchString": "Substring to search for. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>lastIndexOf()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "position": "The method returns the index of the last occurrence of the specified substring at a position less than or equal to <code>position</code>, which defaults to <code>+Infinity</code>. If <code>position</code> is greater than the length of the calling string, the method searches the entire string. If <code>position</code> is less than <code>0</code>, the behavior is the same as for <code>0</code> — that is, the method looks for the specified substring only at index <code>0</code>.\n<ul>\n<li>\n<p><code>'hello world hello'.lastIndexOf('world', 4)</code> returns <code>-1</code> — because, while the substring <code>world</code> does occurs at index <code>6</code>, that position is not less than or equal to <code>4</code>.\n</li>\n<li>\n<p><code>'hello world hello'.lastIndexOf('hello', 99)</code> returns <code>12</code> — because the last occurrence of <code>hello</code> at a position less than or equal to <code>99</code> is at position <code>12</code>.\n</li>\n<li>\n<p><code>'hello world hello'.lastIndexOf('hello', 0)</code> and <code>'hello world hello'.lastIndexOf('hello', -5)</code> both return <code>0</code> — because both cause the method to only look for <code>hello</code> at index <code>0</code>.\n</li>\n</ul>"
      },
      "returns": "The index of the last occurrence of <code>searchString</code> found, or <code>-1</code> if not found."
    },
    "string.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/length",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>length</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> value contains the length of the string in UTF-16 code units."
    },
    "string.link": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/link",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>link()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in an <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/a\"><code>&lt;a&gt;</code></a> element (<code>&lt;a href=\"...\"&gt;str&lt;/a&gt;</code>), to be used as a hypertext link to another URL.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "parameters": {
        "url": "Any string that specifies the <code>href</code> attribute of the <code>&lt;a&gt;</code> element; it should be a valid URL (relative or absolute), with any <code>&amp;</code> characters escaped as <code>&amp;amp;</code>."
      },
      "returns": "A string beginning with an <code>&lt;a href=\"url\"&gt;</code> start tag (double quotes in <code>url</code> are replaced with <code>&amp;quot;</code>), then the text <code>str</code>, and then an <code>&lt;/a&gt;</code> end tag."
    },
    "string.localecompare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/localecompare",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "7",
        "Safari": "3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>localeCompare()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a number indicating whether this string comes before, or after, or is the same as the given string in sort order. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code> API</a> support, this method delegates to <code>Intl.Collator</code>.\n<p>When comparing large numbers of strings, such as in sorting large arrays, it is better to create an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> object and use the function provided by its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare\"><code>compare()</code></a> method.",
      "parameters": {
        "compareString": "The string against which the <code>referenceStr</code> is compared. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>localeCompare()</code> to compare against the string <code>\"undefined\"</code>, which is rarely what you want.",
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#locales\"><code>locales</code></a> parameter of the <code>Intl.Collator()</code> constructor.\n<p>In implementations without <code>Intl.Collator</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#options\"><code>options</code></a> parameter of the <code>Intl.Collator()</code> constructor.\n<p>In implementations without <code>Intl.Collator</code> support, this parameter is ignored."
      },
      "returns": "A <strong>negative</strong> number if <code>referenceStr</code> occurs before <code>compareString</code>; <strong>positive</strong> if the <code>referenceStr</code> occurs after <code>compareString</code>; <code>0</code> if they are equivalent.\n<p>In implementations with <code>Intl.Collator</code>, this is equivalent to <code>new Intl.Collator(locales, options).compare(referenceStr, compareString)</code>."
    },
    "string.match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/match",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>match()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values retrieves the result of matching this string against a <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions\">regular expression</a>.",
      "parameters": {
        "regexp": "A regular expression object, or any object that has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/match\"><code>Symbol.match</code></a> method.\n<p>If <code>regexp</code> is not a <code>RegExp</code> object and does not have a <code>Symbol.match</code> method, it is implicitly converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> by using <code>new RegExp(regexp)</code>.\n<p>If you don't give any parameter and use the <code>match()</code> method directly, you will get an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> with an empty string: <code>[\"\"]</code>, because this is equivalent to <code>match(/(?:)/)</code>."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> whose contents depend on the presence or absence of the global (<code>g</code>) flag, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> if no matches are found.\n<ul>\n<li>If the <code>g</code> flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included.</li>\n<li>If the <code>g</code> flag is not used, only the first complete match and its related capturing groups are returned. In this case, <code>match()</code> will return the same result as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a> (an array with some extra properties).</li>\n</ul>"
    },
    "string.matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/matchall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "73",
        "ChromeAndroid": "73",
        "Edge": "79",
        "Firefox": "67",
        "FirefoxAndroid": "67",
        "Opera": "60",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>matchAll()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns an iterator of all results matching this string against a <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions\">regular expression</a>, including <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\">capturing groups</a>.",
      "parameters": {
        "regexp": "A regular expression object, or any object that has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll\"><code>Symbol.matchAll</code></a> method.\n<p>If <code>regexp</code> is not a <code>RegExp</code> object and does not have a <code>Symbol.matchAll</code> method, it is implicitly converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> by using <code>new RegExp(regexp, 'g')</code>.\n<p>If <code>regexp</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>, then it must have the global (<code>g</code>) flag set, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> is thrown."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> (which is not restartable) of matches or an empty iterator if no matches are found. Each value yielded by the iterator is an array with the same shape as the return value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a>.",
      "throws": {
        "TypeError": "Thrown if the <code>regexp</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a> that does not have the global (<code>g</code>) flag set (its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>flags</code></a> property does not contain <code>\"g\"</code>)."
      }
    },
    "string.normalize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/normalize",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "12",
        "Firefox": "31",
        "FirefoxAndroid": "31",
        "Opera": "21",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>normalize()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns the Unicode Normalization\nForm of this string.",
      "parameters": {
        "form": "One of <code>\"NFC\"</code>, <code>\"NFD\"</code>, <code>\"NFKC\"</code>, or\n<code>\"NFKD\"</code>, specifying the Unicode Normalization Form. If omitted or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, <code>\"NFC\"</code> is used.\n<p>These values have the following meanings:\n<dl>\n<dt id=\"nfc\"><a href=\"#nfc\"><code>\"NFC\"</code></a></dt>\n<dd>\n<p>Canonical Decomposition, followed by Canonical Composition.\n</dd>\n<dt id=\"nfd\"><a href=\"#nfd\"><code>\"NFD\"</code></a></dt>\n<dd>\n<p>Canonical Decomposition.\n</dd>\n<dt id=\"nfkc\"><a href=\"#nfkc\"><code>\"NFKC\"</code></a></dt>\n<dd>\n<p>Compatibility Decomposition, followed by Canonical Composition.\n</dd>\n<dt id=\"nfkd\"><a href=\"#nfkd\"><code>\"NFKD\"</code></a></dt>\n<dd>\n<p>Compatibility Decomposition.\n</dd>\n</dl>"
      },
      "returns": "A string containing the Unicode Normalization Form of the given string.",
      "throws": {
        "RangeError": "Thrown if <code>form</code> isn't one of the values\nspecified above."
      }
    },
    "string.padend": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/padend",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "15",
        "Firefox": "48",
        "FirefoxAndroid": "48",
        "Opera": "44",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "8.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>padEnd()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values pads this string with a given\nstring (repeated, if needed) so that the resulting string reaches a given length. The\npadding is applied from the end of this string.",
      "parameters": {
        "targetLength": "The length of the resulting string once the current <code>str</code> has\nbeen padded. If the value is less than or equal to <code>str.length</code>, the\ncurrent string will be returned as-is.",
        "padString": "The string to pad the current <code>str</code> with. If\n<code>padString</code> is too long to stay within\n<code>targetLength</code>, it will be truncated: for left-to-right\nlanguages the left-most part and for right-to-left languages the right-most will be\napplied. The default value for this parameter is \" \"\n(<code>U+0020</code>)."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> of the specified <code>targetLength</code> with the\n<code>padString</code> applied at the end of the current\n<code>str</code>."
    },
    "string.padstart": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/padstart",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "15",
        "Firefox": "48",
        "FirefoxAndroid": "48",
        "Opera": "44",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "8.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>padStart()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values pads this string with another string (multiple times, if needed) until the resulting\nstring reaches the given length. The padding is applied from the start of this string.",
      "parameters": {
        "targetLength": "The length of the resulting string once the current <code>str</code> has\nbeen padded. If the value is less than or equal to <code>str.length</code>, then\n<code>str</code> is returned as-is.",
        "padString": "The string to pad the current <code>str</code> with. If\n<code>padString</code> is too long to stay within the\n<code>targetLength</code>, it will be truncated from the end.\nThe default value is the unicode \"space\" character (U+0020)."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> of the specified <code>targetLength</code> with\n<code>padString</code> applied from the start."
    },
    "string.raw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/raw",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "41",
        "Edge": "12",
        "Firefox": "34",
        "FirefoxAndroid": "34",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>String.raw()</code></strong> static method is a tag function of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Template_literals\">template literals</a>. This is similar to the <code>r</code> prefix in Python, or the <code>@</code> prefix in C# for string literals. It's used to get the raw string form of template literals — that is, substitutions (e.g., <code>${foo}</code>) are processed, but escape sequences (e.g., <code>\\n</code>) are not.",
      "parameters": {
        "strings": "Well-formed template literal array object, like <code>{ raw: ['foo', 'bar', 'baz'] }</code>. Should be an object with a <code>raw</code> property whose value is an array-like object of strings.",
        "sub1, …, subN": "Contains substitution values.",
        "templateString": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Template_literals\">template literal</a>, optionally with substitutions (<code>${...}</code>)."
      },
      "returns": "The raw string form of a given template literal.",
      "throws": {
        "TypeError": "Thrown if the first argument doesn't have a <code>raw</code> property, or the <code>raw</code> property is <code>undefined</code> or <code>null</code>."
      }
    },
    "string.repeat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/repeat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "24",
        "FirefoxAndroid": "24",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>repeat()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values constructs and returns a new string\nwhich contains the specified number of copies of this string, concatenated together.",
      "parameters": {
        "count": "An integer between <code>0</code> and\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\"><code>+Infinity</code></a>, indicating the\nnumber of times to repeat the string."
      },
      "returns": "A new string containing the specified number of copies of the given string.",
      "throws": {
        "RangeError": "Thrown if <code>count</code> is negative or if <code>count</code> overflows maximum string length."
      }
    },
    "string.replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/replace",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>replace()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a new string with one, some, or all matches of a <code>pattern</code> replaced by a <code>replacement</code>. The <code>pattern</code> can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, and the <code>replacement</code> can be a string or a function called for each match. If <code>pattern</code> is a string, only the first occurrence will be replaced. The original string is left unchanged.",
      "parameters": {
        "pattern": "Can be a string or an object with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>Symbol.replace</code></a> method — the typical example being a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a>. Any value that doesn't have the <code>Symbol.replace</code> method will be coerced to a string.",
        "replacement": "Can be a string or a function.\n<ul>\n<li>If it's a string, it will replace the substring matched by <code>pattern</code>. A number of special replacement patterns are supported; see the <a href=\"#specifying_a_string_as_the_replacement\">Specifying a string as the replacement</a> section below.</li>\n<li>If it's a function, it will be invoked for every match and its return value is used as the replacement text. The arguments supplied to this function are described in the <a href=\"#specifying_a_function_as_the_replacement\">Specifying a function as the replacement</a> section below.</li>\n</ul>"
      },
      "returns": "A new string, with one, some, or all matches of the pattern replaced by the specified replacement."
    },
    "string.replaceall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/replaceall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "77",
        "FirefoxAndroid": "79",
        "Opera": "71",
        "Safari": "13.1",
        "SafariIOS": "13.4",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-08-27",
        "highDate": "2023-02-27"
      },
      "doc": "The <strong><code>replaceAll()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a new string with all matches of a <code>pattern</code> replaced by a <code>replacement</code>. The <code>pattern</code> can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, and the <code>replacement</code> can be a string or a function to be called for each match. The original string is left unchanged.",
      "parameters": {
        "pattern": "Can be a string or an object with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>Symbol.replace</code></a> method — the typical example being a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a>. Any value that doesn't have the <code>Symbol.replace</code> method will be coerced to a string.\n<p>If <code>pattern</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>, then it must have the global (<code>g</code>) flag set, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> is thrown.",
        "replacement": "Can be a string or a function. The replacement has the same semantics as that of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a>."
      },
      "returns": "A new string, with all matches of a pattern replaced by a replacement.",
      "throws": {
        "TypeError": "Thrown if the <code>pattern</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a> that does not have the global (<code>g</code>) flag set (its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>flags</code></a> property does not contain <code>\"g\"</code>)."
      }
    },
    "string.search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/search",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>search()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values executes a search for a match between a regular expression and this string, returning the index of the first match in the string.",
      "parameters": {
        "regexp": "A regular expression object, or any object that has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/search\"><code>Symbol.search</code></a> method.\n<p>If <code>regexp</code> is not a <code>RegExp</code> object and does not have a <code>Symbol.search</code> method, it is implicitly converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> by using <code>new RegExp(regexp)</code>."
      },
      "returns": "The index of the first match between the regular expression and the given string, or <code>-1</code> if no match was found."
    },
    "string.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>slice()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values extracts a section of this string and\nreturns it as a new string, without modifying the original string.",
      "parameters": {
        "indexStart": "The index of the first character to include in the returned substring.",
        "indexEnd": "The index of the first character to exclude from the returned substring."
      },
      "returns": "A new string containing the extracted section of the string."
    },
    "string.small": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/small",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>small()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/small\"><code>&lt;small&gt;</code></a> element (<code>&lt;small&gt;str&lt;/small&gt;</code>), which causes this string to be displayed in a small font.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;small&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/small&gt;</code> end tag."
    },
    "string.split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/split",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>split()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values takes a pattern and divides this string into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.",
      "parameters": {
        "separator": "The pattern describing where each split should occur. Can be <code>undefined</code>, a string, or an object with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/split\"><code>Symbol.split</code></a> method — the typical example being a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a>. Omitting <code>separator</code> or passing <code>undefined</code> causes <code>split()</code> to return an array with the calling string as a single element. All values that are not <code>undefined</code> or objects with a <code>[Symbol.split]()</code> method are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>.",
        "limit": "A non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified <code>separator</code>, but stops when <code>limit</code> entries have been placed in the array. Any leftover text is not included in the array at all.\n<ul>\n<li>The array may contain fewer entries than <code>limit</code> if the end of the string is reached before the limit is reached.</li>\n<li>If <code>limit</code> is <code>0</code>, <code>[]</code> is returned.</li>\n</ul>"
      },
      "returns": "If <code>separator</code> is a string, an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of strings is returned, split at each point where the <code>separator</code> occurs in the given string.\n<p>If <code>separator</code> is a regex, the returned <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> also contains the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Regular_expressions/Capturing_group\">captured groups</a> for each separator match; see below for details. The capturing groups may be unmatched, in which case they are <code>undefined</code> in the array.\n<p>If <code>separator</code> has a custom <code>[Symbol.split]()</code> method, its return value is directly returned."
    },
    "string.startswith": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/startswith",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "17",
        "FirefoxAndroid": "17",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>startsWith()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values determines whether this string begins with the characters of a specified string, returning <code>true</code> or <code>false</code> as appropriate.",
      "parameters": {
        "searchString": "The characters to be searched for at the start of this string. Cannot <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">be a regex</a>. All values that are not regexes are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>startsWith()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "position": "The start position at which <code>searchString</code> is expected to be found (the index of <code>searchString</code>'s first character). Defaults to <code>0</code>."
      },
      "returns": "<strong><code>true</code></strong> if the given characters are found at the beginning of the string, including when <code>searchString</code> is an empty string; otherwise, <strong><code>false</code></strong>.",
      "throws": {
        "TypeError": "Thrown if <code>searchString</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>."
      }
    },
    "string.strike": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/strike",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>strike()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/strike\"><code>&lt;strike&gt;</code></a> element (<code>&lt;strike&gt;str&lt;/strike&gt;</code>), which causes this string to be displayed as struck-out text.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>strike()</code>, the <code>&lt;strike&gt;</code> element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use the <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/del\"><code>&lt;del&gt;</code></a> for deleted content or the <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/s\"><code>&lt;s&gt;</code></a> for content that is no longer accurate or no longer relevant instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;strike&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/strike&gt;</code> end tag."
    },
    "string.string": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/string",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>String()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> objects. When called as a function, it returns primitive values of type String.",
      "parameters": {
        "thing": "Anything to be converted to a string."
      },
      "returns": "When <code>String()</code> is called as a function (without <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>), it returns <code>value</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to a string primitive</a>. Specially, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> values are converted to <code>\"Symbol(description)\"</code>, where <code>description</code> is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/description\">description</a> of the Symbol, instead of throwing.\n<p>When <code>String()</code> is called as a constructor (with <code>new</code>), it coerces <code>value</code> to a string primitive (without special symbol handling) and returns a wrapping <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object, which is <strong>not</strong> a primitive.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nYou should rarely find yourself using <code>String</code> as a constructor.\n</div>"
    },
    "string.sub": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/sub",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>sub()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/sub\"><code>&lt;sub&gt;</code></a> element (<code>&lt;sub&gt;str&lt;/sub&gt;</code>), which causes this string to be displayed as subscript.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;sub&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/sub&gt;</code> end tag."
    },
    "string.substr": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/substr",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>substr()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a portion of this string, starting at the specified index and extending for a given number of characters afterwards.\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>substr()</code> is not part of the main ECMAScript specification — it's defined in <a href=\"https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html\" class=\"external\" target=\"_blank\">Annex B: Additional ECMAScript Features for Web Browsers</a>, which is normative optional for non-browser runtimes. Therefore, people are advised to use the standard <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>String.prototype.substring()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/slice\"><code>String.prototype.slice()</code></a> methods instead to make their code maximally cross-platform friendly. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/substring#the_difference_between_substring_and_substr\"><code>String.prototype.substring()</code> page</a> has some comparisons between the three methods.\n</div>",
      "parameters": {
        "start": "The index of the first character to include in the returned substring.",
        "length": "The number of characters to extract."
      },
      "returns": "A new string containing the specified part of the given string."
    },
    "string.substring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/substring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>substring()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns the part of this string from the start index up to and excluding the end index, or to the end of the string if no end index is supplied.",
      "parameters": {
        "indexStart": "The index of the first character to include in the returned substring.",
        "indexEnd": "The index of the first character to exclude from the returned substring."
      },
      "returns": "A new string containing the specified part of the given string."
    },
    "string.sup": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/sup",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>sup()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values creates a string that embeds this string in a <a href=\"$MDN_URL$/Web/HTML/Reference/Elements/sup\"><code>&lt;sup&gt;</code></a> element (<code>&lt;sup&gt;str&lt;/sup&gt;</code>), which causes this string to be displayed as superscript.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nAll <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;sup&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/sup&gt;</code> end tag."
    },
    "string.symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/symbol.iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>[Symbol.iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows strings to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">string iterator object</a> that yields the Unicode code points of the string value as individual strings.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the Unicode code points of the string value as individual strings."
    },
    "string.tolocalelowercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolocalelowercase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1.3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toLocaleLowerCase()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns this string converted to lower case, according to any locale-specific case mappings.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to lower case according to any locale-specific case mappings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.\n<p>Unlike other methods that use the <code>locales</code> argument, <code>toLocaleLowerCase()</code> does not allow locale matching. Therefore, after checking the validity of the <code>locales</code> argument, <code>toLocaleLowerCase()</code> always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation."
      },
      "returns": "A new string representing the calling string converted to lower case, according to any\nlocale-specific case mappings."
    },
    "string.tolocaleuppercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolocaleuppercase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "4",
        "Safari": "1.3",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toLocaleUpperCase()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns this string converted to upper case, according to any locale-specific case mappings.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to upper case according to any locale-specific case mappings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.\n<p>Unlike other methods that use the <code>locales</code> argument, <code>toLocaleUpperCase()</code> does not allow locale matching. Therefore, after checking the validity of the <code>locales</code> argument, <code>toLocaleUpperCase()</code> always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation."
      },
      "returns": "A new string representing the calling string converted to upper case, according to any\nlocale-specific case mappings."
    },
    "string.tolowercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolowercase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toLowerCase()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns this string converted to lower case.",
      "returns": "A new string representing the calling string converted to lower case."
    },
    "string.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns this string value.",
      "returns": "A string representing the specified string value."
    },
    "string.touppercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/touppercase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>toUpperCase()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns this string converted to uppercase.",
      "returns": "A new string representing the calling string converted to upper case."
    },
    "string.towellformed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/towellformed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Firefox": "119",
        "FirefoxAndroid": "119",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.32"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-10-24"
      },
      "doc": "The <strong><code>toWellFormed()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a string where all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogates</a> of this string are replaced with the Unicode replacement character U+FFFD.",
      "returns": "A new string that is a copy of this string, with all lone surrogates replaced with the Unicode replacement character U+FFFD. If <code>str</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/isWellFormed\">is well formed</a>, a new string is still returned (essentially a copy of <code>str</code>)."
    },
    "string.trim": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trim",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "3.5",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>trim()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values removes whitespace from both ends of this string and returns a new string, without modifying the original string.\n<p>To return a new string with whitespace trimmed from just one end, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/trimStart\"><code>trimStart()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/trimEnd\"><code>trimEnd()</code></a>.",
      "returns": "A new string representing <code>str</code> stripped of whitespace from both its beginning and end. Whitespace is defined as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#white_space\">white space</a> characters plus <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#line_terminators\">line terminators</a>.\n<p>If neither the beginning or end of <code>str</code> has any whitespace, a new string is still returned (essentially a copy of <code>str</code>)."
    },
    "string.trimend": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trimend",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "66",
        "ChromeAndroid": "66",
        "Edge": "79",
        "Firefox": "61",
        "FirefoxAndroid": "61",
        "Opera": "53",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>trimEnd()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values removes whitespace from the end of this string and returns a new string, without modifying the original string. <code>trimRight()</code> is an alias of this method.",
      "returns": "A new string representing <code>str</code> stripped of whitespace from its end (right side). Whitespace is defined as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#white_space\">white space</a> characters plus <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#line_terminators\">line terminators</a>.\n<p>If the end of <code>str</code> has no whitespace, a new string is still returned (essentially a copy of <code>str</code>)."
    },
    "string.trimstart": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trimstart",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "66",
        "ChromeAndroid": "66",
        "Edge": "79",
        "Firefox": "61",
        "FirefoxAndroid": "61",
        "Opera": "53",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>trimStart()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values removes whitespace from the beginning of this string and returns a new string, without modifying the original string. <code>trimLeft()</code> is an alias of this method.",
      "returns": "A new string representing <code>str</code> stripped of whitespace from its beginning (left side). Whitespace is defined as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#white_space\">white space</a> characters plus <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#line_terminators\">line terminators</a>.\n<p>If the beginning of <code>str</code> has no whitespace, a new string is still returned (essentially a copy of <code>str</code>)."
    },
    "string.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns this string value.",
      "returns": "A string representing the primitive value of a given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object."
    },
    "symbol": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "<strong><code>Symbol</code></strong> is a built-in object whose constructor returns a <code>symbol</code> <a href=\"$MDN_URL$/Glossary/Primitive\">primitive</a> — also called a <strong>Symbol value</strong> or just a <strong>Symbol</strong> — that's guaranteed to be unique. Symbols are often used to add unique property keys to an object that won't collide with keys any other code might add to the object, and which are hidden from any mechanisms other code will typically use to access the object. That enables a form of weak <a href=\"$MDN_URL$/Glossary/Encapsulation\">encapsulation</a>, or a weak form of <a href=\"https://en.wikipedia.org/wiki/Information_hiding\" class=\"external\" target=\"_blank\">information hiding</a>.\n<p>Every <code>Symbol()</code> call is guaranteed to return a unique Symbol. Every <code>Symbol.for(\"key\")</code> call will always return the same Symbol for a given value of <code>\"key\"</code>. When <code>Symbol.for(\"key\")</code> is called, if a Symbol with the given key can be found in the global Symbol registry, that Symbol is returned. Otherwise, a new Symbol is created, added to the global Symbol registry under the given key, and returned."
    },
    "symbol.asynciterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/asynciterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "57",
        "FirefoxAndroid": "57",
        "Opera": "50",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>Symbol.asyncIterator</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.asyncIterator</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable protocol</a> looks up this symbol for the method that returns the async iterator for an object. In order for an object to be async iterable, it must have an <code>[Symbol.asyncIterator]</code> key."
    },
    "symbol.description": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/description",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "70",
        "ChromeAndroid": "70",
        "Edge": "79",
        "Firefox": "63",
        "FirefoxAndroid": "63",
        "Opera": "57",
        "Safari": "12.1",
        "SafariIOS": "12.2",
        "Nodejs": "11.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>description</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> values returns a string containing the description of this symbol, or <code>undefined</code> if the symbol has no description."
    },
    "symbol.for": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/for",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "40",
        "ChromeAndroid": "40",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "27",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Symbol.for()</code></strong> static method searches for existing symbols\nin a runtime-wide symbol registry with the given key and returns it if found. Otherwise\na new symbol gets created in the global symbol registry with this key.",
      "parameters": {
        "key": "String, required. The key for the symbol (and also used for the description of the\nsymbol)."
      },
      "returns": "An existing symbol with the given key if found; otherwise, a new symbol is created and\nreturned."
    },
    "symbol.hasinstance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/hasinstance",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "15",
        "Firefox": "50",
        "FirefoxAndroid": "50",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>Symbol.hasInstance</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.hasInstance</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator looks up this symbol on its right-hand operand for the method used to determine if the constructor object recognizes an object as its instance."
    },
    "symbol.isconcatspreadable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/isconcatspreadable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "48",
        "ChromeAndroid": "48",
        "Edge": "15",
        "Firefox": "48",
        "FirefoxAndroid": "48",
        "Opera": "35",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>Symbol.isConcatSpreadable</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.isConcatSpreadable</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a> method looks up this symbol on each object being concatenated to determine if it should be treated as an array-like object and flattened to its array elements."
    },
    "symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "43",
        "ChromeAndroid": "43",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "30",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Symbol.iterator</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.iterator</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable protocol</a> looks up this symbol for the method that returns the iterator for an object. In order for an object to be iterable, it must have an <code>[Symbol.iterator]</code> key."
    },
    "symbol.keyfor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/keyfor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "40",
        "ChromeAndroid": "40",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "27",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Symbol.keyFor()</code></strong> static method retrieves a shared symbol\nkey from the global symbol registry for the given symbol.",
      "parameters": {
        "sym": "Symbol, required. The symbol to find a key for."
      },
      "returns": "A string representing the key for the given symbol if one is found on the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">global registry</a>; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "symbol.match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/match",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "40",
        "FirefoxAndroid": "40",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>Symbol.match</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.match</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> method looks up this symbol on its first argument for the method used to match an input string against the current object. This symbol is also used to determine if an object should be <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">treated as a regex</a>.\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.match\"><code>RegExp.prototype[Symbol.match]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a>."
    },
    "symbol.matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/matchall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "73",
        "ChromeAndroid": "73",
        "Edge": "79",
        "Firefox": "67",
        "FirefoxAndroid": "67",
        "Opera": "60",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>Symbol.matchAll</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.matchAll</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a> method looks up this symbol on its first argument for the method that returns an iterator, that yields matches of the current object against a string.\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.matchAll\"><code>RegExp.prototype[Symbol.matchAll]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a>."
    },
    "symbol.replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/replace",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>Symbol.replace</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.replace</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll()</code></a> methods look up this symbol on their first argument for the method that replaces substrings matched by the current object.\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.replace\"><code>RegExp.prototype[Symbol.replace]()</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a>, and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll()</code></a>."
    },
    "symbol.search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/search",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>Symbol.search</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.search</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a> method looks up this symbol on its first argument for the method that returns the index within a string that matches the current object.\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.search\"><code>RegExp.prototype[Symbol.search]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a>."
    },
    "symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "41",
        "FirefoxAndroid": "41",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>Symbol.species</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.species</code>. Methods that create copies of an object may look up this symbol on the object for the constructor function to use when creating the copy.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nThe existence of <code>[Symbol.species]</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>"
    },
    "symbol.split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/split",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "FirefoxAndroid": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2020-01-15",
        "highDate": "2022-07-15"
      },
      "doc": "The <strong><code>Symbol.split</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.split</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a> method looks up this symbol on its first argument for the method that splits a string at the indices that match the current object.\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.split\"><code>RegExp.prototype[Symbol.split]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a>."
    },
    "symbol.symbol": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/symbol",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>Symbol()</code></strong> function returns primitive values of type Symbol.",
      "parameters": {
        "description": "A string. A description of the symbol which can be used for debugging but not to\naccess the symbol itself."
      }
    },
    "symbol.symbol.toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/symbol.toprimitive",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "15",
        "Firefox": "44",
        "FirefoxAndroid": "44",
        "Opera": "34",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>[Symbol.toPrimitive]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> values returns this symbol value.",
      "parameters": {
        "hint": "A string value indicating the primitive value to return. The value is ignored."
      },
      "returns": "The primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> object."
    },
    "symbol.toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/toprimitive",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "15",
        "Firefox": "44",
        "FirefoxAndroid": "44",
        "Opera": "34",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>Symbol.toPrimitive</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.toPrimitive</code>. All <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#type_coercion\">type coercion</a> algorithms look up this symbol on objects for the method that accepts a preferred type and returns a primitive representation of the object, before falling back to using the object's <code>valueOf()</code> and <code>toString()</code> methods."
    },
    "symbol.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> values returns a string representing this symbol value.",
      "returns": "A string representing the specified symbol value."
    },
    "symbol.tostringtag": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tostringtag",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "15",
        "Firefox": "51",
        "FirefoxAndroid": "51",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-04-05",
        "highDate": "2019-10-05"
      },
      "doc": "The <strong><code>Symbol.toStringTag</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.toStringTag</code>. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> looks up this symbol on the <code>this</code> value for the property containing a string that represents the type of the object."
    },
    "symbol.unscopables": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/unscopables",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "48",
        "FirefoxAndroid": "48",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.unscopables</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>Symbol.unscopables</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/with\"><code>with</code></a> statement looks up this symbol on the scope object for a property containing a collection of properties that should not become bindings within the <code>with</code> environment."
    },
    "symbol.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> values returns this symbol value.",
      "returns": "The primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> object."
    },
    "syntaxerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/syntaxerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>SyntaxError</code></strong> object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.\n<p><code>SyntaxError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/Window/structuredClone\" ><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>SyntaxError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "syntaxerror.syntaxerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/syntaxerror/syntaxerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>SyntaxError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error",
        "options": "An object that has the following properties:\n<dl>\n<dt id=\"cause\"><a href=\"#cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n</dd>\n</dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "temporal": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal</code></strong> object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object."
    },
    "temporal.duration": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Duration</code></strong> object represents a difference between two time points, which can be used in date/time arithmetic. It is fundamentally represented as a combination of years, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, and nanoseconds values."
    },
    "temporal.duration.abs": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/abs",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>abs()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a new <code>Temporal.Duration</code> object with the absolute value of this duration (all fields have the same magnitude, but sign becomes positive).",
      "returns": "A new <code>Temporal.Duration</code> object with the absolute value of this duration, which is either the same as this duration if it is already positive, or its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/negated\">negation</a> if it is negative."
    },
    "temporal.duration.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/add",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>add()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a new <code>Temporal.Duration</code> object with the sum of this duration and a given duration. The result is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to add to this duration. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>."
      },
      "returns": "A new <code>Temporal.Duration</code> object representing the sum of this duration and <code>other</code>.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>Either <code>this</code> or <code>other</code> is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar duration</a> (it has a non-zero <code>years</code>, <code>months</code>, or <code>weeks</code>), because calendar durations are ambiguous without a calendar and time reference.</li>\n<li>The sum of <code>this</code> and <code>other</code> overflows the maximum or underflows the minimum representable duration, which is ±2<sup>53</sup> seconds.</li>\n</ul>"
      }
    },
    "temporal.duration.blank": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/blank",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>blank</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a boolean that is <code>true</code> if this duration represents a zero duration, and <code>false</code> otherwise. It is equivalent to <code>duration.sign === 0</code>."
    },
    "temporal.duration.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/compare",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Duration.compare()</code></strong> static method returns a number (-1, 0, or 1) indicating whether the first duration is shorter, equal to, or longer than the second duration.",
      "parameters": {
        "duration1": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing the first duration to compare. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>.",
        "duration2": "The second duration to compare, converted to a <code>Temporal.Duration</code> object using the same algorithm as <code>duration1</code>.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"relativeto\"><a href=\"#relativeto\"><code>relativeTo</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A zoned or plain date(time) that provides the time and calendar information to resolve <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar durations</a> (see the link for the general interpretation of this option). Required if either <code>duration1</code> or <code>duration2</code> is a calendar duration (unless they are equal component-wise, in which case <code>0</code> is returned without computations).\n</dd>\n</dl>"
      },
      "returns": "Returns <code>-1</code> if <code>duration1</code> is shorter than <code>duration2</code>, <code>0</code> if they are equal, and <code>1</code> if <code>duration1</code> is longer than <code>duration2</code>.",
      "throws": {
        "RangeError": "Thrown if either <code>duration1</code> or <code>duration2</code> is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar duration</a> (it has a non-zero <code>years</code>, <code>months</code>, or <code>weeks</code>), and <code>relativeTo</code> is not provided."
      }
    },
    "temporal.duration.days": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/days",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>days</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of days in the duration.\n<p>Unless the duration is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>, you cannot assume the range of this value, but you can know its sign by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property. If it is balanced to a unit above days, the <code>days</code> absolute value's range depends on the calendar (how many days are in a week or month).\n<p>The set accessor of <code>days</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.duration.duration": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/duration",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Duration()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> objects.\n<p>This constructor allows you to create instances by directly supplying the underlying data. Like all other <code>Temporal</code> classes, you should usually construct <code>Temporal.Duration</code> objects using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a> static method, which can handle a variety of input types.",
      "parameters": {
        "years": "Number of years, or <code>undefined</code> (which is treated as <code>0</code>).",
        "months": "Number of months, or <code>undefined</code> (which is treated as <code>0</code>).",
        "weeks": "Number of weeks, or <code>undefined</code> (which is treated as <code>0</code>).",
        "days": "Number of days, or <code>undefined</code> (which is treated as <code>0</code>).",
        "hours": "Number of hours, or <code>undefined</code> (which is treated as <code>0</code>).",
        "minutes": "Number of minutes, or <code>undefined</code> (which is treated as <code>0</code>).",
        "seconds": "Number of seconds, or <code>undefined</code> (which is treated as <code>0</code>).",
        "milliseconds": "Number of milliseconds, or <code>undefined</code> (which is treated as <code>0</code>).",
        "microseconds": "Number of microseconds, or <code>undefined</code> (which is treated as <code>0</code>).",
        "nanoseconds": "Number of nanoseconds, or <code>undefined</code> (which is treated as <code>0</code>)."
      },
      "returns": "A new <code>Temporal.Duration</code> object, possibly <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">unbalanced</a>, with the specified components.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>Any of the parameters is not an integer (including non-finite values).</li>\n<li>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar unit</a> (years, months, weeks) has an absolute value ≥ 2<sup>32</sup>.</li>\n<li>The non-calendar part of the duration (days and below), when expressed in seconds, has an absolute value ≥ 2<sup>53</sup>.</li>\n</ul>"
      }
    },
    "temporal.duration.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/from",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Duration.from()</code></strong> static method creates a new <code>Temporal.Duration</code> object from another <code>Temporal.Duration</code> object, an object with duration properties, or an ISO 8601 string.",
      "parameters": {
        "info": "One of the following:\n<ul>\n<li>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance, which creates a copy of the instance.\n</li>\n<li>\n<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#iso_8601_duration_format\">ISO 8601</a> string representing a duration.\n</li>\n<li>\n<p>An object containing at least one of the following properties (in the order they are retrieved and validated):\n<ul>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/days\"><code>days</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/hours\"><code>hours</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/microseconds\"><code>microseconds</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/milliseconds\"><code>milliseconds</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/minutes\"><code>minutes</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/months\"><code>months</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/nanoseconds\"><code>nanoseconds</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/seconds\"><code>seconds</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/weeks\"><code>weeks</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/years\"><code>years</code></a></li>\n</ul>\n<p>Each property should contain an integer number value. The resulting duration must not have <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_sign\">mixed signs</a>, so all of these properties must have the same sign (or zero). Missing properties are treated as zero.\n</li>\n</ul>"
      },
      "returns": "A new <code>Temporal.Duration</code> object, possibly <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">unbalanced</a>, with the specified components.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>Any of the recognized properties in the <code>info</code> object is not an integer (including non-finite values).</li>\n<li>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar unit</a> (years, months, weeks) has an absolute value ≥ 2<sup>32</sup>.</li>\n<li>The non-calendar part of the duration (days and below), when expressed in seconds, has an absolute value ≥ 2<sup>53</sup>.</li>\n</ul>",
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object or a string.</li>\n<li>All of the recognized properties in the <code>info</code> object are <code>undefined</code>.</li>\n</ul>"
      }
    },
    "temporal.duration.hours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/hours",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>hours</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of hours in the duration.\n<p>Unless the duration is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>, you cannot assume the range of this value, but you can know its sign by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property. If it is balanced to a unit above hours, the <code>hours</code> absolute value will be between 0 and 23, inclusive.\n<p>The set accessor of <code>hours</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.duration.microseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/microseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>microseconds</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of microseconds in the duration.\n<p>Unless the duration is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>, you cannot assume the range of this value, but you can know its sign by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property. If it is balanced to a unit above microseconds, the <code>microseconds</code> absolute value will be between 0 and 999, inclusive.\n<p>The set accessor of <code>microseconds</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.duration.milliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/milliseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>milliseconds</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of milliseconds in the duration.\n<p>Unless the duration is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>, you cannot assume the range of this value, but you can know its sign by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property. If it is balanced to a unit above milliseconds, the <code>milliseconds</code> absolute value will be between 0 and 999, inclusive.\n<p>The set accessor of <code>milliseconds</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.duration.minutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/minutes",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>minutes</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of minutes in the duration.\n<p>Unless the duration is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>, you cannot assume the range of this value, but you can know its sign by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property. If it is balanced to a unit above minutes, the <code>minutes</code> absolute value will be between 0 and 59, inclusive.\n<p>The set accessor of <code>minutes</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.duration.months": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/months",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>months</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of months in the duration.\n<p>Unless the duration is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>, you cannot assume the range of this value, but you can know its sign by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property. If it is balanced to a unit above months, the <code>months</code> absolute value's range depends on the calendar (how many months are in a year).\n<p>The set accessor of <code>months</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.duration.nanoseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/nanoseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>nanoseconds</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of nanoseconds in the duration.\n<p>Unless the duration is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>, you cannot assume the range of this value, but you can know its sign by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property. If it is balanced to a unit above nanoseconds, the <code>nanoseconds</code> absolute value will be between 0 and 999, inclusive.\n<p>The set accessor of <code>nanoseconds</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.duration.negated": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/negated",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>negated()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a new <code>Temporal.Duration</code> object with the negated value of this duration (all fields keep the same magnitude, but sign becomes reversed).",
      "returns": "A new <code>Temporal.Duration</code> object, where all fields have the same magnitude as this duration, but the sign is reversed (positive fields become negative, and vice versa)."
    },
    "temporal.duration.round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/round",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>round()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a new <code>Temporal.Duration</code> object with the duration rounded to the given smallest unit and/or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a> to the given largest unit.",
      "parameters": {
        "smallestUnit": "A string representing the <a href=\"#smallestunit_2\"><code>smallestUnit</code></a> option. This is a convenience overload, so <code>round(smallestUnit)</code> is equivalent to <code>round({ smallestUnit })</code>, where <code>smallestUnit</code> is a string.",
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"largestunit\"><a href=\"#largestunit\"><code>largestUnit</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Any of the temporal units: <code>\"years\"</code>, <code>\"months\"</code>, <code>\"weeks\"</code>, <code>\"days\"</code>, <code>\"hours\"</code>, <code>\"minutes\"</code>, <code>\"seconds\"</code>, <code>\"milliseconds\"</code>, <code>\"microseconds\"</code>, <code>\"nanoseconds\"</code>, or their singular forms, or the value <code>\"auto\"</code> which means the largest non-zero component of this duration or <code>smallestUnit</code>, whichever is greater. Defaults to <code>\"auto\"</code>. The result will not contain units larger than this; for example, if the largest unit is <code>\"minutes\"</code>, then \"1 hour 30 minutes\" will become \"90 minutes\".\n</dd>\n<dt id=\"relativeto\"><a href=\"#relativeto\"><code>relativeTo</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A zoned or plain date(time) that provides the time and calendar information to resolve <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar durations</a> (see the link for the general interpretation of this option). Required if either <code>this</code> or <code>other</code> is a calendar duration, or <code>smallestUnit</code> is a calendar unit.\n</dd>\n<dt id=\"roundingincrement\"><a href=\"#roundingincrement\"><code>roundingIncrement</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A number (truncated to an integer) representing the rounding increment in the given <code>smallestUnit</code>. Defaults to <code>1</code>. Must be in the inclusive range of 1 to 1e9. If the smallest unit is hours, minutes, seconds, milliseconds, microseconds, or nanoseconds, the increment must be a divisor of the maximum value of the unit; for example, if the unit is hours, the increment must be a divisor of 24 and must not be 24 itself, which means it can be 1, 2, 3, 4, 6, 8, or 12.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string representing the rounding mode specifying to round up or down in various scenarios. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"halfExpand\"</code>.\n</dd>\n<dt id=\"smallestunit_2\"><a href=\"#smallestunit_2\"><code>smallestUnit</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Any of the temporal units: <code>\"years\"</code>, <code>\"months\"</code>, <code>\"weeks\"</code>, <code>\"days\"</code>, <code>\"hours\"</code>, <code>\"minutes\"</code>, <code>\"seconds\"</code>, <code>\"milliseconds\"</code>, <code>\"microseconds\"</code>, <code>\"nanoseconds\"</code>, or their singular forms. Defaults to <code>\"nanoseconds\"</code>. For units larger than <code>\"nanoseconds\"</code>, fractional parts of the <code>smallestUnit</code> will be rounded according to the <code>roundingIncrement</code> and <code>roundingMode</code> settings. Must be smaller or equal to <code>largestUnit</code>. At least one of <code>smallestUnit</code> and <code>largestUnit</code> must be provided.\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.Duration</code> object, where the largest unit is no larger than the <code>largestUnit</code> option, and the smallest unit is no smaller than the <code>smallestUnit</code> option. The fractional parts of the <code>smallestUnit</code> are rounded according to the <code>roundingIncrement</code> and <code>roundingMode</code> settings.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.duration.seconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/seconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>seconds</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of seconds in the duration.\n<p>Unless the duration is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>, you cannot assume the range of this value, but you can know its sign by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property. If it is balanced to a unit above seconds, the <code>seconds</code> absolute value will be between 0 and 59, inclusive.\n<p>The set accessor of <code>seconds</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.duration.sign": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/sign",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>sign</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns <code>1</code> if this duration is positive, <code>-1</code> if negative, and <code>0</code> if zero. Because <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_sign\">a duration never has mixed signs</a>, the sign of a duration is determined by the sign of any of its non-zero fields."
    },
    "temporal.duration.subtract": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/subtract",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>subtract()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a new <code>Temporal.Duration</code> object with the difference between this duration and a given duration. It is equivalent to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/add\">adding</a> the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/negated\">negated</a> value of the other duration.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to add to this duration. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>."
      },
      "returns": "A new <code>Temporal.Duration</code> object representing the difference of this duration and <code>other</code>.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>Either <code>this</code> or <code>other</code> is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar duration</a> (it has a non-zero <code>years</code>, <code>months</code>, or <code>weeks</code>), because calendar durations are ambiguous without a calendar and time reference.</li>\n<li>The difference of <code>this</code> and <code>other</code> overflows the maximum or underflows the minimum representable duration, which is ±2<sup>53</sup> seconds.</li>\n</ul>"
      }
    },
    "temporal.duration.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/tojson",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a string representing this duration in the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#iso_8601_duration_format\">ISO 8601 format</a> as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/toString\"><code>toString()</code></a>. It is intended to be implicitly called by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.",
      "returns": "A string representing the given duration in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#iso_8601_duration_format\">ISO 8601 format</a>, with as much subsecond precision as necessary to represent the duration accurately."
    },
    "temporal.duration.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/tolocalestring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a string with a language-sensitive representation of this duration. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code> API</a> support, this method delegates to <code>Intl.DurationFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/format\"><code>format()</code></a> method, because a <code>DurationFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/DurationFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DurationFormat()</code> constructor.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/DurationFormat#options\"><code>options</code></a> parameter of the <code>Intl.DurationFormat()</code> constructor."
      },
      "returns": "A string representing the given duration according to language-specific conventions.\n<p>In implementations with <code>Intl.DurationFormat</code>, this is equivalent to <code>new Intl.DurationFormat(locales, options).format(duration)</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>"
    },
    "temporal.duration.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/tostring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a string representing this duration in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#iso_8601_duration_format\">ISO 8601 format</a>.",
      "parameters": {
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"fractionalseconddigits\"><a href=\"#fractionalseconddigits\"><code>fractionalSecondDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Either an integer from 0 to 9, or the string <code>\"auto\"</code>. The default is <code>\"auto\"</code>. If <code>\"auto\"</code>, then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to round off fractional second digits beyond <code>fractionalSecondDigits</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"trunc\"</code>.\n</dd>\n<dt id=\"smallestunit\"><a href=\"#smallestunit\"><code>smallestUnit</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the smallest unit to include in the output. Possible values are <code>\"second\"</code>, <code>\"millisecond\"</code>, <code>\"microsecond\"</code>, and <code>\"nanosecond\"</code>, or their plural forms, which are equivalent to <code>fractionalSecondDigits</code> values of <code>0</code>, <code>3</code>, <code>6</code>, <code>9</code>, respectively. If specified, then <code>fractionalSecondDigits</code> is ignored.\n</dd>\n</dl>"
      },
      "returns": "A string representing the given duration in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#iso_8601_duration_format\">ISO 8601 format</a>, with subsecond components formatted according to the options. The zero duration is represented as <code>\"PT0S\"</code>.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.duration.total": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/total",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>total()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a number representing the total duration in the given unit.",
      "parameters": {
        "unit": "A string representing the <a href=\"#unit_2\"><code>unit</code></a> option. This is a convenience overload, so <code>total(unit)</code> is equivalent to <code>total({ unit })</code>, where <code>unit</code> is a string.",
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"relativeto\"><a href=\"#relativeto\"><code>relativeTo</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A zoned or plain date(time) that provides the time and calendar information to resolve <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar durations</a> (see the link for the general interpretation of this option). Required if either <code>this</code> or <code>other</code> is a calendar duration, or <code>unit</code> is a calendar unit.\n</dd>\n<dt id=\"unit_2\"><a href=\"#unit_2\"><code>unit</code></a></dt>\n<dd>\n<p>Any of the temporal units: <code>\"years\"</code>, <code>\"months\"</code>, <code>\"weeks\"</code>, <code>\"days\"</code>, <code>\"hours\"</code>, <code>\"minutes\"</code>, <code>\"seconds\"</code>, <code>\"milliseconds\"</code>, <code>\"microseconds\"</code>, <code>\"nanoseconds\"</code>, or their singular forms.\n</dd>\n</dl>"
      },
      "returns": "A floating-point number representing the total duration in the given unit. May be inexact due to floating point precision limits.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>unit</code> is not provided or is not a valid unit.</li>\n<li>Either <code>this</code> or <code>other</code> is a calendar duration, or <code>unit</code> is a calendar unit, and <code>relativeTo</code> is not provided.</li>\n</ul>"
      }
    },
    "temporal.duration.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/valueof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, which prevents <code>Temporal.Duration</code> instances from being <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_coercion\">implicitly converted to primitives</a> when used in arithmetic or comparison operations.",
      "returns": "None.",
      "throws": {
        "TypeError": "Always thrown."
      }
    },
    "temporal.duration.weeks": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/weeks",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>weeks</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of weeks in the duration.\n<p>Unless the duration is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#duration_balancing\">balanced</a>, you cannot assume the range of this value, but you can know its sign by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property. If it is balanced to a unit above weeks, the <code>weeks</code> absolute value's range depends on the calendar (how many weeks are in a month or year).\n<p>The set accessor of <code>weeks</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.duration.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/with",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns a new <code>Temporal.Duration</code> object representing this duration with some fields replaced by new values. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the duration's fields.",
      "parameters": {
        "info": "An object containing at least one of the properties recognized by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>: <code>years</code>, <code>months</code>, <code>weeks</code>, <code>days</code>, <code>hours</code>, <code>minutes</code>, <code>seconds</code>, <code>milliseconds</code>, <code>microseconds</code>, <code>nanoseconds</code>. Unspecified properties use the values from the original duration."
      },
      "returns": "A new <code>Temporal.Duration</code> object, where the fields specified in <code>info</code> that are not <code>undefined</code> are replaced by the corresponding values, and the rest of the fields are copied from the original duration.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>Any of the recognized properties in the <code>info</code> object is not an integer (including non-finite values).</li>\n<li>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar unit</a> (years, months, weeks) has an absolute value ≥ 2<sup>32</sup>.</li>\n<li>The non-calendar part of the duration (days and below), when expressed in seconds, has an absolute value ≥ 2<sup>53</sup>.</li>\n</ul>",
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>The <code>info</code> object is not an object.</li>\n<li>All of the recognized properties in the <code>info</code> object are <code>undefined</code>.</li>\n</ul>"
      }
    },
    "temporal.duration.years": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/duration/years",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>years</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instances returns an integer representing the number of years in the duration.\n<p>You can know the sign of <code>years</code> by checking the duration's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/sign\"><code>sign</code></a> property.\n<p>The set accessor of <code>years</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/with\"><code>with()</code></a> method to create a new <code>Temporal.Duration</code> object with the desired new value."
    },
    "temporal.instant": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Instant</code></strong> object represents a unique point in time, with nanosecond precision. It is fundamentally represented as the number of nanoseconds since the Unix epoch (midnight at the beginning of January 1, 1970, UTC), without any time zone or calendar system."
    },
    "temporal.instant.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/add",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>add()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a new <code>Temporal.Instant</code> object representing this instant moved forward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to add to this instant. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> object representing adding <code>duration</code> to this instant. If <code>duration</code> is positive, then the returned instant is later than this instant; if <code>duration</code> is negative, then the returned instant is earlier than this instant.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>duration</code> is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar duration</a> (it has a non-zero <code>years</code>, <code>months</code>, or <code>weeks</code>), or has a non-zero <code>days</code>, because calendar durations are ambiguous without a calendar and time reference.</li>\n<li>The result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.instant.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/compare",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Instant.compare()</code></strong> static method returns a number (-1, 0, or 1) indicating whether the first instant comes before, is the same as, or comes after the second instant. It is equivalent to comparing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/epochNanoseconds\"><code>epochNanoseconds</code></a> of the two instants.",
      "parameters": {
        "instant1": "A string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instance representing the first instant to compare. It is converted to a <code>Temporal.Instant</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/from\"><code>Temporal.Instant.from()</code></a>.",
        "instant2": "The second instant to compare, converted to a <code>Temporal.Instant</code> object using the same algorithm as <code>instant1</code>."
      },
      "returns": "Returns <code>-1</code> if <code>instant1</code> comes before <code>instant2</code>, <code>0</code> if they are the same, and <code>1</code> if <code>instant1</code> comes after <code>instant2</code>."
    },
    "temporal.instant.epochmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/epochmilliseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>epochMilliseconds</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns an integer representing the number of milliseconds elapsed since the Unix epoch (midnight at the beginning of January 1, 1970, UTC) to this instant. It is equivalent to dividing <code>epochNanoseconds</code> by <code>1e6</code> and flooring the result.\n<p>The set accessor of <code>epochMilliseconds</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.Instant</code> object with the desired new <code>epochMilliseconds</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/fromEpochMilliseconds\"><code>Temporal.Instant.fromEpochMilliseconds()</code></a> static method instead."
    },
    "temporal.instant.epochnanoseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/epochnanoseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>epochNanoseconds</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> representing the number of nanoseconds elapsed since the Unix epoch (midnight at the beginning of January 1, 1970, UTC) to this instant.\n<p>The set accessor of <code>epochNanoseconds</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.Instant</code> object with the desired new <code>epochNanoseconds</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/fromEpochNanoseconds\"><code>Temporal.Instant.fromEpochNanoseconds()</code></a> static method instead.\n<p>An instant can only represent ±10<sup>8</sup> days (about ±273,972.6 years) around the epoch, which is ±8.64e21 nanoseconds. Attempting to set <code>epochNanoseconds</code> beyond this boundary throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>."
    },
    "temporal.instant.equals": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/equals",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>equals()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns <code>true</code> if this instant is equivalent in value to another instant (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/from\"><code>Temporal.Instant.from()</code></a>), and <code>false</code> otherwise. They are compared by their <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/epochNanoseconds\"><code>epochNanoseconds</code></a>. It is equivalent to <code>Temporal.Instant.compare(this, other) === 0</code>.",
      "parameters": {
        "other": "A string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instance representing the other instant to compare. It is converted to a <code>Temporal.Instant</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/from\"><code>Temporal.Instant.from()</code></a>."
      },
      "returns": "<code>true</code> if this instant is equal to <code>other</code> by nanoseconds, <code>false</code> otherwise."
    },
    "temporal.instant.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/from",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Instant.from()</code></strong> static method creates a new <code>Temporal.Instant</code> object from another <code>Temporal.Instant</code> object, or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant#rfc_9557_format\">RFC 9557</a> string.",
      "parameters": {
        "info": "One of the following:\n<ul>\n<li>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instance, which creates a copy of the instance.</li>\n<li>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant#rfc_9557_format\">RFC 9557</a> string containing a date, time, and time zone offset. The time zone name is ignored; only the offset is used.</li>\n</ul>"
      },
      "returns": "A new <code>Temporal.Instant</code> object representing the instant in time specified by <code>info</code>.",
      "throws": {
        "TypeError": "Thrown if <code>info</code> is not a <code>Temporal.Instant</code> instance or a string.",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The string is not a valid RFC 9557 string.</li>\n<li>The info is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.instant.fromepochmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/fromepochmilliseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Instant.fromEpochMilliseconds()</code></strong> static method creates a new <code>Temporal.Instant</code> object from the number of milliseconds since the Unix epoch (midnight at the beginning of January 1, 1970, UTC).\n<p>To convert a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object to a <code>Temporal.Instant</code> object, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toTemporalInstant\"><code>Date.prototype.toTemporalInstant()</code></a> instead.",
      "parameters": {
        "epochMilliseconds": "A number representing the number of milliseconds since the Unix epoch. Internally, it is converted to a BigInt and multiplied by <code>1e6</code> to get the number of nanoseconds."
      },
      "returns": "A new <code>Temporal.Instant</code> object representing the instant in time specified by <code>epochMilliseconds</code>.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>epochMilliseconds</code> cannot be converted to a BigInt (e.g., not an integer).</li>\n<li><code>epochMilliseconds</code> is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.instant.fromepochnanoseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/fromepochnanoseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Instant.fromEpochNanoseconds()</code></strong> static method creates a new <code>Temporal.Instant</code> object from the number of nanoseconds since the Unix epoch (midnight at the beginning of January 1, 1970, UTC).\n<p>To convert a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object to a <code>Temporal.Instant</code> object, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toTemporalInstant\"><code>Date.prototype.toTemporalInstant()</code></a> instead.",
      "parameters": {
        "epochNanoseconds": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a> representing the number of nanoseconds since the Unix epoch."
      },
      "returns": "A new <code>Temporal.Instant</code> object representing the instant in time specified by <code>epochNanoseconds</code>.",
      "throws": {
        "RangeError": "Thrown if <code>epochNanoseconds</code> is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.instant.instant": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/instant",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Instant()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> objects.\n<p>This constructor is exactly equivalent to calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/fromEpochNanoseconds\"><code>Temporal.Instant.fromEpochNanoseconds()</code></a>.",
      "parameters": {
        "epochNanoseconds": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a> representing the number of nanoseconds since the Unix epoch."
      },
      "returns": "A new <code>Temporal.Instant</code> object representing the instant in time specified by <code>epochNanoseconds</code>.",
      "throws": {
        "RangeError": "Thrown if <code>epochNanoseconds</code> represents an instant outside the range of representable instants, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.instant.round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/round",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>round()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a new <code>Temporal.Instant</code> object representing this instant rounded to the given unit.",
      "parameters": {
        "smallestUnit": "A string representing the <a href=\"#smallestunit_2\"><code>smallestUnit</code></a> option. This is a convenience overload, so <code>round(smallestUnit)</code> is equivalent to <code>round({ smallestUnit })</code>, where <code>smallestUnit</code> is a string.",
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"roundingincrement\"><a href=\"#roundingincrement\"><code>roundingIncrement</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A number (truncated to an integer) representing the rounding increment in the given <code>smallestUnit</code>. Defaults to <code>1</code>. The increment and the <code>smallestUnit</code> must evenly divide 24 hours; for example, 45 seconds is a divisor of 86400 seconds, and 100 minutes is a divisor of 3600 minutes. This is slightly less strict than the <code>round()</code> method of the other classes, which all require the increment to be a divisor of the maximum value of the unit.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to round off the fractional part of <code>smallestUnit</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"halfExpand\"</code>.\n</dd>\n<dt id=\"smallestunit_2\"><a href=\"#smallestunit_2\"><code>smallestUnit</code></a></dt>\n<dd>\n<p>A string representing the smallest unit to include in the output. The value must be one of the following: <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"millisecond\"</code>, <code>\"microsecond\"</code>, <code>\"nanosecond\"</code>, or their plural forms. For units larger than <code>\"nanosecond\"</code>, fractional parts of the <code>smallestUnit</code> will be rounded according to the <code>roundingIncrement</code> and <code>roundingMode</code> settings.\n</dd>\n</dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> object representing this instant rounded to the given unit, where all units smaller than <code>smallestUnit</code> are zeroed out.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.instant.since": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/since",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>since()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from another instant (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/from\"><code>Temporal.Instant.from()</code></a>) to this instant. The duration is positive if the other instant is before this instant, and negative if after.\n<p>This method does <code>this - other</code>. To do <code>other - this</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/until\"><code>until()</code></a> method.",
      "parameters": {
        "other": "A string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instance representing an instant to subtract from this instant. It is converted to a <code>Temporal.Instant</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/from\"><code>Temporal.Instant.from()</code></a>.",
        "options": "An object containing the options for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/round\"><code>Temporal.Duration.prototype.round()</code></a>, which includes <code>largestUnit</code>, <code>roundingIncrement</code>, <code>roundingMode</code>, and <code>smallestUnit</code>. <code>largestUnit</code> and <code>smallestUnit</code> only accept the units: <code>\"hours\"</code>, <code>\"minutes\"</code>, <code>\"seconds\"</code>, <code>\"milliseconds\"</code>, <code>\"microseconds\"</code>, <code>\"nanoseconds\"</code>, or their singular forms. For <code>largestUnit</code>, the default value <code>\"auto\"</code> means <code>\"seconds\"</code> or <code>smallestUnit</code>, whichever is greater. For <code>smallestUnit</code>, the default value is <code>\"nanoseconds\"</code>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration <em>since</em> <code>other</code> to this instant. The duration is positive if <code>other</code> is before this instant, and negative if after.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.instant.subtract": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/subtract",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>subtract()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a new <code>Temporal.Instant</code> object representing this instant moved backward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).\n<p>If you want to subtract two instants and get a duration, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/since\"><code>since()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/until\"><code>until()</code></a> instead.",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to subtract from this instant. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> object representing subtracting <code>duration</code> from this instant. If <code>duration</code> is positive, then the returned instant is earlier than this instant; if <code>duration</code> is negative, then the returned instant is later than this instant.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>duration</code> is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">calendar duration</a> (it has a non-zero <code>years</code>, <code>months</code>, or <code>weeks</code>), or has a non-zero <code>days</code>, because calendar durations are ambiguous without a calendar and time reference.</li>\n<li>The result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.instant.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/tojson",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a string representing this instant in the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant#rfc_9557_format\">RFC 9557 format</a> as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/toString\"><code>toString()</code></a>. It is intended to be implicitly called by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.",
      "returns": "A string representing the given instant in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant#rfc_9557_format\">RFC 9557 format</a>, with as much subsecond precision as necessary to represent the duration accurately, and with the UTC time zone designator <code>Z</code>."
    },
    "temporal.instant.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/tolocalestring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a string with a language-sensitive representation of this instant. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor."
      },
      "returns": "A string representing the given instant according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(instant)</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>"
    },
    "temporal.instant.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/tostring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a string representing this instant in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant#rfc_9557_format\">RFC 9557 format</a> using the specified time zone.",
      "parameters": {
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"fractionalseconddigits\"><a href=\"#fractionalseconddigits\"><code>fractionalSecondDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Either an integer from 0 to 9, or the string <code>\"auto\"</code>. The default is <code>\"auto\"</code>. If <code>\"auto\"</code>, then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to round off fractional second digits beyond <code>fractionalSecondDigits</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"trunc\"</code>.\n</dd>\n<dt id=\"smallestunit\"><a href=\"#smallestunit\"><code>smallestUnit</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the smallest unit to include in the output. Possible values are <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"millisecond\"</code>, <code>\"microsecond\"</code>, and <code>\"nanosecond\"</code>, or their plural forms, which (except <code>\"minute\"</code>) are equivalent to <code>fractionalSecondDigits</code> values of <code>0</code>, <code>3</code>, <code>6</code>, <code>9</code>, respectively. If specified, then <code>fractionalSecondDigits</code> is ignored.\n</dd>\n<dt id=\"timezone\"><a href=\"#timezone\"><code>timeZone</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to use. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information). Defaults to <code>\"UTC\"</code>.\n</dd>\n</dl>"
      },
      "returns": "A string in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant#rfc_9557_format\">RFC 9557 format</a> representing this instant using the specified time zone. No annotations, such as time zone names, are included.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.instant.tozoneddatetimeiso": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/tozoneddatetimeiso",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toZonedDateTimeISO()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object representing this instant in the specified time zone using the ISO 8601 calendar system.",
      "parameters": {
        "timeZone": "Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to use. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information)."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object representing this instant in the specified time zone using the ISO 8601 calendar system.",
      "throws": {
        "RangeError": "Thrown if the time zone name is invalid.",
        "TypeError": "Thrown if <code>timeZone</code> is not a string or a <code>Temporal.ZonedDateTime</code> instance."
      }
    },
    "temporal.instant.until": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/until",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>until()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this instant to another instant (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/from\"><code>Temporal.Instant.from()</code></a>). The duration is positive if the other instant is after this instant, and negative if before.\n<p>This method does <code>other - this</code>. To do <code>this - other</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/since\"><code>since()</code></a> method.",
      "parameters": {
        "other": "A string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instance representing an instant to subtract this instant from. It is converted to a <code>Temporal.Instant</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/from\"><code>Temporal.Instant.from()</code></a>.",
        "options": "The same options as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/since#options\"><code>since()</code></a>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this instant <em>until</em> <code>other</code>. The duration is positive if <code>other</code> is after this instant, and negative if before.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.instant.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/instant/valueof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> instances throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, which prevents <code>Temporal.Instant</code> instances from being <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_coercion\">implicitly converted to primitives</a> when used in arithmetic or comparison operations.",
      "returns": "None.",
      "throws": {
        "TypeError": "Always thrown."
      }
    },
    "temporal.now": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/now",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Now</code></strong> namespace object contains static methods for getting the current time in various formats."
    },
    "temporal.now.instant": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/now/instant",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Now.instant()</code></strong> static method returns the current time as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> object.",
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> object representing the current time, with potentially <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Now#reduced_time_precision\">reduced precision</a>."
    },
    "temporal.now.plaindateiso": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/now/plaindateiso",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Now.plainDateISO()</code></strong> static method returns the current date as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object, in the ISO 8601 calendar and the specified time zone.",
      "parameters": {
        "timeZone": "Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to interpret the system time in. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information)."
      },
      "returns": "The current date in the specified time zone, as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object using the ISO 8601 calendar.",
      "throws": {
        "RangeError": "Thrown if the time zone is invalid."
      }
    },
    "temporal.now.plaindatetimeiso": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/now/plaindatetimeiso",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Now.plainDateTimeISO()</code></strong> static method returns the current date and time as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object, in the ISO 8601 calendar and the specified time zone.",
      "parameters": {
        "timeZone": "Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to interpret the system time in. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information)."
      },
      "returns": "The current date and time in the specified time zone, as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object using the ISO 8601 calendar. Has the same precision as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Now/instant\"><code>Temporal.Now.instant()</code></a>.",
      "throws": {
        "RangeError": "Thrown if the time zone is invalid."
      }
    },
    "temporal.now.plaintimeiso": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/now/plaintimeiso",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Now.plainTimeISO()</code></strong> static method returns the current time as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> object, in the specified time zone.\n<p>Note that although the method contains \"ISO\" in its name, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> objects do not have associated calendars, as the time format is not calendar-dependent.",
      "parameters": {
        "timeZone": "Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to interpret the system time in. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information)."
      },
      "returns": "The current time in the specified time zone, as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> object. Has the same precision as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Now/instant\"><code>Temporal.Now.instant()</code></a>.",
      "throws": {
        "RangeError": "Thrown if the time zone is invalid."
      }
    },
    "temporal.now.timezoneid": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/now/timezoneid",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Now.timeZoneId()</code></strong> static method returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zone identifier</a> representing the system's current time zone. Most systems will return a primary time zone identifier such as <code>\"America/New_York\"</code>, though offset time zone identifier such as <code>\"-04:00\"</code> is possible too. The time zone identifier returned is the default time zone used by the other <code>Temporal.Now</code> methods.",
      "returns": "A valid <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zone identifier</a> representing the system's current time zone. The returned time zone identifier is never a non-primary time zone identifier (alias). For example, it would always return <code>\"Asia/Kolkata\"</code> (new name) instead of <code>\"Asia/Calcutta\"</code> (old name). For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a>.\n<p>If the implementation does not support time zones, the method always returns <code>\"UTC\"</code>."
    },
    "temporal.now.zoneddatetimeiso": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/now/zoneddatetimeiso",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.Now.zonedDateTimeISO()</code></strong> static method returns the current date and time as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object, in the ISO 8601 calendar and the specified time zone.",
      "parameters": {
        "timeZone": "Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to interpret the system time in. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information)."
      },
      "returns": "The current date and time in the specified time zone, as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object using the ISO 8601 calendar. Has the same precision as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Now/instant\"><code>Temporal.Now.instant()</code></a>.",
      "throws": {
        "RangeError": "Thrown if the time zone is invalid."
      }
    },
    "temporal.plaindate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainDate</code></strong> object represents a calendar date (a date without a time or time zone); for example, an event on a calendar which happens during the whole day no matter which time zone it's happening in. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system."
    },
    "temporal.plaindate.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/add",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>add()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <code>Temporal.PlainDate</code> object representing this date moved forward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to add to this date. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDate</code> object representing the date specified by the original <code>PlainDate</code>, plus the duration.",
      "throws": {
        "RangeError": "Thrown if the result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.plaindate.calendarid": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/calendarid",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>calendarId</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a> used to interpret the internal ISO 8601 date.\n<p>For a list of commonly supported values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars\"><code>Intl.Locale.prototype.getCalendars()</code></a>.\n<p>The set accessor of <code>calendarId</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/withCalendar\"><code>withCalendar()</code></a> method to create a new <code>Temporal.PlainDate</code> object with the desired new value."
    },
    "temporal.plaindate.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/compare",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainDate.compare()</code></strong> static method returns a number (-1, 0, or 1) indicating whether the first date comes before, is the same as, or comes after the second date. Equivalent to comparing the year, month, and day fields of the underlying ISO 8601 dates.",
      "parameters": {
        "date1": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instance representing the first date to compare. It is converted to a <code>Temporal.PlainDate</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a>.",
        "date2": "The second date to compare, converted to a <code>Temporal.PlainDate</code> object using the same algorithm as <code>date1</code>."
      },
      "returns": "Returns <code>-1</code> if <code>date1</code> comes before <code>date2</code>, <code>0</code> if they are the same, and <code>1</code> if <code>date1</code> comes after <code>date2</code>. They are compared by their underlying date values, ignoring their calendars."
    },
    "temporal.plaindate.day": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/day",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>day</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a positive integer representing the 1-based day index in the month of this date, which is the same day number you would see on a calendar. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>It generally starts at 1 and is continuous, but not always. If you want to loop through all the days in a month, first use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/with\"><code>with()</code></a> with <code>{ day: 1 }</code> (which sets to the beginning of the month, even if the actual number is not <code>1</code>), then repeatedly use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/add\"><code>add()</code></a> with <code>{ days: 1 }</code>, until the month changes.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nUsually, the day index only changes when transitioning from one calendar system into another, such as <a href=\"https://en.wikipedia.org/wiki/Adoption_of_the_Gregorian_calendar\" class=\"external\" target=\"_blank\">from the Julian to the Gregorian calendar</a>. In practice, all currently built-in calendars are <a href=\"https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar\" class=\"external\" target=\"_blank\">proleptic</a>, meaning the calendar system is extended indefinitely into the past and future. Assuming <code>day</code> is non-continuous guards against future introductions of non-proleptic calendars.\n</div>\n<p>The set accessor of <code>day</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDate</code> object with the desired new value."
    },
    "temporal.plaindate.dayofweek": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/dayofweek",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>dayOfWeek</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a positive integer representing the 1-based day index in the week of this date. Days in a week are numbered sequentially from <code>1</code> to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInWeek\"><code>daysInWeek</code></a>, with each number mapping to its name. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent. 1 usually represents Monday in the calendar, even when locales using the calendar may consider a different day as the first day of the week (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo\"><code>Intl.Locale.prototype.getWeekInfo()</code></a>).\n<p>All commonly supported calendars use 7-day weeks, and you could generally expect this property to return the same value for the same date across different calendars.\n<p>The set accessor of <code>dayOfWeek</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.PlainDate</code> object with the desired new <code>dayOfWeek</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/add\"><code>add()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/subtract\"><code>subtract()</code></a> method with the appropriate number of <code>days</code>."
    },
    "temporal.plaindate.dayofyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/dayofyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>dayOfYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a positive integer representing the 1-based day index in the year of this date. The first day of this year is <code>1</code>, and the last day is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInYear\"><code>daysInYear</code></a>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>dayOfYear</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.PlainDate</code> object with the desired new <code>dayOfYear</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/add\"><code>add()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/subtract\"><code>subtract()</code></a> method with the appropriate number of <code>days</code>."
    },
    "temporal.plaindate.daysinmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/daysinmonth",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInMonth</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a positive integer representing the number of days in the month of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Note that the days in month is not always equal to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/day\"><code>day</code></a> of the last day of the month, in the rare case where a month may have a few days skipped.\n<p>The set accessor of <code>daysInMonth</code> is <code>undefined</code>. You cannot change this property directly."
    },
    "temporal.plaindate.daysinweek": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/daysinweek",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInWeek</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a positive integer representing the number of days in the week of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>For the ISO 8601 calendar, this is always 7, but in other calendar systems it may differ from week to week. All commonly supported calendars use 7-day weeks.\n<p>The set accessor of <code>daysInWeek</code> is <code>undefined</code>. You cannot change this property directly."
    },
    "temporal.plaindate.daysinyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/daysinyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a positive integer representing the number of days in the year of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>For the ISO 8601 calendar, this is 365, or 366 in a leap year. In other calendar systems, it likely differs, especially in non-solar calendars.\n<p>The set accessor of <code>daysInWeek</code> is <code>undefined</code>. You cannot change this property directly."
    },
    "temporal.plaindate.equals": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/equals",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>equals()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns <code>true</code> if this date is equivalent in value to another date (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a>), and <code>false</code> otherwise. They are compared both by their date values and their calendars, so two dates from different calendars may be considered equal by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/compare\"><code>Temporal.PlainDate.compare()</code></a> but not by <code>equals()</code>.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instance representing the other date to compare. It is converted to a <code>Temporal.PlainDate</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a>."
      },
      "returns": "<code>true</code> if this date is equal to <code>other</code> both in their date value and their calendar, <code>false</code> otherwise."
    },
    "temporal.plaindate.era": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/era",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>era</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a calendar-specific lowercase string representing the era of this date, or <code>undefined</code> if the calendar does not use eras (e.g., ISO 8601). <code>era</code> and <code>eraYear</code> together uniquely identify a year in a calendar, in the same way that <code>year</code> does. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent. For Gregorian, it is either <code>\"gregory\"</code> or <code>\"gregory-inverse\"</code>.\n<p>The set accessor of <code>era</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDate</code> object with the desired new value. When setting eras, each code may have some aliases; for example, <code>\"ce\"</code> and <code>\"ad\"</code> are equivalent to <code>\"gregory\"</code>, and <code>\"bce\"</code> and <code>\"bc\"</code> are equivalent to <code>\"gregory-inverse\"</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis string is not intended for display to users. Use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/toLocaleString\"><code>toLocaleString()</code></a> with the appropriate options to get a localized string.\n</div>"
    },
    "temporal.plaindate.erayear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/erayear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>eraYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a non-negative integer representing the year of this date within the era, or <code>undefined</code> if the calendar does not use eras (e.g., ISO 8601). The year index usually starts from 1 (more common) or 0, and years in an era can decrease with time (e.g., Gregorian BCE). <code>era</code> and <code>eraYear</code> together uniquely identify a year in a calendar, in the same way that <code>year</code> does. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Unlike <code>year</code>, <code>era</code> and <code>eraYear</code> may change in the middle of a calendar year. For example, Japan started the Reiwa era on May 1, 2019, so dates from 2019-01-01 to 2019-04-30 have <code>{ era: \"heisei\", eraYear: 31 }</code>, and dates from 2019-05-01 onwards have <code>{ era: \"reiwa\", eraYear: 1 }</code>, but the <code>year</code> is always 2019 (because the Japanese calendar uses the ISO 8601 year as the default year).\n<p>The set accessor of <code>eraYear</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDate</code> object with the desired new value."
    },
    "temporal.plaindate.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/from",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainDate.from()</code></strong> static method creates a new <code>Temporal.PlainDate</code> object from another <code>Temporal.PlainDate</code> object, an object with date properties, or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#rfc_9557_format\">RFC 9557</a> string.",
      "parameters": {
        "info": "One of the following:\n<ul>\n<li>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instance, which creates a copy of the instance.\n</li>\n<li>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instance, which provides the calendar date in the same fashion as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/toPlainDate\"><code>Temporal.PlainDateTime.prototype.toPlainDate()</code></a>.\n</li>\n<li>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance, which provides the calendar date in the same fashion as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/toPlainDate\"><code>Temporal.ZonedDateTime.prototype.toPlainDate()</code></a>.\n</li>\n<li>\n<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#rfc_9557_format\">RFC 9557</a> string containing a date and optionally a calendar.\n</li>\n<li>\n<p>An object containing the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"calendar\"><a href=\"#calendar\"><code>calendar</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/calendarId\"><code>calendarId</code></a> property. Defaults to <code>\"iso8601\"</code>. All other properties are interpreted in this calendar system (unlike the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/PlainDate\"><code>Temporal.PlainDate()</code></a> constructor, which interprets the values in the ISO calendar system).\n</dd>\n<dt id=\"day\"><a href=\"#day\"><code>day</code></a></dt>\n<dd>\n<p>An integer that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/day\"><code>day</code></a> property. Must be positive regardless of the <code>overflow</code> option.\n</dd>\n<dt id=\"era\"><a href=\"#era\"><code>era</code> and <code>eraYear</code></a></dt>\n<dd>\n<p>A string and an integer that correspond to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/era\"><code>era</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/eraYear\"><code>eraYear</code></a> properties. Are only used if the calendar system has eras. <code>era</code> and <code>eraYear</code> must be provided simultaneously. At least one of <code>era</code>+<code>eraYear</code> or <code>year</code> must be provided. If all of <code>era</code>, <code>eraYear</code>, and <code>year</code> are provided, they must be consistent.\n</dd>\n<dt id=\"month\"><a href=\"#month\"><code>month</code></a></dt>\n<dd>\n<p>Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/month\"><code>month</code></a> property. Must be positive regardless of the <code>overflow</code> option. At least one of <code>month</code> or <code>monthCode</code> must be provided. If both <code>month</code> and <code>monthCode</code> are provided, they must be consistent.\n</dd>\n<dt id=\"monthcode\"><a href=\"#monthcode\"><code>monthCode</code></a></dt>\n<dd>\n<p>Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode\"><code>monthCode</code></a> property. At least one of <code>month</code> or <code>monthCode</code> must be provided. If both <code>month</code> and <code>monthCode</code> are provided, they must be consistent.\n</dd>\n<dt id=\"year\"><a href=\"#year\"><code>year</code></a></dt>\n<dd>\n<p>Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year\"><code>year</code></a> property. At least one of <code>era</code>+<code>eraYear</code> or <code>year</code> must be provided. If all of <code>era</code>, <code>eraYear</code>, and <code>year</code> are provided, they must be consistent.\n</dd>\n</dl>\n<p>The info should explicitly specify a year (as <code>year</code> or <code>era</code> and <code>eraYear</code>), a month (as <code>month</code> or <code>monthCode</code>), and a day.\n</li>\n</ul>",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range (when using the object <code>info</code>). Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDate</code> object, representing the date specified by <code>info</code> in the specified <code>calendar</code>.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object or a string.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n<li>The provided properties are insufficient to unambiguously determine a date. You usually need to provide a <code>year</code> (or <code>era</code> and <code>eraYear</code>), a <code>month</code> (or <code>monthCode</code>), and a <code>day</code>.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>The info is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.plaindate.inleapyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/inleapyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>inLeapYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a boolean indicating whether this date is in a leap year. A leap year is a year that has more days (due to a leap day or leap month) than a common year. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>For the ISO 8601 calendar, a leap year is a year that is evenly divisible by 4, except for years that are evenly divisible by 100, unless the year is also evenly divisible by 400. For the ISO 8601 calendar, leap years have 366 days, while common years have 365 days. For other calendar systems, the rules likely differ, and leap years may have more days added (such as a leap month).\n<p>The set accessor of <code>inLeapYear</code> is <code>undefined</code>. You cannot change this property directly."
    },
    "temporal.plaindate.month": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/month",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>month</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a positive integer representing the 1-based month index in the year of this date. The first month of this year is <code>1</code>, and the last month is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthsInYear\"><code>monthsInYear</code></a>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Note that unlike <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getMonth\"><code>Date.prototype.getMonth()</code></a>, the index is 1-based. If the calendar has leap months, then the month with the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode\"><code>monthCode</code></a> may have different <code>month</code> indexes for different years.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nDo not use this property to identify the actual month, including its name. Use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode\"><code>monthCode</code></a> for that purpose. Use <code>month</code> only for identifying months within the context of a year, or to figure out their order.\n</div>\n<p>The set accessor of <code>month</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDate</code> object with the desired new value."
    },
    "temporal.plaindate.monthcode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/monthcode",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>monthCode</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a calendar-specific string representing the month of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Usually it is <code>M</code> plus a two-digit month number. For leap months, it is the previous month's code followed by <code>L</code> (even if it's conceptually a derivative of the following month; for example, in the Hebrew calendar, Adar I has code <code>M05L</code> but Adar II has code <code>M06</code>). If the leap month is the first month of the year, the code is <code>M00L</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nDon't assume that <code>monthCode</code> is a user-friendly string; use <code>toLocaleString()</code> to format your date instead. Generally, don't cache the name of months in an array or object. Even though <code>monthCode</code> usually maps to the month's name within one calendar, we recommend always computing the month's name using, for example, <code>date.toLocaleString(\"en-US\", { calendar: date.calendarId, month: \"long\" })</code>.\n</div>\n<p>The set accessor of <code>monthCode</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDate</code> object with the desired new value."
    },
    "temporal.plaindate.monthsinyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/monthsinyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>monthsInYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a positive integer representing the number of months in the year of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>For the ISO 8601 calendar, this is always 12, but in other calendar systems it may differ. For example, in calendars using leap months, leap years will have one more month than common years.\n<p>The set accessor of <code>monthsInYear</code> is <code>undefined</code>. You cannot change this property directly."
    },
    "temporal.plaindate.plaindate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/plaindate",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainDate()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> objects.\n<p>This constructor allows you to create instances by directly supplying the underlying data. Like all other <code>Temporal</code> classes, you should usually construct <code>Temporal.PlainDate</code> objects using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a> static method, which can handle a variety of input types.",
      "parameters": {
        "year": "A number, truncated to an integer, representing the year in the ISO calendar system.",
        "month": "A number, truncated to an integer, representing the month in the ISO calendar system.",
        "day": "A number, truncated to an integer, representing the day of the month in the ISO calendar system.",
        "calendar": "A string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a> to use. Note that irrespective of the <code>calendar</code>, the <code>year</code>, <code>month</code>, and <code>day</code> must be in the ISO 8601 calendar system. Defaults to <code>\"iso8601\"</code>."
      },
      "returns": "A new <code>Temporal.PlainDate</code> object, representing the date specified by <code>year</code>, <code>month</code>, <code>day</code> (in the ISO calendar), interpreted in the calendar system specified by <code>calendar</code>.",
      "throws": {
        "TypeError": "Thrown if <code>calendar</code> is not a string or <code>undefined</code>.",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>year</code>, <code>month</code>, or <code>day</code> is not a finite number.</li>\n<li>The <code>year</code>, <code>month</code>, and <code>day</code> combination does not represent a valid date in the ISO calendar system, or is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n<li><code>calendar</code> is not a valid calendar identifier.</li>\n</ul>"
      }
    },
    "temporal.plaindate.since": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/since",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>since()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from another date (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a>) to this date. The duration is positive if the other date is before this date, and negative if after.\n<p>This method does <code>this - other</code>. To do <code>other - this</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/until\"><code>until()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instance representing a date to subtract from this date. It is converted to a <code>Temporal.PlainDate</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a>. It must have the same calendar as <code>this</code>.",
        "options": "An object containing the options for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/round\"><code>Temporal.Duration.prototype.round()</code></a>, which includes <code>largestUnit</code>, <code>roundingIncrement</code>, <code>roundingMode</code>, and <code>smallestUnit</code>. <code>largestUnit</code> and <code>smallestUnit</code> only accept the units: <code>\"years\"</code>, <code>\"months\"</code>, <code>\"weeks\"</code>, <code>\"days\"</code>, or their singular forms. For <code>largestUnit</code>, the default value <code>\"auto\"</code> means <code>\"days\"</code> or <code>smallestUnit</code>, whichever is greater. For <code>smallestUnit</code>, the default value is <code>\"days\"</code>. The current date is used as the <code>relativeTo</code> option. Note that using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">units larger than <code>\"days\"</code></a> may make the duration not portable to other calendars or dates."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration <em>since</em> <code>other</code> to this date. The duration is positive if <code>other</code> is before this date, and negative if after.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>other</code> has a different calendar than <code>this</code>.</li>\n<li>Any of the options is invalid.</li>\n</ul>"
      }
    },
    "temporal.plaindate.subtract": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/subtract",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>subtract()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <code>Temporal.PlainDate</code> object representing this date moved backward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).\n<p>If you want to subtract two dates and get a duration, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/since\"><code>since()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/until\"><code>until()</code></a> instead.",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to subtract from this date. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDate</code> object representing the date specified by the original <code>PlainDate</code>, minus the duration.",
      "throws": {
        "RangeError": "Thrown if the result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.plaindate.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/tojson",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a string representing this date in the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#rfc_9557_format\">RFC 9557 format</a> as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/toString\"><code>toString()</code></a>. It is intended to be implicitly called by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.",
      "returns": "A string representing the given date in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#rfc_9557_format\">RFC 9557 format</a>, with the calendar annotation included if it is not <code>\"iso8601\"</code>."
    },
    "temporal.plaindate.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/tolocalestring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a string with a language-sensitive representation of this date. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. If this date's calendar is not <code>\"iso8601\"</code>, the <code>calendar</code> option must be provided with the same value; otherwise, if this date's calendar is <code>\"iso8601\"</code>, the <code>calendar</code> option can be any value. Regarding the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#date-time_component_options\">date-time component options</a> and the style shortcuts (<code>dateStyle</code> and <code>timeStyle</code>), the options should follow one of these forms:\n<ul>\n<li>Provide none of them: <code>year</code>, <code>month</code>, and <code>day</code> will default to <code>\"numeric\"</code>.</li>\n<li>Provide <code>dateStyle</code> only: it expands to <code>weekday</code>, <code>era</code>, <code>year</code>, <code>month</code>, and <code>day</code> formats.</li>\n<li>Provide some date-time component options, where at least one of them is a date option (<code>weekday</code>, <code>year</code>, <code>month</code>, <code>day</code>). Only the specified date components will be included in the output.</li>\n</ul>"
      },
      "returns": "A string representing the given date according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(date)</code>, where <code>options</code> has been normalized as described above.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if any of the options is not of the expected type."
      }
    },
    "temporal.plaindate.toplaindatetime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/toplaindatetime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainDateTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object representing this date and a supplied time in the same calendar system.",
      "parameters": {
        "plainTime": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instance representing the time component of the resulting <code>PlainDateTime</code>. It is converted to a <code>Temporal.PlainTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>. Defaults to <code>\"00:00:00\"</code>."
      },
      "returns": "A new <code>Temporal.PlainDateTime</code> object representing the date and time specified by this date and <code>plainTime</code>, interpreted in the calendar system of this date."
    },
    "temporal.plaindate.toplainmonthday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/toplainmonthday",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainMonthDay()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> object representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode\"><code>monthCode</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/day\"><code>day</code></a> of this date in the same calendar system.\n<p>Note that <code>PlainMonthDay</code> objects do not have a <code>month</code> component, because months with the same name can have different <code>month</code> indexes in different years due to leap months.",
      "returns": "A new <code>Temporal.PlainMonthDay</code> object representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode\"><code>monthCode</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/day\"><code>day</code></a> of this date in the same calendar system."
    },
    "temporal.plaindate.toplainyearmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/toplainyearmonth",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainYearMonth()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> object representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year\"><code>year</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/month\"><code>month</code></a> of this date in the same calendar system.",
      "returns": "A new <code>Temporal.PlainYearMonth</code> object representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year\"><code>year</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/month\"><code>month</code></a> of this date in the same calendar system."
    },
    "temporal.plaindate.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/tostring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a string representing this date in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#rfc_9557_format\">RFC 9557 format</a>.",
      "parameters": {
        "options": "An object containing the following property:\n<dl>\n<dt id=\"calendarname\"><a href=\"#calendarname\"><code>calendarName</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Whether to show the calendar annotation (<code>[u-ca=calendar_id]</code>) in the return value. Possible values are:\n<dl>\n<dt id=\"auto\"><a href=\"#auto\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>Include the calendar annotation if the calendar is not <code>\"iso8601\"</code>.\n</dd>\n<dt id=\"always\"><a href=\"#always\"><code>\"always\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation.\n</dd>\n<dt id=\"never\"><a href=\"#never\"><code>\"never\"</code></a></dt>\n<dd>\n<p>Never include the calendar annotation. This makes the returned string not recoverable to the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instance, although the date value still remains the same.\n</dd>\n<dt id=\"critical\"><a href=\"#critical\"><code>\"critical\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation, and add a critical flag: <code>[!u-ca=calendar_id]</code>. Useful when sending the string to certain systems, but not useful for Temporal itself.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A string in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#rfc_9557_format\">RFC 9557 format</a> representing this date. The calendar annotation is included as specified.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if <code>options</code> is not an object or <code>undefined</code>."
      }
    },
    "temporal.plaindate.tozoneddatetime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/tozoneddatetime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toZonedDateTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object representing this date, a supplied time, and a supplied time zone, in the same calendar system.",
      "parameters": {
        "timeZone": "Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the <a href=\"#timezone_2\"><code>timeZone</code></a> option. This is a convenience overload, so <code>toZonedDateTime(timeZone)</code> is equivalent to <code>toZonedDateTime({ timeZone })</code>, where <code>timeZone</code> is a string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a>. This overload is chosen when the first argument is not an object, or the object's <code>timeZone</code> property is <code>undefined</code> (because <code>ZonedDateTime</code> instances have a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/timeZoneId\"><code>timeZoneId</code></a> property instead).",
        "info": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"plaintime\"><a href=\"#plaintime\"><code>plainTime</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instance representing the time component of the resulting <code>ZonedDateTime</code>. It is converted to a <code>Temporal.PlainTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>. Defaults to the first valid time in this time zone on this calendar date, which is usually <code>\"00:00:00\"</code>, but may be different if, for example, daylight saving time skips midnight.\n</dd>\n<dt id=\"timezone_2\"><a href=\"#timezone_2\"><code>timeZone</code></a></dt>\n<dd>\n<p>Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to use. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information).\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.ZonedDateTime</code> object representing the date and time specified by this date, <code>plainTime</code>, and <code>timeZone</code>, interpreted in the calendar system of this date.\n<p>In the case of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#ambiguity_and_gaps_from_local_time_to_utc_time\">ambiguities</a>, the <code>compatible</code> behavior is always used: if the time falls into a gap, we move forward by the gap length; if the time falls into an ambiguity, we choose the earlier of the two possibilities. This means the resulting <code>ZonedDateTime</code> may have a potentially different date or time than the input.",
      "throws": {
        "TypeError": "Thrown if <code>timeZone</code> is not a string or a <code>Temporal.ZonedDateTime</code> instance.",
        "RangeError": "Thrown if <code>timeZone</code> is a string that is not a valid time zone identifier."
      }
    },
    "temporal.plaindate.until": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/until",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>until()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this date to another date (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a>). The duration is positive if the other date is after this date, and negative if before.\n<p>This method does <code>other - this</code>. To do <code>this - other</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/since\"><code>since()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instance representing a date to subtract this date from. It is converted to a <code>Temporal.PlainDate</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a>. It must have the same calendar as <code>this</code>.",
        "options": "The same options as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/since#options\"><code>since()</code></a>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this date <em>until</em> <code>other</code>. The duration is positive if <code>other</code> is after this date, and negative if before.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>other</code> has a different calendar than <code>this</code>.</li>\n<li>Any of the options is invalid.</li>\n</ul>"
      }
    },
    "temporal.plaindate.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/valueof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, which prevents <code>Temporal.PlainDate</code> instances from being <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_coercion\">implicitly converted to primitives</a> when used in arithmetic or comparison operations.",
      "returns": "None.",
      "throws": {
        "TypeError": "Always thrown."
      }
    },
    "temporal.plaindate.weekofyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/weekofyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>weekOfYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a positive integer representing the 1-based week index in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/yearOfWeek\"><code>yearOfWeek</code></a> of this date, or <code>undefined</code> if the calendar does not have a well-defined week system. The first week of the year is <code>1</code>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Note that for ISO 8601, the first and last few days of the year may be attributed to the last week of the previous year or the first week of the next year. Namely, if a week crosses two years, then it belongs to the year that has the majority of its days. To get the year that the <code>weekOfYear</code> belongs to, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/yearOfWeek\"><code>yearOfWeek</code></a> property, not the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year\"><code>year</code></a> property.\n<p>The set accessor of <code>weekOfYear</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.PlainDate</code> object with the desired new <code>weekOfYear</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/add\"><code>add()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/subtract\"><code>subtract()</code></a> method with the appropriate number of <code>weeks</code>."
    },
    "temporal.plaindate.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/with",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <code>Temporal.PlainDate</code> object representing this date with some fields replaced by new values. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the date's fields.\n<p>To replace the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/calendarId\"><code>calendarId</code></a> property, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/withCalendar\"><code>withCalendar()</code></a> method instead.",
      "parameters": {
        "info": "An object containing at least one of the properties recognized by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a> (except <code>calendar</code>): <code>day</code>, <code>era</code> and <code>eraYear</code>, <code>month</code>, <code>monthCode</code>, <code>year</code>. Unspecified properties use the values from the original date. You only need to provide one of <code>month</code> or <code>monthCode</code>, and one of <code>era</code> and <code>eraYear</code> or <code>year</code>, and the other will be updated accordingly.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDate</code> object, where the fields specified in <code>info</code> that are not <code>undefined</code> are replaced by the corresponding values, and the rest of the fields are copied from the original date.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>The result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.plaindate.withcalendar": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/withcalendar",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>withCalendar()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns a new <code>Temporal.PlainDate</code> object representing this date interpreted in the new calendar system. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the date's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/calendarId\"><code>calendarId</code></a> property.\n<p>To replace the date component properties, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/with\"><code>with()</code></a> method instead.",
      "parameters": {
        "calendar": "A string that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/calendarId\"><code>calendarId</code></a> property."
      },
      "returns": "A new <code>Temporal.PlainDate</code> object, representing the date specified by the original <code>PlainDate</code>, interpreted in the new calendar system.",
      "throws": {
        "TypeError": "Thrown if <code>calendar</code> is not a string.",
        "RangeError": "Thrown if <code>calendar</code> is not a valid calendar identifier."
      }
    },
    "temporal.plaindate.year": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/year",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>year</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns an integer representing the number of years of this date relative to the start of a calendar-specific epoch year. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>This property has the same function as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/era\"><code>era</code></a>/<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/eraYear\"><code>eraYear</code></a> pair as a unique identifier of a year in a calendar. Usually year 1 is either the first year of the latest era or the ISO 8601 year <code>0001</code>. Because <code>year</code> is relative to the start of the epoch year, not the epoch date, if the epoch is in the middle of the year, that year will have the same value before and after the start date of the era.\n<p>The set accessor of <code>year</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDate</code> object with the desired new value."
    },
    "temporal.plaindate.yearofweek": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindate/yearofweek",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>yearOfWeek</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> instances returns an integer representing the year to be paired with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/weekOfYear\"><code>weekOfYear</code></a> of this date, or <code>undefined</code> if the calendar does not have a well-defined week system. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Usually this is the year of the date, but for ISO 8601, the first and last few days of the year may be attributed to the last week of the previous year or the first week of the next year, causing the <code>yearOfWeek</code> to differ by 1. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/weekOfYear\"><code>weekOfYear</code></a> for more details.\n<p>The set accessor of <code>yearOfWeek</code> is <code>undefined</code>. You cannot change this property directly."
    },
    "temporal.plaindatetime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainDateTime</code></strong> object represents a date (calendar date) and time (wall-clock time) without a time zone. It is fundamentally represented as a combination of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\">date</a> (with an associated calendar system) and a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\">time</a>."
    },
    "temporal.plaindatetime.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/add",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>add()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <code>Temporal.PlainDateTime</code> object representing this date-time moved forward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to add to this date-time. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDateTime</code> object representing the date-time specified by the original <code>PlainDateTime</code>, plus the duration.",
      "throws": {
        "RangeError": "Thrown if the result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.plaindatetime.calendarid": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/calendarid",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>calendarId</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a> used to interpret the internal ISO 8601 date.\n<p>For a list of commonly supported values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars\"><code>Intl.Locale.prototype.getCalendars()</code></a>.\n<p>The set accessor of <code>calendarId</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/withCalendar\"><code>withCalendar()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value."
    },
    "temporal.plaindatetime.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/compare",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainDateTime.compare()</code></strong> static method returns a number (-1, 0, or 1) indicating whether the first date-time comes before, is the same as, or comes after the second date-time. Equivalent to first comparing their dates, then comparing their times if the dates are the same.",
      "parameters": {
        "dateTime1": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instance representing the first date-time to compare. It is converted to a <code>Temporal.PlainDateTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/from\"><code>Temporal.PlainDateTime.from()</code></a>.",
        "dateTime2": "The second date-time to compare, converted to a <code>Temporal.PlainDateTime</code> object using the same algorithm as <code>dateTime1</code>."
      },
      "returns": "Returns <code>-1</code> if <code>dateTime1</code> comes before <code>dateTime2</code>, <code>0</code> if they are the same, and <code>1</code> if <code>dateTime1</code> comes after <code>dateTime2</code>. They are compared by their underlying date and time values, ignoring their calendars."
    },
    "temporal.plaindatetime.day": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/day",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>day</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a positive integer representing the 1-based day index in the month of this date, which is the same day number you would see on a calendar. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>day</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/day\"><code>Temporal.PlainDate.prototype.day</code></a>."
    },
    "temporal.plaindatetime.dayofweek": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/dayofweek",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>dayOfWeek</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a positive integer representing the 1-based day index in the week of this date. Days in a week are numbered sequentially from <code>1</code> to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/daysInWeek\"><code>daysInWeek</code></a>, with each number mapping to its name. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>dayOfWeek</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.PlainDateTime</code> object with the desired new <code>dayOfWeek</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/add\"><code>add()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/subtract\"><code>subtract()</code></a> method with the appropriate number of <code>days</code>.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/dayOfWeek\"><code>Temporal.PlainDate.prototype.dayOfWeek</code></a>."
    },
    "temporal.plaindatetime.dayofyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/dayofyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>dayOfYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a positive integer representing the 1-based day index in the year of this date. The first day of this year is <code>1</code>, and the last day is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/daysInYear\"><code>daysInYear</code></a>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>dayOfYear</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.PlainDateTime</code> object with the desired new <code>dayOfYear</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/add\"><code>add()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/subtract\"><code>subtract()</code></a> method with the appropriate number of <code>days</code>.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/dayOfYear\"><code>Temporal.PlainDate.prototype.dayOfYear</code></a>."
    },
    "temporal.plaindatetime.daysinmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/daysinmonth",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInMonth</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a positive integer representing the number of days in the month of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>daysInMonth</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInMonth\"><code>Temporal.PlainDate.prototype.daysInMonth</code></a>."
    },
    "temporal.plaindatetime.daysinweek": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/daysinweek",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInWeek</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a positive integer representing the number of days in the week of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>daysInWeek</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInWeek\"><code>Temporal.PlainDate.prototype.daysInWeek</code></a>."
    },
    "temporal.plaindatetime.daysinyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/daysinyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a positive integer representing the number of days in the year of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>daysInYear</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInYear\"><code>Temporal.PlainDate.prototype.daysInYear</code></a>."
    },
    "temporal.plaindatetime.equals": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/equals",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>equals()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns <code>true</code> if this date-time is equivalent in value to another date-time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDateTime.from()</code></a>), and <code>false</code> otherwise. They are compared both by their date and time values and their calendars, so two date-times from different calendars may be considered equal by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/compare\"><code>Temporal.PlainDateTime.compare()</code></a> but not by <code>equals()</code>.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instance representing the other date-time to compare. It is converted to a <code>Temporal.PlainDateTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/from\"><code>Temporal.PlainDateTime.from()</code></a>."
      },
      "returns": "<code>true</code> if this date-time is equal to <code>other</code> both in their date/time value and their calendar, <code>false</code> otherwise."
    },
    "temporal.plaindatetime.era": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/era",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>era</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a calendar-specific lowercase string representing the era of this date, or <code>undefined</code> if the calendar does not use eras (e.g., ISO 8601). <code>era</code> and <code>eraYear</code> together uniquely identify a year in a calendar, in the same way that <code>year</code> does. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>era</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/era\"><code>Temporal.PlainDate.prototype.era</code></a>."
    },
    "temporal.plaindatetime.erayear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/erayear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>eraYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a non-negative integer representing the year of this date within the era, or <code>undefined</code> if the calendar does not use eras (e.g., ISO 8601). The year index usually starts from 1 (more common) or 0, and years in an era can decrease with time (e.g., Gregorian BCE). <code>era</code> and <code>eraYear</code> together uniquely identify a year in a calendar, in the same way that <code>year</code> does. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>eraYear</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/eraYear\"><code>Temporal.PlainDate.prototype.eraYear</code></a>."
    },
    "temporal.plaindatetime.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/from",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainDateTime.from()</code></strong> static method creates a new <code>Temporal.PlainDateTime</code> object from another <code>Temporal.PlainDateTime</code> object, an object with date and time properties, or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime#rfc_9557_format\">RFC 9557</a> string.",
      "parameters": {
        "info": "One of the following:\n<ul>\n<li>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instance, which creates a copy of the instance.</li>\n<li>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime#rfc_9557_format\">RFC 9557</a> string containing a date, optionally a time, and optionally a calendar.</li>\n<li>An object containing properties that are recognized by either <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a> (<code>calendar</code>, <code>era</code>, <code>eraYear</code>, <code>year</code>, <code>month</code>, <code>monthCode</code>, <code>day</code>) or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a> (<code>hour</code>, <code>minute</code>, <code>second</code>, <code>millisecond</code>, <code>microsecond</code>, <code>nanosecond</code>). The info should explicitly specify a year (as <code>year</code> or <code>era</code> and <code>eraYear</code>), a month (as <code>month</code> or <code>monthCode</code>), and a day; others are optional and will be set to their default values.</li>\n</ul>",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range (when using the object <code>info</code>). Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDateTime</code> object, representing the date and time specified by <code>info</code> in the specified <code>calendar</code>.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object or a string.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n<li>The provided properties are insufficient to unambiguously determine a date. You usually need to provide a <code>year</code> (or <code>era</code> and <code>eraYear</code>), a <code>month</code> (or <code>monthCode</code>), and a <code>day</code>.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>The info is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.plaindatetime.hour": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/hour",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>hour</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a integer from 0 to 23 representing the hour component of this time.\n<p>The set accessor of <code>hour</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/hour\"><code>Temporal.PlainTime.prototype.hour</code></a>."
    },
    "temporal.plaindatetime.inleapyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/inleapyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>inLeapYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a boolean indicating whether this date is in a leap year. A leap year is a year that has more days (due to a leap day or leap month) than a common year. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>inLeapYear</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/inLeapYear\"><code>Temporal.PlainDate.prototype.inLeapYear</code></a>."
    },
    "temporal.plaindatetime.microsecond": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/microsecond",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>microsecond</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a integer from 0 to 999 representing the microsecond (10<sup>-6</sup> second) component of this time.\n<p>The set accessor of <code>microsecond</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/microsecond\"><code>Temporal.PlainTime.prototype.microsecond</code></a>."
    },
    "temporal.plaindatetime.millisecond": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/millisecond",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>millisecond</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a integer from 0 to 999 representing the millisecond (10<sup>-3</sup> second) component of this time.\n<p>The set accessor of <code>millisecond</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/millisecond\"><code>Temporal.PlainTime.prototype.millisecond</code></a>."
    },
    "temporal.plaindatetime.minute": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/minute",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>minute</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a integer from 0 to 59 representing the minute component of this time.\n<p>The set accessor of <code>minute</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/minute\"><code>Temporal.PlainTime.prototype.minute</code></a>."
    },
    "temporal.plaindatetime.month": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/month",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>month</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a positive integer representing the 1-based month index in the year of this date. The first month of this year is <code>1</code>, and the last month is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/monthsInYear\"><code>monthsInYear</code></a>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>month</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/month\"><code>Temporal.PlainDate.prototype.month</code></a>."
    },
    "temporal.plaindatetime.monthcode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/monthcode",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>monthCode</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a calendar-specific string representing the month of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Usually it is <code>M</code> plus a two-digit month number. For leap months, it is the previous month's code followed by <code>L</code> (even if it's conceptually a derivative of the following month; for example, in the Hebrew calendar, Adar I has code <code>M05L</code> but Adar II has code <code>M06</code>). If the leap month is the first month of the year, the code is <code>M00L</code>.\n<p>The set accessor of <code>monthCode</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode\"><code>Temporal.PlainDate.prototype.monthCode</code></a>."
    },
    "temporal.plaindatetime.monthsinyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/monthsinyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>monthsInYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a positive integer representing the number of months in the year of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>monthsInYear</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthsInYear\"><code>Temporal.PlainDate.prototype.monthsInYear</code></a>."
    },
    "temporal.plaindatetime.nanosecond": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/nanosecond",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>nanosecond</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a integer from 0 to 999 representing the nanosecond (10<sup>-9</sup> second) component of this time.\n<p>The set accessor of <code>nanosecond</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/nanosecond\"><code>Temporal.PlainTime.prototype.nanosecond</code></a>."
    },
    "temporal.plaindatetime.plaindatetime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/plaindatetime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainDateTime()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> objects.\n<p>This constructor allows you to create instances by directly supplying the underlying data. Like all other <code>Temporal</code> classes, you should usually construct <code>Temporal.PlainDateTime</code> objects using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/from\"><code>Temporal.PlainDateTime.from()</code></a> static method, which can handle a variety of input types.",
      "parameters": {
        "year": "A number, truncated to an integer, representing the year in the ISO calendar system.",
        "month": "A number, truncated to an integer, representing the month in the ISO calendar system.",
        "day": "A number, truncated to an integer, representing the day of the month in the ISO calendar system.",
        "hour": "A number, truncated to an integer, representing the hour component.",
        "minute": "A number, truncated to an integer, representing the minute component.",
        "second": "A number, truncated to an integer, representing the second component.",
        "millisecond": "A number, truncated to an integer, representing the millisecond component.",
        "microsecond": "A number, truncated to an integer, representing the microsecond component.",
        "nanosecond": "A number, truncated to an integer, representing the nanosecond component.",
        "calendar": "A string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a> to use. Note that irrespective of the <code>calendar</code>, the <code>year</code>, <code>month</code>, and <code>day</code> must be in the ISO 8601 calendar system. Defaults to <code>\"iso8601\"</code>."
      },
      "returns": "A new <code>Temporal.PlainDateTime</code> object, representing the date-time specified by the parameters.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>Any date-time component is not a finite number.</li>\n<li>The date-time component combination does not represent a valid date in the ISO calendar system, or is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n<li><code>calendar</code> is not a valid calendar identifier.</li>\n</ul>"
      }
    },
    "temporal.plaindatetime.round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/round",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>round()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <code>Temporal.PlainDateTime</code> object representing this date-time rounded to the given unit.",
      "parameters": {
        "smallestUnit": "A string representing the <a href=\"#smallestunit_2\"><code>smallestUnit</code></a> option. This is a convenience overload, so <code>round(smallestUnit)</code> is equivalent to <code>round({ smallestUnit })</code>, where <code>smallestUnit</code> is a string.",
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"roundingincrement\"><a href=\"#roundingincrement\"><code>roundingIncrement</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A number (truncated to an integer) representing the rounding increment in the given <code>smallestUnit</code>. Defaults to <code>1</code>. For all values of <code>smallestUnit</code> except <code>\"day\"</code>, the increment must be a divisor of the maximum value of the unit; for example, if the unit is hours, the increment must be a divisor of 24 and must not be 24 itself, which means it can be 1, 2, 3, 4, 6, 8, or 12. For <code>\"day\"</code>, the increment must be 1.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to round off the fractional part of <code>smallestUnit</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"halfExpand\"</code>.\n</dd>\n<dt id=\"smallestunit_2\"><a href=\"#smallestunit_2\"><code>smallestUnit</code></a></dt>\n<dd>\n<p>A string representing the smallest unit to include in the output. The value must be one of the following: <code>\"day\"</code>, <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"millisecond\"</code>, <code>\"microsecond\"</code>, <code>\"nanosecond\"</code>, or their plural forms. For units larger than <code>\"nanosecond\"</code>, fractional parts of the <code>smallestUnit</code> will be rounded according to the <code>roundingIncrement</code> and <code>roundingMode</code> settings.\n</dd>\n</dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object representing this date-time rounded to the given unit, where all units smaller than <code>smallestUnit</code> are zeroed out.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.plaindatetime.second": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/second",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>second</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a integer from 0 to 59 representing the second component of this time.\n<p>The set accessor of <code>second</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/second\"><code>Temporal.PlainTime.prototype.second</code></a>."
    },
    "temporal.plaindatetime.since": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/since",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>since()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from another date-time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/from\"><code>Temporal.PlainDateTime.from()</code></a>) to this date-time. The duration is positive if the other date-time is before this date-time, and negative if after.\n<p>This method does <code>this - other</code>. To do <code>other - this</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/until\"><code>until()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instance representing a date-time to subtract from this date-time. It is converted to a <code>Temporal.PlainDateTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/from\"><code>Temporal.PlainDateTime.from()</code></a>. It must have the same calendar as <code>this</code>.",
        "options": "An object containing the options for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/round\"><code>Temporal.Duration.prototype.round()</code></a>, which includes <code>largestUnit</code>, <code>roundingIncrement</code>, <code>roundingMode</code>, and <code>smallestUnit</code>. <code>largestUnit</code> and <code>smallestUnit</code> accept all possible units. For <code>largestUnit</code>, the default value <code>\"auto\"</code> means <code>\"days\"</code> or <code>smallestUnit</code>, whichever is greater. For <code>smallestUnit</code>, the default value is <code>\"nanoseconds\"</code>. The current date is used as the <code>relativeTo</code> option. Note that using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">units larger than <code>\"days\"</code></a> may make the duration not portable to other calendars or dates."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration <em>since</em> <code>other</code> to this date-time. The duration is positive if <code>other</code> is before this date-time, and negative if after.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>other</code> has a different calendar than <code>this</code>.</li>\n<li>Any of the options is invalid.</li>\n</ul>"
      }
    },
    "temporal.plaindatetime.subtract": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/subtract",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>subtract()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <code>Temporal.PlainDateTime</code> object representing this date-time moved backward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).\n<p>If you want to subtract two date-times and get a duration, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/since\"><code>since()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/until\"><code>until()</code></a> instead.",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to subtract from this date-time. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDateTime</code> object representing the date-time specified by the original <code>PlainDateTime</code>, minus the duration.",
      "throws": {
        "RangeError": "Thrown if the result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.plaindatetime.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/tojson",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a string representing this date-time in the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime#rfc_9557_format\">RFC 9557 format</a> as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/toString\"><code>toString()</code></a>. It is intended to be implicitly called by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.",
      "returns": "A string representing the given date-time in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime#rfc_9557_format\">RFC 9557 format</a>, with the calendar annotation included if it is not <code>\"iso8601\"</code>."
    },
    "temporal.plaindatetime.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/tolocalestring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a string with a language-sensitive representation of this date-time. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. If this date-time's calendar is not <code>\"iso8601\"</code>, the <code>calendar</code> option must be provided with the same value; otherwise, if this date-time's calendar is <code>\"iso8601\"</code>, the <code>calendar</code> option can be any value. Regarding the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#date-time_component_options\">date-time component options</a> and the style shortcuts (<code>dateStyle</code> and <code>timeStyle</code>), the options should follow one of these forms:\n<ul>\n<li>Provide none of them: <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, and <code>second</code> will default to <code>\"numeric\"</code>.</li>\n<li>Provide at least one of <code>dateStyle</code> or <code>timeStyle</code>: the date-time components will be set according to the specified style and the locale.</li>\n<li>Provide some date-time component options. Only the specified date-time components will be included in the output.</li>\n</ul>"
      },
      "returns": "A string representing the given date-time according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(dateTime)</code>, where <code>options</code> has been normalized as described above.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if any of the options is not of the expected type."
      }
    },
    "temporal.plaindatetime.toplaindate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/toplaindate",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object representing the date part (year, month, day) of this date-time in the same calendar system.",
      "returns": "A new <code>Temporal.PlainDate</code> object representing the date part (year, month, day) of this date-time in the same calendar system."
    },
    "temporal.plaindatetime.toplaintime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/toplaintime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> object representing the time part (hour, minute, second, and subsecond components) of this date-time.",
      "returns": "A new <code>Temporal.PlainTime</code> object representing the time part (hour, minute, second, and subsecond components) of this date-time."
    },
    "temporal.plaindatetime.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/tostring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a string representing this date-time in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime#rfc_9557_format\">RFC 9557 format</a>.",
      "parameters": {
        "options": "An object containing the following property:\n<dl>\n<dt id=\"calendarname\"><a href=\"#calendarname\"><code>calendarName</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Whether to show the calendar annotation (<code>[u-ca=calendar_id]</code>) in the return value. Possible values are:\n<dl>\n<dt id=\"auto\"><a href=\"#auto\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>Include the calendar annotation if the calendar is not <code>\"iso8601\"</code>.\n</dd>\n<dt id=\"always\"><a href=\"#always\"><code>\"always\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation.\n</dd>\n<dt id=\"never\"><a href=\"#never\"><code>\"never\"</code></a></dt>\n<dd>\n<p>Never include the calendar annotation. This makes the returned string not recoverable to the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instance, although the date value still remains the same.\n</dd>\n<dt id=\"critical\"><a href=\"#critical\"><code>\"critical\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation, and add a critical flag: <code>[!u-ca=calendar_id]</code>. Useful when sending the string to certain systems, but not useful for Temporal itself.\n</dd>\n</dl>\n</dd>\n<dt id=\"fractionalseconddigits\"><a href=\"#fractionalseconddigits\"><code>fractionalSecondDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Either an integer from 0 to 9, or the string <code>\"auto\"</code>. The default is <code>\"auto\"</code>. If <code>\"auto\"</code>, then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to round off fractional second digits beyond <code>fractionalSecondDigits</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"trunc\"</code>.\n</dd>\n<dt id=\"smallestunit\"><a href=\"#smallestunit\"><code>smallestUnit</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the smallest unit to include in the output. Possible values are <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"millisecond\"</code>, <code>\"microsecond\"</code>, and <code>\"nanosecond\"</code>, or their plural forms, which (except <code>\"minute\"</code>) are equivalent to <code>fractionalSecondDigits</code> values of <code>0</code>, <code>3</code>, <code>6</code>, <code>9</code>, respectively. If specified, then <code>fractionalSecondDigits</code> is ignored.\n</dd>\n</dl>"
      },
      "returns": "A string in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime#rfc_9557_format\">RFC 9557 format</a> representing this date-time. The calendar annotation is included as specified.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if <code>options</code> is not an object or <code>undefined</code>."
      }
    },
    "temporal.plaindatetime.tozoneddatetime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/tozoneddatetime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toZonedDateTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the same date-time as this plain date-time, but in the specified time zone.",
      "parameters": {
        "timeZone": "Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to use. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information).",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"disambiguation\"><a href=\"#disambiguation\"><code>disambiguation</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying what to do when this plain time corresponds to zero or more than one instants in the time zone, usually because of daylight saving time shifts. Possible values are <code>\"compatible\"</code>, <code>\"earlier\"</code>, <code>\"later\"</code>, and <code>\"reject\"</code>. Defaults to <code>\"compatible\"</code>. For more information about these values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#ambiguity_and_gaps_from_local_time_to_utc_time\">ambiguity and gaps from local time to UTC time</a>.\n</dd>\n</dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the same date-time as this plain date-time, but in the specified time zone.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>Any of the options is invalid.</li>\n<li><code>timeZone</code> is not a valid time zone identifier.</li>\n<li>The wall-clock time is ambiguous in the time zone, and <code>options.disambiguation</code> is set to <code>\"reject\"</code>.</li>\n</ul>",
        "TypeError": "Thrown if any of the arguments are not of the expected type."
      }
    },
    "temporal.plaindatetime.until": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/until",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>until()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this date-time to another date-time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/from\"><code>Temporal.PlainDateTime.from()</code></a>). The duration is positive if the other date-time is after this date-time, and negative if before.\n<p>This method does <code>other - this</code>. To do <code>this - other</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/since\"><code>since()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instance representing a date-time to subtract this date-time from. It is converted to a <code>Temporal.PlainDateTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/from\"><code>Temporal.PlainDateTime.from()</code></a>. It must have the same calendar as <code>this</code>.",
        "options": "The same options as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/since#options\"><code>since()</code></a>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this date-time <em>until</em> <code>other</code>. The duration is positive if <code>other</code> is after this date-time, and negative if before.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>other</code> has a different calendar than <code>this</code>.</li>\n<li>Any of the options is invalid.</li>\n</ul>"
      }
    },
    "temporal.plaindatetime.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/valueof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, which prevents <code>Temporal.PlainDateTime</code> instances from being <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_coercion\">implicitly converted to primitives</a> when used in arithmetic or comparison operations.",
      "returns": "None.",
      "throws": {
        "TypeError": "Always thrown."
      }
    },
    "temporal.plaindatetime.weekofyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/weekofyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>weekOfYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a positive integer representing the 1-based week index in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/yearOfWeek\"><code>yearOfWeek</code></a> of this date, or <code>undefined</code> if the calendar does not have a well-defined week system. The first week of the year is <code>1</code>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>weekOfYear</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.PlainDateTime</code> object with the desired new <code>weekOfYear</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/add\"><code>add()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/subtract\"><code>subtract()</code></a> method with the appropriate number of <code>weeks</code>.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/weekOfYear\"><code>Temporal.PlainDate.prototype.weekOfYear</code></a>."
    },
    "temporal.plaindatetime.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/with",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <code>Temporal.PlainDateTime</code> object representing this date-time with some fields replaced by new values. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the date-time's fields.\n<p>To replace the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/calendarId\"><code>calendarId</code></a> property, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/withCalendar\"><code>withCalendar()</code></a> method instead.",
      "parameters": {
        "info": "An object containing at least one of the properties recognized by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/from\"><code>Temporal.PlainDateTime.from()</code></a> (except <code>calendar</code>): <code>day</code>, <code>era</code> and <code>eraYear</code>, <code>hour</code>, <code>microsecond</code>, <code>millisecond</code>, <code>minute</code>, <code>month</code>, <code>monthCode</code>, <code>nanosecond</code>, <code>second</code>, <code>year</code>. Unspecified properties use the values from the original date-time. You only need to provide one of <code>month</code> or <code>monthCode</code>, and one of <code>era</code> and <code>eraYear</code> or <code>year</code>, and the other will be updated accordingly.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDateTime</code> object, where the fields specified in <code>info</code> that are not <code>undefined</code> are replaced by the corresponding values, and the rest of the fields are copied from the original date-time.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>The result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.plaindatetime.withcalendar": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/withcalendar",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>withCalendar()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <code>Temporal.PlainDateTime</code> object representing this date-time interpreted in the new calendar system. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the date-time's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/calendarId\"><code>calendarId</code></a> property.\n<p>To replace the date-time component properties, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method instead.",
      "parameters": {
        "calendar": "A string that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/calendarId\"><code>calendarId</code></a> property."
      },
      "returns": "A new <code>Temporal.PlainDateTime</code> object, representing the date-time specified by the original <code>PlainDateTime</code>, interpreted in the new calendar system.",
      "throws": {
        "TypeError": "Thrown if <code>calendar</code> is not a string.",
        "RangeError": "Thrown if <code>calendar</code> is not a valid calendar identifier."
      }
    },
    "temporal.plaindatetime.withplaintime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/withplaintime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>withPlainTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns a new <code>Temporal.PlainDateTime</code> object representing this date-time with the time part entirely replaced by the new time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>)\n<p>This method will replace all time properties, defaulting to <code>0</code> where properties are unspecified. If you only want to replace some of the time properties, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method instead.",
      "parameters": {
        "plainTime": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instance representing the new time. It is converted to a <code>Temporal.PlainTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>. If not specified, the time part is set to <code>00:00:00</code>."
      },
      "returns": "A new <code>Temporal.PlainDateTime</code> object, with the date part copied from the original date-time and the time part replaced by the new time."
    },
    "temporal.plaindatetime.year": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/year",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>year</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns an integer representing the number of years of this date relative to the start of a calendar-specific epoch year. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>year</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year\"><code>Temporal.PlainDate.prototype.year</code></a>."
    },
    "temporal.plaindatetime.yearofweek": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaindatetime/yearofweek",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>yearOfWeek</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instances returns an integer representing the year to be paired with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/weekOfYear\"><code>weekOfYear</code></a> of this date, or <code>undefined</code> if the calendar does not have a well-defined week system. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>yearOfWeek</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/yearOfWeek\"><code>Temporal.PlainDate.prototype.yearOfWeek</code></a>."
    },
    "temporal.plainmonthday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainMonthDay</code></strong> object represents the month and day of a calendar date, without a year or time zone; for example, an event on a calendar that recurs every year and happens during the whole day. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system. The year is used to disambiguate the month-day in non-ISO calendar systems."
    },
    "temporal.plainmonthday.calendarid": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/calendarid",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>calendarId</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a> used to interpret the internal ISO 8601 date.\n<p>For a list of commonly supported values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars\"><code>Intl.Locale.prototype.getCalendars()</code></a>.\n<p>The set accessor of <code>calendarId</code> is <code>undefined</code>. You cannot change this property directly. There's no obvious way to create a new <code>Temporal.PlainMonthDay</code> object with a different calendar that represents the same month-day, so you need to convert it to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object first using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/toPlainDate\"><code>toPlainDate()</code></a>, change the calendar, and then convert it back."
    },
    "temporal.plainmonthday.day": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/day",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>day</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances returns a positive integer representing the 1-based day index in the month of this date, which is the same day number you would see on a calendar. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>day</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainMonthDay</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/day\"><code>Temporal.PlainDate.prototype.day</code></a>."
    },
    "temporal.plainmonthday.equals": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/equals",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>equals()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances returns <code>true</code> if this month-day is equivalent in value to another month-day (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/from\"><code>Temporal.PlainMonthDay.from()</code></a>), and <code>false</code> otherwise. They are compared both by their underlying ISO date values and their calendars.\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>PlainMonthDay</code> objects keep track of a reference ISO year, which is also used in the comparison. This year is automatically set when using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/from\"><code>Temporal.PlainMonthDay.from()</code></a> method, but can be set manually using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/PlainMonthDay\"><code>Temporal.PlainMonthDay()</code></a> constructor, causing two equivalent month-days to be considered different if they have different reference years. For this reason, you should avoid using the constructor directly and prefer the <code>from()</code> method.\n</div>",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instance representing the other month-day to compare. It is converted to a <code>Temporal.PlainMonthDay</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/from\"><code>Temporal.PlainMonthDay.from()</code></a>."
      },
      "returns": "<code>true</code> if this month-day is equal to <code>other</code> both in their date value and their calendar, <code>false</code> otherwise."
    },
    "temporal.plainmonthday.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/from",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainMonthDay.from()</code></strong> static method creates a new <code>Temporal.PlainMonthDay</code> object from another <code>Temporal.PlainMonthDay</code> object, an object with month and day properties, or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay#rfc_9557_format\">RFC 9557</a> string.",
      "parameters": {
        "info": "One of the following:\n<ul>\n<li>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instance, which creates a copy of the instance.\n</li>\n<li>\n<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay#rfc_9557_format\">RFC 9557</a> string containing a date and optionally a calendar. If the calendar is not <code>iso8601</code>, a year is required.\n</li>\n<li>\n<p>An object containing the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"calendar\"><a href=\"#calendar\"><code>calendar</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/calendarId\"><code>calendarId</code></a> property. Defaults to <code>\"iso8601\"</code>. All other properties are interpreted in this calendar system (unlike the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/PlainMonthDay\"><code>Temporal.PlainMonthDay()</code></a> constructor, which interprets the values in the ISO calendar system).\n</dd>\n<dt id=\"day\"><a href=\"#day\"><code>day</code></a></dt>\n<dd>\n<p>An integer that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/day\"><code>day</code></a> property. Must be positive regardless of the <code>overflow</code> option.\n</dd>\n<dt id=\"era\"><a href=\"#era\"><code>era</code> and <code>eraYear</code></a></dt>\n<dd>\n<p>A string and an integer that can be used instead of <code>year</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/era\"><code>era</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/eraYear\"><code>eraYear</code></a> of <code>PlainDate</code>. Are only used if the calendar system has eras. <code>era</code> and <code>eraYear</code> must be provided simultaneously. If <code>month</code> is specified, at least one of <code>era</code>+<code>eraYear</code> or <code>year</code> must be provided. If all of <code>era</code>, <code>eraYear</code>, and <code>year</code> are provided, they must be consistent.\n</dd>\n<dt id=\"month\"><a href=\"#month\"><code>month</code></a></dt>\n<dd>\n<p>A positive integer that can be used instead of <code>monthCode</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/month\"><code>month</code></a> of <code>PlainDate</code>. Must be positive regardless of the <code>overflow</code> option. If <code>month</code> is provided, and the calendar is not <code>iso8601</code>, then <code>year</code> (or <code>era</code> + <code>eraYear</code> as a substitution) must be provided too, because the same <code>month</code> may map to multiple possible <code>monthCode</code> values in different years. At least one of <code>month</code> or <code>monthCode</code> must be provided. If both <code>month</code> and <code>monthCode</code> are provided, they must be consistent.\n</dd>\n<dt id=\"monthcode\"><a href=\"#monthcode\"><code>monthCode</code></a></dt>\n<dd>\n<p>Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/monthCode\"><code>monthCode</code></a> property. At least one of <code>month</code> or <code>monthCode</code> must be provided. If both <code>month</code> and <code>monthCode</code> are provided, they must be consistent.\n</dd>\n<dt id=\"year\"><a href=\"#year\"><code>year</code></a></dt>\n<dd>\n<p>An integer used to disambiguate <code>month</code> if provided, because for some calendars, the same <code>month</code> can mean different <code>monthCode</code> in different years. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year\"><code>year</code></a> of <code>PlainDate</code>. If a year is provided, then the <code>overflow</code> option validates the month-day in the given year, not just any year. If <code>month</code> is specified, at least one of <code>era</code>+<code>eraYear</code> or <code>year</code> must be provided. If all of <code>era</code>, <code>eraYear</code>, and <code>year</code> are provided, they must be consistent.\n</dd>\n</dl>\n</li>\n</ul>",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range (when using the object <code>info</code>). Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainMonthDay</code> object, representing the month and day specified by <code>info</code> in the specified <code>calendar</code>.\n<p>Each <code>PlainMonthDay</code> stores a whole ISO 8601 date internally, which has the same month-day in the target calendar as what's exposed. The reference year is visible when stringifying with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/toString\"><code>toString()</code></a>, which outputs an ISO date. The reference year is chosen arbitrarily but consistently (that is, every <code>(monthCode, day)</code> pair always maps to the same ISO reference year). It does not use the year provided in the input. Instead, the reference year is chosen by finding the latest date before December 31, 1972 that has the same month-day in the target calendar, or the earliest date after December 31, 1972 if no such date exists.\n<p>For example, for Gregorian-derived calendars, the reference year is 1972. For the Hebrew calendar, the reference year is 1972 in the Gregorian calendar, but if the month is Adar I (<code>M05L</code>), which is a leap month, the reference year is 1970 (5730 in Hebrew calendar) instead, because the next leap year is 1973 (5733 in Hebrew calendar), which is after 1972.\n<p>This reference year canonicalization ensures that <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/equals\"><code>equals()</code></a> can directly compare the underlying ISO dates without extra computation.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object or a string.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n<li>The provided properties are insufficient to unambiguously determine a date. You usually need to provide a <code>year</code> (or <code>era</code> and <code>eraYear</code>), a <code>month</code>, and a <code>day</code>, or a <code>monthCode</code> and a <code>day</code>.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>The info is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.plainmonthday.monthcode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/monthcode",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>monthCode</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances returns a calendar-specific string representing the month of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Usually it is <code>M</code> plus a two-digit month number. For leap months, it is the previous month's code followed by <code>L</code> (even if it's conceptually a derivative of the following month; for example, in the Hebrew calendar, Adar I has code <code>M05L</code> but Adar II has code <code>M06</code>). If the leap month is the first month of the year, the code is <code>M00L</code>.\n<p>Because <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/month\"><code>month</code></a> is an index within a year, but <code>PlainMonthDay</code> doesn't have a year, there's no <code>month</code> property for <code>PlainMonthDay</code>. Therefore, <code>monthCode</code> is used to represent the month in a way that is independent of the year.\n<p>The set accessor of <code>monthCode</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainMonthDay</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode\"><code>Temporal.PlainDate.prototype.monthCode</code></a>."
    },
    "temporal.plainmonthday.plainmonthday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/plainmonthday",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainMonthDay()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> objects.\n<p>This constructor allows you to create instances by directly supplying the underlying data. Like all other <code>Temporal</code> classes, you should usually construct <code>Temporal.PlainMonthDay</code> objects using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/from\"><code>Temporal.PlainMonthDay.from()</code></a> static method, which can handle a variety of input types.",
      "parameters": {
        "month": "A number, truncated to an integer, representing the month in the ISO calendar system.",
        "day": "A number, truncated to an integer, representing the day of the month in the ISO calendar system.",
        "calendar": "A string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a> to use. Note that irrespective of the <code>calendar</code>, the <code>referenceYear</code>, <code>month</code>, and <code>day</code> must be in the ISO 8601 calendar system. Defaults to <code>\"iso8601\"</code>.",
        "referenceYear": "A number, truncated to an integer, representing the year in the ISO calendar system. Defaults to <code>1972</code>. The same ISO month-day can represent different dates in different years with non-ISO calendars. For example, the days 2021-07-01 and 1972-07-01 may fall on different month-days in a non-Gregorian calendar, and just specifying \"07-01\" is insufficient to unambiguously determine a month-day in the target calendar. Therefore, you virtually always want to specify a <code>referenceYear</code> when using a non-ISO calendar."
      },
      "returns": "A new <code>Temporal.PlainMonthDay</code> object, representing the month-day of the date specified by <code>referenceYear</code>, <code>month</code>, <code>day</code> (in the ISO calendar), interpreted in the calendar system specified by <code>calendar</code>.",
      "throws": {
        "TypeError": "Thrown if <code>calendar</code> is not a string or <code>undefined</code>.",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>referenceYear</code>, <code>month</code>, or <code>day</code> is not a finite number.</li>\n<li>The <code>referenceYear</code>, <code>month</code>, and <code>day</code> combination does not represent a valid date in the ISO calendar system, or is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n<li><code>calendar</code> is not a valid calendar identifier.</li>\n</ul>"
      }
    },
    "temporal.plainmonthday.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/tojson",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances returns a string representing this month-day in the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay#rfc_9557_format\">RFC 9557 format</a> as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/toString\"><code>toString()</code></a>. It is intended to be implicitly called by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.",
      "returns": "A string representing the given month-day in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay#rfc_9557_format\">RFC 9557 format</a>, with the year and calendar annotation included if it is not <code>\"iso8601\"</code>."
    },
    "temporal.plainmonthday.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/tolocalestring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances returns a string with a language-sensitive representation of this month-day. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. The <code>calendar</code> option must be provided with the same value as this month-day's calendar. Regarding the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#date-time_component_options\">date-time component options</a> and the style shortcuts (<code>dateStyle</code> and <code>timeStyle</code>), the options should follow one of these forms:\n<ul>\n<li>Provide none of them: <code>month</code> and <code>day</code> will default to <code>\"numeric\"</code>.</li>\n<li>Provide <code>dateStyle</code> only: it expands to <code>month</code> and <code>day</code> formats.</li>\n<li>Provide some date-time component options, where at least one of them is <code>month</code> or <code>day</code>. Only the specified date components will be included in the output.</li>\n</ul>"
      },
      "returns": "A string representing the given month-day according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(monthDay)</code>, where <code>options</code> has been normalized as described above.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if any of the options is not of the expected type."
      }
    },
    "temporal.plainmonthday.toplaindate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/toplaindate",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object representing this month-day and a supplied year in the same calendar system.",
      "parameters": {
        "yearInfo": "An object representing the year component of the resulting <code>PlainDate</code>, containing the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"era\"><a href=\"#era\"><code>era</code> and <code>eraYear</code></a></dt>\n<dd>\n<p>A string and an integer that correspond to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/era\"><code>era</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/eraYear\"><code>eraYear</code></a> properties. Are only used if the calendar system has eras. <code>era</code> and <code>eraYear</code> must be provided simultaneously. If they are not provided, then <code>year</code> must be provided. If all of <code>era</code>, <code>eraYear</code>, and <code>year</code> are provided, they must be consistent.\n</dd>\n<dt id=\"year\"><a href=\"#year\"><code>year</code></a></dt>\n<dd>\n<p>Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year\"><code>year</code></a> property.\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDate</code> object representing the date specified by this month-day and the year in <code>yearInfo</code>, interpreted in the calendar system of this month-day.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if <code>yearInfo</code> is not an object."
      }
    },
    "temporal.plainmonthday.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/tostring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances returns a string representing this month-day in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay#rfc_9557_format\">RFC 9557 format</a>.",
      "parameters": {
        "options": "An object containing the following property:\n<dl>\n<dt id=\"calendarname\"><a href=\"#calendarname\"><code>calendarName</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Whether to show the calendar annotation (<code>[u-ca=calendar_id]</code>) in the return value. Possible values are:\n<dl>\n<dt id=\"auto\"><a href=\"#auto\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>Include the calendar annotation if the calendar is not <code>\"iso8601\"</code>. The reference year is included if the calendar is not <code>\"iso8601\"</code>.\n</dd>\n<dt id=\"always\"><a href=\"#always\"><code>\"always\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation. The reference year is always included too.\n</dd>\n<dt id=\"never\"><a href=\"#never\"><code>\"never\"</code></a></dt>\n<dd>\n<p>Never include the calendar annotation. This makes the returned string not recoverable to the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instance, although the month-day value still remains the same. The reference year is included if the calendar is not <code>\"iso8601\"</code>.\n</dd>\n<dt id=\"critical\"><a href=\"#critical\"><code>\"critical\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation, and add a critical flag: <code>[!u-ca=calendar_id]</code>. Useful when sending the string to certain systems, but not useful for Temporal itself. The reference year is always included too.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A string in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay#rfc_9557_format\">RFC 9557 format</a> representing this month-day. The calendar annotation is included as specified. The reference year is included if a calendar annotation is included or if the calendar is not <code>\"iso8601\"</code>.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if <code>options</code> is not an object or <code>undefined</code>."
      }
    },
    "temporal.plainmonthday.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/valueof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, which prevents <code>Temporal.PlainMonthDay</code> instances from being <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_coercion\">implicitly converted to primitives</a> when used in arithmetic or comparison operations.",
      "returns": "None.",
      "throws": {
        "TypeError": "Always thrown."
      }
    },
    "temporal.plainmonthday.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainmonthday/with",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay\"><code>Temporal.PlainMonthDay</code></a> instances returns a new <code>Temporal.PlainMonthDay</code> object representing this month-day with some fields replaced by new values. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the month-day's fields.\n<p>There's no obvious way to create a new <code>Temporal.PlainMonthDay</code> object that represents the same month-day in a different calendar, so to replace its <code>calendarId</code> property, you need to convert it to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/toPlainDate\"><code>toPlainDate()</code></a>, change the calendar, and then convert it back.",
      "parameters": {
        "info": "An object containing at least one of the properties recognized by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/from\"><code>Temporal.PlainMonthDay.from()</code></a> (except <code>calendar</code>): <code>day</code>, <code>era</code> and <code>eraYear</code>, <code>month</code>, <code>monthCode</code>, <code>year</code>. Unspecified properties use the values from the original month-day. You need to provide the year if and only if you provide <code>month</code> and the calendar is not <code>iso8601</code>. You only need to provide one of <code>month</code> or <code>monthCode</code>, and one of <code>era</code> and <code>eraYear</code> or <code>year</code>, and the other will be updated accordingly.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainMonthDay</code> object, where the fields specified in <code>info</code> that are not <code>undefined</code> are replaced by the corresponding values, and the rest of the fields are copied from the original date.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>If the year is provided, the calendar is not <code>iso8601</code>, and the year is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a> or years, which is from <code>-271821</code> to <code>275760</code>.</li>\n</ul>"
      }
    },
    "temporal.plaintime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainTime</code></strong> object represents a time without a date or time zone; for example, a recurring event that happens at the same time every day. It is fundamentally represented as a combination of hour, minute, second, millisecond, microsecond, and nanosecond values."
    },
    "temporal.plaintime.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/add",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>add()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a new <code>Temporal.PlainTime</code> object representing this time moved forward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>), wrapping around the clock if necessary.",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to add to this time. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>."
      },
      "returns": "A new <code>Temporal.PlainTime</code> object representing the time specified by the original <code>PlainTime</code>, plus the duration. Any units above <code>hours</code> are ignored, and if the time goes past midnight, it wraps around to the next day.\n<p>Adding a duration is equivalent to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/subtract\">subtracting</a> its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/negated\">negation</a>."
    },
    "temporal.plaintime.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/compare",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainTime.compare()</code></strong> static method returns a number (-1, 0, or 1) indicating whether the first time comes before, is the same as, or comes after the second time. It is equivalent to comparing the hour, minute, second, millisecond, microsecond, and nanosecond fields one by one.",
      "parameters": {
        "time1": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instance representing the first time to compare. It is converted to a <code>Temporal.PlainTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>.",
        "time2": "The second time to compare, converted to a <code>Temporal.PlainTime</code> object using the same algorithm as <code>time1</code>."
      },
      "returns": "Returns <code>-1</code> if <code>time1</code> comes before <code>time2</code>, <code>0</code> if they are the same, and <code>1</code> if <code>time1</code> comes after <code>time2</code>."
    },
    "temporal.plaintime.equals": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/equals",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>equals()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns <code>true</code> if this time is equivalent in value to another time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>), and <code>false</code> otherwise. They are compared by their time values. It is equivalent to <code>Temporal.PlainTime.compare(this, other) === 0</code>.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instance representing the other time to compare. It is converted to a <code>Temporal.PlainTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>."
      },
      "returns": "<code>true</code> if this time is equal to <code>other</code> both in their time value and their calendar, <code>false</code> otherwise."
    },
    "temporal.plaintime.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/from",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainTime.from()</code></strong> static method creates a new <code>Temporal.PlainTime</code> object from another <code>Temporal.PlainTime</code> object, an object with time properties, or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime#rfc_9557_format\">RFC 9557</a> string.",
      "parameters": {
        "info": "One of the following:\n<ul>\n<li>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instance, which creates a copy of the instance.\n</li>\n<li>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> instance, which provides the time in the same fashion as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/toPlainDate\"><code>Temporal.PlainDateTime.prototype.toPlainTime()</code></a>.\n</li>\n<li>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance, which provides the time in the same fashion as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/toPlainDate\"><code>Temporal.ZonedDateTime.prototype.toPlainTime()</code></a>.\n</li>\n<li>\n<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime#rfc_9557_format\">RFC 9557</a> string containing a time.\n</li>\n<li>\n<p>An object containing at least one of the following properties (in the order they are retrieved and validated):\n<ul>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/hour\"><code>hour</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/microsecond\"><code>microsecond</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/millisecond\"><code>millisecond</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/minute\"><code>minute</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/nanosecond\"><code>nanosecond</code></a></li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/second\"><code>second</code></a></li>\n</ul>\n<p>They are truncated to be integers. Out-of-range values are handled by the <code>overflow</code> option.\n</li>\n</ul>",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a time component is out of range (when using the object <code>info</code>). Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The time component is clamped to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the time component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainTime</code> object, representing the time specified by <code>info</code>.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object with at least one recognized property or a string.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n</ul>",
        "RangeError": "Thrown if the provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>."
      }
    },
    "temporal.plaintime.hour": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/hour",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>hour</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a integer from 0 to 23 representing the hour component of this time.\n<p>The set accessor of <code>hour</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainTime</code> object with the desired new value."
    },
    "temporal.plaintime.microsecond": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/microsecond",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>microsecond</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a integer from 0 to 999 representing the microsecond (10<sup>-6</sup> second) component of this time.\n<p>The set accessor of <code>microsecond</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainTime</code> object with the desired new value."
    },
    "temporal.plaintime.millisecond": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/millisecond",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>millisecond</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a integer from 0 to 999 representing the millisecond (10<sup>-3</sup> second) component of this time.\n<p>The set accessor of <code>millisecond</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainTime</code> object with the desired new value."
    },
    "temporal.plaintime.minute": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/minute",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>minute</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a integer from 0 to 59 representing the minute component of this time.\n<p>The set accessor of <code>minute</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainTime</code> object with the desired new value."
    },
    "temporal.plaintime.nanosecond": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/nanosecond",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>nanosecond</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a integer from 0 to 999 representing the nanosecond (10<sup>-9</sup> second) component of this time.\n<p>The set accessor of <code>nanosecond</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainTime</code> object with the desired new value."
    },
    "temporal.plaintime.plaintime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/plaintime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainTime()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> objects.\n<p>This constructor allows you to create instances by directly supplying the underlying data. Like all other <code>Temporal</code> classes, you should usually construct <code>Temporal.PlainTime</code> objects using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a> static method, which can handle a variety of input types.",
      "parameters": {
        "hour": "A number, truncated to an integer, representing the hour component.",
        "minute": "A number, truncated to an integer, representing the minute component.",
        "second": "A number, truncated to an integer, representing the second component.",
        "millisecond": "A number, truncated to an integer, representing the millisecond component.",
        "microsecond": "A number, truncated to an integer, representing the microsecond component.",
        "nanosecond": "A number, truncated to an integer, representing the nanosecond component."
      },
      "returns": "A new <code>Temporal.PlainTime</code> object, representing the time specified by the parameters.",
      "throws": {
        "RangeError": "Thrown if any of the components is not a finite number, or they don't represent a valid time."
      }
    },
    "temporal.plaintime.round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/round",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>round()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a new <code>Temporal.PlainTime</code> object representing this time rounded to the given unit.",
      "parameters": {
        "smallestUnit": "A string representing the <a href=\"#smallestunit_2\"><code>smallestUnit</code></a> option. This is a convenience overload, so <code>round(smallestUnit)</code> is equivalent to <code>round({ smallestUnit })</code>, where <code>smallestUnit</code> is a string.",
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"roundingincrement\"><a href=\"#roundingincrement\"><code>roundingIncrement</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A number (truncated to an integer) representing the rounding increment in the given <code>smallestUnit</code>. Defaults to <code>1</code>. The increment must be a divisor of the maximum value of <code>smallestUnit</code>; for example, if the unit is hours, the increment must be a divisor of 24 and must not be 24 itself, which means it can be 1, 2, 3, 4, 6, 8, or 12.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to round off the fractional part of <code>smallestUnit</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"halfExpand\"</code>.\n</dd>\n<dt id=\"smallestunit_2\"><a href=\"#smallestunit_2\"><code>smallestUnit</code></a></dt>\n<dd>\n<p>A string representing the smallest unit to include in the output. The value must be one of the following: <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"millisecond\"</code>, <code>\"microsecond\"</code>, <code>\"nanosecond\"</code>, or their plural forms. For units larger than <code>\"nanosecond\"</code>, fractional parts of the <code>smallestUnit</code> will be rounded according to the <code>roundingIncrement</code> and <code>roundingMode</code> settings.\n</dd>\n</dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> object representing this time rounded to the given unit, where all units smaller than <code>smallestUnit</code> are zeroed out.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.plaintime.second": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/second",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>second</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a integer from 0 to 59 representing the second component of this time.\n<p>The set accessor of <code>second</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainTime</code> object with the desired new value."
    },
    "temporal.plaintime.since": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/since",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>since()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from another time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>) to this time. The duration is positive if the other time is before this time, and negative if after.\n<p>This method does <code>this - other</code>. To do <code>other - this</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/until\"><code>until()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instance representing a time to subtract from this time. It is converted to a <code>Temporal.PlainTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>.",
        "options": "An object containing the options for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/round\"><code>Temporal.Duration.prototype.round()</code></a>, which includes <code>largestUnit</code>, <code>roundingIncrement</code>, <code>roundingMode</code>, and <code>smallestUnit</code>. <code>largestUnit</code> and <code>smallestUnit</code> only accept the units: <code>\"hours\"</code>, <code>\"minutes\"</code>, <code>\"seconds\"</code>, <code>\"milliseconds\"</code>, <code>\"microseconds\"</code>, <code>\"nanoseconds\"</code>, or their singular forms. For <code>largestUnit</code>, the default value <code>\"auto\"</code> means <code>\"hours\"</code>. For <code>smallestUnit</code>, the default value is <code>\"nanoseconds\"</code>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration <em>since</em> <code>other</code> to this time. The duration is positive if <code>other</code> is before this time, and negative if after.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.plaintime.subtract": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/subtract",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>subtract()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a new <code>Temporal.PlainTime</code> object representing this time moved backward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>), wrapping around the clock if necessary.\n<p>If you want to subtract two times and get a duration, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/since\"><code>since()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/until\"><code>until()</code></a> instead.",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to subtract from this time. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>."
      },
      "returns": "A new <code>Temporal.PlainTime</code> object representing the time specified by the original <code>PlainTime</code>, minus the duration.\n<p>Subtracting a duration is equivalent to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/add\">adding</a> its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/negated\">negation</a>, so all the same considerations apply."
    },
    "temporal.plaintime.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/tojson",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a string representing this time in the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime#rfc_9557_format\">RFC 9557 format</a> as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/toString\"><code>toString()</code></a>. It is intended to be implicitly called by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.",
      "returns": "A string representing the given time in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime#rfc_9557_format\">RFC 9557 format</a>."
    },
    "temporal.plaintime.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/tolocalestring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a string with a language-sensitive representation of this time. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. Regarding the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#date-time_component_options\">date-time component options</a> and the style shortcuts (<code>dateStyle</code> and <code>timeStyle</code>), the options should follow one of these forms:\n<ul>\n<li>Provide none of them: <code>hour</code>, <code>minute</code>, and <code>second</code> will default to <code>\"numeric\"</code>.</li>\n<li>Provide <code>timeStyle</code> only: it expands to <code>dayPeriod</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, and <code>fractionalSecondDigits</code> formats.</li>\n<li>Provide some date-time component options, where at least one of them is a time option (<code>dayPeriod</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, <code>fractionalSecondDigits</code>). Only the specified time components will be included in the output.</li>\n</ul>"
      },
      "returns": "A string representing the given time according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(time)</code>, where <code>options</code> has been normalized as described above.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if any of the options is not of the expected type."
      }
    },
    "temporal.plaintime.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/tostring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a string representing this time in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime#rfc_9557_format\">RFC 9557 format</a>.",
      "parameters": {
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"fractionalseconddigits\"><a href=\"#fractionalseconddigits\"><code>fractionalSecondDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Either an integer from 0 to 9, or the string <code>\"auto\"</code>. The default is <code>\"auto\"</code>. If <code>\"auto\"</code>, then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to round off fractional second digits beyond <code>fractionalSecondDigits</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"trunc\"</code>.\n</dd>\n<dt id=\"smallestunit\"><a href=\"#smallestunit\"><code>smallestUnit</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the smallest unit to include in the output. Possible values are <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"millisecond\"</code>, <code>\"microsecond\"</code>, and <code>\"nanosecond\"</code>, or their plural forms, which (except <code>\"minute\"</code>) are equivalent to <code>fractionalSecondDigits</code> values of <code>0</code>, <code>3</code>, <code>6</code>, <code>9</code>, respectively. If specified, then <code>fractionalSecondDigits</code> is ignored.\n</dd>\n</dl>"
      },
      "returns": "A string in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime#rfc_9557_format\">RFC 9557 format</a> representing this time.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if <code>options</code> is not an object or <code>undefined</code>."
      }
    },
    "temporal.plaintime.until": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/until",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>until()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this time to another time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>). The duration is positive if the other time is after this time, and negative if before.\n<p>This method does <code>other - this</code>. To do <code>this - other</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/since\"><code>since()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instance representing a time to subtract this time from. It is converted to a <code>Temporal.PlainTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>. It must have the same calendar as <code>this</code>.",
        "options": "The same options as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/since#options\"><code>since()</code></a>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this time <em>until</em> <code>other</code>. The duration is positive if <code>other</code> is after this time, and negative if before.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.plaintime.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/valueof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, which prevents <code>Temporal.PlainTime</code> instances from being <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_coercion\">implicitly converted to primitives</a> when used in arithmetic or comparison operations.",
      "returns": "None.",
      "throws": {
        "TypeError": "Always thrown."
      }
    },
    "temporal.plaintime.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plaintime/with",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139",
        "Safari": "preview"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instances returns a new <code>Temporal.PlainTime</code> object representing this time with some fields replaced by new values. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the time's fields.",
      "parameters": {
        "info": "An object containing at least one of the properties recognized by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>: <code>hour</code>, <code>microsecond</code>, <code>millisecond</code>, <code>minute</code>, <code>nanosecond</code>, <code>second</code>. Unspecified properties use the values from the original time.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a time component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The time component is clamped to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the time component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainTime</code> object, where the fields specified in <code>info</code> that are not <code>undefined</code> are replaced by the corresponding values, and the rest of the fields are copied from the original time.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object with at least one recognized property or a string.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n</ul>",
        "RangeError": "Thrown if the provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>."
      }
    },
    "temporal.plainyearmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainYearMonth</code></strong> object represents the year and month of a calendar date, without a day or time zone; for example, an event on a calendar that happens during the whole month. It is fundamentally represented as an ISO 8601 calendar date, with year, month, and day fields, and an associated calendar system. The day is used to disambiguate the year-month in non-ISO calendar systems."
    },
    "temporal.plainyearmonth.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/add",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>add()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a new <code>Temporal.PlainYearMonth</code> object representing this year-month moved forward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to add to this year-month. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainYearMonth</code> object representing the year-month specified by the original <code>PlainYearMonth</code>, plus the duration.",
      "throws": {
        "RangeError": "Thrown if the result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.plainyearmonth.calendarid": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/calendarid",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>calendarId</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a> used to interpret the internal ISO 8601 date.\n<p>For a list of commonly supported values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars\"><code>Intl.Locale.prototype.getCalendars()</code></a>.\n<p>The set accessor of <code>calendarId</code> is <code>undefined</code>. You cannot change this property directly. There's no obvious way to create a new <code>Temporal.PlainYearMonth</code> object with a different calendar that represents the same year-month, so you need to convert it to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object first using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/toPlainDate\"><code>toPlainDate()</code></a>, change the calendar, and then convert it back."
    },
    "temporal.plainyearmonth.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/compare",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainYearMonth.compare()</code></strong> static method returns a number (-1, 0, or 1) indicating whether the first year-month comes before, is the same as, or comes after the second year-month. It is equivalent to comparing their underlying ISO 8601 dates. Two year-months from different calendars may be considered equal if they start on the same ISO date.\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>PlainYearMonth</code> objects keep track of a reference ISO day, which is also used in the comparison. This day is automatically set when using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a> method, but can be set manually using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/PlainYearMonth\"><code>Temporal.PlainYearMonth()</code></a> constructor, causing two equivalent year-months to be considered different if they have different reference days. For this reason, you should avoid using the constructor directly and prefer the <code>from()</code> method.\n</div>",
      "parameters": {
        "yearMonth1": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instance representing the first year-month to compare. It is converted to a <code>Temporal.PlainYearMonth</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a>.",
        "yearMonth2": "The second year-month to compare, converted to a <code>Temporal.PlainYearMonth</code> object using the same algorithm as <code>yearMonth1</code>."
      },
      "returns": "Returns <code>-1</code> if <code>yearMonth1</code> comes before <code>yearMonth2</code>, <code>0</code> if they are the same, and <code>1</code> if <code>yearMonth1</code> comes after <code>yearMonth2</code>. They are compared by their underlying date values (usually the first day of the month), ignoring their calendars."
    },
    "temporal.plainyearmonth.daysinmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/daysinmonth",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInMonth</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a positive integer representing the number of days in the month of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>daysInMonth</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInMonth\"><code>Temporal.PlainDate.prototype.daysInMonth</code></a>."
    },
    "temporal.plainyearmonth.daysinyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/daysinyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a positive integer representing the number of days in the year of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>daysInYear</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInYear\"><code>Temporal.PlainDate.prototype.daysInYear</code></a>."
    },
    "temporal.plainyearmonth.equals": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/equals",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>equals()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns <code>true</code> if this year-month is equivalent in value to another year-month (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a>), and <code>false</code> otherwise. They are compared both by their underlying ISO date values and their calendars, so two year-months from different calendars may be considered equal by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/compare\"><code>Temporal.PlainYearMonth.compare()</code></a> but not by <code>equals()</code>.\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>PlainYearMonth</code> objects keep track of a reference ISO day, which is also used in the comparison. This day is automatically set when using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a> method, but can be set manually using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/PlainYearMonth\"><code>Temporal.PlainYearMonth()</code></a> constructor, causing two equivalent year-months to be considered different if they have different reference days. For this reason, you should avoid using the constructor directly and prefer the <code>from()</code> method.\n</div>",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instance representing the other year-month to compare. It is converted to a <code>Temporal.PlainYearMonth</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a>."
      },
      "returns": "<code>true</code> if this year-month is equal to <code>other</code> both in their date value and their calendar, <code>false</code> otherwise."
    },
    "temporal.plainyearmonth.era": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/era",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>era</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a calendar-specific lowercase string representing the era of this year-month, or <code>undefined</code> if the calendar does not use eras (e.g., ISO 8601). <code>era</code> and <code>eraYear</code> together uniquely identify a year in a calendar, in the same way that <code>year</code> does. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>era</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainYearMonth</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/era\"><code>Temporal.PlainDate.prototype.era</code></a>."
    },
    "temporal.plainyearmonth.erayear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/erayear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>eraYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a non-negative integer representing the year of this year-month within the era, or <code>undefined</code> if the calendar does not use eras (e.g., ISO 8601). The year index usually starts from 1 (more common) or 0, and years in an era can decrease with time (e.g., Gregorian BCE). <code>era</code> and <code>eraYear</code> together uniquely identify a year in a calendar, in the same way that <code>year</code> does. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>eraYear</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainYearMonth</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/eraYear\"><code>Temporal.PlainDate.prototype.eraYear</code></a>."
    },
    "temporal.plainyearmonth.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/from",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainYearMonth.from()</code></strong> static method creates a new <code>Temporal.PlainYearMonth</code> object from another <code>Temporal.PlainYearMonth</code> object, an object with year and month properties, or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth#rfc_9557_format\">RFC 9557</a> string.",
      "parameters": {
        "info": "One of the following:\n<ul>\n<li>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instance, which creates a copy of the instance.</li>\n<li>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth#rfc_9557_format\">RFC 9557</a> string containing a date and optionally a calendar. If the calendar is not <code>iso8601</code>, a day is required.</li>\n<li>An object containing the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"calendar\"><a href=\"#calendar\"><code>calendar</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/calendarId\"><code>calendarId</code></a> property. Defaults to <code>\"iso8601\"</code>. All other properties are interpreted in this calendar system (unlike the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/PlainYearMonth\"><code>Temporal.PlainYearMonth()</code></a> constructor, which interprets the values in the ISO calendar system).\n</dd>\n<dt id=\"era\"><a href=\"#era\"><code>era</code> and <code>eraYear</code></a></dt>\n<dd>\n<p>A string and an integer that correspond to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/era\"><code>era</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/eraYear\"><code>eraYear</code></a> properties. Are only used if the calendar system has eras. <code>era</code> and <code>eraYear</code> must be provided simultaneously. If they are not provided, then <code>year</code> must be provided. If all of <code>era</code>, <code>eraYear</code>, and <code>year</code> are provided, they must be consistent.\n</dd>\n<dt id=\"month\"><a href=\"#month\"><code>month</code></a></dt>\n<dd>\n<p>Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/month\"><code>month</code></a> property. Must be positive regardless of the <code>overflow</code> option.\n</dd>\n<dt id=\"monthcode\"><a href=\"#monthcode\"><code>monthCode</code></a></dt>\n<dd>\n<p>Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/monthCode\"><code>monthCode</code></a> property. If it is not provided, then <code>month</code> must be provided. If both <code>month</code> and <code>monthCode</code> are provided, they must be consistent.\n</dd>\n<dt id=\"year\"><a href=\"#year\"><code>year</code></a></dt>\n<dd>\n<p>Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/year\"><code>year</code></a> property.\n</dd>\n</dl>\n</li>\n</ul>",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range (when using the object <code>info</code>). Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainYearMonth</code> object, representing the year and month specified by <code>info</code> in the specified <code>calendar</code>.\n<p>Each <code>PlainYearMonth</code> stores a whole ISO 8601 date internally, which has the same year-month in the target calendar as what's exposed. The reference day is visible when stringifying with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/toString\"><code>toString()</code></a>, which outputs an ISO date. The reference day is chosen arbitrarily but consistently; that is, every <code>(year, month)</code> pair always maps to the same ISO reference day. It does not use the day provided in the input. Instead, the reference day is always chosen to be the first valid day of the month.\n<p>This reference day canonicalization ensures that <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/equals\"><code>equals()</code></a> can directly compare the underlying ISO dates without extra computation.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object or a string.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n<li>The provided properties are insufficient to unambiguously determine a date. You usually need to provide a <code>year</code> (or <code>era</code> and <code>eraYear</code>) and a <code>month</code> (or a <code>monthCode</code>).</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>The info is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.plainyearmonth.inleapyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/inleapyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>inLeapYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a boolean indicating whether this year-month is in a leap year. A leap year is a year that has more days (due to a leap day or leap month) than a common year. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>inLeapYear</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/inLeapYear\"><code>Temporal.PlainDate.prototype.inLeapYear</code></a>."
    },
    "temporal.plainyearmonth.month": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/month",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>month</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a positive integer representing the 1-based month index in the year of this year-month. The first month of this year is <code>1</code>, and the last month is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/monthsInYear\"><code>monthsInYear</code></a>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>month</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainYearMonth</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/month\"><code>Temporal.PlainDate.prototype.month</code></a>."
    },
    "temporal.plainyearmonth.monthcode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/monthcode",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>monthCode</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a calendar-specific string representing the month of this year-month. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Usually it is <code>M</code> plus a two-digit month number. For leap months, it is the previous month's code followed by <code>L</code> (even if it's conceptually a derivative of the following month; for example, in the Hebrew calendar, Adar I has code <code>M05L</code> but Adar II has code <code>M06</code>). If the leap month is the first month of the year, the code is <code>M00L</code>.\n<p>The set accessor of <code>monthCode</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainYearMonth</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode\"><code>Temporal.PlainDate.prototype.monthCode</code></a>."
    },
    "temporal.plainyearmonth.monthsinyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/monthsinyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>monthsInYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a positive integer representing the number of months in the year of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>monthsInYear</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthsInYear\"><code>Temporal.PlainDate.prototype.monthsInYear</code></a>."
    },
    "temporal.plainyearmonth.plainyearmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/plainyearmonth",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.PlainYearMonth()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> objects.\n<p>This constructor allows you to create instances by directly supplying the underlying data. Like all other <code>Temporal</code> classes, you should usually construct <code>Temporal.PlainYearMonth</code> objects using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a> static method, which can handle a variety of input types.",
      "parameters": {
        "year": "A number, truncated to an integer, representing the year in the ISO calendar system.",
        "month": "A number, truncated to an integer, representing the month in the ISO calendar system.",
        "calendar": "A string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a> to use. Note that irrespective of the <code>calendar</code>, the <code>year</code>, <code>month</code>, and <code>referenceDay</code> must be in the ISO 8601 calendar system. Defaults to <code>\"iso8601\"</code>.",
        "referenceDay": "A number, truncated to an integer, representing the day of the month in the ISO calendar system. Defaults to <code>1</code>. The same ISO year-month can represent different months on different days with non-ISO calendars. For example, the days 2021-07-01 and 2021-07-31 may fall in different months in a non-Gregorian calendar, and just specifying \"2021-07\" is insufficient to unambiguously determine a month in the target calendar. Therefore, you virtually always want to specify a <code>referenceDay</code> when using a non-ISO calendar."
      },
      "returns": "A new <code>Temporal.PlainYearMonth</code> object, representing the year-month of the date specified by <code>year</code>, <code>month</code>, and <code>referenceDay</code> (in the ISO calendar), interpreted in the calendar system specified by <code>calendar</code>.",
      "throws": {
        "TypeError": "Thrown if <code>calendar</code> is not a string or <code>undefined</code>.",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>year</code>, <code>month</code>, or <code>referenceDay</code> is not a finite number.</li>\n<li>The <code>year</code>, <code>month</code>, and <code>referenceDay</code> combination does not represent a valid date in the ISO calendar system, or is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n<li><code>calendar</code> is not a valid calendar identifier.</li>\n</ul>"
      }
    },
    "temporal.plainyearmonth.since": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/since",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>since()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from another year-month (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a>) to this year-month. The duration is positive if the other month is before this month, and negative if after.\n<p>This method does <code>this - other</code>. To do <code>other - this</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/until\"><code>until()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instance representing a year-month to subtract from this year-month. It is converted to a <code>Temporal.PlainYearMonth</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a>. It must have the same calendar as <code>this</code>.",
        "options": "An object containing the options for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/round\"><code>Temporal.Duration.prototype.round()</code></a>, which includes <code>largestUnit</code>, <code>roundingIncrement</code>, <code>roundingMode</code>, and <code>smallestUnit</code>. <code>largestUnit</code> and <code>smallestUnit</code> only accept the units: <code>\"years\"</code>, <code>\"months\"</code>, or their singular forms. For <code>largestUnit</code>, the default value <code>\"auto\"</code> means <code>\"years\"</code>. For <code>smallestUnit</code>, the default value is <code>\"months\"</code>. The current date is used as the <code>relativeTo</code> option."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration <em>since</em> <code>other</code> to this year-month. The duration is positive if <code>other</code> is before this year-month, and negative if after.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>other</code> has a different calendar than <code>this</code>.</li>\n<li>Any of the options is invalid.</li>\n</ul>"
      }
    },
    "temporal.plainyearmonth.subtract": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/subtract",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>subtract()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a new <code>Temporal.PlainYearMonth</code> object representing this year-month moved backward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).\n<p>If you want to subtract two year-months and get a duration, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/since\"><code>since()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/until\"><code>until()</code></a> instead.",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to subtract from this year-month. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainYearMonth</code> object representing the year-month specified by the original <code>PlainYearMonth</code>, minus the duration.",
      "throws": {
        "RangeError": "Thrown if the result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.plainyearmonth.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/tojson",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a string representing this year-month in the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth#rfc_9557_format\">RFC 9557 format</a> as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/toString\"><code>toString()</code></a>. It is intended to be implicitly called by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.",
      "returns": "A string representing the given date in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth#rfc_9557_format\">RFC 9557 format</a>, with the calendar annotation included if it is not <code>\"iso8601\"</code>."
    },
    "temporal.plainyearmonth.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/tolocalestring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a string with a language-sensitive representation of this year-month. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code>.\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. The <code>calendar</code> option must be provided with the same value as this year-month's calendar. Regarding the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#date-time_component_options\">date-time component options</a> and the style shortcuts (<code>dateStyle</code> and <code>timeStyle</code>), the options should follow one of these forms:\n<ul>\n<li>Provide none of them: <code>year</code> and <code>month</code> will default to <code>\"numeric\"</code>.</li>\n<li>Provide <code>dateStyle</code> only: it expands to <code>era</code>, <code>year</code>, and <code>month</code> formats.</li>\n<li>Provide some date-time component options, where at least one of them is <code>year</code> or <code>month</code>. Only the specified date components will be included in the output.</li>\n</ul>"
      },
      "returns": "A string representing the given year-month according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(yearMonth)</code>, where <code>options</code> has been normalized as described above.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if any of the options is not of the expected type."
      }
    },
    "temporal.plainyearmonth.toplaindate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/toplaindate",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object representing this year-month and a supplied day in the same calendar system.",
      "parameters": {
        "dayInfo": "An object representing the day component of the resulting <code>PlainDate</code>, containing the following property:\n<dl>\n<dt id=\"day\"><a href=\"#day\"><code>day</code></a></dt>\n<dd>\n<p>Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/day\"><code>day</code></a> property.\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainDate</code> object representing the date specified by this year-month and the day in <code>dayInfo</code>, interpreted in the calendar system of this year-month.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if <code>dayInfo</code> is not an object."
      }
    },
    "temporal.plainyearmonth.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/tostring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a string representing this year-month in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth#rfc_9557_format\">RFC 9557 format</a>.",
      "parameters": {
        "options": "An object containing the following property:\n<dl>\n<dt id=\"calendarname\"><a href=\"#calendarname\"><code>calendarName</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Whether to show the calendar annotation (<code>[u-ca=calendar_id]</code>) in the return value. Possible values are:\n<dl>\n<dt id=\"auto\"><a href=\"#auto\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>Include the calendar annotation if the calendar is not <code>\"iso8601\"</code>. The reference day is included if the calendar is not <code>\"iso8601\"</code>.\n</dd>\n<dt id=\"always\"><a href=\"#always\"><code>\"always\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation. The reference day is always included too.\n</dd>\n<dt id=\"never\"><a href=\"#never\"><code>\"never\"</code></a></dt>\n<dd>\n<p>Never include the calendar annotation. This makes the returned string not recoverable to the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instance, although the year-month value still remains the same. The reference day is included if the calendar is not <code>\"iso8601\"</code>.\n</dd>\n<dt id=\"critical\"><a href=\"#critical\"><code>\"critical\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation, and add a critical flag: <code>[!u-ca=calendar_id]</code>. Useful when sending the string to certain systems, but not useful for Temporal itself. The reference day is always included too.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A string in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth#rfc_9557_format\">RFC 9557 format</a> representing this year-month. The calendar annotation is included as specified. The reference day is included if a calendar annotation is included or if the calendar is not <code>\"iso8601\"</code>.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if <code>options</code> is not an object or <code>undefined</code>."
      }
    },
    "temporal.plainyearmonth.until": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/until",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>until()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this year-month to another year-month (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a>). The duration is positive if the other month is after this month, and negative if before.\n<p>This method does <code>other - this</code>. To do <code>this - other</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/since\"><code>since()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instance representing a year-month to subtract this year-month from. It is converted to a <code>Temporal.PlainYearMonth</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a>. It must have the same calendar as <code>this</code>.",
        "options": "The same options as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/since#options\"><code>since()</code></a>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this year-month <em>until</em> <code>other</code>. The duration is positive if <code>other</code> is after this year-month, and negative if before.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>other</code> has a different calendar than <code>this</code>.</li>\n<li>Any of the options is invalid.</li>\n</ul>"
      }
    },
    "temporal.plainyearmonth.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/valueof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, which prevents <code>Temporal.PlainYearMonth</code> instances from being <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_coercion\">implicitly converted to primitives</a> when used in arithmetic or comparison operations.",
      "returns": "None.",
      "throws": {
        "TypeError": "Always thrown."
      }
    },
    "temporal.plainyearmonth.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/with",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns a new <code>Temporal.PlainYearMonth</code> object representing this year-month with some fields replaced by new values. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the year-month's fields.\n<p>There's no obvious way to create a new <code>Temporal.PlainYearMonth</code> object that represents the same year-month in a different calendar, so to replace its <code>calendarId</code> property, you need to convert it to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object first using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/toPlainDate\"><code>toPlainDate()</code></a>, change the calendar, and then convert it back.",
      "parameters": {
        "info": "An object containing at least one of the properties recognized by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from\"><code>Temporal.PlainYearMonth.from()</code></a> (except <code>calendar</code>): <code>era</code> and <code>eraYear</code>, <code>month</code>, <code>monthCode</code>, <code>year</code>. Unspecified properties use the values from the original year-month. You only need to provide one of <code>month</code> or <code>monthCode</code>, and one of <code>era</code> and <code>eraYear</code> or <code>year</code>, and the other will be updated accordingly.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.PlainYearMonth</code> object, where the fields specified in <code>info</code> that are not <code>undefined</code> are replaced by the corresponding values, and the rest of the fields are copied from the original date.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>The result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±(10<sup>8</sup> + 1) days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.plainyearmonth.year": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/plainyearmonth/year",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>year</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth\"><code>Temporal.PlainYearMonth</code></a> instances returns an integer representing the number of years of this year-month relative to the start of a calendar-specific epoch year. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>year</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/with\"><code>with()</code></a> method to create a new <code>Temporal.PlainYearMonth</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year\"><code>Temporal.PlainDate.prototype.year</code></a>."
    },
    "temporal.zoneddatetime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.ZonedDateTime</code></strong> object represents a date and time with a time zone. It is fundamentally represented as a combination of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\">instant</a>, a time zone, and a calendar system."
    },
    "temporal.zoneddatetime.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/add",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>add()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <code>Temporal.ZonedDateTime</code> object representing this date-time moved forward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to add to this date-time. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.ZonedDateTime</code> object representing the date-time specified by the original <code>ZonedDateTime</code>, plus the duration.",
      "throws": {
        "RangeError": "Thrown if the result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.zoneddatetime.calendarid": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/calendarid",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>calendarId</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a> used to interpret the internal ISO 8601 date.\n<p>For a list of commonly supported values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars\"><code>Intl.Locale.prototype.getCalendars()</code></a>.\n<p>The set accessor of <code>calendarId</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/withCalendar\"><code>withCalendar()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value."
    },
    "temporal.zoneddatetime.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/compare",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.ZonedDateTime.compare()</code></strong> static method returns a number (-1, 0, or 1) indicating whether the first date-time comes before, is the same as, or comes after the second date-time. It is equivalent to comparing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/epochNanoseconds\"><code>epochNanoseconds</code></a> of the two date-times.",
      "parameters": {
        "dateTime1": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the first date-time to compare. It is converted to a <code>Temporal.ZonedDateTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from\"><code>Temporal.ZonedDateTime.from()</code></a>.",
        "dateTime2": "The second date-time to compare, converted to a <code>Temporal.ZonedDateTime</code> object using the same algorithm as <code>dateTime1</code>."
      },
      "returns": "Returns <code>-1</code> if <code>dateTime1</code> comes before <code>dateTime2</code>, <code>0</code> if they are the same, and <code>1</code> if <code>dateTime1</code> comes after <code>dateTime2</code>. They are compared by their underlying instant values, ignoring their calendars or time zones."
    },
    "temporal.zoneddatetime.day": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/day",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>day</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the 1-based day index in the month of this date, which is the same day number you would see on a calendar. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>day</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/day\"><code>Temporal.PlainDate.prototype.day</code></a>.\n<p>For <code>PlainDate</code>, <code>day</code> can only be non-continuous if the calendar skips days. For <code>ZonedDateTime</code>, <code>day</code> can also be non-continuous if the time zone changes its offset by 24 hours; this actually happened. See the example below."
    },
    "temporal.zoneddatetime.dayofweek": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/dayofweek",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>dayOfWeek</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the 1-based day index in the week of this date. Days in a week are numbered sequentially from <code>1</code> to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/daysInWeek\"><code>daysInWeek</code></a>, with each number mapping to its name. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>dayOfWeek</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.ZonedDateTime</code> object with the desired new <code>dayOfWeek</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/add\"><code>add()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/subtract\"><code>subtract()</code></a> method with the appropriate number of <code>days</code>.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/dayOfWeek\"><code>Temporal.PlainDate.prototype.dayOfWeek</code></a>."
    },
    "temporal.zoneddatetime.dayofyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/dayofyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>dayOfYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the 1-based day index in the year of this date. The first day of this year is <code>1</code>, and the last day is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/daysInYear\"><code>daysInYear</code></a>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>dayOfYear</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.ZonedDateTime</code> object with the desired new <code>dayOfYear</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/add\"><code>add()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/subtract\"><code>subtract()</code></a> method with the appropriate number of <code>days</code>.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/dayOfYear\"><code>Temporal.PlainDate.prototype.dayOfYear</code></a>."
    },
    "temporal.zoneddatetime.daysinmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/daysinmonth",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInMonth</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the number of days in the month of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>daysInMonth</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInMonth\"><code>Temporal.PlainDate.prototype.daysInMonth</code></a>."
    },
    "temporal.zoneddatetime.daysinweek": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/daysinweek",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInWeek</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the number of days in the week of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>daysInWeek</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInWeek\"><code>Temporal.PlainDate.prototype.daysInWeek</code></a>."
    },
    "temporal.zoneddatetime.daysinyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/daysinyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>daysInYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the number of days in the year of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>daysInYear</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInYear\"><code>Temporal.PlainDate.prototype.daysInYear</code></a>."
    },
    "temporal.zoneddatetime.epochmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/epochmilliseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>epochMilliseconds</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns an integer representing the number of milliseconds elapsed since the Unix epoch (midnight at the beginning of January 1, 1970, UTC) to this instant. It is equivalent to dividing <code>epochNanoseconds</code> by <code>1e6</code> and flooring the result.\n<p>The set accessor of <code>epochMilliseconds</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.ZonedDateTime</code> object with the desired new <code>epochMilliseconds</code> value, see below."
    },
    "temporal.zoneddatetime.epochnanoseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/epochnanoseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>epochNanoseconds</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> representing the number of nanoseconds elapsed since the Unix epoch (midnight at the beginning of January 1, 1970, UTC) to this instant.\n<p>The set accessor of <code>epochNanoseconds</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.ZonedDateTime</code> object with the desired new <code>epochNanoseconds</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/ZonedDateTime\"><code>new Temporal.ZonedDateTime()</code></a> constructor instead.\n<p>An instant can only represent ±10<sup>8</sup> days (about ±273,972.6 years) around the epoch, which is ±8.64e21 nanoseconds. Attempting to set <code>epochNanoseconds</code> beyond this boundary throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>."
    },
    "temporal.zoneddatetime.equals": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/equals",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>equals()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns <code>true</code> if this date-time is equivalent in value to another date-time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from\"><code>Temporal.ZonedDateTime.from()</code></a>), and <code>false</code> otherwise. They are compared both by their instant values, time zones, and their calendars, so two date-times from different calendars or time zones may be considered equal by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/compare\"><code>Temporal.ZonedDateTime.compare()</code></a> but not by <code>equals()</code>.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the other date-time to compare. It is converted to a <code>Temporal.ZonedDateTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from\"><code>Temporal.ZonedDateTime.from()</code></a>."
      },
      "returns": "<code>true</code> if this date-time is equal to <code>other</code> both in their instant value, time zone, and their calendar, <code>false</code> otherwise.\n<p>Note that the time zones are canonicalized before comparison, so if their <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zone IDs</a> are both named and identify the same time zone, then they would be considered the same even when the exact names may be aliases of each other. Offset identifiers are compared by the offset values they represent. Offset identifiers never compare equal to named identifiers even when the named identifier's time zone always uses that offset."
    },
    "temporal.zoneddatetime.era": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/era",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>era</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a calendar-specific lowercase string representing the era of this date, or <code>undefined</code> if the calendar does not use eras (e.g., ISO 8601). <code>era</code> and <code>eraYear</code> together uniquely identify a year in a calendar, in the same way that <code>year</code> does. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>era</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/era\"><code>Temporal.PlainDate.prototype.era</code></a>."
    },
    "temporal.zoneddatetime.erayear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/erayear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>eraYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a non-negative integer representing the year of this date within the era, or <code>undefined</code> if the calendar does not use eras (e.g., ISO 8601). The year index usually starts from 1 (more common) or 0, and years in an era can decrease with time (e.g., Gregorian BCE). <code>era</code> and <code>eraYear</code> together uniquely identify a year in a calendar, in the same way that <code>year</code> does. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>eraYear</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/eraYear\"><code>Temporal.PlainDate.prototype.eraYear</code></a>."
    },
    "temporal.zoneddatetime.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/from",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.ZonedDateTime.from()</code></strong> static method creates a new <code>Temporal.ZonedDateTime</code> object from another <code>Temporal.ZonedDateTime</code> object, an object with date, time, and time zone properties, or an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#rfc_9557_format\">RFC 9557</a> string.",
      "parameters": {
        "info": "One of the following:\n<ul>\n<li>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance, which creates a copy of the instance.</li>\n<li>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#rfc_9557_format\">RFC 9557 format</a> string containing a date, optionally a time, optionally an offset, a time zone annotation, and optionally a calendar.</li>\n<li>An object containing properties that are accepted by either <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from\"><code>Temporal.PlainDate.from()</code></a> (<code>calendar</code>, <code>era</code>, <code>eraYear</code>, <code>year</code>, <code>month</code>, <code>monthCode</code>, <code>day</code>) or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a> (<code>hour</code>, <code>minute</code>, <code>second</code>, <code>millisecond</code>, <code>microsecond</code>, <code>nanosecond</code>). The info should explicitly specify a year (as <code>year</code> or as <code>era</code> and <code>eraYear</code>), a month (as <code>month</code> or <code>monthCode</code>), and a day; others are optional and will be set to their default values. The following properties should be provided too:\n<dl>\n<dt id=\"timezone\"><a href=\"#timezone\"><code>timeZone</code></a></dt>\n<dd>\n<p>Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to use. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information). The time properties are interpreted in this time zone.\n</dd>\n<dt id=\"offset\"><a href=\"#offset\"><code>offset</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A offset string, in the same format as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#rfc_9557_format\">RFC 9557</a> offset but with optional seconds and subsecond components (<code>±HH:mm:ss.sssssssss</code>), representing the offset from UTC. If omitted, it will be calculated from the time zone and the date-time. <code>\"Z\"</code> is not allowed.\n</dd>\n</dl>\n</li>\n</ul>",
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"disambiguation\"><a href=\"#disambiguation\"><code>disambiguation</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>What to do if the local date-time is ambiguous in the given time zone (there are more than one instants with such local time, or the local time does not exist). Possible values are <code>\"compatible\"</code>, <code>\"earlier\"</code>, <code>\"later\"</code>, and <code>\"reject\"</code>. Defaults to <code>\"compatible\"</code>. For more information about these values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#ambiguity_and_gaps_from_local_time_to_utc_time\">ambiguity and gaps from local time to UTC time</a>.\n</dd>\n<dt id=\"offset_2\"><a href=\"#offset_2\"><code>offset</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>What to do if the offset is explicitly provided in <code>info</code> but the offset is invalid for the given time zone in the given local time. Possible values are <code>\"use\"</code>, <code>\"ignore\"</code>, <code>\"reject\"</code>, and <code>\"prefer\"</code>. Defaults to <code>\"reject\"</code>. For more information about these values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#offset_ambiguity\">offset ambiguity</a>.\n</dd>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range (when using the object <code>info</code>). Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.ZonedDateTime</code> object, representing the date and time specified by <code>info</code> in the specified <code>calendar</code> and <code>timeZone</code>.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object or a string.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n<li>The provided properties are insufficient to unambiguously determine a date. You usually need to provide a <code>year</code> (or <code>era</code> and <code>eraYear</code>), a <code>month</code> (or <code>monthCode</code>), and a <code>day</code>.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>The wall-clock time is ambiguous in the time zone, and <code>options.disambiguation</code> is set to <code>\"reject\"</code>.</li>\n<li>The info is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.zoneddatetime.gettimezonetransition": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/gettimezonetransition",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>getTimeZoneTransition()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object representing the closest instant after or before this instant at which the time zone's UTC offset changes (the returned instant is the first instant after the change), or <code>null</code> if there is no such transition. This is useful for finding out the offset rules of a time zone, such as its daylight saving time pattern.\n<p>Note that instants returned about the future may be unreliable, for example due to changes to the time zone definitions.",
      "parameters": {
        "direction": "A string representing the <a href=\"#direction_2\"><code>direction</code></a> option. This is a convenience overload, so <code>getTimeZoneTransition(direction)</code> is equivalent to <code>getTimeZoneTransition({ direction })</code>, where <code>direction</code> is a string.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"direction_2\"><a href=\"#direction_2\"><code>direction</code></a></dt>\n<dd>\n<p>Whether to search before or after the current instant. Must be one of <code>\"next\"</code> or <code>\"previous\"</code>.\n</dd>\n</dl>"
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object with instant <code>t</code>, such that:\n<ul>\n<li>The time zone offset at <code>t</code> is different from the offset one nanosecond before <code>t</code>.</li>\n<li><code>t &lt; this.epochNanoseconds</code> if <code>direction</code> is <code>\"previous\"</code>, or <code>t &gt; this.epochNanoseconds</code> if <code>direction</code> is <code>\"next\"</code>.</li>\n<li>For all instants between <code>this.epochNanoseconds</code> and <code>t</code>, exclusive, the offset is constant.</li>\n</ul>\n<p>If there is no such transition, <code>null</code> is returned."
    },
    "temporal.zoneddatetime.hour": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/hour",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>hour</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a integer from 0 to 23 representing the hour component of this time.\n<p>The set accessor of <code>hour</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/hour\"><code>Temporal.PlainTime.prototype.hour</code></a>.\n<p>For <code>ZonedDateTime</code>, <code>hour</code> can be non-continuous due to offset changes such as daylight saving time transitions. In this case, the hour may be repeated or skipped."
    },
    "temporal.zoneddatetime.hoursinday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/hoursinday",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>hoursInDay</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the number of hours in the day of this date in the time zone. It may be more or less than 24 in the case of offset changes such as daylight saving time.\n<p>Because <code>ZonedDateTime</code> is the only class that's time zone-aware, and hours in a day can only change by offset changes, all other classes assume 24-hour days.\n<p>The set accessor of <code>hoursInDay</code> is <code>undefined</code>. You cannot change this property directly."
    },
    "temporal.zoneddatetime.inleapyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/inleapyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>inLeapYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a boolean indicating whether this date is in a leap year. A leap year is a year that has more days (due to a leap day or leap month) than a common year. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>inLeapYear</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/inLeapYear\"><code>Temporal.PlainDate.prototype.inLeapYear</code></a>."
    },
    "temporal.zoneddatetime.microsecond": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/microsecond",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>microsecond</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a integer from 0 to 999 representing the microsecond (10<sup>-6</sup> second) component of this time.\n<p>The set accessor of <code>microsecond</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/microsecond\"><code>Temporal.PlainTime.prototype.microsecond</code></a>."
    },
    "temporal.zoneddatetime.millisecond": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/millisecond",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>millisecond</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a integer from 0 to 999 representing the millisecond (10<sup>-3</sup> second) component of this time.\n<p>The set accessor of <code>millisecond</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/millisecond\"><code>Temporal.PlainTime.prototype.millisecond</code></a>."
    },
    "temporal.zoneddatetime.minute": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/minute",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>minute</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a integer from 0 to 59 representing the minute component of this time.\n<p>The set accessor of <code>minute</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/minute\"><code>Temporal.PlainTime.prototype.minute</code></a>.\n<p>For <code>ZonedDateTime</code>, <code>minute</code> can be non-continuous due to offset changes. While much rarer than <code>hour</code> changes (because daylight saving time shifts are usually by whole hours), it can still happen."
    },
    "temporal.zoneddatetime.month": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/month",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>month</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the 1-based month index in the year of this date. The first month of this year is <code>1</code>, and the last month is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/monthsInYear\"><code>monthsInYear</code></a>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>month</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/month\"><code>Temporal.PlainDate.prototype.month</code></a>."
    },
    "temporal.zoneddatetime.monthcode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/monthcode",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>monthCode</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a calendar-specific string representing the month of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>Usually it is <code>M</code> plus a two-digit month number. For leap months, it is the previous month's code followed by <code>L</code> (even if it's conceptually a derivative of the following month; for example, in the Hebrew calendar, Adar I has code <code>M05L</code> but Adar II has code <code>M06</code>). If the leap month is the first month of the year, the code is <code>M00L</code>.\n<p>The set accessor of <code>monthCode</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode\"><code>Temporal.PlainDate.prototype.monthCode</code></a>."
    },
    "temporal.zoneddatetime.monthsinyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/monthsinyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>monthsInYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the number of months in the year of this date. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>monthsInYear</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthsInYear\"><code>Temporal.PlainDate.prototype.monthsInYear</code></a>."
    },
    "temporal.zoneddatetime.nanosecond": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/nanosecond",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>nanosecond</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a integer from 0 to 999 representing the nanosecond (10<sup>-9</sup> second) component of this time.\n<p>The set accessor of <code>nanosecond</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/nanosecond\"><code>Temporal.PlainTime.prototype.nanosecond</code></a>."
    },
    "temporal.zoneddatetime.offset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/offset",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>offset</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">offset</a> used to interpret the internal instant, in the form <code>±HH:mm</code> (or <code>±HH:mm:ss.sssssssss</code> with as much subminute precision as necessary). This offset is guaranteed to be valid for the given instant and time zone at construction time.\n<p>The set accessor of <code>offset</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value (usually also changing the date/time), or use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/withTimeZone\"><code>withTimeZone()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object in another time zone."
    },
    "temporal.zoneddatetime.offsetnanoseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/offsetnanoseconds",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>offsetNanoseconds</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns an integer representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">offset</a> used to interpret the internal instant, as a number of nanoseconds (positive or negative). The value is a safe integer because it's less than a day, which is 8.64e15 nanoseconds.\n<p>The set accessor of <code>offsetNanoseconds</code> is <code>undefined</code>. You cannot change this property directly. Change <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/offset\"><code>offset</code></a> to change this property too."
    },
    "temporal.zoneddatetime.round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/round",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>round()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <code>Temporal.ZonedDateTime</code> object representing this date-time rounded to the given unit.",
      "parameters": {
        "smallestUnit": "A string representing the <a href=\"#smallestunit_2\"><code>smallestUnit</code></a> option. This is a convenience overload, so <code>round(smallestUnit)</code> is equivalent to <code>round({ smallestUnit })</code>, where <code>smallestUnit</code> is a string.",
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"roundingincrement\"><a href=\"#roundingincrement\"><code>roundingIncrement</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A number (truncated to an integer) representing the rounding increment in the given <code>smallestUnit</code>. Defaults to <code>1</code>. For all values of <code>smallestUnit</code> except <code>\"day\"</code>, the increment must be a divisor of the maximum value of the unit; for example, if the unit is hours, the increment must be a divisor of 24 and must not be 24 itself, which means it can be 1, 2, 3, 4, 6, 8, or 12. For <code>\"day\"</code>, the increment must be 1.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to round off the fractional part of <code>smallestUnit</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"halfExpand\"</code>.\n</dd>\n<dt id=\"smallestunit_2\"><a href=\"#smallestunit_2\"><code>smallestUnit</code></a></dt>\n<dd>\n<p>A string representing the smallest unit to include in the output. The value must be one of the following: <code>\"day\"</code>, <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"millisecond\"</code>, <code>\"microsecond\"</code>, <code>\"nanosecond\"</code>, or their plural forms. For units larger than <code>\"nanosecond\"</code>, fractional parts of the <code>smallestUnit</code> will be rounded according to the <code>roundingIncrement</code> and <code>roundingMode</code> settings.\n</dd>\n</dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object representing this date-time rounded to the given unit, where all units smaller than <code>smallestUnit</code> are zeroed out.\n<p>If <code>smallestUnit</code> is <code>\"day\"</code>, the returned date-time will be the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/startOfDay\">start of day</a> of this date or the next day, depending on the <code>roundingMode</code> and the distance to these two instants. Otherwise, the rounding is first performed on its <code>PlainDateTime</code> (same as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/round\"><code>Temporal.PlainDateTime.prototype.round()</code></a>), and then re-interpreted in the same time zone, with <code>disambiguation: \"compatible\", offset: \"prefer\"</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#ambiguity_and_gaps_from_local_time_to_utc_time\">ambiguity and gaps from local time to UTC time</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#offset_ambiguity\">offset ambiguity</a>.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid."
      }
    },
    "temporal.zoneddatetime.second": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/second",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>second</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a integer from 0 to 59 representing the second component of this time.\n<p>The set accessor of <code>second</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/second\"><code>Temporal.PlainTime.prototype.second</code></a>.\n<p>For <code>ZonedDateTime</code>, <code>second</code> can be non-continuous due to offset changes. While much rarer than <code>hour</code> or <code>minute</code> changes (because daylight saving time shifts are usually by whole hours), it can still happen."
    },
    "temporal.zoneddatetime.since": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/since",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>since()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from another date-time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from\"><code>Temporal.ZonedDateTime.from()</code></a>) to this date-time. The duration is positive if the other date-time is before this date-time, and negative if after.\n<p>This method does <code>this - other</code>. To do <code>other - this</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/until\"><code>until()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing a date-time to subtract from this date-time. It is converted to a <code>Temporal.ZonedDateTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from\"><code>Temporal.ZonedDateTime.from()</code></a>. It must have the same calendar as <code>this</code>.",
        "options": "An object containing the options for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/round\"><code>Temporal.Duration.prototype.round()</code></a>, which includes <code>largestUnit</code>, <code>roundingIncrement</code>, <code>roundingMode</code>, and <code>smallestUnit</code>. <code>largestUnit</code> and <code>smallestUnit</code> accept all possible units. For <code>largestUnit</code>, the default value <code>\"auto\"</code> means <code>\"hours\"</code> or <code>smallestUnit</code>, whichever is greater. For <code>smallestUnit</code>, the default value is <code>\"nanoseconds\"</code>. The current date is used as the <code>relativeTo</code> option. Note that using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#calendar_durations\">units larger than <code>\"hours\"</code></a> may make the duration not portable to other calendars, dates, or time zones."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration <em>since</em> <code>other</code> to this date-time. The duration is positive if <code>other</code> is before this date-time, and negative if after.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>other</code> has a different calendar than <code>this</code>.</li>\n<li>Any of the options is invalid.</li>\n<li><code>other</code> has a different time zone than <code>this</code>, and <code>largestUnit</code> is <code>\"days\"</code> or above.</li>\n</ul>"
      }
    },
    "temporal.zoneddatetime.startofday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/startofday",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>startOfDay()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object representing the first instant of this date in the time zone. It usually has a time of <code>00:00:00</code>, but may be different if the midnight doesn't exist due to offset changes, in which case the first time that exists is returned.\n<p>It is equivalent to calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/withPlainTime\"><code>withPlainTime()</code></a> with no arguments.",
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> object with instant <code>t</code>, such that:\n<ul>\n<li>The date at <code>t</code> is different from the date one nanosecond before <code>t</code>.</li>\n<li>The date at <code>t</code> is the same as the date of <code>this</code>.</li>\n</ul>"
    },
    "temporal.zoneddatetime.subtract": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/subtract",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>subtract()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <code>Temporal.ZonedDateTime</code> object representing this date-time moved backward by a given duration (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>).\n<p>If you want to subtract two date-times and get a duration, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/since\"><code>since()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/until\"><code>until()</code></a> instead.",
      "parameters": {
        "duration": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> instance representing a duration to subtract from this date-time. It is converted to a <code>Temporal.Duration</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/from\"><code>Temporal.Duration.from()</code></a>.",
        "options": "An object containing the following property:\n<dl>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range. Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.ZonedDateTime</code> object representing the date-time specified by the original <code>ZonedDateTime</code>, minus the duration.",
      "throws": {
        "RangeError": "Thrown if the result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch."
      }
    },
    "temporal.zoneddatetime.timezoneid": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/timezoneid",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>timeZoneId</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zone identifier</a> used to interpret the internal instant. The string is either a named identifier in the preferred case (such as <code>\"America/New_York\"</code>), or an offset in the form <code>\"±hh:mm\"</code>. If the time zone has aliases, the <code>timeZoneId</code> is the identifier used to create the <code>ZonedDateTime</code>, without canonicalization to the primary identifier.\n<p>The set accessor of <code>timeZoneId</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/withTimeZone\"><code>withTimeZone()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nThis string is not intended for display to users. Use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/toLocaleString\"><code>toLocaleString()</code></a> with the appropriate options to get a localized string.\n</div>"
    },
    "temporal.zoneddatetime.toinstant": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/toinstant",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toInstant()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> object representing the instant of this date-time.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> object representing the instant of this date-time."
    },
    "temporal.zoneddatetime.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/tojson",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a string representing this date-time in the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#rfc_9557_format\">RFC 9557 format</a> as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/toString\"><code>toString()</code></a>. It is intended to be implicitly called by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.",
      "returns": "A string representing the given date-time in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#rfc_9557_format\">RFC 9557 format</a>, with the calendar annotation included if it is not <code>\"iso8601\"</code>, and the offset and time zone annotation always included."
    },
    "temporal.zoneddatetime.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/tolocalestring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a string with a language-sensitive representation of this date-time. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method delegates to <code>Intl.DateTimeFormat</code> and passes this date-time converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Instant\"><code>Temporal.Instant</code></a> (because <code>Intl.DateTimeFormat</code> cannot directly format a <code>Temporal.ZonedDateTime</code>).\n<p>Every time <code>toLocaleString</code> is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method, because a <code>DateTimeFormat</code> object remembers the arguments passed to it and may decide to cache a slice of the database, so future <code>format</code> calls can search for localization strings within a more constrained context. However, currently <code>Intl.DateTimeFormat</code> does not support formatting <code>Temporal.ZonedDateTime</code> objects, so you must convert them to <code>Temporal.Instant</code> objects first before passing them to <code>format()</code>.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. If this date-time's calendar is not <code>\"iso8601\"</code>, the <code>calendar</code> option must be provided with the same value; otherwise, if this date-time's calendar is <code>\"iso8601\"</code>, the <code>calendar</code> option can be any value. The <code>timeZone</code> option must not be provided, as it is automatically set to be the date-time's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/timeZoneId\"><code>timeZoneId</code></a>. Regarding the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#date-time_component_options\">date-time component options</a> and the style shortcuts (<code>dateStyle</code> and <code>timeStyle</code>), the options should follow one of these forms:\n<ul>\n<li>Provide none of them: <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, and <code>second</code> will default to <code>\"numeric\"</code>.</li>\n<li>Provide at least one of <code>dateStyle</code> or <code>timeStyle</code>: the date-time components will be set according to the specified style and the locale.</li>\n<li>Provide some date-time component options. Only the specified date-time components will be included in the output.</li>\n</ul>"
      },
      "returns": "A string representing the given date-time according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, { ...options, timeZone: dateTime.timeZoneId }).format(dateTime.toInstant())</code>, where <code>options</code> has been normalized as described above.\n<div class=\"notecard note\">\n<p><strong>Note:</strong>\nMost of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of <code>toLocaleString()</code> to hardcoded constants.\n</div>",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if any of the options is not of the expected type."
      }
    },
    "temporal.zoneddatetime.toplaindate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/toplaindate",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object representing the date portion of this date-time.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate\"><code>Temporal.PlainDate</code></a> object representing the date portion of this date-time."
    },
    "temporal.zoneddatetime.toplaindatetime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/toplaindatetime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainDateTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object representing the date and time portions of this date-time. Only the time zone information is removed.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nAfter a <code>Temporal.ZonedDateTime</code> is converted to <code>Temporal.PlainDateTime</code>, it's no longer time-zone-aware. Subsequent operations like arithmetic or <code>with()</code> operations will not adjust for DST and may not yield the same results as equivalent operations with the original <code>Temporal.ZonedDateTime</code>. However, unless you perform those operations across a time zone offset transition, it's impossible to notice the difference. Therefore, be very careful when performing this conversion because subsequent results may be correct most of the time, but only turn out incorrect when moving across offset transitions like when DST starts or ends.\n</div>",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime\"><code>Temporal.PlainDateTime</code></a> object representing the date and time portions of this date-time."
    },
    "temporal.zoneddatetime.toplaintime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/toplaintime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toPlainTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> object representing the time portion of this date-time.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nAfter a <code>Temporal.ZonedDateTime</code> is converted to <code>Temporal.PlainTime</code>, it's no longer time-zone-aware. Subsequent operations like arithmetic or <code>with()</code> operations will not adjust for DST and may not yield the same results as equivalent operations with the original <code>Temporal.ZonedDateTime</code>. However, unless you perform those operations across a time zone offset transition, it's impossible to notice the difference. Therefore, be very careful when performing this conversion because subsequent results may be correct most of the time, but only turn out incorrect when moving across offset transitions like when DST starts or ends.\n</div>",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> object representing the time portion of this date-time."
    },
    "temporal.zoneddatetime.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/tostring",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a string representing this date-time in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#rfc_9557_format\">RFC 9557 format</a>.",
      "parameters": {
        "options": "An object containing the following property:\n<dl>\n<dt id=\"calendarname\"><a href=\"#calendarname\"><code>calendarName</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Whether to show the calendar annotation (<code>[u-ca=calendar_id]</code>) in the return value. Possible values are:\n<dl>\n<dt id=\"auto\"><a href=\"#auto\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>Include the calendar annotation if the calendar is not <code>\"iso8601\"</code>.\n</dd>\n<dt id=\"always\"><a href=\"#always\"><code>\"always\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation.\n</dd>\n<dt id=\"never\"><a href=\"#never\"><code>\"never\"</code></a></dt>\n<dd>\n<p>Never include the calendar annotation. This makes the returned string not recoverable to the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance, although the date value still remains the same.\n</dd>\n<dt id=\"critical\"><a href=\"#critical\"><code>\"critical\"</code></a></dt>\n<dd>\n<p>Always include the calendar annotation, and add a critical flag: <code>[!u-ca=calendar_id]</code>. Useful when sending the string to certain systems, but not useful for Temporal itself.\n</dd>\n</dl>\n</dd>\n<dt id=\"fractionalseconddigits\"><a href=\"#fractionalseconddigits\"><code>fractionalSecondDigits</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Either an integer from 0 to 9, or the string <code>\"auto\"</code>. The default is <code>\"auto\"</code>. If <code>\"auto\"</code>, then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary.\n</dd>\n<dt id=\"roundingmode\"><a href=\"#roundingmode\"><code>roundingMode</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to round off fractional second digits beyond <code>fractionalSecondDigits</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode\"><code>Intl.NumberFormat()</code></a>. Defaults to <code>\"trunc\"</code>.\n</dd>\n<dt id=\"smallestunit\"><a href=\"#smallestunit\"><code>smallestUnit</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the smallest unit to include in the output. Possible values are <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"millisecond\"</code>, <code>\"microsecond\"</code>, and <code>\"nanosecond\"</code>, or their plural forms, which (except <code>\"minute\"</code>) are equivalent to <code>fractionalSecondDigits</code> values of <code>0</code>, <code>3</code>, <code>6</code>, <code>9</code>, respectively. If specified, then <code>fractionalSecondDigits</code> is ignored.\n</dd>\n<dt id=\"timezonename\"><a href=\"#timezonename\"><code>timeZoneName</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Whether to show the time zone name (<code>[time_zone_id]</code>) in the return value. Possible values are:\n<dl>\n<dt id=\"auto_2\"><a href=\"#auto_2\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>Always include the time zone name.\n</dd>\n<dt id=\"never_2\"><a href=\"#never_2\"><code>\"never\"</code></a></dt>\n<dd>\n<p>Never include the time zone name. This makes the returned string not recoverable to the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance.\n</dd>\n<dt id=\"critical_2\"><a href=\"#critical_2\"><code>\"critical\"</code></a></dt>\n<dd>\n<p>Always include the time zone name, and add a critical flag: <code>[!time)zone_id]</code>. Useful when sending the string to certain systems, but not useful for Temporal itself.\n</dd>\n</dl>\n</dd>\n<dt id=\"offset\"><a href=\"#offset\"><code>offset</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>Whether to show the offset (<code>±HH:mm</code>) in the return value. Possible values are:\n<dl>\n<dt id=\"auto_3\"><a href=\"#auto_3\"><code>\"auto\"</code> (default)</a></dt>\n<dd>\n<p>Always include the offset.\n</dd>\n<dt id=\"never_3\"><a href=\"#never_3\"><code>\"never\"</code></a></dt>\n<dd>\n<p>Never include the offset. This makes the returned string not recoverable to the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance, if the time zone is included but the time is ambiguous, or if the time zone is also not included.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A string in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#rfc_9557_format\">RFC 9557 format</a> representing this date-time. The offset and calendar/time zone annotations are included as specified.",
      "throws": {
        "RangeError": "Thrown if any of the options is invalid.",
        "TypeError": "Thrown if <code>options</code> is not an object or <code>undefined</code>."
      }
    },
    "temporal.zoneddatetime.until": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/until",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>until()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this date-time to another date-time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from\"><code>Temporal.ZonedDateTime.from()</code></a>). The duration is positive if the other date-time is after this date-time, and negative if before.\n<p>This method does <code>other - this</code>. To do <code>this - other</code>, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/since\"><code>since()</code></a> method.",
      "parameters": {
        "other": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing a date-time to subtract this date-time from. It is converted to a <code>Temporal.ZonedDateTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from\"><code>Temporal.ZonedDateTime.from()</code></a>. It must have the same calendar as <code>this</code>.",
        "options": "The same options as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/since#options\"><code>since()</code></a>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/Duration\"><code>Temporal.Duration</code></a> object representing the duration from this date-time <em>until</em> <code>other</code>. The duration is positive if <code>other</code> is after this date-time, and negative if before.",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>other</code> has a different calendar than <code>this</code>.</li>\n<li>Any of the options is invalid.</li>\n<li><code>other</code> has a different time zone than <code>this</code>, and <code>largestUnit</code> is <code>\"days\"</code> or above.</li>\n</ul>"
      }
    },
    "temporal.zoneddatetime.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/valueof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, which prevents <code>Temporal.ZonedDateTime</code> instances from being <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#primitive_coercion\">implicitly converted to primitives</a> when used in arithmetic or comparison operations.",
      "returns": "None.",
      "throws": {
        "TypeError": "Always thrown."
      }
    },
    "temporal.zoneddatetime.weekofyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/weekofyear",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>weekOfYear</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a positive integer representing the 1-based week index in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/yearOfWeek\"><code>yearOfWeek</code></a> of this date, or <code>undefined</code> if the calendar does not have a well-defined week system. The first week of the year is <code>1</code>. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>weekOfYear</code> is <code>undefined</code>. You cannot change this property directly. To create a new <code>Temporal.ZonedDateTime</code> object with the desired new <code>weekOfYear</code> value, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/add\"><code>add()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/subtract\"><code>subtract()</code></a> method with the appropriate number of <code>weeks</code>.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/weekOfYear\"><code>Temporal.PlainDate.prototype.weekOfYear</code></a>."
    },
    "temporal.zoneddatetime.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/with",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <code>Temporal.ZonedDateTime</code> object representing this date-time with some fields replaced by new values. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the date-time's fields.\n<p>To replace the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/calendarId\"><code>calendarId</code></a> property, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/withCalendar\"><code>withCalendar()</code></a> method. To replace the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/timeZoneId\"><code>timeZoneId</code></a> property, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/withTimeZone\"><code>withTimeZone()</code></a> method.",
      "parameters": {
        "info": "An object containing at least one of the properties recognized by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from\"><code>Temporal.ZonedDateTime.from()</code></a> (except <code>calendar</code> and <code>timeZone</code>): <code>day</code>, <code>era</code> and <code>eraYear</code>, <code>hour</code>, <code>microsecond</code>, <code>millisecond</code>, <code>minute</code>, <code>month</code>, <code>monthCode</code>, <code>nanosecond</code>, <code>offset</code>, <code>second</code>, <code>year</code>. Unspecified properties use the values from the original date-time. You only need to provide one of <code>month</code> or <code>monthCode</code>, and one of <code>era</code> and <code>eraYear</code> or <code>year</code>, and the other will be updated accordingly.",
        "options": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n<dl>\n<dt id=\"disambiguation\"><a href=\"#disambiguation\"><code>disambiguation</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>What to do if the local date-time is ambiguous in the given time zone (there are more than one instants with such local time, or the local time does not exist). Possible values are <code>\"compatible\"</code>, <code>\"earlier\"</code>, <code>\"later\"</code>, and <code>\"reject\"</code>. Defaults to <code>\"compatible\"</code>. For more information about these values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#ambiguity_and_gaps_from_local_time_to_utc_time\">ambiguity and gaps from local time to UTC time</a>.\n</dd>\n<dt id=\"offset\"><a href=\"#offset\"><code>offset</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>What to do if the offset is explicitly provided in <code>info</code> but the offset is invalid for the given time zone in the given local time. Possible values are <code>\"use\"</code>, <code>\"ignore\"</code>, <code>\"reject\"</code>, and <code>\"prefer\"</code>. Defaults to <code>\"prefer\"</code>. For more information about these values, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#offset_ambiguity\">offset ambiguity</a>.\n</dd>\n<dt id=\"overflow\"><a href=\"#overflow\"><code>overflow</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the behavior when a date component is out of range (when using the object <code>info</code>). Possible values are:\n<dl>\n<dt id=\"constrain\"><a href=\"#constrain\"><code>\"constrain\"</code> (default)</a></dt>\n<dd>\n<p>The date component is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate#invalid_date_clamping\">clamped</a> to the valid range.\n</dd>\n<dt id=\"reject\"><a href=\"#reject\"><code>\"reject\"</code></a></dt>\n<dd>\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown if the date component is out of range.\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Temporal.ZonedDateTime</code> object, where the fields specified in <code>info</code> that are not <code>undefined</code> are replaced by the corresponding values, and the rest of the fields are copied from the original date-time.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li><code>info</code> is not an object.</li>\n<li><code>options</code> is not an object or <code>undefined</code>.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The provided properties that specify the same component are inconsistent.</li>\n<li>The provided non-numerical properties are not valid; for example, if <code>monthCode</code> is never a valid month code in this calendar.</li>\n<li>The provided numerical properties are out of range, and <code>options.overflow</code> is set to <code>\"reject\"</code>.</li>\n<li>The wall-clock time represented by the provided properties is ambiguous in the time zone, and <code>options.disambiguation</code> is set to <code>\"reject\"</code>.</li>\n<li>The result is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch.</li>\n</ul>"
      }
    },
    "temporal.zoneddatetime.withcalendar": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/withcalendar",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>withCalendar()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <code>Temporal.ZonedDateTime</code> object representing this date-time interpreted in the new calendar system. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the date-time's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/calendarId\"><code>calendarId</code></a> property.\n<p>To replace the date-time component properties, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method. To replace its time zone, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/withTimeZone\"><code>withTimeZone()</code></a> method.",
      "parameters": {
        "calendar": "A string that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/calendarId\"><code>calendarId</code></a> property."
      },
      "returns": "A new <code>Temporal.ZonedDateTime</code> object, representing the date-time specified by the original <code>ZonedDateTime</code>, interpreted in the new calendar system.",
      "throws": {
        "TypeError": "Thrown if <code>calendar</code> is not a string.",
        "RangeError": "Thrown if <code>calendar</code> is not a valid calendar identifier."
      }
    },
    "temporal.zoneddatetime.withplaintime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/withplaintime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>withPlainTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <code>Temporal.ZonedDateTime</code> object representing this date-time with the time part entirely replaced by the new time (in a form convertible by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>)\n<p>This method will replace all time properties, defaulting to <code>0</code> where properties are unspecified. If you only want to replace some of the time properties, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method instead.",
      "parameters": {
        "plainTime": "A string, an object, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime\"><code>Temporal.PlainTime</code></a> instance representing the new time. It is converted to a <code>Temporal.PlainTime</code> object using the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from\"><code>Temporal.PlainTime.from()</code></a>. If not specified, the time part is set to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/startOfDay\">start of the day</a> (which is usually <code>00:00:00</code> unless it doesn't exist due to offset transitions). <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">Disambiguation</a> always happens in the <code>\"compatible\"</code> mode; if you want to use a different mode, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method instead."
      },
      "returns": "A new <code>Temporal.ZonedDateTime</code> object, with the date part and the time zone copied from the original date-time and the time part replaced by the new time."
    },
    "temporal.zoneddatetime.withtimezone": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/withtimezone",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>withTimeZone()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns a new <code>Temporal.ZonedDateTime</code> object representing the same instant as this date-time but in the new time zone. Because all <code>Temporal</code> objects are designed to be immutable, this method essentially functions as the setter for the date-time's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/timeZoneId\"><code>timeZoneId</code></a> property.\n<p>To replace the date-time component properties, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method. To replace its calendar, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/withCalendar\"><code>withCalendar()</code></a> method.",
      "parameters": {
        "timeZone": "Either a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instance representing the time zone to use. If a <code>Temporal.ZonedDateTime</code> instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets\">time zones and offsets</a> for more information)."
      },
      "returns": "A new <code>Temporal.ZonedDateTime</code> object representing the same instant as this date-time but in the new time zone.",
      "throws": {
        "TypeError": "Thrown if <code>timeZone</code> is not a string or a <code>Temporal.ZonedDateTime</code> instance.",
        "RangeError": "Thrown if the time zone name is invalid."
      }
    },
    "temporal.zoneddatetime.year": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/year",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>year</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns an integer representing the number of years of this date relative to the start of a calendar-specific epoch year. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>year</code> is <code>undefined</code>. You cannot change this property directly. Use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/with\"><code>with()</code></a> method to create a new <code>Temporal.ZonedDateTime</code> object with the desired new value.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year\"><code>Temporal.PlainDate.prototype.year</code></a>."
    },
    "temporal.zoneddatetime.yearofweek": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/yearofweek",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>yearOfWeek</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> instances returns an integer representing the year to be paired with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/weekOfYear\"><code>weekOfYear</code></a> of this date, or <code>undefined</code> if the calendar does not have a well-defined week system. It is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#calendars\">calendar</a>-dependent.\n<p>The set accessor of <code>yearOfWeek</code> is <code>undefined</code>. You cannot change this property directly.\n<p>For general information and more examples, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/yearOfWeek\"><code>Temporal.PlainDate.prototype.yearOfWeek</code></a>."
    },
    "temporal.zoneddatetime.zoneddatetime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/temporal/zoneddatetime/zoneddatetime",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "139",
        "FirefoxAndroid": "139"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Temporal.ZonedDateTime()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime\"><code>Temporal.ZonedDateTime</code></a> objects.\n<p>This constructor allows you to create instances by directly supplying the underlying data. Like all other <code>Temporal</code> classes, you should usually construct <code>Temporal.ZonedDateTime</code> objects using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from\"><code>Temporal.ZonedDateTime.from()</code></a> static method, which can handle a variety of input types.",
      "parameters": {
        "epochNanoseconds": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a> that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/epochNanoseconds\"><code>epochNanoseconds</code></a> property.",
        "timeZone": "A string that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/timeZoneId\"><code>timeZoneId</code></a> property. Unlike all other <code>Temporal</code> APIs, it must be a valid time zone identifier (either named or offset) as-is, and cannot be a <code>Temporal.ZonedDateTime</code> instance or a date-time string.",
        "calendar": "A string that corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/calendarId\"><code>calendarId</code></a> property. Defaults to <code>\"iso8601\"</code>."
      },
      "returns": "A new <code>Temporal.ZonedDateTime</code> object, representing the specific instant specified by the parameters.",
      "throws": {
        "TypeError": "Thrown if <code>timeZone</code> or <code>calendar</code> is not a string.",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li><code>epochNanoseconds</code> is not in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Temporal#representable_dates\">representable range</a>, which is ±10<sup>8</sup> days, or about ±273,972.6 years, from the Unix epoch.</li>\n<li><code>timeZone</code> is not a valid time zone identifier.</li>\n<li><code>calendar</code> is not a valid calendar identifier.</li>\n</ul>"
      }
    },
    "typedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "A <strong><em>TypedArray</em></strong> object describes an array-like view of an\nunderlying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">binary data buffer</a>.\nThere is no global property named <code>TypedArray</code>, nor is there a\ndirectly visible <code>TypedArray</code> constructor. Instead, there are a number of\ndifferent global properties, whose values are typed array constructors for specific\nelement types, listed below. On the following pages you will find common properties and\nmethods that can be used with any typed array containing elements of any type.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "typedarray.at": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/at",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "92",
        "ChromeAndroid": "92",
        "Edge": "92",
        "Firefox": "90",
        "FirefoxAndroid": "90",
        "Opera": "78",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "16.6.0"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2022-03-14",
        "highDate": "2024-09-14"
      },
      "doc": "The <strong><code>at()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/at\"><code>Array.prototype.at()</code></a>.",
      "parameters": {
        "index": "Zero-based index of the typed array element to be returned, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. Negative index counts back from the end of the typed array — if <code>index &lt; 0</code>, <code>index + array.length</code> is accessed."
      },
      "returns": "The element in the typed array matching the given index. Always returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if <code>index &lt; -array.length</code> or <code>index &gt;= array.length</code> without attempting to access the corresponding property."
    },
    "typedarray.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/buffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>buffer</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> referenced by this typed array at construction time."
    },
    "typedarray.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/bytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>byteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the length (in bytes) of this typed array."
    },
    "typedarray.byteoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/byteoffset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>byteOffset</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the offset (in bytes) of this typed array from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>."
    },
    "typedarray.copywithin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/copywithin",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "34",
        "FirefoxAndroid": "34",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>copyWithin()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances shallow copies part of this typed array to another location in the same typed array and returns this typed array without modifying its length. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>Array.prototype.copyWithin()</code></a>.",
      "parameters": {
        "target": "Zero-based index at which to copy the sequence to, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. This corresponds to where the element at <code>start</code> will be copied to, and all elements between <code>start</code> and <code>end</code> are copied to succeeding indices.",
        "start": "Zero-based index at which to start copying elements from, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.",
        "end": "Zero-based index at which to end copying elements from, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>copyWithin()</code> copies up to but not including <code>end</code>."
      },
      "returns": "The modified typed array."
    },
    "typedarray.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>entries()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that contains the key/value pairs for each index in the typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/entries\"><code>Array.prototype.entries()</code></a>.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "typedarray.every": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/every",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>every()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances tests whether all elements in the typed array pass the test implemented by the provided function. It returns a Boolean value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>every()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<code>true</code> unless <code>callbackFn</code> returns a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value for a typed array element, in which case <code>false</code> is immediately returned."
    },
    "typedarray.fill": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/fill",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>fill()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances changes all elements within a range of indices in a typed array to a static value. It returns the modified typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>Array.prototype.fill()</code></a>.",
      "parameters": {
        "value": "Value to fill the typed array with.",
        "start": "Zero-based index at which to start filling, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.",
        "end": "Zero-based index at which to end filling, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>fill()</code> fills up to but not including <code>end</code>."
      },
      "returns": "The modified typed array, filled with <code>value</code>."
    },
    "typedarray.filter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/filter",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "38",
        "FirefoxAndroid": "38",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>filter()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances creates a copy of a portion of a given typed array, filtered down to just the elements from the given typed array that pass the test implemented by the provided function. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.prototype.filter()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to keep the element in the resulting typed array, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>filter()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A copy of the given typed array containing just the elements that pass the test. If no elements pass the test, an empty typed array is returned."
    },
    "typedarray.find": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/find",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>find()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the first element in the provided typed array that satisfies the provided testing function. If no values satisfy the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>Array.prototype.find()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>find()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The first element in the typed array that satisfies the provided testing function.\nOtherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned."
    },
    "typedarray.findindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/findindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>findIndex()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the index of the first element in a typed array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>Array.prototype.findIndex()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>findIndex()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The index of the first element in the typed array that passes the test. Otherwise, <code>-1</code>."
    },
    "typedarray.findlast": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/findlast",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "97",
        "ChromeAndroid": "97",
        "Edge": "97",
        "Firefox": "104",
        "FirefoxAndroid": "104",
        "Opera": "83",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Deno": "1.16"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2022-08-23",
        "highDate": "2025-02-23"
      },
      "doc": "The <strong><code>findLast()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances iterates the typed array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>Array.prototype.findLast()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>findLast()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The last (highest-index) element in the typed array that satisfies the provided testing function; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no matching element is found."
    },
    "typedarray.findlastindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/findlastindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "97",
        "ChromeAndroid": "97",
        "Edge": "97",
        "Firefox": "104",
        "FirefoxAndroid": "104",
        "Opera": "83",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Deno": "1.16"
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2022-08-23",
        "highDate": "2025-02-23"
      },
      "doc": "The <strong><code>findLastIndex()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances iterates the typed array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>Array.prototype.findLastIndex()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>findLastIndex()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The index of the last (highest-index) element in the typed array that passes the test.\nOtherwise <code>-1</code> if no matching element is found."
    },
    "typedarray.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/foreach",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "38",
        "FirefoxAndroid": "38",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>forEach()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances executes a provided function once for each typed array element. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. Its return value is discarded. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>forEach()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>)."
    },
    "typedarray.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/from",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "38",
        "FirefoxAndroid": "38",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>TypedArray.from()</code></strong> static method creates a new\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array</a>\nfrom an array-like or iterable object. This method is nearly the same as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>.",
      "parameters": {
        "arrayLike": "An iterable or array-like object to convert to a typed array.",
        "mapFn": "A function to call on every element of the typed array. If provided, every value to be added to the array is first passed through this function, and <code>mapFn</code>'s return value is added to the typed array instead. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n</dl>",
        "thisArg": "Value to use as <code>this</code> when executing <code>mapFn</code>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance."
    },
    "typedarray.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/includes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "14",
        "Firefox": "43",
        "FirefoxAndroid": "43",
        "Opera": "34",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>includes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances determines whether a typed array includes a certain value among its entries, returning <code>true</code> or <code>false</code> as appropriate. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a>.",
      "parameters": {
        "searchElement": "The value to search for.",
        "fromIndex": "Zero-based index at which to start searching, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>."
      },
      "returns": "A boolean value which is <code>true</code> if the value <code>searchElement</code> is found within the typed array (or the part of the typed array indicated by the index <code>fromIndex</code>, if specified)."
    },
    "typedarray.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/indexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>indexOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a>.",
      "parameters": {
        "searchElement": "Element to locate in the typed array.",
        "fromIndex": "Zero-based index at which to start searching, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>."
      },
      "returns": "The first index of <code>searchElement</code> in the typed array; <code>-1</code> if not found."
    },
    "typedarray.join": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/join",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>join()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances creates and returns a new string by concatenating all of the elements in this typed array, separated by commas or a specified separator string. If the typed array has only one item, then that item will be returned without using the separator. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a>.",
      "parameters": {
        "separator": "A string to separate each pair of adjacent elements of the typed array. If omitted, the typed array elements are separated with a comma (\",\")."
      },
      "returns": "A string with all typed array elements joined. If <code>array.length</code> is <code>0</code>, the empty string is returned."
    },
    "typedarray.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/keys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>keys()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that contains the keys for each index in the typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>Array.prototype.keys()</code></a>.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "typedarray.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>lastIndexOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at <code>fromIndex</code>. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.prototype.lastIndexOf()</code></a>.",
      "parameters": {
        "searchElement": "Element to locate in the typed array.",
        "fromIndex": "Zero-based index at which to start searching backwards, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>."
      },
      "returns": "The last index of <code>searchElement</code> in the typed array; <code>-1</code> if not found."
    },
    "typedarray.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/length",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>length</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the length (in elements) of this typed array."
    },
    "typedarray.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/map",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "38",
        "FirefoxAndroid": "38",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>map()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances creates a new typed array populated with the results of calling a provided function on every element in the calling typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array.prototype.map()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. Its return value is added as a single element in the new typed array. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>map()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A new typed array with each element being the result of the callback function."
    },
    "typedarray.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/name",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "15",
        "ChromeAndroid": "18",
        "Edge": "14",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "10.5",
        "Safari": "6",
        "SafariIOS": "6",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-08-02",
        "highDate": "2019-02-02"
      },
      "doc": "The <strong><code>name</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instance indicates the function's name as specified when it was created, or it may be either <code>anonymous</code> or <code>''</code> (an empty string) for functions created anonymously."
    },
    "typedarray.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/of",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "38",
        "FirefoxAndroid": "38",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>TypedArray.of()</code></strong> static method creates a new\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array</a> from a variable number of arguments. This method is nearly the same as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/of\"><code>Array.of()</code></a>.",
      "parameters": {
        "element1<br>\n…<br>\nelementN": "Elements used to create the typed array."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance."
    },
    "typedarray.reduce": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reduce",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>reduce()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances executes a user-supplied \"reducer\" callback function on each element of the typed array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the typed array is a single value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>Array.prototype.reduce()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. Its return value becomes the value of the <code>accumulator</code> parameter on the next invocation of <code>callbackFn</code>. For the last invocation, the return value becomes the return value of <code>reduce()</code>. The function is called with the following arguments:\n<dl>\n<dt id=\"accumulator\"><a href=\"#accumulator\"><code>accumulator</code></a></dt>\n<dd>\n<p>The value resulting from the previous call to <code>callbackFn</code>. On the first call, its value is <code>initialValue</code> if the latter is specified; otherwise its value is <code>array[0]</code>.\n</dd>\n<dt id=\"currentvalue\"><a href=\"#currentvalue\"><code>currentValue</code></a></dt>\n<dd>\n<p>The value of the current element. On the first call, its value is <code>array[0]</code> if <code>initialValue</code> is specified; otherwise its value is <code>array[1]</code>.\n</dd>\n<dt id=\"currentindex\"><a href=\"#currentindex\"><code>currentIndex</code></a></dt>\n<dd>\n<p>The index position of <code>currentValue</code> in the typed array. On the first call, its value is <code>0</code> if <code>initialValue</code> is specified, otherwise <code>1</code>.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>reduce()</code> was called upon.\n</dd>\n</dl>",
        "initialValue": "A value to which <code>accumulator</code> is initialized the first time the callback is called.\nIf <code>initialValue</code> is specified, <code>callbackFn</code> starts executing with the first value in the typed array as <code>currentValue</code>.\nIf <code>initialValue</code> is <em>not</em> specified, <code>accumulator</code> is initialized to the first value in the typed array, and <code>callbackFn</code> starts executing with the second value in the typed array as <code>currentValue</code>. In this case, if the typed array is empty (so that there's no first value to return as <code>accumulator</code>), an error is thrown."
      },
      "returns": "The value that results from running the \"reducer\" callback function to completion over the entire typed array.",
      "throws": {
        "TypeError": "Thrown if the typed array contains no elements and <code>initialValue</code> is not provided."
      }
    },
    "typedarray.reduceright": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reduceright",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>reduceRight()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances applies a function against an accumulator and each value of the typed array (from right-to-left) to reduce it to a single value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>Array.prototype.reduceRight()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. Its return value becomes the value of the <code>accumulator</code> parameter on the next invocation of <code>callbackFn</code>. For the last invocation, the return value becomes the return value of <code>reduceRight()</code>. The function is called with the following arguments:\n<dl>\n<dt id=\"accumulator\"><a href=\"#accumulator\"><code>accumulator</code></a></dt>\n<dd>\n<p>The value resulting from the previous call to <code>callbackFn</code>. On the first call, its value is <code>initialValue</code> if the latter is specified; otherwise its value is the last element of the typed array.\n</dd>\n<dt id=\"currentvalue\"><a href=\"#currentvalue\"><code>currentValue</code></a></dt>\n<dd>\n<p>The value of the current element. On the first call, its value is the last element if <code>initialValue</code> is specified; otherwise its value is the second-to-last element.\n</dd>\n<dt id=\"currentindex\"><a href=\"#currentindex\"><code>currentIndex</code></a></dt>\n<dd>\n<p>The index position of <code>currentValue</code> in the typed array. On the first call, its value is <code>array.length - 1</code> if <code>initialValue</code> is specified, otherwise <code>array.length - 2</code>.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>reduceRight()</code> was called upon.\n</dd>\n</dl>",
        "initialValue": "Value to use as accumulator to the first call of the <code>callbackFn</code>. If no initial value is supplied, the last element in the typed array will be used and skipped. Calling <code>reduceRight()</code> on an empty typed array without an initial value creates a <code>TypeError</code>."
      },
      "returns": "The value that results from the reduction."
    },
    "typedarray.reverse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reverse",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>reverse()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances reverses a typed array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em> and returns the reference to the same typed array, the first typed array element now becoming the last, and the last typed array element becoming the first. In other words, elements order in the typed array will be turned towards the direction opposite to that previously stated. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a>.",
      "returns": "The reference to the original typed array, now reversed. Note that the typed array is reversed <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em>, and no copy is made."
    },
    "typedarray.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>set()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances stores multiple values in the typed\narray, reading input values from a specified array.",
      "parameters": {
        "array": "The array from which to copy values. All values from the source array are copied\ninto the target array, unless the length of the source array plus the target offset exceeds\nthe length of the target array, in which case an exception is thrown.",
        "typedarray": "If the source array is a typed array, the two arrays may share the same underlying\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>; the JavaScript engine will intelligently\n<strong>copy</strong> the source range of the buffer to the destination range.",
        "targetOffset": "The offset into the target array at which to begin writing values from the source\narray. If this value is omitted, 0 is assumed (that is, the source array will\noverwrite values in the target array starting at index 0)."
      },
      "returns": "None (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).",
      "throws": {
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>An element will be stored beyond the end of the typed array, either because <code>targetOffset</code> is too large or because <code>array</code> or <code>typedarray</code> is too large.</li>\n<li><code>targetOffset</code> is negative.</li>\n</ul>"
      }
    },
    "typedarray.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "38",
        "FirefoxAndroid": "38",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>slice()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns a copy of a portion of a typed array into a new typed array object selected from <code>start</code> to <code>end</code> (<code>end</code> not included) where <code>start</code> and <code>end</code> represent the index of items in that typed array. The original typed array will not be modified. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>.",
      "parameters": {
        "start": "Zero-based index at which to start extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.",
        "end": "Zero-based index at which to end extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>slice()</code> extracts up to but not including <code>end</code>."
      },
      "returns": "A new typed array containing the extracted elements."
    },
    "typedarray.some": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/some",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>some()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances tests whether at least one element in the typed array passes the test implemented by the provided function. It returns true if, in the typed array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments:\n<dl>\n<dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n<dd>\n<p>The current element being processed in the typed array.\n</dd>\n<dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n<dd>\n<p>The index of the current element being processed in the typed array.\n</dd>\n<dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n<dd>\n<p>The typed array <code>some()</code> was called upon.\n</dd>\n</dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<code>false</code> unless <code>callbackFn</code> returns a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value for a typed array element, in which case <code>true</code> is immediately returned."
    },
    "typedarray.sort": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/sort",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "12",
        "Firefox": "46",
        "FirefoxAndroid": "46",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>sort()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances sorts the elements of a typed array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em> and returns the reference to the same typed array, now sorted. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a>, except that it sorts the values numerically instead of as strings by default.",
      "parameters": {
        "compareFn": "A function that determines the order of the elements. The function is called with the following arguments:\n<dl>\n<dt id=\"a\"><a href=\"#a\"><code>a</code></a></dt>\n<dd>\n<p>The first element for comparison.\n</dd>\n<dt id=\"b\"><a href=\"#b\"><code>b</code></a></dt>\n<dd>\n<p>The second element for comparison.\n</dd>\n</dl>\n<p>It should return a number where:\n<ul>\n<li>A negative value indicates that <code>a</code> should come before <code>b</code>.</li>\n<li>A positive value indicates that <code>a</code> should come after <code>b</code>.</li>\n<li>Zero or <code>NaN</code> indicates that <code>a</code> and <code>b</code> are considered equal.</li>\n</ul>\n<p>To memorize this, remember that <code>(a, b) =&gt; a - b</code> sorts numbers in ascending order.\n<p>If omitted, the typed array elements are sorted according to numeric value."
      },
      "returns": "The reference to the original typed array, now sorted. Note that the typed array is sorted <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em>, and no copy is made."
    },
    "typedarray.subarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/subarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>subarray()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns a new typed array\non the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> store and with the same element types as for this\ntyped array. The begin offset is <strong>inclusive</strong> and the end\noffset is <strong>exclusive</strong>.",
      "parameters": {
        "begin": "Element to begin at. The offset is inclusive. The whole array will be included in\nthe new view if this value is not specified.",
        "end": "Element to end at. The offset is exclusive. If not specified, all elements from the\none specified by <code>begin</code> to the end of the array are included in\nthe new view."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> object."
    },
    "typedarray.symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/symbol.iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "36",
        "FirefoxAndroid": "36",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>[Symbol.iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows typed arrays to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator object</a> that yields the value of each index in the typed array.\n<p>The initial value of this property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/values\"><code>TypedArray.prototype.values</code></a> property.",
      "returns": "The same return value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/values\"><code>TypedArray.prototype.values()</code></a>: a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the value of each index in the typed array."
    },
    "typedarray.symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/symbol.species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "48",
        "FirefoxAndroid": "48",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>TypedArray[Symbol.species]</code></strong> static accessor property returns the constructor used to construct return values from typed array methods.\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong>\nThe existence of <code>[Symbol.species]</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get [Symbol.species]</code> was called. The return value is used to construct return values from typed array methods that create new typed arrays."
    },
    "typedarray.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "51",
        "FirefoxAndroid": "51",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-01-24",
        "highDate": "2019-07-24"
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns a string representing the elements of the typed array. The elements are converted to strings using their <code>toLocaleString</code> methods and these strings are separated by a locale-specific string (such as a comma \",\"). This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>Array.prototype.toLocaleString()</code></a>.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object with configuration properties. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code></a>."
      },
      "returns": "A string representing the elements of the typed array."
    },
    "typedarray.toreversed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/toreversed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "FirefoxAndroid": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-07-04"
      },
      "doc": "The <strong><code>toReversed()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> counterpart of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse\"><code>reverse()</code></a> method. It returns a new typed array with the elements in reversed order. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"><code>Array.prototype.toReversed()</code></a>.",
      "returns": "A new typed array containing the elements in reversed order."
    },
    "typedarray.tosorted": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tosorted",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "FirefoxAndroid": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-07-04"
      },
      "doc": "The <strong><code>toSorted()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/sort\"><code>sort()</code></a> method. It returns a new typed array with the elements sorted in ascending order. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"><code>Array.prototype.toSorted()</code></a>, except that it sorts the values numerically instead of as strings by default.",
      "parameters": {
        "compareFn": "A function that determines the order of the elements. If omitted, the typed array elements are sorted according to numeric value. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/sort\"><code>sort()</code></a> for more information."
      },
      "returns": "A new typed array with the elements sorted in ascending order."
    },
    "typedarray.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "51",
        "FirefoxAndroid": "51",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2017-01-24",
        "highDate": "2019-07-24"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns a string representing the specified typed array and its elements. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>Array.prototype.toString()</code></a>.",
      "returns": "A string representing the elements of the typed array."
    },
    "typedarray.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "12",
        "Firefox": "37",
        "FirefoxAndroid": "37",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2016-09-20",
        "highDate": "2019-03-20"
      },
      "doc": "The <strong><code>values()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that iterates the value of each item in the typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values()</code></a>.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "typedarray.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/with",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "FirefoxAndroid": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "baseline": {
        "level": "LOW",
        "lowDate": "2023-07-04"
      },
      "doc": "The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation\">bracket notation</a> to change the value of a given index. It returns a new typed array with the element at the given index replaced with the given value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/with\"><code>Array.prototype.with()</code></a>.",
      "parameters": {
        "index": "Zero-based index at which to change the typed array, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>.",
        "value": "Any value to be assigned to the given index."
      },
      "returns": "A new typed array with the element at <code>index</code> replaced with <code>value</code>.",
      "throws": {
        "RangeError": "Thrown if <code>index &gt;= array.length</code> or <code>index &lt; -array.length</code>."
      }
    },
    "typeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typeerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>TypeError</code></strong> object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.\n<p>A <code>TypeError</code> may be thrown when:\n<ul>\n<li>an operand or argument passed to a function is incompatible with the type expected by that operator or function; or</li>\n<li>when attempting to modify a value that cannot be changed; or</li>\n<li>when attempting to use a value in an inappropriate way.</li>\n</ul>\n<p><code>TypeError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/Window/structuredClone\" ><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>TypeError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "typeerror.typeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typeerror/typeerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>TypeError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error",
        "options": "An object that has the following properties:\n<dl>\n<dt id=\"cause\"><a href=\"#cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n</dd>\n</dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "uint16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Uint16Array</code></strong> typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Uint16Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "uint16array.uint16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint16array/uint16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Uint16Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "uint32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Uint32Array</code></strong> typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Uint32Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "uint32array.uint32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint32array/uint32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Uint32Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "uint8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Uint8Array</code></strong> typed array represents an array of 8-bit unsigned integers. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Uint8Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "uint8array.frombase64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/frombase64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "133",
        "FirefoxAndroid": "133",
        "Safari": "18.2",
        "SafariIOS": "18.2"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>Uint8Array.fromBase64()</code></strong> static method creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> object from a <a href=\"$MDN_URL$/Glossary/Base64\">base64</a>-encoded string.\n<p>This method should be preferred over <a href=\"$MDN_URL$/Web/API/Window/atob\"><code>Window.atob()</code></a> because it results in a byte array, which is easier to work with than a string containing raw bytes, unless your decoded binary data is actually intended to be ASCII text. If you already have an array buffer allocated and you want to populate it, use the instance method <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array/setFromBase64\"><code>Uint8Array.prototype.setFromBase64()</code></a> instead.",
      "parameters": {
        "string": "A base64 string encoding bytes to convert to a <code>Uint8Array</code>. The string must only contain characters in the base64 alphabet, which includes A–Z, a–z, 0–9, and two special characters, which are either <code>+</code> and <code>/</code> (if using <code>alphabet: \"base64\"</code> in <code>options</code>) or <code>-</code> and <code>_</code> (if using <code>alphabet: \"base64url\"</code> in <code>options</code>). It may have padding <code>=</code> characters at the end. Any ASCII white space characters within the string are ignored.",
        "options": "An object customizing the base64 string interpretation process. It can contain the following properties:\n<dl>\n<dt id=\"alphabet\"><a href=\"#alphabet\"><code>alphabet</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the base64 alphabet to use. It can be one of the following:\n<dl>\n<dt id=\"base64\"><a href=\"#base64\"><code>\"base64\"</code> (default)</a></dt>\n<dd>\n<p>Accept input encoded with the standard base64 alphabet, which uses <code>+</code> and <code>/</code>.\n</dd>\n<dt id=\"base64url\"><a href=\"#base64url\"><code>\"base64url\"</code></a></dt>\n<dd>\n<p>Accept input encoded with the URL-safe base64 alphabet, which uses <code>-</code> and <code>_</code>.\n</dd>\n</dl>\n</dd>\n<dt id=\"lastchunkhandling\"><a href=\"#lastchunkhandling\"><code>lastChunkHandling</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying how to handle the last chunk of the base64 string. Because every 4 characters in base64 encodes 3 bytes, the string is separated into chunks of 4 characters. If the last chunk has fewer than 4 characters, it needs to be handled differently. It can be one of the following:\n<dl>\n<dt id=\"loose\"><a href=\"#loose\"><code>\"loose\"</code> (default)</a></dt>\n<dd>\n<p>The last chunk can either be 2 or 3 base64 characters, or exactly 4 characters long with padding <code>=</code> characters. The last chunk is decoded and appended to the result.\n</dd>\n<dt id=\"strict\"><a href=\"#strict\"><code>\"strict\"</code></a></dt>\n<dd>\n<p>The last chunk must be exactly 4 characters long with padding <code>=</code> characters. Furthermore, <a href=\"$MDN_URL$/Glossary/Base64#last_chunk\">overflow bits</a> (trailing bits from the last base64 character that don't represent any data) must be 0. The last chunk is decoded and appended to the result.\n</dd>\n<dt id=\"stop-before-partial\"><a href=\"#stop-before-partial\"><code>\"stop-before-partial\"</code></a></dt>\n<dd>\n<p>If the last chunk is exactly 4 characters long with padding <code>=</code> characters, then it's decoded and appended to the result. Otherwise, the last partial chunk is ignored (but if it contains one base64 character followed by <code>=</code>, then a syntax error is still thrown). This is useful if the string is coming from a stream and the last chunk is not yet complete. To know how many characters of the input were read, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array/setFromBase64\"><code>Uint8Array.prototype.setFromBase64()</code></a> instead (the linked page also contains an example of stream decoding using <code>\"stop-before-partial\"</code>).\n</dd>\n</dl>\n</dd>\n</dl>"
      },
      "returns": "A new <code>Uint8Array</code> object containing the decoded bytes from the base64-encoded string.",
      "throws": {
        "SyntaxError": "Thrown if the input string contains characters outside the specified alphabet, or if the last chunk does not satisfy the <code>lastChunkHandling</code> option.",
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>The input string is not a string.</li>\n<li>The <code>options</code> object is not an object or <code>undefined</code>.</li>\n<li>The options are not of the expected values or <code>undefined</code>.</li>\n</ul>"
      }
    },
    "uint8array.fromhex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/fromhex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "133",
        "FirefoxAndroid": "133",
        "Safari": "18.2",
        "SafariIOS": "18.2"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>Uint8Array.fromHex()</code></strong> static method creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> object from a hexadecimal string.\n<p>This method parses the string into a byte array. To convert the string into a single number, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a> function with <code>radix</code> set to <code>16</code> instead.",
      "parameters": {
        "string": "A hexadecimal string encoding bytes to convert to a <code>Uint8Array</code>. The string must:\n<ul>\n<li>Have an even number of characters because two characters encode one byte.</li>\n<li>Only contain characters in the hexadecimal alphabet, which includes 0–9 and A–F (case-insensitive).</li>\n<li>Not contain whitespace (unlike <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array/setFromBase64\"><code>Uint8Array.prototype.setFromBase64()</code></a>).</li>\n</ul>"
      },
      "returns": "A new <code>Uint8Array</code> object containing the decoded bytes from the hexadecimal string.",
      "throws": {
        "SyntaxError": "Thrown if the input string contains characters outside the hex alphabet, or its length is odd.",
        "TypeError": "Thrown if the input string is not a string."
      }
    },
    "uint8array.setfrombase64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/setfrombase64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "133",
        "FirefoxAndroid": "133",
        "Safari": "18.2",
        "SafariIOS": "18.2"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>setFromBase64()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> instances populates this <code>Uint8Array</code> object with bytes from a <a href=\"$MDN_URL$/Glossary/Base64\">base64</a>-encoded string, returning an object indicating how many bytes were read and written.\n<p>This method is most suitable for populating a pre-allocated array buffer. If you just want to create a new <code>Uint8Array</code> object from a base64-encoded string, use the static method <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array/fromBase64\"><code>Uint8Array.fromBase64()</code></a> instead.",
      "parameters": {
        "string": "A base64 string encoding bytes to write into a <code>Uint8Array</code>. It has the same requirements as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array/fromBase64#string\"><code>string</code> parameter of <code>Uint8Array.fromBase64()</code></a>. Note that the string is only read up to the point where the array is filled, so any invalid base64 syntax after that point is ignored.",
        "options": "An object customizing the base64 string interpretation process. It has the same requirements as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array/fromBase64#options\"><code>options</code> parameter of <code>Uint8Array.fromBase64()</code></a>."
      },
      "returns": "An object containing the following properties:\n<dl>\n<dt id=\"read\"><a href=\"#read\"><code>read</code></a></dt>\n<dd>\n<p>The number of base64 characters read from the input string. If the decoded data fits into the array, this is the length of the input string (including padding); otherwise, it is the length up to the last complete 4-character chunk that fits into the array. Chunks will never be split (because the remaining bits cannot be partially \"put back\" into the base64 without completely re-encoding it); if the next chunk cannot fit into the remainder of the array, it will be entirely unread, resulting in the last one or two bytes of the array not being written.\n</dd>\n<dt id=\"written\"><a href=\"#written\"><code>written</code></a></dt>\n<dd>\n<p>The number of bytes written to the <code>Uint8Array</code>. Will never be greater than this <code>Uint8Array</code>'s <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\"><code>byteLength</code></a>.\n</dd>\n</dl>",
      "throws": {
        "SyntaxError": "Thrown if the input string contains characters outside the specified alphabet, or if the last chunk does not satisfy the <code>lastChunkHandling</code> option.",
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>The input string is not a string.</li>\n<li>The <code>options</code> object is not an object or <code>undefined</code>.</li>\n<li>The options are not of the expected values or <code>undefined</code>.</li>\n</ul>"
      }
    },
    "uint8array.setfromhex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/setfromhex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "133",
        "FirefoxAndroid": "133",
        "Safari": "18.2",
        "SafariIOS": "18.2"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>setFromHex()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> instances populates this <code>Uint8Array</code> object with bytes from a hex-encoded string, returning an object indicating how many bytes were read and written.\n<p>This method parses the string into a byte array. To convert the string into a single number, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a> function with <code>radix</code> set to <code>16</code> instead.",
      "parameters": {
        "string": "A hexadecimal string encoding bytes to write into a <code>Uint8Array</code>. The string must:\n<ul>\n<li>Have an even number of characters because two characters encode one byte.</li>\n<li>Only contain characters in the hexadecimal alphabet, which includes 0–9 and A–F (case-insensitive).</li>\n<li>Not contain whitespace (unlike <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array/setFromBase64\"><code>Uint8Array.prototype.setFromBase64()</code></a>).</li>\n</ul>\n<p>Note that the string is only read up to the point where the array is filled, so any invalid hex syntax after that point is ignored."
      },
      "returns": "An object containing the following properties:\n<dl>\n<dt id=\"read\"><a href=\"#read\"><code>read</code></a></dt>\n<dd>\n<p>The number of hex characters read from the input string. If the decoded data fits into the array, it is the length of the input string: otherwise, it is the number of complete hex characters that fit into the array.\n</dd>\n<dt id=\"written\"><a href=\"#written\"><code>written</code></a></dt>\n<dd>\n<p>The number of bytes written to the <code>Uint8Array</code>. Will never be greater than this <code>Uint8Array</code>'s <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\"><code>byteLength</code></a>.\n</dd>\n</dl>",
      "throws": {
        "SyntaxError": "Thrown if the input string contains characters outside the hex alphabet, or its length is odd.",
        "TypeError": "Thrown if the input string is not a string."
      }
    },
    "uint8array.tobase64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/tobase64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "133",
        "FirefoxAndroid": "133",
        "Safari": "18.2",
        "SafariIOS": "18.2"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>toBase64()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> instances returns a <a href=\"$MDN_URL$/Glossary/Base64\">base64</a>-encoded string based on the data in this <code>Uint8Array</code> object.\n<p>This method should be preferred over <a href=\"$MDN_URL$/Web/API/Window/btoa\"><code>Window.btoa()</code></a>, especially if you already have a <code>Uint8Array</code> holding the object, because you don't need to convert it to a string first.",
      "parameters": {
        "options": "An object customizing the base64 string format. It can contain the following properties:\n<dl>\n<dt id=\"alphabet\"><a href=\"#alphabet\"><code>alphabet</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A string specifying the base64 alphabet to use. It can be one of the following:\n<dl>\n<dt id=\"base64\"><a href=\"#base64\"><code>\"base64\"</code> (default)</a></dt>\n<dd>\n<p>Encode input with the standard base64 alphabet, which uses <code>+</code> and <code>/</code>.\n</dd>\n<dt id=\"base64url\"><a href=\"#base64url\"><code>\"base64url\"</code></a></dt>\n<dd>\n<p>Encode input with the URL-safe base64 alphabet, which uses <code>-</code> and <code>_</code>.\n</dd>\n</dl>\n</dd>\n<dt id=\"omitpadding\"><a href=\"#omitpadding\"><code>omitPadding</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A boolean specifying whether to omit padding characters (<code>=</code>) at the end of the base64 string. The default is <code>false</code>.\n</dd>\n</dl>"
      },
      "returns": "A base64-encoded string representing the data in the <code>Uint8Array</code>.",
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>The <code>options</code> object is not an object or <code>undefined</code>.</li>\n<li>The <code>options.alphabet</code> is not of the expected values or <code>undefined</code>.</li>\n</ul>"
      }
    },
    "uint8array.tohex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/tohex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "133",
        "FirefoxAndroid": "133",
        "Safari": "18.2",
        "SafariIOS": "18.2"
      },
      "baseline": {
        "level": "NONE"
      },
      "doc": "The <strong><code>toHex()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> instances returns a hex-encoded string based on the data in this <code>Uint8Array</code> object.\n<p>This method creates strings from a byte array. To convert individual numbers into hex, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString()</code></a> method with <code>radix</code> set to <code>16</code> instead.",
      "returns": "A hex-encoded string representing the data in the <code>Uint8Array</code>."
    },
    "uint8array.uint8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/uint8array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Uint8Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "uint8clampedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8clampedarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Uint8ClampedArray</code></strong> typed array represents an array of 8-bit unsigned integers clamped to 0–255. The contents are initialized to <code>0</code> unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Uint8ClampedArray</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "uint8clampedarray.uint8clampedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8clampedarray/uint8clampedarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "4",
        "FirefoxAndroid": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>Uint8ClampedArray()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\"><code>Uint8ClampedArray</code></a> objects. The contents are initialized to <code>0</code> unless initialization data is explicitly provided.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases:\n<ul>\n<li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li>\n<li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li>\n</ul>",
        "RangeError": "Thrown in one of the following cases:\n<ul>\n<li>The new typed array's length is too large.</li>\n<li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li>\n<li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li>\n<li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li>\n</ul>"
      }
    },
    "undefined": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/undefined",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>undefined</code></strong> global property represents the primitive\nvalue <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures#undefined_type\"><code>undefined</code></a>. It is one of JavaScript's\n<a href=\"$MDN_URL$/Glossary/Primitive\">primitive types</a>."
    },
    "unescape": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/unescape",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "FirefoxAndroid": "4",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\">\n<p><strong>Note:</strong> <code>unescape()</code> is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\"><code>decodeURIComponent()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/decodeURI\"><code>decodeURI()</code></a> if possible.\n</div>\n<p>The <strong><code>unescape()</code></strong> function computes a new string in which hexadecimal escape sequences are replaced with the characters that they represent. The escape sequences might be introduced by a function like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/escape\"><code>escape()</code></a>.",
      "parameters": {
        "str": "A string to be decoded."
      },
      "returns": "A new string in which certain characters have been unescaped."
    },
    "urierror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/urierror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>URIError</code></strong> object represents an error when a global URI handling function was used in a wrong way.\n<p><code>URIError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/Window/structuredClone\" ><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>URIError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "urierror.urierror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/urierror/urierror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "1",
        "ChromeAndroid": "18",
        "Edge": "12",
        "Firefox": "1",
        "FirefoxAndroid": "4",
        "Opera": "5",
        "Safari": "1",
        "SafariIOS": "1",
        "Nodejs": "",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>URIError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/URIError\"><code>URIError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties:\n<dl>\n<dt id=\"cause\"><a href=\"#cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></a></dt>\n<dd>\n<p>A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n</dd>\n</dl>",
        "fileName": "The name of the file containing the code that caused the exception.",
        "lineNumber": "The line number of the code that caused the exception."
      }
    },
    "weakmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "6",
        "FirefoxAndroid": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "A <strong><code>WeakMap</code></strong> is a collection of key/value pairs whose keys must be objects or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbols</a>, with values of any arbitrary <a href=\"$MDN_URL$/Web/JavaScript/Guide/Data_structures\">JavaScript type</a>, and which does not create strong references to its keys. That is, an object's presence as a key in a <code>WeakMap</code> does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any <code>WeakMap</code> become candidates for garbage collection as well — as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a <code>WeakMap</code> key is symbol — more specifically, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbols</a> — because non-registered symbols are guaranteed to be unique and cannot be re-created.\n<p><code>WeakMap</code> allows associating data to objects in a way that doesn't prevent the key objects from being collected, even if the values reference the keys. However, a <code>WeakMap</code> doesn't allow observing the liveness of its keys, which is why it doesn't allow enumeration; if a <code>WeakMap</code> exposed any method to obtain a list of its keys, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> rather than a <code>WeakMap</code>.\n<p>You can learn more about <code>WeakMap</code> in the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections#weakmap_object\">WeakMap object</a> section of the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a> guide."
    },
    "weakmap.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/delete",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "6",
        "FirefoxAndroid": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>delete()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> instances removes the specified element from this <code>WeakMap</code>.",
      "parameters": {
        "key": "The key of the element to remove from the <code>WeakMap</code> object."
      },
      "returns": "<code>true</code> if an element in the <code>WeakMap</code> object has been removed successfully. <code>false</code> if the key is not found in the <code>WeakMap</code>. Always returns <code>false</code> if <code>key</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakmap.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/get",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "6",
        "FirefoxAndroid": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>get()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> instances returns a specified element from this <code>WeakMap</code>.",
      "parameters": {
        "key": "The key of the element to return from the <code>WeakMap</code> object."
      },
      "returns": "The element associated with the specified key in the <code>WeakMap</code> object. If\nthe key can't be found, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned. Always returns\n<code>undefined</code> if <code>key</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakmap.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "6",
        "FirefoxAndroid": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>has()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> instances returns a boolean indicating whether an\nelement with the specified key exists in this <code>WeakMap</code> or not.",
      "parameters": {
        "key": "The key of the element to test for presence in the <code>WeakMap</code> object."
      },
      "returns": "Returns <code>true</code> if an element with the specified key exists in the <code>WeakMap</code> object; otherwise <code>false</code>. Always returns <code>false</code> if <code>key</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakmap.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "6",
        "FirefoxAndroid": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>set()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> instances adds a new element with a specified key\nand value to this <code>WeakMap</code>.",
      "parameters": {
        "key": "Must be either an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>. The key of the entry to add to the <code>WeakMap</code> object.",
        "value": "Any value representing the value of the entry to add to the <code>WeakMap</code> object."
      },
      "returns": "The <code>WeakMap</code> object.",
      "throws": {
        "TypeError": "Thrown if <code>key</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      }
    },
    "weakmap.weakmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/weakmap",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "6",
        "FirefoxAndroid": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-07-29",
        "highDate": "2018-01-29"
      },
      "doc": "The <strong><code>WeakMap()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> objects.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> or other <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable object</a> that produces a two-element array-like object whose first element is a value that will be used as a <code>WeakMap</code> key and whose second element is the value to associate with that key. Each key-value pair will be added to the new <code>WeakMap</code>. <code>null</code> is treated as <code>undefined</code>."
      }
    },
    "weakref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "A <strong><code>WeakRef</code></strong> object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected."
    },
    "weakref.deref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref/deref",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>deref()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakRef\"><code>WeakRef</code></a> instances returns this <code>WeakRef</code>'s target value, or <code>undefined</code> if the target value has been garbage-collected.",
      "returns": "The target value of the WeakRef, which is either an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>. Returns <code>undefined</code> if the value has been garbage-collected."
    },
    "weakref.weakref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref/weakref",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "FirefoxAndroid": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2021-04-26",
        "highDate": "2023-10-26"
      },
      "doc": "The <strong><code>WeakRef()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakRef\"><code>WeakRef</code></a> objects.",
      "parameters": {
        "target": "The target value the WeakRef should refer to (also called the <em>referent</em>). Must be an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      },
      "returns": "A new <code>WeakRef</code> object referring to the given target value.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      }
    },
    "weakset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "34",
        "FirefoxAndroid": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "A <strong><code>WeakSet</code></strong> is a collection of garbage-collectable values, including objects and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbols</a>. A value in the <code>WeakSet</code> may only occur once. It is unique in the <code>WeakSet</code>'s collection."
    },
    "weakset.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/add",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "34",
        "FirefoxAndroid": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>add()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> instances appends a new object to the end of this <code>WeakSet</code>.",
      "parameters": {
        "value": "Must be either an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>. The value to add to the <code>WeakSet</code> collection."
      },
      "returns": "The <code>WeakSet</code> object.",
      "throws": {
        "TypeError": "Thrown if <code>value</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      }
    },
    "weakset.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/delete",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "34",
        "FirefoxAndroid": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>delete()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> instances removes the specified element from this <code>WeakSet</code>.",
      "parameters": {
        "value": "The value to remove from the <code>WeakSet</code> object."
      },
      "returns": "<code>true</code> if an element in the <code>WeakSet</code> object has been removed successfully. <code>false</code> if the <code>value</code> is not found in the <code>WeakSet</code>. Always returns <code>false</code> if <code>value</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakset.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "34",
        "FirefoxAndroid": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>has()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> instances returns a boolean indicating whether an\nobject exists in this <code>WeakSet</code> or not.",
      "parameters": {
        "value": "The value to test for presence in the <code>WeakSet</code>."
      },
      "returns": "Returns <code>true</code> if an element with the specified value exists in the <code>WeakSet</code> object; otherwise <code>false</code>. Always returns <code>false</code> if <code>value</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakset.weakset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/weakset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "12",
        "Firefox": "34",
        "FirefoxAndroid": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "baseline": {
        "level": "HIGH",
        "lowDate": "2015-09-30",
        "highDate": "2018-03-30"
      },
      "doc": "The <strong><code>WeakSet()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> objects.",
      "parameters": {
        "iterable": "If an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\">iterable object</a> is passed, all of its elements will be added to the new <code>WeakSet</code>. <code>null</code> is treated as <code>undefined</code>."
      }
    }
  }
}