{
  "license": {
    "name": "CC-BY-SA 2.5",
    "url": "https://creativecommons.org/licenses/by-sa/2.5/"
  },
  "author": {
    "name": "Mozzila Contributors",
    "url": "https://github.com/mdn/content"
  },
  "lang": "en-us",
  "symbols": {
    "aggregateerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "79",
        "Opera": "71",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "doc": "The <strong><code>AggregateError</code></strong> object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/any\"><code>Promise.any()</code></a>, when all promises passed to it reject.\n<p><code>AggregateError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "aggregateerror.aggregateerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror/aggregateerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "79",
        "Opera": "71",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "doc": "The <strong><code>AggregateError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a> objects.",
      "parameters": {
        "errors": "An iterable of errors, may not actually be <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instances.",
        "message": "An optional human-readable description of the aggregate error.",
        "options": "An object that has the following properties: <dl> <dt id=\"cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. </dd> </dl>"
      }
    },
    "aggregateerror.errors": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror/errors",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "79",
        "Opera": "71",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "doc": "The <strong><code>errors</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a> instance contains an array representing the errors that were aggregated."
    },
    "array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Array</code></strong> object, as with arrays in other programming languages, enables <a href=\"$MDN_URL$/Learn/JavaScript/First_steps/Arrays\">storing a collection of multiple items under a single variable name</a>, and has members for <a href=\"#examples\">performing common array operations</a>."
    },
    "array.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows arrays to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator object</a> that yields the value of each index in the array.\n<p>The initial value of this property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values</code></a> property.",
      "returns": "The same return value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values()</code></a>: a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the value of each index in the array."
    },
    "array.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/@@species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "79",
        "Firefox": "48",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Array[@@species]</code></strong> static accessor property returns the constructor used to construct return values from array methods.\n<div class=\"notecard warning\" id=\"sect1\">\n<p><strong>Warning:</strong> The existence of <code>@@species</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible. Modern array methods, such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"><code>toReversed()</code></a>, do not use <code>@@species</code> and always return a new <code>Array</code> base class instance.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get @@species</code> was called. The return value is used to construct return values from array methods that create new arrays."
    },
    "array.@@unscopables": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/@@unscopables",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "48",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>@@unscopables</code></strong> data property of <code>Array.prototype</code> is shared by all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances. It contains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/with\"><code>with</code></a> statement-binding purposes."
    },
    "array.array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> objects.",
      "parameters": {
        "elementN": "A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the <code>Array</code> constructor and that argument is a number (see the <code>arrayLength</code> parameter below). Note that this special case only applies to JavaScript arrays created with the <code>Array</code> constructor, not array literals created with the bracket syntax.",
        "arrayLength": "If the only argument passed to the <code>Array</code> constructor is an integer between 0 and 2<sup>32</sup> - 1 (inclusive), this returns a new JavaScript array with its <code>length</code> property set to that number (<strong>Note:</strong> this implies an array of <code>arrayLength</code> empty slots, not slots with actual <code>undefined</code> values — see <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#sparse_arrays\">sparse arrays</a>)."
      },
      "throws": {
        "RangeError": "Thrown if there's only one argument (<code>arrayLength</code>) that is a number, but its value is not an integer or not between 0 and 2<sup>32</sup> - 1 (inclusive)."
      }
    },
    "array.at": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/at",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "92",
        "ChromeAndroid": "92",
        "Edge": "92",
        "Firefox": "90",
        "Opera": "78",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "16.6.0",
        "Deno": "1.12"
      },
      "doc": "The <strong><code>at()</code></strong> method takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.",
      "parameters": {
        "index": "Zero-based index of the array element to be returned, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. Negative index counts back from the end of the array — if <code>index &lt; 0</code>, <code>index + array.length</code> is accessed."
      },
      "returns": "The element in the array matching the given index. Always returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if <code>index &lt; -array.length</code> or <code>index &gt;= array.length</code> without attempting to access the corresponding property."
    },
    "array.concat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/concat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>concat()</code></strong> method is used to merge two or more arrays.\nThis method does not change the existing arrays, but instead returns a new array.",
      "parameters": {
        "valueN": "Arrays and/or values to concatenate into a new array. If all <code>valueN</code> parameters are omitted, <code>concat</code> returns a <a href=\"$MDN_URL$/Glossary/Shallow_copy\">shallow copy</a> of the existing array on which it is called. See the description below for more details."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance."
    },
    "array.copywithin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/copywithin",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "32",
        "Opera": "32",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>copyWithin()</code></strong> method shallow copies part of an array to another location in the same array and returns it without modifying its length.",
      "parameters": {
        "target": "Zero-based index at which to copy the sequence to, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>target &lt; 0</code>, <code>target + array.length</code> is used.</li> <li>If <code>target &lt; -array.length</code>, <code>0</code> is used.</li> <li>If <code>target &gt;= array.length</code>, nothing is copied.</li> <li>If <code>target</code> is positioned after <code>start</code> after normalization, copying only happens until the end of <code>array.length</code> (in other words, <code>copyWithin()</code> never extends the array).</li> </ul>",
        "start": "Zero-based index at which to start copying elements from, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>start &lt; 0</code>, <code>start + array.length</code> is used.</li> <li>If <code>start &lt; -array.length</code>, <code>0</code> is used.</li> <li>If <code>start &gt;= array.length</code>, nothing is copied.</li> </ul>",
        "end": "Zero-based index at which to end copying elements from, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>copyWithin()</code> copies up to but not including <code>end</code>. <ul> <li>Negative index counts back from the end of the array — if <code>end &lt; 0</code>, <code>end + array.length</code> is used.</li> <li>If <code>end &lt; -array.length</code>, <code>0</code> is used.</li> <li>If <code>end &gt;= array.length</code> or <code>end</code> is omitted, <code>array.length</code> is used, causing all elements until the end to be copied.</li> <li>If <code>end</code> is positioned before or at <code>start</code> after normalization, nothing is copied.</li> </ul>"
      },
      "returns": "The modified array."
    },
    "array.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "28",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>entries()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that contains the key/value pairs for each index in the array.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "array.every": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/every",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "1.5",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>every()</code></strong> method tests whether\nall elements in the array pass the test implemented by the provided function. It\nreturns a Boolean value.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>every()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<code>true</code> if <code>callbackFn</code> returns a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value for every array element. Otherwise, <code>false</code>."
    },
    "array.fill": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/fill",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "31",
        "Opera": "32",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>fill()</code></strong> method changes all elements in an array to a static value, from a start index (default <code>0</code>) to an end index (default <code>array.length</code>).\nIt returns the modified array.",
      "parameters": {
        "value": "Value to fill the array with. Note all elements in the array will be this exact value: if <code>value</code> is an object, each slot in the array will reference that object.",
        "start": "Zero-based index at which to start filling, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>start &lt; 0</code>, <code>start + array.length</code> is used.</li> <li>If <code>start &lt; -array.length</code> or <code>start</code> is omitted, <code>0</code> is used.</li> <li>If <code>start &gt;= array.length</code>, no index is filled.</li> </ul>",
        "end": "Zero-based index at which to end filling, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>fill()</code> fills up to but not including <code>end</code>. <ul> <li>Negative index counts back from the end of the array — if <code>end &lt; 0</code>, <code>end + array.length</code> is used.</li> <li>If <code>end &lt; -array.length</code>, <code>0</code> is used.</li> <li>If <code>end &gt;= array.length</code> or <code>end</code> is omitted, <code>array.length</code> is used, causing all indices until the end to be filled.</li> <li>If <code>end</code> is positioned before or at <code>start</code> after normalization, no index is filled.</li> </ul>"
      },
      "returns": "The modified array, filled with <code>value</code>."
    },
    "array.filter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/filter",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "1.5",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>filter()</code></strong> method creates a <a href=\"$MDN_URL$/Glossary/Shallow_copy\">shallow copy</a> of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to keep the element in the resulting array, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>filter()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A <a href=\"$MDN_URL$/Glossary/Shallow_copy\">shallow copy</a> of a portion of the given array, filtered down to just the elements from the given array that pass the test implemented by the provided function. If no elements pass the test, an empty array will be returned."
    },
    "array.find": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/find",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "25",
        "Opera": "32",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>find()</code></strong> method returns the first element in the provided array that satisfies the provided testing function.\nIf no values satisfy the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.\n<ul>\n<li>If you need the <strong>index</strong> of the found element in the array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>.</li>\n<li>\nIf you need to find the <strong>index of a value</strong>, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a>.\n(It's similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>, but checks each element for equality with the value instead of using a testing function.)\n</li>\n<li>\nIf you need to find if a value <strong>exists</strong> in an array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a>.\nAgain, it checks each element for equality with the value instead of using a testing function.\n</li>\n<li>If you need to find if any element satisfies the provided testing function, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some()</code></a>.</li>\n</ul>",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>find()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The first element in the array that satisfies the provided testing function.\n  Otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned."
    },
    "array.findindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/findindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "25",
        "Opera": "32",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>findIndex()</code></strong> method returns the index of the first element in an array that satisfies the provided testing function.\nIf no elements satisfy the testing function, -1 is returned.\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a> method, which returns the first element that satisfies the testing function (rather than its index).",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>findIndex()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The index of the first element in the array that passes the test. Otherwise, <code>-1</code>."
    },
    "array.findlast": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/findlast",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "97",
        "ChromeAndroid": "97",
        "Edge": "97",
        "Firefox": "104",
        "Opera": "83",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "18.0.0",
        "Deno": "1.16"
      },
      "doc": "The <strong><code>findLast()</code></strong> method iterates the array in reverse order and returns the value of the first element that satisfies the provided testing function.\nIf no elements satisfy the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.\n<p>If you need to find:\n<ul>\n<li>the <em>first</em> element that matches, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a>.</li>\n<li>the <em>index</em> of the last matching element in the array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>findLastIndex()</code></a>.</li>\n<li>\nthe <em>index of a value</em>, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a>.\n(It's similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>, but checks each element for equality with the value instead of using a testing function.)\n</li>\n<li>\nwhether a value <em>exists</em> in an array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a>.\nAgain, it checks each element for equality with the value instead of using a testing function.\n</li>\n<li>if any element satisfies the provided testing function, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some()</code></a>.</li>\n</ul>",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>findLast()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The value of the element in the array with the highest index value that satisfies the provided testing function; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no matching element is found."
    },
    "array.findlastindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/findlastindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "97",
        "ChromeAndroid": "97",
        "Edge": "97",
        "Firefox": "104",
        "Opera": "83",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "18.0.0",
        "Deno": "1.16"
      },
      "doc": "The <strong><code>findLastIndex()</code></strong> method iterates the array in reverse order and returns the index of the first element that satisfies the provided testing function.\nIf no elements satisfy the testing function, -1 is returned.\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>findLast()</code></a> method, which returns the value of last element that satisfies the testing function (rather than its index).",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>findLastIndex()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The index of the last (highest-index) element in the array that passes the test.\n  Otherwise -1 if no matching element is found."
    },
    "array.flat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/flat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "69",
        "ChromeAndroid": "69",
        "Edge": "79",
        "Firefox": "62",
        "Opera": "56",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "11.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>flat()</code></strong> method creates a new array with all sub-array\nelements concatenated into it recursively up to the specified depth.",
      "parameters": {
        "depth": "The depth level specifying how deep a nested array structure should be flattened. Defaults to 1."
      },
      "returns": "A new array with the sub-array elements concatenated into it."
    },
    "array.flatmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/flatmap",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "69",
        "ChromeAndroid": "69",
        "Edge": "79",
        "Firefox": "62",
        "Opera": "56",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "11.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>flatMap()</code></strong> method returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a> followed by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a> of depth 1 (<code>arr.map(...args).flat()</code>), but slightly more efficient than calling those two methods separately.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return an array containing new elements of the new array, or a single non-array value to be added to the new array. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>flatMap()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A new array with each element being the result of the callback function and flattened\n  by a depth of 1."
    },
    "array.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/foreach",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "1.5",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>forEach()</code></strong> method executes a provided function once\nfor each array element.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. Its return value is discarded. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>forEach()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<code>undefined</code>."
    },
    "array.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/from",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "32",
        "Opera": "32",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Array.from()</code></strong> static method creates a new, shallow-copied <code>Array</code> instance from an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> or <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like</a> object.",
      "parameters": {
        "arrayLike": "An iterable or array-like object to convert to an array.",
        "mapFn": "A function to call on every element of the array. If provided, every value to be added to the array is first passed through this function, and <code>mapFn</code>'s return value is added to the array instead. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> </dl>",
        "thisArg": "Value to use as <code>this</code> when executing <code>mapFn</code>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance."
    },
    "array.fromasync": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/fromasync",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "115",
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "The <strong><code>Array.fromAsync()</code></strong> static method creates a new, shallow-copied <code>Array</code> instance from an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a>, or <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like</a> object.",
      "parameters": {
        "arrayLike": "An async iterable, iterable, or array-like object to convert to an array.",
        "mapFn": "A function to call on every element of the array. If provided, every value to be added to the array is first passed through this function, and <code>mapFn</code>'s return value is added to the array instead (after being <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/await\">awaited</a>). The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. Because all elements are first <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/await\">awaited</a>, this value will never be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise#thenables\">thenable</a>. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> </dl>",
        "thisArg": "Value to use as <code>this</code> when executing <code>mapFn</code>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> whose fulfillment value is a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance."
    },
    "array.group": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/group",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>group()</code></strong> method groups the elements of the calling array according to the string values returned by a provided testing function.\nThe returned object has separate properties for each group, containing arrays with the elements in the group.\n<p>This method should be used when group names can be represented by strings.\nIf you need to group elements using a key that is some arbitrary value, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/groupToMap\"><code>Array.prototype.groupToMap()</code></a> instead.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a value that can get coerced into a property key (string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a>) indicating the group of the current element. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>group()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects\"><code>null</code>-prototype object</a> with properties for all groups, each assigned to an array containing the elements of the associated group."
    },
    "array.grouptomap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/grouptomap",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>groupToMap()</code></strong> method groups the elements of the calling array using the values returned by a provided testing function.\nThe final returned <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> uses the unique values from the test function as keys, which can be used to get the array of elements in each group.\n<p>The method is primarily useful when grouping elements that are associated with an object, and in particular when that object might change over time.\nIf the object is invariant, you might instead represent it using a string, and group elements with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/group\"><code>Array.prototype.group()</code></a>.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a value (<a href=\"$MDN_URL$/Glossary/Object\">object</a> or <a href=\"$MDN_URL$/Glossary/Primitive\">primitive</a>) indicating the group of the current element. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>groupToMap()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> object with keys for each group, each assigned to an array containing the elements of the associated group."
    },
    "array.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/includes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "14",
        "Firefox": "43",
        "Opera": "34",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>includes()</code></strong> method determines whether an array\nincludes a certain value among its entries, returning <code>true</code> or\n<code>false</code> as appropriate.",
      "parameters": {
        "searchElement": "The value to search for.",
        "fromIndex": "Zero-based index at which to start searching, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>fromIndex &lt; 0</code>, <code>fromIndex + array.length</code> is used. However, the array is still searched from front to back in this case.</li> <li>If <code>fromIndex &lt; -array.length</code> or <code>fromIndex</code> is omitted, <code>0</code> is used, causing the entire array to be searched.</li> <li>If <code>fromIndex &gt;= array.length</code>, the array is not searched and <code>false</code> is returned.</li> </ul>"
      },
      "returns": "A boolean value which is <code>true</code> if the value <code>searchElement</code> is found within the array (or the part of the array indicated by the index <code>fromIndex</code>, if specified)."
    },
    "array.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/indexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "1.5",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>indexOf()</code></strong> method returns the first index at which a\ngiven element can be found in the array, or -1 if it is not present.",
      "parameters": {
        "searchElement": "Element to locate in the array.",
        "fromIndex": "Zero-based index at which to start searching, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>fromIndex &lt; 0</code>, <code>fromIndex + array.length</code> is used. Note, the array is still searched from front to back in this case.</li> <li>If <code>fromIndex &lt; -array.length</code> or <code>fromIndex</code> is omitted, <code>0</code> is used, causing the entire array to be searched.</li> <li>If <code>fromIndex &gt;= array.length</code>, the array is not searched and <code>-1</code> is returned.</li> </ul>"
      },
      "returns": "The first index of the element in the array; <strong>-1</strong> if not found."
    },
    "array.isarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/isarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "10.5",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Array.isArray()</code></strong> static method determines whether the passed value is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>.",
      "parameters": {
        "value": "The value to be checked."
      },
      "returns": "<code>true</code> if <code>value</code> is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>; otherwise, <code>false</code>. <code>false</code> is always returned if <code>value</code> is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance."
    },
    "array.join": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/join",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>join()</code></strong> method creates and\nreturns a new string by concatenating all of the elements in an array\n(or an <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like object</a>),\nseparated by commas or a specified separator string. If the array has\nonly one item, then that item will be returned without using the separator.",
      "parameters": {
        "separator": "Specifies a string to separate each pair of adjacent elements of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma (\",\"). If <code>separator</code> is an empty string, all elements are joined without any characters in between them."
      },
      "returns": "A string with all array elements joined. If <code>arr.length</code> is\n  <code>0</code>, the empty string is returned."
    },
    "array.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/keys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "28",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>keys()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that contains the keys for each index in the array.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "array.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "1.5",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>lastIndexOf()</code></strong> method returns the last index at which\na given element can be found in the array, or -1 if it is not present. The array is\nsearched backwards, starting at <code>fromIndex</code>.",
      "parameters": {
        "searchElement": "Element to locate in the array.",
        "fromIndex": "Zero-based index at which to start searching backwards, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>fromIndex &lt; 0</code>, <code>fromIndex + array.length</code> is used.</li> <li>If <code>fromIndex &lt; -array.length</code>, the array is not searched and <code>-1</code> is returned. You can think of it conceptually as starting at a nonexistent position before the beginning of the array and going backwards from there. There are no array elements on the way, so <code>searchElement</code> is never found.</li> <li>If <code>fromIndex &gt;= array.length</code> or <code>fromIndex</code> is omitted, <code>array.length - 1</code> is used, causing the entire array to be searched. You can think of it conceptually as starting at a nonexistent position beyond the end of the array and going backwards from there. It eventually reaches the real end position of the array, at which point it starts searching backwards through the actual array elements.</li> </ul>"
      },
      "returns": "The last index of the element in the array; <strong>-1</strong> if not found."
    },
    "array.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/length",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>length</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance represents the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array."
    },
    "array.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/map",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "1.5",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>map()</code></strong> method <strong>creates\na new array</strong> populated with the results of calling a provided function on\nevery element in the calling array.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. Its return value is added as a single element in the new array. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>map()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A new array with each element being the result of the callback function."
    },
    "array.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/of",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "39",
        "Edge": "",
        "Firefox": "25",
        "Opera": "26",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Array.of()</code></strong> static method creates a new <code>Array</code>\ninstance from a variable number of arguments, regardless of number or type of the\narguments.",
      "parameters": {
        "elementN": "Elements used to create the array."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance."
    },
    "array.pop": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/pop",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>pop()</code></strong> method removes the <strong>last</strong>\nelement from an array and returns that element. This method changes the length of the\narray.",
      "returns": "The removed element from the array; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the array is empty."
    },
    "array.push": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/push",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>push()</code></strong> method adds the specified elements to the end of\nan array and returns the new length of the array.",
      "parameters": {
        "elementN": "The element(s) to add to the end of the array."
      },
      "returns": "The new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property of the object upon which the method was called."
    },
    "array.reduce": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reduce",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "3.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>reduce()</code></strong> method executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element.\nThe final result of running the reducer across all elements of the array is a single value.\n<p>The first time that the callback is run there is no \"return value of the previous calculation\".\nIf supplied, an initial value may be used in its place.\nOtherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).\n<p>Perhaps the easiest-to-understand case for <code>reduce()</code> is to return the sum of all the elements in an array:",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. Its return value becomes the value of the <code>accumulator</code> parameter on the next invocation of <code>callbackFn</code>. For the last invocation, the return value becomes the return value of <code>reduce()</code>. The function is called with the following arguments: <dl> <dt id=\"accumulator\"><code>accumulator</code></dt> <dd> <p>The value resulting from the previous call to <code>callbackFn</code>. On first call, <code>initialValue</code> if specified, otherwise the value of <code>array[0]</code>. </dd> <dt id=\"currentvalue\"><code>currentValue</code></dt> <dd> <p>The value of the current element. On first call, the value of <code>array[0]</code> if an <code>initialValue</code> was specified, otherwise the value of <code>array[1]</code>. </dd> <dt id=\"currentindex\"><code>currentIndex</code></dt> <dd> <p>The index position of <code>currentValue</code> in the array. On first call, <code>0</code> if <code>initialValue</code> was specified, otherwise <code>1</code>. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>reduce()</code> was called upon. </dd> </dl>",
        "initialValue": "A value to which <code>accumulator</code> is initialized the first time the callback is called. If <code>initialValue</code> is specified, <code>callbackFn</code> starts executing with the first value in the array as <code>currentValue</code>. If <code>initialValue</code> is <em>not</em> specified, <code>accumulator</code> is initialized to the first value in the array, and <code>callbackFn</code> starts executing with the second value in the array as <code>currentValue</code>. In this case, if the array is empty (so that there's no first value to return as <code>accumulator</code>), an error is thrown."
      },
      "returns": "The value that results from running the \"reducer\" callback function to completion over the entire array.",
      "throws": {
        "TypeError": "Thrown if the array contains no elements and <code>initialValue</code> is not provided."
      }
    },
    "array.reduceright": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reduceright",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "3.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>reduceRight()</code></strong> method applies a function against an\naccumulator and each value of the array (from right-to-left) to reduce it to a single\nvalue.\n<p>See also <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>Array.prototype.reduce()</code></a> for left-to-right.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. Its return value becomes the value of the <code>accumulator</code> parameter on the next invocation of <code>callbackFn</code>. For the last invocation, the return value becomes the return value of <code>reduceRight()</code>. The function is called with the following arguments: <dl> <dt id=\"accumulator\"><code>accumulator</code></dt> <dd> <p>The value resulting from the previous call to <code>callbackFn</code>. On first call, <code>initialValue</code> if specified, otherwise the array's last element's value. </dd> <dt id=\"currentvalue\"><code>currentValue</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>reduceRight()</code> was called upon. </dd> </dl>",
        "initialValue": "Value to use as accumulator to the first call of the <code>callbackFn</code>. If no initial value is supplied, the last element in the array will be used and skipped. Calling <code>reduceRight()</code> on an empty array without an initial value creates a <code>TypeError</code>."
      },
      "returns": "The value that results from the reduction."
    },
    "array.reverse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reverse",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>reverse()</code></strong> method reverses an array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em> and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first. In other words, elements order in the array will be turned towards the direction opposite to that previously stated.\n<p>To reverse the elements in an array without mutating the original array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"><code>toReversed()</code></a>.",
      "returns": "The reference to the original array, now reversed. Note that the array is reversed <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em>, and no copy is made."
    },
    "array.shift": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/shift",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>shift()</code></strong> method removes the <strong>first</strong>\nelement from an array and returns that removed element. This method changes the length\nof the array.",
      "returns": "The removed element from the array; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the array is empty."
    },
    "array.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>slice()</code></strong> method returns a <a href=\"$MDN_URL$/Glossary/Shallow_copy\">shallow copy</a> of a portion of\nan array into a new array object selected from <code>start</code> to <code>end</code>\n(<code>end</code> not included) where <code>start</code> and <code>end</code> represent\nthe index of items in that array. The original array will not be modified.",
      "parameters": {
        "start": "Zero-based index at which to start extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>start &lt; 0</code>, <code>start + array.length</code> is used.</li> <li>If <code>start &lt; -array.length</code> or <code>start</code> is omitted, <code>0</code> is used.</li> <li>If <code>start &gt;= array.length</code>, nothing is extracted.</li> </ul>",
        "end": "Zero-based index at which to end extraction, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <code>slice()</code> extracts up to but not including <code>end</code>. <ul> <li>Negative index counts back from the end of the array — if <code>end &lt; 0</code>, <code>end + array.length</code> is used.</li> <li>If <code>end &lt; -array.length</code>, <code>0</code> is used.</li> <li>If <code>end &gt;= array.length</code> or <code>end</code> is omitted, <code>array.length</code> is used, causing all elements until the end to be extracted.</li> <li>If <code>end</code> is positioned before or at <code>start</code> after normalization, nothing is extracted.</li> </ul>"
      },
      "returns": "A new array containing the extracted elements."
    },
    "array.some": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/some",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "1.5",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>some()</code></strong> method tests whether\nat least one element in the array passes the test implemented by the provided\nfunction. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>some()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<code>true</code> if the callback function returns a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value for at least one element in the array. Otherwise, <code>false</code>."
    },
    "array.sort": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/sort",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>sort()</code></strong> method sorts the elements of an array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em> and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.\n<p>The time and space complexity of the sort cannot be guaranteed as it depends on the\nimplementation.\n<p>To sort the elements in an array without mutating the original array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"><code>toSorted()</code></a>.",
      "parameters": {
        "compareFn": "A function that defines the sort order. The return value should be a number whose sign indicates the relative order of the two elements: negative if <code>a</code> is less than <code>b</code>, positive if <code>a</code> is greater than <code>b</code>, and zero if they are equal. <code>NaN</code> is treated as <code>0</code>. The function is called with the following arguments: <dl> <dt id=\"a\"><code>a</code></dt> <dd> <p>The first element for comparison. Will never be <code>undefined</code>. </dd> <dt id=\"b\"><code>b</code></dt> <dd> <p>The second element for comparison. Will never be <code>undefined</code>. </dd> </dl> <p>If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value."
      },
      "returns": "The reference to the original array, now sorted. Note that the array is sorted <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a></em>, and no copy is made."
    },
    "array.splice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/splice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>splice()</code></strong> method changes the contents of an array by\nremoving or replacing existing elements and/or adding new elements <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" class=\"external\" target=\"_blank\">in place</a>.\n<p>To create a new array with a segment removed and/or replaced without mutating the original array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toSpliced\"><code>toSpliced()</code></a>. To access part of an array without modifying it, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a>.",
      "parameters": {
        "start": "Zero-based index at which to start changing the array, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>start &lt; 0</code>, <code>start + array.length</code> is used.</li> <li>If <code>start &lt; -array.length</code>, <code>0</code> is used.</li> <li>If <code>start &gt;= array.length</code>, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided.</li> <li>If <code>start</code> is omitted (and <code>splice()</code> is called with no arguments), nothing is deleted. This is different from passing <code>undefined</code>, which is converted to <code>0</code>.</li> </ul>",
        "deleteCount": "An integer indicating the number of elements in the array to remove from <code>start</code>. <p>If <code>deleteCount</code> is omitted, or if its value is greater than or equal to the number of elements after the position specified by <code>start</code>, then all the elements from <code>start</code> to the end of the array will be deleted. However, if you wish to pass any <code>itemN</code> parameter, you should pass <code>Infinity</code> as <code>deleteCount</code> to delete all elements after <code>start</code>, because an explicit <code>undefined</code> gets <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted</a> to <code>0</code>. <p>If <code>deleteCount</code> is <code>0</code> or negative, no elements are removed. In this case, you should specify at least one new element (see below).",
        "item1, …, itemN": "The elements to add to the array, beginning from <code>start</code>. <p>If you do not specify any elements, <code>splice()</code> will only remove elements from the array."
      },
      "returns": "An array containing the deleted elements.\n<p>If only one element is removed, an array of one element is returned.\n<p>If no elements are removed, an empty array is returned."
    },
    "array.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method returns a string representing\nthe elements of the array. The elements are converted to Strings using their\n<code>toLocaleString</code> methods and these Strings are separated by a locale-specific\nString (such as a comma \",\").",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object with configuration properties. For numbers, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code></a>; for dates, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\"><code>Date.prototype.toLocaleString()</code></a>."
      },
      "returns": "A string representing the elements of the array."
    },
    "array.toreversed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/toreversed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "doc": "The <strong><code>toReversed()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> counterpart of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>reverse()</code></a> method. It returns a new array with the elements in reversed order.",
      "returns": "A new array containing the elements in reversed order."
    },
    "array.tosorted": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tosorted",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "doc": "The <strong><code>toSorted()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>sort()</code></a> method. It returns a new array with the elements sorted in ascending order.",
      "parameters": {
        "compareFn": "Specifies a function that defines the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value. <dl> <dt id=\"a\"><code>a</code></dt> <dd> <p>The first element for comparison. </dd> <dt id=\"b\"><code>b</code></dt> <dd> <p>The second element for comparison. </dd> </dl>"
      },
      "returns": "A new array with the elements sorted in ascending order."
    },
    "array.tospliced": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tospliced",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "doc": "The <strong><code>toSpliced()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> method. It returns a new array with some elements removed and/or replaced at a given index.",
      "parameters": {
        "start": "Zero-based index at which to start changing the array, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>start &lt; 0</code>, <code>start + array.length</code> is used.</li> <li>If <code>start &lt; -array.length</code> or <code>start</code> is omitted, <code>0</code> is used.</li> <li>If <code>start &gt;= array.length</code>, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided.</li> </ul>",
        "deleteCount": "An integer indicating the number of elements in the array to remove from <code>start</code>. <p>If <code>deleteCount</code> is omitted, or if its value is greater than or equal to the number of elements after the position specified by <code>start</code>, then all the elements from <code>start</code> to the end of the array will be deleted. However, if you wish to pass any <code>itemN</code> parameter, you should pass <code>Infinity</code> as <code>deleteCount</code> to delete all elements after <code>start</code>, because an explicit <code>undefined</code> gets <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted</a> to <code>0</code>. <p>If <code>deleteCount</code> is <code>0</code> or negative, no elements are removed. In this case, you should specify at least one new element (see below).",
        "item1, …, itemN": "The elements to add to the array, beginning from <code>start</code>. <p>If you do not specify any elements, <code>toSpliced()</code> will only remove elements from the array."
      },
      "returns": "A new array that consists of all elements before <code>start</code>, <code>item1</code>, <code>item2</code>, …, <code>itemN</code>, and all elements after <code>start + deleteCount</code>."
    },
    "array.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the\nspecified array and its elements.",
      "returns": "A string representing the elements of the array."
    },
    "array.unshift": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/unshift",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>unshift()</code></strong> method adds the specified elements to the\nbeginning of an array and returns the new length of the array.",
      "parameters": {
        "elementN": "The elements to add to the front of the <code>arr</code>."
      },
      "returns": "The new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property of the object upon which the\n  method was called."
    },
    "array.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "66",
        "ChromeAndroid": "66",
        "Edge": "14",
        "Firefox": "60",
        "Opera": "53",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "10.9.0",
        "Deno": ""
      },
      "doc": "The <strong><code>values()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that iterates the value of each item in the array.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "array.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/with",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "doc": "The <strong><code>with()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instances is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation\">bracket notation</a> to change the value of a given index. It returns a new array with the element at the given index replaced with the given value.",
      "parameters": {
        "index": "Zero-based index at which to change the array, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>index &lt; 0</code>, <code>index + array.length</code> is used.</li> <li>If the index after normalization is out of bounds, a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown.</li> </ul>",
        "value": "Any value to be assigned to the given index."
      },
      "returns": "A new array with the element at <code>index</code> replaced with <code>value</code>.",
      "throws": {
        "RangeError": "Thrown if <code>index &gt;= array.length</code> or <code>index &lt; -array.length</code>."
      }
    },
    "arraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>ArrayBuffer</code></strong> object is used to represent a generic raw binary data buffer.\n<p>It is an array of bytes, often referred to in other languages as a \"byte array\". You cannot directly manipulate the contents of an <code>ArrayBuffer</code>; instead, you create one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\">typed array objects</a> or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.\n<p>The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer\"><code>ArrayBuffer()</code></a> constructor creates a new <code>ArrayBuffer</code> of the given length in bytes. You can also get an array buffer from existing data, for example, from a <a href=\"$MDN_URL$/Glossary/Base64\">Base64</a> string or <a href=\"$MDN_URL$/Web/API/FileReader/readAsArrayBuffer\">from a local file</a>.\n<p><code>ArrayBuffer</code> is a <a href=\"$MDN_URL$/Web/API/Web_Workers_API/Transferable_objects\">transferable object</a>."
    },
    "arraybuffer.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/@@species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "48",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>ArrayBuffer[@@species]</code></strong> static accessor property returns the constructor used to construct return values from array buffer methods.\n<div class=\"notecard warning\" id=\"sect1\">\n<p><strong>Warning:</strong> The existence of <code>@@species</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get @@species</code> was called. The return value is used to construct return values from array buffer methods that create new array buffers."
    },
    "arraybuffer.arraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/arraybuffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>ArrayBuffer()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> objects.",
      "parameters": {
        "length": "The size, in bytes, of the array buffer to create.",
        "options": "An object, which can contain the following properties: <dl> <dt id=\"maxbytelength\"><code>maxByteLength</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>The maximum size, in bytes, that the array buffer can be resized to. </dd> </dl>"
      },
      "returns": "A new <code>ArrayBuffer</code> object of the specified size, with its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> property set to the specified <code>maxByteLength</code> if one was specified. Its contents are initialized to 0.",
      "throws": {
        "RangeError": "Thrown if one of the following is true: <ul> <li><code>length</code> or <code>maxByteLength</code> is larger than <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> (≥ 2<sup>53</sup>) or negative.</li> <li><code>length</code> is larger than <code>maxByteLength</code>.</li> </ul>"
      }
    },
    "arraybuffer.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/bytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>byteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances returns the length (in bytes) of this array buffer."
    },
    "arraybuffer.isview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/isview",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "",
        "Firefox": "29",
        "Opera": "19",
        "Safari": "7",
        "SafariIOS": "7",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>ArrayBuffer.isView()</code></strong> static method determines whether the\npassed value is one of the <code>ArrayBuffer</code> views,\nsuch as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\">typed array objects</a>\nor a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "value": "The value to be checked."
      },
      "returns": "<code>true</code> if the given argument is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> views;\n  otherwise, <code>false</code>."
    },
    "arraybuffer.maxbytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/maxbytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0"
      },
      "doc": "The <strong><code>maxByteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances returns the maximum length (in bytes) that this array buffer can be resized to."
    },
    "arraybuffer.resizable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/resizable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0"
      },
      "doc": "The <strong><code>resizable</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances returns whether this array buffer can be resized or not."
    },
    "arraybuffer.resize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/resize",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0"
      },
      "doc": "The <strong><code>resize()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances resizes the <code>ArrayBuffer</code> to the specified size, in bytes.",
      "parameters": {
        "newLength": "The new length, in bytes, to resize the <code>ArrayBuffer</code> to."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "TypeError": "Thrown if the <code>ArrayBuffer</code> is detached or is not resizable.",
        "RangeError": "Thrown if <code>newLength</code> is larger than the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> of the <code>ArrayBuffer</code>."
      }
    },
    "arraybuffer.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "17",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "12",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "6",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>slice()</code></strong> method returns a new <code>ArrayBuffer</code>\nwhose contents are a copy of this <code>ArrayBuffer</code>'s bytes from\n<code>begin</code>, inclusive, up to <code>end</code>, exclusive.",
      "parameters": {
        "begin": "Zero-based byte index at which to begin slicing.",
        "end": "Byte index before which to end slicing. If end is unspecified, the new <code>ArrayBuffer</code> contains all bytes from begin to the end of this <code>ArrayBuffer</code>. If negative, it will make the Byte index begin from the last Byte."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object."
    },
    "asyncfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "15",
        "Firefox": "52",
        "Opera": "42",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.6.0",
        "Deno": ""
      },
      "doc": "The <strong><code>AsyncFunction</code></strong> object provides methods for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/async_function\">async functions</a>. In JavaScript, every async function is actually an <code>AsyncFunction</code> object.\n<p>Note that <code>AsyncFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\"><pre class=\"brush: js notranslate\"><code>const AsyncFunction = async function () {}.constructor;\n</code></pre></span></div>\n<p><code>AsyncFunction</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>."
    },
    "asyncfunction.asyncfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncfunction/asyncfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "15",
        "Firefox": "52",
        "Opera": "42",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.6.0",
        "Deno": ""
      },
      "doc": "The <strong><code>AsyncFunction()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncFunction\"><code>AsyncFunction</code></a> objects.\n<p>Note that <code>AsyncFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\"><pre class=\"brush: js notranslate\"><code>const AsyncFunction = async function () {}.constructor;\n</code></pre></span></div>\n<p>The <code>AsyncFunction()</code> constructor is not intended to be used directly, and all caveats mentioned in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function()</code></a> description apply to <code>AsyncFunction()</code>."
    },
    "asyncgenerator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgenerator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>AsyncGenerator</code></strong> object is returned by an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/async_function*\">async generator function</a> and it conforms to both the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable protocol and the async iterator protocol</a>.\n<p>Async generator methods always yield <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> objects.\n<p><code>AsyncGenerator</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncIterator\"><code>AsyncIterator</code></a> class."
    },
    "asyncgenerator.next": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgenerator/next",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>next()</code></strong> method returns the next value in the sequence.",
      "parameters": {
        "value": "An optional value used to modify the internal state of the generator. A value passed to the <code>next()</code> method will be received by <code>yield</code>"
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which when resolved returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n  <dt id=\"done\"><code>done</code></dt>\n  <dd>\n    <p>A boolean value:\n    <ul>\n      <li><code>true</code> if the generator is past the end of its control flow. In this case <code>value</code> specifies the <em>return value</em> of the generator (which may be undefined).</li>\n      <li><code>false</code> if the generator is able to produce more values.</li>\n    </ul>\n  </dd>\n  <dt id=\"value_2\"><code>value</code></dt>\n  <dd>\n    <p>Any JavaScript value yielded or returned by the generator.\n  </dd>\n</dl>"
    },
    "asyncgenerator.return": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgenerator/return",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>return()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\"><code>AsyncGenerator</code></a> instances acts as if a <code>return</code> statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a> block.",
      "parameters": {
        "value": "The value to return."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which resolves with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n  <dt id=\"done\"><code>done</code></dt>\n  <dd>\n    <p>A boolean value:\n    <ul>\n      <li><code>true</code> if the generator function's control flow has reached the end.</li>\n      <li><code>false</code> if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the <code>return</code> is captured in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a> and there are more <code>yield</code> expressions in the <code>finally</code> block.</li>\n    </ul>\n  </dd>\n  <dt id=\"value_2\"><code>value</code></dt>\n  <dd>\n    <p>The value that is given as an argument, or, if the <code>yield</code> expression is wrapped in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a>, the value yielded/returned from the <code>finally</code> block.\n  </dd>\n</dl>"
    },
    "asyncgenerator.throw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgenerator/throw",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>throw()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\"><code>AsyncGenerator</code></a> instances acts as if a <code>throw</code> statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",
      "parameters": {
        "exception": "The exception to throw. For debugging purposes, it is useful to make it an <code>instanceof</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
      },
      "returns": "If the thrown error is not caught, it will return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which rejects with the exception passed in.\n<p>If the exception is caught by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> and the generator resumes to yield more values, it will return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which resolves with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n  <dt id=\"done\"><code>done</code></dt>\n  <dd>\n    <p>A boolean value:\n    <ul>\n      <li><code>true</code> if the generator function's control flow has reached the end.</li>\n      <li><code>false</code> if the generator function is able to produce more values.</li>\n    </ul>\n  </dd>\n  <dt id=\"value\"><code>value</code></dt>\n  <dd>\n    <p>The value yielded from the next <code>yield</code> expression.\n  </dd>\n</dl>"
    },
    "asyncgeneratorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgeneratorfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>AsyncGeneratorFunction</code></strong> object provides methods for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/async_function*\">async generator functions</a>. In JavaScript, every async generator function is actually an <code>AsyncGeneratorFunction</code> object.\n<p>Note that <code>AsyncGeneratorFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\"><pre class=\"brush: js notranslate\"><code>const AsyncGeneratorFunction = async function* () {}.constructor;\n</code></pre></span></div>\n<p><code>AsyncGeneratorFunction</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>."
    },
    "asyncgeneratorfunction.asyncgeneratorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncgeneratorfunction/asyncgeneratorfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "55",
        "Opera": "50",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>AsyncGeneratorFunction()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\"><code>AsyncGeneratorFunction</code></a> objects.\n<p>Note that <code>AsyncGeneratorFunction</code> is not a global object. It could be obtained by evaluating the following code.\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\"><pre class=\"brush: js notranslate\"><code>const AsyncGeneratorFunction = async function* () {}.constructor;\n</code></pre></span></div>\n<p>The <code>AsyncGeneratorFunction()</code> constructor is not intended to be used directly, and all caveats mentioned in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function()</code></a> description apply to <code>AsyncGeneratorFunction()</code>."
    },
    "asynciterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asynciterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "57",
        "Opera": "50",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "An <strong><code>AsyncIterator</code></strong> object is an object that conforms to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterator protocol</a> by providing a <code>next()</code> method that returns a promise fulfilling to an iterator result object. The <code>AsyncIterator.prototype</code> object is a hidden global object that all built-in async iterators inherit from. It provides an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncIterator/@@asyncIterator\"><code>@@asyncIterator</code></a> method that returns the async iterator object itself, making the async iterator also <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable</a>.\n<p>Note that <code>AsyncIterator</code> is <em>not</em> a global object, although it will be in the future with the <a href=\"https://github.com/tc39/proposal-async-iterator-helpers\" class=\"external\" target=\"_blank\">async iterator helpers proposal</a>. The <code>AsyncIterator.prototype</code> object shared by all built-in async iterators can be obtained with the following code:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\"><pre class=\"brush: js notranslate\"><code>const AsyncIteratorPrototype = Object.getPrototypeOf(\n  Object.getPrototypeOf(Object.getPrototypeOf((async function* () {})())),\n);\n</code></pre></span></div>"
    },
    "asynciterator.@@asynciterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asynciterator/@@asynciterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "57",
        "Opera": "50",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@asyncIterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AsyncIterator\"><code>AsyncIterator</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable protocol</a> and allows built-in async iterators to be consumed by most syntaxes expecting async iterables, such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for-await...of\"><code>for await...of</code></a> loops. It returns the value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>, which is the async iterator object itself.",
      "returns": "The value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>, which is the async iterator object itself."
    },
    "atomics": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics</code></strong> namespace object contains static methods for carrying out atomic operations. They are used with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> objects."
    },
    "atomics.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/add",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.add()</code></strong> static\nmethod adds a given value at a given position in the array and returns the old value at\nthat position. This atomic operation guarantees that no other write happens until the\nmodified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to add a <code>value</code> to.",
        "value": "The number to add."
      },
      "returns": "The old value at the given position\n  (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.and": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/and",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.and()</code></strong> static\nmethod computes a bitwise AND with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to compute the bitwise AND.",
        "value": "The number to compute the bitwise AND with."
      },
      "returns": "The old value at the given position\n  (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.compareexchange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/compareexchange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.compareExchange()</code></strong> static\nmethod exchanges a given replacement value at a given position in the array, if a given\nexpected value equals the old value. It returns the old value at that position whether\nit was equal to the expected value or not. This atomic operation guarantees that no\nother write happens until the modified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to exchange a <code>value</code>.",
        "expectedValue": "The value to check for equality.",
        "replacementValue": "The number to exchange."
      },
      "returns": "The old value at the given position\n  (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.exchange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/exchange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.exchange()</code></strong> static method stores a given value\nat a given position in the array and returns the old value at that position. This atomic\noperation guarantees that no other write happens between the read of the old value and\nthe write of the new value.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to exchange a <code>value</code>.",
        "value": "The number to exchange."
      },
      "returns": "The old value at the given position\n  (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.islockfree": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/islockfree",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.isLockFree()</code></strong> static\nmethod is used to determine whether the <code>Atomics</code> methods use locks\nor atomic hardware operations when applied to typed arrays with the given element\nbyte size.\nIt returns <code>false</code> if the given size is not one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\">BYTES_PER_ELEMENT</a>\nproperty of integer TypedArray types.",
      "parameters": {
        "size": "The size in bytes to check."
      },
      "returns": "A <code>true</code> or <code>false</code> value indicating whether the operation is lock free."
    },
    "atomics.load": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/load",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.load()</code></strong> static\nmethod returns a value at a given position in the array.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to load from."
      },
      "returns": "The value at the given position (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.notify": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/notify",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.notify()</code></strong> static\nmethod notifies up some agents that are sleeping in the wait queue.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> This operation works with a shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\nonly.\nIt will return <code>0</code> on non-shared <code>ArrayBuffer</code> objects.\n</div>",
      "parameters": {
        "typedArray": "A shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to wake up on.",
        "count": "The number of sleeping agents to notify. Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>+Infinity</code></a>."
      },
      "returns": "<ul>\n  <li>Returns the number of woken up agents.</li>\n  <li>Returns <code>0</code>, if a non-shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object is used.</li>\n</ul>",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.or": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/or",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.or()</code></strong> static\nmethod computes a bitwise OR with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to compute the bitwise OR.",
        "value": "The number to compute the bitwise OR with."
      },
      "returns": "The old value at the given position\n  (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.store": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/store",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.store()</code></strong> static\nmethod stores a given value at the given position in the array and returns that value.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to store a <code>value</code> in.",
        "value": "The number to store."
      },
      "returns": "The value that has been stored.",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.sub": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/sub",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.sub()</code></strong> static method subtracts a given value\nat a given position in the array and returns the old value at that position. This atomic\noperation guarantees that no other write happens until the modified value is written\nback.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to subtract a <code>value</code> from.",
        "value": "The number to subtract."
      },
      "returns": "The old value at the given position\n  (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.wait": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/wait",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.wait()</code></strong> static\nmethod verifies that a given position in an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> still contains a\ngiven value and if so sleeps, awaiting a wake-up notification or times out. It returns a string which\nis either <code>\"ok\"</code>, <code>\"not-equal\"</code>, or <code>\"timed-out\"</code>.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> This operation only works with a shared\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> and may not be allowed on the main thread.\nFor a non-blocking, asynchronous version of this method, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Atomics/waitAsync\"><code>Atomics.waitAsync()</code></a>.\n</div>",
      "parameters": {
        "typedArray": "A shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to wait on.",
        "value": "The expected value to test.",
        "timeout": "Time to wait in milliseconds. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, if no time is provided."
      },
      "returns": "A string which is either <code>\"ok\"</code>, <code>\"not-equal\"</code>, or <code>\"timed-out\"</code>.",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not a shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "atomics.waitasync": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/waitasync",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "89",
        "Edge": "87",
        "Opera": "75",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "16.0.0",
        "Deno": "1.4"
      },
      "doc": "The <strong><code>Atomics.waitAsync()</code></strong> static method waits asynchronously on a shared memory location and returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>.\n<p>Unlike <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Atomics/wait\"><code>Atomics.wait()</code></a>, <code>waitAsync</code> is non-blocking and usable on the main thread.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> This operation only works with a shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>.\n</div>",
      "parameters": {
        "typedArray": "A shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to wait on.",
        "value": "The expected value to test.",
        "timeout": "Time to wait in milliseconds. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, if no time is provided."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with the following properties:\n<dl>\n  <dt id=\"async\"><code>async</code></dt>\n  <dd>\n    <p>A boolean indicating whether the <code>value</code> property is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> or not.\n  </dd>\n  <dt id=\"value_2\"><code>value</code></dt>\n  <dd>\n    <p>If <code>async</code> is <code>false</code>, it will be a string which is either <code>\"not-equal\"</code> or <code>\"timed-out\"</code> (only when the <code>timeout</code> parameter is <code>0</code>). If <code>async</code> is <code>true</code>, it will be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which is fulfilled with a string value, either <code>\"ok\"</code> or <code>\"timed-out\"</code>. The promise is never rejected.\n  </dd>\n</dl>"
    },
    "atomics.xor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/xor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Atomics.xor()</code></strong> static\nmethod computes a bitwise XOR with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.",
      "parameters": {
        "typedArray": "An integer typed array. One of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.",
        "index": "The position in the <code>typedArray</code> to compute the bitwise XOR.",
        "value": "The number to compute the bitwise XOR with."
      },
      "returns": "The old value at the given position (<code>typedArray[index]</code>).",
      "throws": {
        "TypeError": "Thrown if <code>typedArray</code> is not one of the allowed integer types.",
        "RangeError": "Thrown if <code>index</code> is out of bounds in the <code>typedArray</code>."
      }
    },
    "bigint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "<strong><code>BigInt</code></strong> values represent numeric values which are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">too large</a> to be represented by the <code>number</code> <a href=\"$MDN_URL$/Glossary/Primitive\">primitive</a>."
    },
    "bigint.asintn": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/asintn",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>BigInt.asIntN()</code></strong> static method truncates a <code>BigInt</code> value to the given number of least significant bits and returns that value as a signed integer.",
      "parameters": {
        "bits": "The amount of bits available for the returned BigInt. Should be an integer between 0 and 2<sup>53</sup> - 1, inclusive.",
        "bigint": "The BigInt value to truncate to fit into the supplied bits."
      },
      "returns": "The value of <code>bigint</code> modulo 2^<code>bits</code>, as a signed integer.",
      "throws": {
        "RangeError": "Thrown if <code>bits</code> is negative or greater than 2<sup>53</sup> - 1."
      }
    },
    "bigint.asuintn": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/asuintn",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>BigInt.asUintN()</code></strong> static method truncates a <code>BigInt</code> value to the given number of least significant bits and returns that value as an unsigned integer.",
      "parameters": {
        "bits": "The amount of bits available for the returned BigInt. Should be an integer between 0 and 2<sup>53</sup> - 1, inclusive.",
        "bigint": "The BigInt value to truncate to fit into the supplied bits."
      },
      "returns": "The value of <code>bigint</code> modulo 2^<code>bits</code>, as an unsigned integer.",
      "throws": {
        "RangeError": "Thrown if <code>bits</code> is negative or greater than 2<sup>53</sup> - 1."
      }
    },
    "bigint.bigint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/bigint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>BigInt()</code></strong> function returns primitive values of type BigInt.",
      "parameters": {
        "value": "The numeric value of the object being created. It may be a string, an integer, a boolean, or another <code>BigInt</code>."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> value. Number values must be integers and are converted to BigInts. The boolean value <code>true</code> becomes <code>1n</code>, and <code>false</code> becomes <code>0n</code>. Strings are parsed as if they are source text for integer literals, which means they can have leading and trailing whitespaces and can be prefixed with <code>0b</code>, <code>0o</code>, or <code>0x</code>.",
      "throws": {
        "RangeError": "Thrown if the parameter is a non-integral number.",
        "TypeError": "Thrown if at least one of these conditions is met: <ul> <li>The parameter cannot be converted to a primitive.</li> <li>After conversion to a primitive, the result is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>symbol</code></a>.</li> </ul>",
        "SyntaxError": "Thrown if the parameter is a string that cannot be parsed as a <code>BigInt</code>."
      }
    },
    "bigint.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method returns a string with a language-sensitive representation of this BigInt. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code> API</a> support, this method simply calls <code>Intl.NumberFormat</code>.\n<p>When formatting large numbers of numbers, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> object and use the function provided by its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\"><code>format()</code></a> method.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor. <p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options\"><code>options</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor. <p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored."
      },
      "returns": "A string with a language-sensitive representation of the given BigInt.\n<p>In implementations with <code>Intl.NumberFormat</code>, this is equivalent to <code>new Intl.NumberFormat(locales, options).format(number)</code>."
    },
    "bigint.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> value. The trailing \"n\" is not part of the string.",
      "parameters": {
        "radix": "An integer in the range 2 through 36 specifying the base to use for representing the BigInt value. Defaults to 10."
      },
      "returns": "A string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> value.",
      "throws": {
        "RangeError": "Thrown if <code>radix</code> is less than 2 or greater than 36."
      }
    },
    "bigint.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>valueOf()</code></strong> method returns the wrapped primitive value\nof a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object.",
      "returns": "A BigInt representing the primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object."
    },
    "bigint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>BigInt64Array</code></strong> typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).\n<p><code>BigInt64Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "bigint64array.bigint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint64array/bigint64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>BigInt64Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> objects. The contents are initialized to <code>0n</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "biguint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/biguint64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>BigUint64Array</code></strong> typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).\n<p><code>BigUint64Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "biguint64array.biguint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/biguint64array/biguint64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>BigUint64Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a> objects. The contents are initialized to <code>0n</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "boolean": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Boolean</code></strong> object represents a truth value: <code>true</code> or <code>false</code>."
    },
    "boolean.boolean": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/boolean",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Boolean()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> objects. When called as a function, it returns primitive values of type Boolean.",
      "parameters": {
        "value": "The initial value of the <code>Boolean</code> object."
      },
      "returns": "When <code>Boolean()</code> is called as a constructor (with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>), it creates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object, which is <strong>not</strong> a primitive.\n<p>When <code>Boolean()</code> is called as a function (without <code>new</code>), it coerces the parameter to a boolean primitive.\n<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>Warning:</strong> You should rarely find yourself using <code>Boolean</code> as a constructor.\n</div>"
    },
    "boolean.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the specified boolean value.",
      "returns": "A string representing the specified boolean value."
    },
    "boolean.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>valueOf()</code></strong> method returns the primitive value of a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object.",
      "returns": "The primitive value of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object."
    },
    "dataview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>DataView</code></strong> view provides a low-level interface for reading and writing multiple number types in a binary <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, without having to care about the platform's <a href=\"$MDN_URL$/Glossary/Endianness\">endianness</a>."
    },
    "dataview.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/buffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>buffer</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances returns the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> referenced by this view at construction time."
    },
    "dataview.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/bytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>byteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances returns the length (in bytes) of this view."
    },
    "dataview.byteoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/byteoffset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>byteOffset</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instances returns the offset (in bytes) of this view from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>."
    },
    "dataview.dataview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/dataview",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>DataView()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> objects.",
      "parameters": {
        "buffer": "An existing <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> to use as the storage backing the new <code>DataView</code> object.",
        "byteOffset": "The offset, in bytes, to the first byte in the above buffer for the new view to reference. If unspecified, the buffer view starts with the first byte.",
        "byteLength": "The number of elements in the byte array. If unspecified, the view's length will match the buffer's length."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> object representing the specified data buffer.",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> or <code>byteLength</code> parameter values result in the view extending past the end of the buffer. <p>For example, if the buffer is 16 bytes long, the <code>byteOffset</code> is 8, and the <code>byteLength</code> is 10, this error is thrown because the resulting view tries to extend 2 bytes past the total length of the buffer."
      }
    },
    "dataview.getbigint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getbigint64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>getBigInt64()</code></strong> method gets a signed 64-bit integer\n(long long) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the 64-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>."
    },
    "dataview.getbiguint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getbiguint64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>getBigUint64()</code></strong> method gets an unsigned 64-bit integer\n(unsigned long long) at the specified byte offset from the start of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "Indicates whether the 64-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>."
    },
    "dataview.getfloat32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getfloat32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getFloat32()</code></strong> method gets a signed 32-bit float\n(float) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "Indicates whether the 32-bit float is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A signed 32-bit float number."
    },
    "dataview.getfloat64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getfloat64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getFloat64()</code></strong> method gets a signed 64-bit float\n(double) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "Indicates whether the 64-bit float is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A signed 64-bit float number."
    },
    "dataview.getint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getInt16()</code></strong> method gets a signed 16-bit integer\n(short) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "Indicates whether the 16-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A signed 16-bit integer number."
    },
    "dataview.getint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getInt32()</code></strong> method gets a signed 32-bit integer (long)\nat the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view where to read the data.",
        "littleEndian": "Indicates whether the 32-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "A signed 32-bit integer number."
    },
    "dataview.getint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint8",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getInt8()</code></strong> method gets a signed 8-bit integer (byte)\nat the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data."
      },
      "returns": "A signed 8-bit integer number."
    },
    "dataview.getuint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUint16()</code></strong> method gets an unsigned 16-bit integer\n(unsigned short) at the specified byte offset from the start of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "Indicates whether the 16-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "An unsigned 16-bit integer number."
    },
    "dataview.getuint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUint32()</code></strong> method gets an unsigned 32-bit integer\n(unsigned long) at the specified byte offset from the start of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "Indicates whether the 32-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is read."
      },
      "returns": "An unsigned 32-bit integer number."
    },
    "dataview.getuint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint8",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUint8()</code></strong> method gets an unsigned 8-bit integer\n(unsigned byte) at the specified byte offset from the start of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data."
      },
      "returns": "An unsigned 8-bit integer number."
    },
    "dataview.setbigint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setbigint64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>setBigInt64()</code></strong> method stores a signed 64-bit integer\n(long long) value at the specified byte offset from the start of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data from.",
        "value": "The value to set as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>. The highest possible value that fits in a signed 64-bit integer is <code>2n ** (64n -1n) - 1n</code> (<code>9223372036854775807n</code>). Upon overflow, it will be negative (<code>-9223372036854775808n</code>).",
        "littleEndian": "Indicates whether the 64-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "dataview.setbiguint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setbiguint64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "67",
        "ChromeAndroid": "67",
        "Edge": "79",
        "Firefox": "68",
        "Opera": "54",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "10.4.0",
        "Deno": ""
      },
      "doc": "The <strong><code>setBigUint64()</code></strong> method stores an unsigned 64-bit\ninteger (unsigned long long) value at the specified byte offset from the start of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data from.",
        "value": "The value to set as a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>. The highest possible value that fits in an unsigned 64-bit integer is <code>2n ** 64n - 1n</code> (<code>18446744073709551615n</code>). Upon overflow, it will be zero (<code>0n</code>).",
        "littleEndian": "Indicates whether the 64-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "dataview.setfloat32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setfloat32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setFloat32()</code></strong> method stores a signed 32-bit float\n(float) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "Indicates whether the 32-bit float is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "dataview.setfloat64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setfloat64",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setFloat64()</code></strong> method stores a signed 64-bit float\n(double) value at the specified byte offset from the start of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "Indicates whether the 64-bit float is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "dataview.setint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setInt16()</code></strong> method stores a signed 16-bit integer\n(short) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "Indicates whether the 16-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "dataview.setint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setInt32()</code></strong> method stores a signed 32-bit integer\n(long) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "Indicates whether the 32-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "dataview.setint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint8",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setInt8()</code></strong> method stores a signed 8-bit integer (byte)\nvalue at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "dataview.setuint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint16",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUint16()</code></strong> method stores an unsigned 16-bit integer\n(unsigned short) value at the specified byte offset from the start of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "Indicates whether the 16-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "dataview.setuint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUint32()</code></strong> method stores an unsigned 32-bit integer\n(unsigned long) value at the specified byte offset from the start of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "Indicates whether the 32-bit int is stored in <a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a> format. If <code>false</code> or <code>undefined</code>, a big-endian value is written."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "dataview.setuint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint8",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "15",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUint8()</code></strong> method stores an unsigned 8-bit integer\n(byte) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "date": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "JavaScript <strong><code>Date</code></strong> objects represent a single moment in time in a platform-independent format. <code>Date</code> objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the <em>epoch</em>).\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> TC39 is working on <a href=\"https://tc39.es/proposal-temporal/docs/index.html\" class=\"external\" target=\"_blank\">Temporal</a>, a new Date/Time API. Read more about it on the <a href=\"https://blogs.igalia.com/compilers/2020/06/23/dates-and-times-in-javascript/\" class=\"external\" target=\"_blank\">Igalia blog</a>. It is not yet ready for production use!\n</div>"
    },
    "date.@@toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/@@toprimitive",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "15",
        "Firefox": "44",
        "Opera": "34",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@toPrimitive]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a primitive value representing this date. It may either be a string or a number, depending on the hint given.",
      "parameters": {
        "hint": "A string representing the type of the primitive value to return. The following values are valid: <ul> <li><code>\"string\"</code> or <code>\"default\"</code>: The method should return a string.</li> <li><code>\"number\"</code>: The method should return a number.</li> </ul>"
      },
      "returns": "If <code>hint</code> is <code>\"string\"</code> or <code>\"default\"</code>, this method returns a string by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coercing the <code>this</code> value to a string</a> (first trying <code>toString()</code> then trying <code>valueOf()</code>).\n<p>If <code>hint</code> is <code>\"number\"</code>, this method returns a number by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coercing the <code>this</code> value to a number</a> (first trying <code>valueOf()</code> then trying <code>toString()</code>).",
      "throws": {
        "TypeError": "Thrown if the <code>hint</code> argument is not one of the three valid values."
      }
    },
    "date.date": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/date",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Date()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> objects. When called as a function, it returns a string representing the current time.",
      "parameters": {
        "value": "An integer value representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a> (the number of milliseconds since midnight at the beginning of January 1, 1970, UTC — a.k.a. the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>).",
        "dateString": "A string value representing a date, parsed and interpreted using the same algorithm implemented by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/parse\"><code>Date.parse()</code></a>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">date time string format</a> for caveats on using different formats.",
        "dateObject": "An existing <code>Date</code> object. This effectively makes a copy of the existing <code>Date</code> object with the same date and time. This is equivalent to <code>new Date(dateObject.valueOf())</code>, except the <code>valueOf()</code> method is not called.",
        "year": "Integer value representing the year. Values from <code>0</code> to <code>99</code> map to the years <code>1900</code> to <code>1999</code>. All other values are the actual year. See the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years\">example</a>.",
        "monthIndex": "Integer value representing the month, beginning with <code>0</code> for January to <code>11</code> for December.",
        "day": "Integer value representing the day of the month. Defaults to <code>1</code>.",
        "hours": "Integer value between <code>0</code> and <code>23</code> representing the hour of the day. Defaults to <code>0</code>.",
        "minutes": "Integer value representing the minute segment of a time. Defaults to <code>0</code>.",
        "seconds": "Integer value representing the second segment of a time. Defaults to <code>0</code>.",
        "milliseconds": "Integer value representing the millisecond segment of a time. Defaults to <code>0</code>."
      },
      "returns": "Calling <code>new Date()</code> (the <code>Date()</code> constructor) returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object. If called with an invalid date string, or if the date to be constructed will have a timestamp less than <code>-8,640,000,000,000,000</code> or greater than <code>8,640,000,000,000,000</code> milliseconds, it returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid date</a> (a <code>Date</code> object whose <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toString\"><code>toString()</code></a> method returns <code>\"Invalid Date\"</code> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/valueOf\"><code>valueOf()</code></a> method returns <code>NaN</code>).\n<p>Calling the <code>Date()</code> function (without the <code>new</code> keyword) returns a string representation of the current date and time, exactly as <code>new Date().toString()</code> does. Any arguments given in a <code>Date()</code> function call (without the <code>new</code> keyword) are ignored; regardless of whether it's called with an invalid date string — or even called with any arbitrary object or other primitive as an argument — it always returns a string representation of the current date and time."
    },
    "date.getdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getdate",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the day of the month for this date according to local time.",
      "returns": "An integer, between 1 and 31, representing the day of the month for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getday",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getDay()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the day of the week for this date according to local time, where 0 represents Sunday. For the day of the month, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getDate\"><code>Date.prototype.getDate()</code></a>.",
      "returns": "An integer, between 0 and 6, representing the day of the week for the given date according to local time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getfullyear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getFullYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the year for this date according to local time.\n<p>Use this method instead of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getYear\"><code>getYear()</code></a> method.",
      "returns": "An integer representing the year for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.gethours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gethours",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getHours()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the hours for this date according to local time.",
      "returns": "An integer, between 0 and 23, representing the hours for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getMilliseconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the milliseconds for this date according to local time.",
      "returns": "An integer, between 0 and 999, representing the milliseconds for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getminutes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getMinutes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the minutes for this date according to local time.",
      "returns": "An integer, between 0 and 59, representing the minutes for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getmonth",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getMonth()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the month for this date according to local time, as a zero-based value (where zero indicates the first month of the year).",
      "returns": "An integer, between 0 and 11, representing the month for the given date according to local time: 0 for January, 1 for February, and so on. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getSeconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the seconds for this date according to local time.",
      "returns": "An integer, between 0 and 59, representing the seconds for the given date according to local time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.gettime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gettime",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the number of milliseconds for this date since the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>, in milliseconds, of this date. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.gettimezoneoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gettimezoneoffset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getTimezoneOffset()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the difference, in minutes, between this date as evaluated in the UTC time zone, and the same date as evaluated in the local time zone.",
      "returns": "A number representing the difference, in minutes, between the date as evaluated in the UTC time zone and as evaluated in the local time zone. The actual local time algorithm is implementation-defined, and the return value is allowed to be zero in runtimes without appropriate data. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcdate",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUTCDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the day of the month for this date according to universal time.",
      "returns": "An integer, between 1 and 31, representing day of month for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcday",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUTCDay()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the day of the week for this date according to universal time, where 0 represents Sunday.",
      "returns": "An integer corresponding to the day of the week for the given date according to universal time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcfullyear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUTCFullYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the year for this date according to universal time.",
      "returns": "An integer representing the year for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutchours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutchours",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUTCHours()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the hours for this date according to universal time.",
      "returns": "An integer, between 0 and 23, representing the hours for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUTCMilliseconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the milliseconds for this date according to universal time.",
      "returns": "An integer, between 0 and 999, representing the milliseconds for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>.\n<p>Not to be confused with the timestamp. To get the total milliseconds since the epoch, use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getTime\"><code>getTime()</code></a> method."
    },
    "date.getutcminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcminutes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUTCMinutes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the minutes for this date according to universal time.",
      "returns": "An integer, between 0 and 59, representing the minutes for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcmonth",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUTCMonth()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the month for this date according to universal time, as a zero-based value (where zero indicates the first month of the year).",
      "returns": "An integer, between 0 and 11, representing the month for the given date according to universal time: 0 for January, 1 for February, and so on. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getutcseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>getUTCSeconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the seconds in the specified date according to universal time.",
      "returns": "An integer, between 0 and 59, representing the seconds for the given date according to universal time. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.getyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getyear",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>getYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the year for this date according to local time. Because <code>getYear()</code> does not return full years (\"year 2000 problem\"), it is deprecated and has been replaced by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\"><code>getFullYear()</code></a> method.",
      "returns": "An integer representing the year for the given date according to local time, minus 1900. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>.\n<ul>\n  <li>For years greater than or equal to 2000, the value is 100 or greater. For example, if the year is 2026, <code>getYear()</code> returns 126.</li>\n  <li>For years between and including 1900 and 1999, the value returned by <code>getYear()</code> is between 0 and 99. For example, if the year is 1976, <code>getYear()</code> returns 76.</li>\n  <li>For years less than 1900, the value returned by <code>getYear()</code> is less than 0. For example, if the year is 1800, <code>getYear()</code> returns -100.</li>\n</ul>\n<p>This method essentially returns the value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\"><code>getFullYear()</code></a> minus 1900. You should use <code>getFullYear()</code> instead, so that the year is specified in full."
    },
    "date.now": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/now",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "4",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Date.now()</code></strong> static method returns the number of milliseconds elapsed since the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>, in milliseconds, of the current time."
    },
    "date.parse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/parse",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Date.parse()</code></strong> static method parses a string representation of a date, and returns the date's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>.\n<p>Only the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">date time string format</a> is explicitly specified to be supported. Other formats are implementation-defined and may not work across all browsers. A library can help if many different formats are to be accommodated.",
      "parameters": {
        "dateString": "A string in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">the date time string format</a>. See the linked reference for caveats on using different formats."
      },
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a> of the given date. If <code>dateString</code> fails to be parsed as a valid date, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned."
    },
    "date.setdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setdate",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the day of the month for this date according to local time.",
      "parameters": {
        "dateValue": "An integer representing the day of the month."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>dateValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setfullyear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setFullYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the year, month, and/or day of month for this date according to local time.",
      "parameters": {
        "yearValue": "An integer representing the year. For example, 1995.",
        "monthValue": "An integer representing the month: 0 for January, 1 for February, and so on.",
        "dateValue": "An integer between 1 and 31 representing the day of the month. If you specify <code>dateValue</code>, you must also specify <code>monthValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.sethours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/sethours",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setHours()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the hours, minutes, seconds, and/or milliseconds for this date according to local time.",
      "parameters": {
        "hoursValue": "An integer between 0 and 23 representing the hours.",
        "minutesValue": "An integer between 0 and 59 representing the minutes.",
        "secondsValue": "An integer between 0 and 59 representing the seconds. If you specify <code>secondsValue</code>, you must also specify <code>minutesValue</code>.",
        "msValue": "An integer between 0 and 999 representing the milliseconds. If you specify <code>msValue</code>, you must also specify <code>minutesValue</code> and <code>secondsValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setMilliseconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the milliseconds for this date according to local time.",
      "parameters": {
        "millisecondsValue": "An integer between 0 and 999 representing the milliseconds."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>millisecondsValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setminutes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setMinutes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the minutes for this date according to local time.",
      "parameters": {
        "minutesValue": "An integer between 0 and 59 representing the minutes.",
        "secondsValue": "An integer between 0 and 59 representing the seconds. If you specify <code>secondsValue</code>, you must also specify <code>minutesValue</code>.",
        "msValue": "An integer between 0 and 999 representing the milliseconds. If you specify <code>msValue</code>, you must also specify <code>minutesValue</code> and <code>secondsValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setmonth",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setMonth()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the month and/or day of the month for this date according to local time.",
      "parameters": {
        "monthValue": "An integer representing the month: 0 for January, 1 for February, and so on.",
        "dateValue": "An integer from 1 to 31 representing the day of the month."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setSeconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the seconds and/or milliseconds for this date according to local time.",
      "parameters": {
        "secondsValue": "An integer between 0 and 59 representing the seconds.",
        "msValue": "An integer between 0 and 999 representing the milliseconds."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.settime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/settime",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setTime()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a> for this date, which is the number of milliseconds since the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>, defined as the midnight at the beginning of January 1, 1970, UTC.",
      "parameters": {
        "timeValue": "An integer representing the new timestamp — the number of milliseconds since the midnight at the beginning of January 1, 1970, UTC."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>timeValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcdate",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUTCDate()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the day of the month for this date according to universal time.",
      "parameters": {
        "dateValue": "An integer from 1 to 31 representing the day of the month."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>dateValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcfullyear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUTCFullYear()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the year for this date according to universal time.",
      "parameters": {
        "yearValue": "An integer representing the year. For example, 1995.",
        "monthValue": "An integer representing the month: 0 for January, 1 for February, and so on.",
        "dateValue": "An integer between 1 and 31 representing the day of the month. If you specify <code>dateValue</code>, you must also specify <code>monthValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutchours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutchours",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUTCHours()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the hours, minutes, seconds, and/or milliseconds for this date according to universal time.",
      "parameters": {
        "hoursValue": "An integer between 0 and 23 representing the hours.",
        "minutesValue": "An integer between 0 and 59 representing the minutes.",
        "secondsValue": "An integer between 0 and 59 representing the seconds. If you specify <code>secondsValue</code>, you must also specify <code>minutesValue</code>.",
        "msValue": "An integer between 0 and 999 representing the milliseconds. If you specify <code>msValue</code>, you must also specify <code>minutesValue</code> and <code>secondsValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUTCMilliseconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the milliseconds for this date according to universal time.",
      "parameters": {
        "millisecondsValue": "An integer between 0 and 999 representing the milliseconds."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>millisecondsValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcminutes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUTCMinutes()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the minutes for this date according to universal time.",
      "parameters": {
        "minutesValue": "An integer between 0 and 59 representing the minutes.",
        "secondsValue": "An integer between 0 and 59 representing the seconds. If you specify <code>secondsValue</code>, you must also specify <code>minutesValue</code>.",
        "msValue": "An integer between 0 and 999 representing the milliseconds. If you specify <code>msValue</code>, you must also specify <code>minutesValue</code> and <code>secondsValue</code>."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcmonth",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUTCMonth()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the month and/or day of the month for this date according to universal time.",
      "parameters": {
        "monthValue": "An integer representing the month: 0 for January, 1 for February, and so on.",
        "dateValue": "An integer from 1 to 31 representing the day of the month."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setutcseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcseconds",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>setUTCSeconds()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances changes the seconds and/or milliseconds for this date according to universal time.",
      "parameters": {
        "secondsValue": "An integer between 0 and 59 representing the seconds.",
        "msValue": "An integer between 0 and 999 representing the milliseconds."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If a parameter is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.setyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setyear",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>setYear()</code></strong> method sets the year for a specified date according to local time.\n<p>However, the way the legacy <code>setYear()</code> method sets year values is different from how the preferred <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\"><code>setFullYear()</code></a> method sets year values — and in some cases, also different from how <code>new Date()</code> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/parse\"><code>Date.parse()</code></a> set year values. Specifically, given two-digit numbers, such as <code>22</code> and <code>61</code>:\n<ul>\n<li><code>setYear()</code> interprets any two-digit number as an offset to <code>1900</code>; so <code>date.setYear(22)</code> results in the year value being set to <code>1922</code>, and <code>date.setYear(61)</code> results in the year value being set to <code>1961</code>. (In contrast, while <code>new Date(61, 1)</code> also results in the year value being set to <code>1961</code>, <code>new Date(\"2/1/22\")</code> results in the year value being set to <code>2022</code>; and similarly for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/parse\"><code>Date.parse()</code></a>).</li>\n<li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\"><code>setFullYear()</code></a> does no special interpretation but instead uses the literal two-digit value as-is to set the year; so <code>date.setFullYear(61)</code> results in the year value being set to <code>0061</code>, and <code>date.setFullYear(22)</code> results in the year value being set to <code>0022</code>.</li>\n</ul>\n<p>Because of those differences in behavior, you should no longer use the legacy <code>setYear()</code> method, but should instead use the preferred <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\"><code>setFullYear()</code></a> method.",
      "parameters": {
        "yearValue": "An integer."
      },
      "returns": "Changes the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in place, and returns its new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>. If <code>yearValue</code> is <code>NaN</code> (or other values that get <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerced</a> to <code>NaN</code>, such as <code>undefined</code>), the date is set to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">Invalid Date</a> and <code>NaN</code> is returned."
    },
    "date.todatestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/todatestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toDateString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing the date portion of this date interpreted in the local timezone.",
      "returns": "A string representing the date portion of the given date (see description for the format). Returns <code>\"Invalid Date\"</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.toisostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/toisostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "3.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toISOString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing this date in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">date time string format</a>, a <em>simplified</em> format based on <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" class=\"external\" target=\"_blank\">ISO 8601</a>, which is always 24 or 27 characters long (<code>YYYY-MM-DDTHH:mm:ss.sssZ</code> or <code>±YYYYYY-MM-DDTHH:mm:ss.sssZ</code>, respectively). The timezone is always UTC, as denoted by the suffix <code>Z</code>.",
      "returns": "A string representing the given date in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">date time string format</a> according to universal time. It's the same format as the one required to be recognized by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/parse\"><code>Date.parse()</code></a>.",
      "throws": {
        "RangeError": "Thrown if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a> or if it corresponds to a year that cannot be represented in the date string format."
      }
    },
    "date.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tojson",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "3.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toJSON()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing this date in the same ISO format as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toISOString\"><code>toISOString()</code></a>.",
      "returns": "A string representing the given date in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format\">date time string format</a> according to universal time, or <code>null</code> when the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>. For valid dates, the return value is the same as that of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toISOString\"><code>toISOString()</code></a>."
    },
    "date.tolocaledatestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocaledatestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleDateString()</code></strong> method returns a string with a language-sensitive representation of the date portion of the specified date in the user agent's timezone. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method simply calls <code>Intl.DateTimeFormat</code>.\n<p>When formatting large numbers of dates, it is better to create an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. <p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. The <code>timeStyle</code> option must be undefined, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> would be thrown. If <code>weekday</code>, <code>year</code>, <code>month</code>, and <code>day</code> are all undefined, then <code>year</code>, <code>month</code>, and <code>day</code> will be set to <code>\"numeric\"</code>. <p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored."
      },
      "returns": "A string representing the date portion of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instance according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(date)</code>, where <code>options</code> has been normalized as described above."
    },
    "date.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method returns a string with a language-sensitive representation of this date. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method simply calls <code>Intl.DateTimeFormat</code>.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. <p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. If <code>weekday</code>, <code>year</code>, <code>month</code>, <code>day</code>, <code>dayPeriod</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, and <code>fractionalSecondDigits</code> are all undefined, then <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code> will be set to <code>\"numeric\"</code>. <p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored."
      },
      "returns": "A string representing the given date according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(date)</code>.\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Most of the time, the formatting returned by <code>toLocaleString()</code> is consistent. However, the output may vary with time, language, and implementation — output variations are by design and allowed by the specification. You should not compare the results of <code>toLocaleString()</code> to static values.\n</div>"
    },
    "date.tolocaletimestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocaletimestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleTimeString()</code></strong> method returns a string with a language-sensitive representation of the time portion of the date. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code> API</a> support, this method simply calls <code>Intl.DateTimeFormat</code>.\n<p>When formatting large numbers of dates, it is better to create an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object and use its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> method.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. <p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options\"><code>options</code></a> parameter of the <code>Intl.DateTimeFormat()</code> constructor. If <code>dayPeriod</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, and <code>fractionalSecondDigits</code> are all undefined, then <code>hour</code>, <code>minute</code>, <code>second</code> will be set to <code>\"numeric\"</code>. <p>In implementations without <code>Intl.DateTimeFormat</code> support, this parameter is ignored."
      },
      "returns": "A string representing the time portion of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instance according to language-specific conventions.\n<p>In implementations with <code>Intl.DateTimeFormat</code>, this is equivalent to <code>new Intl.DateTimeFormat(locales, options).format(date)</code>, where <code>options</code> has been normalized as described above."
    },
    "date.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing this date interpreted in the local timezone.",
      "returns": "A string representing the given date (see description for the format). Returns <code>\"Invalid Date\"</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.totimestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/totimestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toTimeString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing the time portion of this date interpreted in the local timezone.",
      "returns": "A string representing the time portion of the given date (see description for the format). Returns <code>\"Invalid Date\"</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.toutcstring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/toutcstring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toUTCString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns a string representing this date in the <a href=\"https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.1.1\" class=\"external\" target=\"_blank\">RFC 7231</a> format, with negative years allowed. The timezone is always UTC. <code>toGMTString()</code> is an alias of this method.",
      "returns": "A string representing the given date using the UTC time zone (see description for the format). Returns <code>\"Invalid Date\"</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.utc": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/utc",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Date.UTC()</code></strong> static method accepts parameters representing the date and time components similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.",
      "parameters": {
        "year": "Integer value representing the year. Values from <code>0</code> to <code>99</code> map to the years <code>1900</code> to <code>1999</code>. All other values are the actual year. See the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years\">example</a>.",
        "monthIndex": "Integer value representing the month, beginning with <code>0</code> for January to <code>11</code> for December. Defaults to <code>0</code>.",
        "day": "Integer value representing the day of the month. Defaults to <code>1</code>.",
        "hours": "Integer value between <code>0</code> and <code>23</code> representing the hour of the day. Defaults to <code>0</code>.",
        "minutes": "Integer value representing the minute segment of a time. Defaults to <code>0</code>.",
        "seconds": "Integer value representing the second segment of a time. Defaults to <code>0</code>.",
        "milliseconds": "Integer value representing the millisecond segment of a time. Defaults to <code>0</code>."
      },
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a> of the given date. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "date.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instances returns the number of milliseconds for this date since the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">epoch</a>, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
      "returns": "A number representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">timestamp</a>, in milliseconds, of this date. Returns <code>NaN</code> if the date is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\">invalid</a>."
    },
    "decodeuri": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/decodeuri",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>decodeURI()</code></strong> function decodes a Uniform Resource Identifier (URI) previously created by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a> or a similar routine.",
      "parameters": {
        "encodedURI": "A complete, encoded Uniform Resource Identifier."
      },
      "returns": "A new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).",
      "throws": {
        "URIError": "Thrown if <code>encodedURI</code> contains a <code>%</code> not followed by two hexadecimal digits, or if the escape sequence does not encode a valid UTF-8 character."
      }
    },
    "decodeuricomponent": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/decodeuricomponent",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>decodeURIComponent()</code></strong> function decodes a Uniform Resource Identifier (URI) component previously created by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent()</code></a> or by a similar routine.",
      "parameters": {
        "encodedURI": "An encoded component of a Uniform Resource Identifier."
      },
      "returns": "A new string representing the decoded version of the given encoded Uniform Resource Identifier (URI) component.",
      "throws": {
        "URIError": "Thrown if <code>encodedURI</code> contains a <code>%</code> not followed by two hexadecimal digits, or if the escape sequence does not encode a valid UTF-8 character."
      }
    },
    "encodeuri": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/encodeuri",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>encodeURI()</code></strong> function encodes a <a href=\"$MDN_URL$/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a href=\"$MDN_URL$/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent()</code></a>, this function encodes fewer characters, preserving those that are part of the URI syntax.",
      "parameters": {
        "uri": "A string to be encoded as a URI."
      },
      "returns": "A new string representing the provided string encoded as a URI.",
      "throws": {
        "URIError": "Thrown if <code>uri</code> contains a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogate</a>."
      }
    },
    "encodeuricomponent": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/encodeuricomponent",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>encodeURIComponent()</code></strong> function encodes a <a href=\"$MDN_URL$/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a href=\"$MDN_URL$/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a>, this function encodes more characters, including those that are part of the URI syntax.",
      "parameters": {
        "uriComponent": "A string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">converted to strings</a>."
      },
      "returns": "A new string representing the provided <code>uriComponent</code> encoded as a URI component.",
      "throws": {
        "URIError": "Thrown if <code>uriComponent</code> contains a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogate</a>."
      }
    },
    "error": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<strong><code>Error</code></strong> objects are thrown when runtime errors occur. The <code>Error</code> object can also be used as a base object for user-defined exceptions. See below for standard built-in error types."
    },
    "error.cause": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/cause",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "93",
        "ChromeAndroid": "93",
        "Edge": "93",
        "Firefox": "91",
        "Opera": "79",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "16.9.0",
        "Deno": "1.13"
      },
      "doc": "The <strong><code>cause</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance indicates the specific original cause of the error.\n<p>It is used when catching and re-throwing an error with a more-specific or useful error message in order to still have access to the original error."
    },
    "error.columnnumber": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/columnnumber",
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<div class=\"notecard nonstandard\" id=\"sect1\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>columnNumber</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance contains the column number in the line of the file that raised this error."
    },
    "error.error": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/error",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Error()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> objects.",
      "parameters": {
        "message": "A human-readable description of the error.",
        "options": "An object that has the following properties: <dl> <dt id=\"cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A value indicating the specific cause of the error, reflected in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error/cause\"><code>cause</code></a> property. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. </dd> </dl>",
        "fileName": "The path to the file that raised this error, reflected in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error/fileName\"><code>fileName</code></a> property. Defaults to the name of the file containing the code that called the <code>Error()</code> constructor.",
        "lineNumber": "The line number within the file on which the error was raised, reflected in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\"><code>lineNumber</code></a> property. Defaults to the line number containing the <code>Error()</code> constructor invocation."
      }
    },
    "error.filename": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/filename",
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<div class=\"notecard nonstandard\" id=\"sect1\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>fileName</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance contains the path to the file that raised this error."
    },
    "error.linenumber": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/linenumber",
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<div class=\"notecard nonstandard\" id=\"sect1\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>lineNumber</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance contains the line number in the file that raised this error."
    },
    "error.message": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/message",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>message</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance is a human-readable description of the error."
    },
    "error.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/name",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>name</code></strong> data property of <code>Error.prototype</code> is shared by all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instances. It represents the name for the type of error. For <code>Error.prototype.name</code>, the initial value is <code>\"Error\"</code>. Subclasses like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a> provide their own <code>name</code> properties."
    },
    "error.stack": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/stack",
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "10.5",
        "Safari": "6",
        "SafariIOS": "6",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard nonstandard\" id=\"sect1\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The non-standard <strong><code>stack</code></strong> property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call."
    },
    "error.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the\nspecified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> object.",
      "returns": "A string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> object."
    },
    "escape": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/escape",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> <code>escape()</code> is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a> if possible.\n</div>\n<p>The <strong><code>escape()</code></strong> function computes a new string in which certain characters have been replaced by hexadecimal escape sequences.",
      "parameters": {
        "str": "A string to be encoded."
      },
      "returns": "A new string in which certain characters have been escaped."
    },
    "eval": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/eval",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard warning\" id=\"sect1\">\n<p><strong>Warning:</strong> Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use <code>eval()</code>. See <a href=\"#never_use_eval!\">Never use eval()!</a>, below.\n</div>\n<p>The <strong><code>eval()</code></strong> function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.",
      "parameters": {
        "script": "A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects. It will be parsed as a script, so <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/import\"><code>import</code></a> declarations (which can only exist in modules) are not allowed."
      },
      "returns": "The completion value of evaluating the given code. If the completion value is empty, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned. If <code>script</code> is not a string primitive, <code>eval()</code> returns the argument unchanged."
    },
    "evalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/evalerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>EvalError</code></strong> object indicates an error regarding the global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function. This exception is not thrown by JavaScript anymore, however the <code>EvalError</code> object remains for compatibility.\n<p><code>EvalError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/structuredClone\"><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>EvalError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "evalerror.evalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/evalerror/evalerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>EvalError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/EvalError\"><code>EvalError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties: <dl> <dt id=\"cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. </dd> </dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "finalizationregistry": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "doc": "A <strong><code>FinalizationRegistry</code></strong> object lets you request a callback when a value is garbage-collected."
    },
    "finalizationregistry.finalizationregistry": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/finalizationregistry",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "doc": "The <strong><code>FinalizationRegistry()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> objects.",
      "parameters": {
        "callback": "A function to be invoked each time a registered target value is garbage collected. Its return value is ignored. The function is called with the following arguments: <dl> <dt id=\"heldvalue\"><code>heldValue</code></dt> <dd> <p>The value that was passed to the second parameter of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register\"><code>register()</code></a> method when the <code>target</code> object was registered. </dd> </dl>"
      }
    },
    "finalizationregistry.register": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/register",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "doc": "The <strong><code>register()</code></strong> method registers an value with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> instance so that if the value is garbage-collected, the registry's callback may get called.",
      "parameters": {
        "target": "The target value to register.",
        "heldValue": "The value to pass to the finalizer for this <code>target</code>. This cannot be the <code>target</code> itself but can be anything else, including functions and primitives.",
        "unregisterToken": "A token that may be used with the <code>unregister</code> method later to unregister the target value. If provided (and not <code>undefined</code>), this must be an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>. If not provided, the target cannot be unregistered."
      },
      "returns": "<code>undefined</code>.",
      "throws": {
        "TypeError": "Thrown if one of the following is true: <ul> <li><code>target</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a> (object as opposed to primitives; functions are objects as well)</li> <li><code>target</code> is the same as <code>heldvalue</code> (<code>target === heldValue</code>)</li> <li><code>unregisterToken</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a></li> </ul>"
      }
    },
    "finalizationregistry.unregister": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/unregister",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "doc": "The <strong><code>unregister()</code></strong> method unregisters a target value from a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> instance.",
      "parameters": {
        "unregisterToken": "The token used with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register\"><code>register</code></a> method when registering the target value. Multiple cells registered with the same <code>unregisterToken</code> will be unregistered together."
      },
      "returns": "A boolean value that is <code>true</code> if at least one cell was unregistered and <code>false</code> if no cell was unregistered.",
      "throws": {
        "TypeError": "Thrown if <code>unregisterToken</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      }
    },
    "float32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Float32Array</code></strong> typed array represents an array of 32-bit floating point numbers (corresponding to the C <code>float</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Float32Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "float32array.float32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float32array/float32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Float32Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a> objects. The contents are initialized to <code>0</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "float64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Float64Array</code></strong> typed array represents an array of 64-bit floating point numbers (corresponding to the C <code>double</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Float64Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "float64array.float64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float64array/float64array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Float64Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Float64Array\"><code>Float64Array</code></a> objects. The contents are initialized to <code>0</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "function": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Function</code></strong> object provides methods for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions\">functions</a>. In JavaScript, every function is actually a <code>Function</code> object."
    },
    "function.@@hasinstance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/@@hasinstance",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "15",
        "Firefox": "50",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@hasInstance]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances specifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. It is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator.",
      "parameters": {
        "value": "The object to test. Primitive values always return <code>false</code>."
      },
      "returns": "<code>true</code> if <code>func.prototype</code> is in the prototype chain of <code>value</code>; otherwise, <code>false</code>. Always returns <code>false</code> if <code>value</code> is not an object or <code>this</code> is not a function. If <code>this</code> is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function/bind\">bound function</a>, returns the result of a <code>instanceof</code> test on <code>value</code> and the underlying target function.",
      "throws": {
        "TypeError": "Thrown if <code>this</code> is not a bound function and <code>this.prototype</code> is not an object."
      }
    },
    "function.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/apply",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>apply()</code></strong> method calls the specified function with a given <code>this</code> value, and <code>arguments</code> provided as an array (or an <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like object</a>).",
      "parameters": {
        "thisArg": "The value of <code>this</code> provided for the call to <code>func</code>. If the function is not in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> will be replaced with the global object, and primitive values will be converted to objects.",
        "argsArray": "An array-like object, specifying the arguments with which <code>func</code> should be called, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no arguments should be provided to the function."
      },
      "returns": "The result of calling the function with the specified <code>this</code> value and arguments."
    },
    "function.arguments": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/arguments",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div><div class=\"notecard nonstandard\" id=\"sect2\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<div class=\"notecard note\" id=\"sect3\">\n<p><strong>Note:</strong> The <code>arguments</code> property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> objects is deprecated. The recommended way to access the <code>arguments</code> object is to refer to the variable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> available within functions.\n</div>\n<p>The <strong><code>arguments</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances returns the arguments passed to this function. For <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict</a>, arrow, async, and generator functions, accessing the <code>arguments</code> property throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>."
    },
    "function.bind": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/bind",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "6",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>bind()</code></strong> method creates a new function that, when called, has its <code>this</code> keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
      "parameters": {
        "thisArg": "The value to be passed as the <code>this</code> parameter to the target function <code>func</code> when the bound function is called. If the function is not in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> will be replaced with the global object, and primitive values will be converted to objects. The value is ignored if the bound function is constructed using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator.",
        "arg1, …, argN": "Arguments to prepend to arguments provided to the bound function when invoking <code>func</code>."
      },
      "returns": "A copy of the given function with the specified <code>this</code> value, and initial arguments (if provided)."
    },
    "function.call": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/call",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>call()</code></strong> method calls the function with a given <code>this</code> value and arguments provided individually.",
      "parameters": {
        "thisArg": "The value to use as <code>this</code> when calling <code>func</code>. If the function is not in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> will be replaced with the global object, and primitive values will be converted to objects.",
        "arg1, …, argN": "Arguments for the function."
      },
      "returns": "The result of calling the function with the specified <code>this</code> value and arguments."
    },
    "function.caller": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/caller",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "9.6",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard nonstandard\" id=\"sect1\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div><div class=\"notecard deprecated\" id=\"sect2\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect3\">\n<p><strong>Note:</strong> In <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, accessing <code>caller</code> of a function throws an error — the API is removed with no replacement. This is to prevent code from being able to \"walk the stack\", which both poses security risks and severely limits the possibility of optimizations like inlining and tail-call optimization. For more explanation, you can read <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/arguments/callee#description\">the rationale for the deprecation of <code>arguments.callee</code></a>.\n</div>\n<p>The <strong><code>caller</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instances returns the function that invoked this function. For <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">strict</a>, arrow, async, and generator functions, accessing the <code>caller</code> property throws a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>."
    },
    "function.displayname": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/displayname",
      "compatibility": {
        "Firefox": "13"
      },
      "doc": "<div class=\"notecard nonstandard\" id=\"sect1\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The optional <strong><code>displayName</code></strong> property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instance specifies the display name of the function."
    },
    "function.function": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/function",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Function()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> objects. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a>. However, unlike <code>eval</code> (which may have access to the local scope), the <code>Function</code> constructor creates functions which execute in the global scope only.",
      "parameters": {
        "argN": "Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript parameter (any of plain <a href=\"$MDN_URL$/Glossary/Identifier\">identifier</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/rest_parameters\">rest parameter</a>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destructured</a> parameter, optionally with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/Default_parameters\">default</a>), or a list of such strings separated with commas. <p>As the parameters are parsed in the same way as function expressions, whitespace and comments are accepted. For example: <code>\"x\", \"theValue = 42\", \"[a, b] /* numbers */\"</code> — or <code>\"x, theValue = 42, [a, b] /* numbers */\"</code>. (<code>\"x, theValue = 42\", \"[a, b]\"</code> is also correct, though very confusing to read.)",
        "functionBody": "A string containing the JavaScript statements comprising the function definition."
      }
    },
    "function.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/length",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>length</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instance indicates the number of parameters expected by the function."
    },
    "function.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/name",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "15",
        "ChromeAndroid": "",
        "Edge": "14",
        "Firefox": "",
        "Opera": "10.5",
        "Safari": "6",
        "SafariIOS": "6",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>name</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instance indicates the function's name as specified when it was created, or it may be either <code>anonymous</code> or <code>''</code> (an empty string) for functions created anonymously."
    },
    "function.prototype": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/prototype",
      "doc": "The <strong><code>prototype</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> instance is used when the function is used as a constructor with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator. It will become the new object's prototype.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> Not all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> objects have the <code>prototype</code> property — see <a href=\"#description\">description</a>.\n</div>"
    },
    "function.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the source code of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>.",
      "returns": "A string representing the source code of the function."
    },
    "generator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Generator</code></strong> object is returned by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/function*\">generator function</a> and it conforms to both the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable protocol</a> and the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\">iterator protocol</a>.\n<p><code>Generator</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> class."
    },
    "generator.next": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/next",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>next()</code></strong> method returns an\nobject with two properties <code>done</code> and <code>value</code>. You can also\nprovide a parameter to the <code>next</code> method to send a value to the\ngenerator.",
      "parameters": {
        "value": "The value to send to the generator. <p>The value will be assigned as a result of a <code>yield</code> expression. For example, in <code>variable = yield expression</code>, the value passed to the <code>.next()</code> function will be assigned to <code>variable</code>."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n  <dt id=\"done\"><code>done</code></dt>\n  <dd>\n    <p>A boolean value:\n    <ul>\n      <li><code>true</code> if the generator is past the end of its control flow. In this case <code>value</code> specifies the <em>return value</em> of the generator (which may be undefined).</li>\n      <li><code>false</code> if the generator is able to produce more values.</li>\n    </ul>\n  </dd>\n  <dt id=\"value_2\"><code>value</code></dt>\n  <dd>\n    <p>Any JavaScript value yielded or returned by the generator.\n  </dd>\n</dl>"
    },
    "generator.return": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/return",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "13",
        "Firefox": "38",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>return()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Generator\"><code>Generator</code></a> instances acts as if a <code>return</code> statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a> block.",
      "parameters": {
        "value": "The value to return."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n  <dt id=\"done\"><code>done</code></dt>\n  <dd>\n    <p>A boolean value:\n    <ul>\n      <li><code>true</code> if the generator function's control flow has reached the end.</li>\n      <li><code>false</code> if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the <code>return</code> is captured in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a> and there are more <code>yield</code> expressions in the <code>finally</code> block.</li>\n    </ul>\n  </dd>\n  <dt id=\"value_2\"><code>value</code></dt>\n  <dd>\n    <p>The value that is given as an argument, or, if the <code>yield</code> expression is wrapped in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"><code>try...finally</code></a>, the value yielded/returned from the <code>finally</code> block.\n  </dd>\n</dl>"
    },
    "generator.throw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/throw",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>throw()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Generator\"><code>Generator</code></a> instances acts as if a <code>throw</code> statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",
      "parameters": {
        "exception": "The exception to throw. For debugging purposes, it is useful to make it an <code>instanceof</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
      },
      "returns": "If the thrown exception is caught by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> and the generator resumes to yield more values, it will return an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:\n<dl>\n  <dt id=\"done\"><code>done</code></dt>\n  <dd>\n    <p>A boolean value:\n    <ul>\n      <li><code>true</code> if the generator function's control flow has reached the end.</li>\n      <li><code>false</code> if the generator function is able to produce more values.</li>\n    </ul>\n  </dd>\n  <dt id=\"value\"><code>value</code></dt>\n  <dd>\n    <p>The value yielded from the next <code>yield</code> expression.\n  </dd>\n</dl>"
    },
    "generatorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generatorfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>GeneratorFunction</code></strong> object provides methods for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/function*\">generator functions</a>. In JavaScript, every generator function is actually a <code>GeneratorFunction</code> object.\n<p>Note that <code>GeneratorFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\"><pre class=\"brush: js notranslate\"><code>const GeneratorFunction = function* () {}.constructor;\n</code></pre></span></div>\n<p><code>GeneratorFunction</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>."
    },
    "generatorfunction.generatorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generatorfunction/generatorfunction",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "39",
        "ChromeAndroid": "39",
        "Edge": "13",
        "Firefox": "26",
        "Opera": "26",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>GeneratorFunction()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a> objects.\n<p>Note that <code>GeneratorFunction</code> is <em>not</em> a global object. It can be obtained with the following code:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\"><pre class=\"brush: js notranslate\"><code>const GeneratorFunction = function* () {}.constructor;\n</code></pre></span></div>\n<p>The <code>GeneratorFunction()</code> constructor is not intended to be used directly, and all caveats mentioned in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function()</code></a> description apply to <code>GeneratorFunction()</code>."
    },
    "globalthis": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/globalthis",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "Opera": "58",
        "Safari": "12.1",
        "SafariIOS": "12.2",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>globalThis</code></strong> global property contains the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this#global_context\">global <code>this</code></a> value, which is usually akin to the <a href=\"$MDN_URL$/Glossary/Global_object\">global object</a>."
    },
    "infinity": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/infinity",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Infinity</code></strong> global property is a numeric value representing infinity."
    },
    "int16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Int16Array</code></strong> typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Int16Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "int16array.int16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int16array/int16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Int16Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a> objects. The contents are initialized to <code>0</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "int32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Int32Array</code></strong> typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Int32Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "int32array.int32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int32array/int32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Int32Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> objects. The contents are initialized to <code>0</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "int8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int8array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Int8Array</code></strong> typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Int8Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "int8array.int8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int8array/int8array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Int8Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a> objects. The contents are initialized to <code>0</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "internalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/internalerror",
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<div class=\"notecard nonstandard\" id=\"sect1\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>InternalError</code> object</strong> indicates an error that occurred internally in the JavaScript engine.\n<p>Example cases are mostly when something is too large, e.g.:\n<ul>\n<li>\"too many switch cases\",</li>\n<li>\"too many parentheses in regular expression\",</li>\n<li>\"array initializer too large\",</li>\n<li>\"too much recursion\".</li>\n</ul>\n<p><code>InternalError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "internalerror.internalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/internalerror/internalerror",
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<div class=\"notecard nonstandard\" id=\"sect1\"><p><strong>Non-standard:</strong> This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</div>\n<p>The <strong><code>InternalError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/InternalError\"><code>InternalError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties: <dl> <dt id=\"cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. </dd> </dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "intl": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl</code></strong> namespace object contains several constructors as well as functionality common to the internationalization constructors and other language sensitive functions. Collectively, they comprise the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, date and time formatting, and more."
    },
    "intl.collator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.Collator</code></strong> object enables language-sensitive string comparison."
    },
    "intl.collator.collator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/collator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.Collator()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>. <p>The following Unicode extension keys are allowed: <div class=\"notecard note\" id=\"sect2\"> <p><strong>Note:</strong> These keys can usually also be set with <code>options</code> (as listed below). When both are set, the <code>options</code> property takes precedence. </div> <dl> <dt id=\"co\"><code>co</code></dt> <dd> <p>Variant collations for certain locales. Possible values include: <ul> <li><code>big5han</code> (Chinese; do not use; not available in Firefox, Chrome or Edge)</li> <li><code>compat</code> (Arabic)</li> <li><code>dict</code> (Sinhala)</li> <li><code>direct</code> (deprecated, do not use)</li> <li><code>ducet</code> (not available, do not use)</li> <li><code>emoji</code> (root)</li> <li><code>eor</code> (root)</li> <li><code>gb2312</code> (Chinese; do not use; not available in Chrome or Edge)</li> <li><code>phonebk</code> (German)</li> <li><code>phonetic</code> (Lingala)</li> <li><code>pinyin</code> (Chinese)</li> <li><code>reformed</code> (formerly Swedish; do not specify explicitly as this was the old name for the default for Swedish)</li> <li><code>searchjl</code> (Korean; this is not for sorting, but for search matching such that syllable-initial consonants are matched and vowels and possible syllable-final consonants are ignored)</li> <li><code>stroke</code> (Chinese)</li> <li><code>trad</code></li> <li><code>unihan</code> (Chinese, Japanese, and Korean; not available in Chrome or Edge)</li> <li><code>zhuyin</code> (Chinese)</li> </ul> <p>This option can be also be set through the <code>options</code> property <code>collation</code>. </dd> <dt id=\"kn\"><code>kn</code></dt> <dd> <p>Whether numeric collation should be used, such that \"1\" &lt; \"2\" &lt; \"10\". Possible values are <code>\"true\"</code> and <code>\"false\"</code>. This option can be also be set through the <code>options</code> property <code>numeric</code>. </dd> <dt id=\"kf\"><code>kf</code></dt> <dd> <p>Whether upper case or lower case should sort first. Possible values are <code>\"upper\"</code>, <code>\"lower\"</code>, or <code>\"false\"</code> (use the locale's default). This option can be also be set through the <code>options</code> property <code>caseFirst</code>. </dd> </dl>",
        "options": "An object with some or all of the following properties: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> <dt id=\"usage\"><code>usage</code></dt> <dd> <p>Whether the comparison is for sorting a list of strings or fuzzy (for the Latin script diacritic-insensitive and case-insensitive) filtering a list of strings by key. Possible values are <code>\"sort\"</code> and <code>\"search\"</code>; the default is <code>\"sort\"</code> for sorting a list of strings. <code>\"search\"</code> is for filtering a list of strings by testing each list item for a full-string match against a key. With <code>\"search\"</code>, the caller should only pay attention to whether <code>compare()</code> returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use <code>\"search\"</code> for sorting/ordering. </dd> <dt id=\"sensitivity\"><code>sensitivity</code></dt> <dd> <p>Which differences in the strings should lead to non-zero result values. Possible values are: <ul> <li> <code>\"base\"</code>: Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A. </li> <li> <code>\"accent\"</code>: Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a ≠ b, a ≠ á, a = A. </li> <li> <code>\"case\"</code>: Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A. </li> <li> <code>\"variant\"</code>: Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A. </li> </ul> <p>The default is <code>\"variant\"</code> for usage <code>\"sort\"</code>; it's locale dependent for usage <code>\"search\"</code> per spec, but the core functionality of <code>\"search\"</code> is accent-insensitive and case-insensitive filtering, so <code>\"base\"</code> makes the most sense (and perhaps <code>\"case\"</code>). </dd> <dt id=\"ignorepunctuation\"><code>ignorePunctuation</code></dt> <dd> <p>Whether punctuation should be ignored. Possible values are <code>true</code> and <code>false</code>; the default is <code>false</code>. </dd> <dt id=\"numeric\"><code>numeric</code></dt> <dd> <p>Whether numeric collation should be used, such that \"1\" &lt; \"2\" &lt; \"10\". Possible values are <code>true</code> and <code>false</code>; the default is <code>false</code>. This option can also be set through the <code>kn</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence. </dd> <dt id=\"casefirst\"><code>caseFirst</code></dt> <dd> <p>Whether upper case or lower case should sort first. Possible values are <code>\"upper\"</code>, <code>\"lower\"</code>, or <code>\"false\"</code> (use the locale's default). This option can also be set through the <code>kf</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence. </dd> <dt id=\"collation\"><code>collation</code></dt> <dd> <p>Variant collations for certain locales. Possible values include: <ul> <li><code>big5han</code> (Chinese; do not use; not available in Firefox, Chrome or Edge)</li> <li><code>compat</code> (Arabic)</li> <li><code>dict</code> (Sinhala)</li> <li><code>direct</code> (deprecated, do not use)</li> <li><code>ducet</code> (not available, do not use)</li> <li><code>emoji</code> (root)</li> <li><code>eor</code> (root)</li> <li><code>gb2312</code> (Chinese; do not use; not available in Firefox, Chrome or Edge)</li> <li><code>phonebk</code> (German)</li> <li><code>phonetic</code> (Lingala)</li> <li><code>pinyin</code> (Chinese)</li> <li><code>reformed</code> (formerly Swedish; do not specify explicitly as this was the old name for the default for Swedish)</li> <li><code>searchjl</code> (Korean; this is not for sorting, but for search matching such that syllable-initial consonants are matched and vowels and possible syllable-final consonants are ignored)</li> <li><code>stroke</code> (Chinese)</li> <li><code>trad</code></li> <li><code>unihan</code> (Chinese, Japanese, and Korean; not available in Chrome or Edge)</li> <li><code>zhuyin</code> (Chinese)</li> </ul> <p>This option can also be set through the <code>co</code> Unicode extension key; if both are provided, this <code>options</code> property takes precedence. </dd> </dl>"
      }
    },
    "intl.collator.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/compare",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>compare()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> instances compares two\nstrings according to the sort order of this collator object.",
      "parameters": {
        "string1, string2": "The strings to compare against each other."
      }
    },
    "intl.collator.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> instances returns a new object with properties reflecting the locale and collation options\ncomputed during initialization of this collator object.",
      "returns": "A new object with properties reflecting the locale and collation options computed\n  during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> object."
    },
    "intl.collator.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.Collator.supportedLocalesOf()</code></strong> static method returns an\narray containing those of the provided locales that are supported in collation without\nhaving to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> </dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported\n  in collation without having to fall back to the runtime's default locale."
    },
    "intl.datetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.DateTimeFormat</code></strong> object enables language-sensitive date and time formatting."
    },
    "intl.datetimeformat.datetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/datetimeformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.DateTimeFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>. The following Unicode extension keys are allowed: <dl> <dt id=\"nu\"><code>nu</code></dt> <dd> <p>Numbering system. Possible values include: <code>\"arab\"</code>, <code>\"arabext\"</code>, <code>\"bali\"</code>, <code>\"beng\"</code>, <code>\"deva\"</code>, <code>\"fullwide\"</code>, <code>\"gujr\"</code>, <code>\"guru\"</code>, <code>\"hanidec\"</code>, <code>\"khmr\"</code>, <code>\"knda\"</code>, <code>\"laoo\"</code>, <code>\"latn\"</code>, <code>\"limb\"</code>, <code>\"mlym\"</code>, <code>\"mong\"</code>, <code>\"mymr\"</code>, <code>\"orya\"</code>, <code>\"tamldec\"</code>, <code>\"telu\"</code>, <code>\"thai\"</code>, <code>\"tibt\"</code>. </dd> <dt id=\"ca\"><code>ca</code></dt> <dd> <p>Calendar. Possible values include: <code>\"buddhist\"</code>, <code>\"chinese\"</code>, <code>\"coptic\"</code>, <code>\"dangi\"</code>, <code>\"ethioaa\"</code>, <code>\"ethiopic\"</code>, <code>\"gregory\"</code>, <code>\"hebrew\"</code>, <code>\"indian\"</code>, <code>\"islamic\"</code>, <code>\"islamic-umalqura\"</code>, <code>\"islamic-tbla\"</code>, <code>\"islamic-civil\"</code>, <code>\"islamic-rgsa\"</code>, <code>\"iso8601\"</code>, <code>\"japanese\"</code>, <code>\"persian\"</code>, <code>\"roc\"</code>, <code>\"islamicc\"</code>. <div class=\"notecard warning\" id=\"sect2\"> <p><strong>Warning:</strong> The <code>islamicc</code> calendar key has been deprecated. Please use <code>islamic-civil</code>. </div> </dd> <dt id=\"hc\"><code>hc</code></dt> <dd> <p>Hour cycle. Possible values include: <code>\"h11\"</code>, <code>\"h12\"</code>, <code>\"h23\"</code>, <code>\"h24\"</code>. </dd> </dl>",
        "options": "An object with some or all of the following properties: <dl> <dt id=\"datestyle\"><code>dateStyle</code></dt> <dd> <p>The date formatting style to use when calling <code>format()</code>. Possible values include: <ul> <li><code>\"full\"</code></li> <li><code>\"long\"</code></li> <li><code>\"medium\"</code></li> <li><code>\"short\"</code></li> </ul> <div class=\"notecard note\" id=\"sect3\"> <p><strong>Note:</strong> <code>dateStyle</code> can be used with <code>timeStyle</code>, but not with other options (e.g. <code>weekday</code>, <code>hour</code>, <code>month</code>, etc.). </div> </dd> <dt id=\"timestyle\"><code>timeStyle</code></dt> <dd> <p>The time formatting style to use when calling <code>format()</code>. Possible values include: <ul> <li><code>\"full\"</code></li> <li><code>\"long\"</code></li> <li><code>\"medium\"</code></li> <li><code>\"short\"</code></li> </ul> <div class=\"notecard note\" id=\"sect4\"> <p><strong>Note:</strong> <code>timeStyle</code> can be used with <code>dateStyle</code>, but not with other options (e.g. <code>weekday</code>, <code>hour</code>, <code>month</code>, etc.). </div> </dd> <dt id=\"calendar\"><code>calendar</code></dt> <dd> <p>Calendar. Possible values include: <code>\"buddhist\"</code>, <code>\"chinese\"</code>, <code>\"coptic\"</code>, <code>\"dangi\"</code>, <code>\"ethioaa\"</code>, <code>\"ethiopic\"</code>, <code>\"gregory\"</code>, <code>\"hebrew\"</code>, <code>\"indian\"</code>, <code>\"islamic\"</code>, <code>\"islamic-umalqura\"</code>, <code>\"islamic-tbla\"</code>, <code>\"islamic-civil\"</code>, <code>\"islamic-rgsa\"</code>, <code>\"iso8601\"</code>, <code>\"japanese\"</code>, <code>\"persian\"</code>, <code>\"roc\"</code>, <code>\"islamicc\"</code>. <div class=\"notecard warning\" id=\"sect5\"> <p><strong>Warning:</strong> The <code>islamicc</code> calendar key has been deprecated. Please use <code>islamic-civil</code>. </div> </dd> <dt id=\"dayperiod\"><code>dayPeriod</code></dt> <dd> <p>The formatting style used for day periods like \"in the morning\", \"am\", \"noon\", \"n\" etc. Possible values include: <code>\"narrow\"</code>, <code>\"short\"</code>, <code>\"long\"</code>. <div class=\"notecard note\" id=\"sect6\"> <p><strong>Note:</strong> <ul> <li>This option only has an effect if a 12-hour clock is used.</li> <li>Many locales use the same string irrespective of the width specified.</li> </ul> </div> </dd> <dt id=\"numberingsystem\"><code>numberingSystem</code></dt> <dd> <p>Numbering System. Possible values include: <code>\"arab\"</code>, <code>\"arabext\"</code>, <code>\"bali\"</code>, <code>\"beng\"</code>, <code>\"deva\"</code>, <code>\"fullwide\"</code>, <code>\"gujr\"</code>, <code>\"guru\"</code>, <code>\"hanidec\"</code>, <code>\"khmr\"</code>, <code>\"knda\"</code>, <code>\"laoo\"</code>, <code>\"latn\"</code>, <code>\"limb\"</code>, <code>\"mlym\"</code>, <code>\"mong\"</code>, <code>\"mymr\"</code>, <code>\"orya\"</code>, <code>\"tamldec\"</code>, <code>\"telu\"</code>, <code>\"thai\"</code>, <code>\"tibt\"</code>. </dd> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> <dt id=\"timezone\"><code>timeZone</code></dt> <dd> <p>The time zone to use. The only value implementations must recognize is <code>\"UTC\"</code>; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the <a href=\"https://www.iana.org/time-zones\" class=\"external\" target=\"_blank\">IANA time zone database</a>, such as <code>\"Asia/Shanghai\"</code>, <code>\"Asia/Kolkata\"</code>, <code>\"America/New_York\"</code>. </dd> <dt id=\"hour12\"><code>hour12</code></dt> <dd> <p>Whether to use 12-hour time (as opposed to 24-hour time). Possible values are <code>true</code> and <code>false</code>; the default is locale dependent. This option overrides the <code>hc</code> language tag and/or the <code>hourCycle</code> option in case both are present. </dd> <dt id=\"hourcycle\"><code>hourCycle</code></dt> <dd> <p>The hour cycle to use. Possible values are <code>\"h11\"</code>, <code>\"h12\"</code>, <code>\"h23\"</code>, or <code>\"h24\"</code>. This option overrides the <code>hc</code> language tag, if both are present, and the <code>hour12</code> option takes precedence in case both options have been specified. </dd> <dt id=\"formatmatcher\"><code>formatMatcher</code></dt> <dd> <p>The format matching algorithm to use. Possible values are <code>\"basic\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. See the following paragraphs for information about the use of this property. </dd> </dl> <p>The following properties describe the date-time components to use in formatted output, and their desired representations. Implementations are required to support at least the following subsets: <ul> <li> <code>weekday</code>, <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code> </li> <li> <code>weekday</code>, <code>year</code>, <code>month</code>, <code>day</code> </li> <li><code>year</code>, <code>month</code>, <code>day</code></li> <li><code>year</code>, <code>month</code></li> <li><code>month</code>, <code>day</code></li> <li><code>hour</code>, <code>minute</code>, <code>second</code></li> <li><code>hour</code>, <code>minute</code></li> </ul> <p>Implementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. Two algorithms are available for this negotiation and selected by the <code>formatMatcher</code> property: A <a href=\"https://402.ecma-international.org/1.0/#BasicFormatMatcher\" class=\"external\" target=\"_blank\">fully specified <code>\"basic\"</code> algorithm</a> and an implementation-dependent <code>\"best fit\"</code> algorithm. <dl> <dt id=\"weekday\"><code>weekday</code></dt> <dd> <p>The representation of the weekday. Possible values are: <ul> <li><code>\"long\"</code> (e.g., <code>Thursday</code>)</li> <li><code>\"short\"</code> (e.g., <code>Thu</code>)</li> <li> <code>\"narrow\"</code> (e.g., <code>T</code>). Two weekdays may have the same narrow style for some locales (e.g. <code>Tuesday</code>'s narrow style is also <code>T</code>). </li> </ul> </dd> <dt id=\"era\"><code>era</code></dt> <dd> <p>The representation of the era. Possible values are: <ul> <li><code>\"long\"</code> (e.g., <code>Anno Domini</code>)</li> <li><code>\"short\"</code> (e.g., <code>AD</code>)</li> <li><code>\"narrow\"</code> (e.g., <code>A</code>)</li> </ul> </dd> <dt id=\"year\"><code>year</code></dt> <dd> <p>The representation of the year. Possible values are: <ul> <li><code>\"numeric\"</code> (e.g., <code>2012</code>)</li> <li><code>\"2-digit\"</code> (e.g., <code>12</code>)</li> </ul> </dd> <dt id=\"month\"><code>month</code></dt> <dd> <p>The representation of the month. Possible values are: <ul> <li><code>\"numeric\"</code> (e.g., <code>3</code>)</li> <li><code>\"2-digit\"</code> (e.g., <code>03</code>)</li> <li><code>\"long\"</code> (e.g., <code>March</code>)</li> <li><code>\"short\"</code> (e.g., <code>Mar</code>)</li> <li> <code>\"narrow\"</code> (e.g., <code>M</code>). Two months may have the same narrow style for some locales (e.g. <code>May</code>'s narrow style is also <code>M</code>). </li> </ul> </dd> <dt id=\"day\"><code>day</code></dt> <dd> <p>The representation of the day. Possible values are: <ul> <li><code>\"numeric\"</code> (e.g., <code>1</code>)</li> <li><code>\"2-digit\"</code> (e.g., <code>01</code>)</li> </ul> </dd> <dt id=\"hour\"><code>hour</code></dt> <dd> <p>The representation of the hour. Possible values are <code>\"numeric\"</code>, <code>\"2-digit\"</code>. </dd> <dt id=\"minute\"><code>minute</code></dt> <dd> <p>The representation of the minute. Possible values are <code>\"numeric\"</code>, <code>\"2-digit\"</code>. </dd> <dt id=\"second\"><code>second</code></dt> <dd> <p>The representation of the second. Possible values are <code>\"numeric\"</code>,<code>\"2-digit\"</code>. </dd> <dt id=\"fractionalseconddigits\"><code>fractionalSecondDigits</code></dt> <dd> <p>The number of digits used to represent fractions of a second (any additional digits are truncated). Possible values are: <ul> <li> <code>1</code> (Fractional part represented as 1 digit. For example, 736 is formatted as <code>7</code>.) </li> <li> <code>2</code> (Fractional part represented as 2 digits. For example, 736 is formatted as <code>73</code>.) </li> <li> <code>3</code> (Fractional part represented as 3 digits. For example, 736 is formatted as <code>736</code>.) </li> </ul> </dd> <dt id=\"timezonename\"><code>timeZoneName</code></dt> <dd> <p>The localized representation of the time zone name. Possible values are: <ul> <li><code>\"long\"</code> Long localized form (e.g., <code>Pacific Standard Time</code>, <code>Nordamerikanische Westküsten-Normalzeit</code>)</li> <li><code>\"short\"</code> Short localized form (e.g.: <code>PST</code>, <code>GMT-8</code>)</li> <li><code>\"shortOffset\"</code> Short localized GMT format (e.g., <code>GMT-8</code>)</li> <li><code>\"longOffset\"</code> Long localized GMT format (e.g., <code>GMT-0800</code>)</li> <li><code>\"shortGeneric\"</code> Short generic non-location format (e.g.: <code>PT</code>, <code>Los Angeles Zeit</code>).</li> <li><code>\"longGeneric\"</code> Long generic non-location format (e.g.: <code>Pacific Time</code>, <code>Nordamerikanische Westküstenzeit</code>)</li> </ul> <div class=\"notecard note\" id=\"sect7\"> <p><strong>Note:</strong> Timezone display may fall back to another format if a required string is unavailable. For example, the non-location formats should display the timezone without a specific country/city location like \"Pacific Time\", but may fall back to a timezone like \"Los Angeles Time\". </div> </dd> </dl> <p>The default value for each date-time component property is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, but if all component properties are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, then <code>year</code>, <code>month</code>, and <code>day</code> are assumed to be <code>\"numeric\"</code>."
      },
      "returns": "A new <code>Intl.DateTimeFormat</code> object.\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>Note:</strong> The text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the <a href=\"#browser_compatibility\">browser compatibility table</a>.\n</div>\n<p>Normally, <code>Intl.DateTimeFormat()</code> can be called with or without <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>, and a new <code>Intl.DateTimeFormat</code> instance is returned in both cases. However, if the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> value is an object that is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> <code>Intl.DateTimeFormat</code> (doesn't necessarily mean it's created via <code>new Intl.DateTimeFormat</code>; just that it has <code>Intl.DateTimeFormat.prototype</code> in its prototype chain), then the value of <code>this</code> is returned instead, with the newly created <code>Intl.DateTimeFormat</code> object hidden in a <code>[Symbol(IntlLegacyConstructedSymbol)]</code> property (a unique symbol that's reused between instances).\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js<pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> formatter <span class=\"token operator\">=</span> Intl<span class=\"token punctuation\">.</span><span class=\"token function\">DateTimeFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> Intl<span class=\"token punctuation\">.</span><span class=\"token class-name\">DateTimeFormat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"en-US\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dateStyle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"full\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   [Symbol(IntlLegacyConstructedSymbol)]: {</span>\n<span class=\"token comment\">//     value: DateTimeFormat [Intl.DateTimeFormat] {},</span>\n<span class=\"token comment\">//     writable: false,</span>\n<span class=\"token comment\">//     enumerable: false,</span>\n<span class=\"token comment\">//     configurable: false</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span>\n</code></pre></span></div>\n<p>Note that there's only one actual <code>Intl.DateTimeFormat</code> instance here: the one hidden in <code>[Symbol(IntlLegacyConstructedSymbol)]</code>. Calling the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions\"><code>resolvedOptions()</code></a> methods on <code>formatter</code> would correctly use the options stored in that instance, but calling all other methods (e.g. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange\"><code>formatRange()</code></a>) would fail: \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n<p>This behavior, called <code>ChainDateTimeFormat</code>, does not happen when <code>Intl.DateTimeFormat()</code> is called without <code>new</code> but with <code>this</code> set to anything else that's not an <code>instanceof Intl.DateTimeFormat</code>. If you call it directly as <code>Intl.DateTimeFormat()</code>, the <code>this</code> value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a>, and a new <code>Intl.DateTimeFormat</code> instance is created normally."
    },
    "intl.datetimeformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/format",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>format()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances formats a date according to the locale and formatting options of this <code>Intl.DateTimeFormat</code> object.",
      "parameters": {
        "date": "The date to format."
      }
    },
    "intl.datetimeformat.formatrange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formatrange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "76",
        "ChromeAndroid": "76",
        "Edge": "79",
        "Firefox": "91",
        "Opera": "63",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.9.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>formatRange()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances formats a\ndate range in the most concise way based on the locales and\noptions provided when instantiating this\n<code>Intl.DateTimeFormat</code> object."
    },
    "intl.datetimeformat.formatrangetoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formatrangetoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "76",
        "ChromeAndroid": "76",
        "Edge": "79",
        "Firefox": "91",
        "Opera": "63",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.9.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>formatRangeToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances returns an array of locale-specific tokens representing each part of the formatted date\nrange produced by this <code>Intl.DateTimeFormat</code> object."
    },
    "intl.datetimeformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "18",
        "Firefox": "51",
        "Opera": "44",
        "Safari": "11",
        "SafariIOS": "11",
        "Nodejs": "8.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances allows locale-aware formatting of strings produced by this <code>Intl.DateTimeFormat</code> object.",
      "parameters": {
        "date": "The date to format."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted date in parts."
    },
    "intl.datetimeformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this <code>Intl.DateTimeFormat</code> object.",
      "returns": "A new object with properties reflecting the locale and date and time formatting options\n  computed during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object."
    },
    "intl.datetimeformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.DateTimeFormat.supportedLocalesOf()</code></strong> static method\nreturns an array containing those of the provided locales that are supported in date\nand time formatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> </dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported\n  in date and time formatting without having to fall back to the runtime's default\n  locale."
    },
    "intl.displaynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.DisplayNames</code></strong> object enables the consistent translation of language, region and script display names."
    },
    "intl.displaynames.displaynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/displaynames",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.DisplayNames()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\"><code>Intl.DisplayNames</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>. The following Unicode extension key is allowed: <dl> <dt id=\"nu\"><code>nu</code></dt> <dd> <p>The numbering system to be used. Possible values include: <code>\"arab\"</code>, <code>\"arabext\"</code>, <code>\"bali\"</code>, <code>\"beng\"</code>, <code>\"deva\"</code>, <code>\"fullwide\"</code>, <code>\"gujr\"</code>, <code>\"guru\"</code>, <code>\"hanidec\"</code>, <code>\"khmr\"</code>, <code>\"knda\"</code>, <code>\"laoo\"</code>, <code>\"latn\"</code>, <code>\"limb\"</code>, <code>\"mlym\"</code>, <code>\"mong\"</code>, <code>\"mymr\"</code>, <code>\"orya\"</code>, <code>\"tamldec\"</code>, <code>\"telu\"</code>, <code>\"thai\"</code>, <code>\"tibt\"</code>. </dd> </dl>",
        "options": "An object with some or all of the following properties: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> <dt id=\"style\"><code>style</code></dt> <dd> <p>The formatting style to use, the default is <code>\"long\"</code>. <ul> <li><code>\"narrow\"</code></li> <li><code>\"short\"</code></li> <li><code>\"long\"</code></li> </ul> </dd> <dt id=\"type\"><code>type</code></dt> <dd> <p>The type to use. <ul> <li><code>\"calendar\"</code></li> <li><code>\"currency\"</code></li> <li><code>\"dateTimeField\"</code></li> <li><code>\"language\"</code></li> <li><code>\"region\"</code></li> <li><code>\"script\"</code></li> </ul> </dd> <dt id=\"languagedisplay\"><code>languageDisplay</code></dt> <dd> <p>The <code>languageDisplay</code> it's only usable along with type <code>language</code>, defaults to <code>dialect</code>. <ul> <li><code>\"dialect\"</code></li> <li><code>\"standard\"</code></li> </ul> </dd> <dt id=\"fallback\"><code>fallback</code></dt> <dd> <p>The fallback to use, the default is <code>\"code\"</code>. <ul> <li><code>\"code\"</code></li> <li><code>\"none\"</code></li> </ul> </dd> </dl>"
      }
    },
    "intl.displaynames.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/of",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>of()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\"><code>Intl.DisplayNames</code></a> instances receives a code and returns a string based on the locale and options provided when instantiating this <code>Intl.DisplayNames</code> object.",
      "parameters": {
        "code": "The <code>code</code> to provide depends on the <code>type</code>: <ul> <li>If the type is \"region\", <code>code</code> should be either an <a href=\"https://www.iso.org/iso-3166-country-codes.html\" class=\"external\" target=\"_blank\">two-letter ISO 3166 region code</a>, or a <a href=\"https://unstats.un.org/unsd/methodology/m49/\" class=\"external\" target=\"_blank\">three-digit UN M49 geographic region</a>. It is required to follow the <a href=\"https://unicode.org/reports/tr35/#unicode_region_subtag\" class=\"external\" target=\"_blank\"><code>unicode_region_subtag</code></a> grammar.</li> <li>If the type is \"script\", <code>code</code> should be an <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" class=\"external\" target=\"_blank\">four-letter ISO 15924 script code</a>. It is required to follow the <a href=\"https://unicode.org/reports/tr35/#unicode_script_subtag\" class=\"external\" target=\"_blank\"><code>unicode_script_subtag</code></a> grammar.</li> <li>If the type is \"language\", <code>code</code> should be a <em>languageCode</em> [\"-\" <em>scriptCode</em>] [\"-\" <em>regionCode</em> ] *(\"-\" <em>variant</em> ) subsequence of the <a href=\"https://unicode.org/reports/tr35/#Unicode_language_identifier\" class=\"external\" target=\"_blank\"><code>unicode_language_id</code></a> grammar. <em>languageCode</em> is either a two-letter ISO 639-1 language code or a three-letter ISO 639-2 language code.</li> <li>If the type is \"currency\", <code>code</code> should be a <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" class=\"external\" target=\"_blank\">three-letter ISO 4217 currency code</a>. It is required to have exactly three alphabetic characters.</li> <li>If the type is \"dateTimeField\", <code>code</code> should be one of: <code>\"era\"</code>, <code>\"year\"</code>, <code>\"quarter\"</code>, <code>\"month\"</code>, <code>\"weekOfYear\"</code>, <code>\"weekday\"</code>, <code>\"day\"</code>, <code>\"dayPeriod\"</code>, <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>, <code>\"timeZoneName\"</code>.</li> <li>If the type is \"calendar\", <code>code</code> should be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar\">calendar key</a>. It is required to follow the <code>type</code> grammar of a <a href=\"https://unicode.org/reports/tr35/#32-unicode-locale-identifier\" class=\"external\" target=\"_blank\">Unicode locale identifier</a>.</li> </ul>"
      },
      "returns": "A language-specific formatted string, or <code>undefined</code> if there's no data for the input and <code>fallback</code> is <code>\"none\"</code>.\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <code>fallback</code> is only used if <code>code</code> is structurally valid. See <a href=\"#using_fallback\">using fallback</a>.\n</div>",
      "throws": {
        "RangeError": "Thrown if <code>code</code> is not structurally valid for the given <code>type</code>."
      }
    },
    "intl.displaynames.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\"><code>Intl.DisplayNames</code></a> instances\nreturns a new object with properties reflecting the locale and style formatting\noptions computed during the construction of this <code>Intl.DisplayNames</code>\nobject.",
      "returns": "An object with properties reflecting the locale and formatting options computed during\n  the construction of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\"><code>Intl.DisplayNames</code></a> object."
    },
    "intl.displaynames.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "81",
        "ChromeAndroid": "81",
        "Edge": "81",
        "Firefox": "86",
        "Opera": "68",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.DisplayNames.supportedLocalesOf()</code></strong> static method returns\nan array containing those of the provided locales that are supported in display names\nwithout having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> </dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported\n  in display names without having to fall back to the runtime's default locale."
    },
    "intl.durationformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Intl.DurationFormat</code></strong> object enables language-sensitive duration formatting."
    },
    "intl.durationformat.durationformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/durationformat",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Intl.DurationFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object with some or all of the following properties: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\"><code>Intl</code></a> page. </dd> <dt id=\"numberingsystem\"><code>numberingSystem</code></dt> <dd> <p>A string containing the name of the numbering system to be used for number formatting, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem#description\"><code>Intl.Locale.prototype.numberingSystem</code></a>. </dd> <dt id=\"style\"><code>style</code></dt> <dd> <p>The length of the formatted message, the default is <code>\"short\"</code>. <ul> <li><code>\"long\"</code> (E.g., 1 hour and 50 minutes)</li> <li><code>\"short\"</code> (E.g., 1 hr, 50 min)</li> <li><code>\"narrow\"</code> (E.g., 1h 50m)</li> <li><code>\"digital\"</code> (E.g., 1:50:00)</li> </ul> </dd> <dt id=\"years\"><code>years</code></dt> <dd> <p>The style to be used for formatting years. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> </ul> </dd> <dt id=\"yearsdisplay\"><code>yearsDisplay</code></dt> <dd> <p>Whether to always display years, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"months\"><code>months</code></dt> <dd> <p>The style to be used for formatting months. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> </ul> </dd> <dt id=\"monthsdisplay\"><code>monthsDisplay</code></dt> <dd> <p>Whether to always display months, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"weeks\"><code>weeks</code></dt> <dd> <p>The style to be used for formatting weeks. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> </ul> </dd> <dt id=\"weeksdisplay\"><code>weeksDisplay</code></dt> <dd> <p>Whether to always display weeks, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"days\"><code>days</code></dt> <dd> <p>The style to be used for formatting days. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> </ul> </dd> <dt id=\"daysdisplay\"><code>daysDisplay</code></dt> <dd> <p>Whether to always display days, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"hours\"><code>hours</code></dt> <dd> <p>The style to be used for formatting hours. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> <li><code>\"numeric\"</code></li> <li><code>\"2-digit\"</code></li> </ul> </dd> <dt id=\"hoursdisplay\"><code>hoursDisplay</code></dt> <dd> <p>Whether to always display hours, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"minutes\"><code>minutes</code></dt> <dd> <p>The style to be used for formatting minutes. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> <li><code>\"numeric\"</code></li> <li><code>\"2-digit\"</code></li> </ul> </dd> <dt id=\"minutesdisplay\"><code>minutesDisplay</code></dt> <dd> <p>Whether to always display minutes, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"seconds\"><code>seconds</code></dt> <dd> <p>The style to be used for formatting seconds. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> <li><code>\"numeric\"</code></li> <li><code>\"2-digit\"</code></li> </ul> </dd> <dt id=\"secondsdisplay\"><code>secondsDisplay</code></dt> <dd> <p>Whether to always display seconds, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"milliseconds\"><code>milliseconds</code></dt> <dd> <p>The style to be used for formatting milliseconds. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> <li><code>\"numeric\"</code></li> </ul> </dd> <dt id=\"millisecondsdisplay\"><code>millisecondsDisplay</code></dt> <dd> <p>Whether to always display milliseconds, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"microseconds\"><code>microseconds</code></dt> <dd> <p>The style to be used for formatting microseconds. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> <li><code>\"numeric\"</code></li> </ul> </dd> <dt id=\"microsecondsdisplay\"><code>microsecondsDisplay</code></dt> <dd> <p>Whether to always display microseconds, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"nanoseconds\"><code>nanoseconds</code></dt> <dd> <p>The style to be used for formatting nanoseconds. <ul> <li><code>\"long\"</code></li> <li><code>\"short\"</code></li> <li><code>\"narrow\"</code></li> <li><code>\"numeric\"</code></li> </ul> </dd> <dt id=\"nanosecondsdisplay\"><code>nanosecondsDisplay</code></dt> <dd> <p>Whether to always display nanoseconds, or only if nonzero. <ul> <li><code>\"always\"</code></li> <li><code>\"auto\"</code></li> </ul> </dd> <dt id=\"fractionaldigits\"><code>fractionalDigits</code></dt> <dd> <p>Number of how many fractional digits to display in the output. </dd> </dl>"
      }
    },
    "intl.durationformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/format",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>format()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> instances formats a duration according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> object.",
      "parameters": {
        "duration": "The duration object to be formatted. It should include some or all of the following properties: <code>\"months\"</code>, <code>\"weeks\"</code>, <code>\"days\"</code>, <code>\"hours\"</code>, <code>\"minutes\"</code>, <code>\"seconds\"</code>, <code>\"milliseconds\"</code>, <code>\"microseconds\"</code>, <code>\"nanoseconds\"</code>."
      }
    },
    "intl.durationformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/formattoparts",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> instances allows locale-aware formatting of strings produced by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> formatters.",
      "parameters": {
        "duration": "The duration object to be formatted. It should include some or all of the following properties: <code>\"months\"</code>, <code>\"weeks\"</code>, <code>\"days\"</code>, <code>\"hours\"</code>, <code>\"minutes\"</code>, <code>\"seconds\"</code>, <code>\"milliseconds\"</code>, <code>\"microseconds\"</code>, <code>\"nanoseconds\"</code>."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted duration in parts."
    },
    "intl.durationformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/resolvedoptions",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\"><code>Intl.DurationFormat</code></a> object.",
      "returns": "A new object with properties reflecting the locale and date and time formatting options computed during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> object."
    },
    "intl.durationformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/durationformat/supportedlocalesof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"$MDN_URL$/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</div>\n<p>The <strong><code>Intl.DurationFormat.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in duration formatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> </dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in duration formatting without having to fall back to the runtime's default locale."
    },
    "intl.getcanonicallocales": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/getcanonicallocales",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "16",
        "Firefox": "48",
        "Opera": "41",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.getCanonicalLocales()</code></strong> static method returns an array\ncontaining the canonical locale names. Duplicates will be omitted and elements will be\nvalidated as structurally valid language tags.",
      "parameters": {
        "locales": "A list of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values for which to get the canonical locale names."
      },
      "returns": "An array containing the canonical locale names."
    },
    "intl.listformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.ListFormat</code></strong> object enables language-sensitive list formatting."
    },
    "intl.listformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/format",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>format()</code></strong> method returns a string with a\nlanguage-specific representation of the list.",
      "parameters": {
        "list": "An iterable object, such as an Array."
      },
      "returns": "A language-specific formatted string representing the elements of the list"
    },
    "intl.listformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\"><code>Intl.ListFormat</code></a> instances\nreturns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects representing the different components that\ncan be used to format a list of values in a locale-aware fashion.",
      "parameters": {
        "list": "An iterable object, such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>, to be formatted according to a locale."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of components which contains the formatted parts from the list."
    },
    "intl.listformat.listformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/listformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.ListFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\"><code>Intl.ListFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object with some or all of the following properties: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale-matching algorithm to use. Possible values: <ul> <li><code>\"best fit\"</code> (default)</li> <li><code>\"lookup\"</code></li> </ul> <p>For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> <dt id=\"type\"><code>type</code></dt> <dd> <p>Indicates the type of grouping. Possible values: <ul> <li><code>\"conjunction\"</code>, for \"and\"-based grouping of the list items: \"A, B, and C\" (default)</li> <li><code>\"disjunction\"</code>, for \"or\"-based grouping of the list items: \"A, B, or C\"</li> <li><code>\"unit\"</code>, for grouping the list items as a unit (neither \"and\"-based nor \"or\"-based): \"A, B, C\"</li> </ul> </dd> <dt id=\"style\"><code>style</code></dt> <dd> <p>Indicates the grouping style (for example, whether list separators and conjunctions are included). Possible values: <ul> <li><code>\"long\"</code>: \"A, B, and C\" (default)</li> <li><code>\"short\"</code>: \"A, B, C\"</li> <li><code>\"narrow\"</code>: \"A B C\"</li> </ul> </dd> </dl>"
      }
    },
    "intl.listformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\"><code>Intl.ListFormat</code></a> instances\nreturns a new object with properties reflecting the locale and style formatting\noptions computed during the construction of this <code>Intl.ListFormat</code> object.",
      "returns": "An object with properties reflecting the locale and formatting options computed during\n  the construction of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\"><code>Intl.ListFormat</code></a> object."
    },
    "intl.listformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "72",
        "ChromeAndroid": "72",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "60",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.ListFormat.supportedLocalesOf()</code></strong> static method returns\nan array containing those of the provided locales that are supported in list\nformatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> </dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported\n  in list formatting without having to fall back to the runtime's default locale."
    },
    "intl.locale": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.Locale</code></strong> object is a standard built-in property of the Intl object that represents a Unicode locale identifier."
    },
    "intl.locale.basename": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/basename",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>baseName</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a substring of this locale's string representation, containing core information about this locale."
    },
    "intl.locale.calendar": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/calendar",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>calendar</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the calendar type for this locale."
    },
    "intl.locale.casefirst": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/casefirst",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>caseFirst</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns whether case is taken into account for this locale's collation rules."
    },
    "intl.locale.collation": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/collation",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>collation</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the <a href=\"https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_Collation\" class=\"external\" target=\"_blank\">collation type</a> for this locale, which is used to order strings according to the locale's rules."
    },
    "intl.locale.getcalendars": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/getcalendars",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "preview",
        "Deno": "1.19"
      },
      "doc": "The <strong><code>getCalendars()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of one or more unique calendar identifiers for this locale.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> In some versions of some browsers, this method was implemented as an accessor property called <code>calendars</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.calendars === locale.calendars</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing all calendars commonly used for the <code>Locale</code>, sorted in descending preference. If the <code>Locale</code> already has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar\"><code>calendar</code></a>, then the returned array contains that single value.\n<p>Below is a list of the supported calendar era types."
    },
    "intl.locale.getcollations": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/getcollations",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "preview",
        "Deno": "1.19"
      },
      "doc": "The <strong><code>getCollations()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of one or more <a href=\"https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_collation\" class=\"external\" target=\"_blank\">collation types</a> for this locale.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> In some versions of some browsers, this method was implemented as an accessor property called <code>collations</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.collations === locale.collations</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing all collation types commonly used for the <code>Locale</code>, sorted in alphabetical order, with the <code>standard</code> and <code>search</code> values always excluded. If the <code>Locale</code> already has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation\"><code>collation</code></a>, then the returned array contains that single value.\n<p>Below is a list of the supported collation types, adapted from the <a href=\"https://github.com/unicode-org/cldr/blob/2dd06669d833823e26872f249aa304bc9d9d2a90/common/bcp47/collation.xml\" class=\"external\" target=\"_blank\">Unicode collation specification</a>."
    },
    "intl.locale.gethourcycles": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/gethourcycles",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "preview",
        "Deno": "1.19"
      },
      "doc": "The <strong><code>getHourCycles()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of one or more unique hour cycle identifiers for this locale.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> In some versions of some browsers, this method was implemented as an accessor property called <code>hourCycles</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.hourCycles === locale.hourCycles</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing all hour cycle types commonly used for the <code>Locale</code>, sorted in descending preference. If the <code>Locale</code> already has an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle\"><code>hourCycle</code></a>, then the returned array contains that single value.\n<p>Below is a list of supported hour cycle types."
    },
    "intl.locale.getnumberingsystems": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/getnumberingsystems",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "preview",
        "Deno": "1.19"
      },
      "doc": "The <strong><code>getNumberingSystems()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of one or more unique <a href=\"https://en.wikipedia.org/wiki/Numeral_system\" class=\"external\" target=\"_blank\">numbering system</a> identifiers for this locale.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> In some versions of some browsers, this method was implemented as an accessor property called <code>numberingSystems</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.numberingSystems === locale.numberingSystems</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing all numbering systems commonly used for the <code>Locale</code>, sorted in descending preference. If the <code>Locale</code> already has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem\"><code>numberingSystem</code></a>, then the returned array contains that single value.\n<p>A table of the standard Unicode numeral systems can be seen below."
    },
    "intl.locale.gettextinfo": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/gettextinfo",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "preview",
        "Deno": "1.19"
      },
      "doc": "The <strong><code>getTextInfo()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the ordering of characters indicated by either <code>ltr</code> (left-to-right) or by <code>rtl</code> (right-to-left) for this locale.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> In some versions of some browsers, this method was implemented as an accessor property called <code>textInfo</code>. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of <code>locale.textInfo === locale.textInfo</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An object representing text typesetting information associated with the Locale data specified in <a href=\"https://www.unicode.org/reports/tr35/tr35-general.html#Layout_Elements\" class=\"external\" target=\"_blank\">UTS 35's Layouts Elements</a>. It has the following properties:\n<dl>\n  <dt id=\"direction\"><code>direction</code></dt>\n  <dd>\n    <p>A string indicating the direction of text for the locale. Can be either <code>\"ltr\"</code> (left-to-right) or <code>\"rtl\"</code> (right-to-left).\n  </dd>\n</dl>"
    },
    "intl.locale.gettimezones": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/gettimezones",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "preview",
        "Deno": "1.19"
      },
      "doc": "The <strong><code>getTimeZones()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a list of supported time zones for this locale.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> In some versions of some browsers, this method was implemented as an accessor property called <code>timeZones</code>. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of <code>locale.timeZones === locale.timeZones</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An array of strings representing supported time zones for the associated <code>Locale</code>, where each value is an <a href=\"https://en.wikipedia.org/wiki/Daylight_saving_time#IANA_time_zone_database\" class=\"external\" target=\"_blank\">IANA time zone canonical name</a>, sorted in alphabetical order. If the locale identifier does not contain a region subtag, the returned value is <code>undefined</code>."
    },
    "intl.locale.getweekinfo": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/getweekinfo",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "preview",
        "Deno": "1.19"
      },
      "doc": "The <strong><code>getWeekInfo()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns a <code>weekInfo</code> object with the properties <code>firstDay</code>, <code>weekend</code> and <code>minimalDays</code> for this locale.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> In some versions of some browsers, this method was implemented as an accessor property called <code>weekInfo</code>. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of <code>locale.weekInfo === locale.weekInfo</code> returning <code>false</code>. Check the <a href=\"#browser_compatibility\">browser compatibility table</a> for details.\n</div>",
      "returns": "An object representing week information associated with the Locale data specified in <a href=\"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements\" class=\"external\" target=\"_blank\">UTS 35's Week Elements</a>. It has the following properties:\n<dl>\n  <dt id=\"firstday\"><code>firstDay</code></dt>\n  <dd>\n    <p>An integer indicating the first day of the week for the locale. Can be either <code>1</code> (Monday) or <code>7</code> (Sunday).\n  </dd>\n  <dt id=\"weekend\"><code>weekend</code></dt>\n  <dd>\n    <p>An array of integers indicating the weekend days for the locale, where <code>1</code> is Monday and <code>7</code> is Sunday.\n  </dd>\n  <dt id=\"minimaldays\"><code>minimalDays</code></dt>\n  <dd>\n    <p>An integer between 1 and 7 indicating the minimal days required in the first week of a month or year, for calendar purposes.\n  </dd>\n</dl>"
    },
    "intl.locale.hourcycle": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/hourcycle",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>hourCycle</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the hour cycle type for this locale."
    },
    "intl.locale.language": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/language",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>language</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the language associated with this locale."
    },
    "intl.locale.locale": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/locale",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.Locale()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> objects.",
      "parameters": {
        "tag": "The Unicode locale identifier string.",
        "options": "An object that contains configuration for the Locale. Keys are Unicode locale tags, values are valid Unicode tag values. Option values here take priority over extension keys in the locale identifier."
      }
    },
    "intl.locale.maximize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/maximize",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>maximize()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances gets the\nmost likely values for the language, script, and region of this locale based on\nexisting values.",
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Locale</code></a> instance whose <code>baseName</code> property returns\n  the result of the <a href=\"https://www.unicode.org/reports/tr35/#Likely_Subtags\" class=\"external\" target=\"_blank\">Add Likely Subtags</a> algorithm executed against <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName\"><code>locale.baseName</code></a></em>."
    },
    "intl.locale.minimize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/minimize",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>minimize()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances attempts to\nremove information about this locale that would be added by calling\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize\"><code>maximize()</code></a>.",
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Locale</code></a> instance whose <code>baseName</code> property returns\n  the result of the <a href=\"https://www.unicode.org/reports/tr35/#Likely_Subtags\" class=\"external\" target=\"_blank\">Remove Likely Subtags</a> algorithm\n  executed against <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName\"><code>locale.baseName</code></a></em>."
    },
    "intl.locale.numberingsystem": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/numberingsystem",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>numberingSystem</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the <a href=\"https://en.wikipedia.org/wiki/Numeral_system\" class=\"external\" target=\"_blank\">numeral system</a> for this locale."
    },
    "intl.locale.numeric": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/numeric",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>numeric</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns whether this locale has special collation handling for numeric characters."
    },
    "intl.locale.region": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/region",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>region</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the region of the world (usually a country) associated with this locale."
    },
    "intl.locale.script": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/script",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>script</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns the script used for writing the particular language used in this locale."
    },
    "intl.locale.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "75",
        "Opera": "62",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>toString()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\"><code>Intl.Locale</code></a> instances returns this Locale's full <a href=\"https://www.unicode.org/reports/tr35/#Unicode_locale_identifier\" class=\"external\" target=\"_blank\">locale identifier string</a>.",
      "returns": "The <em>locale</em>'s Unicode locale identifier string."
    },
    "intl.numberformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.NumberFormat</code></strong> object enables language-sensitive number formatting."
    },
    "intl.numberformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/format",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>format()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances formats a number according to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters\">locale and formatting options</a> of this <code>Intl.NumberFormat</code> object.",
      "parameters": {
        "number": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>, or string, to format. Strings are parsed in the same way as in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">number conversion</a>, except that <code>format()</code> will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number."
      }
    },
    "intl.numberformat.formatrange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/formatrange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "106",
        "ChromeAndroid": "106",
        "Edge": "106",
        "Opera": "92",
        "Safari": "15.4",
        "SafariIOS": "15.4"
      },
      "doc": "The <strong><code>formatRange()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances formats a range of numbers according to the locale and formatting options of this <code>Intl.NumberFormat</code> object.",
      "parameters": {
        "startRange": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>.",
        "endRange": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>."
      },
      "throws": {
        "RangeError": "Thrown if <code>startRange</code> is less than <code>endRange</code>, or either value is <code>NaN</code>.",
        "TypeError": "Thrown if either <code>startRange</code> or <code>endRange</code> is undefined."
      }
    },
    "intl.numberformat.formatrangetoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/formatrangetoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "106",
        "ChromeAndroid": "106",
        "Edge": "106",
        "Opera": "92",
        "Safari": "15.4",
        "SafariIOS": "15.4"
      },
      "doc": "The <strong><code>formatRangeToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the locale-specific tokens from which it is possible to build custom strings while preserving the locale-specific parts. This makes it possible to provide locale-aware custom formatting ranges of number strings.",
      "parameters": {
        "startRange": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>.",
        "endRange": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted range of numbers in parts.\n<p>The structure of the returned looks like this:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js<pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integer\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> <span class=\"token string\">\"startRange\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"literal\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shared\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integer\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> <span class=\"token string\">\"endRange\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"literal\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shared\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"currency\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"€\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shared\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></span></div>\n<p>Possible values for the <code>type</code> property include:\n<dl>\n  <dt id=\"currency\"><code>currency</code></dt>\n  <dd>\n    <p>The currency string, such as the symbols \"$\" and \"€\" or the name \"Dollar\", \"Euro\", depending on how <code>currencyDisplay</code> is specified.\n  </dd>\n  <dt id=\"decimal\"><code>decimal</code></dt>\n  <dd>\n    <p>The decimal separator string (\".\").\n  </dd>\n  <dt id=\"fraction\"><code>fraction</code></dt>\n  <dd>\n    <p>The fraction number.\n  </dd>\n  <dt id=\"group\"><code>group</code></dt>\n  <dd>\n    <p>The group separator string (\",\").\n  </dd>\n  <dt id=\"infinity\"><code>infinity</code></dt>\n  <dd>\n    <p>The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> string (\"∞\").\n  </dd>\n  <dt id=\"integer\"><code>integer</code></dt>\n  <dd>\n    <p>The integer number.\n  </dd>\n  <dt id=\"literal\"><code>literal</code></dt>\n  <dd>\n    <p>Any literal strings or whitespace in the formatted number.\n  </dd>\n  <dt id=\"minussign\"><code>minusSign</code></dt>\n  <dd>\n    <p>The minus sign string (\"-\").\n  </dd>\n  <dt id=\"nan\"><code>nan</code></dt>\n  <dd>\n    <p>The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> string (\"NaN\").\n  </dd>\n  <dt id=\"plussign\"><code>plusSign</code></dt>\n  <dd>\n    <p>The plus sign string (\"+\").\n  </dd>\n  <dt id=\"percentsign\"><code>percentSign</code></dt>\n  <dd>\n    <p>The percent sign string (\"%\").\n  </dd>\n  <dt id=\"unit\"><code>unit</code></dt>\n  <dd>\n    <p>The unit string, such as the \"l\" or \"litres\", depending on how <code>unitDisplay</code> is specified.\n  </dd>\n</dl>\n<p>Possible values for the <code>source</code> property include:\n<dl>\n  <dt id=\"startrange_2\"><code>startRange</code></dt>\n  <dd>\n    <p>The object is the start part of the range.\n  </dd>\n  <dt id=\"endrange_2\"><code>endRange</code></dt>\n  <dd>\n    <p>The object is the end part of the range.\n  </dd>\n  <dt id=\"shared\"><code>shared</code></dt>\n  <dd>\n    <p>The object is a \"shared\" part of the range, such as a separator or currency.\n  </dd>\n</dl>",
      "throws": {
        "RangeError": "Thrown if <code>startRange</code> is less than <code>endRange</code>, or either value is <code>NaN</code>.",
        "TypeError": "Thrown if either <code>startRange</code> or <code>endRange</code> is undefined."
      }
    },
    "intl.numberformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "64",
        "ChromeAndroid": "64",
        "Edge": "",
        "Firefox": "58",
        "Opera": "51",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances allows locale-aware formatting of strings produced by this <code>Intl.NumberFormat</code> object.",
      "parameters": {
        "number": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> to format."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted number in parts."
    },
    "intl.numberformat.numberformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/numberformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.NumberFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>. The following Unicode extension key is allowed: <dl> <dt id=\"nu\"><code>nu</code></dt> <dd> <p>The numbering system to be used. Possible values include: <code>\"adlm\"</code>, <code>\"ahom\"</code>, <code>\"arab\"</code>, <code>\"arabext\"</code>, <code>\"bali\"</code>, <code>\"beng\"</code>, <code>\"bhks\"</code>, <code>\"brah\"</code>, <code>\"cakm\"</code>, <code>\"cham\"</code>, <code>\"deva\"</code>, <code>\"diak\"</code>, <code>\"fullwide\"</code>, <code>\"gong\"</code>, <code>\"gonm\"</code>, <code>\"gujr\"</code>, <code>\"guru\"</code>, <code>\"hanidec\"</code>, <code>\"hmng\"</code>, <code>\"hmnp\"</code>, <code>\"java\"</code>, <code>\"kali\"</code>, <code>\"khmr\"</code>, <code>\"knda\"</code>, <code>\"lana\"</code>, <code>\"lanatham\"</code>, <code>\"laoo\"</code>, <code>\"latn\"</code>, <code>\"lepc\"</code>, <code>\"limb\"</code>, <code>\"mathbold\"</code>, <code>\"mathdbl\"</code>, <code>\"mathmono\"</code>, <code>\"mathsanb\"</code>, <code>\"mathsans\"</code>, <code>\"mlym\"</code>, <code>\"modi\"</code>, <code>\"mong\"</code>, <code>\"mroo\"</code>, <code>\"mtei\"</code>, <code>\"mymr\"</code>, <code>\"mymrshan\"</code>, <code>\"mymrtlng\"</code>, <code>\"newa\"</code>, <code>\"nkoo\"</code>, <code>\"olck\"</code>, <code>\"orya\"</code>, <code>\"osma\"</code>, <code>\"rohg\"</code>, <code>\"saur\"</code>, <code>\"segment\"</code>, <code>\"shrd\"</code>, <code>\"sind\"</code>, <code>\"sinh\"</code>, <code>\"sora\"</code>, <code>\"sund\"</code>, <code>\"takr\"</code>, <code>\"talu\"</code>, <code>\"tamldec\"</code>, <code>\"telu\"</code>, <code>\"thai\"</code>, <code>\"tibt\"</code>, <code>\"tirh\"</code>, <code>\"vaii\"</code>, <code>\"wara\"</code>, <code>\"wcho\"</code> — see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem\">standard Unicode numeral systems list</a>. </dd> </dl>",
        "options": "An object with some or all of the following properties: <dl> <dt id=\"compactdisplay\"><code>compactDisplay</code></dt> <dd> <p>Only used when <code>notation</code> is <code>\"compact\"</code>. Takes either <code>\"short\"</code> (default) or <code>\"long\"</code>. </dd> <dt id=\"currency\"><code>currency</code></dt> <dd> <p>The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as <code>\"USD\"</code> for the US dollar, <code>\"EUR\"</code> for the euro, or <code>\"CNY\"</code> for the Chinese RMB — see the <a href=\"https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=currency-codes\" class=\"external\" target=\"_blank\">Current currency &amp; funds code list</a>. There is no default value; if the <code>style</code> is <code>\"currency\"</code>, the <code>currency</code> property must be provided. </dd> <dt id=\"currencydisplay\"><code>currencyDisplay</code></dt> <dd> <p>How to display the currency in currency formatting. The default is <code>\"symbol\"</code>. <ul> <li><code>\"symbol\"</code>: use a localized currency symbol such as €.</li> <li><code>\"narrowSymbol\"</code>: use a narrow format symbol (\"$100\" rather than \"US$100\").</li> <li><code>\"code\"</code>: use the ISO currency code.</li> <li><code>\"name\"</code>: use a localized currency name such as <code>\"dollar\"</code>.</li> </ul> </dd> <dt id=\"currencysign\"><code>currencySign</code></dt> <dd> <p>In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. You can enable this formatting by setting the <code>currencySign</code> option to <code>\"accounting\"</code>. The default value is <code>\"standard\"</code>. </dd> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> <dt id=\"notation\"><code>notation</code></dt> <dd> <p>The formatting that should be displayed for the number. The default is <code>\"standard\"</code>. <ul> <li><code>\"standard\"</code>: plain number formatting.</li> <li><code>\"scientific\"</code>: return the order-of-magnitude for formatted number.</li> <li><code>\"engineering\"</code>: return the exponent of ten when divisible by three.</li> <li><code>\"compact\"</code>: string representing exponent; defaults to using the \"short\" form.</li> </ul> </dd> <dt id=\"numberingsystem\"><code>numberingSystem</code></dt> <dd> <p>Numbering System. Possible values include: <code>\"arab\"</code>, <code>\"arabext\"</code>, <code>\"bali\"</code>, <code>\"beng\"</code>, <code>\"deva\"</code>, <code>\"fullwide\"</code>, <code>\"gujr\"</code>, <code>\"guru\"</code>, <code>\"hanidec\"</code>, <code>\"khmr\"</code>, <code>\"knda\"</code>, <code>\"laoo\"</code>, <code>\"latn\"</code>, <code>\"limb\"</code>, <code>\"mlym\"</code>, <code>\"mong\"</code>, <code>\"mymr\"</code>, <code>\"orya\"</code>, <code>\"tamldec\"</code>, <code>\"telu\"</code>, <code>\"thai\"</code>, <code>\"tibt\"</code>. </dd> <dt id=\"signdisplay\"><code>signDisplay</code></dt> <dd> <p>When to display the sign for the number. The default is <code>\"auto\"</code>. <ul> <li><code>\"auto\"</code>: sign display for negative numbers only, including negative zero.</li> <li><code>\"always\"</code>: always display sign.</li> <li><code>\"exceptZero\"</code>: sign display for positive and negative numbers, but not zero.</li> <li><code>\"negative\"</code>: sign display for negative numbers only, excluding negative zero. </li> <li><code>\"never\"</code>: never display sign.</li> </ul> </dd> <dt id=\"style\"><code>style</code></dt> <dd> <p>The formatting style to use. The default is <code>\"decimal\"</code>. <ul> <li><code>\"decimal\"</code> for plain number formatting.</li> <li><code>\"currency\"</code> for currency formatting.</li> <li><code>\"percent\"</code> for percent formatting.</li> <li><code>\"unit\"</code> for unit formatting.</li> </ul> </dd> <dt id=\"unit\"><code>unit</code></dt> <dd> <p>The unit to use in <code>unit</code> formatting, Possible values are core unit identifiers, defined in <a href=\"https://unicode.org/reports/tr35/tr35-general.html#Unit_Elements\" class=\"external\" target=\"_blank\">UTS #35, Part 2, Section 6</a>. A <a href=\"https://tc39.es/ecma402/#table-sanctioned-single-unit-identifiers\" class=\"external\" target=\"_blank\">subset</a> of units from the <a href=\"https://github.com/unicode-org/cldr/blob/main/common/validity/unit.xml\" class=\"external\" target=\"_blank\">full list</a> was selected for use in ECMAScript. Pairs of simple units can be concatenated with \"-per-\" to make a compound unit. There is no default value; if the <code>style</code> is <code>\"unit\"</code>, the <code>unit</code> property must be provided. </dd> <dt id=\"unitdisplay\"><code>unitDisplay</code></dt> <dd> <p>The unit formatting style to use in <code>unit</code> formatting. The default is <code>\"short\"</code>. <ul> <li><code>\"long\"</code> (e.g., <code>16 litres</code>).</li> <li><code>\"short\"</code> (e.g., <code>16 l</code>).</li> <li><code>\"narrow\"</code> (e.g., <code>16l</code>).</li> </ul> </dd> <dt id=\"usegrouping\"><code>useGrouping</code> </dt> <dd> <p>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. The default is <code>auto</code>. <ul> <li><code>\"always\"</code>: display grouping separators even if the locale prefers otherwise.</li> <li><code>\"auto\"</code>: display grouping separators based on the locale preference, which may also be dependent on the currency.</li> <li><code>false</code>: do not display grouping separators.</li> <li><code>\"min2\"</code>: display grouping separators when there are at least 2 digits in a group.</li> <li><code>true</code>: alias for <code>always</code>.</li> </ul> </dd> <dt id=\"roundingmode\"><code>roundingMode</code> </dt> <dd> <p>Options for rounding modes. The default is <code>halfExpand</code>. <ul> <li> <code>\"ceil\"</code>: round toward +∞. Positive values round up. Negative values round \"more positive\". </li> <li> <code>\"floor\"</code> round toward -∞. Positive values round down. Negative values round \"more negative\". </li> <li> <code>\"expand\"</code>: round away from 0. The <em>magnitude</em> of the value is always increased by rounding. Positive values round up. Negative values round \"more negative\". </li> <li> <code>\"trunc\"</code>: round toward 0. This <em>magnitude</em> of the value is always reduced by rounding. Positive values round down. Negative values round \"less negative\". </li> <li> <code>\"halfCeil\"</code>: ties toward +∞. Values above the half-increment round like <code>ceil</code> (towards +∞), and below like <code>floor</code> (towards -∞). On the half-increment, values round like <code>ceil</code>. </li> <li> <code>\"halfFloor\"</code>: ties toward -∞. Values above the half-increment round like <code>ceil</code> (towards +∞), and below like <code>floor</code> (towards -∞). On the half-increment, values round like <code>floor</code>. </li> <li> <code>\"halfExpand\"</code>: ties away from 0. Values above the half-increment round like <code>expand</code> (away from zero), and below like <code>trunc</code> (towards 0). On the half-increment, values round like <code>expand</code>. </li> <li> <code>\"halfTrunc\"</code>: ties toward 0. Values above the half-increment round like <code>expand</code> (away from zero), and below like <code>trunc</code> (towards 0). On the half-increment, values round like <code>trunc</code>. </li> <li> <code>\"halfEven\"</code>: ties towards the nearest even integer. Values above the half-increment round like <code>expand</code> (away from zero), and below like <code>trunc</code> (towards 0). On the half-increment values round towards the nearest even digit. </li> </ul> <p>These options reflect the <a href=\"https://unicode-org.github.io/icu/userguide/format_parse/numbers/rounding-modes.html\" class=\"external\" target=\"_blank\">ICU user guide</a>, where \"expand\" and \"trunc\" map to ICU \"UP\" and \"DOWN\", respectively. The <a href=\"#rounding_modes\">rounding modes</a> example below demonstrates how each mode works. </dd> <dt id=\"roundingpriority\"><code>roundingPriority</code> </dt> <dd> <p>Specify how rounding conflicts will be resolved if both \"FractionDigits\" (<a href=\"#minimumfractiondigits\"><code>minimumFractionDigits</code></a>/<a href=\"#maximumfractiondigits\"><code>maximumFractionDigits</code></a>) and \"SignificantDigits\" (<a href=\"#minimumsignificantdigits\"><code>minimumSignificantDigits</code></a>/<a href=\"#maximumsignificantdigits\"><code>maximumSignificantDigits</code></a>) are specified: <ul> <li><code>\"auto\"</code>: the result from the significant digits property is used (default).</li> <li><code>\"morePrecision\"</code>: the result from the property that results in more precision is used.</li> <li><code>\"lessPrecision\"</code>: the result from the property that results in less precision is used.</li> </ul> <p>Note that for values other than <code>auto</code> the result with more precision is calculated from the <a href=\"#minimumsignificantdigits\"><code>maximumSignificantDigits</code></a> and <a href=\"#maximumfractiondigits\"><code>maximumFractionDigits</code></a> (minimum fractional and significant digit settings are ignored). </dd> <dt id=\"roundingincrement\"><code>roundingIncrement</code> </dt> <dd> <p>Specifies the rounding-increment precision. Must be one of the following integers: <code>1</code>, <code>2</code>, <code>5</code>, <code>10</code>, <code>20</code>, <code>25</code>, <code>50</code>, <code>100</code>, <code>200</code>, <code>250</code>, <code>500</code>, <code>1000</code>, <code>2000</code>, <code>2500</code>, <code>5000</code>. <div class=\"notecard note\" id=\"sect2\"> <p><strong>Note:</strong> The <code>roundingIncrement</code> option controls the rounding increment to be used when formatting numbers: <ul> <li>It indicates the increment at which rounding should take place relative to the calculated rounding magnitude.</li> <li>It cannot be mixed with significant-digits rounding or any setting of <code>roundingPriority</code> other than <code>auto</code>.</li> </ul> <p>For example, if <code>maximumFractionDigits</code> is 2 and <code>roundingIncrement</code> is 5, then the number is rounded to the nearest 0.05 (\"nickel rounding\"). <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\"><pre class=\"brush: js notranslate\"><code>const nf = new Intl.NumberFormat(\"en-US\", {   style: \"currency\",   currency: \"USD\",   maximumFractionDigits: 2,   roundingIncrement: 5, }); console.log(nf.format(11.29)); // \"$11.30\" console.log(nf.format(11.25)); // \"$11.25\" console.log(nf.format(11.22)); // \"$11.20\" </code></pre></span></div> <p>If you set <code>minimumFractionDigits</code> and <code>maximumFractionDigits</code>, they must set them to the same value; otherwise a <code>RangeError</code> is thrown. </div> </dd> <dt id=\"trailingzerodisplay\"><code>trailingZeroDisplay</code> </dt> <dd> <p>A string expressing the strategy for displaying trailing zeros on whole numbers. The default is <code>\"auto\"</code>. <ul> <li><code>\"auto\"</code>: keep trailing zeros according to <code>minimumFractionDigits</code> and <code>minimumSignificantDigits</code>.</li> <li> <code>\"stripIfInteger\"</code>: remove the fraction digits <em>if</em> they are all zero. This is the same as <code>auto</code> if any of the fraction digits is non-zero. </li> </ul> </dd> </dl> <p>The following properties fall into two groups: <code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>, and <code>maximumFractionDigits</code> in one group, <code>minimumSignificantDigits</code> and <code>maximumSignificantDigits</code> in the other. If properties from both groups are specified, conflicts in the resulting display format are resolved based on the value of the <a href=\"#roundingpriority\"><code>roundingPriority</code></a> property. <dl> <dt id=\"minimumintegerdigits\"><code>minimumIntegerDigits</code></dt> <dd> <p>The minimum number of integer digits to use. A value with a smaller number of integer digits than this number will be left-padded with zeros (to the specified length) when formatted. Possible values are from 1 to 21; the default is 1. </dd> <dt id=\"minimumfractiondigits\"><code>minimumFractionDigits</code></dt> <dd> <p>The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the <a href=\"https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml\" class=\"external\" target=\"_blank\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information). </dd> <dt id=\"maximumfractiondigits\"><code>maximumFractionDigits</code></dt> <dd> <p>The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of <code>minimumFractionDigits</code> and 3; the default for currency formatting is the larger of <code>minimumFractionDigits</code> and the number of minor unit digits provided by the <a href=\"https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml\" class=\"external\" target=\"_blank\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information); the default for percent formatting is the larger of <code>minimumFractionDigits</code> and 0. </dd> <dt id=\"minimumsignificantdigits\"><code>minimumSignificantDigits</code></dt> <dd> <p>The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1. </dd> <dt id=\"maximumsignificantdigits\"><code>maximumSignificantDigits</code></dt> <dd> <p>The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21. </dd> </dl>"
      },
      "returns": "A new <code>Intl.NumberFormat</code> object.\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> The text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the <a href=\"#browser_compatibility\">browser compatibility table</a>.\n</div>\n<p>Normally, <code>Intl.NumberFormat()</code> can be called with or without <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>, and a new <code>Intl.NumberFormat</code> instance is returned in both cases. However, if the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> value is an object that is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> <code>Intl.NumberFormat</code> (doesn't necessarily mean it's created via <code>new Intl.NumberFormat</code>; just that it has <code>Intl.NumberFormat.prototype</code> in its prototype chain), then the value of <code>this</code> is returned instead, with the newly created <code>Intl.NumberFormat</code> object hidden in a <code>[Symbol(IntlLegacyConstructedSymbol)]</code> property (a unique symbol that's reused between instances).\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js<pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> formatter <span class=\"token operator\">=</span> Intl<span class=\"token punctuation\">.</span><span class=\"token function\">NumberFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> Intl<span class=\"token punctuation\">.</span><span class=\"token class-name\">NumberFormat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"en-US\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">notation</span><span class=\"token operator\">:</span> <span class=\"token string\">\"scientific\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   [Symbol(IntlLegacyConstructedSymbol)]: {</span>\n<span class=\"token comment\">//     value: NumberFormat [Intl.NumberFormat] {},</span>\n<span class=\"token comment\">//     writable: false,</span>\n<span class=\"token comment\">//     enumerable: false,</span>\n<span class=\"token comment\">//     configurable: false</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span>\n</code></pre></span></div>\n<p>Note that there's only one actual <code>Intl.NumberFormat</code> instance here: the one hidden in <code>[Symbol(IntlLegacyConstructedSymbol)]</code>. Calling the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\"><code>format()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions\"><code>resolvedOptions()</code></a> methods on <code>formatter</code> would correctly use the options stored in that instance, but calling all other methods (e.g. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange\"><code>formatRange()</code></a>) would fail with \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n<p>This behavior, called <code>ChainNumberFormat</code>, does not happen when <code>Intl.NumberFormat()</code> is called without <code>new</code> but with <code>this</code> set to anything else that's not an <code>instanceof Intl.NumberFormat</code>. If you call it directly as <code>Intl.NumberFormat()</code>, the <code>this</code> value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a>, and a new <code>Intl.NumberFormat</code> instance is created normally."
    },
    "intl.numberformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> instances returns a new object with properties reflecting the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters\">locale and number formatting options</a> computed during initialization of this <code>Intl.NumberFormat</code> object.",
      "returns": "A new object with properties reflecting the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters\">locale and number formatting options</a> computed during the construction of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> object.\n<p>The resulting object has the following properties:\n<dl>\n  <dt id=\"locale\"><code>locale</code></dt>\n  <dd>\n    <p>The BCP 47 language tag for the locale actually used.\n      If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in <code>locale</code>.\n  </dd>\n  <dt id=\"numberingsystem\"><code>numberingSystem</code></dt>\n  <dd>\n    <p>The value provided for this properties in the <code>options</code> argument, if present, or the value requested using the Unicode extension key <code>\"nu\"</code> or filled in as a default.\n  </dd>\n  <dt id=\"notation\"><code>notation</code></dt>\n  <dd>\n    <p>The value provided for this property in the <code>options</code> argument, if present, or <code>\"standard\"</code> filled in as a default.\n  </dd>\n  <dt id=\"compactdisplay\"><code>compactDisplay</code></dt>\n  <dd>\n    <p>The value provided for this property in the <code>options</code> argument, or <code>\"short\"</code> filled in as a default.\n      This property is only present if the <code>notation</code> is set to \"compact\".\n  </dd>\n  <dt id=\"signdisplay\"><code>signDisplay</code></dt>\n  <dd>\n    <p>The value provided for this property in the <code>options</code> argument, or <code>\"auto\"</code> filled in as a default.\n  </dd>\n  <dt id=\"usegrouping\"><code>useGrouping</code></dt>\n  <dd>\n    <p>The value provided for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#usegrouping\">useGrouping</a> property in the constructor <code>options</code> argument or the default value (<code>\"auto\"</code>).\n  </dd>\n  <dt id=\"currency\"><code>currency</code>, <code>currencyDisplay</code></dt>\n  <dd>\n    <p>The values provided for these properties in the <code>options</code> argument or filled in as defaults.\n      These properties are only present if <code>style</code> is <code>\"currency\"</code>.\n  </dd>\n</dl>\n<p>Only one of the following two groups of properties is included:\n<dl>\n  <dt id=\"minimumintegerdigits\"><code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>, <code>maximumFractionDigits</code></dt>\n  <dd>\n    <p>The values provided for these properties in the <code>options</code> argument or filled in as defaults.\n      These properties are present only if neither <code>minimumSignificantDigits</code> nor <code>maximumSignificantDigits</code> was provided in the <code>options</code> argument.\n  </dd>\n  <dt id=\"minimumsignificantdigits\"><code>minimumSignificantDigits</code>, <code>maximumSignificantDigits</code></dt>\n  <dd>\n    <p>The values provided for these properties in the <code>options</code> argument or filled in as defaults.\n      These properties are present only if at least one of them was provided in the <code>options</code> argument.\n  </dd>\n</dl>"
    },
    "intl.numberformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "29",
        "Opera": "15",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.NumberFormat.supportedLocalesOf()</code></strong> static method returns\nan array containing those of the provided locales that are supported in number\nformatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> </dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported\n  in number formatting without having to fall back to the runtime's default locale."
    },
    "intl.pluralrules": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.PluralRules</code></strong> object enables plural-sensitive formatting and plural-related language rules."
    },
    "intl.pluralrules.pluralrules": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/pluralrules",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.PluralRules()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\"><code>Intl.PluralRules</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object with some or all of the following properties: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> <dt id=\"type\"><code>type</code></dt> <dd> <p>The type to use. Possible values are: <ul> <li> <code>\"cardinal\"</code> for cardinal numbers (referring to the quantity of things). This is the default value. </li> <li> <code>\"ordinal\"</code> for ordinal number (referring to the ordering or ranking of things, e.g. \"1st\", \"2nd\", \"3rd\" in English). </li> </ul> </dd> </dl> <p>The following properties fall into two groups: <code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>, and <code>maximumFractionDigits</code> in one group, <code>minimumSignificantDigits</code> and <code>maximumSignificantDigits</code> in the other. If at least one property from the second group is defined, then the first group is ignored. <dl> <dt id=\"minimumintegerdigits\"><code>minimumIntegerDigits</code></dt> <dd> <p>The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1. </dd> <dt id=\"minimumfractiondigits\"><code>minimumFractionDigits</code></dt> <dd> <p>The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the <a href=\"https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml\" class=\"external\" target=\"_blank\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information). </dd> <dt id=\"maximumfractiondigits\"><code>maximumFractionDigits</code></dt> <dd> <p>The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of <code>minimumFractionDigits</code> and 3; the default for currency formatting is the larger of <code>minimumFractionDigits</code> and the number of minor unit digits provided by the <a href=\"https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml\" class=\"external\" target=\"_blank\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information); the default for percent formatting is the larger of <code>minimumFractionDigits</code> and 0. </dd> <dt id=\"minimumsignificantdigits\"><code>minimumSignificantDigits</code></dt> <dd> <p>The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1. </dd> <dt id=\"maximumsignificantdigits\"><code>maximumSignificantDigits</code></dt> <dd> <p>The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21. </dd> </dl>"
      }
    },
    "intl.pluralrules.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\"><code>Intl.PluralRules</code></a> instances returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this <code>Intl.PluralRules</code> object.",
      "returns": "A new object with properties reflecting the locale and plural formatting options\n  computed during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\"><code>Intl.PluralRules</code></a> object."
    },
    "intl.pluralrules.select": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/select",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>select()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\"><code>Intl.PluralRules</code></a> instances returns a string indicating which plural rule to use for locale-aware formatting.",
      "parameters": {
        "number": "The number to get a plural rule for."
      },
      "returns": "A string representing the pluralization category of the <code>number</code>, can be one\n  of <code>zero</code>, <code>one</code>, <code>two</code>, <code>few</code>,\n  <code>many</code> or <code>other</code>."
    },
    "intl.pluralrules.selectrange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/selectrange",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "106",
        "ChromeAndroid": "106",
        "Edge": "106",
        "Opera": "92",
        "Safari": "15.4",
        "SafariIOS": "15.4"
      },
      "doc": "The <strong><code>selectRange()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\"><code>Intl.PluralRules</code></a> instances receives two values and returns a string indicating which plural rule to use for locale-aware formatting.",
      "returns": "A string representing the pluralization category of the <code>number</code>.\n  This can be one of <code>zero</code>, <code>one</code>, <code>two</code>, <code>few</code>, <code>many</code> or <code>other</code>, that are relevant for the locale whose localization is specified in <a href=\"https://unicode-org.github.io/cldr-staging/charts/37/supplemental/language_plural_rules.html#rules\" class=\"external\" target=\"_blank\">LDML Language Plural Rules</a>."
    },
    "intl.pluralrules.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "10.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.PluralRules.supportedLocalesOf()</code></strong> static method returns\nan array containing those of the provided locales that are supported in plural\nformatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> </dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported\n  in plural formatting without having to fall back to the runtime's default locale."
    },
    "intl.relativetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.RelativeTimeFormat</code></strong> object enables language-sensitive relative time formatting."
    },
    "intl.relativetimeformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/format",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>format()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> instances formats a <code>value</code> and <code>unit</code> according to the locale and formatting options of this <code>Intl.RelativeTimeFormat</code> object.",
      "parameters": {
        "value": "Numeric value to use in the internationalized relative time message.",
        "unit": "Unit to use in the relative time internationalized message. Possible values are: <code>\"year\"</code>, <code>\"quarter\"</code>, <code>\"month\"</code>, <code>\"week\"</code>, <code>\"day\"</code>, <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>. Plural forms are also permitted."
      }
    },
    "intl.relativetimeformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "70",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>formatToParts()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> instances returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects representing the relative time format in parts that can be used for custom locale-aware formatting.",
      "parameters": {
        "value": "Numeric value to use in the internationalized relative time message.",
        "unit": "Unit to use in the relative time internationalized message. Possible values are: <code>\"year\"</code>, <code>\"quarter\"</code>, <code>\"month\"</code>, <code>\"week\"</code>, <code>\"day\"</code>, <code>\"hour\"</code>, <code>\"minute\"</code>, <code>\"second\"</code>. Plural forms are also permitted."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted relative time in parts."
    },
    "intl.relativetimeformat.relativetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/relativetimeformat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.RelativeTimeFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object with some or all of the following properties: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> <dt id=\"numeric\"><code>numeric</code></dt> <dd> <p>The format of output message. Possible values are: <ul> <li><code>\"always\"</code> (default, e.g., <code>1 day ago</code>),</li> <li>or <code>\"auto\"</code> (e.g., <code>yesterday</code>). The <code>\"auto\"</code> value allows to not always have to use numeric values in the output.</li> </ul> </dd> <dt id=\"style\"><code>style</code></dt> <dd> <p>The length of the internationalized message. Possible values are: <ul> <li><code>\"long\"</code> (default, e.g., <code>in 1 month</code>)</li> <li><code>\"short\"</code> (e.g., <code>in 1 mo.</code>),</li> <li>or <code>\"narrow\"</code> (e.g., <code>in 1 mo.</code>). The narrow style could be similar to the short style for some locales.</li> </ul> </dd> </dl>"
      }
    },
    "intl.relativetimeformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "12.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> instances returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this <code>Intl.RelativeTimeFormat</code> object.",
      "returns": "A new object with properties reflecting the locale and number formatting options computed during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> object."
    },
    "intl.relativetimeformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "65",
        "Opera": "58",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "13.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.RelativeTimeFormat.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\">Intl</a> page. </dd> </dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale."
    },
    "intl.segmenter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.Segmenter</code></strong> object enables locale-sensitive text segmentation, enabling you to get meaningful items (graphemes, words or sentences) from a string."
    },
    "intl.segmenter.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>resolvedOptions()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> instances returns a new object with properties reflecting the locale and granularity options computed during the initialization of this <code>Intl.Segmenter</code> object.",
      "returns": "A new object with properties reflecting the locale and collation options computed\n  during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> object."
    },
    "intl.segmenter.segment": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>segment()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> instances segments a string according to the locale and granularity of this <code>Intl.Segmenter</code> object.",
      "parameters": {
        "input": "The text to be segmented as a string."
      },
      "returns": "A new iterable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments\"><code>Segments</code></a> object containing the segments of the input string, using the segmenter's locale and granularity."
    },
    "intl.segmenter.segment.segments": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment/segments",
      "doc": "A <strong><code>Segments</code></strong> object is an iterable collection of the segments of a text string. It is returned by a call to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment\"><code>segment()</code></a> method of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> object."
    },
    "intl.segmenter.segment.segments.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment/segments/@@iterator",
      "doc": "The <strong><code>[@@iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments\"><code>Segments</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows <code>Segments</code> objects to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">segments iterator object</a> that yields data about each segment.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields data about each segment. Each yielded object has the same properties as the object returned by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing\"><code>containing()</code></a> method."
    },
    "intl.segmenter.segment.segments.containing": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment/segments/containing",
      "doc": "The <strong><code>containing()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments\"><code>Segments</code></a> instances returns an object describing the segment in the string that includes the code unit at the specified index.",
      "parameters": {
        "codeUnitIndex": "A number specifying the index of the code unit in the original input string. If the value is omitted, it defaults to <code>0</code>."
      },
      "returns": "An object describing the segment of the original string with the following properties, or <code>undefined</code> if the supplied index value is out of bounds.\n<dl>\n  <dt id=\"segment\"><code>segment</code></dt>\n  <dd>\n    <p>A string containing the segment extracted from the original input string.\n  </dd>\n  <dt id=\"index\"><code>index</code></dt>\n  <dd>\n    <p>The code unit index in the original input string at which the segment begins.\n  </dd>\n  <dt id=\"input\"><code>input</code></dt>\n  <dd>\n    <p>The complete input string that was segmented.\n  </dd>\n  <dt id=\"iswordlike\"><code>isWordLike</code></dt>\n  <dd>\n    <p>A boolean value only if <code>granularity</code> is <code>\"word\"</code>; otherwise, <code>undefined</code>. If <code>granularity</code> is <code>\"word\"</code>, then <code>isWordLike</code> is <code>true</code> when the segment is word-like (i.e., consists of letters/numbers/ideographs/etc.); otherwise, <code>false</code>.\n  </dd>\n</dl>"
    },
    "intl.segmenter.segmenter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segmenter",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.Segmenter()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> objects.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object with some or all of the following properties: <dl> <dt id=\"granularity\"><code>granularity</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A string. Possible values are: <dl> <dt id=\"grapheme\"><code>\"grapheme\"</code> (default)</dt> <dd> <p>Split the input into segments at grapheme cluster (user-perceived character) boundaries, as determined by the locale. </dd> <dt id=\"word\"><code>\"word\"</code></dt> <dd> <p>Split the input into segments at word boundaries, as determined by the locale. </dd> <dt id=\"sentence\"><code>\"sentence\"</code></dt> <dd> <p>Split the input into segments at sentence boundaries, as determined by the locale. </dd> </dl> </dd> <dt id=\"localematcher\"><code>localeMatcher</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>The locale matching algorithm to use. Possible values are: <dl> <dt id=\"best_fit\"><code>\"best fit\"</code> (default)</dt> <dd> <p>The runtime may choose a possibly more suited locale than the result of the lookup algorithm. </dd> <dt id=\"lookup\"><code>\"lookup\"</code></dt> <dd> <p>Use the <a href=\"https://datatracker.ietf.org/doc/html/rfc4647#section-3.4\" class=\"external\" target=\"_blank\">BCP 47 Lookup algorithm</a> to choose the locale from <code>locales</code>. For each locale in <code>locales</code>, the runtime returns the first supported locale (possibly removing restricting subtags of the provided locale tag to find such a supported locale. In other words providing <code>\"de-CH\"</code> as <code>locales</code> may result in using <code>\"de\"</code> if <code>\"de\"</code> is supported but <code>\"de-CH\"</code> is not). </dd> </dl> </dd> </dl>"
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> instance."
    },
    "intl.segmenter.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Opera": "73",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>Intl.Segmenter.supportedLocalesOf()</code></strong> static method returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>.",
        "options": "An object that may have the following property: <dl> <dt id=\"localematcher\"><code>localeMatcher</code></dt> <dd> <p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation\"><code>Intl</code></a> page. </dd> </dl>"
      },
      "returns": "An array of strings representing a subset of the given locale tags that are supported\n  in segmentation without having to fall back to the runtime's default locale."
    },
    "intl.supportedvaluesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/supportedvaluesof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "99",
        "ChromeAndroid": "99",
        "Edge": "99",
        "Firefox": "93",
        "Opera": "85",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "18.0.0",
        "Deno": "1.19"
      },
      "doc": "The <strong><code>Intl.supportedValuesOf()</code></strong> static method returns an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.\n<p>Duplicates are omitted and the array is sorted in ascending alphabetic order (or more precisely, using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a> with an <code>undefined</code> compare function)\n<p>The method can be used to feature-test whether values are supported in a particular implementation and download a polyfill only if necessary.\nIt can also be used to build UIs that allow users to select their preferred localized values, for example when the UI is created from WebGL or server-side.",
      "parameters": {
        "key": "A key string indicating the category of values to be returned. This is one of: <code>\"calendar\"</code>, <code>\"collation\"</code>, <code>\"currency\"</code>, <code>\"numberingSystem\"</code>, <code>\"timeZone\"</code>, <code>\"unit\"</code>."
      },
      "returns": "A sorted array of unique string values indicating the values supported by the implementation for the given key.",
      "throws": {
        "RangeError": "Thrown if an unsupported key was passed as a parameter."
      }
    },
    "isfinite": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/isfinite",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>isFinite()</code></strong> function determines whether the\npassed value is a finite number. If needed, the parameter is first converted to a\nnumber.",
      "parameters": {
        "testValue": "The value to be tested for finiteness."
      },
      "returns": "<strong><code>false</code></strong> if the argument is (or will be coerced to) positive\n  or negative <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>;\n  otherwise, <strong><code>true</code></strong>."
    },
    "isnan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/isnan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>isNaN()</code></strong> function determines whether a value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when converted to a number. Because coercion inside the <code>isNaN()</code> function can be <a href=\"#description\">surprising</a>, you may alternatively want to use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a>.",
      "parameters": {
        "value": "The value to be tested."
      },
      "returns": "<code>true</code> if the given value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> after being <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">converted to a number</a>; otherwise, <code>false</code>."
    },
    "iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "17",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "An <strong><code>Iterator</code></strong> object is an object that conforms to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\">iterator protocol</a> by providing a <code>next()</code> method that returns an iterator result object. The <code>Iterator.prototype</code> object is a hidden global object that all built-in iterators inherit from. It provides a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator/@@iterator\"><code>@@iterator</code></a> method that returns the iterator object itself, making the iterator also <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a>.\n<p>Note that <code>Iterator</code> is <em>not</em> a global object, although it will be in the future with the <a href=\"https://github.com/tc39/proposal-iterator-helpers\" class=\"external\" target=\"_blank\">iterator helpers proposal</a>. The <code>Iterator.prototype</code> object shared by all built-in iterators can be obtained with the following code:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\"><pre class=\"brush: js notranslate\"><code>const IteratorPrototype = Object.getPrototypeOf(\n  Object.getPrototypeOf([].values()),\n);\n</code></pre></span></div>"
    },
    "iterator.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/iterator/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\"><code>Iterator</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows built-in iterators to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns the value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>, which is the iterator object itself.",
      "returns": "The value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>, which is the iterator object itself."
    },
    "json": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "4",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>JSON</code></strong> namespace object contains static methods for parsing values from and converting values to <a href=\"https://json.org/\" class=\"external\" target=\"_blank\">JavaScript Object Notation</a> (<a href=\"$MDN_URL$/Glossary/JSON\">JSON</a>)."
    },
    "json.parse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/parse",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "4",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>JSON.parse()</code></strong> static method parses a JSON string, constructing the JavaScript value or object described by the string. An optional <em>reviver</em> function can be provided to perform a transformation on the resulting object before it is returned.",
      "parameters": {
        "text": "The string to parse as JSON. See the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON\"><code>JSON</code></a> object for a description of JSON syntax.",
        "reviver": "If a function, this prescribes how each value originally produced by parsing is transformed before being returned. Non-callable values are ignored. The function is called with the following arguments: <dl> <dt id=\"key\"><code>key</code></dt> <dd> <p>The key associated with the value. </dd> <dt id=\"value\"><code>value</code></dt> <dd> <p>The value produced by parsing. </dd> </dl>"
      },
      "returns": "The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>, string, number, boolean, or <code>null</code> value corresponding to the given JSON <code>text</code>.",
      "throws": {
        "SyntaxError": "Thrown if the string to parse is not valid JSON."
      }
    },
    "json.stringify": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/stringify",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "4",
        "SafariIOS": "4",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>JSON.stringify()</code></strong> static method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",
      "parameters": {
        "value": "The value to convert to a JSON string.",
        "replacer": "A function that alters the behavior of the stringification process, or an array of strings and numbers that specifies properties of <code>value</code> to be included in the output. If <code>replacer</code> is an array, all elements in this array that are not strings or numbers (either primitives or wrapper objects), including <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> values, are completely ignored. If <code>replacer</code> is anything other than a function or an array (e.g. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> or not provided), all string-keyed properties of the object are included in the resulting JSON string.",
        "space": "A string or number that's used to insert white space (including indentation, line break characters, etc.) into the output JSON string for readability purposes. <p>If this is a number, it indicates the number of space characters to be used as indentation, clamped to 10 (that is, any number greater than <code>10</code> is treated as if it were <code>10</code>). Values less than 1 indicate that no space should be used. <p>If this is a string, the string (or the first 10 characters of the string, if it's longer than that) is inserted before every nested object or array. <p>If <code>space</code> is anything other than a string or number (can be either a primitive or a wrapper object) — for example, is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> or not provided — no white space is used."
      },
      "returns": "A JSON string representing the given value, or undefined.",
      "throws": {
        "TypeError": "Thrown if one of the following is true: <ul> <li><code>value</code> contains a circular reference.</li> <li>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> value is encountered.</li> </ul>"
      }
    },
    "map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Map</code></strong> object holds key-value pairs and remembers the original insertion\norder of the keys. Any value (both objects and\n<a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a>) may be used as\neither a key or a value."
    },
    "map.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows maps to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">map iterator object</a> that yields the key-value pairs of the map in insertion order.\n<p>The initial value of this property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries</code></a> property.",
      "returns": "The same return value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a>: a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the key-value pairs of the map."
    },
    "map.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/@@species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "41",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Map[@@species]</code></strong> static accessor property is an unused accessor property specifying how to copy <code>Map</code> objects.",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get @@species</code> was called. The return value is used to construct copied <code>Map</code> instances."
    },
    "map.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/clear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "19",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>clear()</code></strong> method removes all elements from a <code>Map</code> object.",
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "map.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/delete",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>delete()</code></strong> method removes the specified element from a <code>Map</code> object by\nkey.",
      "parameters": {
        "key": "The key of the element to remove from the <code>Map</code> object."
      },
      "returns": "<code>true</code> if an element in the <code>Map</code> object existed and has been removed, or\n  <code>false</code> if the element does not exist."
    },
    "map.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "20",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>entries()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">map iterator</a></em> object that contains the <code>[key, value]</code> pairs for each element in the <code>Map</code> object in insertion order.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "map.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/foreach",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>forEach()</code></strong> method executes a provided function once per each key/value\npair in the <code>Map</code> object, in insertion order.",
      "parameters": {
        "callbackFn": "A function to execute for each entry in the map. The function is called with the following arguments: <dl> <dt id=\"value\"><code>value</code></dt> <dd> <p>Value of each iteration. </dd> <dt id=\"key\"><code>key</code></dt> <dd> <p>Key of each iteration. </dd> <dt id=\"map\"><code>map</code></dt> <dd> <p>The map being iterated. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "map.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/get",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>get()</code></strong> method returns a specified element from a <code>Map</code> object. If the\nvalue that is associated to the provided key is an object, then you will get a\nreference to that object and any change made to that object will effectively\nmodify it inside the <code>Map</code> object.",
      "parameters": {
        "key": "The key of the element to return from the <code>Map</code> object."
      },
      "returns": "The element associated with the specified key, or\n  <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the key can't be found in the <code>Map</code> object."
    },
    "map.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>has()</code></strong> method returns a boolean indicating whether an element with the\nspecified key exists or not.",
      "parameters": {
        "key": "The key of the element to test for presence in the <code>Map</code> object."
      },
      "returns": "<code>true</code> if an element with the specified key exists in the <code>Map</code> object;\n  otherwise <code>false</code>."
    },
    "map.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/keys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "20",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>keys()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">map iterator</a></em> object that contains the keys for each element in the <code>Map</code> object in insertion order.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "map.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/map",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Map()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> objects.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> or other <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable</a> object whose elements are key-value pairs. (For example, arrays with two elements, such as <code>[[ 1, 'one' ],[ 2, 'two' ]]</code>.) Each key-value pair is added to the new <code>Map</code>."
      }
    },
    "map.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>set()</code></strong> method adds or updates an entry in a <code>Map</code> object with a specified key and a value.",
      "parameters": {
        "key": "The key of the element to add to the <code>Map</code> object. The key may be any <a href=\"$MDN_URL$/Web/JavaScript/Data_structures\">JavaScript type</a> (any <a href=\"$MDN_URL$/Web/JavaScript/Data_structures#primitive_values\">primitive value</a> or any type of <a href=\"$MDN_URL$/Web/JavaScript/Data_structures#objects\">JavaScript object</a>).",
        "value": "The value of the element to add to the <code>Map</code> object. The value may be any <a href=\"$MDN_URL$/Web/JavaScript/Data_structures\">JavaScript type</a> (any <a href=\"$MDN_URL$/Web/JavaScript/Data_structures#primitive_values\">primitive value</a> or any type of <a href=\"$MDN_URL$/Web/JavaScript/Data_structures#objects\">JavaScript object</a>)."
      },
      "returns": "The <code>Map</code> object."
    },
    "map.size": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/size",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "19",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>size</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instances returns the number of elements in this map."
    },
    "map.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "20",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>values()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">map iterator</a></em> object that contains the values for each element in the <code>Map</code> object in insertion order.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "math": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math</code></strong> namespace object contains static properties and methods for mathematical constants and functions.\n<p><code>Math</code> works with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> type. It doesn't work with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>."
    },
    "math.abs": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/abs",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.abs()</code></strong> static method returns the absolute value of a number.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The absolute value of <code>x</code>. If <code>x</code> is negative (including <code>-0</code>), returns <code>-x</code>. Otherwise, returns <code>x</code>. The result is therefore always a positive number or <code>0</code>."
    },
    "math.acos": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/acos",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.acos()</code></strong> static method returns the inverse cosine (in radians) of a number. That is,\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mo>∀</mo>\n<mi>x</mi>\n<mo>∊</mo>\n<mo stretchy=\"false\">[</mo>\n<mrow>\n<mo>−</mo>\n<mn>1</mn>\n</mrow>\n<mo>,</mo>\n<mn>1</mn>\n<mo stretchy=\"false\">]</mo>\n<mo>,</mo>\n<mspace width=\"0.2777777777777778em\"></mspace>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚌𝚘𝚜</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">arccos</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mo>∊</mo>\n<mo stretchy=\"false\">[</mo>\n<mn>0</mn>\n<mo>,</mo>\n<mi>π</mi>\n<mo stretchy=\"false\">]</mo>\n<mtext> such that </mtext>\n<mo lspace=\"0em\" rspace=\"0em\">cos</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>y</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mi>x</mi>\n</mrow>\n<annotation encoding=\"TeX\">\\forall x \\in [{-1}, 1],;\\mathtt{\\operatorname{Math.acos}(x)} = \\arccos(x) = \\text{the unique } y \\in [0, \\pi] \\text{ such that } \\cos(y) = x</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number between -1 and 1, inclusive, representing the angle's cosine value."
      },
      "returns": "The inverse cosine (angle in radians between 0 and π, inclusive) of <code>x</code>. If <code>x</code> is less than -1 or greater than 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.acosh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/acosh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.acosh()</code></strong> static method returns the inverse hyperbolic cosine of a number. That is,\n<p><math display=\"block\">\n<semantics>\n<mtable columnalign=\"right left right left right left right left right left\" columnspacing=\"0em\" displaystyle=\"true\">\n<mtr>\n<mtd>\n<mo>∀</mo>\n<mi>x</mi>\n<mo>≥</mo>\n<mn>1</mn>\n<mo>,</mo>\n<mspace width=\"0.2777777777777778em\"></mspace>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚌𝚘𝚜𝚑</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n</mtd>\n<mtd>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">arcosh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mo>≥</mo>\n<mn>0</mn>\n<mtext> such that </mtext>\n<mo lspace=\"0em\" rspace=\"0em\">cosh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>y</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mi>x</mi>\n</mtd>\n</mtr>\n<mtr>\n<mtd>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">ln</mo>\n<mrow>\n<mo>(</mo>\n<mrow>\n<mi>x</mi>\n<mo>+</mo>\n<msqrt>\n<mrow>\n<msup>\n<mi>x</mi>\n<mn>2</mn>\n</msup>\n<mo>−</mo>\n<mn>1</mn>\n</mrow>\n</msqrt>\n</mrow>\n<mo>)</mo>\n</mrow>\n</mtd>\n</mtr>\n</mtable>\n<annotation encoding=\"TeX\">\\begin{aligned}\\forall x \\geq 1,;\\mathtt{\\operatorname{Math.acosh}(x)} &amp;= \\operatorname{arcosh}(x) = \\text{the unique } y \\geq 0 \\text{ such that } \\cosh(y) = x\\&amp;= \\ln\\left(x + \\sqrt{x^2 - 1}\\right)\\end{aligned}</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number greater than or equal to 1."
      },
      "returns": "The inverse hyperbolic cosine of <code>x</code>. If <code>x</code> is less than 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.asin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/asin",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.asin()</code></strong> static method returns the inverse sine (in radians) of a number. That is,\n<p><math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\">\n<semantics>\n<mrow>\n<mo>∀</mo>\n<mi>x</mi>\n<mo>∊</mo>\n<mo stretchy=\"false\">[</mo>\n<mrow>\n<mo>−</mo>\n<mn>1</mn>\n</mrow>\n<mo>,</mo>\n<mn>1</mn>\n<mo stretchy=\"false\">]</mo>\n<mo>,</mo>\n<mspace width=\"0.2777777777777778em\"></mspace>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚜𝚒𝚗</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">arcsin</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mo>∊</mo>\n<mrow>\n<mo>[</mo>\n<mrow>\n<mo>−</mo>\n<mfrac>\n<mi>π</mi>\n<mn>2</mn>\n</mfrac>\n<mo>,</mo>\n<mfrac>\n<mi>π</mi>\n<mn>2</mn>\n</mfrac>\n</mrow>\n<mo>]</mo>\n</mrow>\n<mtext> such that </mtext>\n<mo lspace=\"0em\" rspace=\"0em\">sin</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>y</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mi>x</mi>\n</mrow>\n<annotation encoding=\"TeX\">\\forall x \\in [{-1}, 1],;\\mathtt{\\operatorname{Math.asin}(x)} = \\arcsin(x) = \\text{the unique } y \\in \\left[-\\frac{\\pi}{2}, \\frac{\\pi}{2}\\right] \\text{ such that } \\sin(y) = x</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number between -1 and 1, inclusive, representing the angle's sine value."
      },
      "returns": "The inverse sine (angle in radians between \n  <math>\n    <semantics>\n      <mrow>\n        <mo>-</mo>\n        <mfrac>\n          <mi>π</mi>\n          <mn>2</mn>\n        </mfrac>\n      </mrow>\n      <annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation>\n    </semantics>\n  </math> and \n  <math>\n    <semantics>\n      <mfrac>\n        <mi>π</mi>\n        <mn>2</mn>\n      </mfrac>\n      <annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation>\n    </semantics>\n  </math>, inclusive) of <code>x</code>. If <code>x</code> is less than -1 or greater than 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.asinh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/asinh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.asinh()</code></strong> static method returns the inverse hyperbolic sine of a number. That is,\n<p><math display=\"block\">\n<semantics>\n<mtable columnalign=\"right left right left right left right left right left\" columnspacing=\"0em\" displaystyle=\"true\">\n<mtr>\n<mtd>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚜𝚒𝚗𝚑</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n</mtd>\n<mtd>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">arsinh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mtext> such that </mtext>\n<mo lspace=\"0em\" rspace=\"0em\">sinh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>y</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mi>x</mi>\n</mtd>\n</mtr>\n<mtr>\n<mtd>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">ln</mo>\n<mrow>\n<mo>(</mo>\n<mrow>\n<mi>x</mi>\n<mo>+</mo>\n<msqrt>\n<mrow>\n<msup>\n<mi>x</mi>\n<mn>2</mn>\n</msup>\n<mo>+</mo>\n<mn>1</mn>\n</mrow>\n</msqrt>\n</mrow>\n<mo>)</mo>\n</mrow>\n</mtd>\n</mtr>\n</mtable>\n<annotation encoding=\"TeX\">\\begin{aligned}\\mathtt{\\operatorname{Math.asinh}(x)} &amp;= \\operatorname{arsinh}(x) = \\text{the unique } y \\text{ such that } \\sinh(y) = x \\&amp;= \\ln\\left(x + \\sqrt{x^2 + 1}\\right)\\end{aligned}</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The inverse hyperbolic sine of <code>x</code>."
    },
    "math.atan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.atan()</code></strong> static method returns the inverse tangent (in radians) of a number, that is\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚝𝚊𝚗</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">arctan</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mo>∊</mo>\n<mrow>\n<mo>[</mo>\n<mrow>\n<mo>−</mo>\n<mfrac>\n<mi>π</mi>\n<mn>2</mn>\n</mfrac>\n<mo>,</mo>\n<mfrac>\n<mi>π</mi>\n<mn>2</mn>\n</mfrac>\n</mrow>\n<mo>]</mo>\n</mrow>\n<mtext> such that </mtext>\n<mo lspace=\"0em\" rspace=\"0em\">tan</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>y</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mi>x</mi>\n</mrow>\n<annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.atan}(x)} = \\arctan(x) = \\text{the unique } y \\in \\left[-\\frac{\\pi}{2}, \\frac{\\pi}{2}\\right] \\text{ such that } \\tan(y) = x</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The inverse tangent (angle in radians between \n  <math>\n    <semantics>\n      <mrow>\n        <mo>-</mo>\n        <mfrac>\n          <mi>π</mi>\n          <mn>2</mn>\n        </mfrac>\n      </mrow>\n      <annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation>\n    </semantics>\n  </math> and \n  <math>\n    <semantics>\n      <mfrac>\n        <mi>π</mi>\n        <mn>2</mn>\n      </mfrac>\n      <annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation>\n    </semantics>\n  </math>, inclusive) of <code>x</code>. If <code>x</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, it returns \n  <math>\n    <semantics>\n      <mfrac>\n        <mi>π</mi>\n        <mn>2</mn>\n      </mfrac>\n      <annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation>\n    </semantics>\n  </math>. If <code>x</code> is <code>-Infinity</code>, it returns \n  <math>\n    <semantics>\n      <mrow>\n        <mo>-</mo>\n        <mfrac>\n          <mi>π</mi>\n          <mn>2</mn>\n        </mfrac>\n      </mrow>\n      <annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation>\n    </semantics>\n  </math>."
    },
    "math.atan2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atan2",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.atan2()</code></strong> static method returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for <code>Math.atan2(y, x)</code>.",
      "parameters": {
        "y": "The y coordinate of the point.",
        "x": "The x coordinate of the point."
      },
      "returns": "The angle in radians (between -π and π, inclusive) between the positive x-axis and the ray from (0, 0) to the point (x, y)."
    },
    "math.atanh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atanh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.atanh()</code></strong> static method returns the inverse hyperbolic tangent of a number. That is,\n<p><math display=\"block\">\n<semantics>\n<mtable columnalign=\"right left right left right left right left right left\" columnspacing=\"0em\" displaystyle=\"true\">\n<mtr>\n<mtd>\n<mo>∀</mo>\n<mi>x</mi>\n<mo>∊</mo>\n<mo stretchy=\"false\">(</mo>\n<mrow>\n<mo>−</mo>\n<mn>1</mn>\n</mrow>\n<mo>,</mo>\n<mn>1</mn>\n<mo stretchy=\"false\">)</mo>\n<mo>,</mo>\n<mspace width=\"0.2777777777777778em\"></mspace>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚝𝚊𝚗𝚑</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n</mtd>\n<mtd>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">artanh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mtext> such that </mtext>\n<mo lspace=\"0em\" rspace=\"0em\">tanh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>y</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mi>x</mi>\n</mtd>\n</mtr>\n<mtr>\n<mtd>\n<mo>=</mo>\n<mfrac>\n<mn>1</mn>\n<mn>2</mn>\n</mfrac>\n<mspace width=\"0.16666666666666666em\"></mspace>\n<mo lspace=\"0em\" rspace=\"0em\">ln</mo>\n<mrow>\n<mo>(</mo>\n<mfrac>\n<mrow>\n<mn>1</mn>\n<mo>+</mo>\n<mi>x</mi>\n</mrow>\n<mrow>\n<mn>1</mn>\n<mo>−</mo>\n<mi>x</mi>\n</mrow>\n</mfrac>\n<mo>)</mo>\n</mrow>\n</mtd>\n</mtr>\n</mtable>\n<annotation encoding=\"TeX\">\\begin{aligned}\\forall x \\in ({-1}, 1),;\\mathtt{\\operatorname{Math.atanh}(x)} &amp;= \\operatorname{artanh}(x) = \\text{the unique } y \\text{ such that } \\tanh(y) = x \\&amp;= \\frac{1}{2},\\ln\\left(\\frac{1+x}{1-x}\\right)\\end{aligned}</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number between -1 and 1, inclusive."
      },
      "returns": "The inverse hyperbolic tangent of <code>x</code>. If <code>x</code> is 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>. If <code>x</code> is -1, returns <code>-Infinity</code>. If <code>x</code> is less than -1 or greater than 1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.cbrt": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cbrt",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.cbrt()</code></strong> static method returns the cube root of a number. That is\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚌𝚋𝚛𝚝</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<mroot>\n<mi>x</mi>\n<mn>3</mn>\n</mroot>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mtext> such that </mtext>\n<msup>\n<mi>y</mi>\n<mn>3</mn>\n</msup>\n<mo>=</mo>\n<mi>x</mi>\n</mrow>\n<annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.cbrt}(x)} = \\sqrt[3]{x} = \\text{the unique } y \\text{ such that } y^3 = x</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The cube root of <code>x</code>."
    },
    "math.ceil": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ceil",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.ceil()</code></strong> static method always rounds up and returns the smaller integer greater than or equal to a given number.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The smallest integer greater than or equal to <code>x</code>. It's the same value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>-Math.floor(-x)</code></a>."
    },
    "math.clz32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/clz32",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "31",
        "Opera": "25",
        "Safari": "7",
        "SafariIOS": "7",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.clz32()</code></strong> static method returns the number of leading zero bits in the 32-bit binary representation of a number.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The number of leading zero bits in the 32-bit binary representation of <code>x</code>."
    },
    "math.cos": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cos",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.cos()</code></strong> static method returns the cosine of a number in radians.",
      "parameters": {
        "x": "A number representing an angle in radians."
      },
      "returns": "The cosine of <code>x</code>, between -1 and 1, inclusive. If <code>x</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, <code>-Infinity</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.cosh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cosh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.cosh()</code></strong> static method returns the hyperbolic cosine of a number. That is,\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚌𝚘𝚜𝚑</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">cosh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mfrac>\n<mrow>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mi>x</mi>\n</msup>\n<mo>+</mo>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mrow>\n<mo>−</mo>\n<mi>x</mi>\n</mrow>\n</msup>\n</mrow>\n<mn>2</mn>\n</mfrac>\n</mrow>\n<annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.cosh}(x)} = \\cosh(x) = \\frac{\\mathrm{e}^x + \\mathrm{e}^{-x}}{2}</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The hyperbolic cosine of <code>x</code>."
    },
    "math.e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/e",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.E</code></strong> static data property represents Euler's number, the base of natural logarithms, e, which is approximately 2.718."
    },
    "math.exp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/exp",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.exp()</code></strong> static method returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a> raised to the power of a number. That is\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚎𝚡𝚙</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mi>x</mi>\n</msup>\n</mrow>\n<annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.exp}(x)} = \\mathrm{e}^x</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number."
      },
      "returns": "A nonnegative number representing e<sup>x</sup>, where e is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">the base of the natural logarithm</a>."
    },
    "math.expm1": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/expm1",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.expm1()</code></strong> static method returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a> raised to the power of a number, subtracted by 1. That is\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚎𝚡𝚙𝚖𝟷</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mi>x</mi>\n</msup>\n<mo>−</mo>\n<mn>1</mn>\n</mrow>\n<annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.expm1}(x)} = \\mathrm{e}^x - 1</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number."
      },
      "returns": "A number representing e<sup>x</sup> - 1, where e is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">the base of the natural logarithm</a>."
    },
    "math.floor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/floor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.floor()</code></strong> static method always rounds down and returns the largest integer less than or equal to a given number.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The largest integer smaller than or equal to <code>x</code>. It's the same value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/ceil\"><code>-Math.ceil(-x)</code></a>."
    },
    "math.fround": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/fround",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "26",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.fround()</code></strong> static method returns the nearest <a href=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\" class=\"external\" target=\"_blank\">32-bit single precision</a> float representation of a number.",
      "parameters": {
        "doubleFloat": "A number."
      },
      "returns": "The nearest <a href=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\" class=\"external\" target=\"_blank\">32-bit single precision</a> float representation of <code>x</code>."
    },
    "math.hypot": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/hypot",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "27",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.hypot()</code></strong> static method returns the square root of the sum of squares of its arguments. That is,\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mstyle mathvariant=\"monospace\">\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚑𝚢𝚙𝚘𝚝</mo>\n<mo stretchy=\"false\">(</mo>\n<msub>\n<mi>v</mi>\n<mn>1</mn>\n</msub>\n<mo>,</mo>\n<msub>\n<mi>v</mi>\n<mn>2</mn>\n</msub>\n<mo>,</mo>\n<mo>…</mo>\n<mo>,</mo>\n<msub>\n<mi>v</mi>\n<mi>n</mi>\n</msub>\n<mo stretchy=\"false\">)</mo>\n</mstyle>\n<mo>=</mo>\n<msqrt>\n<mrow>\n<munderover>\n<mo>∑</mo>\n<mrow>\n<mi>i</mi>\n<mo>=</mo>\n<mn>1</mn>\n</mrow>\n<mi>n</mi>\n</munderover>\n<msubsup>\n<mi>v</mi>\n<mi>i</mi>\n<mn>2</mn>\n</msubsup>\n</mrow>\n</msqrt>\n<mo>=</mo>\n<msqrt>\n<mrow>\n<msubsup>\n<mi>v</mi>\n<mn>1</mn>\n<mn>2</mn>\n</msubsup>\n<mo>+</mo>\n<msubsup>\n<mi>v</mi>\n<mn>2</mn>\n<mn>2</mn>\n</msubsup>\n<mo>+</mo>\n<mo>…</mo>\n<mo>+</mo>\n<msubsup>\n<mi>v</mi>\n<mi>n</mi>\n<mn>2</mn>\n</msubsup>\n</mrow>\n</msqrt>\n</mrow>\n<annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.hypot}(v_1, v_2, \\dots, v_n)} = \\sqrt{\\sum_{i=1}^n v_i^2} = \\sqrt{v_1^2 + v_2^2 + \\dots + v_n^2}</annotation>\n</semantics>\n</math>",
      "parameters": {
        "value1, …, valueN": "Numbers."
      },
      "returns": "The square root of the sum of squares of the given arguments. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if any of the arguments is ±Infinity. Otherwise, if at least one of the arguments is or is converted to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>. Returns <code>0</code> if no arguments are given or all arguments are ±0."
    },
    "math.imul": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/imul",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "28",
        "ChromeAndroid": "28",
        "Edge": "",
        "Firefox": "20",
        "Opera": "16",
        "Safari": "7",
        "SafariIOS": "7",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.imul()</code></strong> static method returns the result of the C-like 32-bit multiplication of the two parameters.",
      "parameters": {
        "a": "First number.",
        "b": "Second number."
      },
      "returns": "The result of the C-like 32-bit multiplication of the given arguments."
    },
    "math.ln10": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ln10",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.LN10</code></strong> static data property represents the natural logarithm of 10, approximately 2.302."
    },
    "math.ln2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ln2",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.LN2</code></strong> static data property represents the natural logarithm of 2, approximately 0.693:"
    },
    "math.log": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.log()</code></strong> static method returns the natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>) of a number. That is\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mo>∀</mo>\n<mi>x</mi>\n<mo>&gt;</mo>\n<mn>0</mn>\n<mo>,</mo>\n<mspace width=\"0.2777777777777778em\"></mspace>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">ln</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mtext> such that </mtext>\n<msup>\n<mi>e</mi>\n<mi>y</mi>\n</msup>\n<mo>=</mo>\n<mi>x</mi>\n</mrow>\n<annotation encoding=\"TeX\">\\forall x &gt; 0,;\\mathtt{\\operatorname{Math.log}(x)} = \\ln(x) = \\text{the unique } y \\text{ such that } e^y = x</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number greater than or equal to 0."
      },
      "returns": "The natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>) of <code>x</code>. If <code>x</code> is ±0, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\"><code>-Infinity</code></a>. If <code>x &lt; 0</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.log10": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log10",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.log10()</code></strong> static method returns the base 10 logarithm of a number. That is\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mo>∀</mo>\n<mi>x</mi>\n<mo>&gt;</mo>\n<mn>0</mn>\n<mo>,</mo>\n<mspace width=\"0.2777777777777778em\"></mspace>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝟶</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<msub>\n<mo lspace=\"0em\" rspace=\"0em\">log</mo>\n<mn>10</mn>\n</msub>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mtext> such that </mtext>\n<msup>\n<mn>10</mn>\n<mi>y</mi>\n</msup>\n<mo>=</mo>\n<mi>x</mi>\n</mrow>\n<annotation encoding=\"TeX\">\\forall x &gt; 0,;\\mathtt{\\operatorname{Math.log10}(x)} = \\log_{10}(x) = \\text{the unique } y \\text{ such that } 10^y = x</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number greater than or equal to 0."
      },
      "returns": "The base 10 logarithm of <code>x</code>. If <code>x &lt; 0</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.log10e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log10e",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.LOG10E</code></strong> static data property represents the base 10 logarithm of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>, approximately 0.434."
    },
    "math.log1p": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log1p",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.log1p()</code></strong> static method returns the natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>) of <code>1 + x</code>, where <code>x</code> is the argument. That is:\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mo>∀</mo>\n<mi>x</mi>\n<mo>&gt;</mo>\n<mo>−</mo>\n<mn>1</mn>\n<mo>,</mo>\n<mspace width=\"0.2777777777777778em\"></mspace>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝚙</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">ln</mo>\n<mo stretchy=\"false\">(</mo>\n<mn>1</mn>\n<mo>+</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<annotation encoding=\"TeX\">\\forall x &gt; -1,;\\mathtt{\\operatorname{Math.log1p}(x)} = \\ln(1 + x)</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number greater than or equal to -1."
      },
      "returns": "The natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>) of <code>x + 1</code>. If <code>x</code> is -1, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\"><code>-Infinity</code></a>. If <code>x &lt; -1</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.log2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log2",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.log2()</code></strong> static method returns the base 2 logarithm of a number. That is\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mo>∀</mo>\n<mi>x</mi>\n<mo>&gt;</mo>\n<mn>0</mn>\n<mo>,</mo>\n<mspace width=\"0.2777777777777778em\"></mspace>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟸</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<msub>\n<mo lspace=\"0em\" rspace=\"0em\">log</mo>\n<mn>2</mn>\n</msub>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mtext> such that </mtext>\n<msup>\n<mn>2</mn>\n<mi>y</mi>\n</msup>\n<mo>=</mo>\n<mi>x</mi>\n</mrow>\n<annotation encoding=\"TeX\">\\forall x &gt; 0,;\\mathtt{\\operatorname{Math.log2}(x)} = \\log_2(x) = \\text{the unique } y \\text{ such that } 2^y = x</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number greater than or equal to 0."
      },
      "returns": "The base 2 logarithm of <code>x</code>. If <code>x &lt; 0</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.log2e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log2e",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.LOG2E</code></strong> static data property represents the base 2 logarithm of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a>, approximately 1.442."
    },
    "math.max": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/max",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.max()</code></strong> static method returns the largest of the numbers given as input parameters, or -<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if there are no parameters.",
      "parameters": {
        "value1<br>\nvalue2<br>\n… <br>\nvalueN": "Zero or more numbers among which the largest value will be selected and returned."
      },
      "returns": "The largest of the given numbers. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> if any of the parameters is or is converted into <code>NaN</code>. Returns -<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if no parameters are provided."
    },
    "math.min": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/min",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.min()</code></strong> static method returns the smallest of the numbers given as input parameters, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if there are no parameters.",
      "parameters": {
        "value1, …, valueN": "Zero or more numbers among which the lowest value will be selected and returned."
      },
      "returns": "The smallest of the given numbers. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> if any of the parameters is or is converted into <code>NaN</code>. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if no parameters are provided."
    },
    "math.pi": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/pi",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.PI</code></strong> static data property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159."
    },
    "math.pow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/pow",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.pow()</code></strong> static method returns the value of a base raised to a power. That is\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚙𝚘𝚠</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo>,</mo>\n<mi>𝚢</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<msup>\n<mi>x</mi>\n<mi>y</mi>\n</msup>\n</mrow>\n<annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.pow}(x, y)} = x^y</annotation>\n</semantics>\n</math>",
      "parameters": {
        "base": "The base number.",
        "exponent": "The exponent number."
      },
      "returns": "A number representing <code>base</code> taken to the power of <code>exponent</code>. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> in one of the following cases:\n<ul>\n  <li><code>exponent</code> is <code>NaN</code>.</li>\n  <li><code>base</code> is <code>NaN</code> and <code>exponent</code> is not <code>0</code>.</li>\n  <li><code>base</code> is ±1 and <code>exponent</code> is ±<code>Infinity</code>.</li>\n  <li><code>base &lt; 0</code> and <code>exponent</code> is not an integer.</li>\n</ul>"
    },
    "math.random": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/random",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.random()</code></strong> static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1, with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> <code>Math.random()</code> <em>does not</em> provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the <a href=\"$MDN_URL$/Web/API/Crypto/getRandomValues\" ><code>window.crypto.getRandomValues()</code></a> method.\n</div>",
      "returns": "A floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive)."
    },
    "math.round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/round",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.round()</code></strong> static method returns the value of a number rounded to the nearest integer.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The value of <code>x</code> rounded to the nearest integer."
    },
    "math.sign": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sign",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.sign()</code></strong> static method returns 1 or -1, indicating the sign of the number passed as argument. If the input is 0 or -0, it will be returned as-is.",
      "parameters": {
        "x": "A number."
      },
      "returns": "A number representing the sign of <code>x</code>:\n<ul>\n  <li>If <code>x</code> is positive, returns <code>1</code>.</li>\n  <li>If <code>x</code> is negative, returns <code>-1</code>.</li>\n  <li>If <code>x</code> is positive zero, returns <code>0</code>.</li>\n  <li>If <code>x</code> is negative zero, returns <code>-0</code>.</li>\n  <li>Otherwise, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</li>\n</ul>"
    },
    "math.sin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sin",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.sin()</code></strong> static method returns the sine of a number in radians.",
      "parameters": {
        "x": "A number representing an angle in radians."
      },
      "returns": "The sine of <code>x</code>, between -1 and 1, inclusive. If <code>x</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, <code>-Infinity</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.sinh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sinh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.sinh()</code></strong> static method returns the hyperbolic sine of a number. That is,\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚜𝚒𝚗𝚑</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">sinh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mfrac>\n<mrow>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mi>x</mi>\n</msup>\n<mo>−</mo>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mrow>\n<mo>−</mo>\n<mi>x</mi>\n</mrow>\n</msup>\n</mrow>\n<mn>2</mn>\n</mfrac>\n</mrow>\n<annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.sinh}(x)} = \\sinh(x) = \\frac{\\mathrm{e}^x - \\mathrm{e}^{-x}}{2}</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The hyperbolic sine of <code>x</code>."
    },
    "math.sqrt": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sqrt",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.sqrt()</code></strong> static method returns the square root of a number. That is\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mo>∀</mo>\n<mi>x</mi>\n<mo>≥</mo>\n<mn>0</mn>\n<mo>,</mo>\n<mspace width=\"0.2777777777777778em\"></mspace>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚜𝚚𝚛𝚝</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<msqrt>\n<mi>x</mi>\n</msqrt>\n<mo>=</mo>\n<mtext>the unique </mtext>\n<mi>y</mi>\n<mo>≥</mo>\n<mn>0</mn>\n<mtext> such that </mtext>\n<msup>\n<mi>y</mi>\n<mn>2</mn>\n</msup>\n<mo>=</mo>\n<mi>x</mi>\n</mrow>\n<annotation encoding=\"TeX\">\\forall x \\geq 0,;\\mathtt{\\operatorname{Math.sqrt}(x)} = \\sqrt{x} = \\text{the unique } y \\geq 0 \\text{ such that } y^2 = x</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number greater than or equal to 0."
      },
      "returns": "The square root of <code>x</code>, a nonnegative number. If <code>x &lt; 0</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "math.sqrt2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sqrt2",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.SQRT2</code></strong> static data property represents the square root of 2, approximately 1.414."
    },
    "math.tan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/tan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.tan()</code></strong> static method returns the tangent of a number in radians.",
      "parameters": {
        "x": "A number representing an angle in radians."
      },
      "returns": "The tangent of <code>x</code>. If <code>x</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, <code>-Infinity</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Due to floating point precision, it's not possible to obtain the exact value π/2, so the result is always finite if not <code>NaN</code>.\n</div>"
    },
    "math.tanh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/tanh",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.tanh()</code></strong> static method returns the hyperbolic tangent of a number. That is,\n<p><math display=\"block\">\n<semantics>\n<mrow>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚝𝚊𝚗𝚑</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>𝚡</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mo>=</mo>\n<mo lspace=\"0em\" rspace=\"0em\">tanh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n<mo>=</mo>\n<mfrac>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0em\">sinh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n<mrow>\n<mo lspace=\"0em\" rspace=\"0em\">cosh</mo>\n<mo stretchy=\"false\">(</mo>\n<mi>x</mi>\n<mo stretchy=\"false\">)</mo>\n</mrow>\n</mfrac>\n<mo>=</mo>\n<mfrac>\n<mrow>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mi>x</mi>\n</msup>\n<mo>−</mo>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mrow>\n<mo>−</mo>\n<mi>x</mi>\n</mrow>\n</msup>\n</mrow>\n<mrow>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mi>x</mi>\n</msup>\n<mo>+</mo>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mrow>\n<mo>−</mo>\n<mi>x</mi>\n</mrow>\n</msup>\n</mrow>\n</mfrac>\n<mo>=</mo>\n<mfrac>\n<mrow>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mrow>\n<mn>2</mn>\n<mi>x</mi>\n</mrow>\n</msup>\n<mo>−</mo>\n<mn>1</mn>\n</mrow>\n<mrow>\n<msup>\n<mi mathvariant=\"normal\">e</mi>\n<mrow>\n<mn>2</mn>\n<mi>x</mi>\n</mrow>\n</msup>\n<mo>+</mo>\n<mn>1</mn>\n</mrow>\n</mfrac>\n</mrow>\n<annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.tanh}(x)} = \\tanh(x) = \\frac{\\sinh(x)}{\\cosh(x)} = \\frac{\\mathrm{e}^x - \\mathrm{e}^{-x}}{\\mathrm{e}^x + \\mathrm{e}^{-x}} = \\frac{\\mathrm{e}^{2x} - 1}{\\mathrm{e}^{2x}+1}</annotation>\n</semantics>\n</math>",
      "parameters": {
        "x": "A number."
      },
      "returns": "The hyperbolic tangent of <code>x</code>."
    },
    "math.trunc": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/trunc",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Math.trunc()</code></strong> static method returns the integer part of a number by removing any fractional digits.",
      "parameters": {
        "x": "A number."
      },
      "returns": "The integer part of <code>x</code>."
    },
    "nan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/nan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>NaN</code></strong> global property is a value representing Not-A-Number."
    },
    "number": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<strong><code>Number</code></strong> values represent floating-point numbers like <code>37</code> or <code>-9.25</code>.\n<p>The <code>Number</code> constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the <code>Number()</code> function."
    },
    "number.epsilon": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/epsilon",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "",
        "Firefox": "25",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Number.EPSILON</code></strong> static data property represents the difference between 1 and the smallest floating point number greater than 1."
    },
    "number.isfinite": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isfinite",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "19",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "16",
        "Opera": "15",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Number.isFinite()</code></strong> static method determines whether the passed value is a finite number — that is, it checks that a given value is a number, and the number is neither positive <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>, negative <code>Infinity</code>, nor <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.",
      "parameters": {
        "value": "The value to be tested for finiteness."
      },
      "returns": "The boolean value <code>true</code> if the given value is a finite number. Otherwise <code>false</code>."
    },
    "number.isinteger": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isinteger",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "",
        "Firefox": "16",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Number.isInteger()</code></strong> static method determines whether the passed value is an integer.",
      "parameters": {
        "value": "The value to be tested for being an integer."
      },
      "returns": "The boolean value <code>true</code> if the given value is an integer. Otherwise <code>false</code>."
    },
    "number.isnan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isnan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "25",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "15",
        "Opera": "15",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Number.isNaN()</code></strong> static method determines whether the passed value is the number value <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>, and returns <code>false</code> if the input is not of the Number type. It is a more robust version of the original, global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/isNaN\"><code>isNaN()</code></a> function.",
      "parameters": {
        "value": "The value to be tested for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
      },
      "returns": "The boolean value <code>true</code> if the given value is a number with value <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>. Otherwise, <code>false</code>."
    },
    "number.issafeinteger": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/issafeinteger",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "",
        "Firefox": "32",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Number.isSafeInteger()</code></strong> static method determines whether the provided value is a number that is a <em>safe integer</em>.",
      "parameters": {
        "testValue": "The value to be tested for being a safe integer."
      },
      "returns": "The boolean value <code>true</code> if the given value is a number that is a safe integer. Otherwise <code>false</code>."
    },
    "number.nan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/nan",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Number.NaN</code></strong> static data property represents Not-A-Number, which is equivalent to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>. For more information about the behaviors of <code>NaN</code>, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\">description for the global property</a>."
    },
    "number.number": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/number",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Number()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> objects. When called as a function, it returns primitive values of type Number.",
      "parameters": {
        "value": "The numeric value of the object being created."
      },
      "returns": "When <code>Number</code> is called as a constructor (with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>), it creates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object, which is <strong>not</strong> a primitive.\n<p>When <code>Number</code> is called as a function, it <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">coerces the parameter to a number primitive</a>. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInts</a> are converted to numbers. If the value can't be converted, it returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.\n<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>Warning:</strong> You should rarely find yourself using <code>Number</code> as a constructor.\n</div>"
    },
    "number.parsefloat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/parsefloat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "",
        "Firefox": "25",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Number.parseFloat()</code></strong> static method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.",
      "parameters": {
        "string": "The value to parse, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to a string</a>. Leading <a href=\"$MDN_URL$/Glossary/Whitespace\">whitespace</a> in this argument is ignored."
      },
      "returns": "A floating point number parsed from the given <code>string</code>.\n<p>Or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when the first non-whitespace character cannot be converted to a number."
    },
    "number.parseint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/parseint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "",
        "Firefox": "25",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Number.parseInt()</code></strong> static method parses a string argument and\nreturns an integer of the specified radix or base.",
      "parameters": {
        "string": "The value to parse, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to a string</a>. Leading whitespace in this argument is ignored.",
        "radix": "An integer between <code>2</code> and <code>36</code> that represents the <em>radix</em> (the base in mathematical numeral systems) of the <code>string</code>. <p>If <code>radix</code> is undefined or <code>0</code>, it is assumed to be <code>10</code> except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of <code>16</code> is assumed."
      },
      "returns": "An integer parsed from the given <code>string</code>.\n<p>If the <code>radix</code> is smaller than <code>2</code> or bigger than\n  <code>36</code>, or the first non-whitespace character cannot be converted to a number,\n  <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned."
    },
    "number.toexponential": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/toexponential",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "7",
        "Safari": "2",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toExponential()</code></strong> method returns a string representing\nthe <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object in exponential notation.",
      "parameters": {
        "fractionDigits": "Optional. An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number."
      },
      "returns": "A string representing the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object in exponential notation\n  with one digit before the decimal point, rounded to\n  <code>fractionDigits</code> digits after the decimal point.",
      "throws": {
        "RangeError": "Thrown if <code>fractionDigits</code> is not between <code>1</code> and <code>100</code> (inclusive).",
        "TypeError": "Thrown if this method is invoked on an object that is not a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>."
      }
    },
    "number.tofixed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tofixed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "7",
        "Safari": "2",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toFixed()</code></strong> method formats a number using fixed-point notation.",
      "parameters": {
        "digits": "The number of digits to appear after the decimal point; should be a value between <code>0</code> and <code>100</code>, inclusive. If this argument is omitted, it is treated as <code>0</code>."
      },
      "returns": "A string representing the given number using fixed-point notation.",
      "throws": {
        "RangeError": "Thrown if <code>digits</code> is not between <code>0</code> and <code>100</code> (inclusive).",
        "TypeError": "Thrown if this method is invoked on an object that is not a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>."
      }
    },
    "number.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method returns a string with a language-sensitive representation of this number. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code> API</a> support, this method simply calls <code>Intl.NumberFormat</code>.\n<p>When formatting large numbers of numbers, it is better to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> object and use the function provided by its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\"><code>format()</code></a> method.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor. <p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options\"><code>options</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor. <p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored."
      },
      "returns": "A string with a language-sensitive representation of the given number.\n<p>In implementations with <code>Intl.NumberFormat</code>, this is equivalent to <code>new Intl.NumberFormat(locales, options).format(number)</code>."
    },
    "number.toprecision": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/toprecision",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "7",
        "Safari": "2",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toPrecision()</code></strong> method returns a string representing\nthe <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object to the specified precision.",
      "parameters": {
        "precision": "An integer specifying the number of significant digits."
      },
      "returns": "A string representing a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object in fixed-point or exponential\n  notation rounded to <code>precision</code> significant digits. See the discussion of\n  rounding in the description of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toFixed\"><code>Number.prototype.toFixed()</code></a> method,\n  which also applies to <code>toPrecision()</code>.\n<p>If the <code>precision</code> argument is omitted, behaves as\n  <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString()</code></a>. If the <code>precision</code> argument is a\n  non-integer value, it is rounded to the nearest integer.",
      "throws": {
        "RangeError": "Thrown if <code>precision</code> is not between <code>1</code> and <code>100</code> (inclusive)."
      }
    },
    "number.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the specified number value.",
      "parameters": {
        "radix": "An integer in the range <code>2</code> through <code>36</code> specifying the base to use for representing the number value. Defaults to 10."
      },
      "returns": "A string representing the specified number value.",
      "throws": {
        "RangeError": "Thrown if <code>radix</code> is less than 2 or greater than 36."
      }
    },
    "number.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>valueOf()</code></strong> method returns the wrapped primitive value\nof a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object.",
      "returns": "A number representing the primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object."
    },
    "object": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object</code></strong> type represents one of <a href=\"$MDN_URL$/Web/JavaScript/Data_structures\">JavaScript's data types</a>. It is used to store various keyed collections and more complex entities. Objects can be created using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>Object()</code></a> constructor or the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer / literal syntax</a>."
    },
    "object.__definegetter__": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/__definegetter__",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> This feature is deprecated in favor of defining <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/get\">getters</a> using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer syntax</a> or the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n</div>\n<p>The <strong><code>__defineGetter__()</code></strong> method binds an object's property to a function to be called when that property is looked up.",
      "parameters": {
        "prop": "A string containing the name of the property that the getter <code>func</code> is bound to.",
        "func": "A function to be bound to a lookup of the specified property."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "TypeError": "Thrown if <code>func</code> is not a function."
      }
    },
    "object.__definesetter__": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/__definesetter__",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> This feature is deprecated in favor of defining <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/set\">setters</a> using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer syntax</a> or the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n</div>\n<p>The <strong><code>__defineSetter__()</code></strong> method binds an object's property to a function to be called when an attempt is made to set that property.",
      "parameters": {
        "prop": "A string containing the name of the property that the setter <code>func</code> is bound to.",
        "func": "A function to be called when there is an attempt to set the specified property. This function receives the following parameter: <dl> <dt id=\"val\"><code>val</code></dt> <dd> <p>The value attempted to be assigned to <code>prop</code>. </dd> </dl>"
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "TypeError": "Thrown if <code>func</code> is not a function."
      }
    },
    "object.__lookupgetter__": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/__lookupgetter__",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> This feature is deprecated in favor of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a> API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n</div>\n<p>The <strong><code>__lookupGetter__()</code></strong> method returns the function bound as a getter to the specified property.",
      "parameters": {
        "prop": "A string containing the name of the property whose getter should be returned."
      },
      "returns": "The function bound as a getter to the specified property. Returns <code>undefined</code> if no such property is found, or the property is a <a href=\"$MDN_URL$/Web/JavaScript/Data_structures#data_property\">data property</a>."
    },
    "object.__lookupsetter__": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/__lookupsetter__",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "9.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> This feature is deprecated in favor of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a> API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n</div>\n<p>The <strong><code>__lookupSetter__()</code></strong> method returns the function bound as a setter to the specified property.",
      "parameters": {
        "prop": "A string containing the name of the property whose setter should be returned."
      },
      "returns": "The function bound as a setter to the specified property. Returns <code>undefined</code> if no such property is found, or the property is a <a href=\"$MDN_URL$/Web/JavaScript/Data_structures#data_property\">data property</a>."
    },
    "object.assign": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/assign",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "34",
        "Opera": "32",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.assign()</code></strong> static method\ncopies all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\">enumerable</a>\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\">own properties</a> from one or more\n<em>source objects</em> to a <em>target object</em>. It returns the modified target\nobject.",
      "parameters": {
        "target": "The target object — what to apply the sources' properties to, which is returned after it is modified.",
        "sources": "The source object(s) — objects containing the properties you want to apply."
      },
      "returns": "The target object."
    },
    "object.constructor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/constructor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>constructor</code></strong> data property of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instance returns a reference to the constructor function that created the instance object. Note that the value of this property is a reference to <em>the function itself</em>, not a string containing the function's name.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> This is a property of JavaScript objects. For the <code>constructor</code> method in classes, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Classes/constructor\">its own reference page</a>.\n</div>"
    },
    "object.create": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/create",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.create()</code></strong> static method creates a new object, using an existing object as the prototype of the newly created object.",
      "parameters": {
        "proto": "The object which should be the prototype of the newly-created object.",
        "propertiesObject": "If specified and not <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, an object whose <a href=\"$MDN_URL$/Web/JavaScript/Enumerability_and_ownership_of_properties\">enumerable own properties</a> specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a>."
      },
      "returns": "A new object with the specified prototype object and properties.",
      "throws": {
        "TypeError": "Thrown if <code>proto</code> is neither <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> nor an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>."
      }
    },
    "object.defineproperties": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/defineproperties",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.defineProperties()</code></strong> static method defines new or\nmodifies existing properties directly on an object, returning the object.",
      "parameters": {
        "obj": "The object on which to define or modify properties.",
        "props": "An object whose keys represent the names of properties to be defined or modified and whose values are objects describing those properties. Each value in <code>props</code> must be either a data descriptor or an accessor descriptor; it cannot be both (see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> for more details). <p>Data descriptors and accessor descriptors may optionally contain the following keys: <dl> <dt id=\"configurable\"><code>configurable</code></dt> <dd> <p><code>true</code> if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. <strong>Defaults to <code>false</code>.</strong> </dd> <dt id=\"enumerable\"><code>enumerable</code></dt> <dd> <p><code>true</code> if and only if this property shows up during enumeration of the properties on the corresponding object. <strong>Defaults to <code>false</code>.</strong> </dd> </dl> <p>A data descriptor also has the following optional keys: <dl> <dt id=\"value\"><code>value</code></dt> <dd> <p>The value associated with the property. Can be any valid JavaScript value (number, object, function, etc.). <strong>Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</strong> </dd> <dt id=\"writable\"><code>writable</code></dt> <dd> <p><code>true</code> if and only if the value associated with the property may be changed with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators#assignment_operators\">assignment operator</a>. <strong>Defaults to <code>false</code>.</strong> </dd> </dl> <p>An accessor descriptor also has the following optional keys: <dl> <dt id=\"get\"><code>get</code></dt> <dd> <p>A function which serves as a getter for the property, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if there is no getter. The function's return value will be used as the value of the property. <strong>Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</strong> </dd> <dt id=\"set\"><code>set</code></dt> <dd> <p>A function which serves as a setter for the property, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if there is no setter. The function will receive as its only argument the new value being assigned to the property. <strong>Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</strong> </dd> </dl> <p>If a descriptor has neither of <code>value</code>, <code>writable</code>, <code>get</code> and <code>set</code> keys, it is treated as a data descriptor. If a descriptor has both <code>value</code> or <code>writable</code> and <code>get</code> or <code>set</code> keys, an exception is thrown."
      },
      "returns": "The object that was passed to the function."
    },
    "object.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "6",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.defineProperty()</code></strong> static method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.",
      "parameters": {
        "obj": "The object on which to define the property.",
        "prop": "A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> specifying the key of the property to be defined or modified.",
        "descriptor": "The descriptor for the property being defined or modified."
      },
      "returns": "The object that was passed to the function, with the specified property added or modified."
    },
    "object.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "14",
        "Firefox": "47",
        "Opera": "41",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.entries()</code></strong> static method returns an array of a given object's own enumerable string-keyed property key-value pairs.",
      "parameters": {
        "obj": "An object."
      },
      "returns": "An array of the given object's own enumerable string-keyed property key-value pairs. Each key-value pair is an array with two elements: the first element is the property key (which is always a string), and the second element is the property value."
    },
    "object.freeze": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/freeze",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.freeze()</code></strong> static method <em>freezes</em> an object. Freezing an object <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\">prevents extensions</a> and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. <code>freeze()</code> returns the same object that was passed in.\n<p>Freezing an object is the highest integrity level that JavaScript provides.",
      "parameters": {
        "obj": "The object to freeze."
      },
      "returns": "The object that was passed to the function."
    },
    "object.fromentries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/fromentries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "73",
        "ChromeAndroid": "73",
        "Edge": "79",
        "Firefox": "63",
        "Opera": "60",
        "Safari": "12.1",
        "SafariIOS": "12.2",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.fromEntries()</code></strong> static method transforms a list of key-value pairs into an object.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a>, such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>, containing a list of objects. Each object should have two properties: <dl> <dt id=\"0\"><code>0</code></dt> <dd> <p>A string or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a> representing the property key. </dd> <dt id=\"1\"><code>1</code></dt> <dd> <p>The property value. </dd> </dl> <p>Typically, this object is implemented as a two-element array, with the first element being the property key and the second element being the property value."
      },
      "returns": "A new object whose properties are given by the entries of the iterable."
    },
    "object.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.getOwnPropertyDescriptor()</code></strong> static method returns an\nobject describing the configuration of a specific property on a given object (that is,\none directly present on an object and not in the object's prototype chain). The object\nreturned is mutable but mutating it has no effect on the original property's\nconfiguration.",
      "parameters": {
        "obj": "The object in which to look for the property.",
        "prop": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property whose description is to be retrieved."
      },
      "returns": "A property descriptor of the given property if it exists on the object,\n  <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> otherwise."
    },
    "object.getownpropertydescriptors": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertydescriptors",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "15",
        "Firefox": "50",
        "Opera": "41",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "7.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.getOwnPropertyDescriptors()</code></strong> static method returns all\nown property descriptors of a given object.",
      "parameters": {
        "obj": "The object for which to get all own property descriptors."
      },
      "returns": "An object containing all own property descriptors of an object. Might be an empty\n  object, if there are no properties."
    },
    "object.getownpropertynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertynames",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.getOwnPropertyNames()</code></strong> static method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.",
      "parameters": {
        "obj": "The object whose enumerable and non-enumerable properties are to be returned."
      },
      "returns": "An array of strings that corresponds to the properties found directly in the given object."
    },
    "object.getownpropertysymbols": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertysymbols",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.getOwnPropertySymbols()</code></strong> static method returns an array of all symbol properties found directly upon a given object.",
      "parameters": {
        "obj": "The object whose symbol properties are to be returned."
      },
      "returns": "An array of all symbol properties found directly upon the given object."
    },
    "object.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "12.1",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.getPrototypeOf()</code></strong> static method returns the prototype\n(i.e. the value of the internal <code>[[Prototype]]</code> property) of the specified\nobject.",
      "parameters": {
        "obj": "The object whose prototype is to be returned."
      },
      "returns": "The prototype of the given object, which may be <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>."
    },
    "object.hasown": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/hasown",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "93",
        "ChromeAndroid": "93",
        "Edge": "93",
        "Firefox": "92",
        "Opera": "79",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "16.9.0",
        "Deno": "1.13"
      },
      "doc": "The <strong><code>Object.hasOwn()</code></strong> static method returns <code>true</code> if the specified object has the indicated property as its <em>own</em> property.\nIf the property is inherited, or does not exist, the method returns <code>false</code>.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> <code>Object.hasOwn()</code> is intended as a replacement for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a>.\n</div>",
      "parameters": {
        "obj": "The JavaScript object instance to test.",
        "prop": "The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> of the property to test."
      },
      "returns": "<code>true</code> if the specified object has directly defined the specified property.\n  Otherwise <code>false</code>"
    },
    "object.hasownproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/hasownproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>hasOwnProperty()</code></strong> method returns a boolean indicating whether the\nobject has the specified property as its own property (as opposed to inheriting\nit).\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn()</code></a> is recommended over\n<code>hasOwnProperty()</code>, in browsers where it is supported.\n</div>",
      "parameters": {
        "prop": "The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> of the property to test."
      },
      "returns": "Returns <code>true</code> if the object has the specified property as own property; <code>false</code>\n  otherwise."
    },
    "object.is": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/is",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "19",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "22",
        "Opera": "15",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.is()</code></strong> static method determines whether two values are <a href=\"$MDN_URL$/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is\">the same value</a>.",
      "parameters": {
        "value1": "The first value to compare.",
        "value2": "The second value to compare."
      },
      "returns": "A boolean indicating whether or not the two arguments are the same value."
    },
    "object.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isextensible",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.isExtensible()</code></strong> static method determines if an object\nis extensible (whether it can have new properties added to it).",
      "parameters": {
        "obj": "The object which should be checked."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given object is extensible."
    },
    "object.isfrozen": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isfrozen",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.isFrozen()</code></strong> static method determines if an object is\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/freeze\">frozen</a>.",
      "parameters": {
        "obj": "The object which should be checked."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given object is frozen."
    },
    "object.isprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>isPrototypeOf()</code></strong> method checks if an object exists in another object's prototype chain.\n<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> <code>isPrototypeOf()</code> differs from the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator. In the expression <code>object instanceof AFunction</code>, <code>object</code>'s prototype chain is checked against <code>AFunction.prototype</code>, not against <code>AFunction</code> itself.\n</div>",
      "parameters": {
        "object": "The object whose prototype chain will be searched."
      },
      "returns": "A boolean indicating whether the calling object (<code>this</code>) lies in the prototype chain of <code>object</code>. Directly returns <code>false</code> when <code>object</code> is not an object (i.e. a primitive)."
    },
    "object.issealed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/issealed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.isSealed()</code></strong> static method determines if an object is\nsealed.",
      "parameters": {
        "obj": "The object which should be checked."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given object is sealed."
    },
    "object.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/keys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.keys()</code></strong> static method returns an array of a given object's own enumerable string-keyed property names.",
      "parameters": {
        "obj": "An object."
      },
      "returns": "An array of strings representing the given object's own enumerable string-keyed property keys."
    },
    "object.object": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/object",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object()</code></strong> constructor turns the input into an object. Its behavior depends on the input's type.",
      "parameters": {
        "value": "Any value."
      },
      "returns": "When the <code>Object()</code> constructor itself is called or constructed, its return value is an object:\n<ul>\n  <li>If the value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, it creates and returns an empty object.</li>\n  <li>If the value is an object already, it returns the value.</li>\n  <li>Otherwise, it returns an object of a type that corresponds to the given value. For example, passing a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> primitive returns a <code>BigInt</code> wrapper object.</li>\n</ul>\n<p>When <code>Object()</code> is implicitly called via <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/super\"><code>super()</code></a> in the constructor of a class that <a href=\"$MDN_URL$/Web/JavaScript/Reference/Classes/extends#extending_object\">extends <code>Object</code></a>, it initializes a new object with <code>new.target.prototype</code> as its prototype. Any value passed to <code>super()</code> is ignored — for example, even if you pass a number, the <code>this</code> value inside the constructor does not become a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> instance."
    },
    "object.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.preventExtensions()</code></strong> static method prevents new\nproperties from ever being added to an object (i.e. prevents future extensions to the\nobject). It also prevents the object's prototype from being re-assigned.",
      "parameters": {
        "obj": "The object which should be made non-extensible."
      },
      "returns": "The object being made non-extensible."
    },
    "object.propertyisenumerable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/propertyisenumerable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>propertyIsEnumerable()</code></strong> method returns a boolean indicating whether the specified property is the object's <a href=\"$MDN_URL$/Web/JavaScript/Enumerability_and_ownership_of_properties\">enumerable own</a> property.",
      "parameters": {
        "prop": "The name of the property to test. Can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>."
      },
      "returns": "A boolean value indicating whether the specified property is enumerable and is the object's own property."
    },
    "object.proto": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/proto",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "10.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard warning\" id=\"sect2\">\n<p><strong>Warning:</strong> Changing the <code>[[Prototype]]</code> of an object is, by the nature of how modern JavaScript engines optimize property accesses, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to the time spent in the <code>obj.__proto__ = ...</code> statement, but may extend to <strong><em>any</em></strong> code that has access to any object whose <code>[[Prototype]]</code> has been altered. You can read more in <a href=\"https://mathiasbynens.be/notes/prototypes\" class=\"external\" target=\"_blank\">JavaScript engine fundamentals: optimizing prototypes</a>.\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n<p><strong>Note:</strong> The use of <code>__proto__</code> is controversial and discouraged. Its existence and exact behavior have only been standardized as a legacy feature to ensure web compatibility, while it presents several security issues and footguns. For better support, prefer <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>/<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf\"><code>Reflect.getPrototypeOf()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>/<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf\"><code>Reflect.setPrototypeOf()</code></a> instead.\n</div>\n<p>The <strong><code>__proto__</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances exposes the <a href=\"$MDN_URL$/Web/JavaScript/Inheritance_and_the_prototype_chain\"><code>[[Prototype]]</code></a> (either an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>) of this object.\n<p>The <code>__proto__</code> property can also be used in an object literal definition to set the object <code>[[Prototype]]</code> on creation, as an alternative to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>. See: <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer / literal syntax</a>. That syntax is standard and optimized for in implementations, and quite different from <code>Object.prototype.__proto__</code>.",
      "returns": "If used as a getter, returns the object's <code>[[Prototype]]</code>.",
      "throws": {
        "TypeError": "Thrown if attempting to set the prototype of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\">non-extensible</a> object or an <a href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-immutable-prototype-exotic-objects\" class=\"external\" target=\"_blank\">immutable prototype exotic object</a>, such as <code>Object.prototype</code> or <a href=\"$MDN_URL$/Web/API/Window\"><code>window</code></a>."
      }
    },
    "object.seal": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/seal",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "6",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.seal()</code></strong> static method <em>seals</em> an object. Sealing an object <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\">prevents extensions</a> and makes existing properties non-configurable. A sealed object has a fixed set of properties: new properties cannot be added, existing properties cannot be removed, their enumerability and configurability cannot be changed, and its prototype cannot be re-assigned. Values of existing properties can still be changed as long as they are writable. <code>seal()</code> returns the same object that was passed in.",
      "parameters": {
        "obj": "The object which should be sealed."
      },
      "returns": "The object being sealed."
    },
    "object.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "",
        "Firefox": "31",
        "Opera": "21",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.setPrototypeOf()</code></strong> static method sets the prototype (i.e., the internal <code>[[Prototype]]</code> property) of a specified object to another object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>.\n<div class=\"notecard warning\" id=\"sect1\">\n<p><strong>Warning:</strong> Changing the <code>[[Prototype]]</code> of an object is, by the nature of how modern JavaScript engines optimize property accesses, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to the time spent in the <code>Object.setPrototypeOf(...)</code> statement, but may extend to <strong><em>any</em></strong> code that has access to any object whose <code>[[Prototype]]</code> has been altered. You can read more in <a href=\"https://mathiasbynens.be/notes/prototypes\" class=\"external\" target=\"_blank\">JavaScript engine fundamentals: optimizing prototypes</a>.\n<p>Because this feature is a part of the language, it is still the burden on engine developers to implement that feature performantly (ideally). Until engine developers address this issue, if you are concerned about performance, you should avoid setting the <code>[[Prototype]]</code> of an object. Instead, create a new object with the desired <code>[[Prototype]]</code> using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>.\n</div>",
      "parameters": {
        "obj": "The object which is to have its prototype set.",
        "prototype": "The object's new prototype (an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>)."
      },
      "returns": "The specified object.",
      "throws": {
        "TypeError": "Thrown if one of the following conditions is met: <ul> <li>The <code>obj</code> parameter is <code>undefined</code> or <code>null</code>.</li> <li>The <code>obj</code> parameter is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\">non-extensible</a>, or it's an <a href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-immutable-prototype-exotic-objects\" class=\"external\" target=\"_blank\">immutable prototype exotic object</a>, such as <code>Object.prototype</code> or <a href=\"$MDN_URL$/Web/API/Window\"><code>window</code></a>. However, the error is not thrown if the new prototype is the same value as the original prototype of <code>obj</code>.</li> <li>The <code>prototype</code> parameter is not an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>.</li> </ul>"
      }
    },
    "object.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.",
      "returns": "The return value of calling <code>this.toString()</code>."
    },
    "object.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the object. This method is meant to be overridden by derived objects for custom <a href=\"$MDN_URL$/Web/JavaScript/Data_structures#type_coercion\">type conversion</a> logic.",
      "returns": "A string representing the object."
    },
    "object.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>valueOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> instances converts the <code>this</code> value <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#object_coercion\">to an object</a>. This method is meant to be overridden by derived objects for custom <a href=\"$MDN_URL$/Web/JavaScript/Data_structures#type_coercion\">type conversion</a> logic.",
      "returns": "The <code>this</code> value, converted to an object.\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> In order for <code>valueOf</code> to be useful during type conversion, it must return a primitive. Because all primitive types have their own <code>valueOf()</code> methods, calling <code>aPrimitiveValue.valueOf()</code> generally does not invoke <code>Object.prototype.valueOf()</code>.\n</div>"
    },
    "object.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "14",
        "Firefox": "47",
        "Opera": "41",
        "Safari": "10.1",
        "SafariIOS": "10.3",
        "Nodejs": "7.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Object.values()</code></strong> static method returns an array of a given object's own enumerable string-keyed property values.",
      "parameters": {
        "obj": "An object."
      },
      "returns": "An array containing the given object's own enumerable string-keyed property values."
    },
    "parsefloat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/parsefloat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>parseFloat()</code></strong> function parses a string argument and returns a floating point number.",
      "parameters": {
        "string": "The value to parse, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to a string</a>. Leading <a href=\"$MDN_URL$/Glossary/Whitespace\">whitespace</a> in this argument is ignored."
      },
      "returns": "A floating point number parsed from the given <code>string</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when the first non-whitespace character cannot be converted to a number.\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> JavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a> and <code>parseFloat()</code> only differ in their parsing behavior, but not necessarily their return values. For example, <code>parseInt(\"42\")</code> and <code>parseFloat(\"42\")</code> would return the same value: a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> 42.\n</div>"
    },
    "parseint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/parseint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>parseInt()</code></strong> function parses a string argument and returns an integer of the specified <a href=\"https://en.wikipedia.org/wiki/Radix\" class=\"external\" target=\"_blank\">radix</a> (the base in mathematical numeral systems).",
      "parameters": {
        "string": "A string starting with an integer. Leading <a href=\"$MDN_URL$/Glossary/Whitespace\">whitespace</a> in this argument is ignored.",
        "radix": "An integer between <code>2</code> and <code>36</code> that represents the <em>radix</em> (the base in mathematical numeral systems) of the <code>string</code>. It is converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion\">32-bit integer</a>; if it's nonzero and outside the range of [2, 36] after conversion, the function will always return <code>NaN</code>. If <code>0</code> or not provided, the radix will be inferred based on <code>string</code>'s value. Be careful — this does <em>not</em> always default to <code>10</code>! The <a href=\"#description\">description below</a> explains in more detail what happens when <code>radix</code> is not provided."
      },
      "returns": "An integer parsed from the given <code>string</code>, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when\n<ul>\n  <li>the <code>radix</code> as a 32-bit integer is smaller than <code>2</code> or bigger than <code>36</code>, or</li>\n  <li>the first non-whitespace character cannot be converted to a number.</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> JavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. <code>parseInt()</code> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/parseFloat\"><code>parseFloat()</code></a> only differ in their parsing behavior, but not necessarily their return values. For example, <code>parseInt(\"42\")</code> and <code>parseFloat(\"42\")</code> would return the same value: a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> 42.\n</div>"
    },
    "promise": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "",
        "Firefox": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Promise</code></strong> object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n<p>To learn about the way promises work and how you can use them, we advise you to read <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises\">Using promises</a> first."
    },
    "promise.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/@@species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "79",
        "Firefox": "48",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Promise[@@species]</code></strong> static accessor property returns the constructor used to construct return values from promise methods.\n<div class=\"notecard warning\" id=\"sect1\">\n<p><strong>Warning:</strong> The existence of <code>@@species</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get @@species</code> was called. The return value is used to construct return values from promise chaining methods that create new promises."
    },
    "promise.all": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/all",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "",
        "Firefox": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Promise.all()</code></strong> static method takes an iterable of promises as input and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises rejects, with this first rejection reason.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) of promises."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is:\n<ul>\n  <li><strong>Already fulfilled</strong>, if the <code>iterable</code> passed is empty.</li>\n  <li><strong>Asynchronously fulfilled</strong>, when all the promises in the given <code>iterable</code> fulfill. The fulfillment value is an array of fulfillment values, in the order of the promises passed, regardless of completion order. If the <code>iterable</code> passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) fulfilled.</li>\n  <li><strong>Asynchronously rejected</strong>, when any of the promises in the given <code>iterable</code> rejects. The rejection reason is the rejection reason of the first promise that was rejected.</li>\n</ul>"
    },
    "promise.allsettled": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/allsettled",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "76",
        "ChromeAndroid": "76",
        "Edge": "79",
        "Firefox": "71",
        "Opera": "63",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "12.9.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Promise.allSettled()</code></strong> static method takes an iterable of promises as input and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) of promises."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is:\n<ul>\n  <li><strong>Already fulfilled</strong>, if the <code>iterable</code> passed is empty.</li>\n  <li><strong>Asynchronously fulfilled</strong>, when all promises in the given <code>iterable</code> have settled (either fulfilled or rejected). The fulfillment value is an array of objects, each describing the outcome of one promise in the <code>iterable</code>, in the order of the promises passed, regardless of completion order. Each outcome object has the following properties:\n    <dl>\n      <dt id=\"status\"><code>status</code></dt>\n      <dd>\n        <p>A string, either <code>\"fulfilled\"</code> or <code>\"rejected\"</code>, indicating the eventual state of the promise.\n      </dd>\n      <dt id=\"value\"><code>value</code></dt>\n      <dd>\n        <p>Only present if <code>status</code> is <code>\"fulfilled\"</code>. The value that the promise was fulfilled with.\n      </dd>\n      <dt id=\"reason\"><code>reason</code></dt>\n      <dd>\n        <p>Only present if <code>status</code> is <code>\"rejected\"</code>. The reason that the promise was rejected with.\n      </dd>\n    </dl>If the <code>iterable</code> passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) fulfilled.\n  </li>\n</ul>"
    },
    "promise.any": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/any",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "79",
        "Opera": "71",
        "Safari": "14",
        "SafariIOS": "14",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "doc": "The <strong><code>Promise.any()</code></strong> static method takes an iterable of promises as input and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a> containing an array of rejection reasons.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) of promises."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is:\n<ul>\n  <li><strong>Already rejected</strong>, if the <code>iterable</code> passed is empty.</li>\n  <li><strong>Asynchronously fulfilled</strong>, when any of the promises in the given <code>iterable</code> fulfills. The fulfillment value is the fulfillment value of the first promise that was fulfilled.</li>\n  <li><strong>Asynchronously rejected</strong>, when all of the promises in the given <code>iterable</code> reject. The rejection reason is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a> containing an array of rejection reasons in its <code>errors</code> property. The errors are in the order of the promises passed, regardless of completion order. If the <code>iterable</code> passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) rejected.</li>\n</ul>"
    },
    "promise.catch": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/catch",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "",
        "Firefox": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>catch()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> instances schedules a function to be called when the promise is rejected. It immediately returns an equivalent <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object, allowing you to <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises#chaining\">chain</a> calls to other promise methods. It is a shortcut for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>Promise.prototype.then(undefined, onRejected)</code></a>.",
      "parameters": {
        "onRejected": "A function to asynchronously execute when this promise becomes rejected. Its return value becomes the fulfillment value of the promise returned by <code>catch()</code>. The function is called with the following arguments: <dl> <dt id=\"reason\"><code>reason</code></dt> <dd> <p>The value that the promise was rejected with. </dd> </dl>"
      },
      "returns": "Returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This new promise is always pending when returned, regardless of the current promise's status. It's eventually rejected if <code>onRejected</code> throws an error or returns a Promise which is itself rejected; otherwise, it's eventually fulfilled."
    },
    "promise.finally": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/finally",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "18",
        "Firefox": "58",
        "Opera": "50",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>finally()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> instances schedules a function to be called when the promise is settled (either fulfilled or rejected). It immediately returns an equivalent <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object, allowing you to <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises#chaining\">chain</a> calls to other promise methods.\n<p>This lets you avoid duplicating code in both the promise's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>then()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>catch()</code></a> handlers.",
      "parameters": {
        "onFinally": "A function to asynchronously execute when this promise becomes settled. Its return value is ignored unless the returned value is a rejected promise. The function is called with no arguments."
      },
      "returns": "Returns an equivalent <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. If the handler throws an error or returns a rejected promise, the promise returned by <code>finally()</code> will be rejected with that value instead. Otherwise, the return value of the handler does not affect the state of the original promise."
    },
    "promise.promise": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/promise",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "",
        "Firefox": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Promise()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> objects. It is primarily used to wrap callback-based APIs that do not already support promises.",
      "parameters": {
        "executor": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>function</code></a> to be executed by the constructor. It receives two functions as parameters: <code>resolveFunc</code> and <code>rejectFunc</code>. Any errors thrown in the <code>executor</code> will cause the promise to be rejected, and the return value will be neglected. The semantics of <code>executor</code> are detailed below."
      },
      "returns": "When called via <code>new</code>, the <code>Promise</code> constructor returns a promise object. The promise object will become <em>resolved</em> when either of the functions <code>resolveFunc</code> or <code>rejectFunc</code> are invoked. Note that if you call <code>resolveFunc</code> or <code>rejectFunc</code> and pass another <code>Promise</code> object as an argument, it can be said to be \"resolved\", but still not \"settled\". See the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise#description\">Promise description</a> for more explanation."
    },
    "promise.race": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/race",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "",
        "Firefox": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Promise.race()</code></strong> static method takes an iterable of promises as input and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. This returned promise settles with the eventual state of the first promise that settles.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> (such as an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) of promises."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that <strong>asynchronously settles</strong> with the eventual state of the first promise in the <code>iterable</code> to settle. In other words, it fulfills if the first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever if the <code>iterable</code> passed is empty. If the <code>iterable</code> passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) settled."
    },
    "promise.reject": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/reject",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "",
        "Firefox": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Promise.reject()</code></strong> static method returns a <code>Promise</code> object that is rejected with a given reason.",
      "parameters": {
        "reason": "Reason why this <code>Promise</code> rejected."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is rejected with the given reason."
    },
    "promise.resolve": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/resolve",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "",
        "Firefox": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Promise.resolve()</code></strong> static method \"resolves\" a given value to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. If the value is a promise, that promise is returned; if the value is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise#thenables\">thenable</a>, <code>Promise.resolve()</code> will call the <code>then()</code> method with two callbacks it prepared; otherwise the returned promise will be fulfilled with the value.\n<p>This function flattens nested layers of promise-like objects (e.g. a promise that fulfills to a promise that fulfills to something) into a single layer — a promise that fulfills to a non-thenable value.",
      "parameters": {
        "value": "Argument to be resolved by this <code>Promise</code>. Can also be a <code>Promise</code> or a thenable to resolve."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is resolved with the given value, or the promise passed as value, if the value was a promise object. A resolved promise can be in any of the states — fulfilled, rejected, or pending. For example, resolving a rejected promise will still result in a rejected promise."
    },
    "promise.then": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/then",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "32",
        "ChromeAndroid": "32",
        "Edge": "",
        "Firefox": "29",
        "Opera": "19",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>then()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> instances takes up to two arguments: callback functions for the fulfilled and rejected cases of the <code>Promise</code>. It immediately returns an equivalent <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object, allowing you to <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises#chaining\">chain</a> calls to other promise methods.",
      "parameters": {
        "onFulfilled": "A function to asynchronously execute when this promise becomes fulfilled. Its return value becomes the fulfillment value of the promise returned by <code>then()</code>. The function is called with the following arguments: <dl> <dt id=\"value\"><code>value</code></dt> <dd> <p>The value that the promise was fulfilled with. </dd> </dl> <p>If it is not a function, it is internally replaced with an <em>identity</em> function (<code>(x) =&gt; x</code>) which simply passes the fulfillment value forward.",
        "onRejected": "A function to asynchronously execute when this promise becomes rejected. Its return value becomes the fulfillment value of the promise returned by <code>catch()</code>. The function is called with the following arguments: <dl> <dt id=\"reason\"><code>reason</code></dt> <dd> <p>The value that the promise was rejected with. </dd> </dl> <p>If it is not a function, it is internally replaced with a <em>thrower</em> function (<code>(x) =&gt; { throw x; }</code>) which throws the rejection reason it received."
      },
      "returns": "Returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> immediately. This new promise is always pending when returned, regardless of the current promise's status.\n<p>One of the <code>onFulfilled</code> and <code>onRejected</code> handlers will be executed to handle the current promise's fulfillment or rejection. The call always happens asynchronously, even when the current promise is already settled. The behavior of the returned promise (call it <code>p</code>) depends on the handler's execution result, following a specific set of rules. If the handler function:\n<ul>\n  <li>returns a value: <code>p</code> gets fulfilled with the returned value as its value.</li>\n  <li>doesn't return anything: <code>p</code> gets fulfilled with <code>undefined</code> as its value.</li>\n  <li>throws an error: <code>p</code> gets rejected with the thrown error as its value.</li>\n  <li>returns an already fulfilled promise: <code>p</code> gets fulfilled with that promise's value as its value.</li>\n  <li>returns an already rejected promise: <code>p</code> gets rejected with that promise's value as its value.</li>\n  <li>returns another pending promise: <code>p</code> is pending and becomes fulfilled/rejected with that promise's value as its value immediately after that promise becomes fulfilled/rejected.</li>\n</ul>"
    },
    "proxy": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Proxy</code></strong> object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object."
    },
    "proxy.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/apply",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.apply()</code></strong> method is a trap for the <code>[[Call]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as function calls.",
      "parameters": {
        "target": "The target callable object.",
        "thisArg": "The <code>this</code> argument for the call.",
        "argumentsList": "The list of arguments for the call."
      },
      "returns": "The <code>apply()</code> method can return any value."
    },
    "proxy.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/construct",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.construct()</code></strong> method is a trap for the <code>[[Construct]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself be a valid constructor.",
      "parameters": {
        "target": "The target object.",
        "argumentsList": "The list of arguments for the constructor.",
        "newTarget": "The constructor that was originally called."
      },
      "returns": "The <code>construct</code> method must return an object."
    },
    "proxy.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.defineProperty()</code></strong> method is a trap for the <code>[[DefineOwnProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "property": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property whose description is to be retrieved.",
        "descriptor": "The descriptor for the property being defined or modified."
      },
      "returns": "The <code>defineProperty()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating\n  whether or not the property has been successfully defined."
    },
    "proxy.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/deleteproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.deleteProperty()</code></strong> method is a trap for the <code>[[Delete]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator.",
      "parameters": {
        "target": "The target object.",
        "property": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property to delete."
      },
      "returns": "The <code>deleteProperty()</code> method must return a boolean value indicating\n  whether or not the property has been successfully deleted."
    },
    "proxy.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/get",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.get()</code></strong> method is a trap for the <code>[[Get]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessors</a>.",
      "parameters": {
        "target": "The target object.",
        "property": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property to get.",
        "receiver": "Either the proxy or an object that inherits from the proxy."
      },
      "returns": "The <code>get()</code> method can return any value."
    },
    "proxy.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.getOwnPropertyDescriptor()</code></strong> method is a trap for the <code>[[GetOwnProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "prop": "The name of the property whose description should be retrieved."
      },
      "returns": "The <code>getOwnPropertyDescriptor()</code> method must return an object or <code>undefined</code>."
    },
    "proxy.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "79",
        "Firefox": "49",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.getPrototypeOf()</code></strong> method is a trap for the <code>[[GetPrototypeOf]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>getPrototypeOf()</code> method must return an object or <code>null</code>."
    },
    "proxy.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.has()</code></strong> method is a trap for the <code>[[HasProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> operator.",
      "parameters": {
        "target": "The target object.",
        "prop": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property to check for existence."
      },
      "returns": "The <code>has()</code> method must return a boolean value."
    },
    "proxy.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/isextensible",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "31",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.isExtensible()</code></strong> method is a trap for the <code>[[IsExtensible]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>isExtensible()</code> method must return a boolean value."
    },
    "proxy.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/ownkeys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.ownKeys()</code></strong> method is a trap for the <code>[[OwnPropertyKeys]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\"><code>Reflect.ownKeys()</code></a>, etc.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>ownKeys()</code> method must return an enumerable object."
    },
    "proxy.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "22",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.preventExtensions()</code></strong> method is a trap for the <code>[[PreventExtensions]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>preventExtensions()</code> method must return a boolean value."
    },
    "proxy.proxy": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Proxy()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a> objects.",
      "parameters": {
        "target": "A target object to wrap with <code>Proxy</code>. It can be any sort of object, including a native array, a function, or even another proxy.",
        "handler": "An object whose properties are functions that define the behavior of the proxy when an operation is performed on it."
      }
    },
    "proxy.proxy.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/apply",
      "doc": "The <strong><code>handler.apply()</code></strong> method is a trap for the <code>[[Call]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as function calls.",
      "parameters": {
        "target": "The target callable object.",
        "thisArg": "The <code>this</code> argument for the call.",
        "argumentsList": "The list of arguments for the call."
      },
      "returns": "The <code>apply()</code> method can return any value."
    },
    "proxy.proxy.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/construct",
      "doc": "The <strong><code>handler.construct()</code></strong> method is a trap for the <code>[[Construct]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself be a valid constructor.",
      "parameters": {
        "target": "The target object.",
        "argumentsList": "The list of arguments for the constructor.",
        "newTarget": "The constructor that was originally called."
      },
      "returns": "The <code>construct</code> method must return an object."
    },
    "proxy.proxy.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/defineproperty",
      "doc": "The <strong><code>handler.defineProperty()</code></strong> method is a trap for the <code>[[DefineOwnProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "property": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property whose description is to be retrieved.",
        "descriptor": "The descriptor for the property being defined or modified."
      },
      "returns": "The <code>defineProperty()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating\n  whether or not the property has been successfully defined."
    },
    "proxy.proxy.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/deleteproperty",
      "doc": "The <strong><code>handler.deleteProperty()</code></strong> method is a trap for the <code>[[Delete]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator.",
      "parameters": {
        "target": "The target object.",
        "property": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property to delete."
      },
      "returns": "The <code>deleteProperty()</code> method must return a boolean value indicating\n  whether or not the property has been successfully deleted."
    },
    "proxy.proxy.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/get",
      "doc": "The <strong><code>handler.get()</code></strong> method is a trap for the <code>[[Get]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessors</a>.",
      "parameters": {
        "target": "The target object.",
        "property": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property to get.",
        "receiver": "Either the proxy or an object that inherits from the proxy."
      },
      "returns": "The <code>get()</code> method can return any value."
    },
    "proxy.proxy.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getownpropertydescriptor",
      "doc": "The <strong><code>handler.getOwnPropertyDescriptor()</code></strong> method is a trap for the <code>[[GetOwnProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "prop": "The name of the property whose description should be retrieved."
      },
      "returns": "The <code>getOwnPropertyDescriptor()</code> method must return an object or <code>undefined</code>."
    },
    "proxy.proxy.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getprototypeof",
      "doc": "The <strong><code>handler.getPrototypeOf()</code></strong> method is a trap for the <code>[[GetPrototypeOf]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>getPrototypeOf()</code> method must return an object or <code>null</code>."
    },
    "proxy.proxy.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/has",
      "doc": "The <strong><code>handler.has()</code></strong> method is a trap for the <code>[[HasProperty]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> operator.",
      "parameters": {
        "target": "The target object.",
        "prop": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property to check for existence."
      },
      "returns": "The <code>has()</code> method must return a boolean value."
    },
    "proxy.proxy.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/isextensible",
      "doc": "The <strong><code>handler.isExtensible()</code></strong> method is a trap for the <code>[[IsExtensible]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>isExtensible()</code> method must return a boolean value."
    },
    "proxy.proxy.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/ownkeys",
      "doc": "The <strong><code>handler.ownKeys()</code></strong> method is a trap for the <code>[[OwnPropertyKeys]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\"><code>Reflect.ownKeys()</code></a>, etc.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>ownKeys()</code> method must return an enumerable object."
    },
    "proxy.proxy.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/preventextensions",
      "doc": "The <strong><code>handler.preventExtensions()</code></strong> method is a trap for the <code>[[PreventExtensions]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>.",
      "parameters": {
        "target": "The target object."
      },
      "returns": "The <code>preventExtensions()</code> method must return a boolean value."
    },
    "proxy.proxy.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/set",
      "doc": "The <strong><code>handler.set()</code></strong> method is a trap for the <code>[[Set]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessors</a> to set a property's value.",
      "parameters": {
        "target": "The target object.",
        "property": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property to set.",
        "value": "The new value of the property to set.",
        "receiver": "The object to which the assignment was originally directed. This is usually the proxy itself. But a <code>set()</code> handler can also be called indirectly, via the prototype chain or various other ways. <p>For example, suppose a script does <code>obj.name = \"jen\"</code>, and <code>obj</code> is not a proxy, and has no own property <code>.name</code>, but it has a proxy on its prototype chain. That proxy's <code>set()</code> handler will be called, and <code>obj</code> will be passed as the receiver."
      },
      "returns": "The <code>set()</code> method should return a boolean value.\n<ul>\n  <li>Return <code>true</code> to indicate that assignment succeeded.</li>\n  <li>\n    If the <code>set()</code> method returns <code>false</code>, and the assignment\n    happened in strict-mode code, a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> will be thrown.\n  </li>\n</ul>"
    },
    "proxy.proxy.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/setprototypeof",
      "doc": "The <strong><code>handler.setPrototypeOf()</code></strong> method is a trap for the <code>[[SetPrototypeOf]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "prototype": "The object's new prototype or <code>null</code>."
      },
      "returns": "The <code>setPrototypeOf()</code> method returns <code>true</code> if the\n  <code>[[Prototype]]</code> was successfully changed, otherwise <code>false</code>."
    },
    "proxy.revocable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/revocable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "",
        "Firefox": "34",
        "Opera": "50",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Proxy.revocable()</code></strong> static method creates a revocable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a> object.",
      "parameters": {
        "target": "A target object to wrap with <code>Proxy</code>. It can be any sort of object, including a native array, a function, or even another proxy.",
        "handler": "An object whose properties are functions defining the behavior of <code>proxy</code> when an operation is performed on it."
      },
      "returns": "A plain object with the following two properties:\n<dl>\n  <dt id=\"proxy\"><code>proxy</code></dt>\n  <dd>\n    <p>A Proxy object exactly the same as one created with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy\"><code>new Proxy(target, handler)</code></a> call.\n  </dd>\n  <dt id=\"revoke\"><code>revoke</code></dt>\n  <dd>\n    <p>A function with no parameters to revoke (switch off) the <code>proxy</code>.\n  </dd>\n</dl>"
    },
    "proxy.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "18",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.set()</code></strong> method is a trap for the <code>[[Set]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessors</a> to set a property's value.",
      "parameters": {
        "target": "The target object.",
        "property": "The name or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> of the property to set.",
        "value": "The new value of the property to set.",
        "receiver": "The object to which the assignment was originally directed. This is usually the proxy itself. But a <code>set()</code> handler can also be called indirectly, via the prototype chain or various other ways. <p>For example, suppose a script does <code>obj.name = \"jen\"</code>, and <code>obj</code> is not a proxy, and has no own property <code>.name</code>, but it has a proxy on its prototype chain. That proxy's <code>set()</code> handler will be called, and <code>obj</code> will be passed as the receiver."
      },
      "returns": "The <code>set()</code> method should return a boolean value.\n<ul>\n  <li>Return <code>true</code> to indicate that assignment succeeded.</li>\n  <li>\n    If the <code>set()</code> method returns <code>false</code>, and the assignment\n    happened in strict-mode code, a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> will be thrown.\n  </li>\n</ul>"
    },
    "proxy.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "49",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>handler.setPrototypeOf()</code></strong> method is a trap for the <code>[[SetPrototypeOf]]</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods\">object internal method</a>, which is used by operations such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>.",
      "parameters": {
        "target": "The target object.",
        "prototype": "The object's new prototype or <code>null</code>."
      },
      "returns": "The <code>setPrototypeOf()</code> method returns <code>true</code> if the\n  <code>[[Prototype]]</code> was successfully changed, otherwise <code>false</code>."
    },
    "rangeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/rangeerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>RangeError</code></strong> object indicates an error when a value is not in the set or range of allowed values."
    },
    "rangeerror.rangeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/rangeerror/rangeerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>RangeError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties: <dl> <dt id=\"cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. </dd> </dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "referenceerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/referenceerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>ReferenceError</code></strong> object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.\n<p><code>ReferenceError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/structuredClone\"><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>ReferenceError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "referenceerror.referenceerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/referenceerror/referenceerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>ReferenceError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties: <dl> <dt id=\"cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. </dd> </dl>",
        "fileName": "The name of the file containing the code that caused the exception.",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "reflect": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect</code></strong> namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy\">proxy handlers</a>."
    },
    "reflect.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/apply",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.apply()</code></strong> static method calls a target function with arguments as specified.",
      "parameters": {
        "target": "The target function to call.",
        "thisArgument": "The value of <code>this</code> provided for the call to <code>target</code>.",
        "argumentsList": "An <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like object</a> specifying the arguments with which <code>target</code> should be called."
      },
      "returns": "The result of calling the given <code>target</code> function with the specified <code>this</code> value and arguments.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not a function or <code>argumentsList</code> is not an object."
      }
    },
    "reflect.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/construct",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.construct()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator, but as a function. It is equivalent to calling <code>new target(...args)</code>. It gives also the added option to specify a different <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a> value.",
      "parameters": {
        "target": "The target function to call.",
        "argumentsList": "An <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\">array-like object</a> specifying the arguments with which <code>target</code> should be called.",
        "newTarget": "The value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a> operator, which usually specifies the prototype of the returned object. If <code>newTarget</code> is not present, its value defaults to <code>target</code>."
      },
      "returns": "A new instance of <code>target</code> (or <code>newTarget</code>, if present), initialized by <code>target</code> as a constructor with the given <code>argumentsList</code>.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> or <code>newTarget</code> is not a constructor, or if <code>argumentsList</code> is not an object."
      }
    },
    "reflect.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.defineProperty()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> but returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>.",
      "parameters": {
        "target": "The target object on which to define the property.",
        "propertyKey": "The name of the property to be defined or modified.",
        "attributes": "The attributes for the property being defined or modified."
      },
      "returns": "A boolean indicating whether or not the property was successfully defined.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> or <code>attributes</code> is not an object."
      }
    },
    "reflect.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/deleteproperty",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.deleteProperty()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator, but as a function. It deletes a property from an object.",
      "parameters": {
        "target": "The target object on which to delete the property.",
        "propertyKey": "The name of the property to be deleted."
      },
      "returns": "A boolean indicating whether or not the property was successfully deleted.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/get",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.get()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessor</a> syntax, but as a function.",
      "parameters": {
        "target": "The target object on which to get the property.",
        "propertyKey": "The name of the property to get.",
        "receiver": "The value of <code>this</code> provided for the call to <code>target</code> if a getter is encountered."
      },
      "returns": "The value of the property.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.getOwnPropertyDescriptor()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>. It returns a property descriptor of the given property if it exists on the object, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> otherwise.",
      "parameters": {
        "target": "The target object in which to look for the property.",
        "propertyKey": "The name of the property to get an own property descriptor for."
      },
      "returns": "A property descriptor object if the property exists as an own property of <code>target</code>; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.getPrototypeOf()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>. It returns the prototype of the specified object.",
      "parameters": {
        "target": "The target object of which to get the prototype."
      },
      "returns": "The prototype of the given object, which may be an object or <code>null</code>.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.has()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> operator, but\nas a function.",
      "parameters": {
        "target": "The target object in which to look for the property.",
        "propertyKey": "The name of the property to check."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the <code>target</code> has the property.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/isextensible",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.isExtensible()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>. It determines if an object is extensible (whether it can have new properties added to it).",
      "parameters": {
        "target": "The target object which to check if it is extensible."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the target is extensible.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/ownkeys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.ownKeys()</code></strong> static method returns an array of the <code>target</code> object's own property keys.",
      "parameters": {
        "target": "The target object from which to get the own keys."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of the <code>target</code> object's own property keys, including strings and symbols. For most objects, the array will be in the order of:\n<ol>\n  <li>Non-negative integer indexes in increasing numeric order (but as strings)</li>\n  <li>Other string keys in the order of property creation</li>\n  <li>Symbol keys in the order of property creation.</li>\n</ol>",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.preventExtensions()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>. It prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).",
      "parameters": {
        "target": "The target object on which to prevent extensions."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the target was successfully set to prevent extensions.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.set()</code></strong> static method is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors\">property accessor</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Assignment\">assignment</a> syntax, but as a function.",
      "parameters": {
        "target": "The target object on which to set the property.",
        "propertyKey": "The name of the property to set.",
        "value": "The value to set.",
        "receiver": "The value of <code>this</code> provided for the call to the setter for <code>propertyKey</code> on <code>target</code>. If provided and <code>target</code> does not have a setter for <code>propertyKey</code>, the property will be set on <code>receiver</code> instead."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not setting the property was successful.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object."
      }
    },
    "reflect.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "",
        "Firefox": "42",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Reflect.setPrototypeOf()</code></strong> static method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a> but returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>. It sets the prototype (i.e., the internal <code>[[Prototype]]</code> property) of a specified object.",
      "parameters": {
        "target": "The target object of which to set the prototype.",
        "prototype": "The object's new prototype (an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>)."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the prototype was successfully set.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object or if <code>prototype</code> is neither an object nor <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>."
      }
    },
    "regexp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>RegExp</code></strong> object is used for matching text with a pattern.\n<p>For an introduction to regular expressions, read the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions\">Regular expressions chapter</a> in the JavaScript guide. For detailed information of regular expression syntax, read the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Regular_expressions\">regular expression reference</a>."
    },
    "regexp.@@match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@match",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "13",
        "Firefox": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@match]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> should behave. In addition, its presence (or absence) can influence whether an object is regarded as a regular expression.",
      "parameters": {
        "str": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> that is a target of the match."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> whose contents depend on the presence or absence of the global (<code>g</code>) flag, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> if no matches are found.\n<ul>\n  <li>If the <code>g</code> flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included.</li>\n  <li>If the <code>g</code> flag is not used, only the first complete match and its related capturing groups are returned. In this case, <code>match()</code> will return the same result as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a> (an array with some extra properties).</li>\n</ul>"
    },
    "regexp.@@matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@matchall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "73",
        "ChromeAndroid": "73",
        "Edge": "79",
        "Firefox": "67",
        "Opera": "60",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@matchAll]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll</code></a> should behave.",
      "parameters": {
        "str": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> that is a target of the match."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> (which is not restartable) of matches. Each match is an array with the same shape as the return value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a>."
    },
    "regexp.@@replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@replace",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@replace]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll()</code></a> should behave when the regular expression is passed in as the pattern.",
      "parameters": {
        "str": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> that is a target of the replacement.",
        "replacement": "Can be a string or a function. <ul> <li>If it's a string, it will replace the substring matched by the current regexp. A number of special replacement patterns are supported; see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_the_replacement\">Specifying a string as the replacement</a> section of <code>String.prototype.replace</code>.</li> <li>If it's a function, it will be invoked for every match and the return value is used as the replacement text. The arguments supplied to this function are described in the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_the_replacement\">Specifying a function as the replacement</a> section of <code>String.prototype.replace</code>.</li> </ul>"
      },
      "returns": "A new string, with one, some, or all matches of the pattern replaced by the specified replacement."
    },
    "regexp.@@search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@search",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "13",
        "Firefox": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@search]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search</code></a> should behave.",
      "parameters": {
        "str": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> that is a target of the search."
      },
      "returns": "The index of the first match between the regular expression and the given string, or <code>-1</code> if no match was found."
    },
    "regexp.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "13",
        "Firefox": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>RegExp[@@species]</code></strong> static accessor property returns the constructor used to construct copied regular expressions in certain <code>RegExp</code> methods.\n<div class=\"notecard warning\" id=\"sect1\">\n<p><strong>Warning:</strong> The existence of <code>@@species</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get @@species</code> was called. The return value is used to construct copied <code>RegExp</code> instances."
    },
    "regexp.@@split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@split",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@split]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances specifies how <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split</code></a> should behave when the regular expression is passed in as the separator.",
      "parameters": {
        "str": "The target of the split operation.",
        "limit": "Integer specifying a limit on the number of splits to be found. The <code>[@@split]()</code> method still splits on every match of <code>this</code> RegExp pattern (or, in the Syntax above, <code>regexp</code>), until the number of split items match the <code>limit</code> or the string falls short of <code>this</code> pattern."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> containing substrings as its elements. Capturing groups are included."
    },
    "regexp.compile": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/compile",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "6",
        "Safari": "3.1",
        "SafariIOS": "2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> The <code>compile()</code> method is only specified for compatibility reasons. Using <code>compile()</code> causes the otherwise immutable regex source and flags to become mutable, which may break user expectations. You can use the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\"><code>RegExp()</code></a> constructor to construct a new regular expression object instead.\n</div>\n<p>The <strong><code>compile()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances is used to recompile a regular expression with new source and flags after the <code>RegExp</code> object has already been created.",
      "parameters": {
        "pattern": "The text of the regular expression.",
        "flags": "Any combination of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp#flags\">flag values</a>."
      }
    },
    "regexp.dotall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/dotall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "62",
        "ChromeAndroid": "62",
        "Edge": "79",
        "Firefox": "78",
        "Opera": "49",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>dotAll</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>s</code> flag is used with this regular expression."
    },
    "regexp.exec": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/exec",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>exec()</code></strong> method executes a search for a match in a specified string and returns a result array, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>.",
      "parameters": {
        "str": "The string against which to match the regular expression. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>exec()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want."
      },
      "returns": "If the match fails, the <code>exec()</code> method returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>, and sets the regex's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> to <code>0</code>.\n<p>If the match succeeds, the <code>exec()</code> method returns an array and updates the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> property of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing group of the matched text. The array also has the following additional properties:\n<dl>\n  <dt id=\"index\"><code>index</code></dt>\n  <dd>\n    <p>The 0-based index of the match in the string.\n  </dd>\n  <dt id=\"input\"><code>input</code></dt>\n  <dd>\n    <p>The original string that was matched against.\n  </dd>\n  <dt id=\"groups\"><code>groups</code></dt>\n  <dd>\n    <p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects\"><code>null</code>-prototype object</a> of named capturing groups, whose keys are the names, and values are the capturing groups, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no named capturing groups were defined. See <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\">capturing groups</a> for more information.\n  </dd>\n  <dt id=\"indices\"><code>indices</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>This property is only present when the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>d</code></a> flag is set. It is an array where each entry represents the bounds of a substring match. The index of each element in this array corresponds to the index of the respective substring match in the array returned by <code>exec()</code>. In other words, the first <code>indices</code> entry represents the entire match, the second <code>indices</code> entry represents the first capturing group, etc. Each entry itself is a two-element array, where the first number represents the match's start index, and the second number, its end index.\n    <p>The <code>indices</code> array additionally has a <code>groups</code> property, which holds a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects\"><code>null</code>-prototype object</a> of all named capturing groups. The keys are the names of the capturing groups, and each value is a two-element array, with the first number being the start index, and the second number being the end index of the capturing group. If the regular expression doesn't contain any named capturing groups, <code>groups</code> is <code>undefined</code>.\n  </dd>\n</dl>"
    },
    "regexp.flags": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/flags",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "79",
        "Firefox": "37",
        "Opera": "39",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>flags</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags\">flags</a> of this regular expression."
    },
    "regexp.global": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/global",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>global</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>g</code> flag is used with this regular expression."
    },
    "regexp.hasindices": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/hasindices",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "90",
        "ChromeAndroid": "90",
        "Edge": "90",
        "Firefox": "88",
        "Opera": "76",
        "Safari": "15",
        "SafariIOS": "15",
        "Nodejs": "16.0.0",
        "Deno": "1.8"
      },
      "doc": "The <strong><code>hasIndices</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>d</code> flag is used with this regular expression."
    },
    "regexp.ignorecase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/ignorecase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>ignoreCase</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>i</code> flag is used with this regular expression."
    },
    "regexp.input": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/input",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "15",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.input</code></strong> static accessor property returns the string against which a regular expression is matched. <code>RegExp.$_</code> is an alias for this property."
    },
    "regexp.lastindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>lastIndex</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instance specifies the index at which to start the next match."
    },
    "regexp.lastmatch": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastmatch",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "10.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.lastMatch</code></strong> static accessor property returns the last matched substring. <code>RegExp[\"$&amp;\"]</code> is an alias for this property."
    },
    "regexp.lastparen": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastparen",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "10.5",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.lastParen</code></strong> static accessor property returns the last parenthesized substring match, if any. <code>RegExp[\"$+\"]</code> is an alias for this property."
    },
    "regexp.leftcontext": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/leftcontext",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "8",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.leftContext</code></strong> static accessor property returns the substring preceding the most recent match. <code>RegExp[\"$`\"]</code> is an alias for this property."
    },
    "regexp.multiline": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/multiline",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>multiline</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>m</code> flag is used with this regular expression."
    },
    "regexp.n": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/n",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.$1, …, RegExp.$9</code></strong> static accessor properties return parenthesized substring matches."
    },
    "regexp.regexp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/regexp",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>RegExp()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> objects.\n<p>For an introduction to regular expressions, read the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions\">Regular Expressions chapter</a> in the <a href=\"$MDN_URL$/Web/JavaScript/Guide\">JavaScript Guide</a>.",
      "parameters": {
        "pattern": "The text of the regular expression. This can also be another <code>RegExp</code> object.",
        "flags": "If specified, <code>flags</code> is a string that contains the flags to add. Alternatively, if a <code>RegExp</code> object is supplied for the <code>pattern</code>, the <code>flags</code> string will replace any of that object's flags (and <code>lastIndex</code> will be reset to <code>0</code>). <p><code>flags</code> may contain any combination of the following characters: <dl> <dt id=\"d_indices\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>d</code> (indices)</a></dt> <dd> <p>Generate indices for substring matches. </dd> <dt id=\"g_global\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>g</code> (global)</a></dt> <dd> <p>Find all matches rather than stopping after the first match. </dd> <dt id=\"i_ignore_case\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>i</code> (ignore case)</a></dt> <dd> <p>When matching, casing differences are ignored. </dd> <dt id=\"m_multiline\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>m</code> (multiline)</a></dt> <dd> <p>Treat beginning and end assertions (<code>^</code> and <code>$</code>) as working over multiple lines. In other words, match the beginning or end of <em>each</em> line (delimited by <code>\\n</code> or <code>\\r</code>), not only the very beginning or end of the whole input string. </dd> <dt id=\"s_dotall\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>s</code> (dotAll)</a></dt> <dd> <p>Allows <code>.</code> to match newlines. </dd> <dt id=\"u_unicode\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>u</code> (unicode)</a></dt> <dd> <p>Treat <code>pattern</code> as a sequence of Unicode code points. </dd> <dt id=\"v_unicodesets\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets\"><code>v</code> (unicodeSets)</a></dt> <dd> <p>An upgrade to the <code>u</code> flag that enables set notation in character classes as well as properties of strings. </dd> <dt id=\"y_sticky\"><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>y</code> (sticky)</a></dt> <dd> <p>Matches only from the index indicated by the <code>lastIndex</code> property of this regular expression in the target string. Does not attempt to match from any later indexes. </dd> </dl>"
      },
      "returns": "<code>RegExp(pattern)</code> returns <code>pattern</code> directly if all of the following are true:\n<ul>\n  <li><code>RegExp()</code> is called without <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>;</li>\n  <li><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\"><code>pattern</code> is a regex</a>;</li>\n  <li><code>pattern.constructor === RegExp</code> (usually meaning it's not a subclass);</li>\n  <li><code>flags</code> is <code>undefined</code>.</li>\n</ul>\n<p>In all other cases, calling <code>RegExp()</code> with or without <code>new</code> both create a new <code>RegExp</code> object. If <code>pattern</code> is a regex, the new object's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/source\">source</a> is <code>pattern.source</code>; otherwise, its source is <code>pattern</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to a string</a>. If the <code>flags</code> parameter is not <code>undefined</code>, the new object's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>flags</code></a> is the parameter's value; otherwise, its <code>flags</code> is <code>pattern.flags</code> (if <code>pattern</code> is a regex).",
      "throws": {
        "SyntaxError": "Thrown if one of the following is true: <ul> <li><code>pattern</code> cannot be parsed as a valid regular expression.</li> <li><code>flags</code> contains repeated characters or any character outside of those allowed.</li> </ul>"
      }
    },
    "regexp.rightcontext": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/rightcontext",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "8",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <code>RegExp</code> static properties that expose the last match state globally are deprecated. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp\">deprecated RegExp features</a> for more information.\n</div>\n<p>The <strong><code>RegExp.rightContext</code></strong> static accessor property returns the substring following the most recent match. <code>RegExp[\"$'\"]</code> is an alias for this property."
    },
    "regexp.source": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/source",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>source</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns a string containing the source text of this regular expression, without the two forward slashes on both sides or any flags."
    },
    "regexp.sticky": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/sticky",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "13",
        "Firefox": "3",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>sticky</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>y</code> flag is used with this regular expression."
    },
    "regexp.test": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/test",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>test()</code></strong> method executes a search for a match between a regular expression and a specified string. Returns <code>true</code> if there is a match; <code>false</code> otherwise.\n<p>JavaScript <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> objects are <strong>stateful</strong> when they have\nthe <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>global</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>sticky</code></a> flags\nset (e.g., <code>/foo/g</code> or <code>/foo/y</code>). They store a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> from the previous match. Using this\ninternally, <code>test()</code> can be used to iterate over multiple matches in a string\nof text (with capture groups).",
      "parameters": {
        "str": "The string against which to match the regular expression. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>test()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want."
      }
    },
    "regexp.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the regular expression.",
      "returns": "A string representing the given object."
    },
    "regexp.unicode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/unicode",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "",
        "Firefox": "46",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>unicode</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>u</code> flag is used with this regular expression."
    },
    "regexp.unicodesets": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/unicodesets",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "112",
        "ChromeAndroid": "112",
        "Edge": "112",
        "Firefox": "116",
        "Opera": "98",
        "Safari": "17",
        "SafariIOS": "17",
        "Nodejs": "20.0.0",
        "Deno": "1.32"
      },
      "doc": "The <strong><code>unicodeSets</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instances returns whether or not the <code>v</code> flag is used with this regular expression."
    },
    "set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Set</code></strong> object lets you store unique values of any type, whether <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a> or object references."
    },
    "set.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "43",
        "ChromeAndroid": "43",
        "Edge": "",
        "Firefox": "36",
        "Opera": "30",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows sets to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">set iterator object</a> that yields the values of the set in insertion order.\n<p>The initial value of this property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values</code></a> property.",
      "returns": "The same return value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a>: a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the values of the set."
    },
    "set.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/@@species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "41",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Set[@@species]</code></strong> static accessor property is an unused accessor property specifying how to copy <code>Set</code> objects.",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get @@species</code> was called. The return value is used to construct copied <code>Set</code> instances."
    },
    "set.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/add",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>add()</code></strong> method inserts a new element with a specified value in to a <code>Set</code> object, if there isn't an element with the same value already in the <code>Set</code>.",
      "parameters": {
        "value": "The value of the element to add to the <code>Set</code> object."
      },
      "returns": "The <code>Set</code> object with added value."
    },
    "set.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/clear",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "19",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>clear()</code></strong> method removes all elements from a\n<code>Set</code> object.",
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "set.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/delete",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>delete()</code></strong> method removes a specified value from a\n<code>Set</code> object, if it is in the set.",
      "parameters": {
        "value": "The value to remove from <code>Set</code>."
      },
      "returns": "Returns <code>true</code> if <code>value</code> was already in\n  <code>Set</code>; otherwise <code>false</code>."
    },
    "set.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "24",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>entries()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">set iterator</a></em> object that contains <strong>an array of <code>[value, value]</code></strong> for each element in the <code>Set</code> object, in insertion order. For <code>Set</code> objects there is no <code>key</code> like in <code>Map</code> objects. However, to keep the API similar to the <code>Map</code> object, each <em>entry</em> has the same value for its <em>key</em> and <em>value</em> here, so that an array <code>[value, value]</code> is returned.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "set.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/foreach",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "25",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>forEach()</code></strong> method executes a provided function once\nfor each value in the <code>Set</code> object, in insertion order.",
      "parameters": {
        "callback": "A function to execute for each entry in the set. The function is called with the following arguments: <dl> <dt id=\"value\"><code>value</code></dt> <dd> <p>Value of each iteration. </dd> <dt id=\"key\"><code>key</code></dt> <dd> <p>Key of each iteration. This is always the same as <code>value</code>. </dd> <dt id=\"set\"><code>set</code></dt> <dd> <p>The set being iterated. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "set.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>has()</code></strong> method returns a boolean indicating whether an\nelement with the specified value exists in a <code>Set</code> object or not.",
      "parameters": {
        "value": "The value to test for presence in the <code>Set</code> object."
      },
      "returns": "Returns <code>true</code> if an element with the specified value exists in the <code>Set</code> object; otherwise <code>false</code>."
    },
    "set.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/keys",
      "doc": "The <strong><code>keys()</code></strong> method is an alias for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>values()</code></a> method.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "set.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "13",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Set()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> objects.",
      "parameters": {
        "iterable": "If an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\">iterable object</a> is passed, all of its elements will be added to the new <code>Set</code>. <p>If you don't specify this parameter, or its value is <code>null</code>, the new <code>Set</code> is empty."
      },
      "returns": "A new <code>Set</code> object."
    },
    "set.size": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/size",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "19",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>size</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instances returns the number of (unique) elements in this set."
    },
    "set.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "24",
        "Opera": "25",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>values()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">set iterator</a></em> object that contains the values for each element in the <code>Set</code> object in insertion order.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "sharedarraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>SharedArrayBuffer</code></strong> object is used to represent a generic raw binary data buffer, similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object, but in a way that they can be used to create views on shared memory. A <code>SharedArrayBuffer</code> is not a <a href=\"$MDN_URL$/Web/API/Web_Workers_API/Transferable_objects\">Transferable Object</a>, unlike an <code>ArrayBuffer</code> which is transferable."
    },
    "sharedarraybuffer.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/@@species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>SharedArrayBuffer[@@species]</code></strong> static accessor property returns the constructor used to construct return values from <code>SharedArrayBuffer</code> methods.\n<div class=\"notecard warning\" id=\"sect1\">\n<p><strong>Warning:</strong> The existence of <code>@@species</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get @@species</code> was called. The return value is used to construct return values from array buffer methods that create new array buffer."
    },
    "sharedarraybuffer.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/bytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>byteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances returns the length (in bytes) of this <code>SharedArrayBuffer</code>."
    },
    "sharedarraybuffer.grow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/grow",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0"
      },
      "doc": "The <strong><code>grow()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances grows the <code>SharedArrayBuffer</code> to the specified size, in bytes.",
      "parameters": {
        "newLength": "The new length, in bytes, to resize the <code>SharedArrayBuffer</code> to."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "TypeError": "Thrown if the <code>SharedArrayBuffer</code> is not growable.",
        "RangeError": "Thrown if <code>newLength</code> is larger than the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> of the <code>SharedArrayBuffer</code> or smaller than the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength\"><code>byteLength</code></a>."
      }
    },
    "sharedarraybuffer.growable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/growable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0"
      },
      "doc": "The <strong><code>growable</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances returns whether this <code>SharedArrayBuffer</code> can be grow or not."
    },
    "sharedarraybuffer.maxbytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/maxbytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0"
      },
      "doc": "The <strong><code>maxByteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances returns the maximum length (in bytes) that this <code>SharedArrayBuffer</code> can be grown to."
    },
    "sharedarraybuffer.sharedarraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/sharedarraybuffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "<div class=\"notecard note\" id=\"sect1\">\n<p><strong>Note:</strong> The <code>SharedArrayBuffer</code> constructor may not always be globally available unless certain <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements\">security requirements</a> are met.\n</div>\n<p>The <strong><code>SharedArrayBuffer()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> objects.",
      "parameters": {
        "length": "The size, in bytes, of the array buffer to create.",
        "options": "An object, which can contain the following properties: <dl> <dt id=\"maxbytelength\"><code>maxByteLength</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>The maximum size, in bytes, that the shared array buffer can be resized to. </dd> </dl>"
      },
      "returns": "A new <code>SharedArrayBuffer</code> object of the specified size, with its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength\"><code>maxByteLength</code></a> property set to the specified <code>maxByteLength</code> if one was specified. Its contents are\n  initialized to 0."
    },
    "sharedarraybuffer.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "68",
        "ChromeAndroid": "89",
        "Edge": "79",
        "Firefox": "79",
        "Opera": "55",
        "Safari": "15.2",
        "SafariIOS": "15.2",
        "Nodejs": "8.10.0",
        "Deno": ""
      },
      "doc": "The <strong><code>slice()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances returns a\nnew <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> whose contents are a copy of this\n<code>SharedArrayBuffer</code>'s bytes from begin, inclusive, up to end, exclusive. If\neither begin or end is negative, it refers to an index from the end of the array, as\nopposed to from the beginning. This method has the same algorithm as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>.",
      "parameters": {
        "begin": "Zero-based index at which to begin extraction. <p>A negative index can be used, indicating an offset from the end of the sequence. <code>slice(-2)</code> extracts the last two elements in the sequence. <p>If <code>begin</code> is undefined, <code>slice</code> begins from index <code>0</code>.",
        "end": "Zero-based index <em>before</em> which to end extraction. <code>slice</code> extracts up to but not including <code>end</code>. <p>For example, <code>slice(1,4)</code> extracts the second element through the fourth element (elements indexed 1, 2, and 3). <p>A negative index can be used, indicating an offset from the end of the sequence. <code>slice(2,-1)</code> extracts the third element through the second-to-last element in the sequence. <p>If <code>end</code> is omitted, <code>slice</code> extracts through the end of the sequence (<code>sab.byteLength</code>)."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> containing the extracted elements."
    },
    "string": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>String</code></strong> object is used to represent and manipulate a\nsequence of characters."
    },
    "string.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows strings to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">string iterator object</a> that yields the Unicode code points of the string value as individual strings.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the Unicode code points of the string value as individual strings."
    },
    "string.anchor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/anchor",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>anchor()</code></strong> method creates a string that embeds a string in an <a href=\"$MDN_URL$/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> element with a name (<code>&lt;a name=\"...\"&gt;str&lt;/a&gt;</code>).\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n<p>The HTML specification no longer allows the <a href=\"$MDN_URL$/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> element to have a <code>name</code> attribute, so this method doesn't even create valid markup.\n</div>",
      "parameters": {
        "name": "A string representing a <code>name</code> value to put into the generated <code>&lt;a name=\"...\"&gt;</code> start tag."
      },
      "returns": "A string beginning with an <code>&lt;a name=\"name\"&gt;</code> start tag (double quotes in <code>name</code> are replaced with <code>&amp;quot;</code>), then the text <code>str</code>, and then an <code>&lt;/a&gt;</code> end tag."
    },
    "string.at": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/at",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "92",
        "ChromeAndroid": "92",
        "Edge": "92",
        "Firefox": "90",
        "Opera": "78",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "16.6.0",
        "Deno": "1.12"
      },
      "doc": "The <strong><code>at()</code></strong> method takes an integer value and returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> consisting of the single UTF-16 code unit located at the specified offset. This method allows for positive and negative integers. Negative integers count back from the last string character.",
      "parameters": {
        "index": "The index (position) of the string character to be returned. Supports relative indexing from the end of the string when passed a negative index; i.e. if a negative number is used, the character returned will be found by counting back from the end of the string."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> consisting of the single UTF-16 code unit located at the specified position. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the given index can not be found."
    },
    "string.big": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/big",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>big()</code></strong> method creates a string that embeds a string in a <a href=\"$MDN_URL$/Web/HTML/Element/big\"><code>&lt;big&gt;</code></a> element (<code>&lt;big&gt;str&lt;/big&gt;</code>), which causes a string to be displayed in a big font.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>big()</code>, the <code>&lt;big&gt;</code> element itself has been removed in <a href=\"$MDN_URL$/Glossary/HTML5\">HTML5</a> and shouldn't be used anymore. Web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties Instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;big&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/big&gt;</code> end tag."
    },
    "string.blink": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/blink",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>blink()</code></strong> method creates a string that embeds a string in a (<code>&lt;blink&gt;str&lt;/blink&gt;</code>), which used to cause a string to blink in old browsers.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>blink()</code>, the <code>&lt;blink&gt;</code> element itself is removed from modern browsers, and blinking text is frowned upon by several accessibility standards. Avoid using the element in any way.\n</div>",
      "returns": "A string beginning with a <code>&lt;blink&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/blink&gt;</code> end tag."
    },
    "string.bold": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/bold",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>bold()</code></strong> method creates a string that embeds a string in a <a href=\"$MDN_URL$/Web/HTML/Element/b\"><code>&lt;b&gt;</code></a> element (<code>&lt;b&gt;str&lt;/b&gt;</code>), which causes a string to be displayed as bold.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;b&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/b&gt;</code> end tag."
    },
    "string.charat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/charat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>charAt()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a new string consisting of the\nsingle UTF-16 code unit located at the specified offset into the string.",
      "parameters": {
        "index": "An integer between <code>0</code> and <code>str.length - 1</code>. If the <code>index</code> cannot be converted to the integer or no <code>index</code> is provided, the default is <code>0</code>, so the first character of <code>str</code> is returned."
      },
      "returns": "A string representing the character (exactly one UTF-16 code unit) at the specified\n  <code>index</code>. If <code>index</code> is out of range,\n  <code>charAt()</code> returns an empty string."
    },
    "string.charcodeat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/charcodeat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>charCodeAt()</code></strong> method returns\nan integer between <code>0</code> and <code>65535</code> representing the UTF-16 code\nunit at the given index.\n<p>The UTF-16 code unit matches the Unicode code point for code points which can be\nrepresented in a single UTF-16 code unit. If the Unicode code point cannot be\nrepresented in a single UTF-16 code unit (because its value is greater than\n<code>0xFFFF</code>) then the code unit returned will be <em>the first part of a\nsurrogate pair</em> for the code point. If you want the entire code point value, use\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>codePointAt()</code></a>.",
      "parameters": {
        "index": "An integer greater than or equal to <code>0</code> and less than the <code>length</code> of the string. If <code>index</code> is not a number, it defaults to <code>0</code>."
      },
      "returns": "A number representing the UTF-16 code unit value of the character at the given\n  <code>index</code>. If <code>index</code> is out of range,\n  <code>charCodeAt()</code> returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>."
    },
    "string.codepointat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/codepointat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "41",
        "Edge": "",
        "Firefox": "29",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>codePointAt()</code></strong> method returns a non-negative integer\nthat is the Unicode code point value at the given position.\nNote that this function does not give the nth code point in a string,\nbut the code point starting at the specified string index.",
      "parameters": {
        "pos": "Position of an element in <code>str</code> to return the code point value from."
      },
      "returns": "A decimal number representing the code point value of the character at the given <code>pos</code>.\n<ul>\n  <li>If there is no element at <code>pos</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</li>\n  <li>If the element at <code>pos</code> is a UTF-16 high surrogate, returns the code point of the surrogate <em>pair</em>.</li>\n  <li>If the element at <code>pos</code> is a UTF-16 low surrogate, returns <em>only</em> the low surrogate code point.</li>\n</ul>"
    },
    "string.concat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/concat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>concat()</code></strong> method concatenates\nthe string arguments to the calling string and returns a new string.",
      "parameters": {
        "strN": "One or more strings to concatenate to <code>str</code>."
      },
      "returns": "A new string containing the combined text of the strings provided."
    },
    "string.endswith": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/endswith",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "17",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>endsWith()</code></strong> method determines whether a string ends with the characters of a specified string, returning <code>true</code> or <code>false</code> as appropriate.",
      "parameters": {
        "searchString": "The characters to be searched for at the end of <code>str</code>. Cannot <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">be a regex</a>. All values that are not regexes are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>endsWith()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "endPosition": "The end position at which <code>searchString</code> is expected to be found (the index of <code>searchString</code>'s last character plus 1). Defaults to <code>str.length</code>."
      },
      "returns": "<strong><code>true</code></strong> if the given characters are found at the end of the string, including when <code>searchString</code> is an empty string; otherwise, <strong><code>false</code></strong>.",
      "throws": {
        "TypeError": "Thrown if <code>searchString</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>."
      }
    },
    "string.fixed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fixed",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>fixed()</code></strong> method creates a string that embeds a string in a <a href=\"$MDN_URL$/Web/HTML/Element/tt\"><code>&lt;tt&gt;</code></a> element (<code>&lt;tt&gt;str&lt;/tt&gt;</code>), which causes a string to be displayed in a fixed-pitch font.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;tt&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/tt&gt;</code> end tag."
    },
    "string.fontcolor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fontcolor",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>fontcolor()</code></strong> method creates a string that embeds a string in a <a href=\"$MDN_URL$/Web/HTML/Element/font\"><code>&lt;font&gt;</code></a> element (<code>&lt;font color=\"...\"&gt;str&lt;/font&gt;</code>), which causes a string to be displayed in the specified font color.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>fontcolor()</code>, the <code>&lt;font&gt;</code> element itself has been removed in <a href=\"$MDN_URL$/Glossary/HTML5\">HTML5</a> and shouldn't be used anymore. Web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties instead.\n</div>",
      "parameters": {
        "color": "A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the <a href=\"$MDN_URL$/Web/CSS/color_value\">CSS color reference</a>."
      },
      "returns": "A string beginning with a <code>&lt;font color=\"color\"&gt;</code> start tag (double quotes in <code>color</code> are replaced with <code>&amp;quot;</code>), then the text <code>str</code>, and then a <code>&lt;/font&gt;</code> end tag."
    },
    "string.fontsize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fontsize",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>fontsize()</code></strong> method creates a string that embeds a string in a <a href=\"$MDN_URL$/Web/HTML/Element/font\"><code>&lt;font&gt;</code></a> element (<code>&lt;font size=\"...\"&gt;str&lt;/font&gt;</code>), which causes a string to be displayed in the specified font size.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. For the case of <code>fontsize()</code>, the <code>&lt;font&gt;</code> element itself has been removed in <a href=\"$MDN_URL$/Glossary/HTML5\">HTML5</a> and shouldn't be used anymore. Web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties instead.\n</div>",
      "parameters": {
        "size": "An integer between 1 and 7, or a string representing a signed integer between 1 and 7."
      },
      "returns": "A string beginning with a <code>&lt;font size=\"size\"&gt;</code> start tag (double quotes in <code>size</code> are replaced with <code>&amp;quot;</code>), then the text <code>str</code>, and then a <code>&lt;/font&gt;</code> end tag."
    },
    "string.fromcharcode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fromcharcode",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>String.fromCharCode()</code></strong> static method returns a string\ncreated from the specified sequence of UTF-16 code units.",
      "parameters": {
        "num1, ..., numN": "A sequence of numbers that are UTF-16 code units. The range is between <code>0</code> and <code>65535</code> (<code>0xFFFF</code>). Numbers greater than <code>0xFFFF</code> are truncated. No validity checks are performed."
      },
      "returns": "A string of length <code>N</code> consisting of the\n  <code>N</code> specified UTF-16 code units."
    },
    "string.fromcodepoint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fromcodepoint",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "41",
        "Edge": "",
        "Firefox": "29",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>String.fromCodePoint()</code></strong> static method returns a string\ncreated by using the specified sequence of code points.",
      "parameters": {
        "num1, ..., numN": "A sequence of code points."
      },
      "returns": "A string created by using the specified sequence of code points.",
      "throws": {
        "RangeError": "Thrown if an invalid Unicode code point is given."
      }
    },
    "string.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/includes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "41",
        "Edge": "",
        "Firefox": "40",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>includes()</code></strong> method performs a case-sensitive search to determine whether one string may be found within another string, returning <code>true</code> or <code>false</code> as appropriate.",
      "parameters": {
        "searchString": "A string to be searched for within <code>str</code>. Cannot <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">be a regex</a>. All values that are not regexes are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>includes()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "position": "The position within the string at which to begin searching for <code>searchString</code>. (Defaults to <code>0</code>.)"
      },
      "returns": "<strong><code>true</code></strong> if the search string is found anywhere within the given string, including when <code>searchString</code> is an empty string; otherwise, <strong><code>false</code></strong>.",
      "throws": {
        "TypeError": "Thrown if <code>searchString</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>."
      }
    },
    "string.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/indexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>indexOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values searches this string and returns the index of the first occurrence of the specified substring. It takes an optional starting position and returns the first occurrence of the specified substring at an index greater than or equal to the specified number.",
      "parameters": {
        "searchString": "Substring to search for. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>indexOf()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "position": "The method returns the index of the first occurrence of the specified substring at a position greater than or equal to <code>position</code>, which defaults to <code>0</code>. If <code>position</code> is greater than the length of the calling string, the method doesn't search the calling string at all. If <code>position</code> is less than zero, the method behaves as it would if <code>position</code> were <code>0</code>. <ul> <li><code>'hello world hello'.indexOf('o', -5)</code> returns <code>4</code> — because it causes the method to behave as if the second argument were <code>0</code>, and the first occurrence of <code>o</code> at a position greater or equal to <code>0</code> is at position <code>4</code>.</li> <li><code>'hello world hello'.indexOf('world', 12)</code> returns <code>-1</code> — because, while it's true the substring <code>world</code> occurs at index <code>6</code>, that position is not greater than or equal to <code>12</code>.</li> <li><code>'hello world hello'.indexOf('o', 99)</code> returns <code>-1</code> — because <code>99</code> is greater than the length of <code>hello world hello</code>, which causes the method to not search the string at all.</li> </ul>"
      },
      "returns": "The index of the first occurrence of <code>searchString</code> found, or <code>-1</code> if not found.\n<h4 id=\"return_value_when_using_an_empty_search_string\">Return value when using an empty search string</h4>\n<p>Searching for an empty search string produces strange results. With no second argument, or with a second argument whose value is less than the calling string's length, the return value is the same as the value of the second argument:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js<pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 0</span>\n<span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 0</span>\n<span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 3</span>\n<span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 8</span>\n</code></pre></span></div>\n<p>However, with a second argument whose value is greater than or equal to the string's length, the return value is the string's length:\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js<pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 11</span>\n<span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 11</span>\n<span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 11</span>\n</code></pre></span></div>\n<p>In the former instance, the method behaves as if it found an empty string just after the position specified in the second argument. In the latter instance, the method behaves as if it found an empty string at the end of the calling string."
    },
    "string.iswellformed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/iswellformed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.32"
      },
      "doc": "The <strong><code>isWellFormed()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a boolean indicating whether this string contains any <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogates</a>.",
      "returns": "Returns <code>true</code> if this string does not contain any lone surrogates, <code>false</code> otherwise."
    },
    "string.italics": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/italics",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>italics()</code></strong> method creates a string that embeds a string in an <a href=\"$MDN_URL$/Web/HTML/Element/i\"><code>&lt;i&gt;</code></a> element (<code>&lt;i&gt;str&lt;/i&gt;</code>), which causes a string to be displayed as italic.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with an <code>&lt;i&gt;</code> start tag, then the text <code>str</code>, and then an <code>&lt;/i&gt;</code> end tag."
    },
    "string.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>lastIndexOf()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values searches this string and returns the index of the last occurrence of the specified substring. It takes an optional starting position and returns the last occurrence of the specified substring at an index less than or equal to the specified number.",
      "parameters": {
        "searchString": "Substring to search for. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>indexOf()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "position": "The method returns the index of the last occurrence of the specified substring at a position less than or equal to <code>position</code>, which defaults to <code>+Infinity</code>. If <code>position</code> is greater than the length of the calling string, the method searches the entire string. If <code>position</code> is less than <code>0</code>, the behavior is the same as for <code>0</code> — that is, the method looks for the specified substring only at index <code>0</code>. <ul> <li><code>'hello world hello'.lastIndexOf('world', 4)</code> returns <code>-1</code> — because, while the substring <code>world</code> does occurs at index <code>6</code>, that position is not less than or equal to <code>4</code>.</li> <li><code>'hello world hello'.lastIndexOf('hello', 99)</code> returns <code>12</code> — because the last occurrence of <code>hello</code> at a position less than or equal to <code>99</code> is at position <code>12</code>.</li> <li><code>'hello world hello'.lastIndexOf('hello', 0)</code> and <code>'hello world hello'.lastIndexOf('hello', -5)</code> both return <code>0</code> — because both cause the method to only look for <code>hello</code> at index <code>0</code>.</li> </ul>"
      },
      "returns": "The index of the last occurrence of <code>searchString</code> found, or <code>-1</code> if not found."
    },
    "string.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/length",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>length</code></strong> data property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> value contains the length of the string in UTF-16 code units."
    },
    "string.link": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/link",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>link()</code></strong> method creates a string that embeds a string in an <a href=\"$MDN_URL$/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> element (<code>&lt;a href=\"...\"&gt;str&lt;/a&gt;</code>), to be used as a hypertext link to another URL.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "parameters": {
        "url": "Any string that specifies the <code>href</code> attribute of the <code>&lt;a&gt;</code> element; it should be a valid URL (relative or absolute), with any <code>&amp;</code> characters escaped as <code>&amp;amp;</code>."
      },
      "returns": "A string beginning with an <code>&lt;a href=\"url\"&gt;</code> start tag (double quotes in <code>url</code> are replaced with <code>&amp;quot;</code>), then the text <code>str</code>, and then an <code>&lt;/a&gt;</code> end tag."
    },
    "string.localecompare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/localecompare",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "7",
        "Safari": "3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>localeCompare()</code></strong> method returns a number indicating whether a reference string comes before, or after, or is the same as the given string in sort order. In implementations with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code> API</a> support, this method simply calls <code>Intl.Collator</code>.\n<p>When comparing large numbers of strings, such as in sorting large arrays, it is better to create an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> object and use the function provided by its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare\"><code>compare()</code></a> method.",
      "parameters": {
        "compareString": "The string against which the <code>referenceStr</code> is compared. All values are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>localeCompare()</code> to compare against the string <code>\"undefined\"</code>, which is rarely what you want.",
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#locales\"><code>locales</code></a> parameter of the <code>Intl.Collator()</code> constructor. <p>In implementations without <code>Intl.Collator</code> support, this parameter is ignored and the host's locale is usually used.",
        "options": "An object adjusting the output format. Corresponds to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#options\"><code>options</code></a> parameter of the <code>Intl.Collator()</code> constructor. <p>In implementations without <code>Intl.Collator</code> support, this parameter is ignored."
      },
      "returns": "A <strong>negative</strong> number if <code>referenceStr</code> occurs before <code>compareString</code>; <strong>positive</strong> if the <code>referenceStr</code> occurs after <code>compareString</code>; <code>0</code> if they are equivalent.\n<p>In implementations with <code>Intl.Collator</code>, this is equivalent to <code>new Intl.Collator(locales, options).compare(referenceStr, compareString)</code>."
    },
    "string.match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/match",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>match()</code></strong> method retrieves the result of matching a string against a <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions\">regular expression</a>.",
      "parameters": {
        "regexp": "A regular expression object, or any object that has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/match\"><code>Symbol.match</code></a> method. <p>If <code>regexp</code> is not a <code>RegExp</code> object and does not have a <code>Symbol.match</code> method, it is implicitly converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> by using <code>new RegExp(regexp)</code>. <p>If you don't give any parameter and use the <code>match()</code> method directly, you will get an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> with an empty string: <code>[\"\"]</code>, because this is equivalent to <code>match(/(?:)/)</code>."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> whose contents depend on the presence or absence of the global (<code>g</code>) flag, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> if no matches are found.\n<ul>\n  <li>If the <code>g</code> flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included.</li>\n  <li>If the <code>g</code> flag is not used, only the first complete match and its related capturing groups are returned. In this case, <code>match()</code> will return the same result as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a> (an array with some extra properties).</li>\n</ul>"
    },
    "string.matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/matchall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "73",
        "ChromeAndroid": "73",
        "Edge": "79",
        "Firefox": "67",
        "Opera": "60",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>matchAll()</code></strong> method returns an iterator of all results matching a string against a <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions\">regular expression</a>, including <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\">capturing groups</a>.",
      "parameters": {
        "regexp": "A regular expression object, or any object that has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll\"><code>Symbol.matchAll</code></a> method. <p>If <code>regexp</code> is not a <code>RegExp</code> object and does not have a <code>Symbol.matchAll</code> method, it is implicitly converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> by using <code>new RegExp(regexp, 'g')</code>. <p>If <code>regexp</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>, then it must have the global (<code>g</code>) flag set, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> is thrown."
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> (which is not restartable) of matches. Each match is an array with the same shape as the return value of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a>.",
      "throws": {
        "TypeError": "Thrown if the <code>regexp</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a> that does not have the global (<code>g</code>) flag set (its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>flags</code></a> property does not contain <code>\"g\"</code>)."
      }
    },
    "string.normalize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/normalize",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "34",
        "ChromeAndroid": "34",
        "Edge": "",
        "Firefox": "31",
        "Opera": "21",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>normalize()</code></strong> method returns the Unicode Normalization\nForm of the string.",
      "parameters": {
        "form": "One of <code>\"NFC\"</code>, <code>\"NFD\"</code>, <code>\"NFKC\"</code>, or <code>\"NFKD\"</code>, specifying the Unicode Normalization Form. If omitted or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, <code>\"NFC\"</code> is used. <p>These values have the following meanings: <dl> <dt id=\"nfc\"><code>\"NFC\"</code></dt> <dd> <p>Canonical Decomposition, followed by Canonical Composition. </dd> <dt id=\"nfd\"><code>\"NFD\"</code></dt> <dd> <p>Canonical Decomposition. </dd> <dt id=\"nfkc\"><code>\"NFKC\"</code></dt> <dd> <p>Compatibility Decomposition, followed by Canonical Composition. </dd> <dt id=\"nfkd\"><code>\"NFKD\"</code></dt> <dd> <p>Compatibility Decomposition. </dd> </dl>"
      },
      "returns": "A string containing the Unicode Normalization Form of the given string."
    },
    "string.padend": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/padend",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "15",
        "Firefox": "48",
        "Opera": "44",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "8.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>padEnd()</code></strong> method pads the current string with a given\nstring (repeated, if needed) so that the resulting string reaches a given length. The\npadding is applied from the end of the current string.",
      "parameters": {
        "targetLength": "The length of the resulting string once the current <code>str</code> has been padded. If the value is less than or equal to <code>str.length</code>, the current string will be returned as-is.",
        "padString": "The string to pad the current <code>str</code> with. If <code>padString</code> is too long to stay within <code>targetLength</code>, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is \" \" (<code>U+0020</code>)."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> of the specified <code>targetLength</code> with the\n  <code>padString</code> applied at the end of the current\n  <code>str</code>."
    },
    "string.padstart": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/padstart",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "15",
        "Firefox": "48",
        "Opera": "44",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "8.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>padStart()</code></strong> method pads the\ncurrent string with another string (multiple times, if needed) until the resulting\nstring reaches the given length. The padding is applied from the start of the\ncurrent string.",
      "parameters": {
        "targetLength": "The length of the resulting string once the current <code>str</code> has been padded. If the value is less than or equal to <code>str.length</code>, then <code>str</code> is returned as-is.",
        "padString": "The string to pad the current <code>str</code> with. If <code>padString</code> is too long to stay within the <code>targetLength</code>, it will be truncated from the end. The default value is the unicode \"space\" character (U+0020)."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> of the specified <code>targetLength</code> with\n  <code>padString</code> applied from the start."
    },
    "string.raw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/raw",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "41",
        "Edge": "",
        "Firefox": "34",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>String.raw()</code></strong> static method is a tag function of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Template_literals\">template literals</a>. This is similar to the <code>r</code> prefix in Python, or the <code>@</code> prefix in C# for string literals. It's used to get the raw string form of template literals — that is, substitutions (e.g. <code>${foo}</code>) are processed, but escape sequences (e.g. <code>\\n</code>) are not.",
      "parameters": {
        "strings": "Well-formed template literal array object, like <code>{ raw: ['foo', 'bar', 'baz'] }</code>. Should be an object with a <code>raw</code> property whose value is an array-like object of strings.",
        "...substitutions": "Contains substitution values.",
        "templateString": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Template_literals\">template literal</a>, optionally with substitutions (<code>${...}</code>)."
      },
      "returns": "The raw string form of a given template literal.",
      "throws": {
        "TypeError": "Thrown if the first argument doesn't have a <code>raw</code> property, or the <code>raw</code> property is <code>undefined</code> or <code>null</code>."
      }
    },
    "string.repeat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/repeat",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "24",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>repeat()</code></strong> method constructs and returns a new string\nwhich contains the specified number of copies of the string on which it was called,\nconcatenated together.",
      "parameters": {
        "count": "An integer between <code>0</code> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\"><code>+Infinity</code></a>, indicating the number of times to repeat the string."
      },
      "returns": "A new string containing the specified number of copies of the given string.",
      "throws": {
        "RangeError": "Thrown if <code>count</code> is negative or if <code>count</code> overflows maximum string length."
      }
    },
    "string.replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/replace",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>replace()</code></strong> method returns a new string with one, some, or all matches of a <code>pattern</code> replaced by a <code>replacement</code>. The <code>pattern</code> can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, and the <code>replacement</code> can be a string or a function called for each match. If <code>pattern</code> is a string, only the first occurrence will be replaced. The original string is left unchanged.",
      "parameters": {
        "pattern": "Can be a string or an object with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>Symbol.replace</code></a> method — the typical example being a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a>. Any value that doesn't have the <code>Symbol.replace</code> method will be coerced to a string.",
        "replacement": "Can be a string or a function. <ul> <li>If it's a string, it will replace the substring matched by <code>pattern</code>. A number of special replacement patterns are supported; see the <a href=\"#specifying_a_string_as_the_replacement\">Specifying a string as the replacement</a> section below.</li> <li>If it's a function, it will be invoked for every match and its return value is used as the replacement text. The arguments supplied to this function are described in the <a href=\"#specifying_a_function_as_the_replacement\">Specifying a function as the replacement</a> section below.</li> </ul>"
      },
      "returns": "A new string, with one, some, or all matches of the pattern replaced by the specified replacement."
    },
    "string.replaceall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/replaceall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "85",
        "ChromeAndroid": "85",
        "Edge": "85",
        "Firefox": "77",
        "Opera": "71",
        "Safari": "13.1",
        "SafariIOS": "13.4",
        "Nodejs": "15.0.0",
        "Deno": "1.2"
      },
      "doc": "The <strong><code>replaceAll()</code></strong> method returns a new string with all matches of a <code>pattern</code> replaced by a <code>replacement</code>. The <code>pattern</code> can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, and the <code>replacement</code> can be a string or a function to be called for each match. The original string is left unchanged.",
      "parameters": {
        "pattern": "Can be a string or an object with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>Symbol.replace</code></a> method — the typical example being a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a>. Any value that doesn't have the <code>Symbol.replace</code> method will be coerced to a string. <p>If <code>pattern</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>, then it must have the global (<code>g</code>) flag set, or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> is thrown.",
        "replacement": "Can be a string or a function. The replacement has the same semantics as that of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a>."
      },
      "returns": "A new string, with all matches of a pattern replaced by a replacement.",
      "throws": {
        "TypeError": "Thrown if the <code>pattern</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a> that does not have the global (<code>g</code>) flag set (its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>flags</code></a> property does not contain <code>\"g\"</code>)."
      }
    },
    "string.search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/search",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>search()</code></strong> method executes a search for a match between a regular expression and this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object.",
      "parameters": {
        "regexp": "A regular expression object, or any object that has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/search\"><code>Symbol.search</code></a> method. <p>If <code>regexp</code> is not a <code>RegExp</code> object and does not have a <code>Symbol.search</code> method, it is implicitly converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> by using <code>new RegExp(regexp)</code>."
      },
      "returns": "The index of the first match between the regular expression and the given string, or <code>-1</code> if no match was found."
    },
    "string.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>slice()</code></strong> method extracts a section of a string and\nreturns it as a new string, without modifying the original string.",
      "parameters": {
        "indexStart": "The index of the first character to include in the returned substring.",
        "indexEnd": "The index of the first character to exclude from the returned substring."
      },
      "returns": "A new string containing the extracted section of the string."
    },
    "string.small": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/small",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>small()</code></strong> method creates a string that embeds a string in a <a href=\"$MDN_URL$/Web/HTML/Element/small\"><code>&lt;small&gt;</code></a> element (<code>&lt;small&gt;str&lt;/small&gt;</code>), which causes a string to be displayed in a small font.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;small&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/small&gt;</code> end tag."
    },
    "string.split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/split",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>split()</code></strong> method takes a pattern and divides a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.",
      "parameters": {
        "separator": "The pattern describing where each split should occur. Can be <code>undefined</code>, a string, or an object with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/split\"><code>Symbol.split</code></a> method — the typical example being a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a>. Omitting <code>separator</code> or passing <code>undefined</code> causes <code>split()</code> to return an array with the calling string as a single element. All values that are not <code>undefined</code> or objects with a <code>@@split</code> method are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>.",
        "limit": "A non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified <code>separator</code>, but stops when <code>limit</code> entries have been placed in the array. Any leftover text is not included in the array at all. <ul> <li>The array may contain fewer entries than <code>limit</code> if the end of the string is reached before the limit is reached.</li> <li>If <code>limit</code> is <code>0</code>, <code>[]</code> is returned.</li> </ul>"
      },
      "returns": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of strings, split at each point where the <code>separator</code> occurs in the given string."
    },
    "string.startswith": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/startswith",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "41",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "17",
        "Opera": "28",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>startsWith()</code></strong> method determines whether a string begins with the characters of a specified string, returning <code>true</code> or <code>false</code> as appropriate.",
      "parameters": {
        "searchString": "The characters to be searched for at the start of this string. Cannot <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">be a regex</a>. All values that are not regexes are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>, so omitting it or passing <code>undefined</code> causes <code>startsWith()</code> to search for the string <code>\"undefined\"</code>, which is rarely what you want.",
        "position": "The start position at which <code>searchString</code> is expected to be found (the index of <code>searchString</code>'s first character). Defaults to <code>0</code>."
      },
      "returns": "<strong><code>true</code></strong> if the given characters are found at the beginning of the string, including when <code>searchString</code> is an empty string; otherwise, <strong><code>false</code></strong>.",
      "throws": {
        "TypeError": "Thrown if <code>searchString</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">is a regex</a>."
      }
    },
    "string.strike": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/strike",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>strike()</code></strong> method creates a string that embeds a string in a <a href=\"$MDN_URL$/Web/HTML/Element/strike\"><code>&lt;strike&gt;</code></a> element (<code>&lt;strike&gt;str&lt;/strike&gt;</code>), which causes a string to be displayed as struck-out text.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;strike&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/strike&gt;</code> end tag."
    },
    "string.string": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/string",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>String()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> objects. When called as a function, it returns primitive values of type String.",
      "parameters": {
        "thing": "Anything to be converted to a string."
      },
      "returns": "When <code>String</code> is called as a constructor (with <code>new</code>), it creates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object, which is <strong>not</strong> a primitive.\n<p>When <code>String</code> is called as a function, it coerces the parameter to a string primitive. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> values would be converted to <code>\"Symbol(description)\"</code>, where <code>description</code> is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol/description\">description</a> of the Symbol, instead of throwing.\n<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>Warning:</strong> You should rarely find yourself using <code>String</code> as a constructor.\n</div>"
    },
    "string.sub": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/sub",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>sub()</code></strong> method creates a string that embeds a string in a <a href=\"$MDN_URL$/Web/HTML/Element/sub\"><code>&lt;sub&gt;</code></a> element (<code>&lt;sub&gt;str&lt;/sub&gt;</code>), which causes a string to be displayed as subscript.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;sub&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/sub&gt;</code> end tag."
    },
    "string.substr": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/substr",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>substr()</code></strong> method returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> <code>substr()</code> is not part of the main ECMAScript specification — it's defined in <a href=\"https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html\" class=\"external\" target=\"_blank\">Annex B: Additional ECMAScript Features for Web Browsers</a>, which is normative optional for non-browser runtimes. Therefore, people are advised to use the standard <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>String.prototype.substring()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/slice\"><code>String.prototype.slice()</code></a> methods instead to make their code maximally cross-platform friendly. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/substring#the_difference_between_substring_and_substr\"><code>String.prototype.substring()</code> page</a> has some comparisons between the three methods.\n</div>",
      "parameters": {
        "start": "The index of the first character to include in the returned substring.",
        "length": "The number of characters to extract."
      },
      "returns": "A new string containing the specified part of the given string."
    },
    "string.substring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/substring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>substring()</code></strong> method returns the part of the <code>string</code> from the start index up to and excluding the end index, or to the end of the string if no end index is supplied.",
      "parameters": {
        "indexStart": "The index of the first character to include in the returned substring.",
        "indexEnd": "The index of the first character to exclude from the returned substring."
      },
      "returns": "A new string containing the specified part of the given string."
    },
    "string.sup": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/sup",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<p>The <strong><code>sup()</code></strong> method creates a string that embeds a string in a <a href=\"$MDN_URL$/Web/HTML/Element/sup\"><code>&lt;sup&gt;</code></a> element (<code>&lt;sup&gt;str&lt;/sup&gt;</code>), which causes a string to be displayed as superscript.\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> All <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods\">HTML wrapper methods</a> are deprecated and only standardized for compatibility purposes. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"$MDN_URL$/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.\n</div>",
      "returns": "A string beginning with a <code>&lt;sup&gt;</code> start tag, then the text <code>str</code>, and then a <code>&lt;/sup&gt;</code> end tag."
    },
    "string.tolocalelowercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolocalelowercase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "1.3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleLowerCase()</code></strong> method returns the calling string\nvalue converted to lower case, according to any locale-specific case mappings.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to lower case according to any locale-specific case mappings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>. <p>Unlike other methods that use the <code>locales</code> argument, <code>toLocaleLowerCase()</code> does not allow locale matching. Therefore, after checking the validity of the <code>locales</code> argument, <code>toLocaleLowerCase()</code> always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation."
      },
      "returns": "A new string representing the calling string converted to lower case, according to any\n  locale-specific case mappings."
    },
    "string.tolocaleuppercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolocaleuppercase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "1.3",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleUpperCase()</code></strong> method returns the calling string\nvalue converted to upper case, according to any locale-specific case mappings.",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to upper case according to any locale-specific case mappings. For the general form and interpretation of the <code>locales</code> argument, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">the parameter description on the <code>Intl</code> main page</a>. <p>Unlike other methods that use the <code>locales</code> argument, <code>toLocaleLowerCase()</code> does not allow locale matching. Therefore, after checking the validity of the <code>locales</code> argument, <code>toLocaleLowerCase()</code> always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation."
      },
      "returns": "A new string representing the calling string converted to upper case, according to any\n  locale-specific case mappings."
    },
    "string.tolowercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolowercase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLowerCase()</code></strong> method returns the calling string value\nconverted to lower case.",
      "returns": "A new string representing the calling string converted to lower case."
    },
    "string.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the specified string value.",
      "returns": "A string representing the specified string value."
    },
    "string.touppercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/touppercase",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toUpperCase()</code></strong> method returns the calling string value\nconverted to uppercase (the value will be converted to a string if it isn't one).",
      "returns": "A new string representing the calling string converted to upper case."
    },
    "string.towellformed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/towellformed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "111",
        "ChromeAndroid": "111",
        "Edge": "111",
        "Opera": "97",
        "Safari": "16.4",
        "SafariIOS": "16.4",
        "Nodejs": "20.0.0",
        "Deno": "1.32"
      },
      "doc": "The <strong><code>toWellFormed()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values returns a string where all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogates</a> of this string are replaced with the Unicode replacement character U+FFFD.",
      "returns": "A new string that is a copy of this string, with all lone surrogates replaced with the Unicode replacement character U+FFFD. If <code>str</code> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/isWellFormed\">is well formed</a>, a new string is still returned (essentially a copy of <code>str</code>)."
    },
    "string.trim": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trim",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "5",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>trim()</code></strong> method removes whitespace from both ends of a string and returns a new string, without modifying the original string.\n<p>To return a new string with whitespace trimmed from just one end, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/trimStart\"><code>trimStart()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/trimEnd\"><code>trimEnd()</code></a>.",
      "returns": "A new string representing <code>str</code> stripped of whitespace from both its beginning and end. Whitespace is defined as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#white_space\">white space</a> characters plus <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#line_terminators\">line terminators</a>.\n<p>If neither the beginning or end of <code>str</code> has any whitespace, a new string is still returned (essentially a copy of <code>str</code>)."
    },
    "string.trimend": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trimend",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "66",
        "ChromeAndroid": "66",
        "Edge": "79",
        "Firefox": "61",
        "Opera": "53",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>trimEnd()</code></strong> method removes whitespace from the end of a string and returns a new string, without modifying the original string. <code>trimRight()</code> is an alias of this method.",
      "returns": "A new string representing <code>str</code> stripped of whitespace from its end (right side). Whitespace is defined as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#white_space\">white space</a> characters plus <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#line_terminators\">line terminators</a>.\n<p>If the end of <code>str</code> has no whitespace, a new string is still returned (essentially a copy of <code>str</code>)."
    },
    "string.trimstart": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trimstart",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "66",
        "ChromeAndroid": "66",
        "Edge": "79",
        "Firefox": "61",
        "Opera": "53",
        "Safari": "12",
        "SafariIOS": "12",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>trimStart()</code></strong> method removes whitespace from the beginning of a string and returns a new string, without modifying the original string. <code>trimLeft()</code> is an alias of this method.",
      "returns": "A new string representing <code>str</code> stripped of whitespace from its beginning (left side). Whitespace is defined as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#white_space\">white space</a> characters plus <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#line_terminators\">line terminators</a>.\n<p>If the beginning of <code>str</code> has no whitespace, a new string is still returned (essentially a copy of <code>str</code>)."
    },
    "string.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>valueOf()</code></strong> method returns the primitive value of a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object.",
      "returns": "A string representing the primitive value of a given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object."
    },
    "symbol": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "<strong><code>Symbol</code></strong> is a built-in object whose constructor returns a <code>symbol</code> <a href=\"$MDN_URL$/Glossary/Primitive\">primitive</a> — also called a <strong>Symbol value</strong> or just a <strong>Symbol</strong> — that's guaranteed to be unique. Symbols are often used to add unique property keys to an object that won't collide with keys any other code might add to the object, and which are hidden from any mechanisms other code will typically use to access the object. That enables a form of weak <a href=\"$MDN_URL$/Glossary/Encapsulation\">encapsulation</a>, or a weak form of <a href=\"https://en.wikipedia.org/wiki/Information_hiding\" class=\"external\" target=\"_blank\">information hiding</a>.\n<p>Every <code>Symbol()</code> call is guaranteed to return a unique Symbol. Every <code>Symbol.for(\"key\")</code> call will always return the same Symbol for a given value of <code>\"key\"</code>. When <code>Symbol.for(\"key\")</code> is called, if a Symbol with the given key can be found in the global Symbol registry, that Symbol is returned. Otherwise, a new Symbol is created, added to the global Symbol registry under the given key, and returned."
    },
    "symbol.@@toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/@@toprimitive",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "15",
        "Firefox": "44",
        "Opera": "34",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@toPrimitive]()</code></strong> method converts a Symbol object to\na primitive value.",
      "returns": "The primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> object."
    },
    "symbol.asynciterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/asynciterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "79",
        "Firefox": "57",
        "Opera": "50",
        "Safari": "11.1",
        "SafariIOS": "11.3",
        "Nodejs": "10.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.asyncIterator</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@asyncIterator</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable protocol</a> looks up this symbol for the method that returns the async iterator for an object. In order for an object to be async iterable, it must have an <code>@@asyncIterator</code> key."
    },
    "symbol.description": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/description",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "70",
        "ChromeAndroid": "70",
        "Edge": "79",
        "Firefox": "63",
        "Opera": "57",
        "Safari": "12.1",
        "SafariIOS": "12.2",
        "Nodejs": "11.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>description</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> values returns a string containing the description of this symbol, or <code>undefined</code> if the symbol has no description."
    },
    "symbol.for": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/for",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "40",
        "ChromeAndroid": "40",
        "Edge": "",
        "Firefox": "36",
        "Opera": "27",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.for()</code></strong> static method searches for existing symbols\nin a runtime-wide symbol registry with the given key and returns it if found. Otherwise\na new symbol gets created in the global symbol registry with this key.",
      "parameters": {
        "key": "String, required. The key for the symbol (and also used for the description of the symbol)."
      },
      "returns": "An existing symbol with the given key if found; otherwise, a new symbol is created and\n  returned."
    },
    "symbol.hasinstance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/hasinstance",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "15",
        "Firefox": "50",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.hasInstance</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@hasInstance</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator looks up this symbol on its right-hand operand for the method used to determine if the constructor object recognizes an object as its instance."
    },
    "symbol.isconcatspreadable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/isconcatspreadable",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "48",
        "ChromeAndroid": "48",
        "Edge": "15",
        "Firefox": "48",
        "Opera": "35",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.isConcatSpreadable</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@isConcatSpreadable</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a> method looks up this symbol on each object being concatenated to determine if it should be treated as an array-like object and flattened to its array elements."
    },
    "symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "43",
        "ChromeAndroid": "43",
        "Edge": "",
        "Firefox": "36",
        "Opera": "30",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.iterator</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@iterator</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable protocol</a> looks up this symbol for the method that returns the iterator for an object. In order for an object to be iterable, it must have an <code>@@iterator</code> key."
    },
    "symbol.keyfor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/keyfor",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "40",
        "ChromeAndroid": "40",
        "Edge": "",
        "Firefox": "36",
        "Opera": "27",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.keyFor()</code></strong> static method retrieves a shared symbol\nkey from the global symbol registry for the given symbol.",
      "parameters": {
        "sym": "Symbol, required. The symbol to find a key for."
      },
      "returns": "A string representing the key for the given symbol if one is found on the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">global registry</a>; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "symbol.match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/match",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "40",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.match</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@match</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> method looks up this symbol on its first argument for the method used to match an input string against the current object. This symbol is also used to determine if an object should be <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes\">treated as a regex</a>.\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@match\"><code>RegExp.prototype[@@match]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a>."
    },
    "symbol.matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/matchall",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "73",
        "ChromeAndroid": "73",
        "Edge": "79",
        "Firefox": "67",
        "Opera": "60",
        "Safari": "13",
        "SafariIOS": "13",
        "Nodejs": "12.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.matchAll</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@matchAll</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a> method looks up this symbol on its first argument for the method that returns an iterator, that yields matches of the current object against a string.\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\"><code>RegExp.prototype[@@matchAll]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a>."
    },
    "symbol.replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/replace",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.replace</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@replace</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a> method looks up this symbol on its first argument for the method that replaces substrings matched by the current object.\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a>."
    },
    "symbol.search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/search",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.search</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@search</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a> method looks up this symbol on its first argument for the method that returns the index within a string that matches the current object.\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a>."
    },
    "symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "41",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.species</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@species</code>. Methods that create copies of an object may look up this symbol on the object for the constructor function to use when creating the copy.\n<div class=\"notecard warning\" id=\"sect1\">\n<p><strong>Warning:</strong> The existence of <code>@@species</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>"
    },
    "symbol.split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/split",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "50",
        "ChromeAndroid": "50",
        "Edge": "79",
        "Firefox": "49",
        "Opera": "37",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.split</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@split</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a> method looks up this symbol on its first argument for the method that splits a string at the indices that match the current object.\n<p>For more information, see<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a>."
    },
    "symbol.symbol": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/symbol",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol()</code></strong> function returns primitive values of type Symbol.",
      "parameters": {
        "description": "A string. A description of the symbol which can be used for debugging but not to access the symbol itself."
      }
    },
    "symbol.toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/toprimitive",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "15",
        "Firefox": "44",
        "Opera": "34",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.toPrimitive</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@toPrimitive</code>. All <a href=\"$MDN_URL$/Web/JavaScript/Data_structures#type_coercion\">type coercion</a> algorithms look up this symbol on objects for the method that accepts a preferred type and returns a primitive representation of the object, before falling back to using the object's <code>valueOf()</code> and <code>toString()</code> methods."
    },
    "symbol.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the specified symbol value.",
      "returns": "A string representing the specified symbol value."
    },
    "symbol.tostringtag": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tostringtag",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "15",
        "Firefox": "51",
        "Opera": "36",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.toStringTag</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@toStringTag</code>. <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> looks up this symbol on the <code>this</code> value for the property containing a string that represents the type of the object."
    },
    "symbol.unscopables": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/unscopables",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "48",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>Symbol.unscopables</code></strong> static data property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols\">well-known symbol</a> <code>@@unscopables</code>. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/with\"><code>with</code></a> statement looks up this symbol on the scope object for a property containing a collection of properties that should not become bindings within the <code>with</code> environment."
    },
    "symbol.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/valueof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>valueOf()</code></strong> method returns the primitive value of a Symbol object.",
      "returns": "The primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> object."
    },
    "syntaxerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/syntaxerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>SyntaxError</code></strong> object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.\n<p><code>SyntaxError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/structuredClone\"><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>SyntaxError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "syntaxerror.syntaxerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/syntaxerror/syntaxerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>SyntaxError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error",
        "options": "An object that has the following properties: <dl> <dt id=\"cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. </dd> </dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "typedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "A <strong><em>TypedArray</em></strong> object describes an array-like view of an\nunderlying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">binary data buffer</a>.\nThere is no global property named <code>TypedArray</code>, nor is there a\ndirectly visible <code>TypedArray</code> constructor. Instead, there are a number of\ndifferent global properties, whose values are typed array constructors for specific\nelement types, listed below. On the following pages you will find common properties and\nmethods that can be used with any typed array containing elements of any type.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "typedarray.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "36",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>[@@iterator]()</code></strong> method of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances implements the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol</a> and allows typed arrays to be consumed by most syntaxes expecting iterables, such as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loops. It returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator object</a> that yields the value of each index in the typed array.\n<p>The initial value of this property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/values\"><code>TypedArray.prototype.values</code></a> property.",
      "returns": "The same return value as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/values\"><code>TypedArray.prototype.values()</code></a>: a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a> that yields the value of each index in the typed array."
    },
    "typedarray.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/@@species",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "51",
        "ChromeAndroid": "51",
        "Edge": "13",
        "Firefox": "48",
        "Opera": "38",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.5.0",
        "Deno": ""
      },
      "doc": "The <strong><code>TypedArray[@@species]</code></strong> static accessor property returns the constructor used to construct return values from typed array methods.\n<div class=\"notecard warning\" id=\"sect1\">\n<p><strong>Warning:</strong> The existence of <code>@@species</code> allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing\" class=\"external\" target=\"_blank\">investigating whether to remove this feature</a>. Avoid relying on it if possible.\n</div>",
      "returns": "The value of the constructor (<code>this</code>) on which <code>get @@species</code> was called. The return value is used to construct return values from typed array methods that create new typed arrays."
    },
    "typedarray.at": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/at",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "92",
        "ChromeAndroid": "92",
        "Edge": "92",
        "Firefox": "90",
        "Opera": "78",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "16.6.0"
      },
      "doc": "The <strong><code>at()</code></strong> method takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.\n<p>This is not to suggest there is anything wrong with using the square bracket notation. For example <code>array[0]</code> would return the first item. However instead of using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/length\"><code>array.length</code></a> for latter items; e.g. <code>array[array.length-1]</code> for the last item, you can call <code>array.at(-1)</code>. <a href=\"#examples\">(See the examples below)</a>",
      "parameters": {
        "index": "The index (position) of the array element to be returned. Supports relative indexing from the end of the array when passed a negative index; that is, if a negative number is used, the element returned will be found by counting back from the end of the array."
      },
      "returns": "The element in the array matching the given index. Returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the given index can not be found."
    },
    "typedarray.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/buffer",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>buffer</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> referenced by this typed array at construction time."
    },
    "typedarray.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/bytelength",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>byteLength</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the length (in bytes) of this typed array."
    },
    "typedarray.byteoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/byteoffset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>byteOffset</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the offset (in bytes) of this typed array from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>."
    },
    "typedarray.copywithin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/copywithin",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "34",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>copyWithin()</code></strong> method copies the sequence of array\nelements within the array to the position starting at <code>target</code>.\nThe copy is taken from the index positions of the second and third arguments\n<code>start</code> and <code>end</code>. The\n<code>end</code> argument is optional and defaults to the length of the\narray. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>Array.prototype.copyWithin</code></a>.\n<em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "target": "Target start index position where to copy the elements to.",
        "start": "Source start index position where to start copying elements from.",
        "end": "Optional. Source end index position where to end copying elements from."
      },
      "returns": "The modified array."
    },
    "typedarray.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/entries",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>entries()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> that contains the key/value pairs for each index in the array.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "typedarray.every": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/every",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>every()</code></strong> method tests whether all elements in the\ntyped array pass the test implemented by the provided function. This method has the same\nalgorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a>. <em>TypedArray</em> is one\nof the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>every()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<code>true</code> if the callback function returns a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value for\n  every array element; otherwise, <code>false</code>."
    },
    "typedarray.fill": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/fill",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>fill()</code></strong> method fills all the elements of a typed array\nfrom a start index to an end index with a static value. This method has the same\nalgorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>Array.prototype.fill()</code></a>. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "value": "Value to fill the typed array with.",
        "start": "Start index. Defaults to 0.",
        "end": "End index (not included). Defaults to <code>this.length</code>."
      },
      "returns": "The modified array."
    },
    "typedarray.filter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/filter",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "38",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>filter()</code></strong> method creates a new typed array with all\nelements that pass the test implemented by the provided function. This method has the\nsame algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.prototype.filter()</code></a>. <em>TypedArray</em> is one of\nthe <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to keep the element in the resulting typed array, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>filter()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A new typed array with the elements that pass the test."
    },
    "typedarray.find": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/find",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>find()</code></strong> method returns a value of an element in the\ntyped array, if it satisfies the provided testing function. Otherwise\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex\"><code>findIndex()</code></a> method, which returns\nthe <strong>index</strong> of a found element in the typed array instead of its value.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The array <code>find()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A value in the array if an element passes the test; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "typedarray.findindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/findindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>findIndex()</code></strong> method returns an <strong>index</strong>\nin the typed array, if an element in the typed array satisfies the provided testing\nfunction. Otherwise -1 is returned.\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/find\"><code>find()</code></a> method, which returns the\n<strong>value</strong> of a found element in the typed array instead of its index.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>findIndex()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "An index in the array if an element passes the test; otherwise, <code>-1</code>."
    },
    "typedarray.findlast": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/findlast",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "97",
        "ChromeAndroid": "97",
        "Edge": "97",
        "Firefox": "104",
        "Opera": "83",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Deno": "1.16"
      },
      "doc": "The <strong><code>findLast()</code></strong> method iterates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array</a> in reverse order and returns the value of the first element that satisfies the provided testing function.\nIf no values satisfy the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/findLastIndex\"><code>findLastIndex()</code></a> method, which returns the index of the found element instead of its value.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>findLast()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The element in the typed array with the highest index value that satisfies the provided testing function; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no matching value is found."
    },
    "typedarray.findlastindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/findlastindex",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "97",
        "ChromeAndroid": "97",
        "Edge": "97",
        "Firefox": "104",
        "Opera": "83",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Deno": "1.16"
      },
      "doc": "The <strong><code>findLastIndex()</code></strong> method iterates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array</a> in reverse order and returns the index of the first element that satisfies the provided testing function.\nIf no values satisfy the testing function, -1 is returned.\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/findLast\"><code>findLast()</code></a> method, which returns the value of the found element rather than its index.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate a matching element has been found, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>findLastIndex()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "The index of the last (highest-index) element in the array that passes the test.\n  Otherwise -1 if no matching element is found."
    },
    "typedarray.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/foreach",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "38",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>forEach()</code></strong> method executes a provided function once\nper array element. This method has the same algorithm as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a>. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. Its return value is discarded. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>forEach()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>."
    },
    "typedarray.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/from",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "38",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>TypedArray.from()</code></strong> static method creates a new\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array</a>\nfrom an array-like or iterable object. This method is nearly the same as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>.",
      "parameters": {
        "arrayLike": "An iterable or array-like object to convert to a typed array.",
        "mapFn": "A function to call on every element of the typed array. If provided, every value to be added to the array is first passed through this function, and <code>mapFn</code>'s return value is added to the typed array instead. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> </dl>",
        "thisArg": "Value to use as <code>this</code> when executing <code>mapFn</code>."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance."
    },
    "typedarray.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/includes",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "47",
        "ChromeAndroid": "47",
        "Edge": "14",
        "Firefox": "43",
        "Opera": "34",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "6.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>includes()</code></strong> method determines whether a typed array\nincludes a certain element, returning <code>true</code> or <code>false</code> as\nappropriate. This method has the same algorithm as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a>. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "searchElement": "The element to search for.",
        "fromIndex": "The position in this array at which to begin searching for <code>searchElement</code>; defaults to 0."
      },
      "returns": "A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>."
    },
    "typedarray.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/indexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>indexOf()</code></strong> method returns the first index at which a\ngiven element can be found in the typed array, or -1 if it is not present. This method\nhas the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a>. <em>TypedArray</em>\nis one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "searchElement": "Element to locate in the typed array.",
        "fromIndex": "The index to start the search at. If the index is greater than or equal to the typed array's length, -1 is returned, which means the typed array will not be searched. If the provided index value is a negative number, it is taken as the offset from the end of the typed array. Note: if the provided index is negative, the typed array is still searched from front to back. If the calculated index is less than 0, then the whole typed array will be searched. Default: 0 (entire typed array is searched)."
      },
      "returns": "The first index of the element in the array; <code>-1</code> if not found."
    },
    "typedarray.join": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/join",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>join()</code></strong> method joins all elements of an array into a\nstring. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a>.\n<em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "separator": "Specifies a string to separate each element. The <code>separator</code> is converted to a string if necessary. If omitted, the typed array elements are separated with a comma (\",\")."
      },
      "returns": "A string with all array elements joined."
    },
    "typedarray.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/keys",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "37",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>keys()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that contains the keys for each index in the array.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "typedarray.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>lastIndexOf()</code></strong> method returns the last index at which\na given element can be found in the typed array, or -1 if it is not present. The typed\narray is searched backwards, starting at <code>fromIndex</code>. This method has the\nsame algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.prototype.lastIndexOf()</code></a>. <em>TypedArray</em> is\none of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "searchElement": "Element to locate in the typed array.",
        "fromIndex": "Optional. The index at which to start searching backwards. Defaults to the typed array's length, i.e. the whole typed array will be searched. If the index is greater than or equal to the length of the typed array, the whole typed array will be searched. If negative, it is taken as the offset from the end of the typed array. Note that even when the index is negative, the typed array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the typed array will not be searched."
      },
      "returns": "The last index of the element in the array; <code>-1</code> if not found."
    },
    "typedarray.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/length",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>length</code></strong> accessor property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances returns the length (in elements) of this typed array."
    },
    "typedarray.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/map",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "38",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>map()</code></strong> method creates a new typed array with the\nresults of calling a provided function on every element in this typed array. This method\nhas the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array.prototype.map()</code></a>.\n<em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. Its return value is added as a single element in the new typed array. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>map()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "A new typed array."
    },
    "typedarray.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/of",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "38",
        "Opera": "32",
        "Safari": "9.1",
        "SafariIOS": "9.3",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>TypedArray.of()</code></strong> static method creates a new\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array</a> from a variable number of arguments. This method is nearly the same as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/of\"><code>Array.of()</code></a>.",
      "parameters": {
        "elementN": "Elements of which to create the typed array."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance."
    },
    "typedarray.reduce": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reduce",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>reduce()</code></strong> method applies a function against an\naccumulator and each value of the typed array (from left-to-right) has to reduce it to a\nsingle value. This method has the same algorithm as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>Array.prototype.reduce()</code></a>. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. Its return value becomes the value of the <code>accumulator</code> parameter on the next invocation of <code>callbackFn</code>. For the last invocation, the return value becomes the return value of <code>reduce()</code>. The function is called with the following arguments: <dl> <dt id=\"accumulator\"><code>accumulator</code></dt> <dd> <p>The value resulting from the previous call to <code>callbackFn</code>. On first call, <code>initialValue</code> if specified, otherwise the value of <code>array[0]</code>. </dd> <dt id=\"currentvalue\"><code>currentValue</code></dt> <dd> <p>The value of the current element. On first call, the value of <code>array[0]</code> if an <code>initialValue</code> was specified, otherwise the value of <code>array[1]</code>. </dd> <dt id=\"currentindex\"><code>currentIndex</code></dt> <dd> <p>The index position of <code>currentValue</code> in the typed array. On first call, <code>0</code> if <code>initialValue</code> was specified, otherwise <code>1</code>. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>reduce()</code> was called upon. </dd> </dl>",
        "initialValue": "A value to which <code>accumulator</code> is initialized the first time the callback is called. If <code>initialValue</code> is specified, <code>callbackFn</code> starts executing with the first value in the typed array as <code>currentValue</code>. If <code>initialValue</code> is <em>not</em> specified, <code>accumulator</code> is initialized to the first value in the typed array, and <code>callbackFn</code> starts executing with the second value in the typed array as <code>currentValue</code>. In this case, if the typed array is empty (so that there's no first value to return as <code>accumulator</code>), an error is thrown."
      },
      "returns": "The value that results from the reduction."
    },
    "typedarray.reduceright": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reduceright",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>reduceRight()</code></strong> method applies a function against an\naccumulator and each value of the typed array (from right-to-left) has to reduce it to a\nsingle value. This method has the same algorithm as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>Array.prototype.reduceRight()</code></a>. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. Its return value becomes the value of the <code>accumulator</code> parameter on the next invocation of <code>callbackFn</code>. For the last invocation, the return value becomes the return value of <code>reduceRight()</code>. The function is called with the following arguments: <dl> <dt id=\"accumulator\"><code>accumulator</code></dt> <dd> <p>The value previously returned in the last invocation of the callback, or <code>initialValue</code>, if supplied. (See below.) </dd> <dt id=\"currentvalue\"><code>currentValue</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>reduceRight()</code> was called upon. </dd> </dl>",
        "initialValue": "Value to use as accumulator to the first call of the <code>callbackFn</code>. If no initial value is supplied, the last element in the array will be used and skipped. Calling <code>reduceRight()</code> on an empty array without an initial value creates a <code>TypeError</code>."
      },
      "returns": "The value that results from the reduction."
    },
    "typedarray.reverse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reverse",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>reverse()</code></strong> method reverses a typed array in place. The\nfirst typed array element becomes the last and the last becomes the first. This method\nhas the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a>. <em>TypedArray</em>\nis one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "returns": "The reversed array."
    },
    "typedarray.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>set()</code></strong> method stores multiple values in the typed\narray, reading input values from a specified array.",
      "parameters": {
        "array": "The array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the target offset exceeds the length of the target array, in which case an exception is thrown.",
        "typedarray": "If the source array is a typed array, the two arrays may share the same underlying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>; the JavaScript engine will intelligently <strong>copy</strong> the source range of the buffer to the destination range.",
        "targetOffset": "The offset into the target array at which to begin writing values from the source array. If this value is omitted, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0)."
      },
      "returns": "<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "throws": {
        "RangeError": "Thrown if one of the two conditions is met: <ul> <li>An element will be stored beyond the end of the typed array, either because <code>targetOffset</code> is too large or because <code>array</code> or <code>typedarray</code> is too large.</li> <li><code>targetOffset</code> is negative.</li> </ul>"
      }
    },
    "typedarray.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/slice",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "38",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>slice()</code></strong> method returns a new typed array (with a new\nunderlying buffer), that contains a copy of a portion of the original typed array. This\nmethod has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>.\n<em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "start": "Zero-based index at which to begin extraction. <p>A negative index can be used, indicating an offset from the end of the sequence. <code>slice(-2)</code> extracts the last two elements in the sequence. <p>If <code>start</code> is undefined, <code>slice</code> begins from index <code>0</code>.",
        "end": "Zero-based index <em>before</em> which to end extraction. <code>slice</code> extracts up to but not including <code>end</code>. <p>For example, <code>slice(1,4)</code> extracts the second element through the fourth element (elements indexed 1, 2, and 3). <p>A negative index can be used, indicating an offset from the end of the sequence. <code>slice(2,-1)</code> extracts the third element through the second-to-last element in the sequence. <p>If <code>end</code> is omitted, <code>slice</code> extracts through the end of the sequence (<code>typedarray.length</code>)."
      },
      "returns": "A new typed array containing the extracted elements."
    },
    "typedarray.some": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/some",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "37",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>some()</code></strong> method tests whether some element in the typed\narray passes the test implemented by the provided function. This method has the same\nalgorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a>. <em>TypedArray</em> is one\nof the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "callbackFn": "A function to execute for each element in the typed array. It should return a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value to indicate the element passes the test, and a <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> value otherwise. The function is called with the following arguments: <dl> <dt id=\"element\"><code>element</code></dt> <dd> <p>The current element being processed in the typed array. </dd> <dt id=\"index\"><code>index</code></dt> <dd> <p>The index of the current element being processed in the typed array. </dd> <dt id=\"array\"><code>array</code></dt> <dd> <p>The typed array <code>some()</code> was called upon. </dd> </dl>",
        "thisArg": "A value to use as <code>this</code> when executing <code>callbackFn</code>. See <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods\">iterative methods</a>."
      },
      "returns": "<strong><code>true</code></strong> if the callback function returns a <a href=\"$MDN_URL$/Glossary/Truthy\">truthy</a> value for any array element; otherwise,\n  <strong><code>false</code></strong>."
    },
    "typedarray.sort": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/sort",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "",
        "Firefox": "46",
        "Opera": "32",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "4.0.0",
        "Deno": ""
      },
      "doc": "The <strong><code>sort()</code></strong> method sorts the elements of a typed array\nnumerically <em>in place</em> and returns the typed array. This method has the same\nalgorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a>, except that it sorts the values numerically instead of as strings by default. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "compareFunction": "A function that defines the sort order. The return value should be a number whose positivity indicates the relative order of the two elements. The function is called with the following arguments: <dl> <dt id=\"a\"><code>a</code></dt> <dd> <p>The first element for comparison. Will never be <code>undefined</code>. </dd> <dt id=\"b\"><code>b</code></dt> <dd> <p>The second element for comparison. Will never be <code>undefined</code>. </dd> </dl> <p>If omitted, the array elements are sorted according to numeric value."
      },
      "returns": "The sorted typed array."
    },
    "typedarray.subarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/subarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>subarray()</code></strong> method returns a new <em>TypedArray</em>\non the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> store and with the same element types as for this\n<em>TypedArray</em> object. The begin offset is <strong>inclusive</strong> and the end\noffset is <strong>exclusive</strong>. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a>.",
      "parameters": {
        "begin": "Element to begin at. The offset is inclusive. The whole array will be included in the new view if this value is not specified.",
        "end": "Element to end at. The offset is exclusive. If not specified, all elements from the one specified by <code>begin</code> to the end of the array are included in the new view."
      },
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> object."
    },
    "typedarray.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "51",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toLocaleString()</code></strong> method returns a string representing\nthe elements of the typed array. The elements are converted to strings and are separated\nby a locale-specific string (such as a comma \",\"). This method has the same algorithm as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>Array.prototype.toLocaleString()</code></a> and, as the typed array elements are\nnumbers, the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code></a> applies\nfor each element. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "returns": "A string representing the elements of the typed array."
    },
    "typedarray.toreversed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/toreversed",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "doc": "The <strong><code>toReversed()</code></strong> method is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> counterpart of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse\"><code>reverse()</code></a> method. It returns a new array with the elements in reversed order. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "returns": "A new typed array containing the elements in reversed order."
    },
    "typedarray.tosorted": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tosorted",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "doc": "The <strong><code>toSorted()</code></strong> method is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/sort\"><code>sort()</code></a> method. It returns a new array with the elements sorted in ascending order. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"><code>Array.prototype.toSorted()</code></a>, except that it sorts the values numerically instead of as strings by default. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "compareFn": "Specifies a function that defines the sort order."
      },
      "returns": "A new typed array with the elements sorted in ascending order."
    },
    "typedarray.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tostring",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "51",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "5",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>toString()</code></strong> method returns a string representing the\nspecified array and its elements. This method has the same algorithm as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>Array.prototype.toString()</code></a>. <em>TypedArray</em> is one of the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "returns": "A string representing the elements of the typed array."
    },
    "typedarray.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/values",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "38",
        "ChromeAndroid": "38",
        "Edge": "",
        "Firefox": "37",
        "Opera": "25",
        "Safari": "10",
        "SafariIOS": "10",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>values()</code></strong> method returns a new <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">array iterator</a></em> object that contains the values for each index in the array.",
      "returns": "A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Iterator\">iterable iterator object</a>."
    },
    "typedarray.with": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/with",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "110",
        "ChromeAndroid": "110",
        "Edge": "110",
        "Firefox": "115",
        "Opera": "96",
        "Safari": "16",
        "SafariIOS": "16",
        "Nodejs": "20.0.0",
        "Deno": "1.31"
      },
      "doc": "The <strong><code>with()</code></strong> method is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\">copying</a> version of using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation\">bracket notation</a> to change the value of a given index. It returns a new array with the element at the given index replaced with the given value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/with\"><code>Array.prototype.with()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects\">typed array types</a> here.",
      "parameters": {
        "index": "Zero-based index at which to change the array, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a>. <ul> <li>Negative index counts back from the end of the array — if <code>start &lt; 0</code>, <code>start + array.length</code> is used.</li> <li>If <code>start</code> is omitted, <code>0</code> is used.</li> <li>If the index, with negative values counted backwards, is out of bounds, a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown.</li> </ul>",
        "value": "Any value to be assigned to the given index."
      },
      "returns": "A new typed array with the element at <code>index</code> replaced with <code>value</code>.",
      "throws": {
        "RangeError": "Thrown if <code>index &gt; array.length</code> or <code>index &lt; -array.length</code>."
      }
    },
    "typeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typeerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>TypeError</code></strong> object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.\n<p>A <code>TypeError</code> may be thrown when:\n<ul>\n<li>an operand or argument passed to a function is incompatible with the type expected by that operator or function; or</li>\n<li>when attempting to modify a value that cannot be changed; or</li>\n<li>when attempting to use a value in an inappropriate way.</li>\n</ul>\n<p><code>TypeError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/structuredClone\"><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>TypeError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "typeerror.typeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typeerror/typeerror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>TypeError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error",
        "options": "An object that has the following properties: <dl> <dt id=\"cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. </dd> </dl>",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "uint16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Uint16Array</code></strong> typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Uint16Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "uint16array.uint16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint16array/uint16array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Uint16Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a> objects. The contents are initialized to <code>0</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "uint32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Uint32Array</code></strong> typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Uint32Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "uint32array.uint32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint32array/uint32array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Uint32Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a> objects. The contents are initialized to <code>0</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "uint8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Uint8Array</code></strong> typed array represents an array of 8-bit unsigned integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Uint8Array</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "uint8array.uint8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/uint8array",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Uint8Array()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> objects. The contents are initialized to <code>0</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "uint8clampedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8clampedarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Uint8ClampedArray</code></strong> typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n<p><code>Uint8ClampedArray</code> is a subclass of the hidden <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> class."
    },
    "uint8clampedarray.uint8clampedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8clampedarray/uint8clampedarray",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.6",
        "Safari": "5.1",
        "SafariIOS": "4.2",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>Uint8ClampedArray()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\"><code>Uint8ClampedArray</code></a> objects. The contents are initialized to <code>0</code>.",
      "parameters": {
        "typedArray": "When called with an instance of a <code>TypedArray</code> subclass, the <code>typedArray</code> gets copied into a new typed array. For a non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor, the <code>typedArray</code> parameter can only be of one of the non-<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types (such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>). Similarly, for a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> <code>TypedArray</code> constructor (<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>), the <code>typedArray</code> parameter can only be of one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> types. Each value in <code>typedArray</code> is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the <code>typedArray</code> argument.",
        "object": "When called with an object that's not a <code>TypedArray</code> instance, a new typed array is created in the same way as the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> method.",
        "length": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size <code>length</code> multiplied by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes, filled with zeros. Omitting all parameters is equivalent to using <code>0</code> as <code>length</code>.",
        "buffer, byteOffset": "When called with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance, and optionally a <code>byteOffset</code> and a <code>length</code> argument, a new typed array view is created that views the specified buffer. The <code>byteOffset</code> (in bytes) and <code>length</code> (in number of elements, each occupying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\"><code>BYTES_PER_ELEMENT</code></a> bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of <code>buffer</code> is viewed; if only <code>length</code> is omitted, the remainder of <code>buffer</code> starting from <code>byteOffset</code> is viewed. If <code>length</code> is omitted, the typed array becomes <a href=\"#behavior_when_viewing_a_resizable_buffer\">length-tracking</a>."
      },
      "throws": {
        "TypeError": "Thrown in one of the following cases: <ul> <li>A <code>typedArray</code> is passed but it is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\">bigint</a> type while the current constructor is not, or vice versa.</li> <li>A <code>typedArray</code> is passed but the buffer it's viewing is detached, or a detached <code>buffer</code> is directly passed.</li> </ul>",
        "RangeError": "Thrown in one of the following cases: <ul> <li>The new typed array's length is too large.</li> <li>The length of <code>buffer</code> (if the <code>length</code> parameter is not specified) or <code>byteOffset</code> is not an integral multiple of the new typed array's element size.</li> <li><code>byteOffset</code> is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).</li> <li>When creating a view from a buffer, the bounds are outside the buffer. In other words, <code>byteOffset + length * TypedArray.BYTES_PER_ELEMENT &gt; buffer.byteLength</code>.</li> </ul>"
      }
    },
    "undefined": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/undefined",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>undefined</code></strong> global property represents the primitive\nvalue <code><a href=\"$MDN_URL$/Glossary/Undefined\">undefined</a></code>. It is one of JavaScript's\n<a href=\"$MDN_URL$/Glossary/Primitive\">primitive types</a>."
    },
    "unescape": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/unescape",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "3",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</div>\n<div class=\"notecard note\" id=\"sect2\">\n<p><strong>Note:</strong> <code>unescape()</code> is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\"><code>decodeURIComponent()</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/decodeURI\"><code>decodeURI()</code></a> if possible.\n</div>\n<p>The <strong><code>unescape()</code></strong> function computes a new string in which hexadecimal escape sequences are replaced with the characters that they represent. The escape sequences might be introduced by a function like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/escape\"><code>escape()</code></a>.",
      "parameters": {
        "str": "A string to be decoded."
      },
      "returns": "A new string in which certain characters have been unescaped."
    },
    "urierror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/urierror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>URIError</code></strong> object represents an error when a global URI handling function was used in a wrong way.\n<p><code>URIError</code> is a <a href=\"$MDN_URL$/Glossary/Serializable_object\">serializable object</a>, so it can be cloned with <a href=\"$MDN_URL$/Web/API/structuredClone\"><code>structuredClone()</code></a> or copied between <a href=\"$MDN_URL$/Web/API/Worker\">Workers</a> using <a href=\"$MDN_URL$/Web/API/Worker/postMessage\" ><code>postMessage()</code></a>.\n<p><code>URIError</code> is a subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>."
    },
    "urierror.urierror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/urierror/urierror",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "5",
        "Safari": "",
        "SafariIOS": "",
        "Nodejs": "",
        "Deno": ""
      },
      "doc": "The <strong><code>URIError()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/URIError\"><code>URIError</code></a> objects.",
      "parameters": {
        "message": "Human-readable description of the error.",
        "options": "An object that has the following properties: <dl> <dt id=\"cause\"><code>cause</code> <span class=\"badge inline optional\">Optional</span></dt> <dd> <p>A property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. </dd> </dl>",
        "fileName": "The name of the file containing the code that caused the exception.",
        "lineNumber": "The line number of the code that caused the exception."
      }
    },
    "weakmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "A <strong><code>WeakMap</code></strong> is a collection of key/value pairs whose keys must be objects or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbols</a>, with values of any arbitrary <a href=\"$MDN_URL$/Web/JavaScript/Data_structures\">JavaScript type</a>, and which does not create strong references to its keys. That is, an object's presence as a key in a <code>WeakMap</code> does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any <code>WeakMap</code> become candidates for garbage collection as well — as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a <code>WeakMap</code> key is symbol — more specifically, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbols</a> — because non-registered symbols are guaranteed to be unique and cannot be re-created.\n<p><code>WeakMap</code> allows associating data to objects in a way that doesn't prevent the key objects from being collected, even if the values reference the keys. However, a <code>WeakMap</code> doesn't allow observing the liveness of its keys, which is why it doesn't allow enumeration; if a <code>WeakMap</code> exposed any method to obtain a list of its keys, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> rather than a <code>WeakMap</code>.\n<p>You can learn more about <code>WeakMap</code> in the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections#weakmap_object\">WeakMap object</a> section of the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a> guide."
    },
    "weakmap.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/delete",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>delete()</code></strong> method removes the specified element from a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> object.",
      "parameters": {
        "key": "The key of the element to remove from the <code>WeakMap</code> object."
      },
      "returns": "<code>true</code> if an element in the <code>WeakMap</code> object has been removed successfully. <code>false</code> if the key is not found in the <code>WeakMap</code>. Always returns <code>false</code> if <code>key</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakmap.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/get",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>get()</code></strong> method returns a specified element from a\n<code>WeakMap</code> object.",
      "parameters": {
        "key": "The key of the element to return from the <code>WeakMap</code> object."
      },
      "returns": "The element associated with the specified key in the <code>WeakMap</code> object. If\n  the key can't be found, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned. Always returns\n  <code>undefined</code> if <code>key</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakmap.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>has()</code></strong> method returns a boolean indicating whether an\nelement with the specified key exists in the <code>WeakMap</code> object or not.",
      "parameters": {
        "key": "The key of the element to test for presence in the <code>WeakMap</code> object."
      },
      "returns": "Returns <code>true</code> if an element with the specified key exists in the <code>WeakMap</code> object; otherwise <code>false</code>. Always returns <code>false</code> if <code>key</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakmap.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/set",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>set()</code></strong> method adds a new element with a specified key\nand value to a <code>WeakMap</code> object.",
      "parameters": {
        "key": "Must be either an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>. The key of the entry to add to the <code>WeakMap</code> object.",
        "value": "Any value representing the value of the entry to add to the <code>WeakMap</code> object."
      },
      "returns": "The <code>WeakMap</code> object.",
      "throws": {
        "TypeError": "Thrown if <code>key</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      }
    },
    "weakmap.weakmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/weakmap",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "6",
        "Opera": "23",
        "Safari": "8",
        "SafariIOS": "8",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>WeakMap()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> objects.",
      "parameters": {
        "iterable": "An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> or other iterable object that implements an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\">@@iterator</a> method that returns an iterator object that produces a two-element array-like object whose first element is a value that will be used as a <code>WeakMap</code> key and whose second element is the value to associate with that key. Each key-value pair will be added to the new <code>WeakMap</code>. null is treated as undefined."
      }
    },
    "weakref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "doc": "A <strong><code>WeakRef</code></strong> object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected."
    },
    "weakref.deref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref/deref",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "doc": "The <strong><code>deref()</code></strong> method returns the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakRef\"><code>WeakRef</code></a> instance's target value, or <code>undefined</code> if the target value has been garbage-collected.",
      "returns": "The target value of the WeakRef, which is either an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>. Returns <code>undefined</code> if the value has been garbage-collected."
    },
    "weakref.weakref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref/weakref",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "84",
        "ChromeAndroid": "84",
        "Edge": "84",
        "Firefox": "79",
        "Opera": "70",
        "Safari": "14.1",
        "SafariIOS": "14.5",
        "Nodejs": "14.6.0",
        "Deno": ""
      },
      "doc": "The <strong><code>WeakRef()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakRef\"><code>WeakRef</code></a> objects.",
      "parameters": {
        "target": "The target value the WeakRef should refer to (also called the <em>referent</em>). Must be an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      },
      "returns": "A new <code>WeakRef</code> object referring to the given target value.",
      "throws": {
        "TypeError": "Thrown if <code>target</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      }
    },
    "weakset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "A <strong><code>WeakSet</code></strong> is a collection of garbage-collectable values, including objects and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbols</a>. A value in the <code>WeakSet</code> may only occur once. It is unique in the <code>WeakSet</code>'s collection."
    },
    "weakset.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/add",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>add()</code></strong> method appends a new object to the end of a\n<code>WeakSet</code> object.",
      "parameters": {
        "value": "Must be either an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>. The value to add to the <code>WeakSet</code> collection."
      },
      "returns": "The <code>WeakSet</code> object.",
      "throws": {
        "TypeError": "Thrown if <code>value</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
      }
    },
    "weakset.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/delete",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>delete()</code></strong> method removes the specified element from a\n<code>WeakSet</code> object.",
      "parameters": {
        "value": "The value to remove from the <code>WeakSet</code> object."
      },
      "returns": "<code>true</code> if an element in the <code>WeakSet</code> object has been removed successfully. <code>false</code> if the <code>value</code> is not found in the <code>WeakSet</code>. Always returns <code>false</code> if <code>value</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakset.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/has",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>has()</code></strong> method returns a boolean indicating whether an\nobject exists in a <code>WeakSet</code> or not.",
      "parameters": {
        "value": "The value to test for presence in the <code>WeakSet</code>."
      },
      "returns": "Returns <code>true</code> if an element with the specified value exists in the <code>WeakSet</code> object; otherwise <code>false</code>. Always returns <code>false</code> if <code>value</code> is not an object or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry\">non-registered symbol</a>."
    },
    "weakset.weakset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/weakset",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "",
        "Firefox": "34",
        "Opera": "23",
        "Safari": "9",
        "SafariIOS": "9",
        "Nodejs": "0.12.0",
        "Deno": ""
      },
      "doc": "The <strong><code>WeakSet()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> objects.",
      "parameters": {
        "iterable": "If an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\">iterable object</a> is passed, all of its elements will be added to the new <code>WeakSet</code>. null is treated as undefined."
      }
    }
  }
}